
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c0c  0801a654  0801a654  0002a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d260  0801d260  0002d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d268  0801d268  0002d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d26c  0801d26c  0002d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801d270  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010158  20000098  0801d308  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200101f0  0801d308  000301f0  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801d308  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005e0b1  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009af8  00000000  00000000  0008e177  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000028f8  00000000  00000000  00097c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002630  00000000  00000000  0009a568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004cf82  00000000  00000000  0009cb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00036100  00000000  00000000  000e9b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a57ff  00000000  00000000  0011fc1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c5419  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000af54  00000000  00000000  002c5494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a63c 	.word	0x0801a63c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0801a63c 	.word	0x0801a63c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <parse_eth_command>:

extern char uart3_send[200];


/* function parse received ethernet packet */
uint8_t parse_eth_command(char * eth_data, uint16_t eth_data_length, Eth_Packet * eth_packet){
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	460b      	mov	r3, r1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	817b      	strh	r3, [r7, #10]

	uint16_t index = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	83fb      	strh	r3, [r7, #30]
	uint16_t calc_checksum = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	83bb      	strh	r3, [r7, #28]

	// find start new packet in ethernet data
	while((index < eth_data_length) && (*(eth_data+index) != 's')) index++; calc_checksum += (uint8_t)'s';
 8000786:	e002      	b.n	800078e <parse_eth_command+0x1e>
 8000788:	8bfb      	ldrh	r3, [r7, #30]
 800078a:	3301      	adds	r3, #1
 800078c:	83fb      	strh	r3, [r7, #30]
 800078e:	8bfa      	ldrh	r2, [r7, #30]
 8000790:	897b      	ldrh	r3, [r7, #10]
 8000792:	429a      	cmp	r2, r3
 8000794:	d205      	bcs.n	80007a2 <parse_eth_command+0x32>
 8000796:	8bfb      	ldrh	r3, [r7, #30]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b73      	cmp	r3, #115	; 0x73
 80007a0:	d1f2      	bne.n	8000788 <parse_eth_command+0x18>
 80007a2:	8bbb      	ldrh	r3, [r7, #28]
 80007a4:	3373      	adds	r3, #115	; 0x73
 80007a6:	83bb      	strh	r3, [r7, #28]

	if(index >= eth_data_length) return no_packet_found;
 80007a8:	8bfa      	ldrh	r2, [r7, #30]
 80007aa:	897b      	ldrh	r3, [r7, #10]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d301      	bcc.n	80007b4 <parse_eth_command+0x44>
 80007b0:	2303      	movs	r3, #3
 80007b2:	e07b      	b.n	80008ac <parse_eth_command+0x13c>

	index++; if( *(eth_data+index) != 'n' ) return no_packet_found; calc_checksum += (uint8_t)'n';
 80007b4:	8bfb      	ldrh	r3, [r7, #30]
 80007b6:	3301      	adds	r3, #1
 80007b8:	83fb      	strh	r3, [r7, #30]
 80007ba:	8bfb      	ldrh	r3, [r7, #30]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b6e      	cmp	r3, #110	; 0x6e
 80007c4:	d001      	beq.n	80007ca <parse_eth_command+0x5a>
 80007c6:	2303      	movs	r3, #3
 80007c8:	e070      	b.n	80008ac <parse_eth_command+0x13c>
 80007ca:	8bbb      	ldrh	r3, [r7, #28]
 80007cc:	336e      	adds	r3, #110	; 0x6e
 80007ce:	83bb      	strh	r3, [r7, #28]
	index++; if( *(eth_data+index) != 'p' ) return no_packet_found; calc_checksum += (uint8_t)'p';
 80007d0:	8bfb      	ldrh	r3, [r7, #30]
 80007d2:	3301      	adds	r3, #1
 80007d4:	83fb      	strh	r3, [r7, #30]
 80007d6:	8bfb      	ldrh	r3, [r7, #30]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b70      	cmp	r3, #112	; 0x70
 80007e0:	d001      	beq.n	80007e6 <parse_eth_command+0x76>
 80007e2:	2303      	movs	r3, #3
 80007e4:	e062      	b.n	80008ac <parse_eth_command+0x13c>
 80007e6:	8bbb      	ldrh	r3, [r7, #28]
 80007e8:	3370      	adds	r3, #112	; 0x70
 80007ea:	83bb      	strh	r3, [r7, #28]

	//read command number and save in packet type variable
	index++; eth_packet->pacet_type = (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->pacet_type;
 80007ec:	8bfb      	ldrh	r3, [r7, #30]
 80007ee:	3301      	adds	r3, #1
 80007f0:	83fb      	strh	r3, [r7, #30]
 80007f2:	8bfb      	ldrh	r3, [r7, #30]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	8bbb      	ldrh	r3, [r7, #28]
 8000806:	4413      	add	r3, r2
 8000808:	83bb      	strh	r3, [r7, #28]

	//read number of parameters
	index++; eth_packet->data_length = (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->data_length;
 800080a:	8bfb      	ldrh	r3, [r7, #30]
 800080c:	3301      	adds	r3, #1
 800080e:	83fb      	strh	r3, [r7, #30]
 8000810:	8bfb      	ldrh	r3, [r7, #30]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	705a      	strb	r2, [r3, #1]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	b29a      	uxth	r2, r3
 8000822:	8bbb      	ldrh	r3, [r7, #28]
 8000824:	4413      	add	r3, r2
 8000826:	83bb      	strh	r3, [r7, #28]

	//read parameters value
	int i;
	for(i=0; i<eth_packet->data_length; i++){
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	e015      	b.n	800085a <parse_eth_command+0xea>
		index++;
 800082e:	8bfb      	ldrh	r3, [r7, #30]
 8000830:	3301      	adds	r3, #1
 8000832:	83fb      	strh	r3, [r7, #30]
		eth_packet->data[i] =  (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->data_length;
 8000834:	8bfb      	ldrh	r3, [r7, #30]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	7819      	ldrb	r1, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	4413      	add	r3, r2
 8000842:	3302      	adds	r3, #2
 8000844:	460a      	mov	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	b29a      	uxth	r2, r3
 800084e:	8bbb      	ldrh	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	83bb      	strh	r3, [r7, #28]
	for(i=0; i<eth_packet->data_length; i++){
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	461a      	mov	r2, r3
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	4293      	cmp	r3, r2
 8000864:	dbe3      	blt.n	800082e <parse_eth_command+0xbe>
	}

	// calcualte receive checksum
	uint16_t buf = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	82fb      	strh	r3, [r7, #22]
	index++; buf = (uint8_t) *(eth_data+index); buf = buf << 8;
 800086a:	8bfb      	ldrh	r3, [r7, #30]
 800086c:	3301      	adds	r3, #1
 800086e:	83fb      	strh	r3, [r7, #30]
 8000870:	8bfb      	ldrh	r3, [r7, #30]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	82fb      	strh	r3, [r7, #22]
 800087a:	8afb      	ldrh	r3, [r7, #22]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	82fb      	strh	r3, [r7, #22]
	index++; buf |= (uint8_t) *(eth_data+index);
 8000880:	8bfb      	ldrh	r3, [r7, #30]
 8000882:	3301      	adds	r3, #1
 8000884:	83fb      	strh	r3, [r7, #30]
 8000886:	8bfb      	ldrh	r3, [r7, #30]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29a      	uxth	r2, r3
 8000890:	8afb      	ldrh	r3, [r7, #22]
 8000892:	4313      	orrs	r3, r2
 8000894:	82fb      	strh	r3, [r7, #22]
	eth_packet->checksum = buf;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	8afa      	ldrh	r2, [r7, #22]
 800089a:	841a      	strh	r2, [r3, #32]

	if(calc_checksum != eth_packet->checksum) return checksum_error;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	8c1b      	ldrh	r3, [r3, #32]
 80008a0:	8bba      	ldrh	r2, [r7, #28]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d001      	beq.n	80008aa <parse_eth_command+0x13a>
 80008a6:	2302      	movs	r3, #2
 80008a8:	e000      	b.n	80008ac <parse_eth_command+0x13c>

//	sprintf(uart3_send, "Packet type: %d\n\rData length: %d\r\nPara: %d\r\nChecksum: %d\n\rCalc_checksum: %d\n\r", eth_packet->pacet_type, eth_packet->data_length, eth_packet->data[0], eth_packet->checksum, calc_checksum);
//	HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);

	return eth_packet_ok;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3724      	adds	r7, #36	; 0x24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <convert_eth_packet_to_tcp_array>:

}


/* convert struct tcp packet to array to be send */
void convert_eth_packet_to_tcp_array(char * eth_packet_data, uint16_t * eth_data_len,Eth_Packet * eth_packet){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]

	uint16_t index = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	82fb      	strh	r3, [r7, #22]
	uint16_t checksum = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	82bb      	strh	r3, [r7, #20]
	(*eth_data_len) = 3 + 1 + 1 + eth_packet->data_length + 2 + 1;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	3308      	adds	r3, #8
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	801a      	strh	r2, [r3, #0]

	*(eth_packet_data+index) = 's'; index++; checksum += 's';
 80008da:	8afb      	ldrh	r3, [r7, #22]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	2273      	movs	r2, #115	; 0x73
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	3301      	adds	r3, #1
 80008e8:	82fb      	strh	r3, [r7, #22]
 80008ea:	8abb      	ldrh	r3, [r7, #20]
 80008ec:	3373      	adds	r3, #115	; 0x73
 80008ee:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = 'n';	index++; checksum += 'n';
 80008f0:	8afb      	ldrh	r3, [r7, #22]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	226e      	movs	r2, #110	; 0x6e
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	8afb      	ldrh	r3, [r7, #22]
 80008fc:	3301      	adds	r3, #1
 80008fe:	82fb      	strh	r3, [r7, #22]
 8000900:	8abb      	ldrh	r3, [r7, #20]
 8000902:	336e      	adds	r3, #110	; 0x6e
 8000904:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = 'p'; index++; checksum += 'p';
 8000906:	8afb      	ldrh	r3, [r7, #22]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	2270      	movs	r2, #112	; 0x70
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	8afb      	ldrh	r3, [r7, #22]
 8000912:	3301      	adds	r3, #1
 8000914:	82fb      	strh	r3, [r7, #22]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	3370      	adds	r3, #112	; 0x70
 800091a:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = eth_packet->pacet_type; index++; checksum += *(eth_packet_data+index);
 800091c:	8afb      	ldrh	r3, [r7, #22]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3301      	adds	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
 800092e:	8afb      	ldrh	r3, [r7, #22]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b29a      	uxth	r2, r3
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = eth_packet->data_length; index++; checksum += *(eth_packet_data+index);
 800093e:	8afb      	ldrh	r3, [r7, #22]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	7852      	ldrb	r2, [r2, #1]
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	8afb      	ldrh	r3, [r7, #22]
 800094c:	3301      	adds	r3, #1
 800094e:	82fb      	strh	r3, [r7, #22]
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29a      	uxth	r2, r3
 800095a:	8abb      	ldrh	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	82bb      	strh	r3, [r7, #20]

	int i;
	for(i = 0; i<eth_packet->data_length; i++){
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	e016      	b.n	8000994 <convert_eth_packet_to_tcp_array+0xdc>
		*(eth_packet_data+index) = eth_packet->data[i]; index++; checksum += *(eth_packet_data+index);
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	440a      	add	r2, r1
 8000972:	3202      	adds	r2, #2
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	8afb      	ldrh	r3, [r7, #22]
 800097a:	3301      	adds	r3, #1
 800097c:	82fb      	strh	r3, [r7, #22]
 800097e:	8afb      	ldrh	r3, [r7, #22]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b29a      	uxth	r2, r3
 8000988:	8abb      	ldrh	r3, [r7, #20]
 800098a:	4413      	add	r3, r2
 800098c:	82bb      	strh	r3, [r7, #20]
	for(i = 0; i<eth_packet->data_length; i++){
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	3301      	adds	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	785b      	ldrb	r3, [r3, #1]
 8000998:	461a      	mov	r2, r3
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbe2      	blt.n	8000966 <convert_eth_packet_to_tcp_array+0xae>
	}

	*(eth_packet_data+index) = (checksum>>8); index++;
 80009a0:	8abb      	ldrh	r3, [r7, #20]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b299      	uxth	r1, r3
 80009a6:	8afb      	ldrh	r3, [r7, #22]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	b2ca      	uxtb	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	8afb      	ldrh	r3, [r7, #22]
 80009b2:	3301      	adds	r3, #1
 80009b4:	82fb      	strh	r3, [r7, #22]
	*(eth_packet_data+index) = (checksum&0xFF); index++;
 80009b6:	8afb      	ldrh	r3, [r7, #22]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	8aba      	ldrh	r2, [r7, #20]
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	8afb      	ldrh	r3, [r7, #22]
 80009c4:	3301      	adds	r3, #1
 80009c6:	82fb      	strh	r3, [r7, #22]

	*(eth_packet_data+index) = '\0';
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]

	sprintf(uart3_send, "Calc_checksum: %s \n\r", eth_packet_data);
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4909      	ldr	r1, [pc, #36]	; (80009fc <convert_eth_packet_to_tcp_array+0x144>)
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <convert_eth_packet_to_tcp_array+0x148>)
 80009d8:	f018 fdaa 	bl	8019530 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <convert_eth_packet_to_tcp_array+0x148>)
 80009de:	f7ff fc7f 	bl	80002e0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	4905      	ldr	r1, [pc, #20]	; (8000a00 <convert_eth_packet_to_tcp_array+0x148>)
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <convert_eth_packet_to_tcp_array+0x14c>)
 80009ee:	f006 f8cb 	bl	8006b88 <HAL_UART_Transmit>

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	0801a654 	.word	0x0801a654
 8000a00:	2000c950 	.word	0x2000c950
 8000a04:	2000ca58 	.word	0x2000ca58

08000a08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <vApplicationGetIdleTaskMemory+0x30>)
 8000a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000b4 	.word	0x200000b4
 8000a38:	20000108 	.word	0x20000108

08000a3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_FREERTOS_Init+0x5c>)
 8000a44:	1d3c      	adds	r4, r7, #4
 8000a46:	461d      	mov	r5, r3
 8000a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f009 fd29 	bl	800a4b0 <osThreadCreate>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_FREERTOS_Init+0x60>)
 8000a62:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthReceiveCommand, "TaskEthReceiveCommand", 3000, NULL, 1, NULL);
 8000a64:	2300      	movs	r3, #0
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a72:	490b      	ldr	r1, [pc, #44]	; (8000aa0 <MX_FREERTOS_Init+0x64>)
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_FREERTOS_Init+0x68>)
 8000a76:	f00b f8a5 	bl	800bbc4 <xTaskCreate>

  xTaskCreate(vTaskEthSendData, "TaskEthSendData", 1000, NULL, 1, NULL);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <MX_FREERTOS_Init+0x6c>)
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_FREERTOS_Init+0x70>)
 8000a8c:	f00b f89a 	bl	800bbc4 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	0801a6a0 	.word	0x0801a6a0
 8000a9c:	2000c948 	.word	0x2000c948
 8000aa0:	0801a66c 	.word	0x0801a66c
 8000aa4:	08000ac5 	.word	0x08000ac5
 8000aa8:	0801a684 	.word	0x0801a684
 8000aac:	08000b91 	.word	0x08000b91

08000ab0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f009 fd44 	bl	800a548 <osDelay>
 8000ac0:	e7fa      	b.n	8000ab8 <StartDefaultTask+0x8>
	...

08000ac4 <vTaskEthReceiveCommand>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

/* task to hold tcp communication */
void vTaskEthReceiveCommand(void * argument){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	for(;;){

		/* Infinite loop */
		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_TCP);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2010      	movs	r0, #16
 8000ad2:	f00c fc61 	bl	800d398 <netconn_new_with_proto_and_callback>
 8000ad6:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (conn != NULL) {
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f6      	beq.n	8000acc <vTaskEthReceiveCommand+0x8>

			/* Bind connection to well known port number. */
			err = netconn_bind(conn, NULL, 4242);
 8000ade:	f241 0292 	movw	r2, #4242	; 0x1092
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ae6:	f00c fcf7 	bl	800d4d8 <netconn_bind>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			if (err == ERR_OK) {
 8000af0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d143      	bne.n	8000b80 <vTaskEthReceiveCommand+0xbc>

				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 8000af8:	21ff      	movs	r1, #255	; 0xff
 8000afa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000afc:	f00c fd24 	bl	800d548 <netconn_listen_with_backlog>

				while (1) {

					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 8000b00:	4922      	ldr	r1, [pc, #136]	; (8000b8c <vTaskEthReceiveCommand+0xc8>)
 8000b02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b04:	f00c fd4c 	bl	800d5a0 <netconn_accept>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

					/* Process the new connection. */
					if (accept_err == ERR_OK) {
 8000b0e:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f4      	bne.n	8000b00 <vTaskEthReceiveCommand+0x3c>

						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8000b16:	e019      	b.n	8000b4c <vTaskEthReceiveCommand+0x88>

							do {

								/* receive command from control station */
								netbuf_data(buf, &data, &len);
 8000b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8000b1e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00e fc06 	bl	800f334 <netbuf_data>

								/* parse received command that control ROV */
								parse_eth_command((char *) data, len, &tcp_command);
 8000b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000b2c:	f107 020c 	add.w	r2, r7, #12
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe1d 	bl	8000770 <parse_eth_command>

							} while (netbuf_next(buf) >= 0);
 8000b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00e fc45 	bl	800f3c8 <netbuf_next>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dae9      	bge.n	8000b18 <vTaskEthReceiveCommand+0x54>

							netbuf_delete(buf);
 8000b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00e fbd4 	bl	800f2f4 <netbuf_delete>
						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <vTaskEthReceiveCommand+0xc8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00c fe70 	bl	800d83c <netconn_recv>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000b62:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0d6      	beq.n	8000b18 <vTaskEthReceiveCommand+0x54>

						}

						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <vTaskEthReceiveCommand+0xc8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00c ff84 	bl	800da7c <netconn_close>
						netconn_delete(newconn);
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <vTaskEthReceiveCommand+0xc8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00c fc87 	bl	800d48c <netconn_delete>
					accept_err = netconn_accept(conn, &newconn);
 8000b7e:	e7bf      	b.n	8000b00 <vTaskEthReceiveCommand+0x3c>
					}
				}

			} else {
				netconn_delete(newconn);
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <vTaskEthReceiveCommand+0xc8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00c fc81 	bl	800d48c <netconn_delete>
		conn = netconn_new(NETCONN_TCP);
 8000b8a:	e79f      	b.n	8000acc <vTaskEthReceiveCommand+0x8>
 8000b8c:	2000c94c 	.word	0x2000c94c

08000b90 <vTaskEthSendData>:
	vTaskDelete(NULL);

}


void vTaskEthSendData(void * argument){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0c0      	sub	sp, #256	; 0x100
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]
	// status of netconn send
	err_t tcp_send_data_status;

	// data to be send
	char eth_packet_data[200];
	uint16_t eth_packet_data_len = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	857b      	strh	r3, [r7, #42]	; 0x2a

		/* queue which contain ethernet packet to be send */


		/* convert eth packet to tcp data array to be send */
		pacekt.pacet_type = 49;
 8000b9c:	2331      	movs	r3, #49	; 0x31
 8000b9e:	723b      	strb	r3, [r7, #8]
		pacekt.data_length = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	727b      	strb	r3, [r7, #9]
		pacekt.data[0] = 51;
 8000ba4:	2333      	movs	r3, #51	; 0x33
 8000ba6:	72bb      	strb	r3, [r7, #10]

		convert_eth_packet_to_tcp_array(eth_packet_data, &eth_packet_data_len, &pacekt);
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fe7f 	bl	80008b8 <convert_eth_packet_to_tcp_array>


		/* send data packet with netconn_write function */
		tcp_send_data_status = netconn_write(newconn, eth_packet_data, eth_packet_data_len, NETCONN_COPY);
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <vTaskEthSendData+0x7c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f00c feae 	bl	800d92c <netconn_write_partly>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7


		sprintf(uart3_send, "Netconn write status: %s \n\r", eth_packet_data);
 8000bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bda:	461a      	mov	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <vTaskEthSendData+0x80>)
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <vTaskEthSendData+0x84>)
 8000be0:	f018 fca6 	bl	8019530 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <vTaskEthSendData+0x84>)
 8000be6:	f7ff fb7b 	bl	80002e0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <vTaskEthSendData+0x84>)
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <vTaskEthSendData+0x88>)
 8000bf6:	f005 ffc7 	bl	8006b88 <HAL_UART_Transmit>


		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <vTaskEthSendData+0x8c>)
 8000bfe:	f003 f88a 	bl	8003d16 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c06:	f00b f913 	bl	800be30 <vTaskDelay>
		pacekt.pacet_type = 49;
 8000c0a:	e7c7      	b.n	8000b9c <vTaskEthSendData+0xc>
 8000c0c:	2000c94c 	.word	0x2000c94c
 8000c10:	0801a6bc 	.word	0x0801a6bc
 8000c14:	2000c950 	.word	0x2000c950
 8000c18:	2000ca58 	.word	0x2000ca58
 8000c1c:	58021000 	.word	0x58021000

08000c20 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a39      	ldr	r2, [pc, #228]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_GPIO_Init+0x140>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <MX_GPIO_Init+0x144>)
 8000d10:	f002 ffe8 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_GPIO_Init+0x148>)
 8000d1a:	f002 ffe3 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d1e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	480b      	ldr	r0, [pc, #44]	; (8000d64 <MX_GPIO_Init+0x144>)
 8000d38:	f002 fe24 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_GPIO_Init+0x148>)
 8000d54:	f002 fe16 	bl	8003984 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3730      	adds	r7, #48	; 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58021000 	.word	0x58021000

08000d6c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d74:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dc4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	0b5b      	lsrs	r3, r3, #13
 8000dca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dce:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dd8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	015a      	lsls	r2, r3, #5
 8000dde:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000de2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de8:	490f      	ldr	r1, [pc, #60]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1ef      	bne.n	8000dda <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	60fa      	str	r2, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e5      	bne.n	8000dd0 <SCB_EnableDCache+0x24>
 8000e04:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e18:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0

	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000e32:	f000 ff03 	bl	8001c3c <HAL_MPU_Disable>

	/* Configure the MPU attributes as Device not cacheable
	 for ETH DMA descriptors */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MPU_Config+0x80>)
 8000e3c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e42:	2303      	movs	r3, #3
 8000e44:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ff1d 	bl	8001ca4 <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes as Normal Non Cacheable
	 for LwIP RAM heap which contains the Tx buffers */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30044000;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MPU_Config+0x84>)
 8000e70:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000e72:	230d      	movs	r3, #13
 8000e74:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e76:	2303      	movs	r3, #3
 8000e78:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e82:	2301      	movs	r3, #1
 8000e84:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 ff03 	bl	8001ca4 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f000 fee2 	bl	8001c68 <HAL_MPU_Enable>

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	30040000 	.word	0x30040000
 8000eb0:	30044000 	.word	0x30044000

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MPU_Config();
 8000eba:	f7ff ffb7 	bl	8000e2c <MPU_Config>
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ebe:	f7ff ff55 	bl	8000d6c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ec2:	f7ff ff73 	bl	8000dac <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ecc:	bf00      	nop
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <main+0xb0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <main+0x30>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dcf4      	bgt.n	8000ece <main+0x1a>
  if ( timeout < 0 )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da01      	bge.n	8000eee <main+0x3a>
  {
  Error_Handler();
 8000eea:	f000 f933 	bl	8001154 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fd27 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f839 	bl	8000f68 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <main+0xb0>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <main+0xb0>)
 8000efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <main+0xb0>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f002 ff19 	bl	8003d4c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f002 ff2f 	bl	8003d80 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f26:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f28:	bf00      	nop
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <main+0xb0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d104      	bne.n	8000f40 <main+0x8c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dcf4      	bgt.n	8000f2a <main+0x76>
if ( timeout < 0 )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da01      	bge.n	8000f4a <main+0x96>
{
Error_Handler();
 8000f46:	f000 f905 	bl	8001154 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f7ff fe69 	bl	8000c20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f4e:	f000 fa4d 	bl	80013ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f52:	f000 fae1 	bl	8001518 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 8000f56:	f008 fd5f 	bl	8009a18 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000f5a:	f7ff fd6f 	bl	8000a3c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f5e:	f009 fa90 	bl	800a482 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0xae>
 8000f64:	58024400 	.word	0x58024400

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0cc      	sub	sp, #304	; 0x130
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f72:	224c      	movs	r2, #76	; 0x4c
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f018 faba 	bl	80194f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f80:	2220      	movs	r2, #32
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f018 fab3 	bl	80194f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4618      	mov	r0, r3
 8000f90:	23bc      	movs	r3, #188	; 0xbc
 8000f92:	461a      	mov	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	f018 faab 	bl	80194f0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f003 f84c 	bl	8004038 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <SystemClock_Config+0x1b8>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a5d      	ldr	r2, [pc, #372]	; (8001120 <SystemClock_Config+0x1b8>)
 8000fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <SystemClock_Config+0x1b8>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <SystemClock_Config+0x1bc>)
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	4a58      	ldr	r2, [pc, #352]	; (8001124 <SystemClock_Config+0x1bc>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fca:	4b56      	ldr	r3, [pc, #344]	; (8001124 <SystemClock_Config+0x1bc>)
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fda:	bf00      	nop
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <SystemClock_Config+0x1b8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe8:	d1f8      	bne.n	8000fdc <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <SystemClock_Config+0x1c0>)
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f023 0303 	bic.w	r3, r3, #3
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <SystemClock_Config+0x1c0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001000:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800101a:	2378      	movs	r3, #120	; 0x78
 800101c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001032:	230c      	movs	r3, #12
 8001034:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f85f 	bl	800410c <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001054:	f000 f87e 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	233f      	movs	r3, #63	; 0x3f
 800105a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800106a:	2308      	movs	r3, #8
 800106c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fc13 	bl	80048bc <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800109c:	f000 f85a 	bl	8001154 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0x1c4>)
 80010a6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2201      	movs	r2, #1
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2218      	movs	r2, #24
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	2202      	movs	r2, #2
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2204      	movs	r2, #4
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2202      	movs	r2, #2
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f003 ffa0 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 800110e:	f000 f821 	bl	8001154 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001112:	f002 ffeb 	bl	80040ec <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001116:	bf00      	nop
 8001118:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024800 	.word	0x58024800
 8001124:	58000400 	.word	0x58000400
 8001128:	58024400 	.word	0x58024400
 800112c:	00040002 	.word	0x00040002

08001130 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001142:	f000 fc39 	bl	80019b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_MspInit+0x38>)
 800116c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_MspInit+0x38>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_MspInit+0x38>)
 800117c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	210f      	movs	r1, #15
 800118c:	f06f 0001 	mvn.w	r0, #1
 8001190:	f000 fd2c 	bl	8001bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	58024400 	.word	0x58024400

080011a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2019      	movs	r0, #25
 80011b6:	f000 fd19 	bl	8001bec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80011ba:	2019      	movs	r0, #25
 80011bc:	f000 fd30 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_InitTick+0xa8>)
 80011c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <HAL_InitTick+0xa8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_InitTick+0xa8>)
 80011d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011de:	f107 020c 	add.w	r2, r7, #12
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 feeb 	bl	8004fc4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011ee:	f003 fed3 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80011f2:	4603      	mov	r3, r0
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_InitTick+0xac>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	3b01      	subs	r3, #1
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0xb0>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_InitTick+0xb4>)
 800120a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_InitTick+0xb0>)
 800120e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001212:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_InitTick+0xb0>)
 8001216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001218:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_InitTick+0xb0>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_InitTick+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <HAL_InitTick+0xb0>)
 8001228:	f005 f9fe 	bl	8006628 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <HAL_InitTick+0xb0>)
 8001234:	f005 fa2e 	bl	8006694 <HAL_TIM_Base_Start_IT>
 8001238:	4603      	mov	r3, r0
 800123a:	e000      	b.n	800123e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	3738      	adds	r7, #56	; 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	58024400 	.word	0x58024400
 800124c:	431bde83 	.word	0x431bde83
 8001250:	2000ca18 	.word	0x2000ca18
 8001254:	40010000 	.word	0x40010000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <ETH_IRQHandler+0x10>)
 8001292:	f001 f9bf 	bl	8002614 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000d024 	.word	0x2000d024

080012a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM1_UP_IRQHandler+0x10>)
 80012a6:	f005 fa1f 	bl	80066e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000ca18 	.word	0x2000ca18

080012b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
	}

return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e009      	b.n	8001314 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf1      	blt.n	8001300 <_write+0x12>
	}
	return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_close>:

int _close(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134e:	605a      	str	r2, [r3, #4]
	return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_sbrk+0x50>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x16>
		heap_end = &end;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <_sbrk+0x50>)
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <_sbrk+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <_sbrk+0x50>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <_sbrk+0x50>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	466a      	mov	r2, sp
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d905      	bls.n	80013c6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <_sbrk+0x58>)
 80013bc:	220c      	movs	r2, #12
 80013be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e006      	b.n	80013d4 <_sbrk+0x44>
	}

	heap_end += incr;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <_sbrk+0x50>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <_sbrk+0x50>)
 80013d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20000308 	.word	0x20000308
 80013e4:	200101f0 	.word	0x200101f0
 80013e8:	200101e8 	.word	0x200101e8

080013ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_USART3_UART_Init+0x90>)
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_USART3_UART_Init+0x94>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_USART3_UART_Init+0x90>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_USART3_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART3_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001436:	f005 fb57 	bl	8006ae8 <HAL_UART_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001440:	f7ff fe88 	bl	8001154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001448:	f007 ff57 	bl	80092fa <HAL_UARTEx_SetTxFifoThreshold>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001452:	f7ff fe7f 	bl	8001154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <MX_USART3_UART_Init+0x90>)
 800145a:	f007 ff8c 	bl	8009376 <HAL_UARTEx_SetRxFifoThreshold>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001464:	f7ff fe76 	bl	8001154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_USART3_UART_Init+0x90>)
 800146a:	f007 ff0d 	bl	8009288 <HAL_UARTEx_DisableFifoMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001474:	f7ff fe6e 	bl	8001154 <Error_Handler>
  }

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000ca58 	.word	0x2000ca58
 8001480:	40004800 	.word	0x40004800

08001484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <HAL_UART_MspInit+0x88>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12e      	bne.n	8001504 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_UART_MspInit+0x90>)
 8001500:	f002 fa40 	bl	8003984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40004800 	.word	0x40004800
 8001510:	58024400 	.word	0x58024400
 8001514:	58020c00 	.word	0x58020c00

08001518 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001520:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001524:	2209      	movs	r2, #9
 8001526:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152a:	2202      	movs	r2, #2
 800152c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001536:	2202      	movs	r2, #2
 8001538:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154e:	2201      	movs	r2, #1
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001554:	2201      	movs	r2, #1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155a:	2200      	movs	r2, #0
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001560:	f002 fc22 	bl	8003da8 <HAL_PCD_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800156a:	f7ff fdf3 	bl	8001154 <Error_Handler>
  }

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000cae4 	.word	0x2000cae4
 8001578:	40080000 	.word	0x40080000

0800157c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_PCD_MspInit+0xa4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d13b      	bne.n	8001616 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015bc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015ce:	230a      	movs	r3, #10
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4813      	ldr	r0, [pc, #76]	; (8001628 <HAL_PCD_MspInit+0xac>)
 80015da:	f002 f9d3 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_PCD_MspInit+0xac>)
 80015f4:	f002 f9c6 	bl	8003984 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 80015fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 8001600:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_PCD_MspInit+0xa8>)
 800160a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40080000 	.word	0x40080000
 8001624:	58024400 	.word	0x58024400
 8001628:	58020000 	.word	0x58020000

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001632:	e003      	b.n	800163c <LoopCopyDataInit>

08001634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800163a:	3104      	adds	r1, #4

0800163c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001644:	d3f6      	bcc.n	8001634 <CopyDataInit>
  ldr  r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001648:	e002      	b.n	8001650 <LoopFillZerobss>

0800164a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800164a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800164c:	f842 3b04 	str.w	r3, [r2], #4

08001650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001654:	d3f9      	bcc.n	800164a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001656:	f7ff f81b 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f017 ff0b 	bl	8019474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fc29 	bl	8000eb4 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001668:	0801d270 	.word	0x0801d270
  ldr  r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001670:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001674:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001678:	200101f0 	.word	0x200101f0

0800167c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC3_IRQHandler>

0800167e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <LAN8742_RegisterBusIO+0x28>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <LAN8742_RegisterBusIO+0x28>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <LAN8742_RegisterBusIO+0x28>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e014      	b.n	80016d6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d17c      	bne.n	80017fc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e01c      	b.n	8001756 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	2112      	movs	r1, #18
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	4798      	blx	r3
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	da03      	bge.n	8001738 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001730:	f06f 0304 	mvn.w	r3, #4
 8001734:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001736:	e00b      	b.n	8001750 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	d105      	bne.n	8001750 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
         break;
 800174e:	e005      	b.n	800175c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b1f      	cmp	r3, #31
 800175a:	d9df      	bls.n	800171c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b1f      	cmp	r3, #31
 8001762:	d902      	bls.n	800176a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001764:	f06f 0302 	mvn.w	r3, #2
 8001768:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d145      	bne.n	80017fc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6810      	ldr	r0, [r2, #0]
 8001778:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800177c:	2100      	movs	r1, #0
 800177e:	4798      	blx	r3
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	db37      	blt.n	80017f6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6810      	ldr	r0, [r2, #0]
 800178e:	f107 0208 	add.w	r2, r7, #8
 8001792:	2100      	movs	r1, #0
 8001794:	4798      	blx	r3
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	db28      	blt.n	80017ee <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4798      	blx	r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017a6:	e01c      	b.n	80017e2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4798      	blx	r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ba:	d80e      	bhi.n	80017da <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6810      	ldr	r0, [r2, #0]
 80017c4:	f107 0208 	add.w	r2, r7, #8
 80017c8:	2100      	movs	r1, #0
 80017ca:	4798      	blx	r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da07      	bge.n	80017e2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80017d2:	f06f 0304 	mvn.w	r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
                 break;
 80017d8:	e010      	b.n	80017fc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017da:	f06f 0301 	mvn.w	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
               break;
 80017e0:	e00c      	b.n	80017fc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1dd      	bne.n	80017a8 <LAN8742_Init+0xc6>
 80017ec:	e006      	b.n	80017fc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017ee:	f06f 0304 	mvn.w	r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e002      	b.n	80017fc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80017f6:	f06f 0303 	mvn.w	r3, #3
 80017fa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d112      	bne.n	8001828 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4798      	blx	r3
 8001808:	4603      	mov	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800180c:	bf00      	nop
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4798      	blx	r3
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001820:	d9f5      	bls.n	800180e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001828:	693b      	ldr	r3, [r7, #16]
 }
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6810      	ldr	r0, [r2, #0]
 8001846:	f107 020c 	add.w	r2, r7, #12
 800184a:	2101      	movs	r1, #1
 800184c:	4798      	blx	r3
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	da02      	bge.n	800185a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001854:	f06f 0304 	mvn.w	r3, #4
 8001858:	e06e      	b.n	8001938 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6810      	ldr	r0, [r2, #0]
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	2101      	movs	r1, #1
 8001868:	4798      	blx	r3
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	da02      	bge.n	8001876 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001870:	f06f 0304 	mvn.w	r3, #4
 8001874:	e060      	b.n	8001938 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001880:	2301      	movs	r3, #1
 8001882:	e059      	b.n	8001938 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6810      	ldr	r0, [r2, #0]
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	2100      	movs	r1, #0
 8001892:	4798      	blx	r3
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	da02      	bge.n	80018a0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800189a:	f06f 0304 	mvn.w	r3, #4
 800189e:	e04b      	b.n	8001938 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11b      	bne.n	80018e2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <LAN8742_GetLinkState+0x90>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018be:	2302      	movs	r3, #2
 80018c0:	e03a      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e033      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018da:	2304      	movs	r3, #4
 80018dc:	e02c      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018de:	2305      	movs	r3, #5
 80018e0:	e02a      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6810      	ldr	r0, [r2, #0]
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	211f      	movs	r1, #31
 80018f0:	4798      	blx	r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da02      	bge.n	80018fe <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018f8:	f06f 0304 	mvn.w	r3, #4
 80018fc:	e01c      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001908:	2306      	movs	r3, #6
 800190a:	e015      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 031c 	and.w	r3, r3, #28
 8001912:	2b18      	cmp	r3, #24
 8001914:	d101      	bne.n	800191a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001916:	2302      	movs	r3, #2
 8001918:	e00e      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 031c 	and.w	r3, r3, #28
 8001920:	2b08      	cmp	r3, #8
 8001922:	d101      	bne.n	8001928 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001924:	2303      	movs	r3, #3
 8001926:	e007      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 031c 	and.w	r3, r3, #28
 800192e:	2b14      	cmp	r3, #20
 8001930:	d101      	bne.n	8001936 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001932:	2304      	movs	r3, #4
 8001934:	e000      	b.n	8001938 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001936:	2305      	movs	r3, #5
    }				
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001946:	2003      	movs	r0, #3
 8001948:	f000 f945 	bl	8001bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800194c:	f003 f96c 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8001950:	4601      	mov	r1, r0
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_Init+0x68>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <HAL_Init+0x6c>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	fa21 f303 	lsr.w	r3, r1, r3
 8001968:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_Init+0x68>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_Init+0x6c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_Init+0x70>)
 8001982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_Init+0x74>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fc08 	bl	80011a0 <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e002      	b.n	80019a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800199a:	f7ff fbe3 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58024400 	.word	0x58024400
 80019ac:	0801d080 	.word	0x0801d080
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	2000ceec 	.word	0x2000ceec

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000ceec 	.word	0x2000ceec

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_Delay+0x40>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetREVID+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0c1b      	lsrs	r3, r3, #16
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	5c001000 	.word	0x5c001000

08001a54 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	58000400 	.word	0x58000400

08001a7c <__NVIC_SetPriorityGrouping>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	05fa0000 	.word	0x05fa0000

08001ac4 <__NVIC_GetPriorityGrouping>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff4c 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfa:	f7ff ff63 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001bfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffb3 	bl	8001b70 <NVIC_EncodePriority>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff82 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff56 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c40:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MPU_Disable+0x24>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <HAL_MPU_Disable+0x24>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_MPU_Disable+0x28>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	e000ed90 	.word	0xe000ed90

08001c68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_MPU_Enable+0x34>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_MPU_Enable+0x38>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_MPU_Enable+0x38>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c8a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed90 	.word	0xe000ed90
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	785a      	ldrb	r2, [r3, #1]
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_MPU_ConfigRegion+0x84>)
 8001cb2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d029      	beq.n	8001d10 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_MPU_ConfigRegion+0x84>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7b1b      	ldrb	r3, [r3, #12]
 8001cc8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7adb      	ldrb	r3, [r3, #11]
 8001cce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7a9b      	ldrb	r3, [r3, #10]
 8001cd6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7b5b      	ldrb	r3, [r3, #13]
 8001cde:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ce0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b9b      	ldrb	r3, [r3, #14]
 8001ce6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ce8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7bdb      	ldrb	r3, [r3, #15]
 8001cee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7a5b      	ldrb	r3, [r3, #9]
 8001cf6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cf8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7a1b      	ldrb	r3, [r3, #8]
 8001cfe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d00:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d0a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d0c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d0e:	e005      	b.n	8001d1c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_MPU_ConfigRegion+0x84>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_MPU_ConfigRegion+0x84>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed90 	.word	0xe000ed90

08001d2c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_GetCurrentCPUID+0x24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	d101      	bne.n	8001d42 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e000      	b.n	8001d44 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001d42:	2301      	movs	r3, #1
  }
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0c6      	b.n	8001ef4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f007 ffaa 	bl	8009cc8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2223      	movs	r2, #35	; 0x23
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b60      	ldr	r3, [pc, #384]	; (8001efc <HAL_ETH_Init+0x1a8>)
 8001d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d80:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <HAL_ETH_Init+0x1a8>)
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_ETH_Init+0x1a8>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7a1b      	ldrb	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fe57 	bl	8001a54 <HAL_SYSCFG_ETHInterfaceSelect>
 8001da6:	e003      	b.n	8001db0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001da8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001dac:	f7ff fe52 	bl	8001a54 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff fe0a 	bl	80019e0 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dce:	e00f      	b.n	8001df0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001dd0:	f7ff fe06 	bl	80019e0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dde:	d907      	bls.n	8001df0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2204      	movs	r2, #4
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	22e0      	movs	r2, #224	; 0xe0
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e081      	b.n	8001ef4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e6      	bne.n	8001dd0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 fa6e 	bl	80032e4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e08:	f003 f880 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <HAL_ETH_Init+0x1ac>)
 8001e10:	fba3 2302 	umull	r2, r3, r3, r2
 8001e14:	0c9a      	lsrs	r2, r3, #18
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f001 f9c1 	bl	80031a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e40:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	22e0      	movs	r2, #224	; 0xe0
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e04a      	b.n	8001ef4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e66:	4413      	add	r3, r2
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_ETH_Init+0x1b0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6952      	ldr	r2, [r2, #20]
 8001e72:	0052      	lsls	r2, r2, #1
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6809      	ldr	r1, [r1, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e7e:	440b      	add	r3, r1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f001 fa86 	bl	8003394 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 faca 	bl	8003422 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	3305      	adds	r3, #5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	061a      	lsls	r2, r3, #24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	3302      	adds	r3, #2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ecc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001eda:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001edc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	58024400 	.word	0x58024400
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	ffff8001 	.word	0xffff8001

08001f08 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	330a      	adds	r3, #10
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_ETH_DescAssignMemory+0x28>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d904      	bls.n	8001f3a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e021      	b.n	8001f7e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	330a      	adds	r3, #10
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d17d      	bne.n	80020a8 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2223      	movs	r2, #35	; 0x23
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e018      	b.n	8001fea <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d902      	bls.n	8001fd6 <HAL_ETH_Start_IT+0x4c>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	330a      	adds	r3, #10
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d9e3      	bls.n	8001fb8 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0202 	orr.w	r2, r2, #2
 8002004:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6811      	ldr	r1, [r2, #0]
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002042:	440b      	add	r3, r1
 8002044:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f241 1308 	movw	r3, #4360	; 0x1108
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6811      	ldr	r1, [r2, #0]
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	f241 1308 	movw	r3, #4360	; 0x1108
 800205e:	440b      	add	r3, r1
 8002060:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002074:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002078:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2210      	movs	r2, #16
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2222      	movs	r2, #34	; 0x22
 8002084:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f241 1334 	movw	r3, #4404	; 0x1134
 800208e:	4413      	add	r3, r2
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6811      	ldr	r1, [r2, #0]
 8002096:	f24d 0241 	movw	r2, #53313	; 0xd041
 800209a:	431a      	orrs	r2, r3
 800209c:	f241 1334 	movw	r3, #4404	; 0x1134
 80020a0:	440b      	add	r3, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e076      	b.n	80021c6 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d171      	bne.n	80021c4 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80020e0:	2200      	movs	r2, #0
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f001 f9f9 	bl	80034dc <ETH_Prepare_Tx_Descriptors>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e062      	b.n	80021c6 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3206      	adds	r2, #6
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b03      	cmp	r3, #3
 800211e:	d904      	bls.n	800212a <HAL_ETH_Transmit+0x74>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	1f1a      	subs	r2, r3, #4
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	3106      	adds	r1, #6
 8002136:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800213a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800213e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002140:	f7ff fc4e 	bl	80019e0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002146:	e034      	b.n	80021b2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d011      	beq.n	800217e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	f043 0208 	orr.w	r2, r3, #8
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	22e0      	movs	r2, #224	; 0xe0
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e023      	b.n	80021c6 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d015      	beq.n	80021b2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002186:	f7ff fc2b 	bl	80019e0 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <HAL_ETH_Transmit+0xe6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	f043 0204 	orr.w	r2, r3, #4
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2210      	movs	r2, #16
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e009      	b.n	80021c6 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dbc6      	blt.n	8002148 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2210      	movs	r2, #16
 80021be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b089      	sub	sp, #36	; 0x24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	332c      	adds	r3, #44	; 0x2c
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06b      	beq.n	80022d8 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002200:	2300      	movs	r3, #0
 8002202:	e0bc      	b.n	800237e <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d036      	beq.n	8002284 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d902      	bls.n	8002238 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b04      	subs	r3, #4
 8002236:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db11      	blt.n	800226e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2201      	movs	r2, #1
 800225a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3301      	adds	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d902      	bls.n	800226e <HAL_ETH_IsRxDataAvailable+0xa0>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	3b04      	subs	r3, #4
 800226c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002280:	2301      	movs	r3, #1
 8002282:	e07c      	b.n	800237e <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d902      	bls.n	80022aa <HAL_ETH_IsRxDataAvailable+0xdc>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3b04      	subs	r3, #4
 80022a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	e010      	b.n	80022d8 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3301      	adds	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	3301      	adds	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d902      	bls.n	80022ce <HAL_ETH_IsRxDataAvailable+0x100>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3b04      	subs	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db02      	blt.n	80022e6 <HAL_ETH_IsRxDataAvailable+0x118>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d98e      	bls.n	8002204 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d044      	beq.n	8002376 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e036      	b.n	800236e <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d902      	bls.n	800235e <HAL_ETH_IsRxDataAvailable+0x190>
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3b04      	subs	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3c4      	bcc.n	8002300 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]

  return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b08a      	sub	sp, #40	; 0x28
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	332c      	adds	r3, #44	; 0x2c
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07d      	b.n	80024be <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff feff 	bl	80021ce <HAL_ETH_IsRxDataAvailable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e071      	b.n	80024be <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	e031      	b.n	8002454 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	461a      	mov	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	461a      	mov	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800242a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3301      	adds	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	2b03      	cmp	r3, #3
 8002436:	d902      	bls.n	800243e <HAL_ETH_GetRxDataBuffer+0xb4>
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3b04      	subs	r3, #4
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	3301      	adds	r3, #1
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	3b01      	subs	r3, #1
 800245a:	6a3a      	ldr	r2, [r7, #32]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3c7      	bcc.n	80023f0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	461a      	mov	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d803      	bhi.n	800248a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	e018      	b.n	80024bc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	461a      	mov	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e001      	b.n	80024bc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	332c      	adds	r3, #44	; 0x2c
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fe72 	bl	80021ce <HAL_ETH_IsRxDataAvailable>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e017      	b.n	8002524 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4413      	add	r3, r2
 80024fc:	3b01      	subs	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d902      	bls.n	800250c <HAL_ETH_GetRxDataLength+0x46>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3b04      	subs	r3, #4
 800250a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	332c      	adds	r3, #44	; 0x2c
 8002538:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e055      	b.n	8002608 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e03c      	b.n	80025ea <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d20d      	bcs.n	80025e4 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d902      	bls.n	80025da <HAL_ETH_BuildRxDescriptors+0xae>
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3b04      	subs	r3, #4
 80025d8:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	3301      	adds	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3be      	bcc.n	8002570 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	f241 1328 	movw	r3, #4392	; 0x1128
 80025fc:	440b      	add	r3, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d113      	bne.n	8002656 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f241 1334 	movw	r3, #4404	; 0x1134
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d109      	bne.n	8002656 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f007 fc16 	bl	8009e74 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002650:	f248 0240 	movw	r2, #32832	; 0x8040
 8002654:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d113      	bne.n	8002690 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d109      	bne.n	8002690 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8c7 	bl	8002810 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800268a:	f248 0201 	movw	r2, #32769	; 0x8001
 800268e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a2:	d149      	bne.n	8002738 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	f241 1334 	movw	r3, #4404	; 0x1134
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b8:	d13e      	bne.n	8002738 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f043 0208 	orr.w	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d11b      	bne.n	8002712 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f241 1302 	movw	r3, #4354	; 0x1102
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f241 1334 	movw	r3, #4404	; 0x1134
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002702:	f241 1334 	movw	r3, #4404	; 0x1134
 8002706:	440b      	add	r3, r1
 8002708:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	22e0      	movs	r2, #224	; 0xe0
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
 8002710:	e00f      	b.n	8002732 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800272c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002730:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f876 	bl	8002824 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002740:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002744:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002748:	d10e      	bne.n	8002768 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	22e0      	movs	r2, #224	; 0xe0
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f86b 	bl	8002838 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b10      	cmp	r3, #16
 8002776:	d10d      	bne.n	8002794 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002780:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f85f 	bl	800284c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d10d      	bne.n	80027c0 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f853 	bl	8002860 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80027c0:	f7ff fab4 	bl	8001d2c <HAL_GetCurrentCPUID>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d10d      	bne.n	80027e6 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_ETH_IRQHandler+0x1f4>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_ETH_IRQHandler+0x1f4>)
 80027d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f848 	bl	8002874 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80027e4:	e00c      	b.n	8002800 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_ETH_IRQHandler+0x1f8>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_ETH_IRQHandler+0x1f8>)
 80027f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f83a 	bl	8002874 <HAL_ETH_WakeUpCallback>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58000080 	.word	0x58000080
 800280c:	580000c0 	.word	0x580000c0

08002810 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e03e      	b.n	8002928 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	055b      	lsls	r3, r3, #21
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f043 030c 	orr.w	r3, r3, #12
 80028d6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80028ea:	f7ff f879 	bl	80019e0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028f0:	e009      	b.n	8002906 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80028f2:	f7ff f875 	bl	80019e0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002900:	d901      	bls.n	8002906 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e010      	b.n	8002928 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ed      	bne.n	80028f2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e03c      	b.n	80029cc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800295a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	055b      	lsls	r3, r3, #21
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 030c 	bic.w	r3, r3, #12
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002996:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800299e:	f7ff f81f 	bl	80019e0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029a4:	e009      	b.n	80029ba <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80029a6:	f7ff f81b 	bl	80019e0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b4:	d901      	bls.n	80029ba <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e008      	b.n	80029cc <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ed      	bne.n	80029a6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40028000 	.word	0x40028000

080029d8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e1c3      	b.n	8002d74 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0e5b      	lsrs	r3, r3, #25
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d00:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d10:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e00a      	b.n	8002daa <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d105      	bne.n	8002da8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f860 	bl	8002e64 <ETH_SetMACConfig>

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dc4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dcc:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dce:	f002 f89d 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8002dd2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d908      	bls.n	8002dee <HAL_ETH_SetMDIOClockRange+0x3a>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d804      	bhi.n	8002dee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e027      	b.n	8002e3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d908      	bls.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x54>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d804      	bhi.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e01a      	b.n	8002e3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d903      	bls.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d911      	bls.n	8002e3c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d908      	bls.n	8002e32 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d804      	bhi.n	8002e32 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e005      	b.n	8002e3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e000      	b.n	8002e3e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	01312cff 	.word	0x01312cff
 8002e54:	02160ebf 	.word	0x02160ebf
 8002e58:	039386ff 	.word	0x039386ff
 8002e5c:	05f5e0ff 	.word	0x05f5e0ff
 8002e60:	08f0d17f 	.word	0x08f0d17f

08002e64 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002e76:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	791b      	ldrb	r3, [r3, #4]
 8002e7c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002e7e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
 8002e84:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e86:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	7b5b      	ldrb	r3, [r3, #13]
 8002e8c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e8e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7b9b      	ldrb	r3, [r3, #14]
 8002e94:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7bdb      	ldrb	r3, [r3, #15]
 8002e9c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e9e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	7c12      	ldrb	r2, [r2, #16]
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d102      	bne.n	8002eae <ETH_SetMACConfig+0x4a>
 8002ea8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002eac:	e000      	b.n	8002eb0 <ETH_SetMACConfig+0x4c>
 8002eae:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002eb0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	7c52      	ldrb	r2, [r2, #17]
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d102      	bne.n	8002ec0 <ETH_SetMACConfig+0x5c>
 8002eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ebe:	e000      	b.n	8002ec2 <ETH_SetMACConfig+0x5e>
 8002ec0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ec2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	7c9b      	ldrb	r3, [r3, #18]
 8002ec8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eca:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ed0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002ed6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	7f1b      	ldrb	r3, [r3, #28]
 8002edc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002ede:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	7f5b      	ldrb	r3, [r3, #29]
 8002ee4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ee6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	7f92      	ldrb	r2, [r2, #30]
 8002eec:	2a00      	cmp	r2, #0
 8002eee:	d102      	bne.n	8002ef6 <ETH_SetMACConfig+0x92>
 8002ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef4:	e000      	b.n	8002ef8 <ETH_SetMACConfig+0x94>
 8002ef6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ef8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7fdb      	ldrb	r3, [r3, #31]
 8002efe:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f00:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d102      	bne.n	8002f12 <ETH_SetMACConfig+0xae>
 8002f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f10:	e000      	b.n	8002f14 <ETH_SetMACConfig+0xb0>
 8002f12:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f14:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f1a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f22:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002f24:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b56      	ldr	r3, [pc, #344]	; (8003090 <ETH_SetMACConfig+0x22c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f50:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f58:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f5a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f62:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f64:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d102      	bne.n	8002f76 <ETH_SetMACConfig+0x112>
 8002f70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x114>
 8002f76:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f78:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <ETH_SetMACConfig+0x230>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	430b      	orrs	r3, r1
 8002f94:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <ETH_SetMACConfig+0x234>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fc0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fc6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002fce:	2a00      	cmp	r2, #0
 8002fd0:	d101      	bne.n	8002fd6 <ETH_SetMACConfig+0x172>
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	e000      	b.n	8002fd8 <ETH_SetMACConfig+0x174>
 8002fd6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002fd8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002fee:	4013      	ands	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	68f9      	ldr	r1, [r7, #12]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003000:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003008:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f023 0103 	bic.w	r1, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	430a      	orrs	r2, r1
 8003022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800302e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800304a:	2a00      	cmp	r2, #0
 800304c:	d101      	bne.n	8003052 <ETH_SetMACConfig+0x1ee>
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	e000      	b.n	8003054 <ETH_SetMACConfig+0x1f0>
 8003052:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003054:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800305c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800305e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003066:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003074:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	430a      	orrs	r2, r1
 8003080:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	00048083 	.word	0x00048083
 8003094:	c0f88000 	.word	0xc0f88000
 8003098:	fffffef0 	.word	0xfffffef0

0800309c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b38      	ldr	r3, [pc, #224]	; (8003194 <ETH_SetDMAConfig+0xf8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	6809      	ldr	r1, [r1, #0]
 80030bc:	431a      	orrs	r2, r3
 80030be:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80030c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7b1b      	ldrb	r3, [r3, #12]
 80030d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f241 0304 	movw	r3, #4100	; 0x1004
 80030e2:	4413      	add	r3, r2
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <ETH_SetDMAConfig+0xfc>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80030f6:	440b      	add	r3, r1
 80030f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	7b5b      	ldrb	r3, [r3, #13]
 80030fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <ETH_SetDMAConfig+0x100>)
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	431a      	orrs	r2, r3
 800311e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003122:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	7d1b      	ldrb	r3, [r3, #20]
 800312c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800312e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	7f5b      	ldrb	r3, [r3, #29]
 8003134:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003142:	4413      	add	r3, r2
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <ETH_SetDMAConfig+0x104>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6811      	ldr	r1, [r2, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	431a      	orrs	r2, r3
 8003152:	f241 1304 	movw	r3, #4356	; 0x1104
 8003156:	440b      	add	r3, r1
 8003158:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7f1b      	ldrb	r3, [r3, #28]
 800315e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003170:	4413      	add	r3, r2
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <ETH_SetDMAConfig+0x108>)
 8003176:	4013      	ands	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6811      	ldr	r1, [r2, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	431a      	orrs	r2, r3
 8003180:	f241 1308 	movw	r3, #4360	; 0x1108
 8003184:	440b      	add	r3, r1
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	ffff87fd 	.word	0xffff87fd
 8003198:	ffff2ffe 	.word	0xffff2ffe
 800319c:	fffec000 	.word	0xfffec000
 80031a0:	ffc0efef 	.word	0xffc0efef
 80031a4:	7fc0ffff 	.word	0x7fc0ffff

080031a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0a4      	sub	sp, #144	; 0x90
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031b6:	2300      	movs	r3, #0
 80031b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003200:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003204:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003222:	2300      	movs	r3, #0
 8003224:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003226:	2300      	movs	r3, #0
 8003228:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800322a:	2300      	movs	r3, #0
 800322c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800322e:	2300      	movs	r3, #0
 8003230:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003240:	2320      	movs	r3, #32
 8003242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003252:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003258:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800325c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003264:	2302      	movs	r3, #2
 8003266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003282:	2300      	movs	r3, #0
 8003284:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800328c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fde6 	bl	8002e64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003298:	2301      	movs	r3, #1
 800329a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800329c:	2301      	movs	r3, #1
 800329e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80032c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fee1 	bl	800309c <ETH_SetDMAConfig>
}
 80032da:	bf00      	nop
 80032dc:	3790      	adds	r7, #144	; 0x90
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032fe:	f001 fe05 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8003302:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d908      	bls.n	800331e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d804      	bhi.n	800331e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e027      	b.n	800336e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d908      	bls.n	8003338 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d804      	bhi.n	8003338 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e01a      	b.n	800336e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d903      	bls.n	8003348 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d911      	bls.n	800336c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d908      	bls.n	8003362 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d804      	bhi.n	8003362 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e005      	b.n	800336e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e000      	b.n	800336e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800336c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	01312cff 	.word	0x01312cff
 8003384:	02160ebf 	.word	0x02160ebf
 8003388:	039386ff 	.word	0x039386ff
 800338c:	05f5e0ff 	.word	0x05f5e0ff
 8003390:	08f0d17f 	.word	0x08f0d17f

08003394 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e01d      	b.n	80033de <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68d9      	ldr	r1, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	3206      	adds	r2, #6
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d9de      	bls.n	80033a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f241 132c 	movw	r3, #4396	; 0x112c
 80033f2:	4413      	add	r3, r2
 80033f4:	2203      	movs	r2, #3
 80033f6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68d9      	ldr	r1, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f241 1314 	movw	r3, #4372	; 0x1114
 8003404:	4413      	add	r3, r2
 8003406:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e024      	b.n	800347a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6919      	ldr	r1, [r3, #16]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	330a      	adds	r3, #10
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d9d7      	bls.n	8003430 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f241 1330 	movw	r3, #4400	; 0x1130
 80034a6:	4413      	add	r3, r2
 80034a8:	2203      	movs	r2, #3
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80034b8:	4413      	add	r3, r2
 80034ba:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f241 1328 	movw	r3, #4392	; 0x1128
 80034cc:	4413      	add	r3, r2
 80034ce:	6019      	str	r1, [r3, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80034dc:	b480      	push	{r7}
 80034de:	b08d      	sub	sp, #52	; 0x34
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3318      	adds	r3, #24
 80034ec:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003506:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351a:	d101      	bne.n	8003520 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	e223      	b.n	8003968 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d044      	beq.n	80035b6 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4b72      	ldr	r3, [pc, #456]	; (80036fc <ETH_Prepare_Tx_Descriptors+0x220>)
 8003532:	4013      	ands	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003538:	431a      	orrs	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003558:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d027      	beq.n	80035b6 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	b29a      	uxth	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	431a      	orrs	r2, r3
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035a4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <ETH_Prepare_Tx_Descriptors+0x224>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	6992      	ldr	r2, [r2, #24]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <ETH_Prepare_Tx_Descriptors+0x11c>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d030      	beq.n	800365a <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	3301      	adds	r3, #1
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	2b03      	cmp	r3, #3
 800361a:	d902      	bls.n	8003622 <ETH_Prepare_Tx_Descriptors+0x146>
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	3b04      	subs	r3, #4
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	3301      	adds	r3, #1
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d10c      	bne.n	800365a <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003648:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	e186      	b.n	8003968 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	3301      	adds	r3, #1
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003670:	4013      	ands	r3, r2
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	6852      	ldr	r2, [r2, #4]
 8003676:	431a      	orrs	r2, r3
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <ETH_Prepare_Tx_Descriptors+0x228>)
 800369a:	4013      	ands	r3, r2
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	6852      	ldr	r2, [r2, #4]
 80036a0:	0412      	lsls	r2, r2, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e008      	b.n	80036bc <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <ETH_Prepare_Tx_Descriptors+0x228>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d021      	beq.n	800370c <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	04db      	lsls	r3, r3, #19
 80036d6:	431a      	orrs	r2, r3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	69d2      	ldr	r2, [r2, #28]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	e02e      	b.n	800375a <ETH_Prepare_Tx_Descriptors+0x27e>
 80036fc:	ffff0000 	.word	0xffff0000
 8003700:	ffffc000 	.word	0xffffc000
 8003704:	c000ffff 	.word	0xc000ffff
 8003708:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b98      	ldr	r3, [pc, #608]	; (8003974 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003712:	4013      	ands	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	431a      	orrs	r2, r3
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	431a      	orrs	r2, r3
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80c0 	beq.w	800392a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037bc:	e0b5      	b.n	800392a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	3301      	adds	r3, #1
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d902      	bls.n	80037dc <ETH_Prepare_Tx_Descriptors+0x300>
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	3b04      	subs	r3, #4
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037fe:	d126      	bne.n	800384e <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	e016      	b.n	8003842 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	3301      	adds	r3, #1
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	2b03      	cmp	r3, #3
 800382a:	d902      	bls.n	8003832 <ETH_Prepare_Tx_Descriptors+0x356>
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	3b04      	subs	r3, #4
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3301      	adds	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	429a      	cmp	r2, r3
 8003848:	d3e4      	bcc.n	8003814 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	e08c      	b.n	8003968 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	3301      	adds	r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b43      	ldr	r3, [pc, #268]	; (8003978 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800386a:	4013      	ands	r3, r2
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	431a      	orrs	r2, r3
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	4b3a      	ldr	r3, [pc, #232]	; (800397c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003894:	4013      	ands	r3, r2
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	0412      	lsls	r2, r2, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	e008      	b.n	80038b6 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	4b33      	ldr	r3, [pc, #204]	; (800397c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	69d2      	ldr	r2, [r2, #28]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e017      	b.n	8003912 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <ETH_Prepare_Tx_Descriptors+0x498>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	431a      	orrs	r2, r3
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f47f af45 	bne.w	80037be <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	e005      	b.n	8003954 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3734      	adds	r7, #52	; 0x34
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	ffff8000 	.word	0xffff8000
 8003978:	ffffc000 	.word	0xffffc000
 800397c:	c000ffff 	.word	0xc000ffff
 8003980:	fffc0000 	.word	0xfffc0000

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003992:	4b89      	ldr	r3, [pc, #548]	; (8003bb8 <HAL_GPIO_Init+0x234>)
 8003994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003996:	e194      	b.n	8003cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2101      	movs	r1, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8186 	beq.w	8003cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d00b      	beq.n	80039d0 <HAL_GPIO_Init+0x4c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d007      	beq.n	80039d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c4:	2b11      	cmp	r3, #17
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b12      	cmp	r3, #18
 80039ce:	d130      	bne.n	8003a32 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a06:	2201      	movs	r2, #1
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0201 	and.w	r2, r3, #1
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0xee>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b12      	cmp	r3, #18
 8003a70:	d123      	bne.n	8003aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80e0 	beq.w	8003cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_GPIO_Init+0x238>)
 8003afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <HAL_GPIO_Init+0x238>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_GPIO_Init+0x238>)
 8003b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <HAL_GPIO_Init+0x23c>)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	3302      	adds	r3, #2
 8003b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	220f      	movs	r2, #15
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a20      	ldr	r2, [pc, #128]	; (8003bc4 <HAL_GPIO_Init+0x240>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d052      	beq.n	8003bec <HAL_GPIO_Init+0x268>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_GPIO_Init+0x244>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_GPIO_Init+0x22e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_GPIO_Init+0x248>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <HAL_GPIO_Init+0x22a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_GPIO_Init+0x24c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d025      	beq.n	8003baa <HAL_GPIO_Init+0x226>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_GPIO_Init+0x250>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_GPIO_Init+0x222>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_GPIO_Init+0x254>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d019      	beq.n	8003ba2 <HAL_GPIO_Init+0x21e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_GPIO_Init+0x258>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0x21a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_GPIO_Init+0x25c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_GPIO_Init+0x216>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_GPIO_Init+0x260>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x212>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_GPIO_Init+0x264>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_GPIO_Init+0x20e>
 8003b8e:	2309      	movs	r3, #9
 8003b90:	e02d      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003b92:	230a      	movs	r3, #10
 8003b94:	e02b      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003b96:	2308      	movs	r3, #8
 8003b98:	e029      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e027      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	e025      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e023      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e021      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e01f      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e01d      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e01b      	b.n	8003bee <HAL_GPIO_Init+0x26a>
 8003bb6:	bf00      	nop
 8003bb8:	58000080 	.word	0x58000080
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58000400 	.word	0x58000400
 8003bc4:	58020000 	.word	0x58020000
 8003bc8:	58020400 	.word	0x58020400
 8003bcc:	58020800 	.word	0x58020800
 8003bd0:	58020c00 	.word	0x58020c00
 8003bd4:	58021000 	.word	0x58021000
 8003bd8:	58021400 	.word	0x58021400
 8003bdc:	58021800 	.word	0x58021800
 8003be0:	58021c00 	.word	0x58021c00
 8003be4:	58022000 	.word	0x58022000
 8003be8:	58022400 	.word	0x58022400
 8003bec:	2300      	movs	r3, #0
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	f002 0203 	and.w	r2, r2, #3
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bfe:	4938      	ldr	r1, [pc, #224]	; (8003ce0 <HAL_GPIO_Init+0x35c>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f ae63 	bne.w	8003998 <HAL_GPIO_Init+0x14>
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	58000400 	.word	0x58000400

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	401a      	ands	r2, r3
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d104      	bne.n	8003d3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	041a      	lsls	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003d38:	e002      	b.n	8003d40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	619a      	str	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <HAL_HSEM_FastTake+0x2c>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3320      	adds	r3, #32
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_HSEM_FastTake+0x30>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58026400 	.word	0x58026400
 8003d7c:	80000300 	.word	0x80000300

08003d80 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003d8a:	4906      	ldr	r1, [pc, #24]	; (8003da4 <HAL_HSEM_Release+0x24>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	58026400 	.word	0x58026400

08003da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	b08f      	sub	sp, #60	; 0x3c
 8003dac:	af0a      	add	r7, sp, #40	; 0x28
 8003dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e116      	b.n	8003fe8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd fbd1 	bl	800157c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f005 fbc5 	bl	8009588 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	687e      	ldr	r6, [r7, #4]
 8003e06:	466d      	mov	r5, sp
 8003e08:	f106 0410 	add.w	r4, r6, #16
 8003e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e1c:	1d33      	adds	r3, r6, #4
 8003e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e20:	6838      	ldr	r0, [r7, #0]
 8003e22:	f005 fb4f 	bl	80094c4 <USB_CoreInit>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0d7      	b.n	8003fe8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 fbb3 	bl	80095aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	e04a      	b.n	8003ee0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	333d      	adds	r3, #61	; 0x3d
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	333c      	adds	r3, #60	; 0x3c
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	b298      	uxth	r0, r3
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	3342      	adds	r3, #66	; 0x42
 8003e86:	4602      	mov	r2, r0
 8003e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	333f      	adds	r3, #63	; 0x3f
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3344      	adds	r3, #68	; 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3348      	adds	r3, #72	; 0x48
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3350      	adds	r3, #80	; 0x50
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	3301      	adds	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3af      	bcc.n	8003e4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e044      	b.n	8003f7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	3301      	adds	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3b5      	bcc.n	8003ef0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	687e      	ldr	r6, [r7, #4]
 8003f8c:	466d      	mov	r5, sp
 8003f8e:	f106 0410 	add.w	r4, r6, #16
 8003f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa2:	1d33      	adds	r3, r6, #4
 8003fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa6:	6838      	ldr	r0, [r7, #0]
 8003fa8:	f005 fb2a 	bl	8009600 <USB_DevInit>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e014      	b.n	8003fe8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d102      	bne.n	8003fdc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f80a 	bl	8003ff0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 fccc 	bl	800997e <USB_DevDisconnect>

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_PCDEx_ActivateLPM+0x44>)
 8004020:	4313      	orrs	r3, r2
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	10000003 	.word	0x10000003

08004038 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	2b06      	cmp	r3, #6
 800404a:	d00a      	beq.n	8004062 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800404c:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e040      	b.n	80040e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e03e      	b.n	80040e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004062:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800406a:	491f      	ldr	r1, [pc, #124]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004072:	f7fd fcb5 	bl	80019e0 <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004078:	e009      	b.n	800408e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800407a:	f7fd fcb1 	bl	80019e0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004088:	d901      	bls.n	800408e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e028      	b.n	80040e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	d1ee      	bne.n	800407a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b1e      	cmp	r3, #30
 80040a0:	d008      	beq.n	80040b4 <HAL_PWREx_ConfigSupply+0x7c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b2e      	cmp	r3, #46	; 0x2e
 80040a6:	d005      	beq.n	80040b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b1d      	cmp	r3, #29
 80040ac:	d002      	beq.n	80040b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b2d      	cmp	r3, #45	; 0x2d
 80040b2:	d114      	bne.n	80040de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80040b4:	f7fd fc94 	bl	80019e0 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040ba:	e009      	b.n	80040d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040bc:	f7fd fc90 	bl	80019e0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ca:	d901      	bls.n	80040d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d1ee      	bne.n	80040bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	58024800 	.word	0x58024800

080040ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	58024800 	.word	0x58024800

0800410c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e3c4      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8087 	beq.w	800423a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412c:	4ba2      	ldr	r3, [pc, #648]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004136:	4ba0      	ldr	r3, [pc, #640]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	2b10      	cmp	r3, #16
 8004140:	d007      	beq.n	8004152 <HAL_RCC_OscConfig+0x46>
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	2b18      	cmp	r3, #24
 8004146:	d110      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d10b      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004152:	4b99      	ldr	r3, [pc, #612]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d06c      	beq.n	8004238 <HAL_RCC_OscConfig+0x12c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d168      	bne.n	8004238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e39e      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x76>
 8004174:	4b90      	ldr	r3, [pc, #576]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a8f      	ldr	r2, [pc, #572]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e02e      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x98>
 800418a:	4b8b      	ldr	r3, [pc, #556]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a8a      	ldr	r2, [pc, #552]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a87      	ldr	r2, [pc, #540]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e01d      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0xbc>
 80041ae:	4b82      	ldr	r3, [pc, #520]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a81      	ldr	r2, [pc, #516]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b7f      	ldr	r3, [pc, #508]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7e      	ldr	r2, [pc, #504]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041c8:	4b7b      	ldr	r3, [pc, #492]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a7a      	ldr	r2, [pc, #488]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b78      	ldr	r3, [pc, #480]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a77      	ldr	r2, [pc, #476]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fbfa 	bl	80019e0 <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fd fbf6 	bl	80019e0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e352      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0xe4>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fbe6 	bl	80019e0 <HAL_GetTick>
 8004214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004218:	f7fd fbe2 	bl	80019e0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e33e      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800422a:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x10c>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8092 	beq.w	800436c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004250:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_RCC_OscConfig+0x162>
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b18      	cmp	r3, #24
 8004262:	d12d      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d128      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426e:	4b52      	ldr	r3, [pc, #328]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x17a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e310      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	f7fd fbd9 	bl	8001a3c <HAL_GetREVID>
 800428a:	4602      	mov	r2, r0
 800428c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004290:	429a      	cmp	r2, r3
 8004292:	d80a      	bhi.n	80042aa <HAL_RCC_OscConfig+0x19e>
 8004294:	4b48      	ldr	r3, [pc, #288]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	4945      	ldr	r1, [pc, #276]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	e060      	b.n	800436c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	493f      	ldr	r1, [pc, #252]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042be:	e055      	b.n	800436c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d038      	beq.n	800433a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 0219 	bic.w	r2, r3, #25
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4938      	ldr	r1, [pc, #224]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fd fb81 	bl	80019e0 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fd fb7d 	bl	80019e0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e2d9      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042f4:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	f7fd fb9c 	bl	8001a3c <HAL_GetREVID>
 8004304:	4602      	mov	r2, r0
 8004306:	f241 0303 	movw	r3, #4099	; 0x1003
 800430a:	429a      	cmp	r2, r3
 800430c:	d80a      	bhi.n	8004324 <HAL_RCC_OscConfig+0x218>
 800430e:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	031b      	lsls	r3, r3, #12
 800431c:	4926      	ldr	r1, [pc, #152]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
 8004322:	e023      	b.n	800436c <HAL_RCC_OscConfig+0x260>
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	4921      	ldr	r1, [pc, #132]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
 8004338:	e018      	b.n	800436c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd fb4b 	bl	80019e0 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434e:	f7fd fb47 	bl	80019e0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e2a3      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8091 	beq.w	800449c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004382:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d007      	beq.n	80043a0 <HAL_RCC_OscConfig+0x294>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b18      	cmp	r3, #24
 8004394:	d12f      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d12a      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_RCC_OscConfig+0x2b0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d003      	beq.n	80043bc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e277      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
 80043b8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043bc:	f7fd fb3e 	bl	8001a3c <HAL_GetREVID>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d80a      	bhi.n	80043e0 <HAL_RCC_OscConfig+0x2d4>
 80043ca:	4ba2      	ldr	r3, [pc, #648]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	499e      	ldr	r1, [pc, #632]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043de:	e05d      	b.n	800449c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043e0:	4b9c      	ldr	r3, [pc, #624]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	4999      	ldr	r1, [pc, #612]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f4:	e052      	b.n	800449c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d035      	beq.n	800446a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043fe:	4b95      	ldr	r3, [pc, #596]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a94      	ldr	r2, [pc, #592]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd fae9 	bl	80019e0 <HAL_GetTick>
 800440e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004412:	f7fd fae5 	bl	80019e0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e241      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004424:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004430:	f7fd fb04 	bl	8001a3c <HAL_GetREVID>
 8004434:	4602      	mov	r2, r0
 8004436:	f241 0303 	movw	r3, #4099	; 0x1003
 800443a:	429a      	cmp	r2, r3
 800443c:	d80a      	bhi.n	8004454 <HAL_RCC_OscConfig+0x348>
 800443e:	4b85      	ldr	r3, [pc, #532]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	4981      	ldr	r1, [pc, #516]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]
 8004452:	e023      	b.n	800449c <HAL_RCC_OscConfig+0x390>
 8004454:	4b7f      	ldr	r3, [pc, #508]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	497c      	ldr	r1, [pc, #496]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004464:	4313      	orrs	r3, r2
 8004466:	60cb      	str	r3, [r1, #12]
 8004468:	e018      	b.n	800449c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800446a:	4b7a      	ldr	r3, [pc, #488]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a79      	ldr	r2, [pc, #484]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fab3 	bl	80019e0 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800447e:	f7fd faaf 	bl	80019e0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e20b      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004490:	4b70      	ldr	r3, [pc, #448]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d036      	beq.n	8004516 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b0:	4b68      	ldr	r3, [pc, #416]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	4a67      	ldr	r2, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd fa90 	bl	80019e0 <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fd fa8c 	bl	80019e0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1e8      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d6:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x3b8>
 80044e2:	e018      	b.n	8004516 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fa76 	bl	80019e0 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f8:	f7fd fa72 	bl	80019e0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1ce      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450a:	4b52      	ldr	r3, [pc, #328]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800450c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d036      	beq.n	8004590 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d019      	beq.n	800455e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800452a:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a49      	ldr	r2, [pc, #292]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004534:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004536:	f7fd fa53 	bl	80019e0 <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800453e:	f7fd fa4f 	bl	80019e0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1ab      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x432>
 800455c:	e018      	b.n	8004590 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004568:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800456a:	f7fd fa39 	bl	80019e0 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004572:	f7fd fa35 	bl	80019e0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e191      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8086 	beq.w	80046aa <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800459e:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <HAL_RCC_OscConfig+0x54c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <HAL_RCC_OscConfig+0x54c>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045aa:	f7fd fa19 	bl	80019e0 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fd fa15 	bl	80019e0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e171      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_OscConfig+0x54c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4da>
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
 80045e4:	e02d      	b.n	8004642 <HAL_RCC_OscConfig+0x536>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x4fc>
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	e01c      	b.n	8004642 <HAL_RCC_OscConfig+0x536>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d10c      	bne.n	800462a <HAL_RCC_OscConfig+0x51e>
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
 8004628:	e00b      	b.n	8004642 <HAL_RCC_OscConfig+0x536>
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a06      	ldr	r2, [pc, #24]	; (8004654 <HAL_RCC_OscConfig+0x548>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01a      	beq.n	8004680 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fd f9c9 	bl	80019e0 <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004650:	e00f      	b.n	8004672 <HAL_RCC_OscConfig+0x566>
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd f9c0 	bl	80019e0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e11a      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004672:	4b8f      	ldr	r3, [pc, #572]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCC_OscConfig+0x550>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fd f9ae 	bl	80019e0 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fd f9aa 	bl	80019e0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e104      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800469e:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ee      	bne.n	8004688 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80f9 	beq.w	80048a6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046b4:	4b7e      	ldr	r3, [pc, #504]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046bc:	2b18      	cmp	r3, #24
 80046be:	f000 80b4 	beq.w	800482a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	f040 8095 	bne.w	80047f6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b78      	ldr	r3, [pc, #480]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a77      	ldr	r2, [pc, #476]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd f982 	bl	80019e0 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd f97e 	bl	80019e0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0da      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	4b6f      	ldr	r3, [pc, #444]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fe:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <HAL_RCC_OscConfig+0x7a8>)
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	430a      	orrs	r2, r1
 8004712:	4967      	ldr	r1, [pc, #412]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	628b      	str	r3, [r1, #40]	; 0x28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	3b01      	subs	r3, #1
 800471e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	3b01      	subs	r3, #1
 8004728:	025b      	lsls	r3, r3, #9
 800472a:	b29b      	uxth	r3, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	3b01      	subs	r3, #1
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004748:	4959      	ldr	r1, [pc, #356]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800474e:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a57      	ldr	r2, [pc, #348]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800475a:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800475c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_RCC_OscConfig+0x7ac>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004766:	00d2      	lsls	r2, r2, #3
 8004768:	4951      	ldr	r1, [pc, #324]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800476e:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f023 020c 	bic.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	494d      	ldr	r1, [pc, #308]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004780:	4b4b      	ldr	r3, [pc, #300]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f023 0202 	bic.w	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	4948      	ldr	r1, [pc, #288]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800478e:	4313      	orrs	r3, r2
 8004790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a46      	ldr	r2, [pc, #280]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	4a40      	ldr	r2, [pc, #256]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80047b6:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3a      	ldr	r2, [pc, #232]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f907 	bl	80019e0 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fd f903 	bl	80019e0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e05f      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x6ca>
 80047f4:	e057      	b.n	80048a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2d      	ldr	r2, [pc, #180]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 80047fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd f8ed 	bl	80019e0 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fd f8e9 	bl	80019e0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e045      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x6fe>
 8004828:	e03d      	b.n	80048a6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004830:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <HAL_RCC_OscConfig+0x7a4>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b01      	cmp	r3, #1
 800483c:	d031      	beq.n	80048a2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d12a      	bne.n	80048a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d122      	bne.n	80048a2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d11a      	bne.n	80048a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	0a5b      	lsrs	r3, r3, #9
 8004870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d111      	bne.n	80048a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d108      	bne.n	80048a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0e1b      	lsrs	r3, r3, #24
 8004894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024400 	.word	0x58024400
 80048b4:	fffffc0c 	.word	0xfffffc0c
 80048b8:	ffff0007 	.word	0xffff0007

080048bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e19c      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b8a      	ldr	r3, [pc, #552]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b87      	ldr	r3, [pc, #540]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 020f 	bic.w	r2, r3, #15
 80048e6:	4985      	ldr	r1, [pc, #532]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b83      	ldr	r3, [pc, #524]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e184      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	4b7b      	ldr	r3, [pc, #492]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004918:	429a      	cmp	r2, r3
 800491a:	d908      	bls.n	800492e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800491c:	4b78      	ldr	r3, [pc, #480]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	4975      	ldr	r1, [pc, #468]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800492a:	4313      	orrs	r3, r2
 800492c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	4b70      	ldr	r3, [pc, #448]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004946:	429a      	cmp	r2, r3
 8004948:	d908      	bls.n	800495c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800494a:	4b6d      	ldr	r3, [pc, #436]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	496a      	ldr	r1, [pc, #424]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004958:	4313      	orrs	r3, r2
 800495a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	d010      	beq.n	800498a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	4b64      	ldr	r3, [pc, #400]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004974:	429a      	cmp	r2, r3
 8004976:	d908      	bls.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004978:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	495e      	ldr	r1, [pc, #376]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004986:	4313      	orrs	r3, r2
 8004988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d908      	bls.n	80049b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	4953      	ldr	r1, [pc, #332]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d908      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f023 020f 	bic.w	r2, r3, #15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4947      	ldr	r1, [pc, #284]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d055      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4940      	ldr	r1, [pc, #256]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a0c:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d121      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0f6      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a24:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d115      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0ea      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a3c:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0de      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0d6      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f023 0207 	bic.w	r2, r3, #7
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4925      	ldr	r1, [pc, #148]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fc ffb7 	bl	80019e0 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a76:	f7fc ffb3 	bl	80019e0 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0be      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d1eb      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d010      	beq.n	8004acc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d208      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f023 020f 	bic.w	r2, r3, #15
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d214      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	4906      	ldr	r1, [pc, #24]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCC_ClockConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e086      	b.n	8004c0a <HAL_RCC_ClockConfig+0x34e>
 8004afc:	52002000 	.word	0x52002000
 8004b00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d010      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	4b3f      	ldr	r3, [pc, #252]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d208      	bcs.n	8004b32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b20:	4b3c      	ldr	r3, [pc, #240]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4939      	ldr	r1, [pc, #228]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d208      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b4e:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	492e      	ldr	r1, [pc, #184]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d208      	bcs.n	8004b8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b7c:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	4922      	ldr	r1, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d208      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4917      	ldr	r1, [pc, #92]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bbc:	f000 f834 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x35c>)
 8004bce:	5cd3      	ldrb	r3, [r2, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8004bd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_RCC_ClockConfig+0x358>)
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <HAL_RCC_ClockConfig+0x35c>)
 8004be4:	5cd3      	ldrb	r3, [r2, r3]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x360>)
 8004bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x364>)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCC_ClockConfig+0x368>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fc face 	bl	80011a0 <HAL_InitTick>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	0801d080 	.word	0x0801d080
 8004c1c:	20000004 	.word	0x20000004
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000008 	.word	0x20000008

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2e:	4baf      	ldr	r3, [pc, #700]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c36:	2b18      	cmp	r3, #24
 8004c38:	f200 814e 	bhi.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004ed9 	.word	0x08004ed9
 8004c4c:	08004ed9 	.word	0x08004ed9
 8004c50:	08004ed9 	.word	0x08004ed9
 8004c54:	08004ed9 	.word	0x08004ed9
 8004c58:	08004ed9 	.word	0x08004ed9
 8004c5c:	08004ed9 	.word	0x08004ed9
 8004c60:	08004ed9 	.word	0x08004ed9
 8004c64:	08004ccf 	.word	0x08004ccf
 8004c68:	08004ed9 	.word	0x08004ed9
 8004c6c:	08004ed9 	.word	0x08004ed9
 8004c70:	08004ed9 	.word	0x08004ed9
 8004c74:	08004ed9 	.word	0x08004ed9
 8004c78:	08004ed9 	.word	0x08004ed9
 8004c7c:	08004ed9 	.word	0x08004ed9
 8004c80:	08004ed9 	.word	0x08004ed9
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004ed9 	.word	0x08004ed9
 8004c8c:	08004ed9 	.word	0x08004ed9
 8004c90:	08004ed9 	.word	0x08004ed9
 8004c94:	08004ed9 	.word	0x08004ed9
 8004c98:	08004ed9 	.word	0x08004ed9
 8004c9c:	08004ed9 	.word	0x08004ed9
 8004ca0:	08004ed9 	.word	0x08004ed9
 8004ca4:	08004cdb 	.word	0x08004cdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ca8:	4b90      	ldr	r3, [pc, #576]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d009      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cb4:	4b8d      	ldr	r3, [pc, #564]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	4a8c      	ldr	r2, [pc, #560]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004cc6:	e10a      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cc8:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004cca:	61bb      	str	r3, [r7, #24]
    break;
 8004ccc:	e107      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cce:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004cd0:	61bb      	str	r3, [r7, #24]
    break;
 8004cd2:	e104      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004cd6:	61bb      	str	r3, [r7, #24]
    break;
 8004cd8:	e101      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cda:	4b84      	ldr	r3, [pc, #528]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ce4:	4b81      	ldr	r3, [pc, #516]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cf0:	4b7e      	ldr	r3, [pc, #504]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004cfa:	4b7c      	ldr	r3, [pc, #496]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	08db      	lsrs	r3, r3, #3
 8004d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80da 	beq.w	8004ed2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d05a      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x1b2>
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d302      	bcc.n	8004d2e <HAL_RCC_GetSysClockFreq+0x106>
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d078      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f6>
 8004d2c:	e099      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02d      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	08db      	lsrs	r3, r3, #3
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	4a6a      	ldr	r2, [pc, #424]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d46:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d64:	4b61      	ldr	r3, [pc, #388]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d74:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d78:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d94:	e087      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da8:	4b50      	ldr	r3, [pc, #320]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dbc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dd8:	e065      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e1c:	e043      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e28:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e30:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e44:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e60:	e021      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e88:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eca:	ee17 3a90 	vmov	r3, s15
 8004ece:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ed0:	e005      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
    break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004eda:	61bb      	str	r3, [r7, #24]
    break;
 8004edc:	bf00      	nop
  }

  return sysclockfreq;
 8004ede:	69bb      	ldr	r3, [r7, #24]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	03d09000 	.word	0x03d09000
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	46000000 	.word	0x46000000
 8004f00:	4c742400 	.word	0x4c742400
 8004f04:	4a742400 	.word	0x4a742400
 8004f08:	4af42400 	.word	0x4af42400

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f12:	f7ff fe89 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004f16:	4601      	mov	r1, r0
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f24:	5cd3      	ldrb	r3, [r2, r3]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f4a:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	0801d080 	.word	0x0801d080
 8004f64:	20000004 	.word	0x20000004
 8004f68:	20000000 	.word	0x20000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f70:	f7ff ffcc 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f74:	4601      	mov	r1, r0
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	58024400 	.word	0x58024400
 8004f94:	0801d080 	.word	0x0801d080

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f9c:	f7ff ffb6 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	0801d080 	.word	0x0801d080

08004fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	223f      	movs	r2, #63	; 0x3f
 8004fd2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0207 	and.w	r2, r3, #7
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCC_GetClockConfig+0x7c>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_GetClockConfig+0x80>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 020f 	and.w	r2, r3, #15
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	58024400 	.word	0x58024400
 8005044:	52002000 	.word	0x52002000

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005054:	2300      	movs	r3, #0
 8005056:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d03d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506c:	d013      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	d802      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005078:	e01f      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800507e:	d013      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005084:	d01c      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005086:	e018      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4baf      	ldr	r3, [pc, #700]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4aae      	ldr	r2, [pc, #696]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005094:	e015      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2102      	movs	r1, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f95f 	bl	8006360 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050a6:	e00c      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fa08 	bl	80064c4 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
      break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050c8:	4b9f      	ldr	r3, [pc, #636]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d4:	499c      	ldr	r1, [pc, #624]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	650b      	str	r3, [r1, #80]	; 0x50
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d03d      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d826      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005111 	.word	0x08005111
 8005100:	0800511f 	.word	0x0800511f
 8005104:	08005131 	.word	0x08005131
 8005108:	08005149 	.word	0x08005149
 800510c:	08005149 	.word	0x08005149
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4b8d      	ldr	r3, [pc, #564]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a8c      	ldr	r2, [pc, #560]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800511c:	e015      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f001 f91b 	bl	8006360 <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800512e:	e00c      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3324      	adds	r3, #36	; 0x24
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f9c4 	bl	80064c4 <RCCEx_PLL3_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
      break;
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005150:	4b7d      	ldr	r3, [pc, #500]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005154:	f023 0207 	bic.w	r2, r3, #7
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	497a      	ldr	r1, [pc, #488]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800515e:	4313      	orrs	r3, r2
 8005160:	650b      	str	r3, [r1, #80]	; 0x50
 8005162:	e001      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005170:	2b00      	cmp	r3, #0
 8005172:	d03e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d01c      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d804      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d00d      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005188:	e01e      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800518a:	2bc0      	cmp	r3, #192	; 0xc0
 800518c:	d01f      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d01e      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005194:	e018      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005196:	4b6c      	ldr	r3, [pc, #432]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a6b      	ldr	r2, [pc, #428]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800519c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051a2:	e017      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f8d8 	bl	8006360 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051b4:	e00e      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3324      	adds	r3, #36	; 0x24
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f981 	bl	80064c4 <RCCEx_PLL3_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051c6:	e005      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	e002      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80051d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051da:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	4958      	ldr	r1, [pc, #352]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	650b      	str	r3, [r1, #80]	; 0x50
 80051ec:	e001      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d044      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005208:	d01f      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800520a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800520e:	d805      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005218:	d00e      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800521a:	e01f      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800521c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005220:	d01f      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005226:	d01e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005228:	e018      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	4a46      	ldr	r2, [pc, #280]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005236:	e017      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f88e 	bl	8006360 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005248:	e00e      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f001 f937 	bl	80064c4 <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800525a:	e005      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800527c:	4932      	ldr	r1, [pc, #200]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800527e:	4313      	orrs	r3, r2
 8005280:	658b      	str	r3, [r1, #88]	; 0x58
 8005282:	e001      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005290:	2b00      	cmp	r3, #0
 8005292:	d044      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800529a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529e:	d01f      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80052a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052a4:	d805      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80052aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ae:	d00e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x286>
 80052b0:	e01f      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80052b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052b6:	d01f      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052bc:	d01e      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052be:	e018      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052cc:	e017      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f843 	bl	8006360 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052de:	e00e      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 f8ec 	bl	80064c4 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052f0:	e005      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80052fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005304:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005314:	4313      	orrs	r3, r2
 8005316:	658b      	str	r3, [r1, #88]	; 0x58
 8005318:	e001      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d035      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532e:	2b10      	cmp	r3, #16
 8005330:	d00c      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005332:	2b10      	cmp	r3, #16
 8005334:	d802      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800533a:	e017      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d00c      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d018      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005344:	e012      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534c:	4baf      	ldr	r3, [pc, #700]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4aae      	ldr	r2, [pc, #696]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005358:	e00e      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fffd 	bl	8006360 <RCCEx_PLL2_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800536a:	e005      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800537e:	4ba3      	ldr	r3, [pc, #652]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	49a0      	ldr	r1, [pc, #640]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005390:	e001      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d042      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	d01f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b0:	d805      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d00e      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x392>
 80053bc:	e01f      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80053be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053c2:	d01f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80053c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c8:	d01e      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80053ca:	e018      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053cc:	4b8f      	ldr	r3, [pc, #572]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a8e      	ldr	r2, [pc, #568]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053d8:	e017      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 ffbd 	bl	8006360 <RCCEx_PLL2_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053ea:	e00e      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3324      	adds	r3, #36	; 0x24
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 f866 	bl	80064c4 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053fc:	e005      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
      break;
 8005402:	e002      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005410:	4b7e      	ldr	r3, [pc, #504]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	497b      	ldr	r1, [pc, #492]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	650b      	str	r3, [r1, #80]	; 0x50
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d042      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543c:	d01b      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005442:	d805      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800544e:	e01b      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005454:	d01d      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545a:	d01c      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800545c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005460:	d01b      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005462:	e011      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	2101      	movs	r1, #1
 800546a:	4618      	mov	r0, r3
 800546c:	f000 ff78 	bl	8006360 <RCCEx_PLL2_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005474:	e012      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3324      	adds	r3, #36	; 0x24
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f821 	bl	80064c4 <RCCEx_PLL3_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005486:	e009      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
      break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800549a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054a2:	4b5a      	ldr	r3, [pc, #360]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ae:	4957      	ldr	r1, [pc, #348]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	650b      	str	r3, [r1, #80]	; 0x50
 80054b4:	e001      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d044      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d01b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d6:	d805      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d022      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80054e2:	e01b      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d01d      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ee:	d01c      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80054f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054f4:	d01b      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80054f6:	e011      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 ff2e 	bl	8006360 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005508:	e012      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f000 ffd7 	bl	80064c4 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800551a:	e009      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	e006      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005522:	bf00      	nop
 8005524:	e004      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800552e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005544:	4931      	ldr	r1, [pc, #196]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005546:	4313      	orrs	r3, r2
 8005548:	658b      	str	r3, [r1, #88]	; 0x58
 800554a:	e001      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02d      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005564:	d005      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556a:	d009      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d013      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005570:	e00f      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005572:	4b26      	ldr	r3, [pc, #152]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4a25      	ldr	r2, [pc, #148]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800557e:	e00c      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	2101      	movs	r1, #1
 8005586:	4618      	mov	r0, r3
 8005588:	f000 feea 	bl	8006360 <RCCEx_PLL2_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005590:	e003      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
      break;
 8005596:	e000      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ac:	4917      	ldr	r1, [pc, #92]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	650b      	str	r3, [r1, #80]	; 0x50
 80055b2:	e001      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d035      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d81b      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005611 	.word	0x08005611
 80055d8:	080055e5 	.word	0x080055e5
 80055dc:	080055f3 	.word	0x080055f3
 80055e0:	08005611 	.word	0x08005611
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055f0:	e00f      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	2102      	movs	r1, #2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 feb1 	bl	8006360 <RCCEx_PLL2_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005602:	e006      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
      break;
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800560a:	bf00      	nop
 800560c:	58024400 	.word	0x58024400
      break;
 8005610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005618:	4bba      	ldr	r3, [pc, #744]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	f023 0203 	bic.w	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	49b7      	ldr	r1, [pc, #732]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	64cb      	str	r3, [r1, #76]	; 0x4c
 800562a:	e001      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8086 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800563e:	4bb2      	ldr	r3, [pc, #712]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4ab1      	ldr	r2, [pc, #708]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800564a:	f7fc f9c9 	bl	80019e0 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005650:	e009      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005652:	f7fc f9c5 	bl	80019e0 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b64      	cmp	r3, #100	; 0x64
 800565e:	d902      	bls.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	75fb      	strb	r3, [r7, #23]
        break;
 8005664:	e005      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005666:	4ba8      	ldr	r3, [pc, #672]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ef      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d166      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005678:	4ba2      	ldr	r3, [pc, #648]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800567a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005682:	4053      	eors	r3, r2
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	2b00      	cmp	r3, #0
 800568a:	d013      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800568c:	4b9d      	ldr	r3, [pc, #628]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005696:	4b9b      	ldr	r3, [pc, #620]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a9a      	ldr	r2, [pc, #616]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a2:	4b98      	ldr	r3, [pc, #608]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a97      	ldr	r2, [pc, #604]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056ae:	4a95      	ldr	r2, [pc, #596]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056be:	d115      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fc f98e 	bl	80019e0 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c6:	e00b      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fc f98a 	bl	80019e0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d902      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	75fb      	strb	r3, [r7, #23]
            break;
 80056de:	e005      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e0:	4b88      	ldr	r3, [pc, #544]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ed      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d126      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005700:	d10d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005702:	4b80      	ldr	r3, [pc, #512]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005710:	0919      	lsrs	r1, r3, #4
 8005712:	4b7e      	ldr	r3, [pc, #504]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005714:	400b      	ands	r3, r1
 8005716:	497b      	ldr	r1, [pc, #492]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	610b      	str	r3, [r1, #16]
 800571c:	e005      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800571e:	4b79      	ldr	r3, [pc, #484]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a78      	ldr	r2, [pc, #480]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005724:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005728:	6113      	str	r3, [r2, #16]
 800572a:	4b76      	ldr	r3, [pc, #472]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800572c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005738:	4972      	ldr	r1, [pc, #456]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	670b      	str	r3, [r1, #112]	; 0x70
 800573e:	e004      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	75bb      	strb	r3, [r7, #22]
 8005744:	e001      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d07d      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575a:	2b28      	cmp	r3, #40	; 0x28
 800575c:	d866      	bhi.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005833 	.word	0x08005833
 8005768:	0800582d 	.word	0x0800582d
 800576c:	0800582d 	.word	0x0800582d
 8005770:	0800582d 	.word	0x0800582d
 8005774:	0800582d 	.word	0x0800582d
 8005778:	0800582d 	.word	0x0800582d
 800577c:	0800582d 	.word	0x0800582d
 8005780:	0800582d 	.word	0x0800582d
 8005784:	08005809 	.word	0x08005809
 8005788:	0800582d 	.word	0x0800582d
 800578c:	0800582d 	.word	0x0800582d
 8005790:	0800582d 	.word	0x0800582d
 8005794:	0800582d 	.word	0x0800582d
 8005798:	0800582d 	.word	0x0800582d
 800579c:	0800582d 	.word	0x0800582d
 80057a0:	0800582d 	.word	0x0800582d
 80057a4:	0800581b 	.word	0x0800581b
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	0800582d 	.word	0x0800582d
 80057b0:	0800582d 	.word	0x0800582d
 80057b4:	0800582d 	.word	0x0800582d
 80057b8:	0800582d 	.word	0x0800582d
 80057bc:	0800582d 	.word	0x0800582d
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	08005833 	.word	0x08005833
 80057c8:	0800582d 	.word	0x0800582d
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	0800582d 	.word	0x0800582d
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	08005833 	.word	0x08005833
 80057e8:	0800582d 	.word	0x0800582d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	0800582d 	.word	0x0800582d
 80057f4:	0800582d 	.word	0x0800582d
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005833 	.word	0x08005833
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fda6 	bl	8006360 <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005818:	e00c      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3324      	adds	r3, #36	; 0x24
 800581e:	2101      	movs	r1, #1
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fe4f 	bl	80064c4 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75fb      	strb	r3, [r7, #23]
      break;
 8005830:	e000      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800583a:	4b32      	ldr	r3, [pc, #200]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005846:	492f      	ldr	r1, [pc, #188]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005848:	4313      	orrs	r3, r2
 800584a:	654b      	str	r3, [r1, #84]	; 0x54
 800584c:	e001      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	2b05      	cmp	r3, #5
 8005864:	d820      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058af 	.word	0x080058af
 8005870:	08005885 	.word	0x08005885
 8005874:	08005897 	.word	0x08005897
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fd68 	bl	8006360 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005894:	e00c      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	2101      	movs	r1, #1
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fe11 	bl	80064c4 <RCCEx_PLL3_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
      break;
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80058ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058b6:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f023 0207 	bic.w	r2, r3, #7
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	4910      	ldr	r1, [pc, #64]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	654b      	str	r3, [r1, #84]	; 0x54
 80058c8:	e001      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d040      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d827      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	0800593b 	.word	0x0800593b
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005923 	.word	0x08005923
 80058f8:	0800593b 	.word	0x0800593b
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800593b 	.word	0x0800593b
 8005904:	58024400 	.word	0x58024400
 8005908:	58024800 	.word	0x58024800
 800590c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fd22 	bl	8006360 <RCCEx_PLL2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005920:	e00c      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3324      	adds	r3, #36	; 0x24
 8005926:	2101      	movs	r1, #1
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fdcb 	bl	80064c4 <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
      break;
 8005938:	e000      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800593a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005942:	4bb2      	ldr	r3, [pc, #712]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f023 0207 	bic.w	r2, r3, #7
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	49ae      	ldr	r1, [pc, #696]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	658b      	str	r3, [r1, #88]	; 0x58
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d044      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800596e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005972:	d01b      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005978:	d805      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800597e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005984:	e01b      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598a:	d01d      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800598c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005990:	d01c      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005996:	d01b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005998:	e011      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fcdd 	bl	8006360 <RCCEx_PLL2_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059aa:	e012      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fd86 	bl	80064c4 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059bc:	e009      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
      break;
 80059c2:	e006      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059c4:	bf00      	nop
 80059c6:	e004      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059c8:	bf00      	nop
 80059ca:	e002      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059cc:	bf00      	nop
 80059ce:	e000      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d8:	4b8c      	ldr	r3, [pc, #560]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e6:	4989      	ldr	r1, [pc, #548]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	654b      	str	r3, [r1, #84]	; 0x54
 80059ec:	e001      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d044      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a08:	d01b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d805      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d022      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005a1a:	e01b      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d01d      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005a22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a26:	d01c      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a2c:	d01b      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc92 	bl	8006360 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a40:	e012      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3324      	adds	r3, #36	; 0x24
 8005a46:	2102      	movs	r1, #2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fd3b 	bl	80064c4 <RCCEx_PLL3_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a52:	e009      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
      break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a6e:	4b67      	ldr	r3, [pc, #412]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a7c:	4963      	ldr	r1, [pc, #396]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	658b      	str	r3, [r1, #88]	; 0x58
 8005a82:	e001      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d044      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a9e:	d01b      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa4:	d805      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d022      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005ab0:	e01b      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab6:	d01d      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005abc:	d01c      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005abe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ac2:	d01b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005ac4:	e011      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fc47 	bl	8006360 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ad6:	e012      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3324      	adds	r3, #36	; 0x24
 8005adc:	2102      	movs	r1, #2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fcf0 	bl	80064c4 <RCCEx_PLL3_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e009      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	e006      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005af0:	bf00      	nop
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b12:	493e      	ldr	r1, [pc, #248]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	658b      	str	r3, [r1, #88]	; 0x58
 8005b18:	e001      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d10a      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fcc1 	bl	80064c4 <RCCEx_PLL3_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5a:	492c      	ldr	r1, [pc, #176]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d10a      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fca0 	bl	80064c4 <RCCEx_PLL3_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9c:	491b      	ldr	r1, [pc, #108]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d032      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d00d      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bbe:	d016      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fbc8 	bl	8006360 <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005bd4:	e00c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3324      	adds	r3, #36	; 0x24
 8005bda:	2102      	movs	r1, #2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fc71 	bl	80064c4 <RCCEx_PLL3_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005be6:	e003      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
      break;
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c04:	4901      	ldr	r1, [pc, #4]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	658b      	str	r3, [r1, #88]	; 0x58
 8005c0a:	e003      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005c2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c30:	d015      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d10f      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c38:	4b71      	ldr	r3, [pc, #452]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	4a70      	ldr	r2, [pc, #448]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c44:	e00c      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3324      	adds	r3, #36	; 0x24
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fc39 	bl	80064c4 <RCCEx_PLL3_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c66:	4b66      	ldr	r3, [pc, #408]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c74:	4962      	ldr	r1, [pc, #392]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	654b      	str	r3, [r1, #84]	; 0x54
 8005c7a:	e001      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d029      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d007      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005c9a:	e00f      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b58      	ldr	r3, [pc, #352]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a57      	ldr	r2, [pc, #348]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ca8:	e00b      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fb55 	bl	8006360 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cba:	e002      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cc8:	4b4d      	ldr	r3, [pc, #308]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd4:	494a      	ldr	r1, [pc, #296]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3324      	adds	r3, #36	; 0x24
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fbe6 	bl	80064c4 <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02f      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d16:	d00c      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1c:	d802      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d011      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005d22:	e00d      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d00f      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d2e:	d00e      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d32:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d3e:	e007      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
      break;
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d56:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d62:	4927      	ldr	r1, [pc, #156]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	654b      	str	r3, [r1, #84]	; 0x54
 8005d68:	e001      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d7a:	4b21      	ldr	r3, [pc, #132]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	491e      	ldr	r1, [pc, #120]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d98:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da4:	4916      	ldr	r1, [pc, #88]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc0:	6113      	str	r3, [r2, #16]
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005dcc:	490c      	ldr	r1, [pc, #48]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da08      	bge.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de6:	4906      	ldr	r1, [pc, #24]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005dec:	7dbb      	ldrb	r3, [r7, #22]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	58024400 	.word	0x58024400

08005e04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e08:	f7ff f880 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e1a:	5cd3      	ldrb	r3, [r2, r3]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	0801d080 	.word	0x0801d080

08005e30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e38:	4b9d      	ldr	r3, [pc, #628]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005e42:	4b9b      	ldr	r3, [pc, #620]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	0b1b      	lsrs	r3, r3, #12
 8005e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e4e:	4b98      	ldr	r3, [pc, #608]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e5a:	4b95      	ldr	r3, [pc, #596]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	08db      	lsrs	r3, r3, #3
 8005e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 810a 	beq.w	8006092 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d05a      	beq.n	8005f3a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d302      	bcc.n	8005e8e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d078      	beq.n	8005f7e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005e8c:	e099      	b.n	8005fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8e:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02d      	beq.n	8005ef6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e9a:	4b85      	ldr	r3, [pc, #532]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	08db      	lsrs	r3, r3, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	4a83      	ldr	r2, [pc, #524]	; (80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec4:	4b7a      	ldr	r3, [pc, #488]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ef4:	e087      	b.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060bc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f08:	4b69      	ldr	r3, [pc, #420]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f38:	e065      	b.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4c:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f60:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f7c:	e043      	b.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f90:	4b47      	ldr	r3, [pc, #284]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	ee07 3a90 	vmov	s15, r3
 8005f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc0:	e021      	b.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fcc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006000:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006004:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	0a5b      	lsrs	r3, r3, #9
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800601c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006020:	edd7 6a07 	vldr	s13, [r7, #28]
 8006024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800602c:	ee17 2a90 	vmov	r2, s15
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006034:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	0e1b      	lsrs	r3, r3, #24
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006088:	ee17 2a90 	vmov	r2, s15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006090:	e008      	b.n	80060a4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3724      	adds	r7, #36	; 0x24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	58024400 	.word	0x58024400
 80060b4:	03d09000 	.word	0x03d09000
 80060b8:	46000000 	.word	0x46000000
 80060bc:	4c742400 	.word	0x4c742400
 80060c0:	4a742400 	.word	0x4a742400
 80060c4:	4af42400 	.word	0x4af42400

080060c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060d0:	4b9d      	ldr	r3, [pc, #628]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80060da:	4b9b      	ldr	r3, [pc, #620]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060e6:	4b98      	ldr	r3, [pc, #608]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80060f2:	4b95      	ldr	r3, [pc, #596]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	08db      	lsrs	r3, r3, #3
 80060f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 810a 	beq.w	800632a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d05a      	beq.n	80061d2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800611c:	2b01      	cmp	r3, #1
 800611e:	d302      	bcc.n	8006126 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006120:	2b02      	cmp	r3, #2
 8006122:	d078      	beq.n	8006216 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006124:	e099      	b.n	800625a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006126:	4b88      	ldr	r3, [pc, #544]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d02d      	beq.n	800618e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006132:	4b85      	ldr	r3, [pc, #532]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	08db      	lsrs	r3, r3, #3
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	4a83      	ldr	r2, [pc, #524]	; (800634c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615c:	4b7a      	ldr	r3, [pc, #488]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006170:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006188:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800618c:	e087      	b.n	800629e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006198:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800619c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a0:	4b69      	ldr	r3, [pc, #420]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d0:	e065      	b.n	800629e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80061e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e4:	4b58      	ldr	r3, [pc, #352]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006214:	e043      	b.n	800629e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800635c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006228:	4b47      	ldr	r3, [pc, #284]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006238:	ed97 6a03 	vldr	s12, [r7, #12]
 800623c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006258:	e021      	b.n	800629e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006264:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626c:	4b36      	ldr	r3, [pc, #216]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006280:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800629c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800629e:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	0a5b      	lsrs	r3, r3, #9
 80062a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80062bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c4:	ee17 2a90 	vmov	r2, s15
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80062cc:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f2:	ee17 2a90 	vmov	r2, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	0e1b      	lsrs	r3, r3, #24
 8006300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006314:	edd7 6a07 	vldr	s13, [r7, #28]
 8006318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006320:	ee17 2a90 	vmov	r2, s15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006328:	e008      	b.n	800633c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
}
 800633c:	bf00      	nop
 800633e:	3724      	adds	r7, #36	; 0x24
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	58024400 	.word	0x58024400
 800634c:	03d09000 	.word	0x03d09000
 8006350:	46000000 	.word	0x46000000
 8006354:	4c742400 	.word	0x4c742400
 8006358:	4a742400 	.word	0x4a742400
 800635c:	4af42400 	.word	0x4af42400

08006360 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800636e:	4b53      	ldr	r3, [pc, #332]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d101      	bne.n	800637e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e099      	b.n	80064b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800637e:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a4e      	ldr	r2, [pc, #312]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006384:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638a:	f7fb fb29 	bl	80019e0 <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006390:	e008      	b.n	80063a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006392:	f7fb fb25 	bl	80019e0 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e086      	b.n	80064b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063a4:	4b45      	ldr	r3, [pc, #276]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063b0:	4b42      	ldr	r3, [pc, #264]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	031b      	lsls	r3, r3, #12
 80063be:	493f      	ldr	r1, [pc, #252]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	628b      	str	r3, [r1, #40]	; 0x28
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063f4:	4931      	ldr	r1, [pc, #196]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	492d      	ldr	r1, [pc, #180]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f023 0220 	bic.w	r2, r3, #32
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	4928      	ldr	r1, [pc, #160]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a26      	ldr	r2, [pc, #152]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006424:	f023 0310 	bic.w	r3, r3, #16
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 800642c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <RCCEx_PLL2_Config+0x160>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	69d2      	ldr	r2, [r2, #28]
 8006436:	00d2      	lsls	r2, r2, #3
 8006438:	4920      	ldr	r1, [pc, #128]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800643e:	4b1f      	ldr	r3, [pc, #124]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006444:	f043 0310 	orr.w	r3, r3, #16
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800645c:	e00f      	b.n	800647e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006464:	4b15      	ldr	r3, [pc, #84]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	4a14      	ldr	r2, [pc, #80]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 800646a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800646e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006470:	e005      	b.n	800647e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a11      	ldr	r2, [pc, #68]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0e      	ldr	r2, [pc, #56]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 8006484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648a:	f7fb faa9 	bl	80019e0 <HAL_GetTick>
 800648e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006490:	e008      	b.n	80064a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006492:	f7fb faa5 	bl	80019e0 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e006      	b.n	80064b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <RCCEx_PLL2_Config+0x15c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	58024400 	.word	0x58024400
 80064c0:	ffff0007 	.word	0xffff0007

080064c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064d2:	4b53      	ldr	r3, [pc, #332]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d101      	bne.n	80064e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e099      	b.n	8006616 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064e2:	4b4f      	ldr	r3, [pc, #316]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a4e      	ldr	r2, [pc, #312]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80064e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ee:	f7fb fa77 	bl	80019e0 <HAL_GetTick>
 80064f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064f4:	e008      	b.n	8006508 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064f6:	f7fb fa73 	bl	80019e0 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e086      	b.n	8006616 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006508:	4b45      	ldr	r3, [pc, #276]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f0      	bne.n	80064f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006514:	4b42      	ldr	r3, [pc, #264]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	493f      	ldr	r1, [pc, #252]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	628b      	str	r3, [r1, #40]	; 0x28
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	3b01      	subs	r3, #1
 800652e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	3b01      	subs	r3, #1
 8006538:	025b      	lsls	r3, r3, #9
 800653a:	b29b      	uxth	r3, r3
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	3b01      	subs	r3, #1
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	3b01      	subs	r3, #1
 8006552:	061b      	lsls	r3, r3, #24
 8006554:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006558:	4931      	ldr	r1, [pc, #196]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800655a:	4313      	orrs	r3, r2
 800655c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800655e:	4b30      	ldr	r3, [pc, #192]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	492d      	ldr	r1, [pc, #180]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	4928      	ldr	r1, [pc, #160]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800658c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <RCCEx_PLL3_Config+0x160>)
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	69d2      	ldr	r2, [r2, #28]
 800659a:	00d2      	lsls	r2, r2, #3
 800659c:	4920      	ldr	r1, [pc, #128]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a19      	ldr	r2, [pc, #100]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065c0:	e00f      	b.n	80065e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d106      	bne.n	80065d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065d4:	e005      	b.n	80065e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065d6:	4b12      	ldr	r3, [pc, #72]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	4a11      	ldr	r2, [pc, #68]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a0e      	ldr	r2, [pc, #56]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 80065e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ee:	f7fb f9f7 	bl	80019e0 <HAL_GetTick>
 80065f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065f4:	e008      	b.n	8006608 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065f6:	f7fb f9f3 	bl	80019e0 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e006      	b.n	8006616 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <RCCEx_PLL3_Config+0x15c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	ffff0007 	.word	0xffff0007

08006628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e01d      	b.n	8006676 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f815 	bl	800667e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f000 f986 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <HAL_TIM_Base_Start_IT+0x50>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d00b      	beq.n	80066d6 <HAL_TIM_Base_Start_IT+0x42>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c4:	d007      	beq.n	80066d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	00010007 	.word	0x00010007

080066e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b02      	cmp	r3, #2
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0202 	mvn.w	r2, #2
 8006714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f905 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8f7 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f908 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b04      	cmp	r3, #4
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b04      	cmp	r3, #4
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0204 	mvn.w	r2, #4
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8db 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8cd 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8de 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0208 	mvn.w	r2, #8
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8b1 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8a3 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f8b4 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b10      	cmp	r3, #16
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0210 	mvn.w	r2, #16
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2208      	movs	r2, #8
 8006816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f887 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f879 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f88a 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0201 	mvn.w	r2, #1
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fa fc62 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d10e      	bne.n	8006898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d107      	bne.n	8006898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f914 	bl	8006ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f907 	bl	8006ad4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d10e      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f838 	bl	8006962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d10e      	bne.n	800691e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b20      	cmp	r3, #32
 800690c:	d107      	bne.n	800691e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f06f 0220 	mvn.w	r2, #32
 8006916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f8c7 	bl	8006aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a40      	ldr	r2, [pc, #256]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d00f      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <TIM_Base_SetConfig+0x118>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00b      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a3c      	ldr	r2, [pc, #240]	; (8006a94 <TIM_Base_SetConfig+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <TIM_Base_SetConfig+0x120>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3a      	ldr	r2, [pc, #232]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d108      	bne.n	80069ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2f      	ldr	r2, [pc, #188]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01f      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d8:	d01b      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <TIM_Base_SetConfig+0x118>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d017      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2b      	ldr	r2, [pc, #172]	; (8006a94 <TIM_Base_SetConfig+0x11c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <TIM_Base_SetConfig+0x120>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a29      	ldr	r2, [pc, #164]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <TIM_Base_SetConfig+0x128>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <TIM_Base_SetConfig+0x12c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <TIM_Base_SetConfig+0x130>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0xf8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a12      	ldr	r2, [pc, #72]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0xf8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <TIM_Base_SetConfig+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0xf8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <TIM_Base_SetConfig+0x12c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0xf8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a0f      	ldr	r2, [pc, #60]	; (8006aa8 <TIM_Base_SetConfig+0x130>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d103      	bne.n	8006a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	615a      	str	r2, [r3, #20]
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800

08006aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e042      	b.n	8006b80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fa fcb9 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2224      	movs	r2, #36	; 0x24
 8006b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8c4 	bl	8006cb8 <UART_SetConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e022      	b.n	8006b80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 fa36 	bl	8008fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f002 fabd 	bl	80090f8 <UART_CheckIdleState>
 8006b7e:	4603      	mov	r3, r0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	f040 8083 	bne.w	8006caa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_UART_Transmit+0x28>
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e07b      	b.n	8006cac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Transmit+0x3a>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e074      	b.n	8006cac <HAL_UART_Transmit+0x124>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2221      	movs	r2, #33	; 0x21
 8006bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006bda:	f7fa ff01 	bl	80019e0 <HAL_GetTick>
 8006bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d108      	bne.n	8006c0c <HAL_UART_Transmit+0x84>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d104      	bne.n	8006c0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	e003      	b.n	8006c14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c14:	e02c      	b.n	8006c70 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f002 fab1 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e03d      	b.n	8006cac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e007      	b.n	8006c5e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1cc      	bne.n	8006c16 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2200      	movs	r2, #0
 8006c84:	2140      	movs	r1, #64	; 0x40
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f002 fa7e 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e00a      	b.n	8006cac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	0000      	movs	r0, r0
	...

08006cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006cbc:	b090      	sub	sp, #64	; 0x40
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4bc1      	ldr	r3, [pc, #772]	; (8007000 <UART_SetConfig+0x348>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d02:	430b      	orrs	r3, r1
 8006d04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4ab7      	ldr	r2, [pc, #732]	; (8007004 <UART_SetConfig+0x34c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d004      	beq.n	8006d36 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d32:	4313      	orrs	r3, r2
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	4bb2      	ldr	r3, [pc, #712]	; (8007008 <UART_SetConfig+0x350>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	f023 010f 	bic.w	r1, r3, #15
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4aa9      	ldr	r2, [pc, #676]	; (800700c <UART_SetConfig+0x354>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d177      	bne.n	8006e5a <UART_SetConfig+0x1a2>
 8006d6a:	4ba9      	ldr	r3, [pc, #676]	; (8007010 <UART_SetConfig+0x358>)
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d72:	2b28      	cmp	r3, #40	; 0x28
 8006d74:	d86c      	bhi.n	8006e50 <UART_SetConfig+0x198>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0xc4>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006e21 	.word	0x08006e21
 8006d80:	08006e51 	.word	0x08006e51
 8006d84:	08006e51 	.word	0x08006e51
 8006d88:	08006e51 	.word	0x08006e51
 8006d8c:	08006e51 	.word	0x08006e51
 8006d90:	08006e51 	.word	0x08006e51
 8006d94:	08006e51 	.word	0x08006e51
 8006d98:	08006e51 	.word	0x08006e51
 8006d9c:	08006e29 	.word	0x08006e29
 8006da0:	08006e51 	.word	0x08006e51
 8006da4:	08006e51 	.word	0x08006e51
 8006da8:	08006e51 	.word	0x08006e51
 8006dac:	08006e51 	.word	0x08006e51
 8006db0:	08006e51 	.word	0x08006e51
 8006db4:	08006e51 	.word	0x08006e51
 8006db8:	08006e51 	.word	0x08006e51
 8006dbc:	08006e31 	.word	0x08006e31
 8006dc0:	08006e51 	.word	0x08006e51
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e51 	.word	0x08006e51
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006e51 	.word	0x08006e51
 8006dd4:	08006e51 	.word	0x08006e51
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e39 	.word	0x08006e39
 8006de0:	08006e51 	.word	0x08006e51
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08006e51 	.word	0x08006e51
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e51 	.word	0x08006e51
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e41 	.word	0x08006e41
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e26:	e233      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e2e:	e22f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e30:	2308      	movs	r3, #8
 8006e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e36:	e22b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3e:	e227      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e40:	2320      	movs	r3, #32
 8006e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e46:	e223      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e4e:	e21f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e56:	bf00      	nop
 8006e58:	e21a      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a6d      	ldr	r2, [pc, #436]	; (8007014 <UART_SetConfig+0x35c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d132      	bne.n	8006eca <UART_SetConfig+0x212>
 8006e64:	4b6a      	ldr	r3, [pc, #424]	; (8007010 <UART_SetConfig+0x358>)
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d827      	bhi.n	8006ec0 <UART_SetConfig+0x208>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x1c0>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e96:	e1fb      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e9e:	e1f7      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ea6:	e1f3      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eae:	e1ef      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eb6:	e1eb      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ebe:	e1e7      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ec6:	bf00      	nop
 8006ec8:	e1e2      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a52      	ldr	r2, [pc, #328]	; (8007018 <UART_SetConfig+0x360>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d132      	bne.n	8006f3a <UART_SetConfig+0x282>
 8006ed4:	4b4e      	ldr	r3, [pc, #312]	; (8007010 <UART_SetConfig+0x358>)
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d827      	bhi.n	8006f30 <UART_SetConfig+0x278>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <UART_SetConfig+0x230>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f06:	e1c3      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f0e:	e1bf      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f16:	e1bb      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f1e:	e1b7      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f20:	2320      	movs	r3, #32
 8006f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f26:	e1b3      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f2e:	e1af      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f36:	bf00      	nop
 8006f38:	e1aa      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a37      	ldr	r2, [pc, #220]	; (800701c <UART_SetConfig+0x364>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d132      	bne.n	8006faa <UART_SetConfig+0x2f2>
 8006f44:	4b32      	ldr	r3, [pc, #200]	; (8007010 <UART_SetConfig+0x358>)
 8006f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b05      	cmp	r3, #5
 8006f4e:	d827      	bhi.n	8006fa0 <UART_SetConfig+0x2e8>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <UART_SetConfig+0x2a0>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f71 	.word	0x08006f71
 8006f5c:	08006f79 	.word	0x08006f79
 8006f60:	08006f81 	.word	0x08006f81
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006f91 	.word	0x08006f91
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f76:	e18b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f7e:	e187      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f86:	e183      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f8e:	e17f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f90:	2320      	movs	r3, #32
 8006f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f96:	e17b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f9e:	e177      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fa6:	bf00      	nop
 8006fa8:	e172      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <UART_SetConfig+0x368>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d144      	bne.n	800703e <UART_SetConfig+0x386>
 8006fb4:	4b16      	ldr	r3, [pc, #88]	; (8007010 <UART_SetConfig+0x358>)
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d839      	bhi.n	8007034 <UART_SetConfig+0x37c>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <UART_SetConfig+0x310>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007025 	.word	0x08007025
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fe6:	e153      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fee:	e14f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ff6:	e14b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ffe:	e147      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007000:	cfff69f3 	.word	0xcfff69f3
 8007004:	58000c00 	.word	0x58000c00
 8007008:	11fff4ff 	.word	0x11fff4ff
 800700c:	40011000 	.word	0x40011000
 8007010:	58024400 	.word	0x58024400
 8007014:	40004400 	.word	0x40004400
 8007018:	40004800 	.word	0x40004800
 800701c:	40004c00 	.word	0x40004c00
 8007020:	40005000 	.word	0x40005000
 8007024:	2320      	movs	r3, #32
 8007026:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800702a:	e131      	b.n	8007290 <UART_SetConfig+0x5d8>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007032:	e12d      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800703a:	bf00      	nop
 800703c:	e128      	b.n	8007290 <UART_SetConfig+0x5d8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4ac3      	ldr	r2, [pc, #780]	; (8007350 <UART_SetConfig+0x698>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d178      	bne.n	800713a <UART_SetConfig+0x482>
 8007048:	4bc2      	ldr	r3, [pc, #776]	; (8007354 <UART_SetConfig+0x69c>)
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007050:	2b28      	cmp	r3, #40	; 0x28
 8007052:	d86d      	bhi.n	8007130 <UART_SetConfig+0x478>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <UART_SetConfig+0x3a4>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007101 	.word	0x08007101
 8007060:	08007131 	.word	0x08007131
 8007064:	08007131 	.word	0x08007131
 8007068:	08007131 	.word	0x08007131
 800706c:	08007131 	.word	0x08007131
 8007070:	08007131 	.word	0x08007131
 8007074:	08007131 	.word	0x08007131
 8007078:	08007131 	.word	0x08007131
 800707c:	08007109 	.word	0x08007109
 8007080:	08007131 	.word	0x08007131
 8007084:	08007131 	.word	0x08007131
 8007088:	08007131 	.word	0x08007131
 800708c:	08007131 	.word	0x08007131
 8007090:	08007131 	.word	0x08007131
 8007094:	08007131 	.word	0x08007131
 8007098:	08007131 	.word	0x08007131
 800709c:	08007111 	.word	0x08007111
 80070a0:	08007131 	.word	0x08007131
 80070a4:	08007131 	.word	0x08007131
 80070a8:	08007131 	.word	0x08007131
 80070ac:	08007131 	.word	0x08007131
 80070b0:	08007131 	.word	0x08007131
 80070b4:	08007131 	.word	0x08007131
 80070b8:	08007131 	.word	0x08007131
 80070bc:	08007119 	.word	0x08007119
 80070c0:	08007131 	.word	0x08007131
 80070c4:	08007131 	.word	0x08007131
 80070c8:	08007131 	.word	0x08007131
 80070cc:	08007131 	.word	0x08007131
 80070d0:	08007131 	.word	0x08007131
 80070d4:	08007131 	.word	0x08007131
 80070d8:	08007131 	.word	0x08007131
 80070dc:	08007121 	.word	0x08007121
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007131 	.word	0x08007131
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007131 	.word	0x08007131
 80070f0:	08007131 	.word	0x08007131
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007131 	.word	0x08007131
 80070fc:	08007129 	.word	0x08007129
 8007100:	2301      	movs	r3, #1
 8007102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007106:	e0c3      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007108:	2304      	movs	r3, #4
 800710a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800710e:	e0bf      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007110:	2308      	movs	r3, #8
 8007112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007116:	e0bb      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007118:	2310      	movs	r3, #16
 800711a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800711e:	e0b7      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007120:	2320      	movs	r3, #32
 8007122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007126:	e0b3      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800712e:	e0af      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007136:	bf00      	nop
 8007138:	e0aa      	b.n	8007290 <UART_SetConfig+0x5d8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a86      	ldr	r2, [pc, #536]	; (8007358 <UART_SetConfig+0x6a0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d132      	bne.n	80071aa <UART_SetConfig+0x4f2>
 8007144:	4b83      	ldr	r3, [pc, #524]	; (8007354 <UART_SetConfig+0x69c>)
 8007146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	2b05      	cmp	r3, #5
 800714e:	d827      	bhi.n	80071a0 <UART_SetConfig+0x4e8>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x4a0>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	08007171 	.word	0x08007171
 800715c:	08007179 	.word	0x08007179
 8007160:	08007181 	.word	0x08007181
 8007164:	08007189 	.word	0x08007189
 8007168:	08007191 	.word	0x08007191
 800716c:	08007199 	.word	0x08007199
 8007170:	2300      	movs	r3, #0
 8007172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007176:	e08b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800717e:	e087      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007186:	e083      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800718e:	e07f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007190:	2320      	movs	r3, #32
 8007192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007196:	e07b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007198:	2340      	movs	r3, #64	; 0x40
 800719a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800719e:	e077      	b.n	8007290 <UART_SetConfig+0x5d8>
 80071a0:	2380      	movs	r3, #128	; 0x80
 80071a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071a6:	bf00      	nop
 80071a8:	e072      	b.n	8007290 <UART_SetConfig+0x5d8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a6b      	ldr	r2, [pc, #428]	; (800735c <UART_SetConfig+0x6a4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d132      	bne.n	800721a <UART_SetConfig+0x562>
 80071b4:	4b67      	ldr	r3, [pc, #412]	; (8007354 <UART_SetConfig+0x69c>)
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d827      	bhi.n	8007210 <UART_SetConfig+0x558>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x510>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071e6:	e053      	b.n	8007290 <UART_SetConfig+0x5d8>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071ee:	e04f      	b.n	8007290 <UART_SetConfig+0x5d8>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071f6:	e04b      	b.n	8007290 <UART_SetConfig+0x5d8>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071fe:	e047      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007206:	e043      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800720e:	e03f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007216:	bf00      	nop
 8007218:	e03a      	b.n	8007290 <UART_SetConfig+0x5d8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a50      	ldr	r2, [pc, #320]	; (8007360 <UART_SetConfig+0x6a8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d132      	bne.n	800728a <UART_SetConfig+0x5d2>
 8007224:	4b4b      	ldr	r3, [pc, #300]	; (8007354 <UART_SetConfig+0x69c>)
 8007226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	2b05      	cmp	r3, #5
 800722e:	d827      	bhi.n	8007280 <UART_SetConfig+0x5c8>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <UART_SetConfig+0x580>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007251 	.word	0x08007251
 800723c:	08007259 	.word	0x08007259
 8007240:	08007261 	.word	0x08007261
 8007244:	08007269 	.word	0x08007269
 8007248:	08007271 	.word	0x08007271
 800724c:	08007279 	.word	0x08007279
 8007250:	2302      	movs	r3, #2
 8007252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007256:	e01b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007258:	2304      	movs	r3, #4
 800725a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800725e:	e017      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007260:	2308      	movs	r3, #8
 8007262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007266:	e013      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007268:	2310      	movs	r3, #16
 800726a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800726e:	e00f      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007270:	2320      	movs	r3, #32
 8007272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007276:	e00b      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007278:	2340      	movs	r3, #64	; 0x40
 800727a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800727e:	e007      	b.n	8007290 <UART_SetConfig+0x5d8>
 8007280:	2380      	movs	r3, #128	; 0x80
 8007282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <UART_SetConfig+0x5d8>
 800728a:	2380      	movs	r3, #128	; 0x80
 800728c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a32      	ldr	r2, [pc, #200]	; (8007360 <UART_SetConfig+0x6a8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f040 86f7 	bne.w	800808a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800729c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	f000 80c0 	beq.w	8007426 <UART_SetConfig+0x76e>
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	dc04      	bgt.n	80072b4 <UART_SetConfig+0x5fc>
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d00c      	beq.n	80072c8 <UART_SetConfig+0x610>
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d065      	beq.n	800737e <UART_SetConfig+0x6c6>
 80072b2:	e27a      	b.n	80077aa <UART_SetConfig+0xaf2>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	f000 81b0 	beq.w	800761a <UART_SetConfig+0x962>
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	f000 821e 	beq.w	80076fc <UART_SetConfig+0xa44>
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	f000 8104 	beq.w	80074ce <UART_SetConfig+0x816>
 80072c6:	e270      	b.n	80077aa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072c8:	f7fe fd9c 	bl	8005e04 <HAL_RCCEx_GetD3PCLK1Freq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d04e      	beq.n	8007374 <UART_SetConfig+0x6bc>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d048      	beq.n	8007370 <UART_SetConfig+0x6b8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d042      	beq.n	800736c <UART_SetConfig+0x6b4>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d03c      	beq.n	8007368 <UART_SetConfig+0x6b0>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d036      	beq.n	8007364 <UART_SetConfig+0x6ac>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d026      	beq.n	800734c <UART_SetConfig+0x694>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	2b06      	cmp	r3, #6
 8007304:	d020      	beq.n	8007348 <UART_SetConfig+0x690>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b07      	cmp	r3, #7
 800730c:	d01a      	beq.n	8007344 <UART_SetConfig+0x68c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b08      	cmp	r3, #8
 8007314:	d014      	beq.n	8007340 <UART_SetConfig+0x688>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b09      	cmp	r3, #9
 800731c:	d00e      	beq.n	800733c <UART_SetConfig+0x684>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b0a      	cmp	r3, #10
 8007324:	d008      	beq.n	8007338 <UART_SetConfig+0x680>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b0b      	cmp	r3, #11
 800732c:	d102      	bne.n	8007334 <UART_SetConfig+0x67c>
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	e020      	b.n	8007376 <UART_SetConfig+0x6be>
 8007334:	2301      	movs	r3, #1
 8007336:	e01e      	b.n	8007376 <UART_SetConfig+0x6be>
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	e01c      	b.n	8007376 <UART_SetConfig+0x6be>
 800733c:	2340      	movs	r3, #64	; 0x40
 800733e:	e01a      	b.n	8007376 <UART_SetConfig+0x6be>
 8007340:	2320      	movs	r3, #32
 8007342:	e018      	b.n	8007376 <UART_SetConfig+0x6be>
 8007344:	2310      	movs	r3, #16
 8007346:	e016      	b.n	8007376 <UART_SetConfig+0x6be>
 8007348:	230c      	movs	r3, #12
 800734a:	e014      	b.n	8007376 <UART_SetConfig+0x6be>
 800734c:	230a      	movs	r3, #10
 800734e:	e012      	b.n	8007376 <UART_SetConfig+0x6be>
 8007350:	40011400 	.word	0x40011400
 8007354:	58024400 	.word	0x58024400
 8007358:	40007800 	.word	0x40007800
 800735c:	40007c00 	.word	0x40007c00
 8007360:	58000c00 	.word	0x58000c00
 8007364:	2308      	movs	r3, #8
 8007366:	e006      	b.n	8007376 <UART_SetConfig+0x6be>
 8007368:	2306      	movs	r3, #6
 800736a:	e004      	b.n	8007376 <UART_SetConfig+0x6be>
 800736c:	2304      	movs	r3, #4
 800736e:	e002      	b.n	8007376 <UART_SetConfig+0x6be>
 8007370:	2302      	movs	r3, #2
 8007372:	e000      	b.n	8007376 <UART_SetConfig+0x6be>
 8007374:	2301      	movs	r3, #1
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800737c:	e219      	b.n	80077b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fd54 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d044      	beq.n	800741c <UART_SetConfig+0x764>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b01      	cmp	r3, #1
 8007398:	d03e      	beq.n	8007418 <UART_SetConfig+0x760>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d038      	beq.n	8007414 <UART_SetConfig+0x75c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d032      	beq.n	8007410 <UART_SetConfig+0x758>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d02c      	beq.n	800740c <UART_SetConfig+0x754>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b05      	cmp	r3, #5
 80073b8:	d026      	beq.n	8007408 <UART_SetConfig+0x750>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d020      	beq.n	8007404 <UART_SetConfig+0x74c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b07      	cmp	r3, #7
 80073c8:	d01a      	beq.n	8007400 <UART_SetConfig+0x748>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d014      	beq.n	80073fc <UART_SetConfig+0x744>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b09      	cmp	r3, #9
 80073d8:	d00e      	beq.n	80073f8 <UART_SetConfig+0x740>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b0a      	cmp	r3, #10
 80073e0:	d008      	beq.n	80073f4 <UART_SetConfig+0x73c>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b0b      	cmp	r3, #11
 80073e8:	d102      	bne.n	80073f0 <UART_SetConfig+0x738>
 80073ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ee:	e016      	b.n	800741e <UART_SetConfig+0x766>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e014      	b.n	800741e <UART_SetConfig+0x766>
 80073f4:	2380      	movs	r3, #128	; 0x80
 80073f6:	e012      	b.n	800741e <UART_SetConfig+0x766>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	e010      	b.n	800741e <UART_SetConfig+0x766>
 80073fc:	2320      	movs	r3, #32
 80073fe:	e00e      	b.n	800741e <UART_SetConfig+0x766>
 8007400:	2310      	movs	r3, #16
 8007402:	e00c      	b.n	800741e <UART_SetConfig+0x766>
 8007404:	230c      	movs	r3, #12
 8007406:	e00a      	b.n	800741e <UART_SetConfig+0x766>
 8007408:	230a      	movs	r3, #10
 800740a:	e008      	b.n	800741e <UART_SetConfig+0x766>
 800740c:	2308      	movs	r3, #8
 800740e:	e006      	b.n	800741e <UART_SetConfig+0x766>
 8007410:	2306      	movs	r3, #6
 8007412:	e004      	b.n	800741e <UART_SetConfig+0x766>
 8007414:	2304      	movs	r3, #4
 8007416:	e002      	b.n	800741e <UART_SetConfig+0x766>
 8007418:	2302      	movs	r3, #2
 800741a:	e000      	b.n	800741e <UART_SetConfig+0x766>
 800741c:	2301      	movs	r3, #1
 800741e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007424:	e1c5      	b.n	80077b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007426:	f107 030c 	add.w	r3, r7, #12
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fe4c 	bl	80060c8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d044      	beq.n	80074c4 <UART_SetConfig+0x80c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b01      	cmp	r3, #1
 8007440:	d03e      	beq.n	80074c0 <UART_SetConfig+0x808>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b02      	cmp	r3, #2
 8007448:	d038      	beq.n	80074bc <UART_SetConfig+0x804>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b03      	cmp	r3, #3
 8007450:	d032      	beq.n	80074b8 <UART_SetConfig+0x800>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b04      	cmp	r3, #4
 8007458:	d02c      	beq.n	80074b4 <UART_SetConfig+0x7fc>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b05      	cmp	r3, #5
 8007460:	d026      	beq.n	80074b0 <UART_SetConfig+0x7f8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b06      	cmp	r3, #6
 8007468:	d020      	beq.n	80074ac <UART_SetConfig+0x7f4>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b07      	cmp	r3, #7
 8007470:	d01a      	beq.n	80074a8 <UART_SetConfig+0x7f0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b08      	cmp	r3, #8
 8007478:	d014      	beq.n	80074a4 <UART_SetConfig+0x7ec>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b09      	cmp	r3, #9
 8007480:	d00e      	beq.n	80074a0 <UART_SetConfig+0x7e8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b0a      	cmp	r3, #10
 8007488:	d008      	beq.n	800749c <UART_SetConfig+0x7e4>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b0b      	cmp	r3, #11
 8007490:	d102      	bne.n	8007498 <UART_SetConfig+0x7e0>
 8007492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007496:	e016      	b.n	80074c6 <UART_SetConfig+0x80e>
 8007498:	2301      	movs	r3, #1
 800749a:	e014      	b.n	80074c6 <UART_SetConfig+0x80e>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	e012      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	e010      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074a4:	2320      	movs	r3, #32
 80074a6:	e00e      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074a8:	2310      	movs	r3, #16
 80074aa:	e00c      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074ac:	230c      	movs	r3, #12
 80074ae:	e00a      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074b0:	230a      	movs	r3, #10
 80074b2:	e008      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074b4:	2308      	movs	r3, #8
 80074b6:	e006      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074b8:	2306      	movs	r3, #6
 80074ba:	e004      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074bc:	2304      	movs	r3, #4
 80074be:	e002      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e000      	b.n	80074c6 <UART_SetConfig+0x80e>
 80074c4:	2301      	movs	r3, #1
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074cc:	e171      	b.n	80077b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ce:	4b7a      	ldr	r3, [pc, #488]	; (80076b8 <UART_SetConfig+0xa00>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d054      	beq.n	8007584 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074da:	4b77      	ldr	r3, [pc, #476]	; (80076b8 <UART_SetConfig+0xa00>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	4a75      	ldr	r2, [pc, #468]	; (80076bc <UART_SetConfig+0xa04>)
 80074e6:	40da      	lsrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d044      	beq.n	800757a <UART_SetConfig+0x8c2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d03e      	beq.n	8007576 <UART_SetConfig+0x8be>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d038      	beq.n	8007572 <UART_SetConfig+0x8ba>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b03      	cmp	r3, #3
 8007506:	d032      	beq.n	800756e <UART_SetConfig+0x8b6>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b04      	cmp	r3, #4
 800750e:	d02c      	beq.n	800756a <UART_SetConfig+0x8b2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b05      	cmp	r3, #5
 8007516:	d026      	beq.n	8007566 <UART_SetConfig+0x8ae>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b06      	cmp	r3, #6
 800751e:	d020      	beq.n	8007562 <UART_SetConfig+0x8aa>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b07      	cmp	r3, #7
 8007526:	d01a      	beq.n	800755e <UART_SetConfig+0x8a6>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b08      	cmp	r3, #8
 800752e:	d014      	beq.n	800755a <UART_SetConfig+0x8a2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b09      	cmp	r3, #9
 8007536:	d00e      	beq.n	8007556 <UART_SetConfig+0x89e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b0a      	cmp	r3, #10
 800753e:	d008      	beq.n	8007552 <UART_SetConfig+0x89a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b0b      	cmp	r3, #11
 8007546:	d102      	bne.n	800754e <UART_SetConfig+0x896>
 8007548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754c:	e016      	b.n	800757c <UART_SetConfig+0x8c4>
 800754e:	2301      	movs	r3, #1
 8007550:	e014      	b.n	800757c <UART_SetConfig+0x8c4>
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	e012      	b.n	800757c <UART_SetConfig+0x8c4>
 8007556:	2340      	movs	r3, #64	; 0x40
 8007558:	e010      	b.n	800757c <UART_SetConfig+0x8c4>
 800755a:	2320      	movs	r3, #32
 800755c:	e00e      	b.n	800757c <UART_SetConfig+0x8c4>
 800755e:	2310      	movs	r3, #16
 8007560:	e00c      	b.n	800757c <UART_SetConfig+0x8c4>
 8007562:	230c      	movs	r3, #12
 8007564:	e00a      	b.n	800757c <UART_SetConfig+0x8c4>
 8007566:	230a      	movs	r3, #10
 8007568:	e008      	b.n	800757c <UART_SetConfig+0x8c4>
 800756a:	2308      	movs	r3, #8
 800756c:	e006      	b.n	800757c <UART_SetConfig+0x8c4>
 800756e:	2306      	movs	r3, #6
 8007570:	e004      	b.n	800757c <UART_SetConfig+0x8c4>
 8007572:	2304      	movs	r3, #4
 8007574:	e002      	b.n	800757c <UART_SetConfig+0x8c4>
 8007576:	2302      	movs	r3, #2
 8007578:	e000      	b.n	800757c <UART_SetConfig+0x8c4>
 800757a:	2301      	movs	r3, #1
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007582:	e116      	b.n	80077b2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d043      	beq.n	8007614 <UART_SetConfig+0x95c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b01      	cmp	r3, #1
 8007592:	d03d      	beq.n	8007610 <UART_SetConfig+0x958>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b02      	cmp	r3, #2
 800759a:	d037      	beq.n	800760c <UART_SetConfig+0x954>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d031      	beq.n	8007608 <UART_SetConfig+0x950>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d02b      	beq.n	8007604 <UART_SetConfig+0x94c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	d025      	beq.n	8007600 <UART_SetConfig+0x948>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d01f      	beq.n	80075fc <UART_SetConfig+0x944>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b07      	cmp	r3, #7
 80075c2:	d019      	beq.n	80075f8 <UART_SetConfig+0x940>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d013      	beq.n	80075f4 <UART_SetConfig+0x93c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b09      	cmp	r3, #9
 80075d2:	d00d      	beq.n	80075f0 <UART_SetConfig+0x938>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b0a      	cmp	r3, #10
 80075da:	d007      	beq.n	80075ec <UART_SetConfig+0x934>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b0b      	cmp	r3, #11
 80075e2:	d101      	bne.n	80075e8 <UART_SetConfig+0x930>
 80075e4:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <UART_SetConfig+0xa08>)
 80075e6:	e016      	b.n	8007616 <UART_SetConfig+0x95e>
 80075e8:	4b34      	ldr	r3, [pc, #208]	; (80076bc <UART_SetConfig+0xa04>)
 80075ea:	e014      	b.n	8007616 <UART_SetConfig+0x95e>
 80075ec:	4b35      	ldr	r3, [pc, #212]	; (80076c4 <UART_SetConfig+0xa0c>)
 80075ee:	e012      	b.n	8007616 <UART_SetConfig+0x95e>
 80075f0:	4b35      	ldr	r3, [pc, #212]	; (80076c8 <UART_SetConfig+0xa10>)
 80075f2:	e010      	b.n	8007616 <UART_SetConfig+0x95e>
 80075f4:	4b35      	ldr	r3, [pc, #212]	; (80076cc <UART_SetConfig+0xa14>)
 80075f6:	e00e      	b.n	8007616 <UART_SetConfig+0x95e>
 80075f8:	4b35      	ldr	r3, [pc, #212]	; (80076d0 <UART_SetConfig+0xa18>)
 80075fa:	e00c      	b.n	8007616 <UART_SetConfig+0x95e>
 80075fc:	4b35      	ldr	r3, [pc, #212]	; (80076d4 <UART_SetConfig+0xa1c>)
 80075fe:	e00a      	b.n	8007616 <UART_SetConfig+0x95e>
 8007600:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <UART_SetConfig+0xa20>)
 8007602:	e008      	b.n	8007616 <UART_SetConfig+0x95e>
 8007604:	4b35      	ldr	r3, [pc, #212]	; (80076dc <UART_SetConfig+0xa24>)
 8007606:	e006      	b.n	8007616 <UART_SetConfig+0x95e>
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <UART_SetConfig+0xa28>)
 800760a:	e004      	b.n	8007616 <UART_SetConfig+0x95e>
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <UART_SetConfig+0xa2c>)
 800760e:	e002      	b.n	8007616 <UART_SetConfig+0x95e>
 8007610:	4b35      	ldr	r3, [pc, #212]	; (80076e8 <UART_SetConfig+0xa30>)
 8007612:	e000      	b.n	8007616 <UART_SetConfig+0x95e>
 8007614:	4b29      	ldr	r3, [pc, #164]	; (80076bc <UART_SetConfig+0xa04>)
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007618:	e0cb      	b.n	80077b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	d046      	beq.n	80076b0 <UART_SetConfig+0x9f8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b01      	cmp	r3, #1
 8007628:	d040      	beq.n	80076ac <UART_SetConfig+0x9f4>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b02      	cmp	r3, #2
 8007630:	d03a      	beq.n	80076a8 <UART_SetConfig+0x9f0>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b03      	cmp	r3, #3
 8007638:	d034      	beq.n	80076a4 <UART_SetConfig+0x9ec>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b04      	cmp	r3, #4
 8007640:	d02e      	beq.n	80076a0 <UART_SetConfig+0x9e8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b05      	cmp	r3, #5
 8007648:	d028      	beq.n	800769c <UART_SetConfig+0x9e4>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b06      	cmp	r3, #6
 8007650:	d022      	beq.n	8007698 <UART_SetConfig+0x9e0>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b07      	cmp	r3, #7
 8007658:	d01c      	beq.n	8007694 <UART_SetConfig+0x9dc>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b08      	cmp	r3, #8
 8007660:	d016      	beq.n	8007690 <UART_SetConfig+0x9d8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b09      	cmp	r3, #9
 8007668:	d00f      	beq.n	800768a <UART_SetConfig+0x9d2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b0a      	cmp	r3, #10
 8007670:	d008      	beq.n	8007684 <UART_SetConfig+0x9cc>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b0b      	cmp	r3, #11
 8007678:	d102      	bne.n	8007680 <UART_SetConfig+0x9c8>
 800767a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800767e:	e018      	b.n	80076b2 <UART_SetConfig+0x9fa>
 8007680:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <UART_SetConfig+0xa18>)
 8007682:	e016      	b.n	80076b2 <UART_SetConfig+0x9fa>
 8007684:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007688:	e013      	b.n	80076b2 <UART_SetConfig+0x9fa>
 800768a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800768e:	e010      	b.n	80076b2 <UART_SetConfig+0x9fa>
 8007690:	4b16      	ldr	r3, [pc, #88]	; (80076ec <UART_SetConfig+0xa34>)
 8007692:	e00e      	b.n	80076b2 <UART_SetConfig+0x9fa>
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <UART_SetConfig+0xa08>)
 8007696:	e00c      	b.n	80076b2 <UART_SetConfig+0x9fa>
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <UART_SetConfig+0xa38>)
 800769a:	e00a      	b.n	80076b2 <UART_SetConfig+0x9fa>
 800769c:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <UART_SetConfig+0xa3c>)
 800769e:	e008      	b.n	80076b2 <UART_SetConfig+0x9fa>
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <UART_SetConfig+0xa0c>)
 80076a2:	e006      	b.n	80076b2 <UART_SetConfig+0x9fa>
 80076a4:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <UART_SetConfig+0xa40>)
 80076a6:	e004      	b.n	80076b2 <UART_SetConfig+0x9fa>
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <UART_SetConfig+0xa10>)
 80076aa:	e002      	b.n	80076b2 <UART_SetConfig+0x9fa>
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <UART_SetConfig+0xa14>)
 80076ae:	e000      	b.n	80076b2 <UART_SetConfig+0x9fa>
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <UART_SetConfig+0xa18>)
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076b4:	e07d      	b.n	80077b2 <UART_SetConfig+0xafa>
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	03d09000 	.word	0x03d09000
 80076c0:	0003d090 	.word	0x0003d090
 80076c4:	0007a120 	.word	0x0007a120
 80076c8:	000f4240 	.word	0x000f4240
 80076cc:	001e8480 	.word	0x001e8480
 80076d0:	003d0900 	.word	0x003d0900
 80076d4:	00516155 	.word	0x00516155
 80076d8:	0061a800 	.word	0x0061a800
 80076dc:	007a1200 	.word	0x007a1200
 80076e0:	00a2c2aa 	.word	0x00a2c2aa
 80076e4:	00f42400 	.word	0x00f42400
 80076e8:	01e84800 	.word	0x01e84800
 80076ec:	0001e848 	.word	0x0001e848
 80076f0:	00051615 	.word	0x00051615
 80076f4:	00061a80 	.word	0x00061a80
 80076f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d04e      	beq.n	80077a2 <UART_SetConfig+0xaea>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b01      	cmp	r3, #1
 800770a:	d047      	beq.n	800779c <UART_SetConfig+0xae4>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b02      	cmp	r3, #2
 8007712:	d040      	beq.n	8007796 <UART_SetConfig+0xade>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b03      	cmp	r3, #3
 800771a:	d039      	beq.n	8007790 <UART_SetConfig+0xad8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b04      	cmp	r3, #4
 8007722:	d032      	beq.n	800778a <UART_SetConfig+0xad2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b05      	cmp	r3, #5
 800772a:	d02b      	beq.n	8007784 <UART_SetConfig+0xacc>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b06      	cmp	r3, #6
 8007732:	d024      	beq.n	800777e <UART_SetConfig+0xac6>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b07      	cmp	r3, #7
 800773a:	d01d      	beq.n	8007778 <UART_SetConfig+0xac0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b08      	cmp	r3, #8
 8007742:	d016      	beq.n	8007772 <UART_SetConfig+0xaba>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b09      	cmp	r3, #9
 800774a:	d00f      	beq.n	800776c <UART_SetConfig+0xab4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b0a      	cmp	r3, #10
 8007752:	d008      	beq.n	8007766 <UART_SetConfig+0xaae>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b0b      	cmp	r3, #11
 800775a:	d101      	bne.n	8007760 <UART_SetConfig+0xaa8>
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	e022      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007764:	e01f      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800776a:	e01c      	b.n	80077a6 <UART_SetConfig+0xaee>
 800776c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007770:	e019      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007776:	e016      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800777c:	e013      	b.n	80077a6 <UART_SetConfig+0xaee>
 800777e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007782:	e010      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007784:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007788:	e00d      	b.n	80077a6 <UART_SetConfig+0xaee>
 800778a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800778e:	e00a      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007790:	f241 5355 	movw	r3, #5461	; 0x1555
 8007794:	e007      	b.n	80077a6 <UART_SetConfig+0xaee>
 8007796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800779a:	e004      	b.n	80077a6 <UART_SetConfig+0xaee>
 800779c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077a0:	e001      	b.n	80077a6 <UART_SetConfig+0xaee>
 80077a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a8:	e003      	b.n	80077b2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80077b0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f001 83e8 	beq.w	8008f8a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4413      	add	r3, r2
 80077c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d305      	bcc.n	80077d6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d904      	bls.n	80077e0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077dc:	f001 bbd5 	b.w	8008f8a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80077e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	f000 8154 	beq.w	8007a92 <UART_SetConfig+0xdda>
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	dc06      	bgt.n	80077fc <UART_SetConfig+0xb44>
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d00f      	beq.n	8007812 <UART_SetConfig+0xb5a>
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	f000 80ac 	beq.w	8007950 <UART_SetConfig+0xc98>
 80077f8:	f000 bc30 	b.w	800805c <UART_SetConfig+0x13a4>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	f000 832d 	beq.w	8007e5c <UART_SetConfig+0x11a4>
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	f000 83a5 	beq.w	8007f52 <UART_SetConfig+0x129a>
 8007808:	2b10      	cmp	r3, #16
 800780a:	f000 81e3 	beq.w	8007bd4 <UART_SetConfig+0xf1c>
 800780e:	f000 bc25 	b.w	800805c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007812:	f7fe faf7 	bl	8005e04 <HAL_RCCEx_GetD3PCLK1Freq>
 8007816:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	4618      	mov	r0, r3
 800781c:	f04f 0100 	mov.w	r1, #0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d067      	beq.n	80078f8 <UART_SetConfig+0xc40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b01      	cmp	r3, #1
 800782e:	d05e      	beq.n	80078ee <UART_SetConfig+0xc36>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b02      	cmp	r3, #2
 8007836:	d055      	beq.n	80078e4 <UART_SetConfig+0xc2c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b03      	cmp	r3, #3
 800783e:	d04c      	beq.n	80078da <UART_SetConfig+0xc22>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b04      	cmp	r3, #4
 8007846:	d043      	beq.n	80078d0 <UART_SetConfig+0xc18>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b05      	cmp	r3, #5
 800784e:	d03a      	beq.n	80078c6 <UART_SetConfig+0xc0e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2b06      	cmp	r3, #6
 8007856:	d031      	beq.n	80078bc <UART_SetConfig+0xc04>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	2b07      	cmp	r3, #7
 800785e:	d028      	beq.n	80078b2 <UART_SetConfig+0xbfa>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b08      	cmp	r3, #8
 8007866:	d01f      	beq.n	80078a8 <UART_SetConfig+0xbf0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2b09      	cmp	r3, #9
 800786e:	d016      	beq.n	800789e <UART_SetConfig+0xbe6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	2b0a      	cmp	r3, #10
 8007876:	d00d      	beq.n	8007894 <UART_SetConfig+0xbdc>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b0b      	cmp	r3, #11
 800787e:	d104      	bne.n	800788a <UART_SetConfig+0xbd2>
 8007880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	e03a      	b.n	8007900 <UART_SetConfig+0xc48>
 800788a:	f04f 0301 	mov.w	r3, #1
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	e035      	b.n	8007900 <UART_SetConfig+0xc48>
 8007894:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	e030      	b.n	8007900 <UART_SetConfig+0xc48>
 800789e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	e02b      	b.n	8007900 <UART_SetConfig+0xc48>
 80078a8:	f04f 0320 	mov.w	r3, #32
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	e026      	b.n	8007900 <UART_SetConfig+0xc48>
 80078b2:	f04f 0310 	mov.w	r3, #16
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	e021      	b.n	8007900 <UART_SetConfig+0xc48>
 80078bc:	f04f 030c 	mov.w	r3, #12
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	e01c      	b.n	8007900 <UART_SetConfig+0xc48>
 80078c6:	f04f 030a 	mov.w	r3, #10
 80078ca:	f04f 0400 	mov.w	r4, #0
 80078ce:	e017      	b.n	8007900 <UART_SetConfig+0xc48>
 80078d0:	f04f 0308 	mov.w	r3, #8
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	e012      	b.n	8007900 <UART_SetConfig+0xc48>
 80078da:	f04f 0306 	mov.w	r3, #6
 80078de:	f04f 0400 	mov.w	r4, #0
 80078e2:	e00d      	b.n	8007900 <UART_SetConfig+0xc48>
 80078e4:	f04f 0304 	mov.w	r3, #4
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	e008      	b.n	8007900 <UART_SetConfig+0xc48>
 80078ee:	f04f 0302 	mov.w	r3, #2
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	e003      	b.n	8007900 <UART_SetConfig+0xc48>
 80078f8:	f04f 0301 	mov.w	r3, #1
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	f7f8 fd44 	bl	8000390 <__aeabi_uldivmod>
 8007908:	4603      	mov	r3, r0
 800790a:	460c      	mov	r4, r1
 800790c:	4619      	mov	r1, r3
 800790e:	4622      	mov	r2, r4
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	f04f 0400 	mov.w	r4, #0
 8007918:	0214      	lsls	r4, r2, #8
 800791a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800791e:	020b      	lsls	r3, r1, #8
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	0852      	lsrs	r2, r2, #1
 8007926:	4611      	mov	r1, r2
 8007928:	f04f 0200 	mov.w	r2, #0
 800792c:	eb13 0b01 	adds.w	fp, r3, r1
 8007930:	eb44 0c02 	adc.w	ip, r4, r2
 8007934:	4658      	mov	r0, fp
 8007936:	4661      	mov	r1, ip
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f04f 0400 	mov.w	r4, #0
 8007940:	461a      	mov	r2, r3
 8007942:	4623      	mov	r3, r4
 8007944:	f7f8 fd24 	bl	8000390 <__aeabi_uldivmod>
 8007948:	4603      	mov	r3, r0
 800794a:	460c      	mov	r4, r1
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800794e:	e389      	b.n	8008064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007950:	f107 0318 	add.w	r3, r7, #24
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fa6b 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4618      	mov	r0, r3
 800795e:	f04f 0100 	mov.w	r1, #0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d067      	beq.n	8007a3a <UART_SetConfig+0xd82>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2b01      	cmp	r3, #1
 8007970:	d05e      	beq.n	8007a30 <UART_SetConfig+0xd78>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b02      	cmp	r3, #2
 8007978:	d055      	beq.n	8007a26 <UART_SetConfig+0xd6e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b03      	cmp	r3, #3
 8007980:	d04c      	beq.n	8007a1c <UART_SetConfig+0xd64>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b04      	cmp	r3, #4
 8007988:	d043      	beq.n	8007a12 <UART_SetConfig+0xd5a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b05      	cmp	r3, #5
 8007990:	d03a      	beq.n	8007a08 <UART_SetConfig+0xd50>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b06      	cmp	r3, #6
 8007998:	d031      	beq.n	80079fe <UART_SetConfig+0xd46>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b07      	cmp	r3, #7
 80079a0:	d028      	beq.n	80079f4 <UART_SetConfig+0xd3c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d01f      	beq.n	80079ea <UART_SetConfig+0xd32>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d016      	beq.n	80079e0 <UART_SetConfig+0xd28>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b0a      	cmp	r3, #10
 80079b8:	d00d      	beq.n	80079d6 <UART_SetConfig+0xd1e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b0b      	cmp	r3, #11
 80079c0:	d104      	bne.n	80079cc <UART_SetConfig+0xd14>
 80079c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c6:	f04f 0400 	mov.w	r4, #0
 80079ca:	e03a      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079cc:	f04f 0301 	mov.w	r3, #1
 80079d0:	f04f 0400 	mov.w	r4, #0
 80079d4:	e035      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079da:	f04f 0400 	mov.w	r4, #0
 80079de:	e030      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079e0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079e4:	f04f 0400 	mov.w	r4, #0
 80079e8:	e02b      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079ea:	f04f 0320 	mov.w	r3, #32
 80079ee:	f04f 0400 	mov.w	r4, #0
 80079f2:	e026      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079f4:	f04f 0310 	mov.w	r3, #16
 80079f8:	f04f 0400 	mov.w	r4, #0
 80079fc:	e021      	b.n	8007a42 <UART_SetConfig+0xd8a>
 80079fe:	f04f 030c 	mov.w	r3, #12
 8007a02:	f04f 0400 	mov.w	r4, #0
 8007a06:	e01c      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a08:	f04f 030a 	mov.w	r3, #10
 8007a0c:	f04f 0400 	mov.w	r4, #0
 8007a10:	e017      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a12:	f04f 0308 	mov.w	r3, #8
 8007a16:	f04f 0400 	mov.w	r4, #0
 8007a1a:	e012      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a1c:	f04f 0306 	mov.w	r3, #6
 8007a20:	f04f 0400 	mov.w	r4, #0
 8007a24:	e00d      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a26:	f04f 0304 	mov.w	r3, #4
 8007a2a:	f04f 0400 	mov.w	r4, #0
 8007a2e:	e008      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a30:	f04f 0302 	mov.w	r3, #2
 8007a34:	f04f 0400 	mov.w	r4, #0
 8007a38:	e003      	b.n	8007a42 <UART_SetConfig+0xd8a>
 8007a3a:	f04f 0301 	mov.w	r3, #1
 8007a3e:	f04f 0400 	mov.w	r4, #0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4623      	mov	r3, r4
 8007a46:	f7f8 fca3 	bl	8000390 <__aeabi_uldivmod>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4622      	mov	r2, r4
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	f04f 0400 	mov.w	r4, #0
 8007a5a:	0214      	lsls	r4, r2, #8
 8007a5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a60:	020b      	lsls	r3, r1, #8
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6852      	ldr	r2, [r2, #4]
 8007a66:	0852      	lsrs	r2, r2, #1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	eb13 0b01 	adds.w	fp, r3, r1
 8007a72:	eb44 0c02 	adc.w	ip, r4, r2
 8007a76:	4658      	mov	r0, fp
 8007a78:	4661      	mov	r1, ip
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f04f 0400 	mov.w	r4, #0
 8007a82:	461a      	mov	r2, r3
 8007a84:	4623      	mov	r3, r4
 8007a86:	f7f8 fc83 	bl	8000390 <__aeabi_uldivmod>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a90:	e2e8      	b.n	8008064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a92:	f107 030c 	add.w	r3, r7, #12
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fb16 	bl	80060c8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f04f 0100 	mov.w	r1, #0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d067      	beq.n	8007b7c <UART_SetConfig+0xec4>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d05e      	beq.n	8007b72 <UART_SetConfig+0xeba>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d055      	beq.n	8007b68 <UART_SetConfig+0xeb0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d04c      	beq.n	8007b5e <UART_SetConfig+0xea6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d043      	beq.n	8007b54 <UART_SetConfig+0xe9c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d03a      	beq.n	8007b4a <UART_SetConfig+0xe92>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d031      	beq.n	8007b40 <UART_SetConfig+0xe88>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	d028      	beq.n	8007b36 <UART_SetConfig+0xe7e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d01f      	beq.n	8007b2c <UART_SetConfig+0xe74>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d016      	beq.n	8007b22 <UART_SetConfig+0xe6a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b0a      	cmp	r3, #10
 8007afa:	d00d      	beq.n	8007b18 <UART_SetConfig+0xe60>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b0b      	cmp	r3, #11
 8007b02:	d104      	bne.n	8007b0e <UART_SetConfig+0xe56>
 8007b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b08:	f04f 0400 	mov.w	r4, #0
 8007b0c:	e03a      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b0e:	f04f 0301 	mov.w	r3, #1
 8007b12:	f04f 0400 	mov.w	r4, #0
 8007b16:	e035      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b18:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007b1c:	f04f 0400 	mov.w	r4, #0
 8007b20:	e030      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b22:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b26:	f04f 0400 	mov.w	r4, #0
 8007b2a:	e02b      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b2c:	f04f 0320 	mov.w	r3, #32
 8007b30:	f04f 0400 	mov.w	r4, #0
 8007b34:	e026      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b36:	f04f 0310 	mov.w	r3, #16
 8007b3a:	f04f 0400 	mov.w	r4, #0
 8007b3e:	e021      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b40:	f04f 030c 	mov.w	r3, #12
 8007b44:	f04f 0400 	mov.w	r4, #0
 8007b48:	e01c      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b4a:	f04f 030a 	mov.w	r3, #10
 8007b4e:	f04f 0400 	mov.w	r4, #0
 8007b52:	e017      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b54:	f04f 0308 	mov.w	r3, #8
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	e012      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b5e:	f04f 0306 	mov.w	r3, #6
 8007b62:	f04f 0400 	mov.w	r4, #0
 8007b66:	e00d      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b68:	f04f 0304 	mov.w	r3, #4
 8007b6c:	f04f 0400 	mov.w	r4, #0
 8007b70:	e008      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b72:	f04f 0302 	mov.w	r3, #2
 8007b76:	f04f 0400 	mov.w	r4, #0
 8007b7a:	e003      	b.n	8007b84 <UART_SetConfig+0xecc>
 8007b7c:	f04f 0301 	mov.w	r3, #1
 8007b80:	f04f 0400 	mov.w	r4, #0
 8007b84:	461a      	mov	r2, r3
 8007b86:	4623      	mov	r3, r4
 8007b88:	f7f8 fc02 	bl	8000390 <__aeabi_uldivmod>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4619      	mov	r1, r3
 8007b92:	4622      	mov	r2, r4
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	f04f 0400 	mov.w	r4, #0
 8007b9c:	0214      	lsls	r4, r2, #8
 8007b9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ba2:	020b      	lsls	r3, r1, #8
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6852      	ldr	r2, [r2, #4]
 8007ba8:	0852      	lsrs	r2, r2, #1
 8007baa:	4611      	mov	r1, r2
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	eb13 0b01 	adds.w	fp, r3, r1
 8007bb4:	eb44 0c02 	adc.w	ip, r4, r2
 8007bb8:	4658      	mov	r0, fp
 8007bba:	4661      	mov	r1, ip
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f04f 0400 	mov.w	r4, #0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	f7f8 fbe2 	bl	8000390 <__aeabi_uldivmod>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bd2:	e247      	b.n	8008064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd4:	4b96      	ldr	r3, [pc, #600]	; (8007e30 <UART_SetConfig+0x1178>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80a3 	beq.w	8007d28 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be2:	4b93      	ldr	r3, [pc, #588]	; (8007e30 <UART_SetConfig+0x1178>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	08db      	lsrs	r3, r3, #3
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	4a91      	ldr	r2, [pc, #580]	; (8007e34 <UART_SetConfig+0x117c>)
 8007bee:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f04f 0100 	mov.w	r1, #0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d067      	beq.n	8007cd0 <UART_SetConfig+0x1018>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d05e      	beq.n	8007cc6 <UART_SetConfig+0x100e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d055      	beq.n	8007cbc <UART_SetConfig+0x1004>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d04c      	beq.n	8007cb2 <UART_SetConfig+0xffa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d043      	beq.n	8007ca8 <UART_SetConfig+0xff0>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d03a      	beq.n	8007c9e <UART_SetConfig+0xfe6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d031      	beq.n	8007c94 <UART_SetConfig+0xfdc>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	d028      	beq.n	8007c8a <UART_SetConfig+0xfd2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d01f      	beq.n	8007c80 <UART_SetConfig+0xfc8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d016      	beq.n	8007c76 <UART_SetConfig+0xfbe>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b0a      	cmp	r3, #10
 8007c4e:	d00d      	beq.n	8007c6c <UART_SetConfig+0xfb4>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b0b      	cmp	r3, #11
 8007c56:	d104      	bne.n	8007c62 <UART_SetConfig+0xfaa>
 8007c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5c:	f04f 0400 	mov.w	r4, #0
 8007c60:	e03a      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c62:	f04f 0301 	mov.w	r3, #1
 8007c66:	f04f 0400 	mov.w	r4, #0
 8007c6a:	e035      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007c70:	f04f 0400 	mov.w	r4, #0
 8007c74:	e030      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c76:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c7a:	f04f 0400 	mov.w	r4, #0
 8007c7e:	e02b      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c80:	f04f 0320 	mov.w	r3, #32
 8007c84:	f04f 0400 	mov.w	r4, #0
 8007c88:	e026      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c8a:	f04f 0310 	mov.w	r3, #16
 8007c8e:	f04f 0400 	mov.w	r4, #0
 8007c92:	e021      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c94:	f04f 030c 	mov.w	r3, #12
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	e01c      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007c9e:	f04f 030a 	mov.w	r3, #10
 8007ca2:	f04f 0400 	mov.w	r4, #0
 8007ca6:	e017      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007ca8:	f04f 0308 	mov.w	r3, #8
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	e012      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007cb2:	f04f 0306 	mov.w	r3, #6
 8007cb6:	f04f 0400 	mov.w	r4, #0
 8007cba:	e00d      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007cbc:	f04f 0304 	mov.w	r3, #4
 8007cc0:	f04f 0400 	mov.w	r4, #0
 8007cc4:	e008      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007cc6:	f04f 0302 	mov.w	r3, #2
 8007cca:	f04f 0400 	mov.w	r4, #0
 8007cce:	e003      	b.n	8007cd8 <UART_SetConfig+0x1020>
 8007cd0:	f04f 0301 	mov.w	r3, #1
 8007cd4:	f04f 0400 	mov.w	r4, #0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4623      	mov	r3, r4
 8007cdc:	f7f8 fb58 	bl	8000390 <__aeabi_uldivmod>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	f04f 0400 	mov.w	r4, #0
 8007cf0:	0214      	lsls	r4, r2, #8
 8007cf2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007cf6:	020b      	lsls	r3, r1, #8
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6852      	ldr	r2, [r2, #4]
 8007cfc:	0852      	lsrs	r2, r2, #1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	eb13 0b01 	adds.w	fp, r3, r1
 8007d08:	eb44 0c02 	adc.w	ip, r4, r2
 8007d0c:	4658      	mov	r0, fp
 8007d0e:	4661      	mov	r1, ip
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f04f 0400 	mov.w	r4, #0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	f7f8 fb38 	bl	8000390 <__aeabi_uldivmod>
 8007d20:	4603      	mov	r3, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007d26:	e19d      	b.n	8008064 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d05b      	beq.n	8007de8 <UART_SetConfig+0x1130>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d053      	beq.n	8007de0 <UART_SetConfig+0x1128>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d04b      	beq.n	8007dd8 <UART_SetConfig+0x1120>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d043      	beq.n	8007dd0 <UART_SetConfig+0x1118>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d03b      	beq.n	8007dc8 <UART_SetConfig+0x1110>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d033      	beq.n	8007dc0 <UART_SetConfig+0x1108>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	d02b      	beq.n	8007db8 <UART_SetConfig+0x1100>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d023      	beq.n	8007db0 <UART_SetConfig+0x10f8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d01b      	beq.n	8007da8 <UART_SetConfig+0x10f0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	d013      	beq.n	8007da0 <UART_SetConfig+0x10e8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b0a      	cmp	r3, #10
 8007d7e:	d00b      	beq.n	8007d98 <UART_SetConfig+0x10e0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	2b0b      	cmp	r3, #11
 8007d86:	d103      	bne.n	8007d90 <UART_SetConfig+0x10d8>
 8007d88:	4b2a      	ldr	r3, [pc, #168]	; (8007e34 <UART_SetConfig+0x117c>)
 8007d8a:	f04f 0400 	mov.w	r4, #0
 8007d8e:	e02e      	b.n	8007dee <UART_SetConfig+0x1136>
 8007d90:	4b29      	ldr	r3, [pc, #164]	; (8007e38 <UART_SetConfig+0x1180>)
 8007d92:	f04f 0403 	mov.w	r4, #3
 8007d96:	e02a      	b.n	8007dee <UART_SetConfig+0x1136>
 8007d98:	4b28      	ldr	r3, [pc, #160]	; (8007e3c <UART_SetConfig+0x1184>)
 8007d9a:	f04f 0400 	mov.w	r4, #0
 8007d9e:	e026      	b.n	8007dee <UART_SetConfig+0x1136>
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <UART_SetConfig+0x1188>)
 8007da2:	f04f 0400 	mov.w	r4, #0
 8007da6:	e022      	b.n	8007dee <UART_SetConfig+0x1136>
 8007da8:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <UART_SetConfig+0x118c>)
 8007daa:	f04f 0400 	mov.w	r4, #0
 8007dae:	e01e      	b.n	8007dee <UART_SetConfig+0x1136>
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <UART_SetConfig+0x1190>)
 8007db2:	f04f 0400 	mov.w	r4, #0
 8007db6:	e01a      	b.n	8007dee <UART_SetConfig+0x1136>
 8007db8:	a419      	add	r4, pc, #100	; (adr r4, 8007e20 <UART_SetConfig+0x1168>)
 8007dba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007dbe:	e016      	b.n	8007dee <UART_SetConfig+0x1136>
 8007dc0:	4b22      	ldr	r3, [pc, #136]	; (8007e4c <UART_SetConfig+0x1194>)
 8007dc2:	f04f 0400 	mov.w	r4, #0
 8007dc6:	e012      	b.n	8007dee <UART_SetConfig+0x1136>
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <UART_SetConfig+0x1198>)
 8007dca:	f04f 0400 	mov.w	r4, #0
 8007dce:	e00e      	b.n	8007dee <UART_SetConfig+0x1136>
 8007dd0:	a415      	add	r4, pc, #84	; (adr r4, 8007e28 <UART_SetConfig+0x1170>)
 8007dd2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007dd6:	e00a      	b.n	8007dee <UART_SetConfig+0x1136>
 8007dd8:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <UART_SetConfig+0x119c>)
 8007dda:	f04f 0400 	mov.w	r4, #0
 8007dde:	e006      	b.n	8007dee <UART_SetConfig+0x1136>
 8007de0:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <UART_SetConfig+0x11a0>)
 8007de2:	f04f 0401 	mov.w	r4, #1
 8007de6:	e002      	b.n	8007dee <UART_SetConfig+0x1136>
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <UART_SetConfig+0x1180>)
 8007dea:	f04f 0403 	mov.w	r4, #3
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6852      	ldr	r2, [r2, #4]
 8007df2:	0852      	lsrs	r2, r2, #1
 8007df4:	4611      	mov	r1, r2
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	eb13 0b01 	adds.w	fp, r3, r1
 8007dfe:	eb44 0c02 	adc.w	ip, r4, r2
 8007e02:	4658      	mov	r0, fp
 8007e04:	4661      	mov	r1, ip
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f04f 0400 	mov.w	r4, #0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4623      	mov	r3, r4
 8007e12:	f7f8 fabd 	bl	8000390 <__aeabi_uldivmod>
 8007e16:	4603      	mov	r3, r0
 8007e18:	460c      	mov	r4, r1
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e1c:	e122      	b.n	8008064 <UART_SetConfig+0x13ac>
 8007e1e:	bf00      	nop
 8007e20:	51615500 	.word	0x51615500
 8007e24:	00000000 	.word	0x00000000
 8007e28:	a2c2aa00 	.word	0xa2c2aa00
 8007e2c:	00000000 	.word	0x00000000
 8007e30:	58024400 	.word	0x58024400
 8007e34:	03d09000 	.word	0x03d09000
 8007e38:	d0900000 	.word	0xd0900000
 8007e3c:	07a12000 	.word	0x07a12000
 8007e40:	0f424000 	.word	0x0f424000
 8007e44:	1e848000 	.word	0x1e848000
 8007e48:	3d090000 	.word	0x3d090000
 8007e4c:	61a80000 	.word	0x61a80000
 8007e50:	7a120000 	.word	0x7a120000
 8007e54:	f4240000 	.word	0xf4240000
 8007e58:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d05b      	beq.n	8007f1c <UART_SetConfig+0x1264>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d053      	beq.n	8007f14 <UART_SetConfig+0x125c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d04b      	beq.n	8007f0c <UART_SetConfig+0x1254>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d043      	beq.n	8007f04 <UART_SetConfig+0x124c>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d03b      	beq.n	8007efc <UART_SetConfig+0x1244>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	d033      	beq.n	8007ef4 <UART_SetConfig+0x123c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d02b      	beq.n	8007eec <UART_SetConfig+0x1234>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b07      	cmp	r3, #7
 8007e9a:	d023      	beq.n	8007ee4 <UART_SetConfig+0x122c>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d01b      	beq.n	8007edc <UART_SetConfig+0x1224>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b09      	cmp	r3, #9
 8007eaa:	d013      	beq.n	8007ed4 <UART_SetConfig+0x121c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b0a      	cmp	r3, #10
 8007eb2:	d00b      	beq.n	8007ecc <UART_SetConfig+0x1214>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b0b      	cmp	r3, #11
 8007eba:	d103      	bne.n	8007ec4 <UART_SetConfig+0x120c>
 8007ebc:	4bc0      	ldr	r3, [pc, #768]	; (80081c0 <UART_SetConfig+0x1508>)
 8007ebe:	f04f 0400 	mov.w	r4, #0
 8007ec2:	e02e      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007ec4:	4bbf      	ldr	r3, [pc, #764]	; (80081c4 <UART_SetConfig+0x150c>)
 8007ec6:	f04f 0400 	mov.w	r4, #0
 8007eca:	e02a      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007ecc:	4bbe      	ldr	r3, [pc, #760]	; (80081c8 <UART_SetConfig+0x1510>)
 8007ece:	f04f 0400 	mov.w	r4, #0
 8007ed2:	e026      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007ed4:	4bbd      	ldr	r3, [pc, #756]	; (80081cc <UART_SetConfig+0x1514>)
 8007ed6:	f04f 0400 	mov.w	r4, #0
 8007eda:	e022      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007edc:	4bbc      	ldr	r3, [pc, #752]	; (80081d0 <UART_SetConfig+0x1518>)
 8007ede:	f04f 0400 	mov.w	r4, #0
 8007ee2:	e01e      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007ee4:	4bbb      	ldr	r3, [pc, #748]	; (80081d4 <UART_SetConfig+0x151c>)
 8007ee6:	f04f 0400 	mov.w	r4, #0
 8007eea:	e01a      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007eec:	a4b0      	add	r4, pc, #704	; (adr r4, 80081b0 <UART_SetConfig+0x14f8>)
 8007eee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ef2:	e016      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007ef4:	4bb8      	ldr	r3, [pc, #736]	; (80081d8 <UART_SetConfig+0x1520>)
 8007ef6:	f04f 0400 	mov.w	r4, #0
 8007efa:	e012      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007efc:	4bb7      	ldr	r3, [pc, #732]	; (80081dc <UART_SetConfig+0x1524>)
 8007efe:	f04f 0400 	mov.w	r4, #0
 8007f02:	e00e      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007f04:	a4ac      	add	r4, pc, #688	; (adr r4, 80081b8 <UART_SetConfig+0x1500>)
 8007f06:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007f0a:	e00a      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007f0c:	4bb4      	ldr	r3, [pc, #720]	; (80081e0 <UART_SetConfig+0x1528>)
 8007f0e:	f04f 0400 	mov.w	r4, #0
 8007f12:	e006      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007f14:	4bb3      	ldr	r3, [pc, #716]	; (80081e4 <UART_SetConfig+0x152c>)
 8007f16:	f04f 0400 	mov.w	r4, #0
 8007f1a:	e002      	b.n	8007f22 <UART_SetConfig+0x126a>
 8007f1c:	4ba9      	ldr	r3, [pc, #676]	; (80081c4 <UART_SetConfig+0x150c>)
 8007f1e:	f04f 0400 	mov.w	r4, #0
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6852      	ldr	r2, [r2, #4]
 8007f26:	0852      	lsrs	r2, r2, #1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	eb13 0b01 	adds.w	fp, r3, r1
 8007f32:	eb44 0c02 	adc.w	ip, r4, r2
 8007f36:	4658      	mov	r0, fp
 8007f38:	4661      	mov	r1, ip
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	461a      	mov	r2, r3
 8007f44:	4623      	mov	r3, r4
 8007f46:	f7f8 fa23 	bl	8000390 <__aeabi_uldivmod>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f50:	e088      	b.n	8008064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d064      	beq.n	8008024 <UART_SetConfig+0x136c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d05b      	beq.n	800801a <UART_SetConfig+0x1362>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d052      	beq.n	8008010 <UART_SetConfig+0x1358>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d04a      	beq.n	8008008 <UART_SetConfig+0x1350>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d041      	beq.n	8007ffe <UART_SetConfig+0x1346>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d039      	beq.n	8007ff6 <UART_SetConfig+0x133e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b06      	cmp	r3, #6
 8007f88:	d031      	beq.n	8007fee <UART_SetConfig+0x1336>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b07      	cmp	r3, #7
 8007f90:	d028      	beq.n	8007fe4 <UART_SetConfig+0x132c>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d01f      	beq.n	8007fda <UART_SetConfig+0x1322>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	d016      	beq.n	8007fd0 <UART_SetConfig+0x1318>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b0a      	cmp	r3, #10
 8007fa8:	d00d      	beq.n	8007fc6 <UART_SetConfig+0x130e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b0b      	cmp	r3, #11
 8007fb0:	d104      	bne.n	8007fbc <UART_SetConfig+0x1304>
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	f04f 0400 	mov.w	r4, #0
 8007fba:	e037      	b.n	800802c <UART_SetConfig+0x1374>
 8007fbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	e032      	b.n	800802c <UART_SetConfig+0x1374>
 8007fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fca:	f04f 0400 	mov.w	r4, #0
 8007fce:	e02d      	b.n	800802c <UART_SetConfig+0x1374>
 8007fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fd4:	f04f 0400 	mov.w	r4, #0
 8007fd8:	e028      	b.n	800802c <UART_SetConfig+0x1374>
 8007fda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fde:	f04f 0400 	mov.w	r4, #0
 8007fe2:	e023      	b.n	800802c <UART_SetConfig+0x1374>
 8007fe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fe8:	f04f 0400 	mov.w	r4, #0
 8007fec:	e01e      	b.n	800802c <UART_SetConfig+0x1374>
 8007fee:	4b7e      	ldr	r3, [pc, #504]	; (80081e8 <UART_SetConfig+0x1530>)
 8007ff0:	f04f 0400 	mov.w	r4, #0
 8007ff4:	e01a      	b.n	800802c <UART_SetConfig+0x1374>
 8007ff6:	4b7d      	ldr	r3, [pc, #500]	; (80081ec <UART_SetConfig+0x1534>)
 8007ff8:	f04f 0400 	mov.w	r4, #0
 8007ffc:	e016      	b.n	800802c <UART_SetConfig+0x1374>
 8007ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008002:	f04f 0400 	mov.w	r4, #0
 8008006:	e011      	b.n	800802c <UART_SetConfig+0x1374>
 8008008:	4b79      	ldr	r3, [pc, #484]	; (80081f0 <UART_SetConfig+0x1538>)
 800800a:	f04f 0400 	mov.w	r4, #0
 800800e:	e00d      	b.n	800802c <UART_SetConfig+0x1374>
 8008010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008014:	f04f 0400 	mov.w	r4, #0
 8008018:	e008      	b.n	800802c <UART_SetConfig+0x1374>
 800801a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800801e:	f04f 0400 	mov.w	r4, #0
 8008022:	e003      	b.n	800802c <UART_SetConfig+0x1374>
 8008024:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008028:	f04f 0400 	mov.w	r4, #0
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6852      	ldr	r2, [r2, #4]
 8008030:	0852      	lsrs	r2, r2, #1
 8008032:	4611      	mov	r1, r2
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	eb13 0b01 	adds.w	fp, r3, r1
 800803c:	eb44 0c02 	adc.w	ip, r4, r2
 8008040:	4658      	mov	r0, fp
 8008042:	4661      	mov	r1, ip
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f04f 0400 	mov.w	r4, #0
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	f7f8 f99e 	bl	8000390 <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800805a:	e003      	b.n	8008064 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008062:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800806a:	d309      	bcc.n	8008080 <UART_SetConfig+0x13c8>
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008072:	d205      	bcs.n	8008080 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800807a:	60da      	str	r2, [r3, #12]
 800807c:	f000 bf85 	b.w	8008f8a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008086:	f000 bf80 	b.w	8008f8a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008092:	f040 83da 	bne.w	800884a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8008096:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	f200 83b3 	bhi.w	8008806 <UART_SetConfig+0x1b4e>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x13f0>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080081f5 	.word	0x080081f5
 80080ac:	080082ad 	.word	0x080082ad
 80080b0:	08008807 	.word	0x08008807
 80080b4:	08008807 	.word	0x08008807
 80080b8:	08008365 	.word	0x08008365
 80080bc:	08008807 	.word	0x08008807
 80080c0:	08008807 	.word	0x08008807
 80080c4:	08008807 	.word	0x08008807
 80080c8:	08008421 	.word	0x08008421
 80080cc:	08008807 	.word	0x08008807
 80080d0:	08008807 	.word	0x08008807
 80080d4:	08008807 	.word	0x08008807
 80080d8:	08008807 	.word	0x08008807
 80080dc:	08008807 	.word	0x08008807
 80080e0:	08008807 	.word	0x08008807
 80080e4:	08008807 	.word	0x08008807
 80080e8:	080084dd 	.word	0x080084dd
 80080ec:	08008807 	.word	0x08008807
 80080f0:	08008807 	.word	0x08008807
 80080f4:	08008807 	.word	0x08008807
 80080f8:	08008807 	.word	0x08008807
 80080fc:	08008807 	.word	0x08008807
 8008100:	08008807 	.word	0x08008807
 8008104:	08008807 	.word	0x08008807
 8008108:	08008807 	.word	0x08008807
 800810c:	08008807 	.word	0x08008807
 8008110:	08008807 	.word	0x08008807
 8008114:	08008807 	.word	0x08008807
 8008118:	08008807 	.word	0x08008807
 800811c:	08008807 	.word	0x08008807
 8008120:	08008807 	.word	0x08008807
 8008124:	08008807 	.word	0x08008807
 8008128:	0800864f 	.word	0x0800864f
 800812c:	08008807 	.word	0x08008807
 8008130:	08008807 	.word	0x08008807
 8008134:	08008807 	.word	0x08008807
 8008138:	08008807 	.word	0x08008807
 800813c:	08008807 	.word	0x08008807
 8008140:	08008807 	.word	0x08008807
 8008144:	08008807 	.word	0x08008807
 8008148:	08008807 	.word	0x08008807
 800814c:	08008807 	.word	0x08008807
 8008150:	08008807 	.word	0x08008807
 8008154:	08008807 	.word	0x08008807
 8008158:	08008807 	.word	0x08008807
 800815c:	08008807 	.word	0x08008807
 8008160:	08008807 	.word	0x08008807
 8008164:	08008807 	.word	0x08008807
 8008168:	08008807 	.word	0x08008807
 800816c:	08008807 	.word	0x08008807
 8008170:	08008807 	.word	0x08008807
 8008174:	08008807 	.word	0x08008807
 8008178:	08008807 	.word	0x08008807
 800817c:	08008807 	.word	0x08008807
 8008180:	08008807 	.word	0x08008807
 8008184:	08008807 	.word	0x08008807
 8008188:	08008807 	.word	0x08008807
 800818c:	08008807 	.word	0x08008807
 8008190:	08008807 	.word	0x08008807
 8008194:	08008807 	.word	0x08008807
 8008198:	08008807 	.word	0x08008807
 800819c:	08008807 	.word	0x08008807
 80081a0:	08008807 	.word	0x08008807
 80081a4:	08008807 	.word	0x08008807
 80081a8:	08008745 	.word	0x08008745
 80081ac:	f3af 8000 	nop.w
 80081b0:	05161500 	.word	0x05161500
 80081b4:	00000000 	.word	0x00000000
 80081b8:	0a2c2a00 	.word	0x0a2c2a00
 80081bc:	00000000 	.word	0x00000000
 80081c0:	003d0900 	.word	0x003d0900
 80081c4:	3d090000 	.word	0x3d090000
 80081c8:	007a1200 	.word	0x007a1200
 80081cc:	00f42400 	.word	0x00f42400
 80081d0:	01e84800 	.word	0x01e84800
 80081d4:	03d09000 	.word	0x03d09000
 80081d8:	061a8000 	.word	0x061a8000
 80081dc:	07a12000 	.word	0x07a12000
 80081e0:	0f424000 	.word	0x0f424000
 80081e4:	1e848000 	.word	0x1e848000
 80081e8:	000aaa00 	.word	0x000aaa00
 80081ec:	000ccc00 	.word	0x000ccc00
 80081f0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fc feba 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80081f8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d044      	beq.n	800828c <UART_SetConfig+0x15d4>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b01      	cmp	r3, #1
 8008208:	d03e      	beq.n	8008288 <UART_SetConfig+0x15d0>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b02      	cmp	r3, #2
 8008210:	d038      	beq.n	8008284 <UART_SetConfig+0x15cc>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b03      	cmp	r3, #3
 8008218:	d032      	beq.n	8008280 <UART_SetConfig+0x15c8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b04      	cmp	r3, #4
 8008220:	d02c      	beq.n	800827c <UART_SetConfig+0x15c4>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b05      	cmp	r3, #5
 8008228:	d026      	beq.n	8008278 <UART_SetConfig+0x15c0>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b06      	cmp	r3, #6
 8008230:	d020      	beq.n	8008274 <UART_SetConfig+0x15bc>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b07      	cmp	r3, #7
 8008238:	d01a      	beq.n	8008270 <UART_SetConfig+0x15b8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b08      	cmp	r3, #8
 8008240:	d014      	beq.n	800826c <UART_SetConfig+0x15b4>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b09      	cmp	r3, #9
 8008248:	d00e      	beq.n	8008268 <UART_SetConfig+0x15b0>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b0a      	cmp	r3, #10
 8008250:	d008      	beq.n	8008264 <UART_SetConfig+0x15ac>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b0b      	cmp	r3, #11
 8008258:	d102      	bne.n	8008260 <UART_SetConfig+0x15a8>
 800825a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800825e:	e016      	b.n	800828e <UART_SetConfig+0x15d6>
 8008260:	2301      	movs	r3, #1
 8008262:	e014      	b.n	800828e <UART_SetConfig+0x15d6>
 8008264:	2380      	movs	r3, #128	; 0x80
 8008266:	e012      	b.n	800828e <UART_SetConfig+0x15d6>
 8008268:	2340      	movs	r3, #64	; 0x40
 800826a:	e010      	b.n	800828e <UART_SetConfig+0x15d6>
 800826c:	2320      	movs	r3, #32
 800826e:	e00e      	b.n	800828e <UART_SetConfig+0x15d6>
 8008270:	2310      	movs	r3, #16
 8008272:	e00c      	b.n	800828e <UART_SetConfig+0x15d6>
 8008274:	230c      	movs	r3, #12
 8008276:	e00a      	b.n	800828e <UART_SetConfig+0x15d6>
 8008278:	230a      	movs	r3, #10
 800827a:	e008      	b.n	800828e <UART_SetConfig+0x15d6>
 800827c:	2308      	movs	r3, #8
 800827e:	e006      	b.n	800828e <UART_SetConfig+0x15d6>
 8008280:	2306      	movs	r3, #6
 8008282:	e004      	b.n	800828e <UART_SetConfig+0x15d6>
 8008284:	2304      	movs	r3, #4
 8008286:	e002      	b.n	800828e <UART_SetConfig+0x15d6>
 8008288:	2302      	movs	r3, #2
 800828a:	e000      	b.n	800828e <UART_SetConfig+0x15d6>
 800828c:	2301      	movs	r3, #1
 800828e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	005a      	lsls	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082aa:	e2b0      	b.n	800880e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082ac:	f7fc fe74 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80082b0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d044      	beq.n	8008344 <UART_SetConfig+0x168c>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d03e      	beq.n	8008340 <UART_SetConfig+0x1688>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d038      	beq.n	800833c <UART_SetConfig+0x1684>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d032      	beq.n	8008338 <UART_SetConfig+0x1680>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d02c      	beq.n	8008334 <UART_SetConfig+0x167c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d026      	beq.n	8008330 <UART_SetConfig+0x1678>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d020      	beq.n	800832c <UART_SetConfig+0x1674>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b07      	cmp	r3, #7
 80082f0:	d01a      	beq.n	8008328 <UART_SetConfig+0x1670>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d014      	beq.n	8008324 <UART_SetConfig+0x166c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d00e      	beq.n	8008320 <UART_SetConfig+0x1668>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b0a      	cmp	r3, #10
 8008308:	d008      	beq.n	800831c <UART_SetConfig+0x1664>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	2b0b      	cmp	r3, #11
 8008310:	d102      	bne.n	8008318 <UART_SetConfig+0x1660>
 8008312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008316:	e016      	b.n	8008346 <UART_SetConfig+0x168e>
 8008318:	2301      	movs	r3, #1
 800831a:	e014      	b.n	8008346 <UART_SetConfig+0x168e>
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	e012      	b.n	8008346 <UART_SetConfig+0x168e>
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	e010      	b.n	8008346 <UART_SetConfig+0x168e>
 8008324:	2320      	movs	r3, #32
 8008326:	e00e      	b.n	8008346 <UART_SetConfig+0x168e>
 8008328:	2310      	movs	r3, #16
 800832a:	e00c      	b.n	8008346 <UART_SetConfig+0x168e>
 800832c:	230c      	movs	r3, #12
 800832e:	e00a      	b.n	8008346 <UART_SetConfig+0x168e>
 8008330:	230a      	movs	r3, #10
 8008332:	e008      	b.n	8008346 <UART_SetConfig+0x168e>
 8008334:	2308      	movs	r3, #8
 8008336:	e006      	b.n	8008346 <UART_SetConfig+0x168e>
 8008338:	2306      	movs	r3, #6
 800833a:	e004      	b.n	8008346 <UART_SetConfig+0x168e>
 800833c:	2304      	movs	r3, #4
 800833e:	e002      	b.n	8008346 <UART_SetConfig+0x168e>
 8008340:	2302      	movs	r3, #2
 8008342:	e000      	b.n	8008346 <UART_SetConfig+0x168e>
 8008344:	2301      	movs	r3, #1
 8008346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	005a      	lsls	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	fbb2 f3f3 	udiv	r3, r2, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008362:	e254      	b.n	800880e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008364:	f107 0318 	add.w	r3, r7, #24
 8008368:	4618      	mov	r0, r3
 800836a:	f7fd fd61 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	d044      	beq.n	8008402 <UART_SetConfig+0x174a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b01      	cmp	r3, #1
 800837e:	d03e      	beq.n	80083fe <UART_SetConfig+0x1746>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b02      	cmp	r3, #2
 8008386:	d038      	beq.n	80083fa <UART_SetConfig+0x1742>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b03      	cmp	r3, #3
 800838e:	d032      	beq.n	80083f6 <UART_SetConfig+0x173e>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b04      	cmp	r3, #4
 8008396:	d02c      	beq.n	80083f2 <UART_SetConfig+0x173a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b05      	cmp	r3, #5
 800839e:	d026      	beq.n	80083ee <UART_SetConfig+0x1736>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b06      	cmp	r3, #6
 80083a6:	d020      	beq.n	80083ea <UART_SetConfig+0x1732>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b07      	cmp	r3, #7
 80083ae:	d01a      	beq.n	80083e6 <UART_SetConfig+0x172e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d014      	beq.n	80083e2 <UART_SetConfig+0x172a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b09      	cmp	r3, #9
 80083be:	d00e      	beq.n	80083de <UART_SetConfig+0x1726>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b0a      	cmp	r3, #10
 80083c6:	d008      	beq.n	80083da <UART_SetConfig+0x1722>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b0b      	cmp	r3, #11
 80083ce:	d102      	bne.n	80083d6 <UART_SetConfig+0x171e>
 80083d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d4:	e016      	b.n	8008404 <UART_SetConfig+0x174c>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e014      	b.n	8008404 <UART_SetConfig+0x174c>
 80083da:	2380      	movs	r3, #128	; 0x80
 80083dc:	e012      	b.n	8008404 <UART_SetConfig+0x174c>
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	e010      	b.n	8008404 <UART_SetConfig+0x174c>
 80083e2:	2320      	movs	r3, #32
 80083e4:	e00e      	b.n	8008404 <UART_SetConfig+0x174c>
 80083e6:	2310      	movs	r3, #16
 80083e8:	e00c      	b.n	8008404 <UART_SetConfig+0x174c>
 80083ea:	230c      	movs	r3, #12
 80083ec:	e00a      	b.n	8008404 <UART_SetConfig+0x174c>
 80083ee:	230a      	movs	r3, #10
 80083f0:	e008      	b.n	8008404 <UART_SetConfig+0x174c>
 80083f2:	2308      	movs	r3, #8
 80083f4:	e006      	b.n	8008404 <UART_SetConfig+0x174c>
 80083f6:	2306      	movs	r3, #6
 80083f8:	e004      	b.n	8008404 <UART_SetConfig+0x174c>
 80083fa:	2304      	movs	r3, #4
 80083fc:	e002      	b.n	8008404 <UART_SetConfig+0x174c>
 80083fe:	2302      	movs	r3, #2
 8008400:	e000      	b.n	8008404 <UART_SetConfig+0x174c>
 8008402:	2301      	movs	r3, #1
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	005a      	lsls	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	441a      	add	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	b29b      	uxth	r3, r3
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800841e:	e1f6      	b.n	800880e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008420:	f107 030c 	add.w	r3, r7, #12
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fe4f 	bl	80060c8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	d044      	beq.n	80084be <UART_SetConfig+0x1806>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b01      	cmp	r3, #1
 800843a:	d03e      	beq.n	80084ba <UART_SetConfig+0x1802>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b02      	cmp	r3, #2
 8008442:	d038      	beq.n	80084b6 <UART_SetConfig+0x17fe>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b03      	cmp	r3, #3
 800844a:	d032      	beq.n	80084b2 <UART_SetConfig+0x17fa>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b04      	cmp	r3, #4
 8008452:	d02c      	beq.n	80084ae <UART_SetConfig+0x17f6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b05      	cmp	r3, #5
 800845a:	d026      	beq.n	80084aa <UART_SetConfig+0x17f2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b06      	cmp	r3, #6
 8008462:	d020      	beq.n	80084a6 <UART_SetConfig+0x17ee>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	2b07      	cmp	r3, #7
 800846a:	d01a      	beq.n	80084a2 <UART_SetConfig+0x17ea>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b08      	cmp	r3, #8
 8008472:	d014      	beq.n	800849e <UART_SetConfig+0x17e6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b09      	cmp	r3, #9
 800847a:	d00e      	beq.n	800849a <UART_SetConfig+0x17e2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b0a      	cmp	r3, #10
 8008482:	d008      	beq.n	8008496 <UART_SetConfig+0x17de>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b0b      	cmp	r3, #11
 800848a:	d102      	bne.n	8008492 <UART_SetConfig+0x17da>
 800848c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008490:	e016      	b.n	80084c0 <UART_SetConfig+0x1808>
 8008492:	2301      	movs	r3, #1
 8008494:	e014      	b.n	80084c0 <UART_SetConfig+0x1808>
 8008496:	2380      	movs	r3, #128	; 0x80
 8008498:	e012      	b.n	80084c0 <UART_SetConfig+0x1808>
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	e010      	b.n	80084c0 <UART_SetConfig+0x1808>
 800849e:	2320      	movs	r3, #32
 80084a0:	e00e      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084a2:	2310      	movs	r3, #16
 80084a4:	e00c      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084a6:	230c      	movs	r3, #12
 80084a8:	e00a      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084aa:	230a      	movs	r3, #10
 80084ac:	e008      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084ae:	2308      	movs	r3, #8
 80084b0:	e006      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084b2:	2306      	movs	r3, #6
 80084b4:	e004      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084b6:	2304      	movs	r3, #4
 80084b8:	e002      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084ba:	2302      	movs	r3, #2
 80084bc:	e000      	b.n	80084c0 <UART_SetConfig+0x1808>
 80084be:	2301      	movs	r3, #1
 80084c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c4:	005a      	lsls	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	441a      	add	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084da:	e198      	b.n	800880e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084dc:	4b87      	ldr	r3, [pc, #540]	; (80086fc <UART_SetConfig+0x1a44>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d05e      	beq.n	80085a6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e8:	4b84      	ldr	r3, [pc, #528]	; (80086fc <UART_SetConfig+0x1a44>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a83      	ldr	r2, [pc, #524]	; (8008700 <UART_SetConfig+0x1a48>)
 80084f4:	40da      	lsrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d044      	beq.n	8008588 <UART_SetConfig+0x18d0>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b01      	cmp	r3, #1
 8008504:	d03e      	beq.n	8008584 <UART_SetConfig+0x18cc>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b02      	cmp	r3, #2
 800850c:	d038      	beq.n	8008580 <UART_SetConfig+0x18c8>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b03      	cmp	r3, #3
 8008514:	d032      	beq.n	800857c <UART_SetConfig+0x18c4>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b04      	cmp	r3, #4
 800851c:	d02c      	beq.n	8008578 <UART_SetConfig+0x18c0>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2b05      	cmp	r3, #5
 8008524:	d026      	beq.n	8008574 <UART_SetConfig+0x18bc>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b06      	cmp	r3, #6
 800852c:	d020      	beq.n	8008570 <UART_SetConfig+0x18b8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b07      	cmp	r3, #7
 8008534:	d01a      	beq.n	800856c <UART_SetConfig+0x18b4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	2b08      	cmp	r3, #8
 800853c:	d014      	beq.n	8008568 <UART_SetConfig+0x18b0>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b09      	cmp	r3, #9
 8008544:	d00e      	beq.n	8008564 <UART_SetConfig+0x18ac>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	2b0a      	cmp	r3, #10
 800854c:	d008      	beq.n	8008560 <UART_SetConfig+0x18a8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	2b0b      	cmp	r3, #11
 8008554:	d102      	bne.n	800855c <UART_SetConfig+0x18a4>
 8008556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855a:	e016      	b.n	800858a <UART_SetConfig+0x18d2>
 800855c:	2301      	movs	r3, #1
 800855e:	e014      	b.n	800858a <UART_SetConfig+0x18d2>
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	e012      	b.n	800858a <UART_SetConfig+0x18d2>
 8008564:	2340      	movs	r3, #64	; 0x40
 8008566:	e010      	b.n	800858a <UART_SetConfig+0x18d2>
 8008568:	2320      	movs	r3, #32
 800856a:	e00e      	b.n	800858a <UART_SetConfig+0x18d2>
 800856c:	2310      	movs	r3, #16
 800856e:	e00c      	b.n	800858a <UART_SetConfig+0x18d2>
 8008570:	230c      	movs	r3, #12
 8008572:	e00a      	b.n	800858a <UART_SetConfig+0x18d2>
 8008574:	230a      	movs	r3, #10
 8008576:	e008      	b.n	800858a <UART_SetConfig+0x18d2>
 8008578:	2308      	movs	r3, #8
 800857a:	e006      	b.n	800858a <UART_SetConfig+0x18d2>
 800857c:	2306      	movs	r3, #6
 800857e:	e004      	b.n	800858a <UART_SetConfig+0x18d2>
 8008580:	2304      	movs	r3, #4
 8008582:	e002      	b.n	800858a <UART_SetConfig+0x18d2>
 8008584:	2302      	movs	r3, #2
 8008586:	e000      	b.n	800858a <UART_SetConfig+0x18d2>
 8008588:	2301      	movs	r3, #1
 800858a:	fbb2 f3f3 	udiv	r3, r2, r3
 800858e:	005a      	lsls	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	441a      	add	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085a4:	e133      	b.n	800880e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d043      	beq.n	8008636 <UART_SetConfig+0x197e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d03d      	beq.n	8008632 <UART_SetConfig+0x197a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d037      	beq.n	800862e <UART_SetConfig+0x1976>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d031      	beq.n	800862a <UART_SetConfig+0x1972>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d02b      	beq.n	8008626 <UART_SetConfig+0x196e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d025      	beq.n	8008622 <UART_SetConfig+0x196a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	2b06      	cmp	r3, #6
 80085dc:	d01f      	beq.n	800861e <UART_SetConfig+0x1966>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b07      	cmp	r3, #7
 80085e4:	d019      	beq.n	800861a <UART_SetConfig+0x1962>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d013      	beq.n	8008616 <UART_SetConfig+0x195e>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	d00d      	beq.n	8008612 <UART_SetConfig+0x195a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	2b0a      	cmp	r3, #10
 80085fc:	d007      	beq.n	800860e <UART_SetConfig+0x1956>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b0b      	cmp	r3, #11
 8008604:	d101      	bne.n	800860a <UART_SetConfig+0x1952>
 8008606:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <UART_SetConfig+0x1a4c>)
 8008608:	e016      	b.n	8008638 <UART_SetConfig+0x1980>
 800860a:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <UART_SetConfig+0x1a50>)
 800860c:	e014      	b.n	8008638 <UART_SetConfig+0x1980>
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <UART_SetConfig+0x1a54>)
 8008610:	e012      	b.n	8008638 <UART_SetConfig+0x1980>
 8008612:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <UART_SetConfig+0x1a58>)
 8008614:	e010      	b.n	8008638 <UART_SetConfig+0x1980>
 8008616:	4b3f      	ldr	r3, [pc, #252]	; (8008714 <UART_SetConfig+0x1a5c>)
 8008618:	e00e      	b.n	8008638 <UART_SetConfig+0x1980>
 800861a:	4b3f      	ldr	r3, [pc, #252]	; (8008718 <UART_SetConfig+0x1a60>)
 800861c:	e00c      	b.n	8008638 <UART_SetConfig+0x1980>
 800861e:	4b3f      	ldr	r3, [pc, #252]	; (800871c <UART_SetConfig+0x1a64>)
 8008620:	e00a      	b.n	8008638 <UART_SetConfig+0x1980>
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <UART_SetConfig+0x1a68>)
 8008624:	e008      	b.n	8008638 <UART_SetConfig+0x1980>
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <UART_SetConfig+0x1a6c>)
 8008628:	e006      	b.n	8008638 <UART_SetConfig+0x1980>
 800862a:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <UART_SetConfig+0x1a70>)
 800862c:	e004      	b.n	8008638 <UART_SetConfig+0x1980>
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <UART_SetConfig+0x1a74>)
 8008630:	e002      	b.n	8008638 <UART_SetConfig+0x1980>
 8008632:	4b33      	ldr	r3, [pc, #204]	; (8008700 <UART_SetConfig+0x1a48>)
 8008634:	e000      	b.n	8008638 <UART_SetConfig+0x1980>
 8008636:	4b34      	ldr	r3, [pc, #208]	; (8008708 <UART_SetConfig+0x1a50>)
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6852      	ldr	r2, [r2, #4]
 800863c:	0852      	lsrs	r2, r2, #1
 800863e:	441a      	add	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	fbb2 f3f3 	udiv	r3, r2, r3
 8008648:	b29b      	uxth	r3, r3
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800864c:	e0df      	b.n	800880e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d045      	beq.n	80086e2 <UART_SetConfig+0x1a2a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b01      	cmp	r3, #1
 800865c:	d03f      	beq.n	80086de <UART_SetConfig+0x1a26>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b02      	cmp	r3, #2
 8008664:	d039      	beq.n	80086da <UART_SetConfig+0x1a22>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b03      	cmp	r3, #3
 800866c:	d033      	beq.n	80086d6 <UART_SetConfig+0x1a1e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b04      	cmp	r3, #4
 8008674:	d02d      	beq.n	80086d2 <UART_SetConfig+0x1a1a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b05      	cmp	r3, #5
 800867c:	d027      	beq.n	80086ce <UART_SetConfig+0x1a16>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b06      	cmp	r3, #6
 8008684:	d021      	beq.n	80086ca <UART_SetConfig+0x1a12>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b07      	cmp	r3, #7
 800868c:	d01b      	beq.n	80086c6 <UART_SetConfig+0x1a0e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b08      	cmp	r3, #8
 8008694:	d015      	beq.n	80086c2 <UART_SetConfig+0x1a0a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b09      	cmp	r3, #9
 800869c:	d00f      	beq.n	80086be <UART_SetConfig+0x1a06>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b0a      	cmp	r3, #10
 80086a4:	d008      	beq.n	80086b8 <UART_SetConfig+0x1a00>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b0b      	cmp	r3, #11
 80086ac:	d102      	bne.n	80086b4 <UART_SetConfig+0x19fc>
 80086ae:	f647 2312 	movw	r3, #31250	; 0x7a12
 80086b2:	e017      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086b4:	4b18      	ldr	r3, [pc, #96]	; (8008718 <UART_SetConfig+0x1a60>)
 80086b6:	e015      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086bc:	e012      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086be:	4b1c      	ldr	r3, [pc, #112]	; (8008730 <UART_SetConfig+0x1a78>)
 80086c0:	e010      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086c2:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <UART_SetConfig+0x1a7c>)
 80086c4:	e00e      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <UART_SetConfig+0x1a4c>)
 80086c8:	e00c      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <UART_SetConfig+0x1a80>)
 80086cc:	e00a      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <UART_SetConfig+0x1a84>)
 80086d0:	e008      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086d2:	4b0e      	ldr	r3, [pc, #56]	; (800870c <UART_SetConfig+0x1a54>)
 80086d4:	e006      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <UART_SetConfig+0x1a88>)
 80086d8:	e004      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086da:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <UART_SetConfig+0x1a58>)
 80086dc:	e002      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <UART_SetConfig+0x1a5c>)
 80086e0:	e000      	b.n	80086e4 <UART_SetConfig+0x1a2c>
 80086e2:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <UART_SetConfig+0x1a60>)
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6852      	ldr	r2, [r2, #4]
 80086e8:	0852      	lsrs	r2, r2, #1
 80086ea:	441a      	add	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086f8:	e089      	b.n	800880e <UART_SetConfig+0x1b56>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	03d09000 	.word	0x03d09000
 8008704:	0007a120 	.word	0x0007a120
 8008708:	07a12000 	.word	0x07a12000
 800870c:	000f4240 	.word	0x000f4240
 8008710:	001e8480 	.word	0x001e8480
 8008714:	003d0900 	.word	0x003d0900
 8008718:	007a1200 	.word	0x007a1200
 800871c:	00a2c2aa 	.word	0x00a2c2aa
 8008720:	00c35000 	.word	0x00c35000
 8008724:	00f42400 	.word	0x00f42400
 8008728:	01458554 	.word	0x01458554
 800872c:	01e84800 	.word	0x01e84800
 8008730:	0001e848 	.word	0x0001e848
 8008734:	0003d090 	.word	0x0003d090
 8008738:	000a2c2a 	.word	0x000a2c2a
 800873c:	000c3500 	.word	0x000c3500
 8008740:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d04f      	beq.n	80087ec <UART_SetConfig+0x1b34>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b01      	cmp	r3, #1
 8008752:	d048      	beq.n	80087e6 <UART_SetConfig+0x1b2e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b02      	cmp	r3, #2
 800875a:	d041      	beq.n	80087e0 <UART_SetConfig+0x1b28>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	2b03      	cmp	r3, #3
 8008762:	d03a      	beq.n	80087da <UART_SetConfig+0x1b22>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b04      	cmp	r3, #4
 800876a:	d033      	beq.n	80087d4 <UART_SetConfig+0x1b1c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b05      	cmp	r3, #5
 8008772:	d02c      	beq.n	80087ce <UART_SetConfig+0x1b16>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b06      	cmp	r3, #6
 800877a:	d025      	beq.n	80087c8 <UART_SetConfig+0x1b10>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b07      	cmp	r3, #7
 8008782:	d01e      	beq.n	80087c2 <UART_SetConfig+0x1b0a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b08      	cmp	r3, #8
 800878a:	d017      	beq.n	80087bc <UART_SetConfig+0x1b04>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b09      	cmp	r3, #9
 8008792:	d010      	beq.n	80087b6 <UART_SetConfig+0x1afe>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b0a      	cmp	r3, #10
 800879a:	d009      	beq.n	80087b0 <UART_SetConfig+0x1af8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b0b      	cmp	r3, #11
 80087a2:	d102      	bne.n	80087aa <UART_SetConfig+0x1af2>
 80087a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087a8:	e022      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087ae:	e01f      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b4:	e01c      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ba:	e019      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c0:	e016      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c6:	e013      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087c8:	f241 5354 	movw	r3, #5460	; 0x1554
 80087cc:	e010      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087ce:	f641 1398 	movw	r3, #6552	; 0x1998
 80087d2:	e00d      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087d8:	e00a      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087da:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80087de:	e007      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087e4:	e004      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ea:	e001      	b.n	80087f0 <UART_SetConfig+0x1b38>
 80087ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6852      	ldr	r2, [r2, #4]
 80087f4:	0852      	lsrs	r2, r2, #1
 80087f6:	441a      	add	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	b29b      	uxth	r3, r3
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008804:	e003      	b.n	800880e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800880c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d916      	bls.n	8008842 <UART_SetConfig+0x1b8a>
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881a:	d212      	bcs.n	8008842 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	b29b      	uxth	r3, r3
 8008820:	f023 030f 	bic.w	r3, r3, #15
 8008824:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	b29a      	uxth	r2, r3
 8008832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008834:	4313      	orrs	r3, r2
 8008836:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800883e:	60da      	str	r2, [r3, #12]
 8008840:	e3a3      	b.n	8008f8a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008848:	e39f      	b.n	8008f8a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800884a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	f200 8388 	bhi.w	8008f64 <UART_SetConfig+0x22ac>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0x1ba4>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008961 	.word	0x08008961
 8008860:	08008a17 	.word	0x08008a17
 8008864:	08008f65 	.word	0x08008f65
 8008868:	08008f65 	.word	0x08008f65
 800886c:	08008acd 	.word	0x08008acd
 8008870:	08008f65 	.word	0x08008f65
 8008874:	08008f65 	.word	0x08008f65
 8008878:	08008f65 	.word	0x08008f65
 800887c:	08008b87 	.word	0x08008b87
 8008880:	08008f65 	.word	0x08008f65
 8008884:	08008f65 	.word	0x08008f65
 8008888:	08008f65 	.word	0x08008f65
 800888c:	08008f65 	.word	0x08008f65
 8008890:	08008f65 	.word	0x08008f65
 8008894:	08008f65 	.word	0x08008f65
 8008898:	08008f65 	.word	0x08008f65
 800889c:	08008c41 	.word	0x08008c41
 80088a0:	08008f65 	.word	0x08008f65
 80088a4:	08008f65 	.word	0x08008f65
 80088a8:	08008f65 	.word	0x08008f65
 80088ac:	08008f65 	.word	0x08008f65
 80088b0:	08008f65 	.word	0x08008f65
 80088b4:	08008f65 	.word	0x08008f65
 80088b8:	08008f65 	.word	0x08008f65
 80088bc:	08008f65 	.word	0x08008f65
 80088c0:	08008f65 	.word	0x08008f65
 80088c4:	08008f65 	.word	0x08008f65
 80088c8:	08008f65 	.word	0x08008f65
 80088cc:	08008f65 	.word	0x08008f65
 80088d0:	08008f65 	.word	0x08008f65
 80088d4:	08008f65 	.word	0x08008f65
 80088d8:	08008f65 	.word	0x08008f65
 80088dc:	08008db1 	.word	0x08008db1
 80088e0:	08008f65 	.word	0x08008f65
 80088e4:	08008f65 	.word	0x08008f65
 80088e8:	08008f65 	.word	0x08008f65
 80088ec:	08008f65 	.word	0x08008f65
 80088f0:	08008f65 	.word	0x08008f65
 80088f4:	08008f65 	.word	0x08008f65
 80088f8:	08008f65 	.word	0x08008f65
 80088fc:	08008f65 	.word	0x08008f65
 8008900:	08008f65 	.word	0x08008f65
 8008904:	08008f65 	.word	0x08008f65
 8008908:	08008f65 	.word	0x08008f65
 800890c:	08008f65 	.word	0x08008f65
 8008910:	08008f65 	.word	0x08008f65
 8008914:	08008f65 	.word	0x08008f65
 8008918:	08008f65 	.word	0x08008f65
 800891c:	08008f65 	.word	0x08008f65
 8008920:	08008f65 	.word	0x08008f65
 8008924:	08008f65 	.word	0x08008f65
 8008928:	08008f65 	.word	0x08008f65
 800892c:	08008f65 	.word	0x08008f65
 8008930:	08008f65 	.word	0x08008f65
 8008934:	08008f65 	.word	0x08008f65
 8008938:	08008f65 	.word	0x08008f65
 800893c:	08008f65 	.word	0x08008f65
 8008940:	08008f65 	.word	0x08008f65
 8008944:	08008f65 	.word	0x08008f65
 8008948:	08008f65 	.word	0x08008f65
 800894c:	08008f65 	.word	0x08008f65
 8008950:	08008f65 	.word	0x08008f65
 8008954:	08008f65 	.word	0x08008f65
 8008958:	08008f65 	.word	0x08008f65
 800895c:	08008ea5 	.word	0x08008ea5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008960:	f7fc fb04 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8008964:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d044      	beq.n	80089f8 <UART_SetConfig+0x1d40>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b01      	cmp	r3, #1
 8008974:	d03e      	beq.n	80089f4 <UART_SetConfig+0x1d3c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b02      	cmp	r3, #2
 800897c:	d038      	beq.n	80089f0 <UART_SetConfig+0x1d38>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b03      	cmp	r3, #3
 8008984:	d032      	beq.n	80089ec <UART_SetConfig+0x1d34>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b04      	cmp	r3, #4
 800898c:	d02c      	beq.n	80089e8 <UART_SetConfig+0x1d30>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	2b05      	cmp	r3, #5
 8008994:	d026      	beq.n	80089e4 <UART_SetConfig+0x1d2c>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b06      	cmp	r3, #6
 800899c:	d020      	beq.n	80089e0 <UART_SetConfig+0x1d28>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	d01a      	beq.n	80089dc <UART_SetConfig+0x1d24>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d014      	beq.n	80089d8 <UART_SetConfig+0x1d20>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	d00e      	beq.n	80089d4 <UART_SetConfig+0x1d1c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b0a      	cmp	r3, #10
 80089bc:	d008      	beq.n	80089d0 <UART_SetConfig+0x1d18>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b0b      	cmp	r3, #11
 80089c4:	d102      	bne.n	80089cc <UART_SetConfig+0x1d14>
 80089c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ca:	e016      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e014      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089d0:	2380      	movs	r3, #128	; 0x80
 80089d2:	e012      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089d4:	2340      	movs	r3, #64	; 0x40
 80089d6:	e010      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089d8:	2320      	movs	r3, #32
 80089da:	e00e      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089dc:	2310      	movs	r3, #16
 80089de:	e00c      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089e0:	230c      	movs	r3, #12
 80089e2:	e00a      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089e4:	230a      	movs	r3, #10
 80089e6:	e008      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089e8:	2308      	movs	r3, #8
 80089ea:	e006      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089ec:	2306      	movs	r3, #6
 80089ee:	e004      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089f0:	2304      	movs	r3, #4
 80089f2:	e002      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e000      	b.n	80089fa <UART_SetConfig+0x1d42>
 80089f8:	2301      	movs	r3, #1
 80089fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	441a      	add	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a14:	e2aa      	b.n	8008f6c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a16:	f7fc fabf 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 8008a1a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d044      	beq.n	8008aae <UART_SetConfig+0x1df6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d03e      	beq.n	8008aaa <UART_SetConfig+0x1df2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d038      	beq.n	8008aa6 <UART_SetConfig+0x1dee>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d032      	beq.n	8008aa2 <UART_SetConfig+0x1dea>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d02c      	beq.n	8008a9e <UART_SetConfig+0x1de6>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	d026      	beq.n	8008a9a <UART_SetConfig+0x1de2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b06      	cmp	r3, #6
 8008a52:	d020      	beq.n	8008a96 <UART_SetConfig+0x1dde>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b07      	cmp	r3, #7
 8008a5a:	d01a      	beq.n	8008a92 <UART_SetConfig+0x1dda>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d014      	beq.n	8008a8e <UART_SetConfig+0x1dd6>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b09      	cmp	r3, #9
 8008a6a:	d00e      	beq.n	8008a8a <UART_SetConfig+0x1dd2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b0a      	cmp	r3, #10
 8008a72:	d008      	beq.n	8008a86 <UART_SetConfig+0x1dce>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b0b      	cmp	r3, #11
 8008a7a:	d102      	bne.n	8008a82 <UART_SetConfig+0x1dca>
 8008a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a80:	e016      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e014      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	e012      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	e010      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a8e:	2320      	movs	r3, #32
 8008a90:	e00e      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a92:	2310      	movs	r3, #16
 8008a94:	e00c      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a96:	230c      	movs	r3, #12
 8008a98:	e00a      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	e008      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008a9e:	2308      	movs	r3, #8
 8008aa0:	e006      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008aa2:	2306      	movs	r3, #6
 8008aa4:	e004      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	e002      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e000      	b.n	8008ab0 <UART_SetConfig+0x1df8>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aca:	e24f      	b.n	8008f6c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008acc:	f107 0318 	add.w	r3, r7, #24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd f9ad 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d044      	beq.n	8008b6a <UART_SetConfig+0x1eb2>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d03e      	beq.n	8008b66 <UART_SetConfig+0x1eae>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d038      	beq.n	8008b62 <UART_SetConfig+0x1eaa>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d032      	beq.n	8008b5e <UART_SetConfig+0x1ea6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d02c      	beq.n	8008b5a <UART_SetConfig+0x1ea2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d026      	beq.n	8008b56 <UART_SetConfig+0x1e9e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	d020      	beq.n	8008b52 <UART_SetConfig+0x1e9a>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	d01a      	beq.n	8008b4e <UART_SetConfig+0x1e96>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d014      	beq.n	8008b4a <UART_SetConfig+0x1e92>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d00e      	beq.n	8008b46 <UART_SetConfig+0x1e8e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b0a      	cmp	r3, #10
 8008b2e:	d008      	beq.n	8008b42 <UART_SetConfig+0x1e8a>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b0b      	cmp	r3, #11
 8008b36:	d102      	bne.n	8008b3e <UART_SetConfig+0x1e86>
 8008b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b3c:	e016      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e014      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b42:	2380      	movs	r3, #128	; 0x80
 8008b44:	e012      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	e010      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	e00e      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b4e:	2310      	movs	r3, #16
 8008b50:	e00c      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b52:	230c      	movs	r3, #12
 8008b54:	e00a      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b56:	230a      	movs	r3, #10
 8008b58:	e008      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	e006      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b5e:	2306      	movs	r3, #6
 8008b60:	e004      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b62:	2304      	movs	r3, #4
 8008b64:	e002      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e000      	b.n	8008b6c <UART_SetConfig+0x1eb4>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	441a      	add	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b84:	e1f2      	b.n	8008f6c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fd fa9c 	bl	80060c8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d044      	beq.n	8008c24 <UART_SetConfig+0x1f6c>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d03e      	beq.n	8008c20 <UART_SetConfig+0x1f68>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d038      	beq.n	8008c1c <UART_SetConfig+0x1f64>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d032      	beq.n	8008c18 <UART_SetConfig+0x1f60>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d02c      	beq.n	8008c14 <UART_SetConfig+0x1f5c>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d026      	beq.n	8008c10 <UART_SetConfig+0x1f58>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d020      	beq.n	8008c0c <UART_SetConfig+0x1f54>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d01a      	beq.n	8008c08 <UART_SetConfig+0x1f50>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d014      	beq.n	8008c04 <UART_SetConfig+0x1f4c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	d00e      	beq.n	8008c00 <UART_SetConfig+0x1f48>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b0a      	cmp	r3, #10
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x1f44>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b0b      	cmp	r3, #11
 8008bf0:	d102      	bne.n	8008bf8 <UART_SetConfig+0x1f40>
 8008bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf6:	e016      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e014      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	e012      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	e010      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c04:	2320      	movs	r3, #32
 8008c06:	e00e      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	e00c      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	e00a      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c10:	230a      	movs	r3, #10
 8008c12:	e008      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c14:	2308      	movs	r3, #8
 8008c16:	e006      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c18:	2306      	movs	r3, #6
 8008c1a:	e004      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	e002      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e000      	b.n	8008c26 <UART_SetConfig+0x1f6e>
 8008c24:	2301      	movs	r3, #1
 8008c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	441a      	add	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c3e:	e195      	b.n	8008f6c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c40:	4b87      	ldr	r3, [pc, #540]	; (8008e60 <UART_SetConfig+0x21a8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d05d      	beq.n	8008d08 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c4c:	4b84      	ldr	r3, [pc, #528]	; (8008e60 <UART_SetConfig+0x21a8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	08db      	lsrs	r3, r3, #3
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	4a83      	ldr	r2, [pc, #524]	; (8008e64 <UART_SetConfig+0x21ac>)
 8008c58:	40da      	lsrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d044      	beq.n	8008cec <UART_SetConfig+0x2034>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d03e      	beq.n	8008ce8 <UART_SetConfig+0x2030>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d038      	beq.n	8008ce4 <UART_SetConfig+0x202c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d032      	beq.n	8008ce0 <UART_SetConfig+0x2028>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d02c      	beq.n	8008cdc <UART_SetConfig+0x2024>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d026      	beq.n	8008cd8 <UART_SetConfig+0x2020>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d020      	beq.n	8008cd4 <UART_SetConfig+0x201c>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b07      	cmp	r3, #7
 8008c98:	d01a      	beq.n	8008cd0 <UART_SetConfig+0x2018>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d014      	beq.n	8008ccc <UART_SetConfig+0x2014>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b09      	cmp	r3, #9
 8008ca8:	d00e      	beq.n	8008cc8 <UART_SetConfig+0x2010>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b0a      	cmp	r3, #10
 8008cb0:	d008      	beq.n	8008cc4 <UART_SetConfig+0x200c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b0b      	cmp	r3, #11
 8008cb8:	d102      	bne.n	8008cc0 <UART_SetConfig+0x2008>
 8008cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cbe:	e016      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e014      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cc4:	2380      	movs	r3, #128	; 0x80
 8008cc6:	e012      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cc8:	2340      	movs	r3, #64	; 0x40
 8008cca:	e010      	b.n	8008cee <UART_SetConfig+0x2036>
 8008ccc:	2320      	movs	r3, #32
 8008cce:	e00e      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	e00c      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	e00a      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cd8:	230a      	movs	r3, #10
 8008cda:	e008      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	e006      	b.n	8008cee <UART_SetConfig+0x2036>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	e004      	b.n	8008cee <UART_SetConfig+0x2036>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e002      	b.n	8008cee <UART_SetConfig+0x2036>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e000      	b.n	8008cee <UART_SetConfig+0x2036>
 8008cec:	2301      	movs	r3, #1
 8008cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008d06:	e131      	b.n	8008f6c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d043      	beq.n	8008d98 <UART_SetConfig+0x20e0>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d03d      	beq.n	8008d94 <UART_SetConfig+0x20dc>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d037      	beq.n	8008d90 <UART_SetConfig+0x20d8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d031      	beq.n	8008d8c <UART_SetConfig+0x20d4>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d02b      	beq.n	8008d88 <UART_SetConfig+0x20d0>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	2b05      	cmp	r3, #5
 8008d36:	d025      	beq.n	8008d84 <UART_SetConfig+0x20cc>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d01f      	beq.n	8008d80 <UART_SetConfig+0x20c8>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b07      	cmp	r3, #7
 8008d46:	d019      	beq.n	8008d7c <UART_SetConfig+0x20c4>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d013      	beq.n	8008d78 <UART_SetConfig+0x20c0>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d00d      	beq.n	8008d74 <UART_SetConfig+0x20bc>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b0a      	cmp	r3, #10
 8008d5e:	d007      	beq.n	8008d70 <UART_SetConfig+0x20b8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	2b0b      	cmp	r3, #11
 8008d66:	d101      	bne.n	8008d6c <UART_SetConfig+0x20b4>
 8008d68:	4b3f      	ldr	r3, [pc, #252]	; (8008e68 <UART_SetConfig+0x21b0>)
 8008d6a:	e016      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d6c:	4b3d      	ldr	r3, [pc, #244]	; (8008e64 <UART_SetConfig+0x21ac>)
 8008d6e:	e014      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d70:	4b3e      	ldr	r3, [pc, #248]	; (8008e6c <UART_SetConfig+0x21b4>)
 8008d72:	e012      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d74:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <UART_SetConfig+0x21b8>)
 8008d76:	e010      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d78:	4b3e      	ldr	r3, [pc, #248]	; (8008e74 <UART_SetConfig+0x21bc>)
 8008d7a:	e00e      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d7c:	4b3e      	ldr	r3, [pc, #248]	; (8008e78 <UART_SetConfig+0x21c0>)
 8008d7e:	e00c      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d80:	4b3e      	ldr	r3, [pc, #248]	; (8008e7c <UART_SetConfig+0x21c4>)
 8008d82:	e00a      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d84:	4b3e      	ldr	r3, [pc, #248]	; (8008e80 <UART_SetConfig+0x21c8>)
 8008d86:	e008      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <UART_SetConfig+0x21cc>)
 8008d8a:	e006      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d8c:	4b3e      	ldr	r3, [pc, #248]	; (8008e88 <UART_SetConfig+0x21d0>)
 8008d8e:	e004      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d90:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <UART_SetConfig+0x21d4>)
 8008d92:	e002      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d94:	4b3e      	ldr	r3, [pc, #248]	; (8008e90 <UART_SetConfig+0x21d8>)
 8008d96:	e000      	b.n	8008d9a <UART_SetConfig+0x20e2>
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <UART_SetConfig+0x21ac>)
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6852      	ldr	r2, [r2, #4]
 8008d9e:	0852      	lsrs	r2, r2, #1
 8008da0:	441a      	add	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dae:	e0dd      	b.n	8008f6c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d046      	beq.n	8008e46 <UART_SetConfig+0x218e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d040      	beq.n	8008e42 <UART_SetConfig+0x218a>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d03a      	beq.n	8008e3e <UART_SetConfig+0x2186>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d034      	beq.n	8008e3a <UART_SetConfig+0x2182>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d02e      	beq.n	8008e36 <UART_SetConfig+0x217e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b05      	cmp	r3, #5
 8008dde:	d028      	beq.n	8008e32 <UART_SetConfig+0x217a>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b06      	cmp	r3, #6
 8008de6:	d022      	beq.n	8008e2e <UART_SetConfig+0x2176>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	d01c      	beq.n	8008e2a <UART_SetConfig+0x2172>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d016      	beq.n	8008e26 <UART_SetConfig+0x216e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d00f      	beq.n	8008e20 <UART_SetConfig+0x2168>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b0a      	cmp	r3, #10
 8008e06:	d008      	beq.n	8008e1a <UART_SetConfig+0x2162>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b0b      	cmp	r3, #11
 8008e0e:	d102      	bne.n	8008e16 <UART_SetConfig+0x215e>
 8008e10:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008e14:	e018      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e16:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <UART_SetConfig+0x21c0>)
 8008e18:	e016      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e1a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008e1e:	e013      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e20:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008e24:	e010      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e26:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <UART_SetConfig+0x21dc>)
 8008e28:	e00e      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e2a:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <UART_SetConfig+0x21b0>)
 8008e2c:	e00c      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <UART_SetConfig+0x21e0>)
 8008e30:	e00a      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e32:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <UART_SetConfig+0x21e4>)
 8008e34:	e008      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <UART_SetConfig+0x21b4>)
 8008e38:	e006      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e3a:	4b19      	ldr	r3, [pc, #100]	; (8008ea0 <UART_SetConfig+0x21e8>)
 8008e3c:	e004      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <UART_SetConfig+0x21b8>)
 8008e40:	e002      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <UART_SetConfig+0x21bc>)
 8008e44:	e000      	b.n	8008e48 <UART_SetConfig+0x2190>
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <UART_SetConfig+0x21c0>)
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6852      	ldr	r2, [r2, #4]
 8008e4c:	0852      	lsrs	r2, r2, #1
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e5c:	e086      	b.n	8008f6c <UART_SetConfig+0x22b4>
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400
 8008e64:	03d09000 	.word	0x03d09000
 8008e68:	0003d090 	.word	0x0003d090
 8008e6c:	0007a120 	.word	0x0007a120
 8008e70:	000f4240 	.word	0x000f4240
 8008e74:	001e8480 	.word	0x001e8480
 8008e78:	003d0900 	.word	0x003d0900
 8008e7c:	00516155 	.word	0x00516155
 8008e80:	0061a800 	.word	0x0061a800
 8008e84:	007a1200 	.word	0x007a1200
 8008e88:	00a2c2aa 	.word	0x00a2c2aa
 8008e8c:	00f42400 	.word	0x00f42400
 8008e90:	01e84800 	.word	0x01e84800
 8008e94:	0001e848 	.word	0x0001e848
 8008e98:	00051615 	.word	0x00051615
 8008e9c:	00061a80 	.word	0x00061a80
 8008ea0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d04e      	beq.n	8008f4a <UART_SetConfig+0x2292>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d047      	beq.n	8008f44 <UART_SetConfig+0x228c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d040      	beq.n	8008f3e <UART_SetConfig+0x2286>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d039      	beq.n	8008f38 <UART_SetConfig+0x2280>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d032      	beq.n	8008f32 <UART_SetConfig+0x227a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d02b      	beq.n	8008f2c <UART_SetConfig+0x2274>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d024      	beq.n	8008f26 <UART_SetConfig+0x226e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b07      	cmp	r3, #7
 8008ee2:	d01d      	beq.n	8008f20 <UART_SetConfig+0x2268>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d016      	beq.n	8008f1a <UART_SetConfig+0x2262>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d00f      	beq.n	8008f14 <UART_SetConfig+0x225c>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b0a      	cmp	r3, #10
 8008efa:	d008      	beq.n	8008f0e <UART_SetConfig+0x2256>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b0b      	cmp	r3, #11
 8008f02:	d101      	bne.n	8008f08 <UART_SetConfig+0x2250>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	e022      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0c:	e01f      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f12:	e01c      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f18:	e019      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f1e:	e016      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f24:	e013      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f26:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008f2a:	e010      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f2c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008f30:	e00d      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f36:	e00a      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f38:	f241 5355 	movw	r3, #5461	; 0x1555
 8008f3c:	e007      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f42:	e004      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f48:	e001      	b.n	8008f4e <UART_SetConfig+0x2296>
 8008f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6852      	ldr	r2, [r2, #4]
 8008f52:	0852      	lsrs	r2, r2, #1
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f62:	e003      	b.n	8008f6c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	d908      	bls.n	8008f84 <UART_SetConfig+0x22cc>
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f78:	d204      	bcs.n	8008f84 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	e002      	b.n	8008f8a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3740      	adds	r7, #64	; 0x40
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01a      	beq.n	80090ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b2:	d10a      	bne.n	80090ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009108:	f7f8 fc6a 	bl	80019e0 <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10e      	bne.n	800913a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f82c 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e022      	b.n	8009180 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d10e      	bne.n	8009166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f816 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00c      	b.n	8009180 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009198:	e062      	b.n	8009260 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d05e      	beq.n	8009260 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a2:	f7f8 fc1d 	bl	80019e0 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11d      	bne.n	80091f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0201 	bic.w	r2, r2, #1
 80091d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e045      	b.n	8009280 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0304 	and.w	r3, r3, #4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d02e      	beq.n	8009260 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009210:	d126      	bne.n	8009260 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800921a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800922a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2220      	movs	r2, #32
 8009248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e00f      	b.n	8009280 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69da      	ldr	r2, [r3, #28]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	4013      	ands	r3, r2
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	bf0c      	ite	eq
 8009270:	2301      	moveq	r3, #1
 8009272:	2300      	movne	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	429a      	cmp	r2, r3
 800927c:	d08d      	beq.n	800919a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_UARTEx_DisableFifoMode+0x16>
 800929a:	2302      	movs	r3, #2
 800929c:	e027      	b.n	80092ee <HAL_UARTEx_DisableFifoMode+0x66>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	; 0x24
 80092aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800930e:	2302      	movs	r3, #2
 8009310:	e02d      	b.n	800936e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2224      	movs	r2, #36	; 0x24
 800931e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f850 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800938a:	2302      	movs	r3, #2
 800938c:	e02d      	b.n	80093ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2224      	movs	r2, #36	; 0x24
 800939a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f812 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093fc:	4a2f      	ldr	r2, [pc, #188]	; (80094bc <UARTEx_SetNbDataToProcess+0xc8>)
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009406:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800940a:	4a2d      	ldr	r2, [pc, #180]	; (80094c0 <UARTEx_SetNbDataToProcess+0xcc>)
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009414:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800941c:	2b00      	cmp	r3, #0
 800941e:	d108      	bne.n	8009432 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009430:	e03d      	b.n	80094ae <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009432:	2308      	movs	r3, #8
 8009434:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009436:	2308      	movs	r3, #8
 8009438:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	0e5b      	lsrs	r3, r3, #25
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	0f5b      	lsrs	r3, r3, #29
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800945a:	7fbb      	ldrb	r3, [r7, #30]
 800945c:	7f3a      	ldrb	r2, [r7, #28]
 800945e:	f107 0120 	add.w	r1, r7, #32
 8009462:	440a      	add	r2, r1
 8009464:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009468:	fb02 f303 	mul.w	r3, r2, r3
 800946c:	7f3a      	ldrb	r2, [r7, #28]
 800946e:	f107 0120 	add.w	r1, r7, #32
 8009472:	440a      	add	r2, r1
 8009474:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009478:	fb93 f3f2 	sdiv	r3, r3, r2
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009484:	7ffb      	ldrb	r3, [r7, #31]
 8009486:	7f7a      	ldrb	r2, [r7, #29]
 8009488:	f107 0120 	add.w	r1, r7, #32
 800948c:	440a      	add	r2, r1
 800948e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009492:	fb02 f303 	mul.w	r3, r2, r3
 8009496:	7f7a      	ldrb	r2, [r7, #29]
 8009498:	f107 0120 	add.w	r1, r7, #32
 800949c:	440a      	add	r2, r1
 800949e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094ae:	bf00      	nop
 80094b0:	3724      	adds	r7, #36	; 0x24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	0801a6d8 	.word	0x0801a6d8
 80094c0:	0801a6e0 	.word	0x0801a6e0

080094c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094c4:	b084      	sub	sp, #16
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	f107 001c 	add.w	r0, r7, #28
 80094d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d120      	bne.n	800951e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	4b25      	ldr	r3, [pc, #148]	; (8009584 <USB_CoreInit+0xc0>)
 80094ee:	4013      	ands	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d105      	bne.n	8009512 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa4c 	bl	80099b0 <USB_CoreReset>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
 800951c:	e01a      	b.n	8009554 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa40 	bl	80099b0 <USB_CoreReset>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
 8009546:	e005      	b.n	8009554 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2b01      	cmp	r3, #1
 8009558:	d10b      	bne.n	8009572 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f043 0206 	orr.w	r2, r3, #6
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f043 0220 	orr.w	r2, r3, #32
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800957e:	b004      	add	sp, #16
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	ffbdffbf 	.word	0xffbdffbf

08009588 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f023 0201 	bic.w	r2, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d106      	bne.n	80095d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	e00b      	b.n	80095ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d106      	bne.n	80095ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60da      	str	r2, [r3, #12]
 80095e8:	e001      	b.n	80095ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e003      	b.n	80095f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80095ee:	2032      	movs	r0, #50	; 0x32
 80095f0:	f7f8 fa02 	bl	80019f8 <HAL_Delay>

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009600:	b084      	sub	sp, #16
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800960e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	e009      	b.n	8009634 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3340      	adds	r3, #64	; 0x40
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3301      	adds	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2b0e      	cmp	r3, #14
 8009638:	d9f2      	bls.n	8009620 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800963a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d11c      	bne.n	800967a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800964e:	f043 0302 	orr.w	r3, r3, #2
 8009652:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	e005      	b.n	8009686 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800968c:	461a      	mov	r2, r3
 800968e:	2300      	movs	r3, #0
 8009690:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009698:	4619      	mov	r1, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	461a      	mov	r2, r3
 80096a2:	680b      	ldr	r3, [r1, #0]
 80096a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d10c      	bne.n	80096c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f949 	bl	800994c <USB_SetDevSpeed>
 80096ba:	e008      	b.n	80096ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096bc:	2101      	movs	r1, #1
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f944 	bl	800994c <USB_SetDevSpeed>
 80096c4:	e003      	b.n	80096ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096c6:	2103      	movs	r1, #3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f93f 	bl	800994c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096ce:	2110      	movs	r1, #16
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8f3 	bl	80098bc <USB_FlushTxFifo>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f911 	bl	8009908 <USB_FlushRxFifo>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f6:	461a      	mov	r2, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009702:	461a      	mov	r2, r3
 8009704:	2300      	movs	r3, #0
 8009706:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970e:	461a      	mov	r2, r3
 8009710:	2300      	movs	r3, #0
 8009712:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	e043      	b.n	80097a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800972c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009730:	d118      	bne.n	8009764 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e013      	b.n	8009776 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975a:	461a      	mov	r2, r3
 800975c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	e008      	b.n	8009776 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009770:	461a      	mov	r2, r3
 8009772:	2300      	movs	r3, #0
 8009774:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009782:	461a      	mov	r2, r3
 8009784:	2300      	movs	r3, #0
 8009786:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009794:	461a      	mov	r2, r3
 8009796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800979a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	3301      	adds	r3, #1
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d3b7      	bcc.n	800971a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	e043      	b.n	8009838 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c6:	d118      	bne.n	80097fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	461a      	mov	r2, r3
 80097dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e013      	b.n	800980c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f0:	461a      	mov	r2, r3
 80097f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	e008      	b.n	800980c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	461a      	mov	r2, r3
 8009808:	2300      	movs	r3, #0
 800980a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009818:	461a      	mov	r2, r3
 800981a:	2300      	movs	r3, #0
 800981c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982a:	461a      	mov	r2, r3
 800982c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	3301      	adds	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	429a      	cmp	r2, r3
 800983e:	d3b7      	bcc.n	80097b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800984e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009852:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009860:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2b00      	cmp	r3, #0
 8009866:	d105      	bne.n	8009874 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	f043 0210 	orr.w	r2, r3, #16
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <USB_DevInit+0x2b4>)
 800987a:	4313      	orrs	r3, r2
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	f043 0208 	orr.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009894:	2b01      	cmp	r3, #1
 8009896:	d105      	bne.n	80098a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	699a      	ldr	r2, [r3, #24]
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <USB_DevInit+0x2b8>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098b0:	b004      	add	sp, #16
 80098b2:	4770      	bx	lr
 80098b4:	803c3800 	.word	0x803c3800
 80098b8:	40000004 	.word	0x40000004

080098bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	019b      	lsls	r3, r3, #6
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <USB_FlushTxFifo+0x48>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d901      	bls.n	80098e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e006      	b.n	80098f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	d0f0      	beq.n	80098d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	00030d40 	.word	0x00030d40

08009908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2210      	movs	r2, #16
 8009918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4a09      	ldr	r2, [pc, #36]	; (8009948 <USB_FlushRxFifo+0x40>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d901      	bls.n	800992c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e006      	b.n	800993a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b10      	cmp	r3, #16
 8009936:	d0f0      	beq.n	800991a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	00030d40 	.word	0x00030d40

0800994c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800996c:	4313      	orrs	r3, r2
 800996e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009998:	f043 0302 	orr.w	r3, r3, #2
 800999c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800999e:	2003      	movs	r0, #3
 80099a0:	f7f8 f82a 	bl	80019f8 <HAL_Delay>

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <USB_CoreReset+0x64>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d901      	bls.n	80099ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e01b      	b.n	8009a06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	daf2      	bge.n	80099bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f043 0201 	orr.w	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <USB_CoreReset+0x64>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d901      	bls.n	80099f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e006      	b.n	8009a06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d0f0      	beq.n	80099e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	00030d40 	.word	0x00030d40

08009a18 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8009a1e:	4b8c      	ldr	r3, [pc, #560]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a20:	22a9      	movs	r2, #169	; 0xa9
 8009a22:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8009a24:	4b8a      	ldr	r3, [pc, #552]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a26:	22fe      	movs	r2, #254	; 0xfe
 8009a28:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009a2a:	4b89      	ldr	r3, [pc, #548]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8009a30:	4b87      	ldr	r3, [pc, #540]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a32:	2214      	movs	r2, #20
 8009a34:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009a36:	4b87      	ldr	r3, [pc, #540]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009a38:	22ff      	movs	r2, #255	; 0xff
 8009a3a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009a3c:	4b85      	ldr	r3, [pc, #532]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009a3e:	22ff      	movs	r2, #255	; 0xff
 8009a40:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8009a42:	4b84      	ldr	r3, [pc, #528]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009a48:	4b82      	ldr	r3, [pc, #520]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009a4e:	4b82      	ldr	r3, [pc, #520]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009a54:	4b80      	ldr	r3, [pc, #512]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009a5a:	4b7f      	ldr	r3, [pc, #508]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009a60:	4b7d      	ldr	r3, [pc, #500]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009a66:	2100      	movs	r1, #0
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f005 fe09 	bl	800f680 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a6e:	4b78      	ldr	r3, [pc, #480]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	061a      	lsls	r2, r3, #24
 8009a74:	4b76      	ldr	r3, [pc, #472]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	041b      	lsls	r3, r3, #16
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	4b74      	ldr	r3, [pc, #464]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	4313      	orrs	r3, r2
 8009a84:	4a72      	ldr	r2, [pc, #456]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a86:	78d2      	ldrb	r2, [r2, #3]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	061a      	lsls	r2, r3, #24
 8009a8c:	4b70      	ldr	r3, [pc, #448]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	0619      	lsls	r1, r3, #24
 8009a92:	4b6f      	ldr	r3, [pc, #444]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	4319      	orrs	r1, r3
 8009a9a:	4b6d      	ldr	r3, [pc, #436]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009a9c:	789b      	ldrb	r3, [r3, #2]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	496b      	ldr	r1, [pc, #428]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009aa4:	78c9      	ldrb	r1, [r1, #3]
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	4b67      	ldr	r3, [pc, #412]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	0619      	lsls	r1, r3, #24
 8009ab6:	4b66      	ldr	r3, [pc, #408]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	041b      	lsls	r3, r3, #16
 8009abc:	4319      	orrs	r1, r3
 8009abe:	4b64      	ldr	r3, [pc, #400]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ac0:	789b      	ldrb	r3, [r3, #2]
 8009ac2:	021b      	lsls	r3, r3, #8
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	4962      	ldr	r1, [pc, #392]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ac8:	78c9      	ldrb	r1, [r1, #3]
 8009aca:	430b      	orrs	r3, r1
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	4b5e      	ldr	r3, [pc, #376]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	0619      	lsls	r1, r3, #24
 8009ada:	4b5d      	ldr	r3, [pc, #372]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	4319      	orrs	r1, r3
 8009ae2:	4b5b      	ldr	r3, [pc, #364]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009ae4:	789b      	ldrb	r3, [r3, #2]
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	4959      	ldr	r1, [pc, #356]	; (8009c50 <MX_LWIP_Init+0x238>)
 8009aec:	78c9      	ldrb	r1, [r1, #3]
 8009aee:	430b      	orrs	r3, r1
 8009af0:	0e1b      	lsrs	r3, r3, #24
 8009af2:	4313      	orrs	r3, r2
 8009af4:	4a59      	ldr	r2, [pc, #356]	; (8009c5c <MX_LWIP_Init+0x244>)
 8009af6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009af8:	4b56      	ldr	r3, [pc, #344]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	061a      	lsls	r2, r3, #24
 8009afe:	4b55      	ldr	r3, [pc, #340]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	431a      	orrs	r2, r3
 8009b06:	4b53      	ldr	r3, [pc, #332]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b08:	789b      	ldrb	r3, [r3, #2]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	4a51      	ldr	r2, [pc, #324]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b10:	78d2      	ldrb	r2, [r2, #3]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	061a      	lsls	r2, r3, #24
 8009b16:	4b4f      	ldr	r3, [pc, #316]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	0619      	lsls	r1, r3, #24
 8009b1c:	4b4d      	ldr	r3, [pc, #308]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	041b      	lsls	r3, r3, #16
 8009b22:	4319      	orrs	r1, r3
 8009b24:	4b4b      	ldr	r3, [pc, #300]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	4949      	ldr	r1, [pc, #292]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b2e:	78c9      	ldrb	r1, [r1, #3]
 8009b30:	430b      	orrs	r3, r1
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	4b46      	ldr	r3, [pc, #280]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	0619      	lsls	r1, r3, #24
 8009b40:	4b44      	ldr	r3, [pc, #272]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	4319      	orrs	r1, r3
 8009b48:	4b42      	ldr	r3, [pc, #264]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b4a:	789b      	ldrb	r3, [r3, #2]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	4940      	ldr	r1, [pc, #256]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b52:	78c9      	ldrb	r1, [r1, #3]
 8009b54:	430b      	orrs	r3, r1
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	4b3d      	ldr	r3, [pc, #244]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	0619      	lsls	r1, r3, #24
 8009b64:	4b3b      	ldr	r3, [pc, #236]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	4b39      	ldr	r3, [pc, #228]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b6e:	789b      	ldrb	r3, [r3, #2]
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	430b      	orrs	r3, r1
 8009b74:	4937      	ldr	r1, [pc, #220]	; (8009c54 <MX_LWIP_Init+0x23c>)
 8009b76:	78c9      	ldrb	r1, [r1, #3]
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	0e1b      	lsrs	r3, r3, #24
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	4a38      	ldr	r2, [pc, #224]	; (8009c60 <MX_LWIP_Init+0x248>)
 8009b80:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009b82:	4b35      	ldr	r3, [pc, #212]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	061a      	lsls	r2, r3, #24
 8009b88:	4b33      	ldr	r3, [pc, #204]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009b8a:	785b      	ldrb	r3, [r3, #1]
 8009b8c:	041b      	lsls	r3, r3, #16
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	4b31      	ldr	r3, [pc, #196]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009b92:	789b      	ldrb	r3, [r3, #2]
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	4313      	orrs	r3, r2
 8009b98:	4a2f      	ldr	r2, [pc, #188]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009b9a:	78d2      	ldrb	r2, [r2, #3]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	061a      	lsls	r2, r3, #24
 8009ba0:	4b2d      	ldr	r3, [pc, #180]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	0619      	lsls	r1, r3, #24
 8009ba6:	4b2c      	ldr	r3, [pc, #176]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	4319      	orrs	r1, r3
 8009bae:	4b2a      	ldr	r3, [pc, #168]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bb0:	789b      	ldrb	r3, [r3, #2]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	4928      	ldr	r1, [pc, #160]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bb8:	78c9      	ldrb	r1, [r1, #3]
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	4b24      	ldr	r3, [pc, #144]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	0619      	lsls	r1, r3, #24
 8009bca:	4b23      	ldr	r3, [pc, #140]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	041b      	lsls	r3, r3, #16
 8009bd0:	4319      	orrs	r1, r3
 8009bd2:	4b21      	ldr	r3, [pc, #132]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bd4:	789b      	ldrb	r3, [r3, #2]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	491f      	ldr	r1, [pc, #124]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bdc:	78c9      	ldrb	r1, [r1, #3]
 8009bde:	430b      	orrs	r3, r1
 8009be0:	0a1b      	lsrs	r3, r3, #8
 8009be2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009be6:	431a      	orrs	r2, r3
 8009be8:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	0619      	lsls	r1, r3, #24
 8009bee:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	4319      	orrs	r1, r3
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009bf8:	789b      	ldrb	r3, [r3, #2]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	4916      	ldr	r1, [pc, #88]	; (8009c58 <MX_LWIP_Init+0x240>)
 8009c00:	78c9      	ldrb	r1, [r1, #3]
 8009c02:	430b      	orrs	r3, r1
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	4313      	orrs	r3, r2
 8009c08:	4a16      	ldr	r2, [pc, #88]	; (8009c64 <MX_LWIP_Init+0x24c>)
 8009c0a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009c0c:	4b16      	ldr	r3, [pc, #88]	; (8009c68 <MX_LWIP_Init+0x250>)
 8009c0e:	9302      	str	r3, [sp, #8]
 8009c10:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <MX_LWIP_Init+0x254>)
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	2300      	movs	r3, #0
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <MX_LWIP_Init+0x24c>)
 8009c1a:	4a11      	ldr	r2, [pc, #68]	; (8009c60 <MX_LWIP_Init+0x248>)
 8009c1c:	490f      	ldr	r1, [pc, #60]	; (8009c5c <MX_LWIP_Init+0x244>)
 8009c1e:	4814      	ldr	r0, [pc, #80]	; (8009c70 <MX_LWIP_Init+0x258>)
 8009c20:	f006 fa2c 	bl	801007c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009c24:	4812      	ldr	r0, [pc, #72]	; (8009c70 <MX_LWIP_Init+0x258>)
 8009c26:	f006 fb09 	bl	801023c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009c2a:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <MX_LWIP_Init+0x258>)
 8009c2c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009c30:	089b      	lsrs	r3, r3, #2
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009c3c:	480c      	ldr	r0, [pc, #48]	; (8009c70 <MX_LWIP_Init+0x258>)
 8009c3e:	f006 fb0d 	bl	801025c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009c42:	e002      	b.n	8009c4a <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8009c44:	480a      	ldr	r0, [pc, #40]	; (8009c70 <MX_LWIP_Init+0x258>)
 8009c46:	f006 fb4d 	bl	80102e4 <netif_set_down>
}
 8009c4a:	bf00      	nop
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	2000cf2c 	.word	0x2000cf2c
 8009c54:	2000cf28 	.word	0x2000cf28
 8009c58:	2000cef0 	.word	0x2000cef0
 8009c5c:	2000cf24 	.word	0x2000cf24
 8009c60:	2000cf30 	.word	0x2000cf30
 8009c64:	2000cf34 	.word	0x2000cf34
 8009c68:	0800f57d 	.word	0x0800f57d
 8009c6c:	0800a2f9 	.word	0x0800a2f9
 8009c70:	2000cef4 	.word	0x2000cef4

08009c74 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009c86:	2320      	movs	r3, #32
 8009c88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c8a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009c8e:	e00b      	b.n	8009ca8 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009c90:	4a0c      	ldr	r2, [pc, #48]	; (8009cc4 <SCB_InvalidateDCache_by_Addr+0x50>)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dcf0      	bgt.n	8009c90 <SCB_InvalidateDCache_by_Addr+0x1c>
 8009cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cb2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	e000ed00 	.word	0xe000ed00

08009cc8 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	; 0x38
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	605a      	str	r2, [r3, #4]
 8009cda:	609a      	str	r2, [r3, #8]
 8009cdc:	60da      	str	r2, [r3, #12]
 8009cde:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a5d      	ldr	r2, [pc, #372]	; (8009e5c <HAL_ETH_MspInit+0x194>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	f040 80b3 	bne.w	8009e52 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009cec:	4b5c      	ldr	r3, [pc, #368]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cf2:	4a5b      	ldr	r2, [pc, #364]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009cfc:	4b58      	ldr	r3, [pc, #352]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d06:	623b      	str	r3, [r7, #32]
 8009d08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009d0a:	4b55      	ldr	r3, [pc, #340]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d10:	4a53      	ldr	r2, [pc, #332]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009d1a:	4b51      	ldr	r3, [pc, #324]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d24:	61fb      	str	r3, [r7, #28]
 8009d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009d28:	4b4d      	ldr	r3, [pc, #308]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d2e:	4a4c      	ldr	r2, [pc, #304]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009d38:	4b49      	ldr	r3, [pc, #292]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d42:	61bb      	str	r3, [r7, #24]
 8009d44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d46:	4b46      	ldr	r3, [pc, #280]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d4c:	4a44      	ldr	r2, [pc, #272]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d4e:	f043 0304 	orr.w	r3, r3, #4
 8009d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d56:	4b42      	ldr	r3, [pc, #264]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d64:	4b3e      	ldr	r3, [pc, #248]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6a:	4a3d      	ldr	r2, [pc, #244]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d74:	4b3a      	ldr	r3, [pc, #232]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d82:	4b37      	ldr	r3, [pc, #220]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d88:	4a35      	ldr	r2, [pc, #212]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d8a:	f043 0302 	orr.w	r3, r3, #2
 8009d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d92:	4b33      	ldr	r3, [pc, #204]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009da0:	4b2f      	ldr	r3, [pc, #188]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009da6:	4a2e      	ldr	r2, [pc, #184]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009db0:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <HAL_ETH_MspInit+0x198>)
 8009db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	60bb      	str	r3, [r7, #8]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009dbe:	2332      	movs	r3, #50	; 0x32
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dce:	230b      	movs	r3, #11
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4822      	ldr	r0, [pc, #136]	; (8009e64 <HAL_ETH_MspInit+0x19c>)
 8009dda:	f7f9 fdd3 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009dde:	2386      	movs	r3, #134	; 0x86
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de2:	2302      	movs	r3, #2
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dea:	2300      	movs	r3, #0
 8009dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dee:	230b      	movs	r3, #11
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009df6:	4619      	mov	r1, r3
 8009df8:	481b      	ldr	r0, [pc, #108]	; (8009e68 <HAL_ETH_MspInit+0x1a0>)
 8009dfa:	f7f9 fdc3 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e04:	2302      	movs	r3, #2
 8009e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e10:	230b      	movs	r3, #11
 8009e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4814      	ldr	r0, [pc, #80]	; (8009e6c <HAL_ETH_MspInit+0x1a4>)
 8009e1c:	f7f9 fdb2 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009e20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e26:	2302      	movs	r3, #2
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e32:	230b      	movs	r3, #11
 8009e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	480c      	ldr	r0, [pc, #48]	; (8009e70 <HAL_ETH_MspInit+0x1a8>)
 8009e3e:	f7f9 fda1 	bl	8003984 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2105      	movs	r1, #5
 8009e46:	203d      	movs	r0, #61	; 0x3d
 8009e48:	f7f7 fed0 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009e4c:	203d      	movs	r0, #61	; 0x3d
 8009e4e:	f7f7 fee7 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009e52:	bf00      	nop
 8009e54:	3738      	adds	r7, #56	; 0x38
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40028000 	.word	0x40028000
 8009e60:	58024400 	.word	0x58024400
 8009e64:	58020800 	.word	0x58020800
 8009e68:	58020000 	.word	0x58020000
 8009e6c:	58020400 	.word	0x58020400
 8009e70:	58021800 	.word	0x58021800

08009e74 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <HAL_ETH_RxCpltCallback+0x1c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fc93 	bl	800a7ac <osSemaphoreRelease>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000030c 	.word	0x2000030c

08009e94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009e94:	b5b0      	push	{r4, r5, r7, lr}
 8009e96:	b0ac      	sub	sp, #176	; 0xb0
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009ea8:	4b90      	ldr	r3, [pc, #576]	; (800a0ec <low_level_init+0x258>)
 8009eaa:	4a91      	ldr	r2, [pc, #580]	; (800a0f0 <low_level_init+0x25c>)
 8009eac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009eba:	23e1      	movs	r3, #225	; 0xe1
 8009ebc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009ed2:	4a86      	ldr	r2, [pc, #536]	; (800a0ec <low_level_init+0x258>)
 8009ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ed8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009eda:	4b84      	ldr	r3, [pc, #528]	; (800a0ec <low_level_init+0x258>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009ee0:	4b82      	ldr	r3, [pc, #520]	; (800a0ec <low_level_init+0x258>)
 8009ee2:	4a84      	ldr	r2, [pc, #528]	; (800a0f4 <low_level_init+0x260>)
 8009ee4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009ee6:	4b81      	ldr	r3, [pc, #516]	; (800a0ec <low_level_init+0x258>)
 8009ee8:	4a83      	ldr	r2, [pc, #524]	; (800a0f8 <low_level_init+0x264>)
 8009eea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8009eec:	4b7f      	ldr	r3, [pc, #508]	; (800a0ec <low_level_init+0x258>)
 8009eee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009ef2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009ef4:	487d      	ldr	r0, [pc, #500]	; (800a0ec <low_level_init+0x258>)
 8009ef6:	f7f7 ff2d 	bl	8001d54 <HAL_ETH_Init>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009f00:	2234      	movs	r2, #52	; 0x34
 8009f02:	2100      	movs	r1, #0
 8009f04:	487d      	ldr	r0, [pc, #500]	; (800a0fc <low_level_init+0x268>)
 8009f06:	f00f faf3 	bl	80194f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009f0a:	4b7c      	ldr	r3, [pc, #496]	; (800a0fc <low_level_init+0x268>)
 8009f0c:	2221      	movs	r2, #33	; 0x21
 8009f0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009f10:	4b7a      	ldr	r3, [pc, #488]	; (800a0fc <low_level_init+0x268>)
 8009f12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009f16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009f18:	4b78      	ldr	r3, [pc, #480]	; (800a0fc <low_level_init+0x268>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009f1e:	4878      	ldr	r0, [pc, #480]	; (800a100 <low_level_init+0x26c>)
 8009f20:	f005 ff66 	bl	800fdf0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2206      	movs	r2, #6
 8009f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009f2c:	4b6f      	ldr	r3, [pc, #444]	; (800a0ec <low_level_init+0x258>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009f38:	4b6c      	ldr	r3, [pc, #432]	; (800a0ec <low_level_init+0x258>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	785a      	ldrb	r2, [r3, #1]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009f44:	4b69      	ldr	r3, [pc, #420]	; (800a0ec <low_level_init+0x258>)
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	789a      	ldrb	r2, [r3, #2]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009f50:	4b66      	ldr	r3, [pc, #408]	; (800a0ec <low_level_init+0x258>)
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	78da      	ldrb	r2, [r3, #3]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009f5c:	4b63      	ldr	r3, [pc, #396]	; (800a0ec <low_level_init+0x258>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	791a      	ldrb	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009f68:	4b60      	ldr	r3, [pc, #384]	; (800a0ec <low_level_init+0x258>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	795a      	ldrb	r2, [r3, #5]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009f7a:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009f82:	f043 030a 	orr.w	r3, r3, #10
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f94:	e012      	b.n	8009fbc <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009f96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	025b      	lsls	r3, r3, #9
 8009fa2:	4a58      	ldr	r2, [pc, #352]	; (800a104 <low_level_init+0x270>)
 8009fa4:	441a      	add	r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009fac:	484f      	ldr	r0, [pc, #316]	; (800a0ec <low_level_init+0x258>)
 8009fae:	f7f7 ffab 	bl	8001f08 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d9e8      	bls.n	8009f96 <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fc8:	2300      	movs	r3, #0
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fb68 	bl	800a6a8 <osSemaphoreCreate>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4b4b      	ldr	r3, [pc, #300]	; (800a108 <low_level_init+0x274>)
 8009fdc:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009fde:	4b4b      	ldr	r3, [pc, #300]	; (800a10c <low_level_init+0x278>)
 8009fe0:	f107 040c 	add.w	r4, r7, #12
 8009fe4:	461d      	mov	r5, r3
 8009fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009ff2:	f107 030c 	add.w	r3, r7, #12
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fa59 	bl	800a4b0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009ffe:	4944      	ldr	r1, [pc, #272]	; (800a110 <low_level_init+0x27c>)
 800a000:	4844      	ldr	r0, [pc, #272]	; (800a114 <low_level_init+0x280>)
 800a002:	f7f7 fb3c 	bl	800167e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a006:	4843      	ldr	r0, [pc, #268]	; (800a114 <low_level_init+0x280>)
 800a008:	f7f7 fb6b 	bl	80016e2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a00c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d164      	bne.n	800a0de <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a014:	483f      	ldr	r0, [pc, #252]	; (800a114 <low_level_init+0x280>)
 800a016:	f7f7 fc0c 	bl	8001832 <LAN8742_GetLinkState>
 800a01a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a01e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a022:	2b01      	cmp	r3, #1
 800a024:	dc06      	bgt.n	800a034 <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f006 f9a1 	bl	801036e <netif_set_link_down>
      netif_set_down(netif);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f006 f959 	bl	80102e4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800a032:	e056      	b.n	800a0e2 <low_level_init+0x24e>
      switch (PHYLinkState)
 800a034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a038:	3b02      	subs	r3, #2
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d82a      	bhi.n	800a094 <low_level_init+0x200>
 800a03e:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <low_level_init+0x1b0>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a055 	.word	0x0800a055
 800a048:	0800a067 	.word	0x0800a067
 800a04c:	0800a077 	.word	0x0800a077
 800a050:	0800a087 	.word	0x0800a087
        duplex = ETH_FULLDUPLEX_MODE;
 800a054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a05c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a064:	e01f      	b.n	800a0a6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a066:	2300      	movs	r3, #0
 800a068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a06c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a074:	e017      	b.n	800a0a6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a07a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a07e:	2300      	movs	r3, #0
 800a080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a084:	e00f      	b.n	800a0a6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a086:	2300      	movs	r3, #0
 800a088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a08c:	2300      	movs	r3, #0
 800a08e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a092:	e008      	b.n	800a0a6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a09c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800a0a4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800a0a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	480f      	ldr	r0, [pc, #60]	; (800a0ec <low_level_init+0x258>)
 800a0ae:	f7f8 fc93 	bl	80029d8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a0b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0b6:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a0b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a0be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4809      	ldr	r0, [pc, #36]	; (800a0ec <low_level_init+0x258>)
 800a0c6:	f7f8 fe5b 	bl	8002d80 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a0ca:	4808      	ldr	r0, [pc, #32]	; (800a0ec <low_level_init+0x258>)
 800a0cc:	f7f7 ff5d 	bl	8001f8a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f006 f8c3 	bl	801025c <netif_set_up>
    netif_set_link_up(netif);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f006 f926 	bl	8010328 <netif_set_link_up>
}
 800a0dc:	e001      	b.n	800a0e2 <low_level_init+0x24e>
    Error_Handler();
 800a0de:	f7f7 f839 	bl	8001154 <Error_Handler>
}
 800a0e2:	bf00      	nop
 800a0e4:	37b0      	adds	r7, #176	; 0xb0
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000d024 	.word	0x2000d024
 800a0f0:	40028000 	.word	0x40028000
 800a0f4:	30040060 	.word	0x30040060
 800a0f8:	30040000 	.word	0x30040000
 800a0fc:	2000d094 	.word	0x2000d094
 800a100:	0801d090 	.word	0x0801d090
 800a104:	30040200 	.word	0x30040200
 800a108:	2000030c 	.word	0x2000030c
 800a10c:	0801a6f0 	.word	0x0801a6f0
 800a110:	20000010 	.word	0x20000010
 800a114:	2000d004 	.word	0x2000d004

0800a118 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b092      	sub	sp, #72	; 0x48
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	647b      	str	r3, [r7, #68]	; 0x44
 800a126:	2300      	movs	r3, #0
 800a128:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	2230      	movs	r2, #48	; 0x30
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f00f f9d9 	bl	80194f0 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a142:	e04f      	b.n	800a1e4 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800a144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a146:	2b03      	cmp	r3, #3
 800a148:	d902      	bls.n	800a150 <low_level_output+0x38>
      return ERR_IF;
 800a14a:	f06f 030b 	mvn.w	r3, #11
 800a14e:	e05a      	b.n	800a206 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a156:	4613      	mov	r3, r2
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a162:	4413      	add	r3, r2
 800a164:	3b40      	subs	r3, #64	; 0x40
 800a166:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16a:	895b      	ldrh	r3, [r3, #10]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a17c:	4413      	add	r3, r2
 800a17e:	3b3c      	subs	r3, #60	; 0x3c
 800a180:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800a182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a184:	895b      	ldrh	r3, [r3, #10]
 800a186:	461a      	mov	r2, r3
 800a188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18a:	4413      	add	r3, r2
 800a18c:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800a18e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a190:	2b00      	cmp	r3, #0
 800a192:	d012      	beq.n	800a1ba <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a196:	1e5a      	subs	r2, r3, #1
 800a198:	f107 0008 	add.w	r0, r7, #8
 800a19c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a19e:	460b      	mov	r3, r1
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	440b      	add	r3, r1
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	18c1      	adds	r1, r0, r3
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3b38      	subs	r3, #56	; 0x38
 800a1b8:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800a1c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3b38      	subs	r3, #56	; 0x38
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800a1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1da:	3301      	adds	r3, #1
 800a1dc:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1ac      	bne.n	800a144 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800a1ea:	4a09      	ldr	r2, [pc, #36]	; (800a210 <low_level_output+0xf8>)
 800a1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ee:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a1f0:	4a07      	ldr	r2, [pc, #28]	; (800a210 <low_level_output+0xf8>)
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a1f8:	2214      	movs	r2, #20
 800a1fa:	4905      	ldr	r1, [pc, #20]	; (800a210 <low_level_output+0xf8>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <low_level_output+0xfc>)
 800a1fe:	f7f7 ff5a 	bl	80020b6 <HAL_ETH_Transmit>
  
  return errval;
 800a202:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a206:	4618      	mov	r0, r3
 800a208:	3748      	adds	r7, #72	; 0x48
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	2000d094 	.word	0x2000d094
 800a214:	2000d024 	.word	0x2000d024

0800a218 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	; 0x28
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a220:	2300      	movs	r3, #0
 800a222:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800a228:	f107 030c 	add.w	r3, r7, #12
 800a22c:	4619      	mov	r1, r3
 800a22e:	4817      	ldr	r0, [pc, #92]	; (800a28c <low_level_input+0x74>)
 800a230:	f7f8 f8ab 	bl	800238a <HAL_ETH_GetRxDataBuffer>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d122      	bne.n	800a280 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	4619      	mov	r1, r3
 800a240:	4812      	ldr	r0, [pc, #72]	; (800a28c <low_level_input+0x74>)
 800a242:	f7f8 f940 	bl	80024c6 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a246:	4811      	ldr	r0, [pc, #68]	; (800a28c <low_level_input+0x74>)
 800a248:	f7f8 f970 	bl	800252c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fd0e 	bl	8009c74 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a258:	480d      	ldr	r0, [pc, #52]	; (800a290 <low_level_input+0x78>)
 800a25a:	f005 fe45 	bl	800fee8 <memp_malloc_pool>
 800a25e:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	4a0c      	ldr	r2, [pc, #48]	; (800a294 <low_level_input+0x7c>)
 800a264:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	b299      	uxth	r1, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a270:	9201      	str	r2, [sp, #4]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2202      	movs	r2, #2
 800a278:	2004      	movs	r0, #4
 800a27a:	f006 fa87 	bl	801078c <pbuf_alloced_custom>
 800a27e:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	2000d024 	.word	0x2000d024
 800a290:	0801d090 	.word	0x0801d090
 800a294:	0800a355 	.word	0x0800a355

0800a298 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <ethernetif_input+0x58>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fa2f 	bl	800a710 <osSemaphoreWait>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1f5      	bne.n	800a2a4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a2b8:	480e      	ldr	r0, [pc, #56]	; (800a2f4 <ethernetif_input+0x5c>)
 800a2ba:	f00f f87b 	bl	80193b4 <sys_mutex_lock>
        p = low_level_input( netif );
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff ffaa 	bl	800a218 <low_level_input>
 800a2c4:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00a      	beq.n	800a2e2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	68f9      	ldr	r1, [r7, #12]
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f006 fc33 	bl	8010b48 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a2e2:	4804      	ldr	r0, [pc, #16]	; (800a2f4 <ethernetif_input+0x5c>)
 800a2e4:	f00f f875 	bl	80193d2 <sys_mutex_unlock>
      } while(p!=NULL);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e4      	bne.n	800a2b8 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a2ee:	e7d9      	b.n	800a2a4 <ethernetif_input+0xc>
 800a2f0:	2000030c 	.word	0x2000030c
 800a2f4:	2000d10c 	.word	0x2000d10c

0800a2f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <ethernetif_init+0x1c>
 800a306:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <ethernetif_init+0x48>)
 800a308:	f240 2241 	movw	r2, #577	; 0x241
 800a30c:	490d      	ldr	r1, [pc, #52]	; (800a344 <ethernetif_init+0x4c>)
 800a30e:	480e      	ldr	r0, [pc, #56]	; (800a348 <ethernetif_init+0x50>)
 800a310:	f00f f8f6 	bl	8019500 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2273      	movs	r2, #115	; 0x73
 800a318:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2274      	movs	r2, #116	; 0x74
 800a320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a09      	ldr	r2, [pc, #36]	; (800a34c <ethernetif_init+0x54>)
 800a328:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a08      	ldr	r2, [pc, #32]	; (800a350 <ethernetif_init+0x58>)
 800a32e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fdaf 	bl	8009e94 <low_level_init>

  return ERR_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	0801a70c 	.word	0x0801a70c
 800a344:	0801a728 	.word	0x0801a728
 800a348:	0801a738 	.word	0x0801a738
 800a34c:	080174b1 	.word	0x080174b1
 800a350:	0800a119 	.word	0x0800a119

0800a354 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7ff fc82 	bl	8009c74 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	4803      	ldr	r0, [pc, #12]	; (800a380 <pbuf_free_custom+0x2c>)
 800a374:	f005 fe2c 	bl	800ffd0 <memp_free_pool>
}
 800a378:	bf00      	nop
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	0801d090 	.word	0x0801d090

0800a384 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a388:	f7f7 fb2a 	bl	80019e0 <HAL_GetTick>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a398:	4802      	ldr	r0, [pc, #8]	; (800a3a4 <ETH_PHY_IO_Init+0x10>)
 800a39a:	f7f8 fd0b 	bl	8002db4 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	2000d024 	.word	0x2000d024

0800a3a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	af00      	add	r7, sp, #0
  return 0;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	68f9      	ldr	r1, [r7, #12]
 800a3ca:	4807      	ldr	r0, [pc, #28]	; (800a3e8 <ETH_PHY_IO_ReadReg+0x30>)
 800a3cc:	f7f8 fa5c 	bl	8002888 <HAL_ETH_ReadPHYRegister>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	e000      	b.n	800a3de <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	2000d024 	.word	0x2000d024

0800a3ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	4807      	ldr	r0, [pc, #28]	; (800a41c <ETH_PHY_IO_WriteReg+0x30>)
 800a400:	f7f8 fa96 	bl	8002930 <HAL_ETH_WritePHYRegister>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a40a:	f04f 33ff 	mov.w	r3, #4294967295
 800a40e:	e000      	b.n	800a412 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	2000d024 	.word	0x2000d024

0800a420 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a424:	f7f7 fadc 	bl	80019e0 <HAL_GetTick>
 800a428:	4603      	mov	r3, r0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	4603      	mov	r3, r0
 800a436:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a438:	2300      	movs	r3, #0
 800a43a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a43c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a440:	2b84      	cmp	r3, #132	; 0x84
 800a442:	d005      	beq.n	800a450 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a444:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	3303      	adds	r3, #3
 800a44e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a450:	68fb      	ldr	r3, [r7, #12]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a464:	f3ef 8305 	mrs	r3, IPSR
 800a468:	607b      	str	r3, [r7, #4]
  return(result);
 800a46a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf14      	ite	ne
 800a470:	2301      	movne	r3, #1
 800a472:	2300      	moveq	r3, #0
 800a474:	b2db      	uxtb	r3, r3
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a486:	f001 fd07 	bl	800be98 <vTaskStartScheduler>
  
  return osOK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a494:	f7ff ffe3 	bl	800a45e <inHandlerMode>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a49e:	f001 fe13 	bl	800c0c8 <xTaskGetTickCountFromISR>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	e002      	b.n	800a4ac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a4a6:	f001 fdff 	bl	800c0a8 <xTaskGetTickCount>
 800a4aa:	4603      	mov	r3, r0
  }
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b2:	b089      	sub	sp, #36	; 0x24
 800a4b4:	af04      	add	r7, sp, #16
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d020      	beq.n	800a504 <osThreadCreate+0x54>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d01c      	beq.n	800a504 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685c      	ldr	r4, [r3, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691e      	ldr	r6, [r3, #16]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7ff ffa6 	bl	800a42e <makeFreeRtosPriority>
 800a4e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4ec:	9202      	str	r2, [sp, #8]
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	9100      	str	r1, [sp, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f001 fb09 	bl	800bb10 <xTaskCreateStatic>
 800a4fe:	4603      	mov	r3, r0
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e01c      	b.n	800a53e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685c      	ldr	r4, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a510:	b29e      	uxth	r6, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff ff88 	bl	800a42e <makeFreeRtosPriority>
 800a51e:	4602      	mov	r2, r0
 800a520:	f107 030c 	add.w	r3, r7, #12
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	9200      	str	r2, [sp, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	4632      	mov	r2, r6
 800a52c:	4629      	mov	r1, r5
 800a52e:	4620      	mov	r0, r4
 800a530:	f001 fb48 	bl	800bbc4 <xTaskCreate>
 800a534:	4603      	mov	r3, r0
 800a536:	2b01      	cmp	r3, #1
 800a538:	d001      	beq.n	800a53e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e000      	b.n	800a540 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a53e:	68fb      	ldr	r3, [r7, #12]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a548 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <osDelay+0x16>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	e000      	b.n	800a560 <osDelay+0x18>
 800a55e:	2301      	movs	r3, #1
 800a560:	4618      	mov	r0, r3
 800a562:	f001 fc65 	bl	800be30 <vTaskDelay>
  
  return osOK;
 800a566:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4619      	mov	r1, r3
 800a586:	2001      	movs	r0, #1
 800a588:	f000 fc7f 	bl	800ae8a <xQueueCreateMutexStatic>
 800a58c:	4603      	mov	r3, r0
 800a58e:	e003      	b.n	800a598 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a590:	2001      	movs	r0, #1
 800a592:	f000 fc62 	bl	800ae5a <xQueueCreateMutex>
 800a596:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <osMutexWait+0x18>
    return osErrorParameter;
 800a5b4:	2380      	movs	r3, #128	; 0x80
 800a5b6:	e03a      	b.n	800a62e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c2:	d103      	bne.n	800a5cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e009      	b.n	800a5e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d006      	beq.n	800a5e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <osMutexWait+0x40>
      ticks = 1;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a5e0:	f7ff ff3d 	bl	800a45e <inHandlerMode>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f860 	bl	800b6b8 <xQueueReceiveFromISR>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d001      	beq.n	800a602 <osMutexWait+0x62>
      return osErrorOS;
 800a5fe:	23ff      	movs	r3, #255	; 0xff
 800a600:	e015      	b.n	800a62e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d011      	beq.n	800a62c <osMutexWait+0x8c>
 800a608:	4b0b      	ldr	r3, [pc, #44]	; (800a638 <osMutexWait+0x98>)
 800a60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	e008      	b.n	800a62c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 ff43 	bl	800b4a8 <xQueueSemaphoreTake>
 800a622:	4603      	mov	r3, r0
 800a624:	2b01      	cmp	r3, #1
 800a626:	d001      	beq.n	800a62c <osMutexWait+0x8c>
    return osErrorOS;
 800a628:	23ff      	movs	r3, #255	; 0xff
 800a62a:	e000      	b.n	800a62e <osMutexWait+0x8e>
  }
  
  return osOK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	e000ed04 	.word	0xe000ed04

0800a63c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a64c:	f7ff ff07 	bl	800a45e <inHandlerMode>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d016      	beq.n	800a684 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fdbd 	bl	800b1dc <xQueueGiveFromISR>
 800a662:	4603      	mov	r3, r0
 800a664:	2b01      	cmp	r3, #1
 800a666:	d001      	beq.n	800a66c <osMutexRelease+0x30>
      return osErrorOS;
 800a668:	23ff      	movs	r3, #255	; 0xff
 800a66a:	e017      	b.n	800a69c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d013      	beq.n	800a69a <osMutexRelease+0x5e>
 800a672:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <osMutexRelease+0x68>)
 800a674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	e00a      	b.n	800a69a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a684:	2300      	movs	r3, #0
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fc18 	bl	800aec0 <xQueueGenericSend>
 800a690:	4603      	mov	r3, r0
 800a692:	2b01      	cmp	r3, #1
 800a694:	d001      	beq.n	800a69a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a696:	23ff      	movs	r3, #255	; 0xff
 800a698:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a69a:	68fb      	ldr	r3, [r7, #12]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	e000ed04 	.word	0xe000ed04

0800a6a8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d010      	beq.n	800a6dc <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d10b      	bne.n	800a6d8 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	f000 fad8 	bl	800ac84 <xQueueGenericCreateStatic>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	e016      	b.n	800a706 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e014      	b.n	800a706 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d110      	bne.n	800a704 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	f000 fb3f 	bl	800ad6a <xQueueGenericCreate>
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d005      	beq.n	800a700 <osSemaphoreCreate+0x58>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fbe0 	bl	800aec0 <xQueueGenericSend>
      return sema;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	e000      	b.n	800a706 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a704:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a71a:	2300      	movs	r3, #0
 800a71c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a724:	2380      	movs	r3, #128	; 0x80
 800a726:	e03a      	b.n	800a79e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d103      	bne.n	800a73c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a734:	f04f 33ff 	mov.w	r3, #4294967295
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	e009      	b.n	800a750 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <osSemaphoreWait+0x40>
      ticks = 1;
 800a74c:	2301      	movs	r3, #1
 800a74e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a750:	f7ff fe85 	bl	800a45e <inHandlerMode>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d017      	beq.n	800a78a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	461a      	mov	r2, r3
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 ffa8 	bl	800b6b8 <xQueueReceiveFromISR>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d001      	beq.n	800a772 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a76e:	23ff      	movs	r3, #255	; 0xff
 800a770:	e015      	b.n	800a79e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d011      	beq.n	800a79c <osSemaphoreWait+0x8c>
 800a778:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <osSemaphoreWait+0x98>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	e008      	b.n	800a79c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a78a:	68f9      	ldr	r1, [r7, #12]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fe8b 	bl	800b4a8 <xQueueSemaphoreTake>
 800a792:	4603      	mov	r3, r0
 800a794:	2b01      	cmp	r3, #1
 800a796:	d001      	beq.n	800a79c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a798:	23ff      	movs	r3, #255	; 0xff
 800a79a:	e000      	b.n	800a79e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a7bc:	f7ff fe4f 	bl	800a45e <inHandlerMode>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d016      	beq.n	800a7f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fd05 	bl	800b1dc <xQueueGiveFromISR>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d001      	beq.n	800a7dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a7d8:	23ff      	movs	r3, #255	; 0xff
 800a7da:	e017      	b.n	800a80c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d013      	beq.n	800a80a <osSemaphoreRelease+0x5e>
 800a7e2:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <osSemaphoreRelease+0x68>)
 800a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	e00a      	b.n	800a80a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fb60 	bl	800aec0 <xQueueGenericSend>
 800a800:	4603      	mov	r3, r0
 800a802:	2b01      	cmp	r3, #1
 800a804:	d001      	beq.n	800a80a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a806:	23ff      	movs	r3, #255	; 0xff
 800a808:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a80a:	68fb      	ldr	r3, [r7, #12]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a820:	f7ff fe1d 	bl	800a45e <inHandlerMode>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a82a:	2382      	movs	r3, #130	; 0x82
 800a82c:	e003      	b.n	800a836 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fff9 	bl	800b826 <vQueueDelete>

  return osOK; 
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a83e:	b590      	push	{r4, r7, lr}
 800a840:	b085      	sub	sp, #20
 800a842:	af02      	add	r7, sp, #8
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d012      	beq.n	800a876 <osMessageCreate+0x38>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00e      	beq.n	800a876 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6859      	ldr	r1, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68dc      	ldr	r4, [r3, #12]
 800a868:	2300      	movs	r3, #0
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4623      	mov	r3, r4
 800a86e:	f000 fa09 	bl	800ac84 <xQueueGenericCreateStatic>
 800a872:	4603      	mov	r3, r0
 800a874:	e008      	b.n	800a888 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	4619      	mov	r1, r3
 800a882:	f000 fa72 	bl	800ad6a <xQueueGenericCreate>
 800a886:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd90      	pop	{r4, r7, pc}

0800a890 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <osMessagePut+0x1e>
    ticks = 1;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a8ae:	f7ff fdd6 	bl	800a45e <inHandlerMode>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d018      	beq.n	800a8ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a8b8:	f107 0210 	add.w	r2, r7, #16
 800a8bc:	f107 0108 	add.w	r1, r7, #8
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fbf6 	bl	800b0b4 <xQueueGenericSendFromISR>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d001      	beq.n	800a8d2 <osMessagePut+0x42>
      return osErrorOS;
 800a8ce:	23ff      	movs	r3, #255	; 0xff
 800a8d0:	e018      	b.n	800a904 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d014      	beq.n	800a902 <osMessagePut+0x72>
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <osMessagePut+0x7c>)
 800a8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	e00b      	b.n	800a902 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a8ea:	f107 0108 	add.w	r1, r7, #8
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fae4 	bl	800aec0 <xQueueGenericSend>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d001      	beq.n	800a902 <osMessagePut+0x72>
      return osErrorOS;
 800a8fe:	23ff      	movs	r3, #255	; 0xff
 800a900:	e000      	b.n	800a904 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a910:	b590      	push	{r4, r7, lr}
 800a912:	b08b      	sub	sp, #44	; 0x2c
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a92a:	2380      	movs	r3, #128	; 0x80
 800a92c:	617b      	str	r3, [r7, #20]
    return event;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	461c      	mov	r4, r3
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a93a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a93e:	e054      	b.n	800a9ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94e:	d103      	bne.n	800a958 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a950:	f04f 33ff 	mov.w	r3, #4294967295
 800a954:	627b      	str	r3, [r7, #36]	; 0x24
 800a956:	e009      	b.n	800a96c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <osMessageGet+0x5c>
      ticks = 1;
 800a968:	2301      	movs	r3, #1
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a96c:	f7ff fd77 	bl	800a45e <inHandlerMode>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01c      	beq.n	800a9b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a976:	f107 0220 	add.w	r2, r7, #32
 800a97a:	f107 0314 	add.w	r3, r7, #20
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	68b8      	ldr	r0, [r7, #8]
 800a984:	f000 fe98 	bl	800b6b8 <xQueueReceiveFromISR>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d102      	bne.n	800a994 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a98e:	2310      	movs	r3, #16
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	e001      	b.n	800a998 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a994:	2300      	movs	r3, #0
 800a996:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d01d      	beq.n	800a9da <osMessageGet+0xca>
 800a99e:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <osMessageGet+0xe4>)
 800a9a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	e014      	b.n	800a9da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a9b0:	f107 0314 	add.w	r3, r7, #20
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	68b8      	ldr	r0, [r7, #8]
 800a9bc:	f000 fc98 	bl	800b2f0 <xQueueReceive>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d102      	bne.n	800a9cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a9c6:	2310      	movs	r3, #16
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	e006      	b.n	800a9da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <osMessageGet+0xc6>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e000      	b.n	800a9d8 <osMessageGet+0xc8>
 800a9d6:	2340      	movs	r3, #64	; 0x40
 800a9d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	461c      	mov	r4, r3
 800a9de:	f107 0314 	add.w	r3, r7, #20
 800a9e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	372c      	adds	r7, #44	; 0x2c
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd90      	pop	{r4, r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	e000ed04 	.word	0xe000ed04

0800a9f8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aa00:	f7ff fd2d 	bl	800a45e <inHandlerMode>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 feee 	bl	800b7ec <uxQueueMessagesWaitingFromISR>
 800aa10:	4603      	mov	r3, r0
 800aa12:	e003      	b.n	800aa1c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fecc 	bl	800b7b2 <uxQueueMessagesWaiting>
 800aa1a:	4603      	mov	r3, r0
  }
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aa2c:	f7ff fd17 	bl	800a45e <inHandlerMode>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <osMessageDelete+0x16>
    return osErrorISR;
 800aa36:	2382      	movs	r3, #130	; 0x82
 800aa38:	e003      	b.n	800aa42 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fef3 	bl	800b826 <vQueueDelete>

  return osOK; 
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f103 0208 	add.w	r2, r3, #8
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 0208 	add.w	r2, r3, #8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f103 0208 	add.w	r2, r3, #8
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa7e:	bf00      	nop
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b083      	sub	sp, #12
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
}
 800aae0:	bf00      	nop
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab02:	d103      	bne.n	800ab0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	e00c      	b.n	800ab26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e002      	b.n	800ab1a <vListInsert+0x2e>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d2f6      	bcs.n	800ab14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6892      	ldr	r2, [r2, #8]
 800ab74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6852      	ldr	r2, [r2, #4]
 800ab7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d103      	bne.n	800ab92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
	...

0800abb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d109      	bne.n	800abdc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	60bb      	str	r3, [r7, #8]
 800abda:	e7fe      	b.n	800abda <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800abdc:	f002 f8ce 	bl	800cd7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe8:	68f9      	ldr	r1, [r7, #12]
 800abea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abec:	fb01 f303 	mul.w	r3, r1, r3
 800abf0:	441a      	add	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	68f9      	ldr	r1, [r7, #12]
 800ac10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac12:	fb01 f303 	mul.w	r3, r1, r3
 800ac16:	441a      	add	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	22ff      	movs	r2, #255	; 0xff
 800ac20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	22ff      	movs	r2, #255	; 0xff
 800ac28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d114      	bne.n	800ac5c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d01a      	beq.n	800ac70 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3310      	adds	r3, #16
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 fb8a 	bl	800c358 <xTaskRemoveFromEventList>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d012      	beq.n	800ac70 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <xQueueGenericReset+0xcc>)
 800ac4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	e009      	b.n	800ac70 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3310      	adds	r3, #16
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fef2 	bl	800aa4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3324      	adds	r3, #36	; 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff feed 	bl	800aa4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac70:	f002 f8b2 	bl	800cdd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac74:	2301      	movs	r3, #1
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08e      	sub	sp, #56	; 0x38
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d109      	bne.n	800acac <xQueueGenericCreateStatic+0x28>
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acaa:	e7fe      	b.n	800acaa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <xQueueGenericCreateStatic+0x42>
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	627b      	str	r3, [r7, #36]	; 0x24
 800acc4:	e7fe      	b.n	800acc4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <xQueueGenericCreateStatic+0x4e>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <xQueueGenericCreateStatic+0x52>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <xQueueGenericCreateStatic+0x54>
 800acd6:	2300      	movs	r3, #0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <xQueueGenericCreateStatic+0x6c>
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	623b      	str	r3, [r7, #32]
 800acee:	e7fe      	b.n	800acee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <xQueueGenericCreateStatic+0x78>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <xQueueGenericCreateStatic+0x7c>
 800acfc:	2301      	movs	r3, #1
 800acfe:	e000      	b.n	800ad02 <xQueueGenericCreateStatic+0x7e>
 800ad00:	2300      	movs	r3, #0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d109      	bne.n	800ad1a <xQueueGenericCreateStatic+0x96>
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	e7fe      	b.n	800ad18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad1a:	2348      	movs	r3, #72	; 0x48
 800ad1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b48      	cmp	r3, #72	; 0x48
 800ad22:	d009      	beq.n	800ad38 <xQueueGenericCreateStatic+0xb4>
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	e7fe      	b.n	800ad36 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4613      	mov	r3, r2
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 f844 	bl	800ade8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3730      	adds	r7, #48	; 0x30
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b08a      	sub	sp, #40	; 0x28
 800ad6e:	af02      	add	r7, sp, #8
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	4613      	mov	r3, r2
 800ad76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d109      	bne.n	800ad92 <xQueueGenericCreate+0x28>
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	e7fe      	b.n	800ad90 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	e004      	b.n	800ada8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	3348      	adds	r3, #72	; 0x48
 800adac:	4618      	mov	r0, r3
 800adae:	f002 f8ff 	bl	800cfb0 <pvPortMalloc>
 800adb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d011      	beq.n	800adde <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	3348      	adds	r3, #72	; 0x48
 800adc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adcc:	79fa      	ldrb	r2, [r7, #7]
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4613      	mov	r3, r2
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f805 	bl	800ade8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adde:	69bb      	ldr	r3, [r7, #24]
	}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3720      	adds	r7, #32
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d103      	bne.n	800ae04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	e002      	b.n	800ae0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae16:	2101      	movs	r1, #1
 800ae18:	69b8      	ldr	r0, [r7, #24]
 800ae1a:	f7ff fecb 	bl	800abb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00e      	beq.n	800ae52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ae46:	2300      	movs	r3, #0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f837 	bl	800aec0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	4603      	mov	r3, r0
 800ae62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae64:	2301      	movs	r3, #1
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	6939      	ldr	r1, [r7, #16]
 800ae72:	6978      	ldr	r0, [r7, #20]
 800ae74:	f7ff ff79 	bl	800ad6a <xQueueGenericCreate>
 800ae78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff ffd3 	bl	800ae26 <prvInitialiseMutex>

		return xNewQueue;
 800ae80:	68fb      	ldr	r3, [r7, #12]
	}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b088      	sub	sp, #32
 800ae8e:	af02      	add	r7, sp, #8
 800ae90:	4603      	mov	r3, r0
 800ae92:	6039      	str	r1, [r7, #0]
 800ae94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae96:	2301      	movs	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2200      	movs	r2, #0
 800aea6:	6939      	ldr	r1, [r7, #16]
 800aea8:	6978      	ldr	r0, [r7, #20]
 800aeaa:	f7ff feeb 	bl	800ac84 <xQueueGenericCreateStatic>
 800aeae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff ffb8 	bl	800ae26 <prvInitialiseMutex>

		return xNewQueue;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
	}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08e      	sub	sp, #56	; 0x38
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aece:	2300      	movs	r3, #0
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d109      	bne.n	800aef0 <xQueueGenericSend+0x30>
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeee:	e7fe      	b.n	800aeee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <xQueueGenericSend+0x3e>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <xQueueGenericSend+0x42>
 800aefe:	2301      	movs	r3, #1
 800af00:	e000      	b.n	800af04 <xQueueGenericSend+0x44>
 800af02:	2300      	movs	r3, #0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d109      	bne.n	800af1c <xQueueGenericSend+0x5c>
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
 800af1a:	e7fe      	b.n	800af1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d103      	bne.n	800af2a <xQueueGenericSend+0x6a>
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <xQueueGenericSend+0x6e>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <xQueueGenericSend+0x70>
 800af2e:	2300      	movs	r3, #0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d109      	bne.n	800af48 <xQueueGenericSend+0x88>
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	623b      	str	r3, [r7, #32]
 800af46:	e7fe      	b.n	800af46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af48:	f001 fbbc 	bl	800c6c4 <xTaskGetSchedulerState>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <xQueueGenericSend+0x98>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <xQueueGenericSend+0x9c>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <xQueueGenericSend+0x9e>
 800af5c:	2300      	movs	r3, #0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d109      	bne.n	800af76 <xQueueGenericSend+0xb6>
 800af62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	61fb      	str	r3, [r7, #28]
 800af74:	e7fe      	b.n	800af74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af76:	f001 ff01 	bl	800cd7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	429a      	cmp	r2, r3
 800af84:	d302      	bcc.n	800af8c <xQueueGenericSend+0xcc>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d129      	bne.n	800afe0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	68b9      	ldr	r1, [r7, #8]
 800af90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af92:	f000 fc82 	bl	800b89a <prvCopyDataToQueue>
 800af96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d010      	beq.n	800afc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	3324      	adds	r3, #36	; 0x24
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 f9d7 	bl	800c358 <xTaskRemoveFromEventList>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d013      	beq.n	800afd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afb0:	4b3f      	ldr	r3, [pc, #252]	; (800b0b0 <xQueueGenericSend+0x1f0>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	e00a      	b.n	800afd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800afc8:	4b39      	ldr	r3, [pc, #228]	; (800b0b0 <xQueueGenericSend+0x1f0>)
 800afca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afd8:	f001 fefe 	bl	800cdd8 <vPortExitCritical>
				return pdPASS;
 800afdc:	2301      	movs	r3, #1
 800afde:	e063      	b.n	800b0a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d103      	bne.n	800afee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afe6:	f001 fef7 	bl	800cdd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afea:	2300      	movs	r3, #0
 800afec:	e05c      	b.n	800b0a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d106      	bne.n	800b002 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aff4:	f107 0314 	add.w	r3, r7, #20
 800aff8:	4618      	mov	r0, r3
 800affa:	f001 fa0f 	bl	800c41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800affe:	2301      	movs	r3, #1
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b002:	f001 fee9 	bl	800cdd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b006:	f000 ffa5 	bl	800bf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b00a:	f001 feb7 	bl	800cd7c <vPortEnterCritical>
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b014:	b25b      	sxtb	r3, r3
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01a:	d103      	bne.n	800b024 <xQueueGenericSend+0x164>
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d103      	bne.n	800b03a <xQueueGenericSend+0x17a>
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b03a:	f001 fecd 	bl	800cdd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b03e:	1d3a      	adds	r2, r7, #4
 800b040:	f107 0314 	add.w	r3, r7, #20
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f001 f9fe 	bl	800c448 <xTaskCheckForTimeOut>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d124      	bne.n	800b09c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b054:	f000 fd19 	bl	800ba8a <prvIsQueueFull>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d018      	beq.n	800b090 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	3310      	adds	r3, #16
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	4611      	mov	r1, r2
 800b066:	4618      	mov	r0, r3
 800b068:	f001 f952 	bl	800c310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b06c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b06e:	f000 fca4 	bl	800b9ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b072:	f000 ff7d 	bl	800bf70 <xTaskResumeAll>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f47f af7c 	bne.w	800af76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <xQueueGenericSend+0x1f0>)
 800b080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	e772      	b.n	800af76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b092:	f000 fc92 	bl	800b9ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b096:	f000 ff6b 	bl	800bf70 <xTaskResumeAll>
 800b09a:	e76c      	b.n	800af76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b09e:	f000 fc8c 	bl	800b9ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0a2:	f000 ff65 	bl	800bf70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3738      	adds	r7, #56	; 0x38
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	e000ed04 	.word	0xe000ed04

0800b0b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	; 0x38
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d109      	bne.n	800b0e0 <xQueueGenericSendFromISR+0x2c>
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0de:	e7fe      	b.n	800b0de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <xQueueGenericSendFromISR+0x3a>
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <xQueueGenericSendFromISR+0x3e>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e000      	b.n	800b0f4 <xQueueGenericSendFromISR+0x40>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d109      	bne.n	800b10c <xQueueGenericSendFromISR+0x58>
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	623b      	str	r3, [r7, #32]
 800b10a:	e7fe      	b.n	800b10a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d103      	bne.n	800b11a <xQueueGenericSendFromISR+0x66>
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <xQueueGenericSendFromISR+0x6a>
 800b11a:	2301      	movs	r3, #1
 800b11c:	e000      	b.n	800b120 <xQueueGenericSendFromISR+0x6c>
 800b11e:	2300      	movs	r3, #0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d109      	bne.n	800b138 <xQueueGenericSendFromISR+0x84>
 800b124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	61fb      	str	r3, [r7, #28]
 800b136:	e7fe      	b.n	800b136 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b138:	f001 fefc 	bl	800cf34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b13c:	f3ef 8211 	mrs	r2, BASEPRI
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	61ba      	str	r2, [r7, #24]
 800b152:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b154:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b160:	429a      	cmp	r2, r3
 800b162:	d302      	bcc.n	800b16a <xQueueGenericSendFromISR+0xb6>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d12c      	bne.n	800b1c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b17a:	f000 fb8e 	bl	800b89a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b17e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b186:	d112      	bne.n	800b1ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d016      	beq.n	800b1be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	4618      	mov	r0, r3
 800b196:	f001 f8df 	bl	800c358 <xTaskRemoveFromEventList>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00b      	beq.n	800b1be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	e007      	b.n	800b1be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	b25a      	sxtb	r2, r3
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b1c2:	e001      	b.n	800b1c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3738      	adds	r7, #56	; 0x38
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08e      	sub	sp, #56	; 0x38
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d109      	bne.n	800b204 <xQueueGiveFromISR+0x28>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	623b      	str	r3, [r7, #32]
 800b202:	e7fe      	b.n	800b202 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d009      	beq.n	800b220 <xQueueGiveFromISR+0x44>
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	61fb      	str	r3, [r7, #28]
 800b21e:	e7fe      	b.n	800b21e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d103      	bne.n	800b230 <xQueueGiveFromISR+0x54>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <xQueueGiveFromISR+0x58>
 800b230:	2301      	movs	r3, #1
 800b232:	e000      	b.n	800b236 <xQueueGiveFromISR+0x5a>
 800b234:	2300      	movs	r3, #0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <xQueueGiveFromISR+0x72>
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	61bb      	str	r3, [r7, #24]
 800b24c:	e7fe      	b.n	800b24c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b24e:	f001 fe71 	bl	800cf34 <vPortValidateInterruptPriority>
	__asm volatile
 800b252:	f3ef 8211 	mrs	r2, BASEPRI
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	617a      	str	r2, [r7, #20]
 800b268:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b26a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b26c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d22b      	bcs.n	800b2d6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d112      	bne.n	800b2c0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d016      	beq.n	800b2d0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	3324      	adds	r3, #36	; 0x24
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 f856 	bl	800c358 <xTaskRemoveFromEventList>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00e      	beq.n	800b2d0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00b      	beq.n	800b2d0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e007      	b.n	800b2d0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	b25a      	sxtb	r2, r3
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d4:	e001      	b.n	800b2da <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3738      	adds	r7, #56	; 0x38
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08c      	sub	sp, #48	; 0x30
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <xQueueReceive+0x2e>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	623b      	str	r3, [r7, #32]
 800b31c:	e7fe      	b.n	800b31c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d103      	bne.n	800b32c <xQueueReceive+0x3c>
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <xQueueReceive+0x40>
 800b32c:	2301      	movs	r3, #1
 800b32e:	e000      	b.n	800b332 <xQueueReceive+0x42>
 800b330:	2300      	movs	r3, #0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d109      	bne.n	800b34a <xQueueReceive+0x5a>
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	61fb      	str	r3, [r7, #28]
 800b348:	e7fe      	b.n	800b348 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b34a:	f001 f9bb 	bl	800c6c4 <xTaskGetSchedulerState>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d102      	bne.n	800b35a <xQueueReceive+0x6a>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <xQueueReceive+0x6e>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e000      	b.n	800b360 <xQueueReceive+0x70>
 800b35e:	2300      	movs	r3, #0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <xQueueReceive+0x88>
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	61bb      	str	r3, [r7, #24]
 800b376:	e7fe      	b.n	800b376 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b378:	f001 fd00 	bl	800cd7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01f      	beq.n	800b3c8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b38c:	f000 faef 	bl	800b96e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	1e5a      	subs	r2, r3, #1
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00f      	beq.n	800b3c0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	3310      	adds	r3, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 ffd7 	bl	800c358 <xTaskRemoveFromEventList>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d007      	beq.n	800b3c0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b3c      	ldr	r3, [pc, #240]	; (800b4a4 <xQueueReceive+0x1b4>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3c0:	f001 fd0a 	bl	800cdd8 <vPortExitCritical>
				return pdPASS;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e069      	b.n	800b49c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d103      	bne.n	800b3d6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3ce:	f001 fd03 	bl	800cdd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e062      	b.n	800b49c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3dc:	f107 0310 	add.w	r3, r7, #16
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f001 f81b 	bl	800c41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ea:	f001 fcf5 	bl	800cdd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ee:	f000 fdb1 	bl	800bf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3f2:	f001 fcc3 	bl	800cd7c <vPortEnterCritical>
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3fc:	b25b      	sxtb	r3, r3
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d103      	bne.n	800b40c <xQueueReceive+0x11c>
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b412:	b25b      	sxtb	r3, r3
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b418:	d103      	bne.n	800b422 <xQueueReceive+0x132>
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b422:	f001 fcd9 	bl	800cdd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b426:	1d3a      	adds	r2, r7, #4
 800b428:	f107 0310 	add.w	r3, r7, #16
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 f80a 	bl	800c448 <xTaskCheckForTimeOut>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d123      	bne.n	800b482 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b43c:	f000 fb0f 	bl	800ba5e <prvIsQueueEmpty>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d017      	beq.n	800b476 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b448:	3324      	adds	r3, #36	; 0x24
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 ff5e 	bl	800c310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b456:	f000 fab0 	bl	800b9ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b45a:	f000 fd89 	bl	800bf70 <xTaskResumeAll>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d189      	bne.n	800b378 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b464:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <xQueueReceive+0x1b4>)
 800b466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	e780      	b.n	800b378 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b478:	f000 fa9f 	bl	800b9ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b47c:	f000 fd78 	bl	800bf70 <xTaskResumeAll>
 800b480:	e77a      	b.n	800b378 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b484:	f000 fa99 	bl	800b9ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b488:	f000 fd72 	bl	800bf70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b48e:	f000 fae6 	bl	800ba5e <prvIsQueueEmpty>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	f43f af6f 	beq.w	800b378 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b49a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3730      	adds	r7, #48	; 0x30
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08e      	sub	sp, #56	; 0x38
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <xQueueSemaphoreTake+0x30>
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	623b      	str	r3, [r7, #32]
 800b4d6:	e7fe      	b.n	800b4d6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d009      	beq.n	800b4f4 <xQueueSemaphoreTake+0x4c>
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	e7fe      	b.n	800b4f2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4f4:	f001 f8e6 	bl	800c6c4 <xTaskGetSchedulerState>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <xQueueSemaphoreTake+0x5c>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <xQueueSemaphoreTake+0x60>
 800b504:	2301      	movs	r3, #1
 800b506:	e000      	b.n	800b50a <xQueueSemaphoreTake+0x62>
 800b508:	2300      	movs	r3, #0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d109      	bne.n	800b522 <xQueueSemaphoreTake+0x7a>
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	61bb      	str	r3, [r7, #24]
 800b520:	e7fe      	b.n	800b520 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b522:	f001 fc2b 	bl	800cd7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d024      	beq.n	800b57c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	1e5a      	subs	r2, r3, #1
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d104      	bne.n	800b54c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b542:	f001 fa79 	bl	800ca38 <pvTaskIncrementMutexHeldCount>
 800b546:	4602      	mov	r2, r0
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00f      	beq.n	800b574 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	3310      	adds	r3, #16
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fefd 	bl	800c358 <xTaskRemoveFromEventList>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d007      	beq.n	800b574 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b564:	4b53      	ldr	r3, [pc, #332]	; (800b6b4 <xQueueSemaphoreTake+0x20c>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b574:	f001 fc30 	bl	800cdd8 <vPortExitCritical>
				return pdPASS;
 800b578:	2301      	movs	r3, #1
 800b57a:	e096      	b.n	800b6aa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d110      	bne.n	800b5a4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <xQueueSemaphoreTake+0xf4>
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	e7fe      	b.n	800b59a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b59c:	f001 fc1c 	bl	800cdd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e082      	b.n	800b6aa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5aa:	f107 030c 	add.w	r3, r7, #12
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 ff34 	bl	800c41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5b8:	f001 fc0e 	bl	800cdd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5bc:	f000 fcca 	bl	800bf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5c0:	f001 fbdc 	bl	800cd7c <vPortEnterCritical>
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5ca:	b25b      	sxtb	r3, r3
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d0:	d103      	bne.n	800b5da <xQueueSemaphoreTake+0x132>
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5e0:	b25b      	sxtb	r3, r3
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d103      	bne.n	800b5f0 <xQueueSemaphoreTake+0x148>
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f0:	f001 fbf2 	bl	800cdd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5f4:	463a      	mov	r2, r7
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 ff23 	bl	800c448 <xTaskCheckForTimeOut>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d132      	bne.n	800b66e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b60a:	f000 fa28 	bl	800ba5e <prvIsQueueEmpty>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d026      	beq.n	800b662 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d109      	bne.n	800b630 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b61c:	f001 fbae 	bl	800cd7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f86b 	bl	800c700 <xTaskPriorityInherit>
 800b62a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b62c:	f001 fbd4 	bl	800cdd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	3324      	adds	r3, #36	; 0x24
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	4611      	mov	r1, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 fe69 	bl	800c310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b640:	f000 f9bb 	bl	800b9ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b644:	f000 fc94 	bl	800bf70 <xTaskResumeAll>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f47f af69 	bne.w	800b522 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b650:	4b18      	ldr	r3, [pc, #96]	; (800b6b4 <xQueueSemaphoreTake+0x20c>)
 800b652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	e75f      	b.n	800b522 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b664:	f000 f9a9 	bl	800b9ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b668:	f000 fc82 	bl	800bf70 <xTaskResumeAll>
 800b66c:	e759      	b.n	800b522 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b670:	f000 f9a3 	bl	800b9ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b674:	f000 fc7c 	bl	800bf70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b67a:	f000 f9f0 	bl	800ba5e <prvIsQueueEmpty>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	f43f af4e 	beq.w	800b522 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00d      	beq.n	800b6a8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b68c:	f001 fb76 	bl	800cd7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b692:	f000 f8ea 	bl	800b86a <prvGetDisinheritPriorityAfterTimeout>
 800b696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f001 f932 	bl	800c908 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b6a4:	f001 fb98 	bl	800cdd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3738      	adds	r7, #56	; 0x38
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	e000ed04 	.word	0xe000ed04

0800b6b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08e      	sub	sp, #56	; 0x38
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d109      	bne.n	800b6e2 <xQueueReceiveFromISR+0x2a>
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	623b      	str	r3, [r7, #32]
 800b6e0:	e7fe      	b.n	800b6e0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <xQueueReceiveFromISR+0x38>
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <xQueueReceiveFromISR+0x3c>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <xQueueReceiveFromISR+0x3e>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <xQueueReceiveFromISR+0x56>
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	e7fe      	b.n	800b70c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b70e:	f001 fc11 	bl	800cf34 <vPortValidateInterruptPriority>
	__asm volatile
 800b712:	f3ef 8211 	mrs	r2, BASEPRI
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	61ba      	str	r2, [r7, #24]
 800b728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b72a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b72c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	2b00      	cmp	r3, #0
 800b738:	d02f      	beq.n	800b79a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b748:	f000 f911 	bl	800b96e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	1e5a      	subs	r2, r3, #1
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75c:	d112      	bne.n	800b784 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d016      	beq.n	800b794 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	3310      	adds	r3, #16
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fdf4 	bl	800c358 <xTaskRemoveFromEventList>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00e      	beq.n	800b794 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e007      	b.n	800b794 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b788:	3301      	adds	r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	b25a      	sxtb	r2, r3
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b794:	2301      	movs	r3, #1
 800b796:	637b      	str	r3, [r7, #52]	; 0x34
 800b798:	e001      	b.n	800b79e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	637b      	str	r3, [r7, #52]	; 0x34
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3738      	adds	r7, #56	; 0x38
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	60bb      	str	r3, [r7, #8]
 800b7d2:	e7fe      	b.n	800b7d2 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b7d4:	f001 fad2 	bl	800cd7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b7de:	f001 fafb 	bl	800cdd8 <vPortExitCritical>

	return uxReturn;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d109      	bne.n	800b812 <uxQueueMessagesWaitingFromISR+0x26>
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e7fe      	b.n	800b810 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b818:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b81a:	4618      	mov	r0, r3
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <vQueueDelete+0x26>
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	60bb      	str	r3, [r7, #8]
 800b84a:	e7fe      	b.n	800b84a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f935 	bl	800babc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f001 fc69 	bl	800d134 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b862:	bf00      	nop
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	2b00      	cmp	r3, #0
 800b878:	d006      	beq.n	800b888 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f1c3 0307 	rsb	r3, r3, #7
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e001      	b.n	800b88c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b88c:	68fb      	ldr	r3, [r7, #12]
	}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b086      	sub	sp, #24
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10d      	bne.n	800b8d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d14d      	bne.n	800b95c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 ff9b 	bl	800c800 <xTaskPriorityDisinherit>
 800b8ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	609a      	str	r2, [r3, #8]
 800b8d2:	e043      	b.n	800b95c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d119      	bne.n	800b90e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6858      	ldr	r0, [r3, #4]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	68b9      	ldr	r1, [r7, #8]
 800b8e6:	f00d fdf8 	bl	80194da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	441a      	add	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	429a      	cmp	r2, r3
 800b902:	d32b      	bcc.n	800b95c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	605a      	str	r2, [r3, #4]
 800b90c:	e026      	b.n	800b95c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68d8      	ldr	r0, [r3, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b916:	461a      	mov	r2, r3
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	f00d fdde 	bl	80194da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b926:	425b      	negs	r3, r3
 800b928:	441a      	add	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d207      	bcs.n	800b94a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	425b      	negs	r3, r3
 800b944:	441a      	add	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d105      	bne.n	800b95c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	3b01      	subs	r3, #1
 800b95a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b964:	697b      	ldr	r3, [r7, #20]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d018      	beq.n	800b9b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	441a      	add	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68da      	ldr	r2, [r3, #12]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	429a      	cmp	r2, r3
 800b998:	d303      	bcc.n	800b9a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68d9      	ldr	r1, [r3, #12]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6838      	ldr	r0, [r7, #0]
 800b9ae:	f00d fd94 	bl	80194da <memcpy>
	}
}
 800b9b2:	bf00      	nop
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9c2:	f001 f9db 	bl	800cd7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9ce:	e011      	b.n	800b9f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d012      	beq.n	800b9fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3324      	adds	r3, #36	; 0x24
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 fcbb 	bl	800c358 <xTaskRemoveFromEventList>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9e8:	f000 fd8e 	bl	800c508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dce9      	bgt.n	800b9d0 <prvUnlockQueue+0x16>
 800b9fc:	e000      	b.n	800ba00 <prvUnlockQueue+0x46>
					break;
 800b9fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	22ff      	movs	r2, #255	; 0xff
 800ba04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba08:	f001 f9e6 	bl	800cdd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba0c:	f001 f9b6 	bl	800cd7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba18:	e011      	b.n	800ba3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d012      	beq.n	800ba48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3310      	adds	r3, #16
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 fc96 	bl	800c358 <xTaskRemoveFromEventList>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba32:	f000 fd69 	bl	800c508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dce9      	bgt.n	800ba1a <prvUnlockQueue+0x60>
 800ba46:	e000      	b.n	800ba4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	22ff      	movs	r2, #255	; 0xff
 800ba4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba52:	f001 f9c1 	bl	800cdd8 <vPortExitCritical>
}
 800ba56:	bf00      	nop
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba66:	f001 f989 	bl	800cd7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba72:	2301      	movs	r3, #1
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e001      	b.n	800ba7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba7c:	f001 f9ac 	bl	800cdd8 <vPortExitCritical>

	return xReturn;
 800ba80:	68fb      	ldr	r3, [r7, #12]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba92:	f001 f973 	bl	800cd7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d102      	bne.n	800baa8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e001      	b.n	800baac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baac:	f001 f994 	bl	800cdd8 <vPortExitCritical>

	return xReturn;
 800bab0:	68fb      	ldr	r3, [r7, #12]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bac4:	2300      	movs	r3, #0
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e016      	b.n	800baf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800baca:	4a10      	ldr	r2, [pc, #64]	; (800bb0c <vQueueUnregisterQueue+0x50>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d10b      	bne.n	800baf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bada:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <vQueueUnregisterQueue+0x50>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2100      	movs	r1, #0
 800bae0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bae4:	4a09      	ldr	r2, [pc, #36]	; (800bb0c <vQueueUnregisterQueue+0x50>)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	4413      	add	r3, r2
 800baec:	2200      	movs	r2, #0
 800baee:	605a      	str	r2, [r3, #4]
				break;
 800baf0:	e005      	b.n	800bafe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3301      	adds	r3, #1
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b07      	cmp	r3, #7
 800bafc:	d9e5      	bls.n	800baca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	2000d0c8 	.word	0x2000d0c8

0800bb10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08e      	sub	sp, #56	; 0x38
 800bb14:	af04      	add	r7, sp, #16
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <xTaskCreateStatic+0x28>
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	623b      	str	r3, [r7, #32]
 800bb36:	e7fe      	b.n	800bb36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d109      	bne.n	800bb52 <xTaskCreateStatic+0x42>
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	61fb      	str	r3, [r7, #28]
 800bb50:	e7fe      	b.n	800bb50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb52:	2354      	movs	r3, #84	; 0x54
 800bb54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b54      	cmp	r3, #84	; 0x54
 800bb5a:	d009      	beq.n	800bb70 <xTaskCreateStatic+0x60>
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	61bb      	str	r3, [r7, #24]
 800bb6e:	e7fe      	b.n	800bb6e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01e      	beq.n	800bbb6 <xTaskCreateStatic+0xa6>
 800bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01b      	beq.n	800bbb6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb90:	2300      	movs	r3, #0
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	9302      	str	r3, [sp, #8]
 800bb98:	f107 0314 	add.w	r3, r7, #20
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f850 	bl	800bc4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb0:	f000 f8d4 	bl	800bd5c <prvAddNewTaskToReadyList>
 800bbb4:	e001      	b.n	800bbba <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbba:	697b      	ldr	r3, [r7, #20]
	}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3728      	adds	r7, #40	; 0x28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08c      	sub	sp, #48	; 0x30
 800bbc8:	af04      	add	r7, sp, #16
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbd4:	88fb      	ldrh	r3, [r7, #6]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 f9e9 	bl	800cfb0 <pvPortMalloc>
 800bbde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00e      	beq.n	800bc04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbe6:	2054      	movs	r0, #84	; 0x54
 800bbe8:	f001 f9e2 	bl	800cfb0 <pvPortMalloc>
 800bbec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	631a      	str	r2, [r3, #48]	; 0x30
 800bbfa:	e005      	b.n	800bc08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbfc:	6978      	ldr	r0, [r7, #20]
 800bbfe:	f001 fa99 	bl	800d134 <vPortFree>
 800bc02:	e001      	b.n	800bc08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d017      	beq.n	800bc3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc16:	88fa      	ldrh	r2, [r7, #6]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9303      	str	r3, [sp, #12]
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	9302      	str	r3, [sp, #8]
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f80e 	bl	800bc4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc32:	69f8      	ldr	r0, [r7, #28]
 800bc34:	f000 f892 	bl	800bd5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	61bb      	str	r3, [r7, #24]
 800bc3c:	e002      	b.n	800bc44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc44:	69bb      	ldr	r3, [r7, #24]
	}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b088      	sub	sp, #32
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	60b9      	str	r1, [r7, #8]
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc60:	6879      	ldr	r1, [r7, #4]
 800bc62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc66:	440b      	add	r3, r1
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	f023 0307 	bic.w	r3, r3, #7
 800bc74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	f003 0307 	and.w	r3, r3, #7
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d009      	beq.n	800bc94 <prvInitialiseNewTask+0x46>
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	e7fe      	b.n	800bc92 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d01f      	beq.n	800bcda <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e012      	b.n	800bcc6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	7819      	ldrb	r1, [r3, #0]
 800bca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	3334      	adds	r3, #52	; 0x34
 800bcb0:	460a      	mov	r2, r1
 800bcb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d006      	beq.n	800bcce <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	61fb      	str	r3, [r7, #28]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	2b0f      	cmp	r3, #15
 800bcca:	d9e9      	bls.n	800bca0 <prvInitialiseNewTask+0x52>
 800bccc:	e000      	b.n	800bcd0 <prvInitialiseNewTask+0x82>
			{
				break;
 800bcce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcd8:	e003      	b.n	800bce2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	2b06      	cmp	r3, #6
 800bce6:	d901      	bls.n	800bcec <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bce8:	2306      	movs	r3, #6
 800bcea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	3304      	adds	r3, #4
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fec1 	bl	800aa8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe febc 	bl	800aa8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	f1c3 0207 	rsb	r2, r3, #7
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	68f9      	ldr	r1, [r7, #12]
 800bd3a:	69b8      	ldr	r0, [r7, #24]
 800bd3c:	f000 fef6 	bl	800cb2c <pxPortInitialiseStack>
 800bd40:	4602      	mov	r2, r0
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd52:	bf00      	nop
 800bd54:	3720      	adds	r7, #32
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd64:	f001 f80a 	bl	800cd7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd68:	4b2a      	ldr	r3, [pc, #168]	; (800be14 <prvAddNewTaskToReadyList+0xb8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	4a29      	ldr	r2, [pc, #164]	; (800be14 <prvAddNewTaskToReadyList+0xb8>)
 800bd70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd72:	4b29      	ldr	r3, [pc, #164]	; (800be18 <prvAddNewTaskToReadyList+0xbc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd7a:	4a27      	ldr	r2, [pc, #156]	; (800be18 <prvAddNewTaskToReadyList+0xbc>)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd80:	4b24      	ldr	r3, [pc, #144]	; (800be14 <prvAddNewTaskToReadyList+0xb8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d110      	bne.n	800bdaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd88:	f000 fbe2 	bl	800c550 <prvInitialiseTaskLists>
 800bd8c:	e00d      	b.n	800bdaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd8e:	4b23      	ldr	r3, [pc, #140]	; (800be1c <prvAddNewTaskToReadyList+0xc0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd96:	4b20      	ldr	r3, [pc, #128]	; (800be18 <prvAddNewTaskToReadyList+0xbc>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d802      	bhi.n	800bdaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bda4:	4a1c      	ldr	r2, [pc, #112]	; (800be18 <prvAddNewTaskToReadyList+0xbc>)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdaa:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <prvAddNewTaskToReadyList+0xc4>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	4a1b      	ldr	r2, [pc, #108]	; (800be20 <prvAddNewTaskToReadyList+0xc4>)
 800bdb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	2201      	movs	r2, #1
 800bdba:	409a      	lsls	r2, r3
 800bdbc:	4b19      	ldr	r3, [pc, #100]	; (800be24 <prvAddNewTaskToReadyList+0xc8>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	4a18      	ldr	r2, [pc, #96]	; (800be24 <prvAddNewTaskToReadyList+0xc8>)
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4a15      	ldr	r2, [pc, #84]	; (800be28 <prvAddNewTaskToReadyList+0xcc>)
 800bdd4:	441a      	add	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f7fe fe61 	bl	800aaa4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bde2:	f000 fff9 	bl	800cdd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bde6:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <prvAddNewTaskToReadyList+0xc0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00e      	beq.n	800be0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <prvAddNewTaskToReadyList+0xbc>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d207      	bcs.n	800be0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <prvAddNewTaskToReadyList+0xd0>)
 800bdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be0c:	bf00      	nop
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20000414 	.word	0x20000414
 800be18:	20000314 	.word	0x20000314
 800be1c:	20000420 	.word	0x20000420
 800be20:	20000430 	.word	0x20000430
 800be24:	2000041c 	.word	0x2000041c
 800be28:	20000318 	.word	0x20000318
 800be2c:	e000ed04 	.word	0xe000ed04

0800be30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d016      	beq.n	800be70 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <vTaskDelay+0x60>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d009      	beq.n	800be5e <vTaskDelay+0x2e>
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	60bb      	str	r3, [r7, #8]
 800be5c:	e7fe      	b.n	800be5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800be5e:	f000 f879 	bl	800bf54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fdfb 	bl	800ca60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be6a:	f000 f881 	bl	800bf70 <xTaskResumeAll>
 800be6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d107      	bne.n	800be86 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800be76:	4b07      	ldr	r3, [pc, #28]	; (800be94 <vTaskDelay+0x64>)
 800be78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	2000043c 	.word	0x2000043c
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bea6:	463a      	mov	r2, r7
 800bea8:	1d39      	adds	r1, r7, #4
 800beaa:	f107 0308 	add.w	r3, r7, #8
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f4 fdaa 	bl	8000a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	9202      	str	r2, [sp, #8]
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	2300      	movs	r3, #0
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	2300      	movs	r3, #0
 800bec4:	460a      	mov	r2, r1
 800bec6:	491d      	ldr	r1, [pc, #116]	; (800bf3c <vTaskStartScheduler+0xa4>)
 800bec8:	481d      	ldr	r0, [pc, #116]	; (800bf40 <vTaskStartScheduler+0xa8>)
 800beca:	f7ff fe21 	bl	800bb10 <xTaskCreateStatic>
 800bece:	4602      	mov	r2, r0
 800bed0:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <vTaskStartScheduler+0xac>)
 800bed2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bed4:	4b1b      	ldr	r3, [pc, #108]	; (800bf44 <vTaskStartScheduler+0xac>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e001      	b.n	800bee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d115      	bne.n	800bf18 <vTaskStartScheduler+0x80>
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800befe:	4b12      	ldr	r3, [pc, #72]	; (800bf48 <vTaskStartScheduler+0xb0>)
 800bf00:	f04f 32ff 	mov.w	r2, #4294967295
 800bf04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf06:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <vTaskStartScheduler+0xb4>)
 800bf08:	2201      	movs	r2, #1
 800bf0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <vTaskStartScheduler+0xb8>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf12:	f000 fe95 	bl	800cc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf16:	e00d      	b.n	800bf34 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1e:	d109      	bne.n	800bf34 <vTaskStartScheduler+0x9c>
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	e7fe      	b.n	800bf32 <vTaskStartScheduler+0x9a>
}
 800bf34:	bf00      	nop
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	0801a760 	.word	0x0801a760
 800bf40:	0800c521 	.word	0x0800c521
 800bf44:	20000438 	.word	0x20000438
 800bf48:	20000434 	.word	0x20000434
 800bf4c:	20000420 	.word	0x20000420
 800bf50:	20000418 	.word	0x20000418

0800bf54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf58:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <vTaskSuspendAll+0x18>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	4a03      	ldr	r2, [pc, #12]	; (800bf6c <vTaskSuspendAll+0x18>)
 800bf60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf62:	bf00      	nop
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	2000043c 	.word	0x2000043c

0800bf70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf7e:	4b41      	ldr	r3, [pc, #260]	; (800c084 <xTaskResumeAll+0x114>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <xTaskResumeAll+0x2a>
 800bf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	e7fe      	b.n	800bf98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf9a:	f000 feef 	bl	800cd7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf9e:	4b39      	ldr	r3, [pc, #228]	; (800c084 <xTaskResumeAll+0x114>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	4a37      	ldr	r2, [pc, #220]	; (800c084 <xTaskResumeAll+0x114>)
 800bfa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa8:	4b36      	ldr	r3, [pc, #216]	; (800c084 <xTaskResumeAll+0x114>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d161      	bne.n	800c074 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfb0:	4b35      	ldr	r3, [pc, #212]	; (800c088 <xTaskResumeAll+0x118>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d05d      	beq.n	800c074 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfb8:	e02e      	b.n	800c018 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfba:	4b34      	ldr	r3, [pc, #208]	; (800c08c <xTaskResumeAll+0x11c>)
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3318      	adds	r3, #24
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fdc9 	bl	800ab5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe fdc4 	bl	800ab5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	2201      	movs	r2, #1
 800bfdc:	409a      	lsls	r2, r3
 800bfde:	4b2c      	ldr	r3, [pc, #176]	; (800c090 <xTaskResumeAll+0x120>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	4a2a      	ldr	r2, [pc, #168]	; (800c090 <xTaskResumeAll+0x120>)
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4a27      	ldr	r2, [pc, #156]	; (800c094 <xTaskResumeAll+0x124>)
 800bff6:	441a      	add	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3304      	adds	r3, #4
 800bffc:	4619      	mov	r1, r3
 800bffe:	4610      	mov	r0, r2
 800c000:	f7fe fd50 	bl	800aaa4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c008:	4b23      	ldr	r3, [pc, #140]	; (800c098 <xTaskResumeAll+0x128>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	429a      	cmp	r2, r3
 800c010:	d302      	bcc.n	800c018 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c012:	4b22      	ldr	r3, [pc, #136]	; (800c09c <xTaskResumeAll+0x12c>)
 800c014:	2201      	movs	r2, #1
 800c016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c018:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <xTaskResumeAll+0x11c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1cc      	bne.n	800bfba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c026:	f000 fb2d 	bl	800c684 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c02a:	4b1d      	ldr	r3, [pc, #116]	; (800c0a0 <xTaskResumeAll+0x130>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d010      	beq.n	800c058 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c036:	f000 f859 	bl	800c0ec <xTaskIncrementTick>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c040:	4b16      	ldr	r3, [pc, #88]	; (800c09c <xTaskResumeAll+0x12c>)
 800c042:	2201      	movs	r2, #1
 800c044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3b01      	subs	r3, #1
 800c04a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1f1      	bne.n	800c036 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c052:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <xTaskResumeAll+0x130>)
 800c054:	2200      	movs	r2, #0
 800c056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c058:	4b10      	ldr	r3, [pc, #64]	; (800c09c <xTaskResumeAll+0x12c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d009      	beq.n	800c074 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c060:	2301      	movs	r3, #1
 800c062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c064:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <xTaskResumeAll+0x134>)
 800c066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c074:	f000 feb0 	bl	800cdd8 <vPortExitCritical>

	return xAlreadyYielded;
 800c078:	68bb      	ldr	r3, [r7, #8]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	2000043c 	.word	0x2000043c
 800c088:	20000414 	.word	0x20000414
 800c08c:	200003d4 	.word	0x200003d4
 800c090:	2000041c 	.word	0x2000041c
 800c094:	20000318 	.word	0x20000318
 800c098:	20000314 	.word	0x20000314
 800c09c:	20000428 	.word	0x20000428
 800c0a0:	20000424 	.word	0x20000424
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0ae:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <xTaskGetTickCount+0x1c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0b4:	687b      	ldr	r3, [r7, #4]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	20000418 	.word	0x20000418

0800c0c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0ce:	f000 ff31 	bl	800cf34 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c0d6:	4b04      	ldr	r3, [pc, #16]	; (800c0e8 <xTaskGetTickCountFromISR+0x20>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0dc:	683b      	ldr	r3, [r7, #0]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20000418 	.word	0x20000418

0800c0ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f6:	4b4e      	ldr	r3, [pc, #312]	; (800c230 <xTaskIncrementTick+0x144>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f040 8087 	bne.w	800c20e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c100:	4b4c      	ldr	r3, [pc, #304]	; (800c234 <xTaskIncrementTick+0x148>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c108:	4a4a      	ldr	r2, [pc, #296]	; (800c234 <xTaskIncrementTick+0x148>)
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11f      	bne.n	800c154 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c114:	4b48      	ldr	r3, [pc, #288]	; (800c238 <xTaskIncrementTick+0x14c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <xTaskIncrementTick+0x46>
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	e7fe      	b.n	800c130 <xTaskIncrementTick+0x44>
 800c132:	4b41      	ldr	r3, [pc, #260]	; (800c238 <xTaskIncrementTick+0x14c>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	4b40      	ldr	r3, [pc, #256]	; (800c23c <xTaskIncrementTick+0x150>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a3e      	ldr	r2, [pc, #248]	; (800c238 <xTaskIncrementTick+0x14c>)
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	4a3e      	ldr	r2, [pc, #248]	; (800c23c <xTaskIncrementTick+0x150>)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	4b3e      	ldr	r3, [pc, #248]	; (800c240 <xTaskIncrementTick+0x154>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	4a3c      	ldr	r2, [pc, #240]	; (800c240 <xTaskIncrementTick+0x154>)
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	f000 fa98 	bl	800c684 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c154:	4b3b      	ldr	r3, [pc, #236]	; (800c244 <xTaskIncrementTick+0x158>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d348      	bcc.n	800c1f0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c15e:	4b36      	ldr	r3, [pc, #216]	; (800c238 <xTaskIncrementTick+0x14c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c168:	4b36      	ldr	r3, [pc, #216]	; (800c244 <xTaskIncrementTick+0x158>)
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295
 800c16e:	601a      	str	r2, [r3, #0]
					break;
 800c170:	e03e      	b.n	800c1f0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c172:	4b31      	ldr	r3, [pc, #196]	; (800c238 <xTaskIncrementTick+0x14c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d203      	bcs.n	800c192 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c18a:	4a2e      	ldr	r2, [pc, #184]	; (800c244 <xTaskIncrementTick+0x158>)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c190:	e02e      	b.n	800c1f0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	3304      	adds	r3, #4
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fce1 	bl	800ab5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	3318      	adds	r3, #24
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fcd8 	bl	800ab5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	409a      	lsls	r2, r3
 800c1b6:	4b24      	ldr	r3, [pc, #144]	; (800c248 <xTaskIncrementTick+0x15c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	4a22      	ldr	r2, [pc, #136]	; (800c248 <xTaskIncrementTick+0x15c>)
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <xTaskIncrementTick+0x160>)
 800c1ce:	441a      	add	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f7fe fc64 	bl	800aaa4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e0:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <xTaskIncrementTick+0x164>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d3b9      	bcc.n	800c15e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ee:	e7b6      	b.n	800c15e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <xTaskIncrementTick+0x164>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	4915      	ldr	r1, [pc, #84]	; (800c24c <xTaskIncrementTick+0x160>)
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	440b      	add	r3, r1
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d907      	bls.n	800c218 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	e004      	b.n	800c218 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c20e:	4b11      	ldr	r3, [pc, #68]	; (800c254 <xTaskIncrementTick+0x168>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	4a0f      	ldr	r2, [pc, #60]	; (800c254 <xTaskIncrementTick+0x168>)
 800c216:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c218:	4b0f      	ldr	r3, [pc, #60]	; (800c258 <xTaskIncrementTick+0x16c>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c224:	697b      	ldr	r3, [r7, #20]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	2000043c 	.word	0x2000043c
 800c234:	20000418 	.word	0x20000418
 800c238:	200003cc 	.word	0x200003cc
 800c23c:	200003d0 	.word	0x200003d0
 800c240:	2000042c 	.word	0x2000042c
 800c244:	20000434 	.word	0x20000434
 800c248:	2000041c 	.word	0x2000041c
 800c24c:	20000318 	.word	0x20000318
 800c250:	20000314 	.word	0x20000314
 800c254:	20000424 	.word	0x20000424
 800c258:	20000428 	.word	0x20000428

0800c25c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c262:	4b26      	ldr	r3, [pc, #152]	; (800c2fc <vTaskSwitchContext+0xa0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c26a:	4b25      	ldr	r3, [pc, #148]	; (800c300 <vTaskSwitchContext+0xa4>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c270:	e03e      	b.n	800c2f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c272:	4b23      	ldr	r3, [pc, #140]	; (800c300 <vTaskSwitchContext+0xa4>)
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c278:	4b22      	ldr	r3, [pc, #136]	; (800c304 <vTaskSwitchContext+0xa8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	fab3 f383 	clz	r3, r3
 800c284:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	f1c3 031f 	rsb	r3, r3, #31
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	491e      	ldr	r1, [pc, #120]	; (800c308 <vTaskSwitchContext+0xac>)
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	4613      	mov	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	440b      	add	r3, r1
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	e7fe      	b.n	800c2b4 <vTaskSwitchContext+0x58>
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4413      	add	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4a11      	ldr	r2, [pc, #68]	; (800c308 <vTaskSwitchContext+0xac>)
 800c2c2:	4413      	add	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	605a      	str	r2, [r3, #4]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d104      	bne.n	800c2e6 <vTaskSwitchContext+0x8a>
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	605a      	str	r2, [r3, #4]
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	4a07      	ldr	r2, [pc, #28]	; (800c30c <vTaskSwitchContext+0xb0>)
 800c2ee:	6013      	str	r3, [r2, #0]
}
 800c2f0:	bf00      	nop
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	2000043c 	.word	0x2000043c
 800c300:	20000428 	.word	0x20000428
 800c304:	2000041c 	.word	0x2000041c
 800c308:	20000318 	.word	0x20000318
 800c30c:	20000314 	.word	0x20000314

0800c310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <vTaskPlaceOnEventList+0x24>
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	e7fe      	b.n	800c332 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c334:	4b07      	ldr	r3, [pc, #28]	; (800c354 <vTaskPlaceOnEventList+0x44>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3318      	adds	r3, #24
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7fe fbd5 	bl	800aaec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c342:	2101      	movs	r1, #1
 800c344:	6838      	ldr	r0, [r7, #0]
 800c346:	f000 fb8b 	bl	800ca60 <prvAddCurrentTaskToDelayedList>
}
 800c34a:	bf00      	nop
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	20000314 	.word	0x20000314

0800c358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d109      	bne.n	800c382 <xTaskRemoveFromEventList+0x2a>
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e7fe      	b.n	800c380 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	3318      	adds	r3, #24
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fbe9 	bl	800ab5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c38c:	4b1d      	ldr	r3, [pc, #116]	; (800c404 <xTaskRemoveFromEventList+0xac>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d11c      	bne.n	800c3ce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	3304      	adds	r3, #4
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe fbe0 	bl	800ab5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	409a      	lsls	r2, r3
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <xTaskRemoveFromEventList+0xb0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	4a16      	ldr	r2, [pc, #88]	; (800c408 <xTaskRemoveFromEventList+0xb0>)
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4a13      	ldr	r2, [pc, #76]	; (800c40c <xTaskRemoveFromEventList+0xb4>)
 800c3be:	441a      	add	r2, r3
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7fe fb6c 	bl	800aaa4 <vListInsertEnd>
 800c3cc:	e005      	b.n	800c3da <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	3318      	adds	r3, #24
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	480e      	ldr	r0, [pc, #56]	; (800c410 <xTaskRemoveFromEventList+0xb8>)
 800c3d6:	f7fe fb65 	bl	800aaa4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3de:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <xTaskRemoveFromEventList+0xbc>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d905      	bls.n	800c3f4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3ec:	4b0a      	ldr	r3, [pc, #40]	; (800c418 <xTaskRemoveFromEventList+0xc0>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	e001      	b.n	800c3f8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3f8:	697b      	ldr	r3, [r7, #20]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3718      	adds	r7, #24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	2000043c 	.word	0x2000043c
 800c408:	2000041c 	.word	0x2000041c
 800c40c:	20000318 	.word	0x20000318
 800c410:	200003d4 	.word	0x200003d4
 800c414:	20000314 	.word	0x20000314
 800c418:	20000428 	.word	0x20000428

0800c41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c424:	4b06      	ldr	r3, [pc, #24]	; (800c440 <vTaskInternalSetTimeOutState+0x24>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <vTaskInternalSetTimeOutState+0x28>)
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	605a      	str	r2, [r3, #4]
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	2000042c 	.word	0x2000042c
 800c444:	20000418 	.word	0x20000418

0800c448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d109      	bne.n	800c46c <xTaskCheckForTimeOut+0x24>
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	613b      	str	r3, [r7, #16]
 800c46a:	e7fe      	b.n	800c46a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <xTaskCheckForTimeOut+0x3e>
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e7fe      	b.n	800c484 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c486:	f000 fc79 	bl	800cd7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c48a:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <xTaskCheckForTimeOut+0xb8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	69ba      	ldr	r2, [r7, #24]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	d102      	bne.n	800c4aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]
 800c4a8:	e023      	b.n	800c4f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	4b15      	ldr	r3, [pc, #84]	; (800c504 <xTaskCheckForTimeOut+0xbc>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d007      	beq.n	800c4c6 <xTaskCheckForTimeOut+0x7e>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d302      	bcc.n	800c4c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	61fb      	str	r3, [r7, #28]
 800c4c4:	e015      	b.n	800c4f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d20b      	bcs.n	800c4e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ff9d 	bl	800c41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	61fb      	str	r3, [r7, #28]
 800c4e6:	e004      	b.n	800c4f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4f2:	f000 fc71 	bl	800cdd8 <vPortExitCritical>

	return xReturn;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000418 	.word	0x20000418
 800c504:	2000042c 	.word	0x2000042c

0800c508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c50c:	4b03      	ldr	r3, [pc, #12]	; (800c51c <vTaskMissedYield+0x14>)
 800c50e:	2201      	movs	r2, #1
 800c510:	601a      	str	r2, [r3, #0]
}
 800c512:	bf00      	nop
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20000428 	.word	0x20000428

0800c520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c528:	f000 f852 	bl	800c5d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c52c:	4b06      	ldr	r3, [pc, #24]	; (800c548 <prvIdleTask+0x28>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d9f9      	bls.n	800c528 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <prvIdleTask+0x2c>)
 800c536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c544:	e7f0      	b.n	800c528 <prvIdleTask+0x8>
 800c546:	bf00      	nop
 800c548:	20000318 	.word	0x20000318
 800c54c:	e000ed04 	.word	0xe000ed04

0800c550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c556:	2300      	movs	r3, #0
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	e00c      	b.n	800c576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	4613      	mov	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4a12      	ldr	r2, [pc, #72]	; (800c5b0 <prvInitialiseTaskLists+0x60>)
 800c568:	4413      	add	r3, r2
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fa6d 	bl	800aa4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3301      	adds	r3, #1
 800c574:	607b      	str	r3, [r7, #4]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b06      	cmp	r3, #6
 800c57a:	d9ef      	bls.n	800c55c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c57c:	480d      	ldr	r0, [pc, #52]	; (800c5b4 <prvInitialiseTaskLists+0x64>)
 800c57e:	f7fe fa64 	bl	800aa4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c582:	480d      	ldr	r0, [pc, #52]	; (800c5b8 <prvInitialiseTaskLists+0x68>)
 800c584:	f7fe fa61 	bl	800aa4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c588:	480c      	ldr	r0, [pc, #48]	; (800c5bc <prvInitialiseTaskLists+0x6c>)
 800c58a:	f7fe fa5e 	bl	800aa4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c58e:	480c      	ldr	r0, [pc, #48]	; (800c5c0 <prvInitialiseTaskLists+0x70>)
 800c590:	f7fe fa5b 	bl	800aa4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c594:	480b      	ldr	r0, [pc, #44]	; (800c5c4 <prvInitialiseTaskLists+0x74>)
 800c596:	f7fe fa58 	bl	800aa4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c59a:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <prvInitialiseTaskLists+0x78>)
 800c59c:	4a05      	ldr	r2, [pc, #20]	; (800c5b4 <prvInitialiseTaskLists+0x64>)
 800c59e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5a0:	4b0a      	ldr	r3, [pc, #40]	; (800c5cc <prvInitialiseTaskLists+0x7c>)
 800c5a2:	4a05      	ldr	r2, [pc, #20]	; (800c5b8 <prvInitialiseTaskLists+0x68>)
 800c5a4:	601a      	str	r2, [r3, #0]
}
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000318 	.word	0x20000318
 800c5b4:	200003a4 	.word	0x200003a4
 800c5b8:	200003b8 	.word	0x200003b8
 800c5bc:	200003d4 	.word	0x200003d4
 800c5c0:	200003e8 	.word	0x200003e8
 800c5c4:	20000400 	.word	0x20000400
 800c5c8:	200003cc 	.word	0x200003cc
 800c5cc:	200003d0 	.word	0x200003d0

0800c5d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5d6:	e019      	b.n	800c60c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c5d8:	f000 fbd0 	bl	800cd7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <prvCheckTasksWaitingTermination+0x4c>)
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe fab8 	bl	800ab5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <prvCheckTasksWaitingTermination+0x50>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	4a0a      	ldr	r2, [pc, #40]	; (800c620 <prvCheckTasksWaitingTermination+0x50>)
 800c5f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5f8:	4b0a      	ldr	r3, [pc, #40]	; (800c624 <prvCheckTasksWaitingTermination+0x54>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4a09      	ldr	r2, [pc, #36]	; (800c624 <prvCheckTasksWaitingTermination+0x54>)
 800c600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c602:	f000 fbe9 	bl	800cdd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f80e 	bl	800c628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c60c:	4b05      	ldr	r3, [pc, #20]	; (800c624 <prvCheckTasksWaitingTermination+0x54>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e1      	bne.n	800c5d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	200003e8 	.word	0x200003e8
 800c620:	20000414 	.word	0x20000414
 800c624:	200003fc 	.word	0x200003fc

0800c628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c636:	2b00      	cmp	r3, #0
 800c638:	d108      	bne.n	800c64c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fd78 	bl	800d134 <vPortFree>
				vPortFree( pxTCB );
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fd75 	bl	800d134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c64a:	e017      	b.n	800c67c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c652:	2b01      	cmp	r3, #1
 800c654:	d103      	bne.n	800c65e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fd6c 	bl	800d134 <vPortFree>
	}
 800c65c:	e00e      	b.n	800c67c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c664:	2b02      	cmp	r3, #2
 800c666:	d009      	beq.n	800c67c <prvDeleteTCB+0x54>
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	60fb      	str	r3, [r7, #12]
 800c67a:	e7fe      	b.n	800c67a <prvDeleteTCB+0x52>
	}
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c68a:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <prvResetNextTaskUnblockTime+0x38>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d104      	bne.n	800c69e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c694:	4b0a      	ldr	r3, [pc, #40]	; (800c6c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c696:	f04f 32ff 	mov.w	r2, #4294967295
 800c69a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c69c:	e008      	b.n	800c6b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c69e:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <prvResetNextTaskUnblockTime+0x38>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	4a04      	ldr	r2, [pc, #16]	; (800c6c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c6ae:	6013      	str	r3, [r2, #0]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	200003cc 	.word	0x200003cc
 800c6c0:	20000434 	.word	0x20000434

0800c6c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <xTaskGetSchedulerState+0x34>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d102      	bne.n	800c6d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	607b      	str	r3, [r7, #4]
 800c6d6:	e008      	b.n	800c6ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6d8:	4b08      	ldr	r3, [pc, #32]	; (800c6fc <xTaskGetSchedulerState+0x38>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	607b      	str	r3, [r7, #4]
 800c6e4:	e001      	b.n	800c6ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6ea:	687b      	ldr	r3, [r7, #4]
	}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	20000420 	.word	0x20000420
 800c6fc:	2000043c 	.word	0x2000043c

0800c700 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c70c:	2300      	movs	r3, #0
 800c70e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d069      	beq.n	800c7ea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71a:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <xTaskPriorityInherit+0xf4>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	429a      	cmp	r2, r3
 800c722:	d259      	bcs.n	800c7d8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	db06      	blt.n	800c73a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c72c:	4b31      	ldr	r3, [pc, #196]	; (800c7f4 <xTaskPriorityInherit+0xf4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c732:	f1c3 0207 	rsb	r2, r3, #7
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6959      	ldr	r1, [r3, #20]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c742:	4613      	mov	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4a2b      	ldr	r2, [pc, #172]	; (800c7f8 <xTaskPriorityInherit+0xf8>)
 800c74c:	4413      	add	r3, r2
 800c74e:	4299      	cmp	r1, r3
 800c750:	d13a      	bne.n	800c7c8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe fa01 	bl	800ab5e <uxListRemove>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d115      	bne.n	800c78e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c766:	4924      	ldr	r1, [pc, #144]	; (800c7f8 <xTaskPriorityInherit+0xf8>)
 800c768:	4613      	mov	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	440b      	add	r3, r1
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <xTaskPriorityInherit+0x8e>
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	2201      	movs	r2, #1
 800c77e:	fa02 f303 	lsl.w	r3, r2, r3
 800c782:	43da      	mvns	r2, r3
 800c784:	4b1d      	ldr	r3, [pc, #116]	; (800c7fc <xTaskPriorityInherit+0xfc>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4013      	ands	r3, r2
 800c78a:	4a1c      	ldr	r2, [pc, #112]	; (800c7fc <xTaskPriorityInherit+0xfc>)
 800c78c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c78e:	4b19      	ldr	r3, [pc, #100]	; (800c7f4 <xTaskPriorityInherit+0xf4>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79c:	2201      	movs	r2, #1
 800c79e:	409a      	lsls	r2, r3
 800c7a0:	4b16      	ldr	r3, [pc, #88]	; (800c7fc <xTaskPriorityInherit+0xfc>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	4a15      	ldr	r2, [pc, #84]	; (800c7fc <xTaskPriorityInherit+0xfc>)
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4a10      	ldr	r2, [pc, #64]	; (800c7f8 <xTaskPriorityInherit+0xf8>)
 800c7b8:	441a      	add	r2, r3
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	f7fe f96f 	bl	800aaa4 <vListInsertEnd>
 800c7c6:	e004      	b.n	800c7d2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7c8:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <xTaskPriorityInherit+0xf4>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	e008      	b.n	800c7ea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7dc:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <xTaskPriorityInherit+0xf4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d201      	bcs.n	800c7ea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
	}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20000314 	.word	0x20000314
 800c7f8:	20000318 	.word	0x20000318
 800c7fc:	2000041c 	.word	0x2000041c

0800c800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d06c      	beq.n	800c8f0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c816:	4b39      	ldr	r3, [pc, #228]	; (800c8fc <xTaskPriorityDisinherit+0xfc>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d009      	beq.n	800c834 <xTaskPriorityDisinherit+0x34>
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	e7fe      	b.n	800c832 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d109      	bne.n	800c850 <xTaskPriorityDisinherit+0x50>
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60bb      	str	r3, [r7, #8]
 800c84e:	e7fe      	b.n	800c84e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c854:	1e5a      	subs	r2, r3, #1
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c862:	429a      	cmp	r2, r3
 800c864:	d044      	beq.n	800c8f0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d140      	bne.n	800c8f0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	3304      	adds	r3, #4
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe f973 	bl	800ab5e <uxListRemove>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d115      	bne.n	800c8aa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c882:	491f      	ldr	r1, [pc, #124]	; (800c900 <xTaskPriorityDisinherit+0x100>)
 800c884:	4613      	mov	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	440b      	add	r3, r1
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10a      	bne.n	800c8aa <xTaskPriorityDisinherit+0xaa>
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	2201      	movs	r2, #1
 800c89a:	fa02 f303 	lsl.w	r3, r2, r3
 800c89e:	43da      	mvns	r2, r3
 800c8a0:	4b18      	ldr	r3, [pc, #96]	; (800c904 <xTaskPriorityDisinherit+0x104>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	4a17      	ldr	r2, [pc, #92]	; (800c904 <xTaskPriorityDisinherit+0x104>)
 800c8a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	f1c3 0207 	rsb	r2, r3, #7
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	409a      	lsls	r2, r3
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <xTaskPriorityDisinherit+0x104>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	4a0d      	ldr	r2, [pc, #52]	; (800c904 <xTaskPriorityDisinherit+0x104>)
 800c8ce:	6013      	str	r3, [r2, #0]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4a08      	ldr	r2, [pc, #32]	; (800c900 <xTaskPriorityDisinherit+0x100>)
 800c8de:	441a      	add	r2, r3
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f7fe f8dc 	bl	800aaa4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8f0:	697b      	ldr	r3, [r7, #20]
	}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000314 	.word	0x20000314
 800c900:	20000318 	.word	0x20000318
 800c904:	2000041c 	.word	0x2000041c

0800c908 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b088      	sub	sp, #32
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c916:	2301      	movs	r3, #1
 800c918:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8081 	beq.w	800ca24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c926:	2b00      	cmp	r3, #0
 800c928:	d109      	bne.n	800c93e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	e7fe      	b.n	800c93c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d902      	bls.n	800c94e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	61fb      	str	r3, [r7, #28]
 800c94c:	e002      	b.n	800c954 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c952:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d062      	beq.n	800ca24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	429a      	cmp	r2, r3
 800c966:	d15d      	bne.n	800ca24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c968:	4b30      	ldr	r3, [pc, #192]	; (800ca2c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d109      	bne.n	800c986 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	60bb      	str	r3, [r7, #8]
 800c984:	e7fe      	b.n	800c984 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	2b00      	cmp	r3, #0
 800c998:	db04      	blt.n	800c9a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	f1c3 0207 	rsb	r2, r3, #7
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	6959      	ldr	r1, [r3, #20]
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ca30 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c9b4:	4413      	add	r3, r2
 800c9b6:	4299      	cmp	r1, r3
 800c9b8:	d134      	bne.n	800ca24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe f8cd 	bl	800ab5e <uxListRemove>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d115      	bne.n	800c9f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ce:	4918      	ldr	r1, [pc, #96]	; (800ca30 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	440b      	add	r3, r1
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ea:	43da      	mvns	r2, r3
 800c9ec:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	409a      	lsls	r2, r3
 800c9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	4a0b      	ldr	r2, [pc, #44]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4a06      	ldr	r2, [pc, #24]	; (800ca30 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ca16:	441a      	add	r2, r3
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	f7fe f840 	bl	800aaa4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca24:	bf00      	nop
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20000314 	.word	0x20000314
 800ca30:	20000318 	.word	0x20000318
 800ca34:	2000041c 	.word	0x2000041c

0800ca38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca3c:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca4a:	3201      	adds	r2, #1
 800ca4c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ca4e:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca50:	681b      	ldr	r3, [r3, #0]
	}
 800ca52:	4618      	mov	r0, r3
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	20000314 	.word	0x20000314

0800ca60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca6a:	4b29      	ldr	r3, [pc, #164]	; (800cb10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca70:	4b28      	ldr	r3, [pc, #160]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3304      	adds	r3, #4
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe f871 	bl	800ab5e <uxListRemove>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10b      	bne.n	800ca9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca88:	2201      	movs	r2, #1
 800ca8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8e:	43da      	mvns	r2, r3
 800ca90:	4b21      	ldr	r3, [pc, #132]	; (800cb18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4013      	ands	r3, r2
 800ca96:	4a20      	ldr	r2, [pc, #128]	; (800cb18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa0:	d10a      	bne.n	800cab8 <prvAddCurrentTaskToDelayedList+0x58>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d007      	beq.n	800cab8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caa8:	4b1a      	ldr	r3, [pc, #104]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3304      	adds	r3, #4
 800caae:	4619      	mov	r1, r3
 800cab0:	481a      	ldr	r0, [pc, #104]	; (800cb1c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cab2:	f7fd fff7 	bl	800aaa4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cab6:	e026      	b.n	800cb06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4413      	add	r3, r2
 800cabe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cac0:	4b14      	ldr	r3, [pc, #80]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d209      	bcs.n	800cae4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cad0:	4b13      	ldr	r3, [pc, #76]	; (800cb20 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3304      	adds	r3, #4
 800cada:	4619      	mov	r1, r3
 800cadc:	4610      	mov	r0, r2
 800cade:	f7fe f805 	bl	800aaec <vListInsert>
}
 800cae2:	e010      	b.n	800cb06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3304      	adds	r3, #4
 800caee:	4619      	mov	r1, r3
 800caf0:	4610      	mov	r0, r2
 800caf2:	f7fd fffb 	bl	800aaec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800caf6:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d202      	bcs.n	800cb06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cb00:	4a09      	ldr	r2, [pc, #36]	; (800cb28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	6013      	str	r3, [r2, #0]
}
 800cb06:	bf00      	nop
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000418 	.word	0x20000418
 800cb14:	20000314 	.word	0x20000314
 800cb18:	2000041c 	.word	0x2000041c
 800cb1c:	20000400 	.word	0x20000400
 800cb20:	200003d0 	.word	0x200003d0
 800cb24:	200003cc 	.word	0x200003cc
 800cb28:	20000434 	.word	0x20000434

0800cb2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3b04      	subs	r3, #4
 800cb3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3b04      	subs	r3, #4
 800cb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f023 0201 	bic.w	r2, r3, #1
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3b04      	subs	r3, #4
 800cb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb5c:	4a0c      	ldr	r2, [pc, #48]	; (800cb90 <pxPortInitialiseStack+0x64>)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3b14      	subs	r3, #20
 800cb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3b04      	subs	r3, #4
 800cb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f06f 0202 	mvn.w	r2, #2
 800cb7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	3b20      	subs	r3, #32
 800cb80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb82:	68fb      	ldr	r3, [r7, #12]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	0800cb95 	.word	0x0800cb95

0800cb94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb9e:	4b11      	ldr	r3, [pc, #68]	; (800cbe4 <prvTaskExitError+0x50>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba6:	d009      	beq.n	800cbbc <prvTaskExitError+0x28>
 800cba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	e7fe      	b.n	800cbba <prvTaskExitError+0x26>
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbce:	bf00      	nop
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0fc      	beq.n	800cbd0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbd6:	bf00      	nop
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	20000024 	.word	0x20000024
	...

0800cbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <pxCurrentTCBConst2>)
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	6808      	ldr	r0, [r1, #0]
 800cbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfa:	f380 8809 	msr	PSP, r0
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f04f 0000 	mov.w	r0, #0
 800cc06:	f380 8811 	msr	BASEPRI, r0
 800cc0a:	4770      	bx	lr
 800cc0c:	f3af 8000 	nop.w

0800cc10 <pxCurrentTCBConst2>:
 800cc10:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop

0800cc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc18:	4808      	ldr	r0, [pc, #32]	; (800cc3c <prvPortStartFirstTask+0x24>)
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	6800      	ldr	r0, [r0, #0]
 800cc1e:	f380 8808 	msr	MSP, r0
 800cc22:	f04f 0000 	mov.w	r0, #0
 800cc26:	f380 8814 	msr	CONTROL, r0
 800cc2a:	b662      	cpsie	i
 800cc2c:	b661      	cpsie	f
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	df00      	svc	0
 800cc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc3a:	bf00      	nop
 800cc3c:	e000ed08 	.word	0xe000ed08

0800cc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc46:	4b44      	ldr	r3, [pc, #272]	; (800cd58 <xPortStartScheduler+0x118>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a44      	ldr	r2, [pc, #272]	; (800cd5c <xPortStartScheduler+0x11c>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d109      	bne.n	800cc64 <xPortStartScheduler+0x24>
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	613b      	str	r3, [r7, #16]
 800cc62:	e7fe      	b.n	800cc62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc64:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <xPortStartScheduler+0x118>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a3d      	ldr	r2, [pc, #244]	; (800cd60 <xPortStartScheduler+0x120>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d109      	bne.n	800cc82 <xPortStartScheduler+0x42>
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e7fe      	b.n	800cc80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc82:	4b38      	ldr	r3, [pc, #224]	; (800cd64 <xPortStartScheduler+0x124>)
 800cc84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	22ff      	movs	r2, #255	; 0xff
 800cc92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	4b30      	ldr	r3, [pc, #192]	; (800cd68 <xPortStartScheduler+0x128>)
 800cca8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccaa:	4b30      	ldr	r3, [pc, #192]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccac:	2207      	movs	r2, #7
 800ccae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccb0:	e009      	b.n	800ccc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ccb2:	4b2e      	ldr	r3, [pc, #184]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	4a2c      	ldr	r2, [pc, #176]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccbc:	78fb      	ldrb	r3, [r7, #3]
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc6:	78fb      	ldrb	r3, [r7, #3]
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccce:	2b80      	cmp	r3, #128	; 0x80
 800ccd0:	d0ef      	beq.n	800ccb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccd2:	4b26      	ldr	r3, [pc, #152]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f1c3 0307 	rsb	r3, r3, #7
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d009      	beq.n	800ccf2 <xPortStartScheduler+0xb2>
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	60bb      	str	r3, [r7, #8]
 800ccf0:	e7fe      	b.n	800ccf0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccf2:	4b1e      	ldr	r3, [pc, #120]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	4a1c      	ldr	r2, [pc, #112]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccfc:	4b1b      	ldr	r3, [pc, #108]	; (800cd6c <xPortStartScheduler+0x12c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd04:	4a19      	ldr	r2, [pc, #100]	; (800cd6c <xPortStartScheduler+0x12c>)
 800cd06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd10:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <xPortStartScheduler+0x130>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a16      	ldr	r2, [pc, #88]	; (800cd70 <xPortStartScheduler+0x130>)
 800cd16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd1c:	4b14      	ldr	r3, [pc, #80]	; (800cd70 <xPortStartScheduler+0x130>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a13      	ldr	r2, [pc, #76]	; (800cd70 <xPortStartScheduler+0x130>)
 800cd22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd28:	f000 f8d6 	bl	800ced8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd2c:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <xPortStartScheduler+0x134>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd32:	f000 f8f5 	bl	800cf20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd36:	4b10      	ldr	r3, [pc, #64]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a0f      	ldr	r2, [pc, #60]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd42:	f7ff ff69 	bl	800cc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd46:	f7ff fa89 	bl	800c25c <vTaskSwitchContext>
	prvTaskExitError();
 800cd4a:	f7ff ff23 	bl	800cb94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	e000ed00 	.word	0xe000ed00
 800cd5c:	410fc271 	.word	0x410fc271
 800cd60:	410fc270 	.word	0x410fc270
 800cd64:	e000e400 	.word	0xe000e400
 800cd68:	20000440 	.word	0x20000440
 800cd6c:	20000444 	.word	0x20000444
 800cd70:	e000ed20 	.word	0xe000ed20
 800cd74:	20000024 	.word	0x20000024
 800cd78:	e000ef34 	.word	0xe000ef34

0800cd7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd94:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <vPortEnterCritical+0x54>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	4a0d      	ldr	r2, [pc, #52]	; (800cdd0 <vPortEnterCritical+0x54>)
 800cd9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd9e:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <vPortEnterCritical+0x54>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d10e      	bne.n	800cdc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <vPortEnterCritical+0x58>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <vPortEnterCritical+0x48>
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	603b      	str	r3, [r7, #0]
 800cdc2:	e7fe      	b.n	800cdc2 <vPortEnterCritical+0x46>
	}
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	20000024 	.word	0x20000024
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdde:	4b11      	ldr	r3, [pc, #68]	; (800ce24 <vPortExitCritical+0x4c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <vPortExitCritical+0x22>
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	607b      	str	r3, [r7, #4]
 800cdf8:	e7fe      	b.n	800cdf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cdfa:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <vPortExitCritical+0x4c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	4a08      	ldr	r2, [pc, #32]	; (800ce24 <vPortExitCritical+0x4c>)
 800ce02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce04:	4b07      	ldr	r3, [pc, #28]	; (800ce24 <vPortExitCritical+0x4c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d104      	bne.n	800ce16 <vPortExitCritical+0x3e>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	20000024 	.word	0x20000024
	...

0800ce30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce30:	f3ef 8009 	mrs	r0, PSP
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	4b15      	ldr	r3, [pc, #84]	; (800ce90 <pxCurrentTCBConst>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	f01e 0f10 	tst.w	lr, #16
 800ce40:	bf08      	it	eq
 800ce42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4a:	6010      	str	r0, [r2, #0]
 800ce4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce54:	f380 8811 	msr	BASEPRI, r0
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f7ff f9fc 	bl	800c25c <vTaskSwitchContext>
 800ce64:	f04f 0000 	mov.w	r0, #0
 800ce68:	f380 8811 	msr	BASEPRI, r0
 800ce6c:	bc09      	pop	{r0, r3}
 800ce6e:	6819      	ldr	r1, [r3, #0]
 800ce70:	6808      	ldr	r0, [r1, #0]
 800ce72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce76:	f01e 0f10 	tst.w	lr, #16
 800ce7a:	bf08      	it	eq
 800ce7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce80:	f380 8809 	msr	PSP, r0
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w

0800ce90 <pxCurrentTCBConst>:
 800ce90:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce94:	bf00      	nop
 800ce96:	bf00      	nop

0800ce98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ceb0:	f7ff f91c 	bl	800c0ec <xTaskIncrementTick>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ceba:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <SysTick_Handler+0x3c>)
 800cebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	2300      	movs	r3, #0
 800cec4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	e000ed04 	.word	0xe000ed04

0800ced8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cedc:	4b0b      	ldr	r3, [pc, #44]	; (800cf0c <vPortSetupTimerInterrupt+0x34>)
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cee2:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <vPortSetupTimerInterrupt+0x38>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <vPortSetupTimerInterrupt+0x3c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a0a      	ldr	r2, [pc, #40]	; (800cf18 <vPortSetupTimerInterrupt+0x40>)
 800ceee:	fba2 2303 	umull	r2, r3, r2, r3
 800cef2:	099b      	lsrs	r3, r3, #6
 800cef4:	4a09      	ldr	r2, [pc, #36]	; (800cf1c <vPortSetupTimerInterrupt+0x44>)
 800cef6:	3b01      	subs	r3, #1
 800cef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cefa:	4b04      	ldr	r3, [pc, #16]	; (800cf0c <vPortSetupTimerInterrupt+0x34>)
 800cefc:	2207      	movs	r2, #7
 800cefe:	601a      	str	r2, [r3, #0]
}
 800cf00:	bf00      	nop
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	e000e010 	.word	0xe000e010
 800cf10:	e000e018 	.word	0xe000e018
 800cf14:	20000000 	.word	0x20000000
 800cf18:	10624dd3 	.word	0x10624dd3
 800cf1c:	e000e014 	.word	0xe000e014

0800cf20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf30 <vPortEnableVFP+0x10>
 800cf24:	6801      	ldr	r1, [r0, #0]
 800cf26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf2a:	6001      	str	r1, [r0, #0]
 800cf2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf2e:	bf00      	nop
 800cf30:	e000ed88 	.word	0xe000ed88

0800cf34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf3a:	f3ef 8305 	mrs	r3, IPSR
 800cf3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b0f      	cmp	r3, #15
 800cf44:	d913      	bls.n	800cf6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf46:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <vPortValidateInterruptPriority+0x6c>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf50:	4b14      	ldr	r3, [pc, #80]	; (800cfa4 <vPortValidateInterruptPriority+0x70>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	7afa      	ldrb	r2, [r7, #11]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d209      	bcs.n	800cf6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	607b      	str	r3, [r7, #4]
 800cf6c:	e7fe      	b.n	800cf6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf6e:	4b0e      	ldr	r3, [pc, #56]	; (800cfa8 <vPortValidateInterruptPriority+0x74>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <vPortValidateInterruptPriority+0x78>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d909      	bls.n	800cf92 <vPortValidateInterruptPriority+0x5e>
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	e7fe      	b.n	800cf90 <vPortValidateInterruptPriority+0x5c>
	}
 800cf92:	bf00      	nop
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	e000e3f0 	.word	0xe000e3f0
 800cfa4:	20000440 	.word	0x20000440
 800cfa8:	e000ed0c 	.word	0xe000ed0c
 800cfac:	20000444 	.word	0x20000444

0800cfb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08a      	sub	sp, #40	; 0x28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfbc:	f7fe ffca 	bl	800bf54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfc0:	4b57      	ldr	r3, [pc, #348]	; (800d120 <pvPortMalloc+0x170>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfc8:	f000 f90c 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfcc:	4b55      	ldr	r3, [pc, #340]	; (800d124 <pvPortMalloc+0x174>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f040 808c 	bne.w	800d0f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d01c      	beq.n	800d01a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cfe0:	2208      	movs	r2, #8
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f003 0307 	and.w	r3, r3, #7
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d013      	beq.n	800d01a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f023 0307 	bic.w	r3, r3, #7
 800cff8:	3308      	adds	r3, #8
 800cffa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	2b00      	cmp	r3, #0
 800d004:	d009      	beq.n	800d01a <pvPortMalloc+0x6a>
 800d006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	e7fe      	b.n	800d018 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d068      	beq.n	800d0f2 <pvPortMalloc+0x142>
 800d020:	4b41      	ldr	r3, [pc, #260]	; (800d128 <pvPortMalloc+0x178>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	429a      	cmp	r2, r3
 800d028:	d863      	bhi.n	800d0f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d02a:	4b40      	ldr	r3, [pc, #256]	; (800d12c <pvPortMalloc+0x17c>)
 800d02c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d02e:	4b3f      	ldr	r3, [pc, #252]	; (800d12c <pvPortMalloc+0x17c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d034:	e004      	b.n	800d040 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	429a      	cmp	r2, r3
 800d048:	d903      	bls.n	800d052 <pvPortMalloc+0xa2>
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f1      	bne.n	800d036 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d052:	4b33      	ldr	r3, [pc, #204]	; (800d120 <pvPortMalloc+0x170>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d058:	429a      	cmp	r2, r3
 800d05a:	d04a      	beq.n	800d0f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2208      	movs	r2, #8
 800d062:	4413      	add	r3, r2
 800d064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	1ad2      	subs	r2, r2, r3
 800d076:	2308      	movs	r3, #8
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d91e      	bls.n	800d0bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4413      	add	r3, r2
 800d084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	f003 0307 	and.w	r3, r3, #7
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d009      	beq.n	800d0a4 <pvPortMalloc+0xf4>
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	613b      	str	r3, [r7, #16]
 800d0a2:	e7fe      	b.n	800d0a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	1ad2      	subs	r2, r2, r3
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0b6:	69b8      	ldr	r0, [r7, #24]
 800d0b8:	f000 f8f6 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0bc:	4b1a      	ldr	r3, [pc, #104]	; (800d128 <pvPortMalloc+0x178>)
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	4a18      	ldr	r2, [pc, #96]	; (800d128 <pvPortMalloc+0x178>)
 800d0c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0ca:	4b17      	ldr	r3, [pc, #92]	; (800d128 <pvPortMalloc+0x178>)
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	4b18      	ldr	r3, [pc, #96]	; (800d130 <pvPortMalloc+0x180>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d203      	bcs.n	800d0de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0d6:	4b14      	ldr	r3, [pc, #80]	; (800d128 <pvPortMalloc+0x178>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a15      	ldr	r2, [pc, #84]	; (800d130 <pvPortMalloc+0x180>)
 800d0dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	4b10      	ldr	r3, [pc, #64]	; (800d124 <pvPortMalloc+0x174>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0f2:	f7fe ff3d 	bl	800bf70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	f003 0307 	and.w	r3, r3, #7
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <pvPortMalloc+0x164>
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	e7fe      	b.n	800d112 <pvPortMalloc+0x162>
	return pvReturn;
 800d114:	69fb      	ldr	r3, [r7, #28]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3728      	adds	r7, #40	; 0x28
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	2000c7a0 	.word	0x2000c7a0
 800d124:	2000c7ac 	.word	0x2000c7ac
 800d128:	2000c7a4 	.word	0x2000c7a4
 800d12c:	2000c798 	.word	0x2000c798
 800d130:	2000c7a8 	.word	0x2000c7a8

0800d134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d046      	beq.n	800d1d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d146:	2308      	movs	r3, #8
 800d148:	425b      	negs	r3, r3
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	685a      	ldr	r2, [r3, #4]
 800d158:	4b20      	ldr	r3, [pc, #128]	; (800d1dc <vPortFree+0xa8>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4013      	ands	r3, r2
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d109      	bne.n	800d176 <vPortFree+0x42>
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	e7fe      	b.n	800d174 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d009      	beq.n	800d192 <vPortFree+0x5e>
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	60bb      	str	r3, [r7, #8]
 800d190:	e7fe      	b.n	800d190 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <vPortFree+0xa8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d019      	beq.n	800d1d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d115      	bne.n	800d1d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <vPortFree+0xa8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	401a      	ands	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1b8:	f7fe fecc 	bl	800bf54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	685a      	ldr	r2, [r3, #4]
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xac>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xac>)
 800d1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ca:	6938      	ldr	r0, [r7, #16]
 800d1cc:	f000 f86c 	bl	800d2a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d1d0:	f7fe fece 	bl	800bf70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1d4:	bf00      	nop
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	2000c7ac 	.word	0x2000c7ac
 800d1e0:	2000c7a4 	.word	0x2000c7a4

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20000448 	.word	0x20000448
 800d294:	2000c798 	.word	0x2000c798
 800d298:	2000c7a0 	.word	0x2000c7a0
 800d29c:	2000c7a8 	.word	0x2000c7a8
 800d2a0:	2000c7a4 	.word	0x2000c7a4
 800d2a4:	2000c7ac 	.word	0x2000c7ac

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	2000c798 	.word	0x2000c798
 800d358:	2000c7a0 	.word	0x2000c7a0

0800d35c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	330c      	adds	r3, #12
 800d36c:	461a      	mov	r2, r3
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f002 f96f 	bl	800f654 <tcpip_send_msg_wait_sem>
 800d376:	4603      	mov	r3, r0
 800d378:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d103      	bne.n	800d38a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d388:	e001      	b.n	800d38e <netconn_apimsg+0x32>
  }
  return err;
 800d38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
	...

0800d398 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08a      	sub	sp, #40	; 0x28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	603a      	str	r2, [r7, #0]
 800d3a2:	71fb      	strb	r3, [r7, #7]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 ff83 	bl	800e2b8 <netconn_alloc>
 800d3b2:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d054      	beq.n	800d464 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d3ba:	79bb      	ldrb	r3, [r7, #6]
 800d3bc:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d3c2:	f107 030c 	add.w	r3, r7, #12
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4829      	ldr	r0, [pc, #164]	; (800d470 <netconn_new_with_proto_and_callback+0xd8>)
 800d3ca:	f7ff ffc7 	bl	800d35c <netconn_apimsg>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800d3d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d043      	beq.n	800d464 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d005      	beq.n	800d3f0 <netconn_new_with_proto_and_callback+0x58>
 800d3e4:	4b23      	ldr	r3, [pc, #140]	; (800d474 <netconn_new_with_proto_and_callback+0xdc>)
 800d3e6:	2289      	movs	r2, #137	; 0x89
 800d3e8:	4923      	ldr	r1, [pc, #140]	; (800d478 <netconn_new_with_proto_and_callback+0xe0>)
 800d3ea:	4824      	ldr	r0, [pc, #144]	; (800d47c <netconn_new_with_proto_and_callback+0xe4>)
 800d3ec:	f00c f888 	bl	8019500 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	3310      	adds	r3, #16
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f00b ff03 	bl	8019200 <sys_mbox_valid>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d105      	bne.n	800d40c <netconn_new_with_proto_and_callback+0x74>
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <netconn_new_with_proto_and_callback+0xdc>)
 800d402:	228a      	movs	r2, #138	; 0x8a
 800d404:	491e      	ldr	r1, [pc, #120]	; (800d480 <netconn_new_with_proto_and_callback+0xe8>)
 800d406:	481d      	ldr	r0, [pc, #116]	; (800d47c <netconn_new_with_proto_and_callback+0xe4>)
 800d408:	f00c f87a 	bl	8019500 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	3314      	adds	r3, #20
 800d410:	4618      	mov	r0, r3
 800d412:	f00b fef5 	bl	8019200 <sys_mbox_valid>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <netconn_new_with_proto_and_callback+0x90>
 800d41c:	4b15      	ldr	r3, [pc, #84]	; (800d474 <netconn_new_with_proto_and_callback+0xdc>)
 800d41e:	228c      	movs	r2, #140	; 0x8c
 800d420:	4918      	ldr	r1, [pc, #96]	; (800d484 <netconn_new_with_proto_and_callback+0xec>)
 800d422:	4816      	ldr	r0, [pc, #88]	; (800d47c <netconn_new_with_proto_and_callback+0xe4>)
 800d424:	f00c f86c 	bl	8019500 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	330c      	adds	r3, #12
 800d42c:	4618      	mov	r0, r3
 800d42e:	f00b ff78 	bl	8019322 <sys_sem_valid>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d105      	bne.n	800d444 <netconn_new_with_proto_and_callback+0xac>
 800d438:	4b0e      	ldr	r3, [pc, #56]	; (800d474 <netconn_new_with_proto_and_callback+0xdc>)
 800d43a:	228f      	movs	r2, #143	; 0x8f
 800d43c:	4912      	ldr	r1, [pc, #72]	; (800d488 <netconn_new_with_proto_and_callback+0xf0>)
 800d43e:	480f      	ldr	r0, [pc, #60]	; (800d47c <netconn_new_with_proto_and_callback+0xe4>)
 800d440:	f00c f85e 	bl	8019500 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	330c      	adds	r3, #12
 800d448:	4618      	mov	r0, r3
 800d44a:	f00b ff5d 	bl	8019308 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	3310      	adds	r3, #16
 800d452:	4618      	mov	r0, r3
 800d454:	f00b fe38 	bl	80190c8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d45a:	2007      	movs	r0, #7
 800d45c:	f002 fddc 	bl	8010018 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d460:	2300      	movs	r3, #0
 800d462:	e000      	b.n	800d466 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d466:	4618      	mov	r0, r3
 800d468:	3728      	adds	r7, #40	; 0x28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	0800e261 	.word	0x0800e261
 800d474:	0801a768 	.word	0x0801a768
 800d478:	0801a7c0 	.word	0x0801a7c0
 800d47c:	0801a7e4 	.word	0x0801a7e4
 800d480:	0801a80c 	.word	0x0801a80c
 800d484:	0801a824 	.word	0x0801a824
 800d488:	0801a848 	.word	0x0801a848

0800d48c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <netconn_delete+0x12>
    return ERR_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e016      	b.n	800d4cc <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d4a2:	2329      	movs	r3, #41	; 0x29
 800d4a4:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4809      	ldr	r0, [pc, #36]	; (800d4d4 <netconn_delete+0x48>)
 800d4ae:	f7ff ff55 	bl	800d35c <netconn_apimsg>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d4b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <netconn_delete+0x38>
    return err;
 800d4be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4c2:	e003      	b.n	800d4cc <netconn_delete+0x40>
  }

  netconn_free(conn);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 ff67 	bl	800e398 <netconn_free>

  return ERR_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3720      	adds	r7, #32
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	0800e81d 	.word	0x0800e81d

0800d4d8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	; 0x28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d108      	bne.n	800d4fe <netconn_bind+0x26>
 800d4ec:	4b11      	ldr	r3, [pc, #68]	; (800d534 <netconn_bind+0x5c>)
 800d4ee:	22ff      	movs	r2, #255	; 0xff
 800d4f0:	4911      	ldr	r1, [pc, #68]	; (800d538 <netconn_bind+0x60>)
 800d4f2:	4812      	ldr	r0, [pc, #72]	; (800d53c <netconn_bind+0x64>)
 800d4f4:	f00c f804 	bl	8019500 <iprintf>
 800d4f8:	f06f 030f 	mvn.w	r3, #15
 800d4fc:	e015      	b.n	800d52a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <netconn_bind+0x68>)
 800d506:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d510:	88fb      	ldrh	r3, [r7, #6]
 800d512:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d514:	f107 0310 	add.w	r3, r7, #16
 800d518:	4619      	mov	r1, r3
 800d51a:	480a      	ldr	r0, [pc, #40]	; (800d544 <netconn_bind+0x6c>)
 800d51c:	f7ff ff1e 	bl	800d35c <netconn_apimsg>
 800d520:	4603      	mov	r3, r0
 800d522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800d526:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3728      	adds	r7, #40	; 0x28
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	0801a768 	.word	0x0801a768
 800d538:	0801a8c4 	.word	0x0801a8c4
 800d53c:	0801a7e4 	.word	0x0801a7e4
 800d540:	0801d1ac 	.word	0x0801d1ac
 800d544:	0800ea21 	.word	0x0800ea21

0800d548 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	460b      	mov	r3, r1
 800d552:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d109      	bne.n	800d56e <netconn_listen_with_backlog+0x26>
 800d55a:	4b0d      	ldr	r3, [pc, #52]	; (800d590 <netconn_listen_with_backlog+0x48>)
 800d55c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d560:	490c      	ldr	r1, [pc, #48]	; (800d594 <netconn_listen_with_backlog+0x4c>)
 800d562:	480d      	ldr	r0, [pc, #52]	; (800d598 <netconn_listen_with_backlog+0x50>)
 800d564:	f00b ffcc 	bl	8019500 <iprintf>
 800d568:	f06f 030f 	mvn.w	r3, #15
 800d56c:	e00b      	b.n	800d586 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d572:	f107 0308 	add.w	r3, r7, #8
 800d576:	4619      	mov	r1, r3
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <netconn_listen_with_backlog+0x54>)
 800d57a:	f7ff feef 	bl	800d35c <netconn_apimsg>
 800d57e:	4603      	mov	r3, r0
 800d580:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d582:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d586:	4618      	mov	r0, r3
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	0801a768 	.word	0x0801a768
 800d594:	0801a924 	.word	0x0801a924
 800d598:	0801a7e4 	.word	0x0801a7e4
 800d59c:	0800eae1 	.word	0x0800eae1

0800d5a0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d109      	bne.n	800d5c4 <netconn_accept+0x24>
 800d5b0:	4b34      	ldr	r3, [pc, #208]	; (800d684 <netconn_accept+0xe4>)
 800d5b2:	f240 128d 	movw	r2, #397	; 0x18d
 800d5b6:	4934      	ldr	r1, [pc, #208]	; (800d688 <netconn_accept+0xe8>)
 800d5b8:	4834      	ldr	r0, [pc, #208]	; (800d68c <netconn_accept+0xec>)
 800d5ba:	f00b ffa1 	bl	8019500 <iprintf>
 800d5be:	f06f 030f 	mvn.w	r3, #15
 800d5c2:	e05b      	b.n	800d67c <netconn_accept+0xdc>
  *new_conn = NULL;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d109      	bne.n	800d5e4 <netconn_accept+0x44>
 800d5d0:	4b2c      	ldr	r3, [pc, #176]	; (800d684 <netconn_accept+0xe4>)
 800d5d2:	f240 128f 	movw	r2, #399	; 0x18f
 800d5d6:	492e      	ldr	r1, [pc, #184]	; (800d690 <netconn_accept+0xf0>)
 800d5d8:	482c      	ldr	r0, [pc, #176]	; (800d68c <netconn_accept+0xec>)
 800d5da:	f00b ff91 	bl	8019500 <iprintf>
 800d5de:	f06f 030f 	mvn.w	r3, #15
 800d5e2:	e04b      	b.n	800d67c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d5ea:	f113 0f0c 	cmn.w	r3, #12
 800d5ee:	da03      	bge.n	800d5f8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d5f6:	e041      	b.n	800d67c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3314      	adds	r3, #20
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f00b fdff 	bl	8019200 <sys_mbox_valid>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <netconn_accept+0x6e>
    return ERR_CLSD;
 800d608:	f06f 030e 	mvn.w	r3, #14
 800d60c:	e036      	b.n	800d67c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3314      	adds	r3, #20
 800d612:	f107 010c 	add.w	r1, r7, #12
 800d616:	2200      	movs	r2, #0
 800d618:	4618      	mov	r0, r3
 800d61a:	f00b fd96 	bl	801914a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <netconn_accept+0x96>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	2200      	movs	r2, #0
 800d630:	2101      	movs	r1, #1
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	4a16      	ldr	r2, [pc, #88]	; (800d694 <netconn_accept+0xf4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d102      	bne.n	800d644 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800d63e:	f06f 030c 	mvn.w	r3, #12
 800d642:	e01b      	b.n	800d67c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d114      	bne.n	800d674 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00e      	beq.n	800d66e <netconn_accept+0xce>
 800d650:	f00b fef2 	bl	8019438 <sys_arch_protect>
 800d654:	6138      	str	r0, [r7, #16]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d65c:	f113 0f0c 	cmn.w	r3, #12
 800d660:	db02      	blt.n	800d668 <netconn_accept+0xc8>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	22f1      	movs	r2, #241	; 0xf1
 800d666:	721a      	strb	r2, [r3, #8]
 800d668:	6938      	ldr	r0, [r7, #16]
 800d66a:	f00b fef3 	bl	8019454 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800d66e:	f06f 030e 	mvn.w	r3, #14
 800d672:	e003      	b.n	800d67c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d67a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0801a768 	.word	0x0801a768
 800d688:	0801a944 	.word	0x0801a944
 800d68c:	0801a7e4 	.word	0x0801a7e4
 800d690:	0801a964 	.word	0x0801a964
 800d694:	2000d108 	.word	0x2000d108

0800d698 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08a      	sub	sp, #40	; 0x28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d109      	bne.n	800d6c0 <netconn_recv_data+0x28>
 800d6ac:	4b5c      	ldr	r3, [pc, #368]	; (800d820 <netconn_recv_data+0x188>)
 800d6ae:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d6b2:	495c      	ldr	r1, [pc, #368]	; (800d824 <netconn_recv_data+0x18c>)
 800d6b4:	485c      	ldr	r0, [pc, #368]	; (800d828 <netconn_recv_data+0x190>)
 800d6b6:	f00b ff23 	bl	8019500 <iprintf>
 800d6ba:	f06f 030f 	mvn.w	r3, #15
 800d6be:	e0aa      	b.n	800d816 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <netconn_recv_data+0x48>
 800d6cc:	4b54      	ldr	r3, [pc, #336]	; (800d820 <netconn_recv_data+0x188>)
 800d6ce:	f240 12e9 	movw	r2, #489	; 0x1e9
 800d6d2:	4956      	ldr	r1, [pc, #344]	; (800d82c <netconn_recv_data+0x194>)
 800d6d4:	4854      	ldr	r0, [pc, #336]	; (800d828 <netconn_recv_data+0x190>)
 800d6d6:	f00b ff13 	bl	8019500 <iprintf>
 800d6da:	f06f 030f 	mvn.w	r3, #15
 800d6de:	e09a      	b.n	800d816 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6e8:	2b10      	cmp	r3, #16
 800d6ea:	d115      	bne.n	800d718 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	3310      	adds	r3, #16
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f00b fd85 	bl	8019200 <sys_mbox_valid>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10d      	bne.n	800d718 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3314      	adds	r3, #20
 800d700:	4618      	mov	r0, r3
 800d702:	f00b fd7d 	bl	8019200 <sys_mbox_valid>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <netconn_recv_data+0x7a>
 800d70c:	f06f 030a 	mvn.w	r3, #10
 800d710:	e081      	b.n	800d816 <netconn_recv_data+0x17e>
 800d712:	f06f 030e 	mvn.w	r3, #14
 800d716:	e07e      	b.n	800d816 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3310      	adds	r3, #16
 800d71c:	4618      	mov	r0, r3
 800d71e:	f00b fd6f 	bl	8019200 <sys_mbox_valid>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d109      	bne.n	800d73c <netconn_recv_data+0xa4>
 800d728:	4b3d      	ldr	r3, [pc, #244]	; (800d820 <netconn_recv_data+0x188>)
 800d72a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d72e:	4940      	ldr	r1, [pc, #256]	; (800d830 <netconn_recv_data+0x198>)
 800d730:	483d      	ldr	r0, [pc, #244]	; (800d828 <netconn_recv_data+0x190>)
 800d732:	f00b fee5 	bl	8019500 <iprintf>
 800d736:	f06f 030a 	mvn.w	r3, #10
 800d73a:	e06c      	b.n	800d816 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d742:	f113 0f0c 	cmn.w	r3, #12
 800d746:	da03      	bge.n	800d750 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d74e:	e062      	b.n	800d816 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3310      	adds	r3, #16
 800d754:	f107 0120 	add.w	r1, r7, #32
 800d758:	2200      	movs	r2, #0
 800d75a:	4618      	mov	r0, r3
 800d75c:	f00b fcf5 	bl	801914a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d768:	2b10      	cmp	r3, #16
 800d76a:	d138      	bne.n	800d7de <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	e001      	b.n	800d782 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d77e:	2301      	movs	r3, #1
 800d780:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d782:	f107 030c 	add.w	r3, r7, #12
 800d786:	4619      	mov	r1, r3
 800d788:	482a      	ldr	r0, [pc, #168]	; (800d834 <netconn_recv_data+0x19c>)
 800d78a:	f7ff fde7 	bl	800d35c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d120      	bne.n	800d7d6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <netconn_recv_data+0x110>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2101      	movs	r1, #1
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10b      	bne.n	800d7c8 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d003      	beq.n	800d7c2 <netconn_recv_data+0x12a>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d7c0:	e029      	b.n	800d816 <netconn_recv_data+0x17e>
 800d7c2:	f06f 030d 	mvn.w	r3, #13
 800d7c6:	e026      	b.n	800d816 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f926 	bl	800da1c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d7d0:	f06f 030e 	mvn.w	r3, #14
 800d7d4:	e01f      	b.n	800d816 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	891b      	ldrh	r3, [r3, #8]
 800d7da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d7dc:	e00d      	b.n	800d7fa <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <netconn_recv_data+0x15a>
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <netconn_recv_data+0x188>)
 800d7e6:	f240 223e 	movw	r2, #574	; 0x23e
 800d7ea:	4913      	ldr	r1, [pc, #76]	; (800d838 <netconn_recv_data+0x1a0>)
 800d7ec:	480e      	ldr	r0, [pc, #56]	; (800d828 <netconn_recv_data+0x190>)
 800d7ee:	f00b fe87 	bl	8019500 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	891b      	ldrh	r3, [r3, #8]
 800d7f8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d005      	beq.n	800d80e <netconn_recv_data+0x176>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d806:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d808:	2101      	movs	r1, #1
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d80e:	6a3a      	ldr	r2, [r7, #32]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3728      	adds	r7, #40	; 0x28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	0801a768 	.word	0x0801a768
 800d824:	0801a984 	.word	0x0801a984
 800d828:	0801a7e4 	.word	0x0801a7e4
 800d82c:	0801a9a4 	.word	0x0801a9a4
 800d830:	0801a9c0 	.word	0x0801a9c0
 800d834:	0800ec65 	.word	0x0800ec65
 800d838:	0801a9e0 	.word	0x0801a9e0

0800d83c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d109      	bne.n	800d864 <netconn_recv+0x28>
 800d850:	4b31      	ldr	r3, [pc, #196]	; (800d918 <netconn_recv+0xdc>)
 800d852:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d856:	4931      	ldr	r1, [pc, #196]	; (800d91c <netconn_recv+0xe0>)
 800d858:	4831      	ldr	r0, [pc, #196]	; (800d920 <netconn_recv+0xe4>)
 800d85a:	f00b fe51 	bl	8019500 <iprintf>
 800d85e:	f06f 030f 	mvn.w	r3, #15
 800d862:	e054      	b.n	800d90e <netconn_recv+0xd2>
  *new_buf = NULL;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2200      	movs	r2, #0
 800d868:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d109      	bne.n	800d884 <netconn_recv+0x48>
 800d870:	4b29      	ldr	r3, [pc, #164]	; (800d918 <netconn_recv+0xdc>)
 800d872:	f240 2276 	movw	r2, #630	; 0x276
 800d876:	492b      	ldr	r1, [pc, #172]	; (800d924 <netconn_recv+0xe8>)
 800d878:	4829      	ldr	r0, [pc, #164]	; (800d920 <netconn_recv+0xe4>)
 800d87a:	f00b fe41 	bl	8019500 <iprintf>
 800d87e:	f06f 030f 	mvn.w	r3, #15
 800d882:	e044      	b.n	800d90e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d88c:	2b10      	cmp	r3, #16
 800d88e:	d139      	bne.n	800d904 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d890:	2300      	movs	r3, #0
 800d892:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d894:	2006      	movs	r0, #6
 800d896:	f002 fb49 	bl	800ff2c <memp_malloc>
 800d89a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d102      	bne.n	800d8a8 <netconn_recv+0x6c>
      return ERR_MEM;
 800d8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a6:	e032      	b.n	800d90e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff fef2 	bl	800d698 <netconn_recv_data>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d8b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d006      	beq.n	800d8ce <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d8c0:	6979      	ldr	r1, [r7, #20]
 800d8c2:	2006      	movs	r0, #6
 800d8c4:	f002 fba8 	bl	8010018 <memp_free>
      return err;
 800d8c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8cc:	e01f      	b.n	800d90e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <netconn_recv+0xa6>
 800d8d4:	4b10      	ldr	r3, [pc, #64]	; (800d918 <netconn_recv+0xdc>)
 800d8d6:	f240 228a 	movw	r2, #650	; 0x28a
 800d8da:	4913      	ldr	r1, [pc, #76]	; (800d928 <netconn_recv+0xec>)
 800d8dc:	4810      	ldr	r0, [pc, #64]	; (800d920 <netconn_recv+0xe4>)
 800d8de:	f00b fe0f 	bl	8019500 <iprintf>

    buf->p = p;
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	e004      	b.n	800d90e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fec6 	bl	800d698 <netconn_recv_data>
 800d90c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	0801a768 	.word	0x0801a768
 800d91c:	0801a984 	.word	0x0801a984
 800d920:	0801a7e4 	.word	0x0801a7e4
 800d924:	0801a9a4 	.word	0x0801a9a4
 800d928:	0801a9ec 	.word	0x0801a9ec

0800d92c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08a      	sub	sp, #40	; 0x28
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
 800d938:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <netconn_write_partly+0x28>
 800d940:	4b31      	ldr	r3, [pc, #196]	; (800da08 <netconn_write_partly+0xdc>)
 800d942:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d946:	4931      	ldr	r1, [pc, #196]	; (800da0c <netconn_write_partly+0xe0>)
 800d948:	4831      	ldr	r0, [pc, #196]	; (800da10 <netconn_write_partly+0xe4>)
 800d94a:	f00b fdd9 	bl	8019500 <iprintf>
 800d94e:	f06f 030f 	mvn.w	r3, #15
 800d952:	e054      	b.n	800d9fe <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d95c:	2b10      	cmp	r3, #16
 800d95e:	d009      	beq.n	800d974 <netconn_write_partly+0x48>
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <netconn_write_partly+0xdc>)
 800d962:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d966:	492b      	ldr	r1, [pc, #172]	; (800da14 <netconn_write_partly+0xe8>)
 800d968:	4829      	ldr	r0, [pc, #164]	; (800da10 <netconn_write_partly+0xe4>)
 800d96a:	f00b fdc9 	bl	8019500 <iprintf>
 800d96e:	f06f 0305 	mvn.w	r3, #5
 800d972:	e044      	b.n	800d9fe <netconn_write_partly+0xd2>
  if (size == 0) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <netconn_write_partly+0x52>
    return ERR_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	e03f      	b.n	800d9fe <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	7f1b      	ldrb	r3, [r3, #28]
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d104      	bne.n	800d994 <netconn_write_partly+0x68>
 800d98a:	78fb      	ldrb	r3, [r7, #3]
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <netconn_write_partly+0x6c>
 800d994:	2301      	movs	r3, #1
 800d996:	e000      	b.n	800d99a <netconn_write_partly+0x6e>
 800d998:	2300      	movs	r3, #0
 800d99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <netconn_write_partly+0x86>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d9ac:	f06f 0305 	mvn.w	r3, #5
 800d9b0:	e025      	b.n	800d9fe <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d9ba:	78fb      	ldrb	r3, [r7, #3]
 800d9bc:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4813      	ldr	r0, [pc, #76]	; (800da18 <netconn_write_partly+0xec>)
 800d9cc:	f7ff fcc6 	bl	800d35c <netconn_apimsg>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d9d6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <netconn_write_partly+0xce>
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00a      	beq.n	800d9fa <netconn_write_partly+0xce>
    if (dontblock) {
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d003      	beq.n	800d9f4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	e002      	b.n	800d9fa <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d9fa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3728      	adds	r7, #40	; 0x28
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	0801a768 	.word	0x0801a768
 800da0c:	0801aa14 	.word	0x0801aa14
 800da10:	0801a7e4 	.word	0x0801a7e4
 800da14:	0801aa30 	.word	0x0801aa30
 800da18:	0800f045 	.word	0x0800f045

0800da1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b088      	sub	sp, #32
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d109      	bne.n	800da42 <netconn_close_shutdown+0x26>
 800da2e:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <netconn_close_shutdown+0x50>)
 800da30:	f44f 724a 	mov.w	r2, #808	; 0x328
 800da34:	490e      	ldr	r1, [pc, #56]	; (800da70 <netconn_close_shutdown+0x54>)
 800da36:	480f      	ldr	r0, [pc, #60]	; (800da74 <netconn_close_shutdown+0x58>)
 800da38:	f00b fd62 	bl	8019500 <iprintf>
 800da3c:	f06f 030f 	mvn.w	r3, #15
 800da40:	e00f      	b.n	800da62 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800da4a:	2329      	movs	r3, #41	; 0x29
 800da4c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800da4e:	f107 0308 	add.w	r3, r7, #8
 800da52:	4619      	mov	r1, r3
 800da54:	4808      	ldr	r0, [pc, #32]	; (800da78 <netconn_close_shutdown+0x5c>)
 800da56:	f7ff fc81 	bl	800d35c <netconn_apimsg>
 800da5a:	4603      	mov	r3, r0
 800da5c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800da5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	0801a768 	.word	0x0801a768
 800da70:	0801aa54 	.word	0x0801aa54
 800da74:	0801a7e4 	.word	0x0801a7e4
 800da78:	0800f1a5 	.word	0x0800f1a5

0800da7c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800da84:	2103      	movs	r1, #3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff ffc8 	bl	800da1c <netconn_close_shutdown>
 800da8c:	4603      	mov	r3, r0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
	...

0800da98 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b088      	sub	sp, #32
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]
 800daa4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d105      	bne.n	800dab8 <recv_udp+0x20>
 800daac:	4b34      	ldr	r3, [pc, #208]	; (800db80 <recv_udp+0xe8>)
 800daae:	22b1      	movs	r2, #177	; 0xb1
 800dab0:	4934      	ldr	r1, [pc, #208]	; (800db84 <recv_udp+0xec>)
 800dab2:	4835      	ldr	r0, [pc, #212]	; (800db88 <recv_udp+0xf0>)
 800dab4:	f00b fd24 	bl	8019500 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d105      	bne.n	800daca <recv_udp+0x32>
 800dabe:	4b30      	ldr	r3, [pc, #192]	; (800db80 <recv_udp+0xe8>)
 800dac0:	22b2      	movs	r2, #178	; 0xb2
 800dac2:	4932      	ldr	r1, [pc, #200]	; (800db8c <recv_udp+0xf4>)
 800dac4:	4830      	ldr	r0, [pc, #192]	; (800db88 <recv_udp+0xf0>)
 800dac6:	f00b fd1b 	bl	8019500 <iprintf>
  conn = (struct netconn *)arg;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d103      	bne.n	800dadc <recv_udp+0x44>
    pbuf_free(p);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f003 f837 	bl	8010b48 <pbuf_free>
    return;
 800dada:	e04d      	b.n	800db78 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d005      	beq.n	800daf2 <recv_udp+0x5a>
 800dae6:	4b26      	ldr	r3, [pc, #152]	; (800db80 <recv_udp+0xe8>)
 800dae8:	22ba      	movs	r2, #186	; 0xba
 800daea:	4929      	ldr	r1, [pc, #164]	; (800db90 <recv_udp+0xf8>)
 800daec:	4826      	ldr	r0, [pc, #152]	; (800db88 <recv_udp+0xf0>)
 800daee:	f00b fd07 	bl	8019500 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	3310      	adds	r3, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f00b fb82 	bl	8019200 <sys_mbox_valid>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d103      	bne.n	800db0a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f003 f820 	bl	8010b48 <pbuf_free>
    return;
 800db08:	e036      	b.n	800db78 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800db0a:	2006      	movs	r0, #6
 800db0c:	f002 fa0e 	bl	800ff2c <memp_malloc>
 800db10:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <recv_udp+0x88>
    pbuf_free(p);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f003 f815 	bl	8010b48 <pbuf_free>
    return;
 800db1e:	e02b      	b.n	800db78 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <recv_udp+0xa0>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	e000      	b.n	800db3a <recv_udp+0xa2>
 800db38:	2300      	movs	r3, #0
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db42:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	891b      	ldrh	r3, [r3, #8]
 800db48:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	3310      	adds	r3, #16
 800db4e:	69b9      	ldr	r1, [r7, #24]
 800db50:	4618      	mov	r0, r3
 800db52:	f00b fae0 	bl	8019116 <sys_mbox_trypost>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <recv_udp+0xcc>
    netbuf_delete(buf);
 800db5c:	69b8      	ldr	r0, [r7, #24]
 800db5e:	f001 fbc9 	bl	800f2f4 <netbuf_delete>
    return;
 800db62:	e009      	b.n	800db78 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <recv_udp+0xe0>
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db70:	8afa      	ldrh	r2, [r7, #22]
 800db72:	2100      	movs	r1, #0
 800db74:	69f8      	ldr	r0, [r7, #28]
 800db76:	4798      	blx	r3
  }
}
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	0801aa70 	.word	0x0801aa70
 800db84:	0801aac8 	.word	0x0801aac8
 800db88:	0801aaec 	.word	0x0801aaec
 800db8c:	0801ab14 	.word	0x0801ab14
 800db90:	0801ab34 	.word	0x0801ab34

0800db94 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d105      	bne.n	800dbb4 <recv_tcp+0x20>
 800dba8:	4b39      	ldr	r3, [pc, #228]	; (800dc90 <recv_tcp+0xfc>)
 800dbaa:	22f9      	movs	r2, #249	; 0xf9
 800dbac:	4939      	ldr	r1, [pc, #228]	; (800dc94 <recv_tcp+0x100>)
 800dbae:	483a      	ldr	r0, [pc, #232]	; (800dc98 <recv_tcp+0x104>)
 800dbb0:	f00b fca6 	bl	8019500 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d105      	bne.n	800dbc6 <recv_tcp+0x32>
 800dbba:	4b35      	ldr	r3, [pc, #212]	; (800dc90 <recv_tcp+0xfc>)
 800dbbc:	22fa      	movs	r2, #250	; 0xfa
 800dbbe:	4937      	ldr	r1, [pc, #220]	; (800dc9c <recv_tcp+0x108>)
 800dbc0:	4835      	ldr	r0, [pc, #212]	; (800dc98 <recv_tcp+0x104>)
 800dbc2:	f00b fc9d 	bl	8019500 <iprintf>
  conn = (struct netconn *)arg;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <recv_tcp+0x42>
    return ERR_VAL;
 800dbd0:	f06f 0305 	mvn.w	r3, #5
 800dbd4:	e057      	b.n	800dc86 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d006      	beq.n	800dbee <recv_tcp+0x5a>
 800dbe0:	4b2b      	ldr	r3, [pc, #172]	; (800dc90 <recv_tcp+0xfc>)
 800dbe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbe6:	492e      	ldr	r1, [pc, #184]	; (800dca0 <recv_tcp+0x10c>)
 800dbe8:	482b      	ldr	r0, [pc, #172]	; (800dc98 <recv_tcp+0x104>)
 800dbea:	f00b fc89 	bl	8019500 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	3310      	adds	r3, #16
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f00b fb04 	bl	8019200 <sys_mbox_valid>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10d      	bne.n	800dc1a <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d008      	beq.n	800dc16 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	891b      	ldrh	r3, [r3, #8]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	68b8      	ldr	r0, [r7, #8]
 800dc0c:	f003 fe76 	bl	80118fc <tcp_recved>
      pbuf_free(p);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f002 ff99 	bl	8010b48 <pbuf_free>
    }
    return ERR_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e035      	b.n	800dc86 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800dc1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d011      	beq.n	800dc46 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00e      	beq.n	800dc46 <recv_tcp+0xb2>
 800dc28:	f00b fc06 	bl	8019438 <sys_arch_protect>
 800dc2c:	6178      	str	r0, [r7, #20]
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dc34:	f113 0f0c 	cmn.w	r3, #12
 800dc38:	db02      	blt.n	800dc40 <recv_tcp+0xac>
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	78fa      	ldrb	r2, [r7, #3]
 800dc3e:	721a      	strb	r2, [r3, #8]
 800dc40:	6978      	ldr	r0, [r7, #20]
 800dc42:	f00b fc07 	bl	8019454 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <recv_tcp+0xc0>
    len = p->tot_len;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	891b      	ldrh	r3, [r3, #8]
 800dc50:	83fb      	strh	r3, [r7, #30]
 800dc52:	e001      	b.n	800dc58 <recv_tcp+0xc4>
  } else {
    len = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	3310      	adds	r3, #16
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f00b fa59 	bl	8019116 <sys_mbox_trypost>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	e00a      	b.n	800dc86 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <recv_tcp+0xf0>
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7c:	8bfa      	ldrh	r2, [r7, #30]
 800dc7e:	2100      	movs	r1, #0
 800dc80:	69b8      	ldr	r0, [r7, #24]
 800dc82:	4798      	blx	r3
  }

  return ERR_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	0801aa70 	.word	0x0801aa70
 800dc94:	0801ab54 	.word	0x0801ab54
 800dc98:	0801aaec 	.word	0x0801aaec
 800dc9c:	0801ab78 	.word	0x0801ab78
 800dca0:	0801ab98 	.word	0x0801ab98

0800dca4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <poll_tcp+0x22>
 800dcb8:	4b29      	ldr	r3, [pc, #164]	; (800dd60 <poll_tcp+0xbc>)
 800dcba:	f44f 729c 	mov.w	r2, #312	; 0x138
 800dcbe:	4929      	ldr	r1, [pc, #164]	; (800dd64 <poll_tcp+0xc0>)
 800dcc0:	4829      	ldr	r0, [pc, #164]	; (800dd68 <poll_tcp+0xc4>)
 800dcc2:	f00b fc1d 	bl	8019500 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	785b      	ldrb	r3, [r3, #1]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d104      	bne.n	800dcd8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dcce:	2101      	movs	r1, #1
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f001 f813 	bl	800ecfc <lwip_netconn_do_writemore>
 800dcd6:	e016      	b.n	800dd06 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	785b      	ldrb	r3, [r3, #1]
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	d112      	bne.n	800dd06 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00a      	beq.n	800dcfe <poll_tcp+0x5a>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcec:	7a5b      	ldrb	r3, [r3, #9]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d005      	beq.n	800dcfe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf6:	7a5a      	ldrb	r2, [r3, #9]
 800dcf8:	3a01      	subs	r2, #1
 800dcfa:	b2d2      	uxtb	r2, r2
 800dcfc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dcfe:	2101      	movs	r1, #1
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f000 fc13 	bl	800e52c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	7f1b      	ldrb	r3, [r3, #28]
 800dd0a:	f003 0310 	and.w	r3, r3, #16
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d021      	beq.n	800dd56 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d01d      	beq.n	800dd56 <poll_tcp+0xb2>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd22:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dd26:	d316      	bcc.n	800dd56 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd30:	2b04      	cmp	r3, #4
 800dd32:	d810      	bhi.n	800dd56 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	7f1b      	ldrb	r3, [r3, #28]
 800dd38:	f023 0310 	bic.w	r3, r3, #16
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d005      	beq.n	800dd56 <poll_tcp+0xb2>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2102      	movs	r1, #2
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	0801aa70 	.word	0x0801aa70
 800dd64:	0801abb8 	.word	0x0801abb8
 800dd68:	0801aaec 	.word	0x0801aaec

0800dd6c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	4613      	mov	r3, r2
 800dd78:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <sent_tcp+0x26>
 800dd84:	4b20      	ldr	r3, [pc, #128]	; (800de08 <sent_tcp+0x9c>)
 800dd86:	f240 1261 	movw	r2, #353	; 0x161
 800dd8a:	4920      	ldr	r1, [pc, #128]	; (800de0c <sent_tcp+0xa0>)
 800dd8c:	4820      	ldr	r0, [pc, #128]	; (800de10 <sent_tcp+0xa4>)
 800dd8e:	f00b fbb7 	bl	8019500 <iprintf>

  if (conn) {
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d032      	beq.n	800ddfe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d104      	bne.n	800ddaa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dda0:	2101      	movs	r1, #1
 800dda2:	6978      	ldr	r0, [r7, #20]
 800dda4:	f000 ffaa 	bl	800ecfc <lwip_netconn_do_writemore>
 800dda8:	e007      	b.n	800ddba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	785b      	ldrb	r3, [r3, #1]
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d103      	bne.n	800ddba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	6978      	ldr	r0, [r7, #20]
 800ddb6:	f000 fbb9 	bl	800e52c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d01d      	beq.n	800ddfe <sent_tcp+0x92>
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddca:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ddce:	d316      	bcc.n	800ddfe <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ddd8:	2b04      	cmp	r3, #4
 800ddda:	d810      	bhi.n	800ddfe <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	7f1b      	ldrb	r3, [r3, #28]
 800dde0:	f023 0310 	bic.w	r3, r3, #16
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d005      	beq.n	800ddfe <sent_tcp+0x92>
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf6:	88fa      	ldrh	r2, [r7, #6]
 800ddf8:	2102      	movs	r1, #2
 800ddfa:	6978      	ldr	r0, [r7, #20]
 800ddfc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	0801aa70 	.word	0x0801aa70
 800de0c:	0801abb8 	.word	0x0801abb8
 800de10:	0801aaec 	.word	0x0801aaec

0800de14 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b08a      	sub	sp, #40	; 0x28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	460b      	mov	r3, r1
 800de1e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <err_tcp+0x24>
 800de2a:	4b6c      	ldr	r3, [pc, #432]	; (800dfdc <err_tcp+0x1c8>)
 800de2c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800de30:	496b      	ldr	r1, [pc, #428]	; (800dfe0 <err_tcp+0x1cc>)
 800de32:	486c      	ldr	r0, [pc, #432]	; (800dfe4 <err_tcp+0x1d0>)
 800de34:	f00b fb64 	bl	8019500 <iprintf>

  conn->pcb.tcp = NULL;
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	2200      	movs	r2, #0
 800de3c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	2200      	movs	r2, #0
 800de4a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800de4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de50:	2b04      	cmp	r3, #4
 800de52:	d114      	bne.n	800de7e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d018      	beq.n	800de90 <err_tcp+0x7c>
 800de5e:	f00b faeb 	bl	8019438 <sys_arch_protect>
 800de62:	61b8      	str	r0, [r7, #24]
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de6a:	f113 0f0c 	cmn.w	r3, #12
 800de6e:	db02      	blt.n	800de76 <err_tcp+0x62>
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	2200      	movs	r2, #0
 800de74:	721a      	strb	r2, [r3, #8]
 800de76:	69b8      	ldr	r0, [r7, #24]
 800de78:	f00b faec 	bl	8019454 <sys_arch_unprotect>
 800de7c:	e008      	b.n	800de90 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800de7e:	f00b fadb 	bl	8019438 <sys_arch_protect>
 800de82:	61f8      	str	r0, [r7, #28]
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	78fa      	ldrb	r2, [r7, #3]
 800de88:	721a      	strb	r2, [r3, #8]
 800de8a:	69f8      	ldr	r0, [r7, #28]
 800de8c:	f00b fae2 	bl	8019454 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <err_tcp+0x90>
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de9c:	2200      	movs	r2, #0
 800de9e:	2104      	movs	r1, #4
 800dea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dea2:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d005      	beq.n	800deb8 <err_tcp+0xa4>
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb0:	2200      	movs	r2, #0
 800deb2:	2100      	movs	r1, #0
 800deb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deb6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <err_tcp+0xb8>
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec4:	2200      	movs	r2, #0
 800dec6:	2102      	movs	r1, #2
 800dec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deca:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	3310      	adds	r3, #16
 800ded0:	4618      	mov	r0, r3
 800ded2:	f00b f995 	bl	8019200 <sys_mbox_valid>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d005      	beq.n	800dee8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	3310      	adds	r3, #16
 800dee0:	2100      	movs	r1, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f00b f917 	bl	8019116 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	3314      	adds	r3, #20
 800deec:	4618      	mov	r0, r3
 800deee:	f00b f987 	bl	8019200 <sys_mbox_valid>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	3314      	adds	r3, #20
 800defc:	2100      	movs	r1, #0
 800defe:	4618      	mov	r0, r3
 800df00:	f00b f909 	bl	8019116 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800df04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d007      	beq.n	800df1c <err_tcp+0x108>
 800df0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df10:	2b04      	cmp	r3, #4
 800df12:	d003      	beq.n	800df1c <err_tcp+0x108>
 800df14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d14d      	bne.n	800dfb8 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	7f1b      	ldrb	r3, [r3, #28]
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	bf14      	ite	ne
 800df28:	2301      	movne	r3, #1
 800df2a:	2300      	moveq	r3, #0
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	7f1b      	ldrb	r3, [r3, #28]
 800df34:	f023 0304 	bic.w	r3, r3, #4
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d145      	bne.n	800dfd0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d106      	bne.n	800df5a <err_tcp+0x146>
 800df4c:	4b23      	ldr	r3, [pc, #140]	; (800dfdc <err_tcp+0x1c8>)
 800df4e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800df52:	4925      	ldr	r1, [pc, #148]	; (800dfe8 <err_tcp+0x1d4>)
 800df54:	4823      	ldr	r0, [pc, #140]	; (800dfe4 <err_tcp+0x1d0>)
 800df56:	f00b fad3 	bl	8019500 <iprintf>
      conn->current_msg->err = err;
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5e:	78fa      	ldrb	r2, [r7, #3]
 800df60:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	330c      	adds	r3, #12
 800df6a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800df6c:	6938      	ldr	r0, [r7, #16]
 800df6e:	f00b f9d8 	bl	8019322 <sys_sem_valid>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d106      	bne.n	800df86 <err_tcp+0x172>
 800df78:	4b18      	ldr	r3, [pc, #96]	; (800dfdc <err_tcp+0x1c8>)
 800df7a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df7e:	491b      	ldr	r1, [pc, #108]	; (800dfec <err_tcp+0x1d8>)
 800df80:	4818      	ldr	r0, [pc, #96]	; (800dfe4 <err_tcp+0x1d0>)
 800df82:	f00b fabd 	bl	8019500 <iprintf>
      conn->current_msg = NULL;
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	2200      	movs	r2, #0
 800df8a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00e      	beq.n	800dfb0 <err_tcp+0x19c>
 800df92:	f00b fa51 	bl	8019438 <sys_arch_protect>
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df9e:	f113 0f0c 	cmn.w	r3, #12
 800dfa2:	db02      	blt.n	800dfaa <err_tcp+0x196>
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	78fa      	ldrb	r2, [r7, #3]
 800dfa8:	721a      	strb	r2, [r3, #8]
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f00b fa52 	bl	8019454 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800dfb0:	6938      	ldr	r0, [r7, #16]
 800dfb2:	f00b f99c 	bl	80192ee <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800dfb6:	e00b      	b.n	800dfd0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d008      	beq.n	800dfd2 <err_tcp+0x1be>
 800dfc0:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <err_tcp+0x1c8>)
 800dfc2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dfc6:	490a      	ldr	r1, [pc, #40]	; (800dff0 <err_tcp+0x1dc>)
 800dfc8:	4806      	ldr	r0, [pc, #24]	; (800dfe4 <err_tcp+0x1d0>)
 800dfca:	f00b fa99 	bl	8019500 <iprintf>
  }
}
 800dfce:	e000      	b.n	800dfd2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800dfd0:	bf00      	nop
}
 800dfd2:	bf00      	nop
 800dfd4:	3728      	adds	r7, #40	; 0x28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	0801aa70 	.word	0x0801aa70
 800dfe0:	0801abb8 	.word	0x0801abb8
 800dfe4:	0801aaec 	.word	0x0801aaec
 800dfe8:	0801abc8 	.word	0x0801abc8
 800dfec:	0801abe4 	.word	0x0801abe4
 800dff0:	0801ac00 	.word	0x0801ac00

0800dff4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f004 fa5b 	bl	80124c0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800e00a:	490a      	ldr	r1, [pc, #40]	; (800e034 <setup_tcp+0x40>)
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f004 fa69 	bl	80124e4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800e012:	4909      	ldr	r1, [pc, #36]	; (800e038 <setup_tcp+0x44>)
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f004 fa87 	bl	8012528 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800e01a:	2202      	movs	r2, #2
 800e01c:	4907      	ldr	r1, [pc, #28]	; (800e03c <setup_tcp+0x48>)
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f004 fadc 	bl	80125dc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800e024:	4906      	ldr	r1, [pc, #24]	; (800e040 <setup_tcp+0x4c>)
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f004 fa9e 	bl	8012568 <tcp_err>
}
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	0800db95 	.word	0x0800db95
 800e038:	0800dd6d 	.word	0x0800dd6d
 800e03c:	0800dca5 	.word	0x0800dca5
 800e040:	0800de15 	.word	0x0800de15

0800e044 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	4613      	mov	r3, r2
 800e050:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <accept_function+0x1e>
    return ERR_VAL;
 800e05c:	f06f 0305 	mvn.w	r3, #5
 800e060:	e08d      	b.n	800e17e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	3314      	adds	r3, #20
 800e066:	4618      	mov	r0, r3
 800e068:	f00b f8ca 	bl	8019200 <sys_mbox_valid>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800e072:	f06f 0305 	mvn.w	r3, #5
 800e076:	e082      	b.n	800e17e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d115      	bne.n	800e0aa <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	3314      	adds	r3, #20
 800e082:	4941      	ldr	r1, [pc, #260]	; (800e188 <accept_function+0x144>)
 800e084:	4618      	mov	r0, r3
 800e086:	f00b f846 	bl	8019116 <sys_mbox_trypost>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d109      	bne.n	800e0a4 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <accept_function+0x60>
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09c:	2200      	movs	r2, #0
 800e09e:	2100      	movs	r1, #0
 800e0a0:	69f8      	ldr	r0, [r7, #28]
 800e0a2:	4798      	blx	r3
    }
    return ERR_VAL;
 800e0a4:	f06f 0305 	mvn.w	r3, #5
 800e0a8:	e069      	b.n	800e17e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	781a      	ldrb	r2, [r3, #0]
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f000 f8ff 	bl	800e2b8 <netconn_alloc>
 800e0ba:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d115      	bne.n	800e0ee <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	3314      	adds	r3, #20
 800e0c6:	4930      	ldr	r1, [pc, #192]	; (800e188 <accept_function+0x144>)
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f00b f824 	bl	8019116 <sys_mbox_trypost>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d109      	bne.n	800e0e8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d005      	beq.n	800e0e8 <accept_function+0xa4>
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	69f8      	ldr	r0, [r7, #28]
 800e0e6:	4798      	blx	r3
    }
    return ERR_MEM;
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ec:	e047      	b.n	800e17e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800e0f4:	69b8      	ldr	r0, [r7, #24]
 800e0f6:	f7ff ff7d 	bl	800dff4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	79fa      	ldrb	r2, [r7, #7]
 800e0fe:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	3314      	adds	r3, #20
 800e104:	69b9      	ldr	r1, [r7, #24]
 800e106:	4618      	mov	r0, r3
 800e108:	f00b f805 	bl	8019116 <sys_mbox_trypost>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d02a      	beq.n	800e168 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800e118:	2100      	movs	r1, #0
 800e11a:	6978      	ldr	r0, [r7, #20]
 800e11c:	f004 f9d0 	bl	80124c0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800e120:	2100      	movs	r1, #0
 800e122:	6978      	ldr	r0, [r7, #20]
 800e124:	f004 f9de 	bl	80124e4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800e128:	2100      	movs	r1, #0
 800e12a:	6978      	ldr	r0, [r7, #20]
 800e12c:	f004 f9fc 	bl	8012528 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800e130:	2200      	movs	r2, #0
 800e132:	2100      	movs	r1, #0
 800e134:	6978      	ldr	r0, [r7, #20]
 800e136:	f004 fa51 	bl	80125dc <tcp_poll>
    tcp_err(pcb, NULL);
 800e13a:	2100      	movs	r1, #0
 800e13c:	6978      	ldr	r0, [r7, #20]
 800e13e:	f004 fa13 	bl	8012568 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	2200      	movs	r2, #0
 800e146:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	3310      	adds	r3, #16
 800e14c:	4618      	mov	r0, r3
 800e14e:	f00a ffbb 	bl	80190c8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	3310      	adds	r3, #16
 800e156:	4618      	mov	r0, r3
 800e158:	f00b f863 	bl	8019222 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800e15c:	69b8      	ldr	r0, [r7, #24]
 800e15e:	f000 f91b 	bl	800e398 <netconn_free>
    return ERR_MEM;
 800e162:	f04f 33ff 	mov.w	r3, #4294967295
 800e166:	e00a      	b.n	800e17e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d005      	beq.n	800e17c <accept_function+0x138>
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e174:	2200      	movs	r2, #0
 800e176:	2100      	movs	r1, #0
 800e178:	69f8      	ldr	r0, [r7, #28]
 800e17a:	4798      	blx	r3
  }

  return ERR_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3720      	adds	r7, #32
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	2000d108 	.word	0x2000d108

0800e18c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d006      	beq.n	800e1b0 <pcb_new+0x24>
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	; (800e250 <pcb_new+0xc4>)
 800e1a4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e1a8:	492a      	ldr	r1, [pc, #168]	; (800e254 <pcb_new+0xc8>)
 800e1aa:	482b      	ldr	r0, [pc, #172]	; (800e258 <pcb_new+0xcc>)
 800e1ac:	f00b f9a8 	bl	8019500 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1ba:	2b10      	cmp	r3, #16
 800e1bc:	d022      	beq.n	800e204 <pcb_new+0x78>
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	d133      	bne.n	800e22a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681c      	ldr	r4, [r3, #0]
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f008 fd16 	bl	8016bfa <udp_new_ip_type>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d02a      	beq.n	800e232 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b22      	cmp	r3, #34	; 0x22
 800e1e4:	d104      	bne.n	800e1f0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6858      	ldr	r0, [r3, #4]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	4917      	ldr	r1, [pc, #92]	; (800e25c <pcb_new+0xd0>)
 800e1fe:	f008 fca1 	bl	8016b44 <udp_recv>
    }
    break;
 800e202:	e016      	b.n	800e232 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681c      	ldr	r4, [r3, #0]
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f004 f94a 	bl	80124a4 <tcp_new_ip_type>
 800e210:	4603      	mov	r3, r0
 800e212:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4618      	mov	r0, r3
 800e224:	f7ff fee6 	bl	800dff4 <setup_tcp>
    }
    break;
 800e228:	e005      	b.n	800e236 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	22fa      	movs	r2, #250	; 0xfa
 800e22e:	711a      	strb	r2, [r3, #4]
    return;
 800e230:	e00a      	b.n	800e248 <pcb_new+0xbc>
    break;
 800e232:	bf00      	nop
 800e234:	e000      	b.n	800e238 <pcb_new+0xac>
    break;
 800e236:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	22ff      	movs	r2, #255	; 0xff
 800e246:	711a      	strb	r2, [r3, #4]
  }
}
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd90      	pop	{r4, r7, pc}
 800e24e:	bf00      	nop
 800e250:	0801aa70 	.word	0x0801aa70
 800e254:	0801ac1c 	.word	0x0801ac1c
 800e258:	0801aaec 	.word	0x0801aaec
 800e25c:	0800da99 	.word	0x0800da99

0800e260 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d102      	bne.n	800e282 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f7ff ff85 	bl	800e18c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d012      	beq.n	800e2b0 <lwip_netconn_do_newconn+0x50>
 800e28a:	f00b f8d5 	bl	8019438 <sys_arch_protect>
 800e28e:	60b8      	str	r0, [r7, #8]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e298:	f113 0f0c 	cmn.w	r3, #12
 800e29c:	db05      	blt.n	800e2aa <lwip_netconn_do_newconn+0x4a>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e2a8:	721a      	strb	r2, [r3, #8]
 800e2aa:	68b8      	ldr	r0, [r7, #8]
 800e2ac:	f00b f8d2 	bl	8019454 <sys_arch_unprotect>
}
 800e2b0:	bf00      	nop
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	6039      	str	r1, [r7, #0]
 800e2c2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e2c4:	2007      	movs	r0, #7
 800e2c6:	f001 fe31 	bl	800ff2c <memp_malloc>
 800e2ca:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <netconn_alloc+0x1e>
    return NULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e055      	b.n	800e382 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	79fa      	ldrb	r2, [r7, #7]
 800e2e0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800e2e8:	79fb      	ldrb	r3, [r7, #7]
 800e2ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2ee:	2b10      	cmp	r3, #16
 800e2f0:	d004      	beq.n	800e2fc <netconn_alloc+0x44>
 800e2f2:	2b20      	cmp	r3, #32
 800e2f4:	d105      	bne.n	800e302 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e2f6:	2306      	movs	r3, #6
 800e2f8:	60fb      	str	r3, [r7, #12]
    break;
 800e2fa:	e00a      	b.n	800e312 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e2fc:	2306      	movs	r3, #6
 800e2fe:	60fb      	str	r3, [r7, #12]
    break;
 800e300:	e007      	b.n	800e312 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e302:	4b22      	ldr	r3, [pc, #136]	; (800e38c <netconn_alloc+0xd4>)
 800e304:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e308:	4921      	ldr	r1, [pc, #132]	; (800e390 <netconn_alloc+0xd8>)
 800e30a:	4822      	ldr	r0, [pc, #136]	; (800e394 <netconn_alloc+0xdc>)
 800e30c:	f00b f8f8 	bl	8019500 <iprintf>
    goto free_and_return;
 800e310:	e032      	b.n	800e378 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	3310      	adds	r3, #16
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	4618      	mov	r0, r3
 800e31a:	f00a feb3 	bl	8019084 <sys_mbox_new>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d128      	bne.n	800e376 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	330c      	adds	r3, #12
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f00a ff86 	bl	801923c <sys_sem_new>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	3310      	adds	r3, #16
 800e33a:	4618      	mov	r0, r3
 800e33c:	f00a fec4 	bl	80190c8 <sys_mbox_free>
    goto free_and_return;
 800e340:	e01a      	b.n	800e378 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	3314      	adds	r3, #20
 800e346:	4618      	mov	r0, r3
 800e348:	f00a ff6b 	bl	8019222 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2200      	movs	r2, #0
 800e350:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2200      	movs	r2, #0
 800e364:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	2200      	movs	r2, #0
 800e36a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2200      	movs	r2, #0
 800e370:	771a      	strb	r2, [r3, #28]
  return conn;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	e005      	b.n	800e382 <netconn_alloc+0xca>
    goto free_and_return;
 800e376:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e378:	68b9      	ldr	r1, [r7, #8]
 800e37a:	2007      	movs	r0, #7
 800e37c:	f001 fe4c 	bl	8010018 <memp_free>
  return NULL;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	0801aa70 	.word	0x0801aa70
 800e390:	0801ac3c 	.word	0x0801ac3c
 800e394:	0801aaec 	.word	0x0801aaec

0800e398 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d006      	beq.n	800e3b6 <netconn_free+0x1e>
 800e3a8:	4b1b      	ldr	r3, [pc, #108]	; (800e418 <netconn_free+0x80>)
 800e3aa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e3ae:	491b      	ldr	r1, [pc, #108]	; (800e41c <netconn_free+0x84>)
 800e3b0:	481b      	ldr	r0, [pc, #108]	; (800e420 <netconn_free+0x88>)
 800e3b2:	f00b f8a5 	bl	8019500 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3310      	adds	r3, #16
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f00a ff20 	bl	8019200 <sys_mbox_valid>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d006      	beq.n	800e3d4 <netconn_free+0x3c>
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <netconn_free+0x80>)
 800e3c8:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e3cc:	4915      	ldr	r1, [pc, #84]	; (800e424 <netconn_free+0x8c>)
 800e3ce:	4814      	ldr	r0, [pc, #80]	; (800e420 <netconn_free+0x88>)
 800e3d0:	f00b f896 	bl	8019500 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3314      	adds	r3, #20
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f00a ff11 	bl	8019200 <sys_mbox_valid>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d006      	beq.n	800e3f2 <netconn_free+0x5a>
 800e3e4:	4b0c      	ldr	r3, [pc, #48]	; (800e418 <netconn_free+0x80>)
 800e3e6:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e3ea:	490f      	ldr	r1, [pc, #60]	; (800e428 <netconn_free+0x90>)
 800e3ec:	480c      	ldr	r0, [pc, #48]	; (800e420 <netconn_free+0x88>)
 800e3ee:	f00b f887 	bl	8019500 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	330c      	adds	r3, #12
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f00a ff86 	bl	8019308 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	330c      	adds	r3, #12
 800e400:	4618      	mov	r0, r3
 800e402:	f00a ff9f 	bl	8019344 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	2007      	movs	r0, #7
 800e40a:	f001 fe05 	bl	8010018 <memp_free>
}
 800e40e:	bf00      	nop
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	0801aa70 	.word	0x0801aa70
 800e41c:	0801ac64 	.word	0x0801ac64
 800e420:	0801aaec 	.word	0x0801aaec
 800e424:	0801ac94 	.word	0x0801ac94
 800e428:	0801acd0 	.word	0x0801acd0

0800e42c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	3310      	adds	r3, #16
 800e438:	4618      	mov	r0, r3
 800e43a:	f00a fee1 	bl	8019200 <sys_mbox_valid>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d035      	beq.n	800e4b0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e444:	e01e      	b.n	800e484 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e44e:	2b10      	cmp	r3, #16
 800e450:	d114      	bne.n	800e47c <netconn_drain+0x50>
        if (mem != NULL) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d015      	beq.n	800e484 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d007      	beq.n	800e474 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	891b      	ldrh	r3, [r3, #8]
 800e46c:	4619      	mov	r1, r3
 800e46e:	4610      	mov	r0, r2
 800e470:	f003 fa44 	bl	80118fc <tcp_recved>
          }
          pbuf_free(p);
 800e474:	6978      	ldr	r0, [r7, #20]
 800e476:	f002 fb67 	bl	8010b48 <pbuf_free>
 800e47a:	e003      	b.n	800e484 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 ff38 	bl	800f2f4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3310      	adds	r3, #16
 800e488:	f107 020c 	add.w	r2, r7, #12
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f00a fe9a 	bl	80191c8 <sys_arch_mbox_tryfetch>
 800e494:	4603      	mov	r3, r0
 800e496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e49a:	d1d4      	bne.n	800e446 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	3310      	adds	r3, #16
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f00a fe11 	bl	80190c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3310      	adds	r3, #16
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f00a feb9 	bl	8019222 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3314      	adds	r3, #20
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f00a fea3 	bl	8019200 <sys_mbox_valid>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d02e      	beq.n	800e51e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4c0:	e017      	b.n	800e4f2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	4a18      	ldr	r2, [pc, #96]	; (800e528 <netconn_drain+0xfc>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d013      	beq.n	800e4f2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800e4ce:	6938      	ldr	r0, [r7, #16]
 800e4d0:	f7ff ffac 	bl	800e42c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d007      	beq.n	800e4ec <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f003 f877 	bl	80115d4 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800e4ec:	6938      	ldr	r0, [r7, #16]
 800e4ee:	f7ff ff53 	bl	800e398 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	3314      	adds	r3, #20
 800e4f6:	f107 020c 	add.w	r2, r7, #12
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f00a fe63 	bl	80191c8 <sys_arch_mbox_tryfetch>
 800e502:	4603      	mov	r3, r0
 800e504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e508:	d1db      	bne.n	800e4c2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	3314      	adds	r3, #20
 800e50e:	4618      	mov	r0, r3
 800e510:	f00a fdda 	bl	80190c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3314      	adds	r3, #20
 800e518:	4618      	mov	r0, r3
 800e51a:	f00a fe82 	bl	8019222 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e51e:	bf00      	nop
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	2000d108 	.word	0x2000d108

0800e52c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <lwip_netconn_do_close_internal+0x24>
 800e542:	4baa      	ldr	r3, [pc, #680]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e544:	f240 3243 	movw	r2, #835	; 0x343
 800e548:	49a9      	ldr	r1, [pc, #676]	; (800e7f0 <lwip_netconn_do_close_internal+0x2c4>)
 800e54a:	48aa      	ldr	r0, [pc, #680]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e54c:	f00a ffd8 	bl	8019500 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d006      	beq.n	800e56a <lwip_netconn_do_close_internal+0x3e>
 800e55c:	4ba3      	ldr	r3, [pc, #652]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e55e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800e562:	49a5      	ldr	r1, [pc, #660]	; (800e7f8 <lwip_netconn_do_close_internal+0x2cc>)
 800e564:	48a3      	ldr	r0, [pc, #652]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e566:	f00a ffcb 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	785b      	ldrb	r3, [r3, #1]
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d006      	beq.n	800e580 <lwip_netconn_do_close_internal+0x54>
 800e572:	4b9e      	ldr	r3, [pc, #632]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e574:	f240 3245 	movw	r2, #837	; 0x345
 800e578:	49a0      	ldr	r1, [pc, #640]	; (800e7fc <lwip_netconn_do_close_internal+0x2d0>)
 800e57a:	489e      	ldr	r0, [pc, #632]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e57c:	f00a ffc0 	bl	8019500 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d106      	bne.n	800e596 <lwip_netconn_do_close_internal+0x6a>
 800e588:	4b98      	ldr	r3, [pc, #608]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e58a:	f240 3246 	movw	r2, #838	; 0x346
 800e58e:	499c      	ldr	r1, [pc, #624]	; (800e800 <lwip_netconn_do_close_internal+0x2d4>)
 800e590:	4898      	ldr	r0, [pc, #608]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e592:	f00a ffb5 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <lwip_netconn_do_close_internal+0x80>
 800e59e:	4b93      	ldr	r3, [pc, #588]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e5a0:	f240 3247 	movw	r2, #839	; 0x347
 800e5a4:	4997      	ldr	r1, [pc, #604]	; (800e804 <lwip_netconn_do_close_internal+0x2d8>)
 800e5a6:	4893      	ldr	r0, [pc, #588]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e5a8:	f00a ffaa 	bl	8019500 <iprintf>

  tpcb = conn->pcb.tcp;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b6:	7a1b      	ldrb	r3, [r3, #8]
 800e5b8:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
 800e5c4:	f003 0302 	and.w	r3, r3, #2
 800e5c8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e5ca:	7dfb      	ldrb	r3, [r7, #23]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d102      	bne.n	800e5d6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	77bb      	strb	r3, [r7, #30]
 800e5d4:	e01f      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e5d6:	7dbb      	ldrb	r3, [r7, #22]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00e      	beq.n	800e5fa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	d007      	beq.n	800e5f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e5e8:	2b06      	cmp	r3, #6
 800e5ea:	d003      	beq.n	800e5f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d102      	bne.n	800e5fa <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	77bb      	strb	r3, [r7, #30]
 800e5f8:	e00d      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e5fa:	7d7b      	ldrb	r3, [r7, #21]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d008      	beq.n	800e612 <lwip_netconn_do_close_internal+0xe6>
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	7e9b      	ldrb	r3, [r3, #26]
 800e604:	f003 0310 	and.w	r3, r3, #16
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800e60c:	2301      	movs	r3, #1
 800e60e:	77bb      	strb	r3, [r7, #30]
 800e610:	e001      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800e616:	7fbb      	ldrb	r3, [r7, #30]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e61c:	2100      	movs	r1, #0
 800e61e:	69b8      	ldr	r0, [r7, #24]
 800e620:	f003 ff4e 	bl	80124c0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d104      	bne.n	800e636 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e62c:	2100      	movs	r1, #0
 800e62e:	69b8      	ldr	r0, [r7, #24]
 800e630:	f003 ffbc 	bl	80125ac <tcp_accept>
 800e634:	e01d      	b.n	800e672 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e636:	7dbb      	ldrb	r3, [r7, #22]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d007      	beq.n	800e64c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e63c:	2100      	movs	r1, #0
 800e63e:	69b8      	ldr	r0, [r7, #24]
 800e640:	f003 ff50 	bl	80124e4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e644:	2100      	movs	r1, #0
 800e646:	69b8      	ldr	r0, [r7, #24]
 800e648:	f003 ffb0 	bl	80125ac <tcp_accept>
    }
    if (shut_tx) {
 800e64c:	7d7b      	ldrb	r3, [r7, #21]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d003      	beq.n	800e65a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e652:	2100      	movs	r1, #0
 800e654:	69b8      	ldr	r0, [r7, #24]
 800e656:	f003 ff67 	bl	8012528 <tcp_sent>
    }
    if (close) {
 800e65a:	7fbb      	ldrb	r3, [r7, #30]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d008      	beq.n	800e672 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e660:	2200      	movs	r2, #0
 800e662:	2100      	movs	r1, #0
 800e664:	69b8      	ldr	r0, [r7, #24]
 800e666:	f003 ffb9 	bl	80125dc <tcp_poll>
      tcp_err(tpcb, NULL);
 800e66a:	2100      	movs	r1, #0
 800e66c:	69b8      	ldr	r0, [r7, #24]
 800e66e:	f003 ff7b 	bl	8012568 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800e672:	7fbb      	ldrb	r3, [r7, #30]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d005      	beq.n	800e684 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e678:	69b8      	ldr	r0, [r7, #24]
 800e67a:	f002 fe99 	bl	80113b0 <tcp_close>
 800e67e:	4603      	mov	r3, r0
 800e680:	77fb      	strb	r3, [r7, #31]
 800e682:	e007      	b.n	800e694 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e684:	7dbb      	ldrb	r3, [r7, #22]
 800e686:	7d7a      	ldrb	r2, [r7, #21]
 800e688:	4619      	mov	r1, r3
 800e68a:	69b8      	ldr	r0, [r7, #24]
 800e68c:	f002 fea8 	bl	80113e0 <tcp_shutdown>
 800e690:	4603      	mov	r3, r0
 800e692:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800e694:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e69c:	2301      	movs	r3, #1
 800e69e:	777b      	strb	r3, [r7, #29]
 800e6a0:	e016      	b.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e6a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6aa:	d10f      	bne.n	800e6cc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b0:	7a5b      	ldrb	r3, [r3, #9]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10c      	bne.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	777b      	strb	r3, [r7, #29]
        if (close) {
 800e6ba:	7fbb      	ldrb	r3, [r7, #30]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d007      	beq.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e6c0:	69b8      	ldr	r0, [r7, #24]
 800e6c2:	f002 ff87 	bl	80115d4 <tcp_abort>
          err = ERR_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	77fb      	strb	r3, [r7, #31]
 800e6ca:	e001      	b.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800e6d0:	7f7b      	ldrb	r3, [r7, #29]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d056      	beq.n	800e784 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	330c      	adds	r3, #12
 800e6de:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e4:	7ffa      	ldrb	r2, [r7, #31]
 800e6e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e6f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d129      	bne.n	800e750 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800e6fc:	7fbb      	ldrb	r3, [r7, #30]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00c      	beq.n	800e71c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <lwip_netconn_do_close_internal+0x1f0>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e714:	2200      	movs	r2, #0
 800e716:	2104      	movs	r1, #4
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	4798      	blx	r3
      }
      if (shut_rx) {
 800e71c:	7dbb      	ldrb	r3, [r7, #22]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d009      	beq.n	800e736 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d005      	beq.n	800e736 <lwip_netconn_do_close_internal+0x20a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72e:	2200      	movs	r2, #0
 800e730:	2100      	movs	r1, #0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
      }
      if (shut_tx) {
 800e736:	7d7b      	ldrb	r3, [r7, #21]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <lwip_netconn_do_close_internal+0x224>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e748:	2200      	movs	r2, #0
 800e74a:	2102      	movs	r1, #2
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00e      	beq.n	800e774 <lwip_netconn_do_close_internal+0x248>
 800e756:	f00a fe6f 	bl	8019438 <sys_arch_protect>
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e762:	f113 0f0c 	cmn.w	r3, #12
 800e766:	db02      	blt.n	800e76e <lwip_netconn_do_close_internal+0x242>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	7ffa      	ldrb	r2, [r7, #31]
 800e76c:	721a      	strb	r2, [r3, #8]
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f00a fe70 	bl	8019454 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e774:	78fb      	ldrb	r3, [r7, #3]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e77a:	6938      	ldr	r0, [r7, #16]
 800e77c:	f00a fdb7 	bl	80192ee <sys_sem_signal>
    }
    return ERR_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	e02e      	b.n	800e7e2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800e784:	7f7b      	ldrb	r3, [r7, #29]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d11e      	bne.n	800e7c8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	7d1b      	ldrb	r3, [r3, #20]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d106      	bne.n	800e7a0 <lwip_netconn_do_close_internal+0x274>
 800e792:	4b16      	ldr	r3, [pc, #88]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e794:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e798:	491b      	ldr	r1, [pc, #108]	; (800e808 <lwip_netconn_do_close_internal+0x2dc>)
 800e79a:	4816      	ldr	r0, [pc, #88]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e79c:	f00a feb0 	bl	8019500 <iprintf>
    if (shut_tx) {
 800e7a0:	7d7b      	ldrb	r3, [r7, #21]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d003      	beq.n	800e7ae <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800e7a6:	4919      	ldr	r1, [pc, #100]	; (800e80c <lwip_netconn_do_close_internal+0x2e0>)
 800e7a8:	69b8      	ldr	r0, [r7, #24]
 800e7aa:	f003 febd 	bl	8012528 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	4917      	ldr	r1, [pc, #92]	; (800e810 <lwip_netconn_do_close_internal+0x2e4>)
 800e7b2:	69b8      	ldr	r0, [r7, #24]
 800e7b4:	f003 ff12 	bl	80125dc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e7b8:	4916      	ldr	r1, [pc, #88]	; (800e814 <lwip_netconn_do_close_internal+0x2e8>)
 800e7ba:	69b8      	ldr	r0, [r7, #24]
 800e7bc:	f003 fed4 	bl	8012568 <tcp_err>
    tcp_arg(tpcb, conn);
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	69b8      	ldr	r0, [r7, #24]
 800e7c4:	f003 fe7c 	bl	80124c0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e7c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d106      	bne.n	800e7de <lwip_netconn_do_close_internal+0x2b2>
 800e7d0:	4b06      	ldr	r3, [pc, #24]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e7d2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e7d6:	4910      	ldr	r1, [pc, #64]	; (800e818 <lwip_netconn_do_close_internal+0x2ec>)
 800e7d8:	4806      	ldr	r0, [pc, #24]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e7da:	f00a fe91 	bl	8019500 <iprintf>
  return err;
 800e7de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	0801aa70 	.word	0x0801aa70
 800e7f0:	0801ad0c 	.word	0x0801ad0c
 800e7f4:	0801aaec 	.word	0x0801aaec
 800e7f8:	0801ad1c 	.word	0x0801ad1c
 800e7fc:	0801ad3c 	.word	0x0801ad3c
 800e800:	0801ad60 	.word	0x0801ad60
 800e804:	0801abc8 	.word	0x0801abc8
 800e808:	0801ad74 	.word	0x0801ad74
 800e80c:	0800dd6d 	.word	0x0800dd6d
 800e810:	0800dca5 	.word	0x0800dca5
 800e814:	0800de15 	.word	0x0800de15
 800e818:	0801ad98 	.word	0x0801ad98

0800e81c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	785b      	ldrb	r3, [r3, #1]
 800e82e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e830:	7cfb      	ldrb	r3, [r7, #19]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <lwip_netconn_do_delconn+0x36>
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e840:	2b10      	cmp	r3, #16
 800e842:	d006      	beq.n	800e852 <lwip_netconn_do_delconn+0x36>
 800e844:	4b6f      	ldr	r3, [pc, #444]	; (800ea04 <lwip_netconn_do_delconn+0x1e8>)
 800e846:	f240 4201 	movw	r2, #1025	; 0x401
 800e84a:	496f      	ldr	r1, [pc, #444]	; (800ea08 <lwip_netconn_do_delconn+0x1ec>)
 800e84c:	486f      	ldr	r0, [pc, #444]	; (800ea0c <lwip_netconn_do_delconn+0x1f0>)
 800e84e:	f00a fe57 	bl	8019500 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e852:	7cfb      	ldrb	r3, [r7, #19]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <lwip_netconn_do_delconn+0x48>
 800e858:	7cfb      	ldrb	r3, [r7, #19]
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	d002      	beq.n	800e864 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e85e:	7cfb      	ldrb	r3, [r7, #19]
 800e860:	2b03      	cmp	r3, #3
 800e862:	d109      	bne.n	800e878 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e864:	7cfb      	ldrb	r3, [r7, #19]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d10a      	bne.n	800e880 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	7f1b      	ldrb	r3, [r3, #28]
 800e870:	f003 0304 	and.w	r3, r3, #4
 800e874:	2b00      	cmp	r3, #0
 800e876:	d103      	bne.n	800e880 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	22fb      	movs	r2, #251	; 0xfb
 800e87c:	711a      	strb	r2, [r3, #4]
 800e87e:	e09c      	b.n	800e9ba <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e880:	7cfb      	ldrb	r3, [r7, #19]
 800e882:	2b03      	cmp	r3, #3
 800e884:	d10d      	bne.n	800e8a2 <lwip_netconn_do_delconn+0x86>
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	7f1b      	ldrb	r3, [r3, #28]
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d106      	bne.n	800e8a2 <lwip_netconn_do_delconn+0x86>
 800e894:	4b5b      	ldr	r3, [pc, #364]	; (800ea04 <lwip_netconn_do_delconn+0x1e8>)
 800e896:	f240 421f 	movw	r2, #1055	; 0x41f
 800e89a:	495d      	ldr	r1, [pc, #372]	; (800ea10 <lwip_netconn_do_delconn+0x1f4>)
 800e89c:	485b      	ldr	r0, [pc, #364]	; (800ea0c <lwip_netconn_do_delconn+0x1f0>)
 800e89e:	f00a fe2f 	bl	8019500 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff fdbd 	bl	800e42c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d064      	beq.n	800e986 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8c6:	2b10      	cmp	r3, #16
 800e8c8:	d00e      	beq.n	800e8e8 <lwip_netconn_do_delconn+0xcc>
 800e8ca:	2b20      	cmp	r3, #32
 800e8cc:	d000      	beq.n	800e8d0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800e8ce:	e056      	b.n	800e97e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f008 f941 	bl	8016b68 <udp_remove>
        break;
 800e8e6:	e04a      	b.n	800e97e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d104      	bne.n	800e8fc <lwip_netconn_do_delconn+0xe0>
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6a1b      	ldr	r3, [r3, #32]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <lwip_netconn_do_delconn+0xee>
 800e8fc:	4b41      	ldr	r3, [pc, #260]	; (800ea04 <lwip_netconn_do_delconn+0x1e8>)
 800e8fe:	f240 4235 	movw	r2, #1077	; 0x435
 800e902:	4944      	ldr	r1, [pc, #272]	; (800ea14 <lwip_netconn_do_delconn+0x1f8>)
 800e904:	4841      	ldr	r0, [pc, #260]	; (800ea0c <lwip_netconn_do_delconn+0x1f0>)
 800e906:	f00a fdfb 	bl	8019500 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2204      	movs	r2, #4
 800e910:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2203      	movs	r2, #3
 800e916:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	697a      	ldr	r2, [r7, #20]
 800e91e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2100      	movs	r1, #0
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fe00 	bl	800e52c <lwip_netconn_do_close_internal>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d064      	beq.n	800e9fc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	785b      	ldrb	r3, [r3, #1]
 800e938:	2b04      	cmp	r3, #4
 800e93a:	d006      	beq.n	800e94a <lwip_netconn_do_delconn+0x12e>
 800e93c:	4b31      	ldr	r3, [pc, #196]	; (800ea04 <lwip_netconn_do_delconn+0x1e8>)
 800e93e:	f240 423b 	movw	r2, #1083	; 0x43b
 800e942:	4935      	ldr	r1, [pc, #212]	; (800ea18 <lwip_netconn_do_delconn+0x1fc>)
 800e944:	4831      	ldr	r0, [pc, #196]	; (800ea0c <lwip_netconn_do_delconn+0x1f0>)
 800e946:	f00a fddb 	bl	8019500 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e94a:	4834      	ldr	r0, [pc, #208]	; (800ea1c <lwip_netconn_do_delconn+0x200>)
 800e94c:	f00a fd41 	bl	80193d2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	330c      	adds	r3, #12
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f00a fc97 	bl	801928c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e95e:	482f      	ldr	r0, [pc, #188]	; (800ea1c <lwip_netconn_do_delconn+0x200>)
 800e960:	f00a fd28 	bl	80193b4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	785b      	ldrb	r3, [r3, #1]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d046      	beq.n	800e9fc <lwip_netconn_do_delconn+0x1e0>
 800e96e:	4b25      	ldr	r3, [pc, #148]	; (800ea04 <lwip_netconn_do_delconn+0x1e8>)
 800e970:	f240 423f 	movw	r2, #1087	; 0x43f
 800e974:	4928      	ldr	r1, [pc, #160]	; (800ea18 <lwip_netconn_do_delconn+0x1fc>)
 800e976:	4825      	ldr	r0, [pc, #148]	; (800ea0c <lwip_netconn_do_delconn+0x1f0>)
 800e978:	f00a fdc2 	bl	8019500 <iprintf>
        return;
 800e97c:	e03e      	b.n	800e9fc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2200      	movs	r2, #0
 800e984:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d007      	beq.n	800e9a0 <lwip_netconn_do_delconn+0x184>
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	6810      	ldr	r0, [r2, #0]
 800e99a:	2200      	movs	r2, #0
 800e99c:	2100      	movs	r1, #0
 800e99e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d007      	beq.n	800e9ba <lwip_netconn_do_delconn+0x19e>
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	6810      	ldr	r0, [r2, #0]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2102      	movs	r1, #2
 800e9b8:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	330c      	adds	r3, #12
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f00a fcae 	bl	8019322 <sys_sem_valid>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d018      	beq.n	800e9fe <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d014      	beq.n	800e9fe <lwip_netconn_do_delconn+0x1e2>
 800e9d4:	f00a fd30 	bl	8019438 <sys_arch_protect>
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9e2:	f113 0f0c 	cmn.w	r3, #12
 800e9e6:	db05      	blt.n	800e9f4 <lwip_netconn_do_delconn+0x1d8>
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e9f2:	721a      	strb	r2, [r3, #8]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f00a fd2d 	bl	8019454 <sys_arch_unprotect>
 800e9fa:	e000      	b.n	800e9fe <lwip_netconn_do_delconn+0x1e2>
        return;
 800e9fc:	bf00      	nop
  }
}
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	0801aa70 	.word	0x0801aa70
 800ea08:	0801ada8 	.word	0x0801ada8
 800ea0c:	0801aaec 	.word	0x0801aaec
 800ea10:	0801adbc 	.word	0x0801adbc
 800ea14:	0801addc 	.word	0x0801addc
 800ea18:	0801adf8 	.word	0x0801adf8
 800ea1c:	2000d10c 	.word	0x2000d10c

0800ea20 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea34:	f113 0f0c 	cmn.w	r3, #12
 800ea38:	da06      	bge.n	800ea48 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	711a      	strb	r2, [r3, #4]
 800ea46:	e030      	b.n	800eaaa <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	22fa      	movs	r2, #250	; 0xfa
 800ea4c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d027      	beq.n	800eaa8 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea62:	2b10      	cmp	r3, #16
 800ea64:	d011      	beq.n	800ea8a <lwip_netconn_do_bind+0x6a>
 800ea66:	2b20      	cmp	r3, #32
 800ea68:	d000      	beq.n	800ea6c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800ea6a:	e01e      	b.n	800eaaa <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6858      	ldr	r0, [r3, #4]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6899      	ldr	r1, [r3, #8]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	899b      	ldrh	r3, [r3, #12]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f007 fff2 	bl	8016a64 <udp_bind>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	711a      	strb	r2, [r3, #4]
        break;
 800ea88:	e00f      	b.n	800eaaa <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	6858      	ldr	r0, [r3, #4]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6899      	ldr	r1, [r3, #8]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	899b      	ldrh	r3, [r3, #12]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	f002 fda7 	bl	80115ec <tcp_bind>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	711a      	strb	r2, [r3, #4]
        break;
 800eaa6:	e000      	b.n	800eaaa <lwip_netconn_do_bind+0x8a>
      }
    }
 800eaa8:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d012      	beq.n	800ead8 <lwip_netconn_do_bind+0xb8>
 800eab2:	f00a fcc1 	bl	8019438 <sys_arch_protect>
 800eab6:	60b8      	str	r0, [r7, #8]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eac0:	f113 0f0c 	cmn.w	r3, #12
 800eac4:	db05      	blt.n	800ead2 <lwip_netconn_do_bind+0xb2>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ead0:	721a      	strb	r2, [r3, #8]
 800ead2:	68b8      	ldr	r0, [r7, #8]
 800ead4:	f00a fcbe 	bl	8019454 <sys_arch_unprotect>
}
 800ead8:	bf00      	nop
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eaf4:	f113 0f0c 	cmn.w	r3, #12
 800eaf8:	da06      	bge.n	800eb08 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	711a      	strb	r2, [r3, #4]
 800eb06:	e090      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	22f5      	movs	r2, #245	; 0xf5
 800eb0c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f000 8088 	beq.w	800ec2a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb24:	2b10      	cmp	r3, #16
 800eb26:	d17d      	bne.n	800ec24 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	785b      	ldrb	r3, [r3, #1]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d16f      	bne.n	800ec12 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	7d1b      	ldrb	r3, [r3, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	22fa      	movs	r2, #250	; 0xfa
 800eb42:	711a      	strb	r2, [r3, #4]
 800eb44:	e071      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800eb46:	23ff      	movs	r3, #255	; 0xff
 800eb48:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	f107 020f 	add.w	r2, r7, #15
 800eb54:	7ef9      	ldrb	r1, [r7, #27]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f002 fdea 	bl	8011730 <tcp_listen_with_backlog_and_err>
 800eb5c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d104      	bne.n	800eb6e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800eb64:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	711a      	strb	r2, [r3, #4]
 800eb6c:	e05d      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	3310      	adds	r3, #16
 800eb74:	4618      	mov	r0, r3
 800eb76:	f00a fb43 	bl	8019200 <sys_mbox_valid>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00b      	beq.n	800eb98 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3310      	adds	r3, #16
 800eb86:	4618      	mov	r0, r3
 800eb88:	f00a fa9e 	bl	80190c8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3310      	adds	r3, #16
 800eb92:	4618      	mov	r0, r3
 800eb94:	f00a fb45 	bl	8019222 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3314      	adds	r3, #20
 800eba4:	4618      	mov	r0, r3
 800eba6:	f00a fb2b 	bl	8019200 <sys_mbox_valid>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3314      	adds	r3, #20
 800ebb6:	2106      	movs	r1, #6
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f00a fa63 	bl	8019084 <sys_mbox_new>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d118      	bne.n	800ec02 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	697a      	ldr	r2, [r7, #20]
 800ebde:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4619      	mov	r1, r3
 800ebec:	4610      	mov	r0, r2
 800ebee:	f003 fc67 	bl	80124c0 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	4919      	ldr	r1, [pc, #100]	; (800ec60 <lwip_netconn_do_listen+0x180>)
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f003 fcd6 	bl	80125ac <tcp_accept>
 800ec00:	e013      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	f002 fbd4 	bl	80113b0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	605a      	str	r2, [r3, #4]
 800ec10:	e00b      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	785b      	ldrb	r3, [r3, #1]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d106      	bne.n	800ec2a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	711a      	strb	r2, [r3, #4]
 800ec22:	e002      	b.n	800ec2a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	22f0      	movs	r2, #240	; 0xf0
 800ec28:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d012      	beq.n	800ec58 <lwip_netconn_do_listen+0x178>
 800ec32:	f00a fc01 	bl	8019438 <sys_arch_protect>
 800ec36:	6138      	str	r0, [r7, #16]
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ec40:	f113 0f0c 	cmn.w	r3, #12
 800ec44:	db05      	blt.n	800ec52 <lwip_netconn_do_listen+0x172>
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	69fa      	ldr	r2, [r7, #28]
 800ec4c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ec50:	721a      	strb	r2, [r3, #8]
 800ec52:	6938      	ldr	r0, [r7, #16]
 800ec54:	f00a fbfe 	bl	8019454 <sys_arch_unprotect>
}
 800ec58:	bf00      	nop
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	0800e045 	.word	0x0800e045

0800ec64 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2200      	movs	r2, #0
 800ec74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d022      	beq.n	800ecc6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec8a:	2b10      	cmp	r3, #16
 800ec8c:	d11b      	bne.n	800ecc6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec9a:	d202      	bcs.n	800eca2 <lwip_netconn_do_recv+0x3e>
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	e001      	b.n	800eca6 <lwip_netconn_do_recv+0x42>
 800eca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eca6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	89fa      	ldrh	r2, [r7, #14]
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f002 fe22 	bl	80118fc <tcp_recved>
        remaining -= recved;
 800ecb8:	89fb      	ldrh	r3, [r7, #14]
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e6      	bne.n	800ec94 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d012      	beq.n	800ecf4 <lwip_netconn_do_recv+0x90>
 800ecce:	f00a fbb3 	bl	8019438 <sys_arch_protect>
 800ecd2:	60b8      	str	r0, [r7, #8]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ecdc:	f113 0f0c 	cmn.w	r3, #12
 800ece0:	db05      	blt.n	800ecee <lwip_netconn_do_recv+0x8a>
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ecec:	721a      	strb	r2, [r3, #8]
 800ecee:	68b8      	ldr	r0, [r7, #8]
 800ecf0:	f00a fbb0 	bl	8019454 <sys_arch_unprotect>
}
 800ecf4:	bf00      	nop
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	; 0x28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d106      	bne.n	800ed22 <lwip_netconn_do_writemore+0x26>
 800ed14:	4ba3      	ldr	r3, [pc, #652]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ed16:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800ed1a:	49a3      	ldr	r1, [pc, #652]	; (800efa8 <lwip_netconn_do_writemore+0x2ac>)
 800ed1c:	48a3      	ldr	r0, [pc, #652]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ed1e:	f00a fbef 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	785b      	ldrb	r3, [r3, #1]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d006      	beq.n	800ed38 <lwip_netconn_do_writemore+0x3c>
 800ed2a:	4b9e      	ldr	r3, [pc, #632]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ed2c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800ed30:	499f      	ldr	r1, [pc, #636]	; (800efb0 <lwip_netconn_do_writemore+0x2b4>)
 800ed32:	489e      	ldr	r0, [pc, #632]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ed34:	f00a fbe4 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d106      	bne.n	800ed4e <lwip_netconn_do_writemore+0x52>
 800ed40:	4b98      	ldr	r3, [pc, #608]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ed42:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800ed46:	499b      	ldr	r1, [pc, #620]	; (800efb4 <lwip_netconn_do_writemore+0x2b8>)
 800ed48:	4898      	ldr	r0, [pc, #608]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ed4a:	f00a fbd9 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <lwip_netconn_do_writemore+0x68>
 800ed56:	4b93      	ldr	r3, [pc, #588]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ed58:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800ed5c:	4996      	ldr	r1, [pc, #600]	; (800efb8 <lwip_netconn_do_writemore+0x2bc>)
 800ed5e:	4893      	ldr	r0, [pc, #588]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ed60:	f00a fbce 	bl	8019500 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a1a      	ldr	r2, [r3, #32]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d306      	bcc.n	800ed80 <lwip_netconn_do_writemore+0x84>
 800ed72:	4b8c      	ldr	r3, [pc, #560]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ed74:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800ed78:	4990      	ldr	r1, [pc, #576]	; (800efbc <lwip_netconn_do_writemore+0x2c0>)
 800ed7a:	488c      	ldr	r0, [pc, #560]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ed7c:	f00a fbc0 	bl	8019500 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed84:	7c1b      	ldrb	r3, [r3, #16]
 800ed86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7f1b      	ldrb	r3, [r3, #28]
 800ed8e:	f003 0302 	and.w	r3, r3, #2
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d105      	bne.n	800eda2 <lwip_netconn_do_writemore+0xa6>
 800ed96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed9a:	f003 0304 	and.w	r3, r3, #4
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <lwip_netconn_do_writemore+0xaa>
 800eda2:	2301      	movs	r3, #1
 800eda4:	e000      	b.n	800eda8 <lwip_netconn_do_writemore+0xac>
 800eda6:	2300      	movs	r3, #0
 800eda8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb0:	689a      	ldr	r2, [r3, #8]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	4413      	add	r3, r2
 800edb8:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	68da      	ldr	r2, [r3, #12]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6a1b      	ldr	r3, [r3, #32]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edce:	d309      	bcc.n	800ede4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800edd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edd4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800edd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edda:	f043 0302 	orr.w	r3, r3, #2
 800edde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ede2:	e001      	b.n	800ede8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edf0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800edf2:	8afa      	ldrh	r2, [r7, #22]
 800edf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d212      	bcs.n	800ee20 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800edfa:	8afb      	ldrh	r3, [r7, #22]
 800edfc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800edfe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d006      	beq.n	800ee14 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800ee06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d109      	bne.n	800ee20 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800ee0c:	23f9      	movs	r3, #249	; 0xf9
 800ee0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800ee12:	e02a      	b.n	800ee6a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ee14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee18:	f043 0302 	orr.w	r3, r3, #2
 800ee1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a1a      	ldr	r2, [r3, #32]
 800ee24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee26:	441a      	add	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d906      	bls.n	800ee40 <lwip_netconn_do_writemore+0x144>
 800ee32:	4b5c      	ldr	r3, [pc, #368]	; (800efa4 <lwip_netconn_do_writemore+0x2a8>)
 800ee34:	f240 6213 	movw	r2, #1555	; 0x613
 800ee38:	4961      	ldr	r1, [pc, #388]	; (800efc0 <lwip_netconn_do_writemore+0x2c4>)
 800ee3a:	485c      	ldr	r0, [pc, #368]	; (800efac <lwip_netconn_do_writemore+0x2b0>)
 800ee3c:	f00a fb60 	bl	8019500 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6858      	ldr	r0, [r3, #4]
 800ee44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee4a:	69f9      	ldr	r1, [r7, #28]
 800ee4c:	f006 f97a 	bl	8015144 <tcp_write>
 800ee50:	4603      	mov	r3, r0
 800ee52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ee56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d004      	beq.n	800ee68 <lwip_netconn_do_writemore+0x16c>
 800ee5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee66:	d133      	bne.n	800eed0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800ee68:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800ee6a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d017      	beq.n	800eea2 <lwip_netconn_do_writemore+0x1a6>
 800ee72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d211      	bcs.n	800eea2 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d005      	beq.n	800ee92 <lwip_netconn_do_writemore+0x196>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee8c:	2103      	movs	r1, #3
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7f1b      	ldrb	r3, [r3, #28]
 800ee96:	f043 0310 	orr.w	r3, r3, #16
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	771a      	strb	r2, [r3, #28]
 800eea0:	e016      	b.n	800eed0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeaa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800eeae:	d305      	bcc.n	800eebc <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800eeb8:	2b04      	cmp	r3, #4
 800eeba:	d909      	bls.n	800eed0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d005      	beq.n	800eed0 <lwip_netconn_do_writemore+0x1d4>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eeca:	2103      	movs	r1, #3
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800eed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d134      	bne.n	800ef42 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a1a      	ldr	r2, [r3, #32]
 800eedc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eede:	441a      	add	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6a1a      	ldr	r2, [r3, #32]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d003      	beq.n	800eefa <lwip_netconn_do_writemore+0x1fe>
 800eef2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d007      	beq.n	800ef0a <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	6a12      	ldr	r2, [r2, #32]
 800ef02:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f006 fdca 	bl	8015aa8 <tcp_output>
 800ef14:	4603      	mov	r3, r0
 800ef16:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ef18:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ef1c:	f113 0f0c 	cmn.w	r3, #12
 800ef20:	db04      	blt.n	800ef2c <lwip_netconn_do_writemore+0x230>
 800ef22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ef26:	f113 0f04 	cmn.w	r3, #4
 800ef2a:	d152      	bne.n	800efd2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ef2c:	7d3b      	ldrb	r3, [r7, #20]
 800ef2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ef32:	2301      	movs	r3, #1
 800ef34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	60da      	str	r2, [r3, #12]
 800ef40:	e047      	b.n	800efd2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800ef42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4a:	d13b      	bne.n	800efc4 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f006 fda9 	bl	8015aa8 <tcp_output>
 800ef56:	4603      	mov	r3, r0
 800ef58:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ef5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ef5e:	f113 0f0c 	cmn.w	r3, #12
 800ef62:	db04      	blt.n	800ef6e <lwip_netconn_do_writemore+0x272>
 800ef64:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ef68:	f113 0f04 	cmn.w	r3, #4
 800ef6c:	d10a      	bne.n	800ef84 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ef6e:	7d7b      	ldrb	r3, [r7, #21]
 800ef70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	2200      	movs	r2, #0
 800ef80:	60da      	str	r2, [r3, #12]
 800ef82:	e026      	b.n	800efd2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800ef84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d022      	beq.n	800efd2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800ef8c:	23f9      	movs	r3, #249	; 0xf9
 800ef8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ef92:	2301      	movs	r3, #1
 800ef94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	60da      	str	r2, [r3, #12]
 800efa0:	e017      	b.n	800efd2 <lwip_netconn_do_writemore+0x2d6>
 800efa2:	bf00      	nop
 800efa4:	0801aa70 	.word	0x0801aa70
 800efa8:	0801abb8 	.word	0x0801abb8
 800efac:	0801aaec 	.word	0x0801aaec
 800efb0:	0801ae98 	.word	0x0801ae98
 800efb4:	0801abc8 	.word	0x0801abc8
 800efb8:	0801aeb8 	.word	0x0801aeb8
 800efbc:	0801aed0 	.word	0x0801aed0
 800efc0:	0801af04 	.word	0x0801af04
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800efc4:	2301      	movs	r3, #1
 800efc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	2200      	movs	r2, #0
 800efd0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800efd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d02c      	beq.n	800f034 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	330c      	adds	r3, #12
 800efe2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800efec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00f      	beq.n	800f026 <lwip_netconn_do_writemore+0x32a>
 800f006:	f00a fa17 	bl	8019438 <sys_arch_protect>
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f012:	f113 0f0c 	cmn.w	r3, #12
 800f016:	db03      	blt.n	800f020 <lwip_netconn_do_writemore+0x324>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f01e:	721a      	strb	r2, [r3, #8]
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f00a fa17 	bl	8019454 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d006      	beq.n	800f03a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800f02c:	6938      	ldr	r0, [r7, #16]
 800f02e:	f00a f95e 	bl	80192ee <sys_sem_signal>
 800f032:	e002      	b.n	800f03a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800f034:	f04f 33ff 	mov.w	r3, #4294967295
 800f038:	e000      	b.n	800f03c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3728      	adds	r7, #40	; 0x28
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f058:	f113 0f0c 	cmn.w	r3, #12
 800f05c:	da06      	bge.n	800f06c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	711a      	strb	r2, [r3, #4]
 800f06a:	e072      	b.n	800f152 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f076:	2b10      	cmp	r3, #16
 800f078:	d168      	bne.n	800f14c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	785b      	ldrb	r3, [r3, #1]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d003      	beq.n	800f08c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	22fb      	movs	r2, #251	; 0xfb
 800f088:	711a      	strb	r2, [r3, #4]
 800f08a:	e062      	b.n	800f152 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d056      	beq.n	800f144 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2201      	movs	r2, #1
 800f09c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d104      	bne.n	800f0b2 <lwip_netconn_do_write+0x6e>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d006      	beq.n	800f0c0 <lwip_netconn_do_write+0x7c>
 800f0b2:	4b36      	ldr	r3, [pc, #216]	; (800f18c <lwip_netconn_do_write+0x148>)
 800f0b4:	f240 6283 	movw	r2, #1667	; 0x683
 800f0b8:	4935      	ldr	r1, [pc, #212]	; (800f190 <lwip_netconn_do_write+0x14c>)
 800f0ba:	4836      	ldr	r0, [pc, #216]	; (800f194 <lwip_netconn_do_write+0x150>)
 800f0bc:	f00a fa20 	bl	8019500 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d106      	bne.n	800f0d6 <lwip_netconn_do_write+0x92>
 800f0c8:	4b30      	ldr	r3, [pc, #192]	; (800f18c <lwip_netconn_do_write+0x148>)
 800f0ca:	f240 6284 	movw	r2, #1668	; 0x684
 800f0ce:	4932      	ldr	r1, [pc, #200]	; (800f198 <lwip_netconn_do_write+0x154>)
 800f0d0:	4830      	ldr	r0, [pc, #192]	; (800f194 <lwip_netconn_do_write+0x150>)
 800f0d2:	f00a fa15 	bl	8019500 <iprintf>
        msg->conn->current_msg = msg;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7ff fe05 	bl	800ecfc <lwip_netconn_do_writemore>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d044      	beq.n	800f182 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d006      	beq.n	800f110 <lwip_netconn_do_write+0xcc>
 800f102:	4b22      	ldr	r3, [pc, #136]	; (800f18c <lwip_netconn_do_write+0x148>)
 800f104:	f240 6289 	movw	r2, #1673	; 0x689
 800f108:	4924      	ldr	r1, [pc, #144]	; (800f19c <lwip_netconn_do_write+0x158>)
 800f10a:	4822      	ldr	r0, [pc, #136]	; (800f194 <lwip_netconn_do_write+0x150>)
 800f10c:	f00a f9f8 	bl	8019500 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f110:	4823      	ldr	r0, [pc, #140]	; (800f1a0 <lwip_netconn_do_write+0x15c>)
 800f112:	f00a f95e 	bl	80193d2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	330c      	adds	r3, #12
 800f11c:	2100      	movs	r1, #0
 800f11e:	4618      	mov	r0, r3
 800f120:	f00a f8b4 	bl	801928c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f124:	481e      	ldr	r0, [pc, #120]	; (800f1a0 <lwip_netconn_do_write+0x15c>)
 800f126:	f00a f945 	bl	80193b4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	785b      	ldrb	r3, [r3, #1]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d126      	bne.n	800f182 <lwip_netconn_do_write+0x13e>
 800f134:	4b15      	ldr	r3, [pc, #84]	; (800f18c <lwip_netconn_do_write+0x148>)
 800f136:	f240 628d 	movw	r2, #1677	; 0x68d
 800f13a:	4918      	ldr	r1, [pc, #96]	; (800f19c <lwip_netconn_do_write+0x158>)
 800f13c:	4815      	ldr	r0, [pc, #84]	; (800f194 <lwip_netconn_do_write+0x150>)
 800f13e:	f00a f9df 	bl	8019500 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800f142:	e01e      	b.n	800f182 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	22f5      	movs	r2, #245	; 0xf5
 800f148:	711a      	strb	r2, [r3, #4]
 800f14a:	e002      	b.n	800f152 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	22fa      	movs	r2, #250	; 0xfa
 800f150:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d014      	beq.n	800f184 <lwip_netconn_do_write+0x140>
 800f15a:	f00a f96d 	bl	8019438 <sys_arch_protect>
 800f15e:	60b8      	str	r0, [r7, #8]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f168:	f113 0f0c 	cmn.w	r3, #12
 800f16c:	db05      	blt.n	800f17a <lwip_netconn_do_write+0x136>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f178:	721a      	strb	r2, [r3, #8]
 800f17a:	68b8      	ldr	r0, [r7, #8]
 800f17c:	f00a f96a 	bl	8019454 <sys_arch_unprotect>
 800f180:	e000      	b.n	800f184 <lwip_netconn_do_write+0x140>
        return;
 800f182:	bf00      	nop
}
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	0801aa70 	.word	0x0801aa70
 800f190:	0801addc 	.word	0x0801addc
 800f194:	0801aaec 	.word	0x0801aaec
 800f198:	0801af30 	.word	0x0801af30
 800f19c:	0801adf8 	.word	0x0801adf8
 800f1a0:	2000d10c 	.word	0x2000d10c

0800f1a4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	785b      	ldrb	r3, [r3, #1]
 800f1b6:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d06e      	beq.n	800f2a0 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800f1cc:	2b10      	cmp	r3, #16
 800f1ce:	d167      	bne.n	800f2a0 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f1d4:	2b03      	cmp	r3, #3
 800f1d6:	d002      	beq.n	800f1de <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f1d8:	7cfb      	ldrb	r3, [r7, #19]
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d060      	beq.n	800f2a0 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800f1de:	7cfb      	ldrb	r3, [r7, #19]
 800f1e0:	2b03      	cmp	r3, #3
 800f1e2:	d103      	bne.n	800f1ec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	22f5      	movs	r2, #245	; 0xf5
 800f1e8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f1ea:	e05c      	b.n	800f2a6 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800f1ec:	7cfb      	ldrb	r3, [r7, #19]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d103      	bne.n	800f1fa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	22fb      	movs	r2, #251	; 0xfb
 800f1f6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f1f8:	e055      	b.n	800f2a6 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	7a1b      	ldrb	r3, [r3, #8]
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff f90e 	bl	800e42c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f216:	2b00      	cmp	r3, #0
 800f218:	d104      	bne.n	800f224 <lwip_netconn_do_close+0x80>
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d006      	beq.n	800f232 <lwip_netconn_do_close+0x8e>
 800f224:	4b2e      	ldr	r3, [pc, #184]	; (800f2e0 <lwip_netconn_do_close+0x13c>)
 800f226:	f240 721c 	movw	r2, #1820	; 0x71c
 800f22a:	492e      	ldr	r1, [pc, #184]	; (800f2e4 <lwip_netconn_do_close+0x140>)
 800f22c:	482e      	ldr	r0, [pc, #184]	; (800f2e8 <lwip_netconn_do_close+0x144>)
 800f22e:	f00a f967 	bl	8019500 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2204      	movs	r2, #4
 800f238:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2100      	movs	r1, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff f96f 	bl	800e52c <lwip_netconn_do_close_internal>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d040      	beq.n	800f2d6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	785b      	ldrb	r3, [r3, #1]
 800f25a:	2b04      	cmp	r3, #4
 800f25c:	d006      	beq.n	800f26c <lwip_netconn_do_close+0xc8>
 800f25e:	4b20      	ldr	r3, [pc, #128]	; (800f2e0 <lwip_netconn_do_close+0x13c>)
 800f260:	f240 7221 	movw	r2, #1825	; 0x721
 800f264:	4921      	ldr	r1, [pc, #132]	; (800f2ec <lwip_netconn_do_close+0x148>)
 800f266:	4820      	ldr	r0, [pc, #128]	; (800f2e8 <lwip_netconn_do_close+0x144>)
 800f268:	f00a f94a 	bl	8019500 <iprintf>
        UNLOCK_TCPIP_CORE();
 800f26c:	4820      	ldr	r0, [pc, #128]	; (800f2f0 <lwip_netconn_do_close+0x14c>)
 800f26e:	f00a f8b0 	bl	80193d2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	330c      	adds	r3, #12
 800f278:	2100      	movs	r1, #0
 800f27a:	4618      	mov	r0, r3
 800f27c:	f00a f806 	bl	801928c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800f280:	481b      	ldr	r0, [pc, #108]	; (800f2f0 <lwip_netconn_do_close+0x14c>)
 800f282:	f00a f897 	bl	80193b4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	785b      	ldrb	r3, [r3, #1]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d022      	beq.n	800f2d6 <lwip_netconn_do_close+0x132>
 800f290:	4b13      	ldr	r3, [pc, #76]	; (800f2e0 <lwip_netconn_do_close+0x13c>)
 800f292:	f240 7225 	movw	r2, #1829	; 0x725
 800f296:	4915      	ldr	r1, [pc, #84]	; (800f2ec <lwip_netconn_do_close+0x148>)
 800f298:	4813      	ldr	r0, [pc, #76]	; (800f2e8 <lwip_netconn_do_close+0x144>)
 800f29a:	f00a f931 	bl	8019500 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800f29e:	e01a      	b.n	800f2d6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	22f5      	movs	r2, #245	; 0xf5
 800f2a4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d014      	beq.n	800f2d8 <lwip_netconn_do_close+0x134>
 800f2ae:	f00a f8c3 	bl	8019438 <sys_arch_protect>
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f2bc:	f113 0f0c 	cmn.w	r3, #12
 800f2c0:	db05      	blt.n	800f2ce <lwip_netconn_do_close+0x12a>
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f2cc:	721a      	strb	r2, [r3, #8]
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f00a f8c0 	bl	8019454 <sys_arch_unprotect>
 800f2d4:	e000      	b.n	800f2d8 <lwip_netconn_do_close+0x134>
      return;
 800f2d6:	bf00      	nop
}
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	0801aa70 	.word	0x0801aa70
 800f2e4:	0801addc 	.word	0x0801addc
 800f2e8:	0801aaec 	.word	0x0801aaec
 800f2ec:	0801adf8 	.word	0x0801adf8
 800f2f0:	2000d10c 	.word	0x2000d10c

0800f2f4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d013      	beq.n	800f32a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00b      	beq.n	800f322 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4618      	mov	r0, r3
 800f310:	f001 fc1a 	bl	8010b48 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	605a      	str	r2, [r3, #4]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	2006      	movs	r0, #6
 800f326:	f000 fe77 	bl	8010018 <memp_free>
  }
}
 800f32a:	bf00      	nop
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
	...

0800f334 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d108      	bne.n	800f358 <netbuf_data+0x24>
 800f346:	4b1b      	ldr	r3, [pc, #108]	; (800f3b4 <netbuf_data+0x80>)
 800f348:	22c2      	movs	r2, #194	; 0xc2
 800f34a:	491b      	ldr	r1, [pc, #108]	; (800f3b8 <netbuf_data+0x84>)
 800f34c:	481b      	ldr	r0, [pc, #108]	; (800f3bc <netbuf_data+0x88>)
 800f34e:	f00a f8d7 	bl	8019500 <iprintf>
 800f352:	f06f 030f 	mvn.w	r3, #15
 800f356:	e029      	b.n	800f3ac <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d108      	bne.n	800f370 <netbuf_data+0x3c>
 800f35e:	4b15      	ldr	r3, [pc, #84]	; (800f3b4 <netbuf_data+0x80>)
 800f360:	22c3      	movs	r2, #195	; 0xc3
 800f362:	4917      	ldr	r1, [pc, #92]	; (800f3c0 <netbuf_data+0x8c>)
 800f364:	4815      	ldr	r0, [pc, #84]	; (800f3bc <netbuf_data+0x88>)
 800f366:	f00a f8cb 	bl	8019500 <iprintf>
 800f36a:	f06f 030f 	mvn.w	r3, #15
 800f36e:	e01d      	b.n	800f3ac <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d108      	bne.n	800f388 <netbuf_data+0x54>
 800f376:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <netbuf_data+0x80>)
 800f378:	22c4      	movs	r2, #196	; 0xc4
 800f37a:	4912      	ldr	r1, [pc, #72]	; (800f3c4 <netbuf_data+0x90>)
 800f37c:	480f      	ldr	r0, [pc, #60]	; (800f3bc <netbuf_data+0x88>)
 800f37e:	f00a f8bf 	bl	8019500 <iprintf>
 800f382:	f06f 030f 	mvn.w	r3, #15
 800f386:	e011      	b.n	800f3ac <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d102      	bne.n	800f396 <netbuf_data+0x62>
    return ERR_BUF;
 800f390:	f06f 0301 	mvn.w	r3, #1
 800f394:	e00a      	b.n	800f3ac <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	895a      	ldrh	r2, [r3, #10]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	0801af5c 	.word	0x0801af5c
 800f3b8:	0801b084 	.word	0x0801b084
 800f3bc:	0801afcc 	.word	0x0801afcc
 800f3c0:	0801b0a0 	.word	0x0801b0a0
 800f3c4:	0801b0c0 	.word	0x0801b0c0

0800f3c8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d108      	bne.n	800f3e8 <netbuf_next+0x20>
 800f3d6:	4b11      	ldr	r3, [pc, #68]	; (800f41c <netbuf_next+0x54>)
 800f3d8:	22dc      	movs	r2, #220	; 0xdc
 800f3da:	4911      	ldr	r1, [pc, #68]	; (800f420 <netbuf_next+0x58>)
 800f3dc:	4811      	ldr	r0, [pc, #68]	; (800f424 <netbuf_next+0x5c>)
 800f3de:	f00a f88f 	bl	8019500 <iprintf>
 800f3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e6:	e014      	b.n	800f412 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d102      	bne.n	800f3f8 <netbuf_next+0x30>
    return -1;
 800f3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f6:	e00c      	b.n	800f412 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <netbuf_next+0x48>
    return 1;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <netbuf_next+0x4a>
  }
  return 0;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	0801af5c 	.word	0x0801af5c
 800f420:	0801b0dc 	.word	0x0801b0dc
 800f424:	0801afcc 	.word	0x0801afcc

0800f428 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800f430:	4b29      	ldr	r3, [pc, #164]	; (800f4d8 <tcpip_thread+0xb0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d005      	beq.n	800f444 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800f438:	4b27      	ldr	r3, [pc, #156]	; (800f4d8 <tcpip_thread+0xb0>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a27      	ldr	r2, [pc, #156]	; (800f4dc <tcpip_thread+0xb4>)
 800f43e:	6812      	ldr	r2, [r2, #0]
 800f440:	4610      	mov	r0, r2
 800f442:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800f444:	4826      	ldr	r0, [pc, #152]	; (800f4e0 <tcpip_thread+0xb8>)
 800f446:	f009 ffb5 	bl	80193b4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800f44a:	4825      	ldr	r0, [pc, #148]	; (800f4e0 <tcpip_thread+0xb8>)
 800f44c:	f009 ffc1 	bl	80193d2 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800f450:	f107 030c 	add.w	r3, r7, #12
 800f454:	4619      	mov	r1, r3
 800f456:	4823      	ldr	r0, [pc, #140]	; (800f4e4 <tcpip_thread+0xbc>)
 800f458:	f007 f97c 	bl	8016754 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f45c:	4820      	ldr	r0, [pc, #128]	; (800f4e0 <tcpip_thread+0xb8>)
 800f45e:	f009 ffa9 	bl	80193b4 <sys_mutex_lock>
    if (msg == NULL) {
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f468:	4b1f      	ldr	r3, [pc, #124]	; (800f4e8 <tcpip_thread+0xc0>)
 800f46a:	2269      	movs	r2, #105	; 0x69
 800f46c:	491f      	ldr	r1, [pc, #124]	; (800f4ec <tcpip_thread+0xc4>)
 800f46e:	4820      	ldr	r0, [pc, #128]	; (800f4f0 <tcpip_thread+0xc8>)
 800f470:	f00a f846 	bl	8019500 <iprintf>
      continue;
 800f474:	e02f      	b.n	800f4d6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d011      	beq.n	800f4a2 <tcpip_thread+0x7a>
 800f47e:	2b04      	cmp	r3, #4
 800f480:	d01b      	beq.n	800f4ba <tcpip_thread+0x92>
 800f482:	2b02      	cmp	r3, #2
 800f484:	d120      	bne.n	800f4c8 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	6850      	ldr	r0, [r2, #4]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	6892      	ldr	r2, [r2, #8]
 800f492:	4611      	mov	r1, r2
 800f494:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	4619      	mov	r1, r3
 800f49a:	2009      	movs	r0, #9
 800f49c:	f000 fdbc 	bl	8010018 <memp_free>
      break;
 800f4a0:	e019      	b.n	800f4d6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	6892      	ldr	r2, [r2, #8]
 800f4aa:	4610      	mov	r0, r2
 800f4ac:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	2008      	movs	r0, #8
 800f4b4:	f000 fdb0 	bl	8010018 <memp_free>
      break;
 800f4b8:	e00d      	b.n	800f4d6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	6892      	ldr	r2, [r2, #8]
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	4798      	blx	r3
      break;
 800f4c6:	e006      	b.n	800f4d6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f4c8:	4b07      	ldr	r3, [pc, #28]	; (800f4e8 <tcpip_thread+0xc0>)
 800f4ca:	229b      	movs	r2, #155	; 0x9b
 800f4cc:	4907      	ldr	r1, [pc, #28]	; (800f4ec <tcpip_thread+0xc4>)
 800f4ce:	4808      	ldr	r0, [pc, #32]	; (800f4f0 <tcpip_thread+0xc8>)
 800f4d0:	f00a f816 	bl	8019500 <iprintf>
      break;
 800f4d4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800f4d6:	e7b8      	b.n	800f44a <tcpip_thread+0x22>
 800f4d8:	2000c7b0 	.word	0x2000c7b0
 800f4dc:	2000c7b4 	.word	0x2000c7b4
 800f4e0:	2000d10c 	.word	0x2000d10c
 800f4e4:	2000c7b8 	.word	0x2000c7b8
 800f4e8:	0801b114 	.word	0x0801b114
 800f4ec:	0801b168 	.word	0x0801b168
 800f4f0:	0801b188 	.word	0x0801b188

0800f4f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b086      	sub	sp, #24
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f500:	481a      	ldr	r0, [pc, #104]	; (800f56c <tcpip_inpkt+0x78>)
 800f502:	f009 fe7d 	bl	8019200 <sys_mbox_valid>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d105      	bne.n	800f518 <tcpip_inpkt+0x24>
 800f50c:	4b18      	ldr	r3, [pc, #96]	; (800f570 <tcpip_inpkt+0x7c>)
 800f50e:	22b5      	movs	r2, #181	; 0xb5
 800f510:	4918      	ldr	r1, [pc, #96]	; (800f574 <tcpip_inpkt+0x80>)
 800f512:	4819      	ldr	r0, [pc, #100]	; (800f578 <tcpip_inpkt+0x84>)
 800f514:	f009 fff4 	bl	8019500 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f518:	2009      	movs	r0, #9
 800f51a:	f000 fd07 	bl	800ff2c <memp_malloc>
 800f51e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d102      	bne.n	800f52c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f526:	f04f 33ff 	mov.w	r3, #4294967295
 800f52a:	e01a      	b.n	800f562 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	2202      	movs	r2, #2
 800f530:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f544:	6979      	ldr	r1, [r7, #20]
 800f546:	4809      	ldr	r0, [pc, #36]	; (800f56c <tcpip_inpkt+0x78>)
 800f548:	f009 fde5 	bl	8019116 <sys_mbox_trypost>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d006      	beq.n	800f560 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f552:	6979      	ldr	r1, [r7, #20]
 800f554:	2009      	movs	r0, #9
 800f556:	f000 fd5f 	bl	8010018 <memp_free>
    return ERR_MEM;
 800f55a:	f04f 33ff 	mov.w	r3, #4294967295
 800f55e:	e000      	b.n	800f562 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f560:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f562:	4618      	mov	r0, r3
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	2000c7b8 	.word	0x2000c7b8
 800f570:	0801b114 	.word	0x0801b114
 800f574:	0801b1b0 	.word	0x0801b1b0
 800f578:	0801b188 	.word	0x0801b188

0800f57c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f58c:	f003 0318 	and.w	r3, r3, #24
 800f590:	2b00      	cmp	r3, #0
 800f592:	d006      	beq.n	800f5a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f594:	4a08      	ldr	r2, [pc, #32]	; (800f5b8 <tcpip_input+0x3c>)
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff ffab 	bl	800f4f4 <tcpip_inpkt>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	e005      	b.n	800f5ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800f5a2:	4a06      	ldr	r2, [pc, #24]	; (800f5bc <tcpip_input+0x40>)
 800f5a4:	6839      	ldr	r1, [r7, #0]
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7ff ffa4 	bl	800f4f4 <tcpip_inpkt>
 800f5ac:	4603      	mov	r3, r0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	08018ecd 	.word	0x08018ecd
 800f5bc:	08017e91 	.word	0x08017e91

0800f5c0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f5ce:	481d      	ldr	r0, [pc, #116]	; (800f644 <tcpip_callback_with_block+0x84>)
 800f5d0:	f009 fe16 	bl	8019200 <sys_mbox_valid>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d105      	bne.n	800f5e6 <tcpip_callback_with_block+0x26>
 800f5da:	4b1b      	ldr	r3, [pc, #108]	; (800f648 <tcpip_callback_with_block+0x88>)
 800f5dc:	22ee      	movs	r2, #238	; 0xee
 800f5de:	491b      	ldr	r1, [pc, #108]	; (800f64c <tcpip_callback_with_block+0x8c>)
 800f5e0:	481b      	ldr	r0, [pc, #108]	; (800f650 <tcpip_callback_with_block+0x90>)
 800f5e2:	f009 ff8d 	bl	8019500 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f5e6:	2008      	movs	r0, #8
 800f5e8:	f000 fca0 	bl	800ff2c <memp_malloc>
 800f5ec:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d102      	bne.n	800f5fa <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f8:	e01f      	b.n	800f63a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	68fa      	ldr	r2, [r7, #12]
 800f604:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	609a      	str	r2, [r3, #8]
  if (block) {
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d004      	beq.n	800f61c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800f612:	6979      	ldr	r1, [r7, #20]
 800f614:	480b      	ldr	r0, [pc, #44]	; (800f644 <tcpip_callback_with_block+0x84>)
 800f616:	f009 fd69 	bl	80190ec <sys_mbox_post>
 800f61a:	e00d      	b.n	800f638 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f61c:	6979      	ldr	r1, [r7, #20]
 800f61e:	4809      	ldr	r0, [pc, #36]	; (800f644 <tcpip_callback_with_block+0x84>)
 800f620:	f009 fd79 	bl	8019116 <sys_mbox_trypost>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d006      	beq.n	800f638 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f62a:	6979      	ldr	r1, [r7, #20]
 800f62c:	2008      	movs	r0, #8
 800f62e:	f000 fcf3 	bl	8010018 <memp_free>
      return ERR_MEM;
 800f632:	f04f 33ff 	mov.w	r3, #4294967295
 800f636:	e000      	b.n	800f63a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	2000c7b8 	.word	0x2000c7b8
 800f648:	0801b114 	.word	0x0801b114
 800f64c:	0801b1b0 	.word	0x0801b1b0
 800f650:	0801b188 	.word	0x0801b188

0800f654 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f660:	4806      	ldr	r0, [pc, #24]	; (800f67c <tcpip_send_msg_wait_sem+0x28>)
 800f662:	f009 fea7 	bl	80193b4 <sys_mutex_lock>
  fn(apimsg);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	68b8      	ldr	r0, [r7, #8]
 800f66a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f66c:	4803      	ldr	r0, [pc, #12]	; (800f67c <tcpip_send_msg_wait_sem+0x28>)
 800f66e:	f009 feb0 	bl	80193d2 <sys_mutex_unlock>
  return ERR_OK;
 800f672:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2000d10c 	.word	0x2000d10c

0800f680 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af02      	add	r7, sp, #8
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f68a:	f000 f86a 	bl	800f762 <lwip_init>

  tcpip_init_done = initfunc;
 800f68e:	4a17      	ldr	r2, [pc, #92]	; (800f6ec <tcpip_init+0x6c>)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f694:	4a16      	ldr	r2, [pc, #88]	; (800f6f0 <tcpip_init+0x70>)
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f69a:	2106      	movs	r1, #6
 800f69c:	4815      	ldr	r0, [pc, #84]	; (800f6f4 <tcpip_init+0x74>)
 800f69e:	f009 fcf1 	bl	8019084 <sys_mbox_new>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d006      	beq.n	800f6b6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f6a8:	4b13      	ldr	r3, [pc, #76]	; (800f6f8 <tcpip_init+0x78>)
 800f6aa:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f6ae:	4913      	ldr	r1, [pc, #76]	; (800f6fc <tcpip_init+0x7c>)
 800f6b0:	4813      	ldr	r0, [pc, #76]	; (800f700 <tcpip_init+0x80>)
 800f6b2:	f009 ff25 	bl	8019500 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f6b6:	4813      	ldr	r0, [pc, #76]	; (800f704 <tcpip_init+0x84>)
 800f6b8:	f009 fe60 	bl	801937c <sys_mutex_new>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d006      	beq.n	800f6d0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	; (800f6f8 <tcpip_init+0x78>)
 800f6c4:	f240 12d9 	movw	r2, #473	; 0x1d9
 800f6c8:	490f      	ldr	r1, [pc, #60]	; (800f708 <tcpip_init+0x88>)
 800f6ca:	480d      	ldr	r0, [pc, #52]	; (800f700 <tcpip_init+0x80>)
 800f6cc:	f009 ff18 	bl	8019500 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6d8:	2200      	movs	r2, #0
 800f6da:	490c      	ldr	r1, [pc, #48]	; (800f70c <tcpip_init+0x8c>)
 800f6dc:	480c      	ldr	r0, [pc, #48]	; (800f710 <tcpip_init+0x90>)
 800f6de:	f009 fe85 	bl	80193ec <sys_thread_new>
}
 800f6e2:	bf00      	nop
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2000c7b0 	.word	0x2000c7b0
 800f6f0:	2000c7b4 	.word	0x2000c7b4
 800f6f4:	2000c7b8 	.word	0x2000c7b8
 800f6f8:	0801b114 	.word	0x0801b114
 800f6fc:	0801b1c0 	.word	0x0801b1c0
 800f700:	0801b188 	.word	0x0801b188
 800f704:	2000d10c 	.word	0x2000d10c
 800f708:	0801b1e4 	.word	0x0801b1e4
 800f70c:	0800f429 	.word	0x0800f429
 800f710:	0801b208 	.word	0x0801b208

0800f714 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800f71e:	88fb      	ldrh	r3, [r7, #6]
 800f720:	ba5b      	rev16	r3, r3
 800f722:	b29b      	uxth	r3, r3
}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	061a      	lsls	r2, r3, #24
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	021b      	lsls	r3, r3, #8
 800f740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f744:	431a      	orrs	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	0a1b      	lsrs	r3, r3, #8
 800f74a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f74e:	431a      	orrs	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	0e1b      	lsrs	r3, r3, #24
 800f754:	4313      	orrs	r3, r2
}
 800f756:	4618      	mov	r0, r3
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr

0800f762 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b082      	sub	sp, #8
 800f766:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f768:	2300      	movs	r3, #0
 800f76a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f76c:	f009 fdf8 	bl	8019360 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f770:	f000 f8a6 	bl	800f8c0 <mem_init>
  memp_init();
 800f774:	f000 fb6c 	bl	800fe50 <memp_init>
  pbuf_init();
  netif_init();
 800f778:	f000 fc78 	bl	801006c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f77c:	f007 f810 	bl	80167a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f780:	f001 fc58 	bl	8011034 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f784:	f006 fea2 	bl	80164cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f788:	bf00      	nop
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f798:	4b40      	ldr	r3, [pc, #256]	; (800f89c <plug_holes+0x10c>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d206      	bcs.n	800f7b0 <plug_holes+0x20>
 800f7a2:	4b3f      	ldr	r3, [pc, #252]	; (800f8a0 <plug_holes+0x110>)
 800f7a4:	f240 125d 	movw	r2, #349	; 0x15d
 800f7a8:	493e      	ldr	r1, [pc, #248]	; (800f8a4 <plug_holes+0x114>)
 800f7aa:	483f      	ldr	r0, [pc, #252]	; (800f8a8 <plug_holes+0x118>)
 800f7ac:	f009 fea8 	bl	8019500 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f7b0:	4b3e      	ldr	r3, [pc, #248]	; (800f8ac <plug_holes+0x11c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d306      	bcc.n	800f7c8 <plug_holes+0x38>
 800f7ba:	4b39      	ldr	r3, [pc, #228]	; (800f8a0 <plug_holes+0x110>)
 800f7bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f7c0:	493b      	ldr	r1, [pc, #236]	; (800f8b0 <plug_holes+0x120>)
 800f7c2:	4839      	ldr	r0, [pc, #228]	; (800f8a8 <plug_holes+0x118>)
 800f7c4:	f009 fe9c 	bl	8019500 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	791b      	ldrb	r3, [r3, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d006      	beq.n	800f7de <plug_holes+0x4e>
 800f7d0:	4b33      	ldr	r3, [pc, #204]	; (800f8a0 <plug_holes+0x110>)
 800f7d2:	f240 125f 	movw	r2, #351	; 0x15f
 800f7d6:	4937      	ldr	r1, [pc, #220]	; (800f8b4 <plug_holes+0x124>)
 800f7d8:	4833      	ldr	r0, [pc, #204]	; (800f8a8 <plug_holes+0x118>)
 800f7da:	f009 fe91 	bl	8019500 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7e6:	d906      	bls.n	800f7f6 <plug_holes+0x66>
 800f7e8:	4b2d      	ldr	r3, [pc, #180]	; (800f8a0 <plug_holes+0x110>)
 800f7ea:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f7ee:	4932      	ldr	r1, [pc, #200]	; (800f8b8 <plug_holes+0x128>)
 800f7f0:	482d      	ldr	r0, [pc, #180]	; (800f8a8 <plug_holes+0x118>)
 800f7f2:	f009 fe85 	bl	8019500 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f7f6:	4b29      	ldr	r3, [pc, #164]	; (800f89c <plug_holes+0x10c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	8812      	ldrh	r2, [r2, #0]
 800f7fe:	4413      	add	r3, r2
 800f800:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	429a      	cmp	r2, r3
 800f808:	d01f      	beq.n	800f84a <plug_holes+0xba>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	791b      	ldrb	r3, [r3, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d11b      	bne.n	800f84a <plug_holes+0xba>
 800f812:	4b26      	ldr	r3, [pc, #152]	; (800f8ac <plug_holes+0x11c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d016      	beq.n	800f84a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f81c:	4b27      	ldr	r3, [pc, #156]	; (800f8bc <plug_holes+0x12c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	429a      	cmp	r2, r3
 800f824:	d102      	bne.n	800f82c <plug_holes+0x9c>
      lfree = mem;
 800f826:	4a25      	ldr	r2, [pc, #148]	; (800f8bc <plug_holes+0x12c>)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	881a      	ldrh	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4a19      	ldr	r2, [pc, #100]	; (800f89c <plug_holes+0x10c>)
 800f838:	6812      	ldr	r2, [r2, #0]
 800f83a:	1a99      	subs	r1, r3, r2
 800f83c:	4b17      	ldr	r3, [pc, #92]	; (800f89c <plug_holes+0x10c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	8812      	ldrh	r2, [r2, #0]
 800f844:	4413      	add	r3, r2
 800f846:	b28a      	uxth	r2, r1
 800f848:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f84a:	4b14      	ldr	r3, [pc, #80]	; (800f89c <plug_holes+0x10c>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	8852      	ldrh	r2, [r2, #2]
 800f852:	4413      	add	r3, r2
 800f854:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d01a      	beq.n	800f894 <plug_holes+0x104>
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	791b      	ldrb	r3, [r3, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d116      	bne.n	800f894 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f866:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <plug_holes+0x12c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d102      	bne.n	800f876 <plug_holes+0xe6>
      lfree = pmem;
 800f870:	4a12      	ldr	r2, [pc, #72]	; (800f8bc <plug_holes+0x12c>)
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	881a      	ldrh	r2, [r3, #0]
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	4a06      	ldr	r2, [pc, #24]	; (800f89c <plug_holes+0x10c>)
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	1a99      	subs	r1, r3, r2
 800f886:	4b05      	ldr	r3, [pc, #20]	; (800f89c <plug_holes+0x10c>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	8812      	ldrh	r2, [r2, #0]
 800f88e:	4413      	add	r3, r2
 800f890:	b28a      	uxth	r2, r1
 800f892:	805a      	strh	r2, [r3, #2]
  }
}
 800f894:	bf00      	nop
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	2000c7bc 	.word	0x2000c7bc
 800f8a0:	0801b218 	.word	0x0801b218
 800f8a4:	0801b26c 	.word	0x0801b26c
 800f8a8:	0801b284 	.word	0x0801b284
 800f8ac:	2000c7c0 	.word	0x2000c7c0
 800f8b0:	0801b2ac 	.word	0x0801b2ac
 800f8b4:	0801b2c8 	.word	0x0801b2c8
 800f8b8:	0801b2e4 	.word	0x0801b2e4
 800f8bc:	2000c7c4 	.word	0x2000c7c4

0800f8c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f8c6:	4b1c      	ldr	r3, [pc, #112]	; (800f938 <mem_init+0x78>)
 800f8c8:	4a1c      	ldr	r2, [pc, #112]	; (800f93c <mem_init+0x7c>)
 800f8ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f8cc:	4b1a      	ldr	r3, [pc, #104]	; (800f938 <mem_init+0x78>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f8d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f8e6:	4b14      	ldr	r3, [pc, #80]	; (800f938 <mem_init+0x78>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f8ee:	4a14      	ldr	r2, [pc, #80]	; (800f940 <mem_init+0x80>)
 800f8f0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f8f2:	4b13      	ldr	r3, [pc, #76]	; (800f940 <mem_init+0x80>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f8fa:	4b11      	ldr	r3, [pc, #68]	; (800f940 <mem_init+0x80>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f902:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f904:	4b0e      	ldr	r3, [pc, #56]	; (800f940 <mem_init+0x80>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f90c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f90e:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <mem_init+0x78>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a0c      	ldr	r2, [pc, #48]	; (800f944 <mem_init+0x84>)
 800f914:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f916:	480c      	ldr	r0, [pc, #48]	; (800f948 <mem_init+0x88>)
 800f918:	f009 fd30 	bl	801937c <sys_mutex_new>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d006      	beq.n	800f930 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f922:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <mem_init+0x8c>)
 800f924:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f928:	4909      	ldr	r1, [pc, #36]	; (800f950 <mem_init+0x90>)
 800f92a:	480a      	ldr	r0, [pc, #40]	; (800f954 <mem_init+0x94>)
 800f92c:	f009 fde8 	bl	8019500 <iprintf>
  }
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	2000c7bc 	.word	0x2000c7bc
 800f93c:	30044000 	.word	0x30044000
 800f940:	2000c7c0 	.word	0x2000c7c0
 800f944:	2000c7c4 	.word	0x2000c7c4
 800f948:	2000c7c8 	.word	0x2000c7c8
 800f94c:	0801b218 	.word	0x0801b218
 800f950:	0801b310 	.word	0x0801b310
 800f954:	0801b284 	.word	0x0801b284

0800f958 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d050      	beq.n	800fa08 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f003 0303 	and.w	r3, r3, #3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d006      	beq.n	800f97e <mem_free+0x26>
 800f970:	4b27      	ldr	r3, [pc, #156]	; (800fa10 <mem_free+0xb8>)
 800f972:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f976:	4927      	ldr	r1, [pc, #156]	; (800fa14 <mem_free+0xbc>)
 800f978:	4827      	ldr	r0, [pc, #156]	; (800fa18 <mem_free+0xc0>)
 800f97a:	f009 fdc1 	bl	8019500 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f97e:	4b27      	ldr	r3, [pc, #156]	; (800fa1c <mem_free+0xc4>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	429a      	cmp	r2, r3
 800f986:	d304      	bcc.n	800f992 <mem_free+0x3a>
 800f988:	4b25      	ldr	r3, [pc, #148]	; (800fa20 <mem_free+0xc8>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d306      	bcc.n	800f9a0 <mem_free+0x48>
 800f992:	4b1f      	ldr	r3, [pc, #124]	; (800fa10 <mem_free+0xb8>)
 800f994:	f240 12af 	movw	r2, #431	; 0x1af
 800f998:	4922      	ldr	r1, [pc, #136]	; (800fa24 <mem_free+0xcc>)
 800f99a:	481f      	ldr	r0, [pc, #124]	; (800fa18 <mem_free+0xc0>)
 800f99c:	f009 fdb0 	bl	8019500 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f9a0:	4b1e      	ldr	r3, [pc, #120]	; (800fa1c <mem_free+0xc4>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d304      	bcc.n	800f9b4 <mem_free+0x5c>
 800f9aa:	4b1d      	ldr	r3, [pc, #116]	; (800fa20 <mem_free+0xc8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d306      	bcc.n	800f9c2 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f9b4:	f009 fd40 	bl	8019438 <sys_arch_protect>
 800f9b8:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f9ba:	68b8      	ldr	r0, [r7, #8]
 800f9bc:	f009 fd4a 	bl	8019454 <sys_arch_unprotect>
    return;
 800f9c0:	e023      	b.n	800fa0a <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f9c2:	4819      	ldr	r0, [pc, #100]	; (800fa28 <mem_free+0xd0>)
 800f9c4:	f009 fcf6 	bl	80193b4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3b08      	subs	r3, #8
 800f9cc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	791b      	ldrb	r3, [r3, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <mem_free+0x8c>
 800f9d6:	4b0e      	ldr	r3, [pc, #56]	; (800fa10 <mem_free+0xb8>)
 800f9d8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f9dc:	4913      	ldr	r1, [pc, #76]	; (800fa2c <mem_free+0xd4>)
 800f9de:	480e      	ldr	r0, [pc, #56]	; (800fa18 <mem_free+0xc0>)
 800f9e0:	f009 fd8e 	bl	8019500 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f9ea:	4b11      	ldr	r3, [pc, #68]	; (800fa30 <mem_free+0xd8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d202      	bcs.n	800f9fa <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f9f4:	4a0e      	ldr	r2, [pc, #56]	; (800fa30 <mem_free+0xd8>)
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	f7ff fec8 	bl	800f790 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fa00:	4809      	ldr	r0, [pc, #36]	; (800fa28 <mem_free+0xd0>)
 800fa02:	f009 fce6 	bl	80193d2 <sys_mutex_unlock>
 800fa06:	e000      	b.n	800fa0a <mem_free+0xb2>
    return;
 800fa08:	bf00      	nop
}
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	0801b218 	.word	0x0801b218
 800fa14:	0801b32c 	.word	0x0801b32c
 800fa18:	0801b284 	.word	0x0801b284
 800fa1c:	2000c7bc 	.word	0x2000c7bc
 800fa20:	2000c7c0 	.word	0x2000c7c0
 800fa24:	0801b350 	.word	0x0801b350
 800fa28:	2000c7c8 	.word	0x2000c7c8
 800fa2c:	0801b368 	.word	0x0801b368
 800fa30:	2000c7c4 	.word	0x2000c7c4

0800fa34 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800fa40:	887b      	ldrh	r3, [r7, #2]
 800fa42:	3303      	adds	r3, #3
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	f023 0303 	bic.w	r3, r3, #3
 800fa4a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800fa4c:	887b      	ldrh	r3, [r7, #2]
 800fa4e:	2b0b      	cmp	r3, #11
 800fa50:	d801      	bhi.n	800fa56 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fa52:	230c      	movs	r3, #12
 800fa54:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800fa56:	887b      	ldrh	r3, [r7, #2]
 800fa58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa5c:	d901      	bls.n	800fa62 <mem_trim+0x2e>
    return NULL;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e0bd      	b.n	800fbde <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fa62:	4b61      	ldr	r3, [pc, #388]	; (800fbe8 <mem_trim+0x1b4>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d304      	bcc.n	800fa76 <mem_trim+0x42>
 800fa6c:	4b5f      	ldr	r3, [pc, #380]	; (800fbec <mem_trim+0x1b8>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d306      	bcc.n	800fa84 <mem_trim+0x50>
 800fa76:	4b5e      	ldr	r3, [pc, #376]	; (800fbf0 <mem_trim+0x1bc>)
 800fa78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800fa7c:	495d      	ldr	r1, [pc, #372]	; (800fbf4 <mem_trim+0x1c0>)
 800fa7e:	485e      	ldr	r0, [pc, #376]	; (800fbf8 <mem_trim+0x1c4>)
 800fa80:	f009 fd3e 	bl	8019500 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fa84:	4b58      	ldr	r3, [pc, #352]	; (800fbe8 <mem_trim+0x1b4>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d304      	bcc.n	800fa98 <mem_trim+0x64>
 800fa8e:	4b57      	ldr	r3, [pc, #348]	; (800fbec <mem_trim+0x1b8>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d307      	bcc.n	800faa8 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800fa98:	f009 fcce 	bl	8019438 <sys_arch_protect>
 800fa9c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f009 fcd8 	bl	8019454 <sys_arch_unprotect>
    return rmem;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	e09a      	b.n	800fbde <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3b08      	subs	r3, #8
 800faac:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	4a4d      	ldr	r2, [pc, #308]	; (800fbe8 <mem_trim+0x1b4>)
 800fab2:	6812      	ldr	r2, [r2, #0]
 800fab4:	1a9b      	subs	r3, r3, r2
 800fab6:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	881a      	ldrh	r2, [r3, #0]
 800fabc:	8b7b      	ldrh	r3, [r7, #26]
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	3b08      	subs	r3, #8
 800fac4:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fac6:	887a      	ldrh	r2, [r7, #2]
 800fac8:	8b3b      	ldrh	r3, [r7, #24]
 800faca:	429a      	cmp	r2, r3
 800facc:	d906      	bls.n	800fadc <mem_trim+0xa8>
 800face:	4b48      	ldr	r3, [pc, #288]	; (800fbf0 <mem_trim+0x1bc>)
 800fad0:	f240 2206 	movw	r2, #518	; 0x206
 800fad4:	4949      	ldr	r1, [pc, #292]	; (800fbfc <mem_trim+0x1c8>)
 800fad6:	4848      	ldr	r0, [pc, #288]	; (800fbf8 <mem_trim+0x1c4>)
 800fad8:	f009 fd12 	bl	8019500 <iprintf>
  if (newsize > size) {
 800fadc:	887a      	ldrh	r2, [r7, #2]
 800fade:	8b3b      	ldrh	r3, [r7, #24]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d901      	bls.n	800fae8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800fae4:	2300      	movs	r3, #0
 800fae6:	e07a      	b.n	800fbde <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800fae8:	887a      	ldrh	r2, [r7, #2]
 800faea:	8b3b      	ldrh	r3, [r7, #24]
 800faec:	429a      	cmp	r2, r3
 800faee:	d101      	bne.n	800faf4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	e074      	b.n	800fbde <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800faf4:	4842      	ldr	r0, [pc, #264]	; (800fc00 <mem_trim+0x1cc>)
 800faf6:	f009 fc5d 	bl	80193b4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800fafa:	4b3b      	ldr	r3, [pc, #236]	; (800fbe8 <mem_trim+0x1b4>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	69fa      	ldr	r2, [r7, #28]
 800fb00:	8812      	ldrh	r2, [r2, #0]
 800fb02:	4413      	add	r3, r2
 800fb04:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	791b      	ldrb	r3, [r3, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d131      	bne.n	800fb72 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fb14:	8b7a      	ldrh	r2, [r7, #26]
 800fb16:	887b      	ldrh	r3, [r7, #2]
 800fb18:	4413      	add	r3, r2
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800fb20:	4b38      	ldr	r3, [pc, #224]	; (800fc04 <mem_trim+0x1d0>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d105      	bne.n	800fb36 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800fb2a:	4b2f      	ldr	r3, [pc, #188]	; (800fbe8 <mem_trim+0x1b4>)
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	8a7b      	ldrh	r3, [r7, #18]
 800fb30:	4413      	add	r3, r2
 800fb32:	4a34      	ldr	r2, [pc, #208]	; (800fc04 <mem_trim+0x1d0>)
 800fb34:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800fb36:	4b2c      	ldr	r3, [pc, #176]	; (800fbe8 <mem_trim+0x1b4>)
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	8a7b      	ldrh	r3, [r7, #18]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	2200      	movs	r2, #0
 800fb44:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	8a3a      	ldrh	r2, [r7, #16]
 800fb4a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	8b7a      	ldrh	r2, [r7, #26]
 800fb50:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	8a7a      	ldrh	r2, [r7, #18]
 800fb56:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb60:	d039      	beq.n	800fbd6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fb62:	4b21      	ldr	r3, [pc, #132]	; (800fbe8 <mem_trim+0x1b4>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	697a      	ldr	r2, [r7, #20]
 800fb68:	8812      	ldrh	r2, [r2, #0]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	8a7a      	ldrh	r2, [r7, #18]
 800fb6e:	805a      	strh	r2, [r3, #2]
 800fb70:	e031      	b.n	800fbd6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fb72:	887b      	ldrh	r3, [r7, #2]
 800fb74:	f103 0214 	add.w	r2, r3, #20
 800fb78:	8b3b      	ldrh	r3, [r7, #24]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d82b      	bhi.n	800fbd6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fb7e:	8b7a      	ldrh	r2, [r7, #26]
 800fb80:	887b      	ldrh	r3, [r7, #2]
 800fb82:	4413      	add	r3, r2
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	3308      	adds	r3, #8
 800fb88:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800fb8a:	4b17      	ldr	r3, [pc, #92]	; (800fbe8 <mem_trim+0x1b4>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	8a7b      	ldrh	r3, [r7, #18]
 800fb90:	4413      	add	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800fb94:	4b1b      	ldr	r3, [pc, #108]	; (800fc04 <mem_trim+0x1d0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d202      	bcs.n	800fba4 <mem_trim+0x170>
      lfree = mem2;
 800fb9e:	4a19      	ldr	r2, [pc, #100]	; (800fc04 <mem_trim+0x1d0>)
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	2200      	movs	r2, #0
 800fba8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	881a      	ldrh	r2, [r3, #0]
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	8b7a      	ldrh	r2, [r7, #26]
 800fbb6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	8a7a      	ldrh	r2, [r7, #18]
 800fbbc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbc6:	d006      	beq.n	800fbd6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fbc8:	4b07      	ldr	r3, [pc, #28]	; (800fbe8 <mem_trim+0x1b4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	8812      	ldrh	r2, [r2, #0]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	8a7a      	ldrh	r2, [r7, #18]
 800fbd4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fbd6:	480a      	ldr	r0, [pc, #40]	; (800fc00 <mem_trim+0x1cc>)
 800fbd8:	f009 fbfb 	bl	80193d2 <sys_mutex_unlock>
  return rmem;
 800fbdc:	687b      	ldr	r3, [r7, #4]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3720      	adds	r7, #32
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	2000c7bc 	.word	0x2000c7bc
 800fbec:	2000c7c0 	.word	0x2000c7c0
 800fbf0:	0801b218 	.word	0x0801b218
 800fbf4:	0801b37c 	.word	0x0801b37c
 800fbf8:	0801b284 	.word	0x0801b284
 800fbfc:	0801b394 	.word	0x0801b394
 800fc00:	2000c7c8 	.word	0x2000c7c8
 800fc04:	2000c7c4 	.word	0x2000c7c4

0800fc08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	4603      	mov	r3, r0
 800fc10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800fc12:	88fb      	ldrh	r3, [r7, #6]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <mem_malloc+0x14>
    return NULL;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e0d1      	b.n	800fdc0 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800fc1c:	88fb      	ldrh	r3, [r7, #6]
 800fc1e:	3303      	adds	r3, #3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f023 0303 	bic.w	r3, r3, #3
 800fc26:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800fc28:	88fb      	ldrh	r3, [r7, #6]
 800fc2a:	2b0b      	cmp	r3, #11
 800fc2c:	d801      	bhi.n	800fc32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fc2e:	230c      	movs	r3, #12
 800fc30:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800fc32:	88fb      	ldrh	r3, [r7, #6]
 800fc34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc38:	d901      	bls.n	800fc3e <mem_malloc+0x36>
    return NULL;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e0c0      	b.n	800fdc0 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fc3e:	4862      	ldr	r0, [pc, #392]	; (800fdc8 <mem_malloc+0x1c0>)
 800fc40:	f009 fbb8 	bl	80193b4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fc44:	4b61      	ldr	r3, [pc, #388]	; (800fdcc <mem_malloc+0x1c4>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4b61      	ldr	r3, [pc, #388]	; (800fdd0 <mem_malloc+0x1c8>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	83fb      	strh	r3, [r7, #30]
 800fc52:	e0aa      	b.n	800fdaa <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800fc54:	4b5e      	ldr	r3, [pc, #376]	; (800fdd0 <mem_malloc+0x1c8>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	8bfb      	ldrh	r3, [r7, #30]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	791b      	ldrb	r3, [r3, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f040 809b 	bne.w	800fd9e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	8bfb      	ldrh	r3, [r7, #30]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	f1a3 0208 	sub.w	r2, r3, #8
 800fc76:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	f0c0 8090 	bcc.w	800fd9e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	461a      	mov	r2, r3
 800fc84:	8bfb      	ldrh	r3, [r7, #30]
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	f1a3 0208 	sub.w	r2, r3, #8
 800fc8c:	88fb      	ldrh	r3, [r7, #6]
 800fc8e:	3314      	adds	r3, #20
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d327      	bcc.n	800fce4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800fc94:	8bfa      	ldrh	r2, [r7, #30]
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	4413      	add	r3, r2
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	3308      	adds	r3, #8
 800fc9e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800fca0:	4b4b      	ldr	r3, [pc, #300]	; (800fdd0 <mem_malloc+0x1c8>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	8a7b      	ldrh	r3, [r7, #18]
 800fca6:	4413      	add	r3, r2
 800fca8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2200      	movs	r2, #0
 800fcae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	881a      	ldrh	r2, [r3, #0]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	8bfa      	ldrh	r2, [r7, #30]
 800fcbc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	8a7a      	ldrh	r2, [r7, #18]
 800fcc2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcd2:	d00a      	beq.n	800fcea <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fcd4:	4b3e      	ldr	r3, [pc, #248]	; (800fdd0 <mem_malloc+0x1c8>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	8812      	ldrh	r2, [r2, #0]
 800fcdc:	4413      	add	r3, r2
 800fcde:	8a7a      	ldrh	r2, [r7, #18]
 800fce0:	805a      	strh	r2, [r3, #2]
 800fce2:	e002      	b.n	800fcea <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	2201      	movs	r2, #1
 800fce8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fcea:	4b38      	ldr	r3, [pc, #224]	; (800fdcc <mem_malloc+0x1c4>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d127      	bne.n	800fd44 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800fcf4:	4b35      	ldr	r3, [pc, #212]	; (800fdcc <mem_malloc+0x1c4>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fcfa:	e005      	b.n	800fd08 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800fcfc:	4b34      	ldr	r3, [pc, #208]	; (800fdd0 <mem_malloc+0x1c8>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	8812      	ldrh	r2, [r2, #0]
 800fd04:	4413      	add	r3, r2
 800fd06:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	791b      	ldrb	r3, [r3, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <mem_malloc+0x112>
 800fd10:	4b30      	ldr	r3, [pc, #192]	; (800fdd4 <mem_malloc+0x1cc>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	69ba      	ldr	r2, [r7, #24]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d1f0      	bne.n	800fcfc <mem_malloc+0xf4>
          }
          lfree = cur;
 800fd1a:	4a2c      	ldr	r2, [pc, #176]	; (800fdcc <mem_malloc+0x1c4>)
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fd20:	4b2a      	ldr	r3, [pc, #168]	; (800fdcc <mem_malloc+0x1c4>)
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	4b2b      	ldr	r3, [pc, #172]	; (800fdd4 <mem_malloc+0x1cc>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d00b      	beq.n	800fd44 <mem_malloc+0x13c>
 800fd2c:	4b27      	ldr	r3, [pc, #156]	; (800fdcc <mem_malloc+0x1c4>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	791b      	ldrb	r3, [r3, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d006      	beq.n	800fd44 <mem_malloc+0x13c>
 800fd36:	4b28      	ldr	r3, [pc, #160]	; (800fdd8 <mem_malloc+0x1d0>)
 800fd38:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fd3c:	4927      	ldr	r1, [pc, #156]	; (800fddc <mem_malloc+0x1d4>)
 800fd3e:	4828      	ldr	r0, [pc, #160]	; (800fde0 <mem_malloc+0x1d8>)
 800fd40:	f009 fbde 	bl	8019500 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fd44:	4820      	ldr	r0, [pc, #128]	; (800fdc8 <mem_malloc+0x1c0>)
 800fd46:	f009 fb44 	bl	80193d2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd4a:	88fa      	ldrh	r2, [r7, #6]
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	4413      	add	r3, r2
 800fd50:	3308      	adds	r3, #8
 800fd52:	4a20      	ldr	r2, [pc, #128]	; (800fdd4 <mem_malloc+0x1cc>)
 800fd54:	6812      	ldr	r2, [r2, #0]
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d906      	bls.n	800fd68 <mem_malloc+0x160>
 800fd5a:	4b1f      	ldr	r3, [pc, #124]	; (800fdd8 <mem_malloc+0x1d0>)
 800fd5c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800fd60:	4920      	ldr	r1, [pc, #128]	; (800fde4 <mem_malloc+0x1dc>)
 800fd62:	481f      	ldr	r0, [pc, #124]	; (800fde0 <mem_malloc+0x1d8>)
 800fd64:	f009 fbcc 	bl	8019500 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f003 0303 	and.w	r3, r3, #3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d006      	beq.n	800fd80 <mem_malloc+0x178>
 800fd72:	4b19      	ldr	r3, [pc, #100]	; (800fdd8 <mem_malloc+0x1d0>)
 800fd74:	f240 22d6 	movw	r2, #726	; 0x2d6
 800fd78:	491b      	ldr	r1, [pc, #108]	; (800fde8 <mem_malloc+0x1e0>)
 800fd7a:	4819      	ldr	r0, [pc, #100]	; (800fde0 <mem_malloc+0x1d8>)
 800fd7c:	f009 fbc0 	bl	8019500 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f003 0303 	and.w	r3, r3, #3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d006      	beq.n	800fd98 <mem_malloc+0x190>
 800fd8a:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <mem_malloc+0x1d0>)
 800fd8c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800fd90:	4916      	ldr	r1, [pc, #88]	; (800fdec <mem_malloc+0x1e4>)
 800fd92:	4813      	ldr	r0, [pc, #76]	; (800fde0 <mem_malloc+0x1d8>)
 800fd94:	f009 fbb4 	bl	8019500 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	e010      	b.n	800fdc0 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800fd9e:	4b0c      	ldr	r3, [pc, #48]	; (800fdd0 <mem_malloc+0x1c8>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	8bfb      	ldrh	r3, [r7, #30]
 800fda4:	4413      	add	r3, r2
 800fda6:	881b      	ldrh	r3, [r3, #0]
 800fda8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fdaa:	8bfa      	ldrh	r2, [r7, #30]
 800fdac:	88fb      	ldrh	r3, [r7, #6]
 800fdae:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	f4ff af4e 	bcc.w	800fc54 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fdb8:	4803      	ldr	r0, [pc, #12]	; (800fdc8 <mem_malloc+0x1c0>)
 800fdba:	f009 fb0a 	bl	80193d2 <sys_mutex_unlock>
  return NULL;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3720      	adds	r7, #32
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	2000c7c8 	.word	0x2000c7c8
 800fdcc:	2000c7c4 	.word	0x2000c7c4
 800fdd0:	2000c7bc 	.word	0x2000c7bc
 800fdd4:	2000c7c0 	.word	0x2000c7c0
 800fdd8:	0801b218 	.word	0x0801b218
 800fddc:	0801b3b4 	.word	0x0801b3b4
 800fde0:	0801b284 	.word	0x0801b284
 800fde4:	0801b3d0 	.word	0x0801b3d0
 800fde8:	0801b400 	.word	0x0801b400
 800fdec:	0801b430 	.word	0x0801b430

0800fdf0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	3303      	adds	r3, #3
 800fe06:	f023 0303 	bic.w	r3, r3, #3
 800fe0a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	60fb      	str	r3, [r7, #12]
 800fe10:	e011      	b.n	800fe36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	881b      	ldrh	r3, [r3, #0]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3301      	adds	r3, #1
 800fe34:	60fb      	str	r3, [r7, #12]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	885b      	ldrh	r3, [r3, #2]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	dbe7      	blt.n	800fe12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fe42:	bf00      	nop
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
	...

0800fe50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe56:	2300      	movs	r3, #0
 800fe58:	80fb      	strh	r3, [r7, #6]
 800fe5a:	e009      	b.n	800fe70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fe5c:	88fb      	ldrh	r3, [r7, #6]
 800fe5e:	4a08      	ldr	r2, [pc, #32]	; (800fe80 <memp_init+0x30>)
 800fe60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7ff ffc3 	bl	800fdf0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe6a:	88fb      	ldrh	r3, [r7, #6]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	80fb      	strh	r3, [r7, #6]
 800fe70:	88fb      	ldrh	r3, [r7, #6]
 800fe72:	2b0c      	cmp	r3, #12
 800fe74:	d9f2      	bls.n	800fe5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fe76:	bf00      	nop
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	0801d138 	.word	0x0801d138

0800fe84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fe8c:	f009 fad4 	bl	8019438 <sys_arch_protect>
 800fe90:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d015      	beq.n	800fecc <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	6812      	ldr	r2, [r2, #0]
 800fea8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	f003 0303 	and.w	r3, r3, #3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d006      	beq.n	800fec2 <do_memp_malloc_pool+0x3e>
 800feb4:	4b09      	ldr	r3, [pc, #36]	; (800fedc <do_memp_malloc_pool+0x58>)
 800feb6:	f240 1249 	movw	r2, #329	; 0x149
 800feba:	4909      	ldr	r1, [pc, #36]	; (800fee0 <do_memp_malloc_pool+0x5c>)
 800febc:	4809      	ldr	r0, [pc, #36]	; (800fee4 <do_memp_malloc_pool+0x60>)
 800febe:	f009 fb1f 	bl	8019500 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f009 fac6 	bl	8019454 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	e003      	b.n	800fed4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f009 fac1 	bl	8019454 <sys_arch_unprotect>
  return NULL;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	0801b454 	.word	0x0801b454
 800fee0:	0801b4a8 	.word	0x0801b4a8
 800fee4:	0801b4cc 	.word	0x0801b4cc

0800fee8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <memp_malloc_pool+0x1c>
 800fef6:	4b0a      	ldr	r3, [pc, #40]	; (800ff20 <memp_malloc_pool+0x38>)
 800fef8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fefc:	4909      	ldr	r1, [pc, #36]	; (800ff24 <memp_malloc_pool+0x3c>)
 800fefe:	480a      	ldr	r0, [pc, #40]	; (800ff28 <memp_malloc_pool+0x40>)
 800ff00:	f009 fafe 	bl	8019500 <iprintf>
  if (desc == NULL) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d101      	bne.n	800ff0e <memp_malloc_pool+0x26>
    return NULL;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	e003      	b.n	800ff16 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff ffb8 	bl	800fe84 <do_memp_malloc_pool>
 800ff14:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	0801b454 	.word	0x0801b454
 800ff24:	0801b4f4 	.word	0x0801b4f4
 800ff28:	0801b4cc 	.word	0x0801b4cc

0800ff2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	2b0c      	cmp	r3, #12
 800ff3a:	d908      	bls.n	800ff4e <memp_malloc+0x22>
 800ff3c:	4b0a      	ldr	r3, [pc, #40]	; (800ff68 <memp_malloc+0x3c>)
 800ff3e:	f240 1287 	movw	r2, #391	; 0x187
 800ff42:	490a      	ldr	r1, [pc, #40]	; (800ff6c <memp_malloc+0x40>)
 800ff44:	480a      	ldr	r0, [pc, #40]	; (800ff70 <memp_malloc+0x44>)
 800ff46:	f009 fadb 	bl	8019500 <iprintf>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	e008      	b.n	800ff60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff4e:	79fb      	ldrb	r3, [r7, #7]
 800ff50:	4a08      	ldr	r2, [pc, #32]	; (800ff74 <memp_malloc+0x48>)
 800ff52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff ff94 	bl	800fe84 <do_memp_malloc_pool>
 800ff5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	0801b454 	.word	0x0801b454
 800ff6c:	0801b508 	.word	0x0801b508
 800ff70:	0801b4cc 	.word	0x0801b4cc
 800ff74:	0801d138 	.word	0x0801d138

0800ff78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	f003 0303 	and.w	r3, r3, #3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d006      	beq.n	800ff9a <do_memp_free_pool+0x22>
 800ff8c:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <do_memp_free_pool+0x4c>)
 800ff8e:	f240 129d 	movw	r2, #413	; 0x19d
 800ff92:	490d      	ldr	r1, [pc, #52]	; (800ffc8 <do_memp_free_pool+0x50>)
 800ff94:	480d      	ldr	r0, [pc, #52]	; (800ffcc <do_memp_free_pool+0x54>)
 800ff96:	f009 fab3 	bl	8019500 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ff9e:	f009 fa4b 	bl	8019438 <sys_arch_protect>
 800ffa2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	68fa      	ldr	r2, [r7, #12]
 800ffb4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ffb6:	68b8      	ldr	r0, [r7, #8]
 800ffb8:	f009 fa4c 	bl	8019454 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ffbc:	bf00      	nop
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	0801b454 	.word	0x0801b454
 800ffc8:	0801b528 	.word	0x0801b528
 800ffcc:	0801b4cc 	.word	0x0801b4cc

0800ffd0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <memp_free_pool+0x1e>
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	; (801000c <memp_free_pool+0x3c>)
 800ffe2:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800ffe6:	490a      	ldr	r1, [pc, #40]	; (8010010 <memp_free_pool+0x40>)
 800ffe8:	480a      	ldr	r0, [pc, #40]	; (8010014 <memp_free_pool+0x44>)
 800ffea:	f009 fa89 	bl	8019500 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d007      	beq.n	8010004 <memp_free_pool+0x34>
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d004      	beq.n	8010004 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff ffbb 	bl	800ff78 <do_memp_free_pool>
 8010002:	e000      	b.n	8010006 <memp_free_pool+0x36>
    return;
 8010004:	bf00      	nop
}
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	0801b454 	.word	0x0801b454
 8010010:	0801b4f4 	.word	0x0801b4f4
 8010014:	0801b4cc 	.word	0x0801b4cc

08010018 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	6039      	str	r1, [r7, #0]
 8010022:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010024:	79fb      	ldrb	r3, [r7, #7]
 8010026:	2b0c      	cmp	r3, #12
 8010028:	d907      	bls.n	801003a <memp_free+0x22>
 801002a:	4b0c      	ldr	r3, [pc, #48]	; (801005c <memp_free+0x44>)
 801002c:	f240 12db 	movw	r2, #475	; 0x1db
 8010030:	490b      	ldr	r1, [pc, #44]	; (8010060 <memp_free+0x48>)
 8010032:	480c      	ldr	r0, [pc, #48]	; (8010064 <memp_free+0x4c>)
 8010034:	f009 fa64 	bl	8019500 <iprintf>
 8010038:	e00c      	b.n	8010054 <memp_free+0x3c>

  if (mem == NULL) {
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d008      	beq.n	8010052 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	4a09      	ldr	r2, [pc, #36]	; (8010068 <memp_free+0x50>)
 8010044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ff94 	bl	800ff78 <do_memp_free_pool>
 8010050:	e000      	b.n	8010054 <memp_free+0x3c>
    return;
 8010052:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	0801b454 	.word	0x0801b454
 8010060:	0801b548 	.word	0x0801b548
 8010064:	0801b4cc 	.word	0x0801b4cc
 8010068:	0801d138 	.word	0x0801d138

0801006c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801006c:	b480      	push	{r7}
 801006e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010070:	bf00      	nop
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
	...

0801007c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d105      	bne.n	801009c <netif_add+0x20>
 8010090:	4b1f      	ldr	r3, [pc, #124]	; (8010110 <netif_add+0x94>)
 8010092:	22fb      	movs	r2, #251	; 0xfb
 8010094:	491f      	ldr	r1, [pc, #124]	; (8010114 <netif_add+0x98>)
 8010096:	4820      	ldr	r0, [pc, #128]	; (8010118 <netif_add+0x9c>)
 8010098:	f009 fa32 	bl	8019500 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2203      	movs	r2, #3
 80100ba:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80100c4:	4b15      	ldr	r3, [pc, #84]	; (801011c <netif_add+0xa0>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	1c5a      	adds	r2, r3, #1
 80100ca:	b2d1      	uxtb	r1, r2
 80100cc:	4a13      	ldr	r2, [pc, #76]	; (801011c <netif_add+0xa0>)
 80100ce:	7011      	strb	r1, [r2, #0]
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a3a      	ldr	r2, [r7, #32]
 80100da:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	68b9      	ldr	r1, [r7, #8]
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f000 f81e 	bl	8010124 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	4798      	blx	r3
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d001      	beq.n	80100f8 <netif_add+0x7c>
    return NULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	e007      	b.n	8010108 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80100f8:	4b09      	ldr	r3, [pc, #36]	; (8010120 <netif_add+0xa4>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010100:	4a07      	ldr	r2, [pc, #28]	; (8010120 <netif_add+0xa4>)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010106:	68fb      	ldr	r3, [r7, #12]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	0801b564 	.word	0x0801b564
 8010114:	0801b5b8 	.word	0x0801b5b8
 8010118:	0801b5d0 	.word	0x0801b5d0
 801011c:	2000c800 	.word	0x2000c800
 8010120:	200101bc 	.word	0x200101bc

08010124 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d003      	beq.n	8010140 <netif_set_addr+0x1c>
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10c      	bne.n	801015a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f000 f81a 	bl	801017c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8010148:	6879      	ldr	r1, [r7, #4]
 801014a:	68f8      	ldr	r0, [r7, #12]
 801014c:	f000 f862 	bl	8010214 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010150:	6839      	ldr	r1, [r7, #0]
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f000 f84a 	bl	80101ec <netif_set_gw>
 8010158:	e00b      	b.n	8010172 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 f859 	bl	8010214 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010162:	6839      	ldr	r1, [r7, #0]
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f000 f841 	bl	80101ec <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f000 f805 	bl	801017c <netif_set_ipaddr>
  }
}
 8010172:	bf00      	nop
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d003      	beq.n	8010194 <netif_set_ipaddr+0x18>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	60fb      	str	r3, [r7, #12]
 8010192:	e002      	b.n	801019a <netif_set_ipaddr+0x1e>
 8010194:	4b14      	ldr	r3, [pc, #80]	; (80101e8 <netif_set_ipaddr+0x6c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3304      	adds	r3, #4
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d01c      	beq.n	80101e0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3304      	adds	r3, #4
 80101aa:	f107 020c 	add.w	r2, r7, #12
 80101ae:	4611      	mov	r1, r2
 80101b0:	4618      	mov	r0, r3
 80101b2:	f002 fb53 	bl	801285c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3304      	adds	r3, #4
 80101ba:	f107 020c 	add.w	r2, r7, #12
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f006 fd27 	bl	8016c14 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <netif_set_ipaddr+0x56>
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	e000      	b.n	80101d4 <netif_set_ipaddr+0x58>
 80101d2:	2300      	movs	r3, #0
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80101d8:	2101      	movs	r1, #1
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f861 	bl	80102a2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80101e0:	bf00      	nop
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	0801d1ac 	.word	0x0801d1ac

080101ec <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <netif_set_gw+0x16>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	e000      	b.n	8010204 <netif_set_gw+0x18>
 8010202:	2300      	movs	r3, #0
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8010208:	bf00      	nop
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <netif_set_netmask+0x16>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	e000      	b.n	801022c <netif_set_netmask+0x18>
 801022a:	2300      	movs	r3, #0
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010244:	4a04      	ldr	r2, [pc, #16]	; (8010258 <netif_set_default+0x1c>)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801024a:	bf00      	nop
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	200101c0 	.word	0x200101c0

0801025c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b00      	cmp	r3, #0
 8010270:	d113      	bne.n	801029a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010278:	f043 0301 	orr.w	r3, r3, #1
 801027c:	b2da      	uxtb	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801028a:	f003 0304 	and.w	r3, r3, #4
 801028e:	2b00      	cmp	r3, #0
 8010290:	d003      	beq.n	801029a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8010292:	2103      	movs	r1, #3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f804 	bl	80102a2 <netif_issue_reports>
    }
  }
}
 801029a:	bf00      	nop
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	460b      	mov	r3, r1
 80102ac:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102ae:	78fb      	ldrb	r3, [r7, #3]
 80102b0:	f003 0301 	and.w	r3, r3, #1
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d011      	beq.n	80102dc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3304      	adds	r3, #4
 80102bc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00c      	beq.n	80102dc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102c8:	f003 0308 	and.w	r3, r3, #8
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d005      	beq.n	80102dc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3304      	adds	r3, #4
 80102d4:	4619      	mov	r1, r3
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f007 fbd0 	bl	8017a7c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80102dc:	bf00      	nop
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d012      	beq.n	8010320 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010300:	f023 0301 	bic.w	r3, r3, #1
 8010304:	b2da      	uxtb	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010312:	f003 0308 	and.w	r3, r3, #8
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f006 ff74 	bl	8017208 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010336:	f003 0304 	and.w	r3, r3, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	d113      	bne.n	8010366 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010344:	f043 0304 	orr.w	r3, r3, #4
 8010348:	b2da      	uxtb	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010356:	f003 0301 	and.w	r3, r3, #1
 801035a:	2b00      	cmp	r3, #0
 801035c:	d003      	beq.n	8010366 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801035e:	2103      	movs	r1, #3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7ff ff9e 	bl	80102a2 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 801036e:	b480      	push	{r7}
 8010370:	b083      	sub	sp, #12
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801037c:	f003 0304 	and.w	r3, r3, #4
 8010380:	2b00      	cmp	r3, #0
 8010382:	d008      	beq.n	8010396 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801038a:	f023 0304 	bic.w	r3, r3, #4
 801038e:	b2da      	uxtb	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 8010396:	bf00      	nop
 8010398:	370c      	adds	r7, #12
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
	...

080103a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80103aa:	f009 f845 	bl	8019438 <sys_arch_protect>
 80103ae:	6038      	str	r0, [r7, #0]
 80103b0:	4b0f      	ldr	r3, [pc, #60]	; (80103f0 <pbuf_free_ooseq+0x4c>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	701a      	strb	r2, [r3, #0]
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	f009 f84c 	bl	8019454 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80103bc:	4b0d      	ldr	r3, [pc, #52]	; (80103f4 <pbuf_free_ooseq+0x50>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	607b      	str	r3, [r7, #4]
 80103c2:	e00f      	b.n	80103e4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d008      	beq.n	80103de <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d0:	4618      	mov	r0, r3
 80103d2:	f001 febe 	bl	8012152 <tcp_segs_free>
      pcb->ooseq = NULL;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80103dc:	e005      	b.n	80103ea <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	607b      	str	r3, [r7, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1ec      	bne.n	80103c4 <pbuf_free_ooseq+0x20>
    }
  }
}
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	200101c4 	.word	0x200101c4
 80103f4:	200101cc 	.word	0x200101cc

080103f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010400:	f7ff ffd0 	bl	80103a4 <pbuf_free_ooseq>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010412:	f009 f811 	bl	8019438 <sys_arch_protect>
 8010416:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010418:	4b10      	ldr	r3, [pc, #64]	; (801045c <pbuf_pool_is_empty+0x50>)
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801041e:	4b0f      	ldr	r3, [pc, #60]	; (801045c <pbuf_pool_is_empty+0x50>)
 8010420:	2201      	movs	r2, #1
 8010422:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f009 f815 	bl	8019454 <sys_arch_unprotect>

  if (!queued) {
 801042a:	78fb      	ldrb	r3, [r7, #3]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d110      	bne.n	8010452 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010430:	2200      	movs	r2, #0
 8010432:	2100      	movs	r1, #0
 8010434:	480a      	ldr	r0, [pc, #40]	; (8010460 <pbuf_pool_is_empty+0x54>)
 8010436:	f7ff f8c3 	bl	800f5c0 <tcpip_callback_with_block>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d008      	beq.n	8010452 <pbuf_pool_is_empty+0x46>
 8010440:	f008 fffa 	bl	8019438 <sys_arch_protect>
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	4b05      	ldr	r3, [pc, #20]	; (801045c <pbuf_pool_is_empty+0x50>)
 8010448:	2200      	movs	r2, #0
 801044a:	701a      	strb	r2, [r3, #0]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f009 f801 	bl	8019454 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010452:	bf00      	nop
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	200101c4 	.word	0x200101c4
 8010460:	080103f9 	.word	0x080103f9

08010464 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	4603      	mov	r3, r0
 801046c:	71fb      	strb	r3, [r7, #7]
 801046e:	460b      	mov	r3, r1
 8010470:	80bb      	strh	r3, [r7, #4]
 8010472:	4613      	mov	r3, r2
 8010474:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	2b04      	cmp	r3, #4
 801047a:	d81c      	bhi.n	80104b6 <pbuf_alloc+0x52>
 801047c:	a201      	add	r2, pc, #4	; (adr r2, 8010484 <pbuf_alloc+0x20>)
 801047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010482:	bf00      	nop
 8010484:	08010499 	.word	0x08010499
 8010488:	0801049f 	.word	0x0801049f
 801048c:	080104a5 	.word	0x080104a5
 8010490:	080104ab 	.word	0x080104ab
 8010494:	080104b1 	.word	0x080104b1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010498:	2336      	movs	r3, #54	; 0x36
 801049a:	82fb      	strh	r3, [r7, #22]
    break;
 801049c:	e014      	b.n	80104c8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801049e:	2322      	movs	r3, #34	; 0x22
 80104a0:	82fb      	strh	r3, [r7, #22]
    break;
 80104a2:	e011      	b.n	80104c8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80104a4:	230e      	movs	r3, #14
 80104a6:	82fb      	strh	r3, [r7, #22]
    break;
 80104a8:	e00e      	b.n	80104c8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80104aa:	2300      	movs	r3, #0
 80104ac:	82fb      	strh	r3, [r7, #22]
    break;
 80104ae:	e00b      	b.n	80104c8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	82fb      	strh	r3, [r7, #22]
    break;
 80104b4:	e008      	b.n	80104c8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80104b6:	4ba5      	ldr	r3, [pc, #660]	; (801074c <pbuf_alloc+0x2e8>)
 80104b8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80104bc:	49a4      	ldr	r1, [pc, #656]	; (8010750 <pbuf_alloc+0x2ec>)
 80104be:	48a5      	ldr	r0, [pc, #660]	; (8010754 <pbuf_alloc+0x2f0>)
 80104c0:	f009 f81e 	bl	8019500 <iprintf>
    return NULL;
 80104c4:	2300      	movs	r3, #0
 80104c6:	e15d      	b.n	8010784 <pbuf_alloc+0x320>
  }

  switch (type) {
 80104c8:	79bb      	ldrb	r3, [r7, #6]
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	f200 8134 	bhi.w	8010738 <pbuf_alloc+0x2d4>
 80104d0:	a201      	add	r2, pc, #4	; (adr r2, 80104d8 <pbuf_alloc+0x74>)
 80104d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d6:	bf00      	nop
 80104d8:	08010679 	.word	0x08010679
 80104dc:	08010705 	.word	0x08010705
 80104e0:	08010705 	.word	0x08010705
 80104e4:	080104e9 	.word	0x080104e9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80104e8:	200c      	movs	r0, #12
 80104ea:	f7ff fd1f 	bl	800ff2c <memp_malloc>
 80104ee:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d103      	bne.n	80104fe <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80104f6:	f7ff ff89 	bl	801040c <pbuf_pool_is_empty>
      return NULL;
 80104fa:	2300      	movs	r3, #0
 80104fc:	e142      	b.n	8010784 <pbuf_alloc+0x320>
    }
    p->type = type;
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	79ba      	ldrb	r2, [r7, #6]
 8010502:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	2200      	movs	r2, #0
 8010508:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801050a:	8afb      	ldrh	r3, [r7, #22]
 801050c:	3310      	adds	r3, #16
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	4413      	add	r3, r2
 8010512:	3303      	adds	r3, #3
 8010514:	f023 0303 	bic.w	r3, r3, #3
 8010518:	461a      	mov	r2, r3
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	f003 0303 	and.w	r3, r3, #3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d006      	beq.n	8010538 <pbuf_alloc+0xd4>
 801052a:	4b88      	ldr	r3, [pc, #544]	; (801074c <pbuf_alloc+0x2e8>)
 801052c:	f240 1229 	movw	r2, #297	; 0x129
 8010530:	4989      	ldr	r1, [pc, #548]	; (8010758 <pbuf_alloc+0x2f4>)
 8010532:	4888      	ldr	r0, [pc, #544]	; (8010754 <pbuf_alloc+0x2f0>)
 8010534:	f008 ffe4 	bl	8019500 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	88ba      	ldrh	r2, [r7, #4]
 801053c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801053e:	8afb      	ldrh	r3, [r7, #22]
 8010540:	3303      	adds	r3, #3
 8010542:	f023 0303 	bic.w	r3, r3, #3
 8010546:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 801054a:	88bb      	ldrh	r3, [r7, #4]
 801054c:	4293      	cmp	r3, r2
 801054e:	bf28      	it	cs
 8010550:	4613      	movcs	r3, r2
 8010552:	b29a      	uxth	r2, r3
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	69fa      	ldr	r2, [r7, #28]
 801055e:	8952      	ldrh	r2, [r2, #10]
 8010560:	441a      	add	r2, r3
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010568:	429a      	cmp	r2, r3
 801056a:	d906      	bls.n	801057a <pbuf_alloc+0x116>
 801056c:	4b77      	ldr	r3, [pc, #476]	; (801074c <pbuf_alloc+0x2e8>)
 801056e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8010572:	497a      	ldr	r1, [pc, #488]	; (801075c <pbuf_alloc+0x2f8>)
 8010574:	4877      	ldr	r0, [pc, #476]	; (8010754 <pbuf_alloc+0x2f0>)
 8010576:	f008 ffc3 	bl	8019500 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801057a:	8afb      	ldrh	r3, [r7, #22]
 801057c:	3303      	adds	r3, #3
 801057e:	f023 0303 	bic.w	r3, r3, #3
 8010582:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010586:	d106      	bne.n	8010596 <pbuf_alloc+0x132>
 8010588:	4b70      	ldr	r3, [pc, #448]	; (801074c <pbuf_alloc+0x2e8>)
 801058a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801058e:	4974      	ldr	r1, [pc, #464]	; (8010760 <pbuf_alloc+0x2fc>)
 8010590:	4870      	ldr	r0, [pc, #448]	; (8010754 <pbuf_alloc+0x2f0>)
 8010592:	f008 ffb5 	bl	8019500 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	2201      	movs	r2, #1
 801059a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80105a0:	88bb      	ldrh	r3, [r7, #4]
 80105a2:	69fa      	ldr	r2, [r7, #28]
 80105a4:	8952      	ldrh	r2, [r2, #10]
 80105a6:	1a9b      	subs	r3, r3, r2
 80105a8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80105aa:	e061      	b.n	8010670 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80105ac:	200c      	movs	r0, #12
 80105ae:	f7ff fcbd 	bl	800ff2c <memp_malloc>
 80105b2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d106      	bne.n	80105c8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 80105ba:	f7ff ff27 	bl	801040c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80105be:	69f8      	ldr	r0, [r7, #28]
 80105c0:	f000 fac2 	bl	8010b48 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e0dd      	b.n	8010784 <pbuf_alloc+0x320>
      }
      q->type = type;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	79ba      	ldrb	r2, [r7, #6]
 80105cc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2200      	movs	r2, #0
 80105d2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80105e6:	4293      	cmp	r3, r2
 80105e8:	dd06      	ble.n	80105f8 <pbuf_alloc+0x194>
 80105ea:	4b58      	ldr	r3, [pc, #352]	; (801074c <pbuf_alloc+0x2e8>)
 80105ec:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80105f0:	495c      	ldr	r1, [pc, #368]	; (8010764 <pbuf_alloc+0x300>)
 80105f2:	4858      	ldr	r0, [pc, #352]	; (8010754 <pbuf_alloc+0x2f0>)
 80105f4:	f008 ff84 	bl	8019500 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	b29b      	uxth	r3, r3
 8010604:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010608:	bf28      	it	cs
 801060a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 801060e:	b29a      	uxth	r2, r3
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f103 0210 	add.w	r2, r3, #16
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f003 0303 	and.w	r3, r3, #3
 8010626:	2b00      	cmp	r3, #0
 8010628:	d006      	beq.n	8010638 <pbuf_alloc+0x1d4>
 801062a:	4b48      	ldr	r3, [pc, #288]	; (801074c <pbuf_alloc+0x2e8>)
 801062c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8010630:	494d      	ldr	r1, [pc, #308]	; (8010768 <pbuf_alloc+0x304>)
 8010632:	4848      	ldr	r0, [pc, #288]	; (8010754 <pbuf_alloc+0x2f0>)
 8010634:	f008 ff64 	bl	8019500 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	69fa      	ldr	r2, [r7, #28]
 801063e:	8952      	ldrh	r2, [r2, #10]
 8010640:	441a      	add	r2, r3
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010648:	429a      	cmp	r2, r3
 801064a:	d906      	bls.n	801065a <pbuf_alloc+0x1f6>
 801064c:	4b3f      	ldr	r3, [pc, #252]	; (801074c <pbuf_alloc+0x2e8>)
 801064e:	f240 1255 	movw	r2, #341	; 0x155
 8010652:	4942      	ldr	r1, [pc, #264]	; (801075c <pbuf_alloc+0x2f8>)
 8010654:	483f      	ldr	r0, [pc, #252]	; (8010754 <pbuf_alloc+0x2f0>)
 8010656:	f008 ff53 	bl	8019500 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2201      	movs	r2, #1
 801065e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	895b      	ldrh	r3, [r3, #10]
 8010664:	461a      	mov	r2, r3
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	1a9b      	subs	r3, r3, r2
 801066a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	2b00      	cmp	r3, #0
 8010674:	dc9a      	bgt.n	80105ac <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8010676:	e07e      	b.n	8010776 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8010678:	8afb      	ldrh	r3, [r7, #22]
 801067a:	3313      	adds	r3, #19
 801067c:	b29b      	uxth	r3, r3
 801067e:	f023 0303 	bic.w	r3, r3, #3
 8010682:	b29a      	uxth	r2, r3
 8010684:	88bb      	ldrh	r3, [r7, #4]
 8010686:	3303      	adds	r3, #3
 8010688:	b29b      	uxth	r3, r3
 801068a:	f023 0303 	bic.w	r3, r3, #3
 801068e:	b29b      	uxth	r3, r3
 8010690:	4413      	add	r3, r2
 8010692:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8010694:	897a      	ldrh	r2, [r7, #10]
 8010696:	88bb      	ldrh	r3, [r7, #4]
 8010698:	3303      	adds	r3, #3
 801069a:	f023 0303 	bic.w	r3, r3, #3
 801069e:	429a      	cmp	r2, r3
 80106a0:	d201      	bcs.n	80106a6 <pbuf_alloc+0x242>
        return NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e06e      	b.n	8010784 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80106a6:	897b      	ldrh	r3, [r7, #10]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff faad 	bl	800fc08 <mem_malloc>
 80106ae:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <pbuf_alloc+0x256>
      return NULL;
 80106b6:	2300      	movs	r3, #0
 80106b8:	e064      	b.n	8010784 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80106ba:	8afb      	ldrh	r3, [r7, #22]
 80106bc:	3310      	adds	r3, #16
 80106be:	69fa      	ldr	r2, [r7, #28]
 80106c0:	4413      	add	r3, r2
 80106c2:	3303      	adds	r3, #3
 80106c4:	f023 0303 	bic.w	r3, r3, #3
 80106c8:	461a      	mov	r2, r3
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	88ba      	ldrh	r2, [r7, #4]
 80106d2:	811a      	strh	r2, [r3, #8]
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	891a      	ldrh	r2, [r3, #8]
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	2200      	movs	r2, #0
 80106e0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	79ba      	ldrb	r2, [r7, #6]
 80106e6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	f003 0303 	and.w	r3, r3, #3
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d03f      	beq.n	8010774 <pbuf_alloc+0x310>
 80106f4:	4b15      	ldr	r3, [pc, #84]	; (801074c <pbuf_alloc+0x2e8>)
 80106f6:	f240 1277 	movw	r2, #375	; 0x177
 80106fa:	491c      	ldr	r1, [pc, #112]	; (801076c <pbuf_alloc+0x308>)
 80106fc:	4815      	ldr	r0, [pc, #84]	; (8010754 <pbuf_alloc+0x2f0>)
 80106fe:	f008 feff 	bl	8019500 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8010702:	e037      	b.n	8010774 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010704:	200b      	movs	r0, #11
 8010706:	f7ff fc11 	bl	800ff2c <memp_malloc>
 801070a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	e036      	b.n	8010784 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	2200      	movs	r2, #0
 801071a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	88ba      	ldrh	r2, [r7, #4]
 8010720:	811a      	strh	r2, [r3, #8]
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	891a      	ldrh	r2, [r3, #8]
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	2200      	movs	r2, #0
 801072e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	79ba      	ldrb	r2, [r7, #6]
 8010734:	731a      	strb	r2, [r3, #12]
    break;
 8010736:	e01e      	b.n	8010776 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010738:	4b04      	ldr	r3, [pc, #16]	; (801074c <pbuf_alloc+0x2e8>)
 801073a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801073e:	490c      	ldr	r1, [pc, #48]	; (8010770 <pbuf_alloc+0x30c>)
 8010740:	4804      	ldr	r0, [pc, #16]	; (8010754 <pbuf_alloc+0x2f0>)
 8010742:	f008 fedd 	bl	8019500 <iprintf>
    return NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	e01c      	b.n	8010784 <pbuf_alloc+0x320>
 801074a:	bf00      	nop
 801074c:	0801b5f8 	.word	0x0801b5f8
 8010750:	0801b64c 	.word	0x0801b64c
 8010754:	0801b668 	.word	0x0801b668
 8010758:	0801b690 	.word	0x0801b690
 801075c:	0801b6c0 	.word	0x0801b6c0
 8010760:	0801b6f4 	.word	0x0801b6f4
 8010764:	0801b728 	.word	0x0801b728
 8010768:	0801b73c 	.word	0x0801b73c
 801076c:	0801b76c 	.word	0x0801b76c
 8010770:	0801b798 	.word	0x0801b798
    break;
 8010774:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	2201      	movs	r2, #1
 801077a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2200      	movs	r2, #0
 8010780:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010782:	69fb      	ldr	r3, [r7, #28]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3720      	adds	r7, #32
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	603b      	str	r3, [r7, #0]
 8010794:	4603      	mov	r3, r0
 8010796:	71fb      	strb	r3, [r7, #7]
 8010798:	460b      	mov	r3, r1
 801079a:	80bb      	strh	r3, [r7, #4]
 801079c:	4613      	mov	r3, r2
 801079e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80107a0:	79fb      	ldrb	r3, [r7, #7]
 80107a2:	2b04      	cmp	r3, #4
 80107a4:	d81b      	bhi.n	80107de <pbuf_alloced_custom+0x52>
 80107a6:	a201      	add	r2, pc, #4	; (adr r2, 80107ac <pbuf_alloced_custom+0x20>)
 80107a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ac:	080107c1 	.word	0x080107c1
 80107b0:	080107c7 	.word	0x080107c7
 80107b4:	080107cd 	.word	0x080107cd
 80107b8:	080107d3 	.word	0x080107d3
 80107bc:	080107d9 	.word	0x080107d9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80107c0:	2336      	movs	r3, #54	; 0x36
 80107c2:	81fb      	strh	r3, [r7, #14]
    break;
 80107c4:	e014      	b.n	80107f0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80107c6:	2322      	movs	r3, #34	; 0x22
 80107c8:	81fb      	strh	r3, [r7, #14]
    break;
 80107ca:	e011      	b.n	80107f0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80107cc:	230e      	movs	r3, #14
 80107ce:	81fb      	strh	r3, [r7, #14]
    break;
 80107d0:	e00e      	b.n	80107f0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80107d2:	2300      	movs	r3, #0
 80107d4:	81fb      	strh	r3, [r7, #14]
    break;
 80107d6:	e00b      	b.n	80107f0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80107d8:	2300      	movs	r3, #0
 80107da:	81fb      	strh	r3, [r7, #14]
    break;
 80107dc:	e008      	b.n	80107f0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80107de:	4b1d      	ldr	r3, [pc, #116]	; (8010854 <pbuf_alloced_custom+0xc8>)
 80107e0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80107e4:	491c      	ldr	r1, [pc, #112]	; (8010858 <pbuf_alloced_custom+0xcc>)
 80107e6:	481d      	ldr	r0, [pc, #116]	; (801085c <pbuf_alloced_custom+0xd0>)
 80107e8:	f008 fe8a 	bl	8019500 <iprintf>
    return NULL;
 80107ec:	2300      	movs	r3, #0
 80107ee:	e02d      	b.n	801084c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80107f0:	89fb      	ldrh	r3, [r7, #14]
 80107f2:	3303      	adds	r3, #3
 80107f4:	f023 0203 	bic.w	r2, r3, #3
 80107f8:	88bb      	ldrh	r3, [r7, #4]
 80107fa:	441a      	add	r2, r3
 80107fc:	8bbb      	ldrh	r3, [r7, #28]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d901      	bls.n	8010806 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010802:	2300      	movs	r3, #0
 8010804:	e022      	b.n	801084c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d008      	beq.n	8010824 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010812:	89fb      	ldrh	r3, [r7, #14]
 8010814:	3303      	adds	r3, #3
 8010816:	f023 0303 	bic.w	r3, r3, #3
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	441a      	add	r2, r3
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	605a      	str	r2, [r3, #4]
 8010822:	e002      	b.n	801082a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2200      	movs	r2, #0
 8010828:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	2202      	movs	r2, #2
 801082e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	88ba      	ldrh	r2, [r7, #4]
 8010834:	811a      	strh	r2, [r3, #8]
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	891a      	ldrh	r2, [r3, #8]
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	79ba      	ldrb	r2, [r7, #6]
 8010842:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	2201      	movs	r2, #1
 8010848:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801084a:	683b      	ldr	r3, [r7, #0]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	0801b5f8 	.word	0x0801b5f8
 8010858:	0801b7b4 	.word	0x0801b7b4
 801085c:	0801b668 	.word	0x0801b668

08010860 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <pbuf_realloc+0x20>
 8010872:	4b4b      	ldr	r3, [pc, #300]	; (80109a0 <pbuf_realloc+0x140>)
 8010874:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010878:	494a      	ldr	r1, [pc, #296]	; (80109a4 <pbuf_realloc+0x144>)
 801087a:	484b      	ldr	r0, [pc, #300]	; (80109a8 <pbuf_realloc+0x148>)
 801087c:	f008 fe40 	bl	8019500 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7b1b      	ldrb	r3, [r3, #12]
 8010884:	2b03      	cmp	r3, #3
 8010886:	d012      	beq.n	80108ae <pbuf_realloc+0x4e>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	7b1b      	ldrb	r3, [r3, #12]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d00e      	beq.n	80108ae <pbuf_realloc+0x4e>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	7b1b      	ldrb	r3, [r3, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00a      	beq.n	80108ae <pbuf_realloc+0x4e>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	7b1b      	ldrb	r3, [r3, #12]
 801089c:	2b02      	cmp	r3, #2
 801089e:	d006      	beq.n	80108ae <pbuf_realloc+0x4e>
 80108a0:	4b3f      	ldr	r3, [pc, #252]	; (80109a0 <pbuf_realloc+0x140>)
 80108a2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80108a6:	4941      	ldr	r1, [pc, #260]	; (80109ac <pbuf_realloc+0x14c>)
 80108a8:	483f      	ldr	r0, [pc, #252]	; (80109a8 <pbuf_realloc+0x148>)
 80108aa:	f008 fe29 	bl	8019500 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	891b      	ldrh	r3, [r3, #8]
 80108b2:	887a      	ldrh	r2, [r7, #2]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d26f      	bcs.n	8010998 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80108b8:	887b      	ldrh	r3, [r7, #2]
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	8912      	ldrh	r2, [r2, #8]
 80108be:	1a9b      	subs	r3, r3, r2
 80108c0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80108c2:	887b      	ldrh	r3, [r7, #2]
 80108c4:	827b      	strh	r3, [r7, #18]
  q = p;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80108ca:	e025      	b.n	8010918 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	895b      	ldrh	r3, [r3, #10]
 80108d0:	8a7a      	ldrh	r2, [r7, #18]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80108dc:	4293      	cmp	r3, r2
 80108de:	dd06      	ble.n	80108ee <pbuf_realloc+0x8e>
 80108e0:	4b2f      	ldr	r3, [pc, #188]	; (80109a0 <pbuf_realloc+0x140>)
 80108e2:	f240 220b 	movw	r2, #523	; 0x20b
 80108e6:	4932      	ldr	r1, [pc, #200]	; (80109b0 <pbuf_realloc+0x150>)
 80108e8:	482f      	ldr	r0, [pc, #188]	; (80109a8 <pbuf_realloc+0x148>)
 80108ea:	f008 fe09 	bl	8019500 <iprintf>
    q->tot_len += (u16_t)grow;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	891a      	ldrh	r2, [r3, #8]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4413      	add	r3, r2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <pbuf_realloc+0xb8>
 801090a:	4b25      	ldr	r3, [pc, #148]	; (80109a0 <pbuf_realloc+0x140>)
 801090c:	f240 220f 	movw	r2, #527	; 0x20f
 8010910:	4928      	ldr	r1, [pc, #160]	; (80109b4 <pbuf_realloc+0x154>)
 8010912:	4825      	ldr	r0, [pc, #148]	; (80109a8 <pbuf_realloc+0x148>)
 8010914:	f008 fdf4 	bl	8019500 <iprintf>
  while (rem_len > q->len) {
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	895b      	ldrh	r3, [r3, #10]
 801091c:	8a7a      	ldrh	r2, [r7, #18]
 801091e:	429a      	cmp	r2, r3
 8010920:	d8d4      	bhi.n	80108cc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	7b1b      	ldrb	r3, [r3, #12]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d122      	bne.n	8010970 <pbuf_realloc+0x110>
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	895b      	ldrh	r3, [r3, #10]
 801092e:	8a7a      	ldrh	r2, [r7, #18]
 8010930:	429a      	cmp	r2, r3
 8010932:	d01d      	beq.n	8010970 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	7b5b      	ldrb	r3, [r3, #13]
 8010938:	f003 0302 	and.w	r3, r3, #2
 801093c:	2b00      	cmp	r3, #0
 801093e:	d117      	bne.n	8010970 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	461a      	mov	r2, r3
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	b29a      	uxth	r2, r3
 801094c:	8a7b      	ldrh	r3, [r7, #18]
 801094e:	4413      	add	r3, r2
 8010950:	b29b      	uxth	r3, r3
 8010952:	4619      	mov	r1, r3
 8010954:	6978      	ldr	r0, [r7, #20]
 8010956:	f7ff f86d 	bl	800fa34 <mem_trim>
 801095a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d106      	bne.n	8010970 <pbuf_realloc+0x110>
 8010962:	4b0f      	ldr	r3, [pc, #60]	; (80109a0 <pbuf_realloc+0x140>)
 8010964:	f240 221d 	movw	r2, #541	; 0x21d
 8010968:	4913      	ldr	r1, [pc, #76]	; (80109b8 <pbuf_realloc+0x158>)
 801096a:	480f      	ldr	r0, [pc, #60]	; (80109a8 <pbuf_realloc+0x148>)
 801096c:	f008 fdc8 	bl	8019500 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	8a7a      	ldrh	r2, [r7, #18]
 8010974:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	895a      	ldrh	r2, [r3, #10]
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d004      	beq.n	8010990 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 f8dc 	bl	8010b48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	2200      	movs	r2, #0
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	e000      	b.n	801099a <pbuf_realloc+0x13a>
    return;
 8010998:	bf00      	nop

}
 801099a:	3718      	adds	r7, #24
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	0801b5f8 	.word	0x0801b5f8
 80109a4:	0801b7d8 	.word	0x0801b7d8
 80109a8:	0801b668 	.word	0x0801b668
 80109ac:	0801b7f0 	.word	0x0801b7f0
 80109b0:	0801b80c 	.word	0x0801b80c
 80109b4:	0801b820 	.word	0x0801b820
 80109b8:	0801b838 	.word	0x0801b838

080109bc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	460b      	mov	r3, r1
 80109c6:	807b      	strh	r3, [r7, #2]
 80109c8:	4613      	mov	r3, r2
 80109ca:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d106      	bne.n	80109e0 <pbuf_header_impl+0x24>
 80109d2:	4b46      	ldr	r3, [pc, #280]	; (8010aec <pbuf_header_impl+0x130>)
 80109d4:	f240 223f 	movw	r2, #575	; 0x23f
 80109d8:	4945      	ldr	r1, [pc, #276]	; (8010af0 <pbuf_header_impl+0x134>)
 80109da:	4846      	ldr	r0, [pc, #280]	; (8010af4 <pbuf_header_impl+0x138>)
 80109dc:	f008 fd90 	bl	8019500 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80109e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <pbuf_header_impl+0x32>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d101      	bne.n	80109f2 <pbuf_header_impl+0x36>
    return 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	e078      	b.n	8010ae4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80109f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	da10      	bge.n	8010a1c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80109fa:	887b      	ldrh	r3, [r7, #2]
 80109fc:	425b      	negs	r3, r3
 80109fe:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	895b      	ldrh	r3, [r3, #10]
 8010a04:	89fa      	ldrh	r2, [r7, #14]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d90a      	bls.n	8010a20 <pbuf_header_impl+0x64>
 8010a0a:	4b38      	ldr	r3, [pc, #224]	; (8010aec <pbuf_header_impl+0x130>)
 8010a0c:	f240 2247 	movw	r2, #583	; 0x247
 8010a10:	4939      	ldr	r1, [pc, #228]	; (8010af8 <pbuf_header_impl+0x13c>)
 8010a12:	4838      	ldr	r0, [pc, #224]	; (8010af4 <pbuf_header_impl+0x138>)
 8010a14:	f008 fd74 	bl	8019500 <iprintf>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e063      	b.n	8010ae4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8010a1c:	887b      	ldrh	r3, [r7, #2]
 8010a1e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7b1b      	ldrb	r3, [r3, #12]
 8010a24:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8010a2c:	89bb      	ldrh	r3, [r7, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <pbuf_header_impl+0x7c>
 8010a32:	89bb      	ldrh	r3, [r7, #12]
 8010a34:	2b03      	cmp	r3, #3
 8010a36:	d112      	bne.n	8010a5e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a40:	425b      	negs	r3, r3
 8010a42:	441a      	add	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	685a      	ldr	r2, [r3, #4]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	3310      	adds	r3, #16
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d238      	bcs.n	8010ac6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e042      	b.n	8010ae4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010a5e:	89bb      	ldrh	r3, [r7, #12]
 8010a60:	2b02      	cmp	r3, #2
 8010a62:	d002      	beq.n	8010a6a <pbuf_header_impl+0xae>
 8010a64:	89bb      	ldrh	r3, [r7, #12]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d124      	bne.n	8010ab4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010a6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	da0d      	bge.n	8010a8e <pbuf_header_impl+0xd2>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	895b      	ldrh	r3, [r3, #10]
 8010a76:	89fa      	ldrh	r2, [r7, #14]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d808      	bhi.n	8010a8e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	685a      	ldr	r2, [r3, #4]
 8010a80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a84:	425b      	negs	r3, r3
 8010a86:	441a      	add	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	605a      	str	r2, [r3, #4]
 8010a8c:	e011      	b.n	8010ab2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8010a8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	dd0b      	ble.n	8010aae <pbuf_header_impl+0xf2>
 8010a96:	787b      	ldrb	r3, [r7, #1]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d008      	beq.n	8010aae <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685a      	ldr	r2, [r3, #4]
 8010aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010aa4:	425b      	negs	r3, r3
 8010aa6:	441a      	add	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	605a      	str	r2, [r3, #4]
 8010aac:	e001      	b.n	8010ab2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e018      	b.n	8010ae4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010ab2:	e008      	b.n	8010ac6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010ab4:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <pbuf_header_impl+0x130>)
 8010ab6:	f240 2277 	movw	r2, #631	; 0x277
 8010aba:	4910      	ldr	r1, [pc, #64]	; (8010afc <pbuf_header_impl+0x140>)
 8010abc:	480d      	ldr	r0, [pc, #52]	; (8010af4 <pbuf_header_impl+0x138>)
 8010abe:	f008 fd1f 	bl	8019500 <iprintf>
    return 1;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e00e      	b.n	8010ae4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	895a      	ldrh	r2, [r3, #10]
 8010aca:	887b      	ldrh	r3, [r7, #2]
 8010acc:	4413      	add	r3, r2
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	891a      	ldrh	r2, [r3, #8]
 8010ad8:	887b      	ldrh	r3, [r7, #2]
 8010ada:	4413      	add	r3, r2
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010ae2:	2300      	movs	r3, #0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	0801b5f8 	.word	0x0801b5f8
 8010af0:	0801b854 	.word	0x0801b854
 8010af4:	0801b668 	.word	0x0801b668
 8010af8:	0801b860 	.word	0x0801b860
 8010afc:	0801b880 	.word	0x0801b880

08010b00 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b10:	2200      	movs	r2, #0
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff ff51 	bl	80109bc <pbuf_header_impl>
 8010b1a:	4603      	mov	r3, r0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b34:	2201      	movs	r2, #1
 8010b36:	4619      	mov	r1, r3
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7ff ff3f 	bl	80109bc <pbuf_header_impl>
 8010b3e:	4603      	mov	r3, r0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b088      	sub	sp, #32
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d10b      	bne.n	8010b6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d106      	bne.n	8010b6a <pbuf_free+0x22>
 8010b5c:	4b41      	ldr	r3, [pc, #260]	; (8010c64 <pbuf_free+0x11c>)
 8010b5e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010b62:	4941      	ldr	r1, [pc, #260]	; (8010c68 <pbuf_free+0x120>)
 8010b64:	4841      	ldr	r0, [pc, #260]	; (8010c6c <pbuf_free+0x124>)
 8010b66:	f008 fccb 	bl	8019500 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e076      	b.n	8010c5c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	7b1b      	ldrb	r3, [r3, #12]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d012      	beq.n	8010b9c <pbuf_free+0x54>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7b1b      	ldrb	r3, [r3, #12]
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d00e      	beq.n	8010b9c <pbuf_free+0x54>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	7b1b      	ldrb	r3, [r3, #12]
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	d00a      	beq.n	8010b9c <pbuf_free+0x54>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7b1b      	ldrb	r3, [r3, #12]
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	d006      	beq.n	8010b9c <pbuf_free+0x54>
 8010b8e:	4b35      	ldr	r3, [pc, #212]	; (8010c64 <pbuf_free+0x11c>)
 8010b90:	f240 22de 	movw	r2, #734	; 0x2de
 8010b94:	4936      	ldr	r1, [pc, #216]	; (8010c70 <pbuf_free+0x128>)
 8010b96:	4835      	ldr	r0, [pc, #212]	; (8010c6c <pbuf_free+0x124>)
 8010b98:	f008 fcb2 	bl	8019500 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010ba0:	e058      	b.n	8010c54 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010ba2:	f008 fc49 	bl	8019438 <sys_arch_protect>
 8010ba6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	89db      	ldrh	r3, [r3, #14]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <pbuf_free+0x76>
 8010bb0:	4b2c      	ldr	r3, [pc, #176]	; (8010c64 <pbuf_free+0x11c>)
 8010bb2:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010bb6:	492f      	ldr	r1, [pc, #188]	; (8010c74 <pbuf_free+0x12c>)
 8010bb8:	482c      	ldr	r0, [pc, #176]	; (8010c6c <pbuf_free+0x124>)
 8010bba:	f008 fca1 	bl	8019500 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	89db      	ldrh	r3, [r3, #14]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	81da      	strh	r2, [r3, #14]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	89db      	ldrh	r3, [r3, #14]
 8010bce:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010bd0:	69b8      	ldr	r0, [r7, #24]
 8010bd2:	f008 fc3f 	bl	8019454 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010bd6:	8afb      	ldrh	r3, [r7, #22]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d139      	bne.n	8010c50 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	7b1b      	ldrb	r3, [r3, #12]
 8010be6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	7b5b      	ldrb	r3, [r3, #13]
 8010bec:	f003 0302 	and.w	r3, r3, #2
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d011      	beq.n	8010c18 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d106      	bne.n	8010c0e <pbuf_free+0xc6>
 8010c00:	4b18      	ldr	r3, [pc, #96]	; (8010c64 <pbuf_free+0x11c>)
 8010c02:	f240 22f9 	movw	r2, #761	; 0x2f9
 8010c06:	491c      	ldr	r1, [pc, #112]	; (8010c78 <pbuf_free+0x130>)
 8010c08:	4818      	ldr	r0, [pc, #96]	; (8010c6c <pbuf_free+0x124>)
 8010c0a:	f008 fc79 	bl	8019500 <iprintf>
        pc->custom_free_function(p);
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	4798      	blx	r3
 8010c16:	e015      	b.n	8010c44 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010c18:	89fb      	ldrh	r3, [r7, #14]
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d104      	bne.n	8010c28 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010c1e:	6879      	ldr	r1, [r7, #4]
 8010c20:	200c      	movs	r0, #12
 8010c22:	f7ff f9f9 	bl	8010018 <memp_free>
 8010c26:	e00d      	b.n	8010c44 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010c28:	89fb      	ldrh	r3, [r7, #14]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d002      	beq.n	8010c34 <pbuf_free+0xec>
 8010c2e:	89fb      	ldrh	r3, [r7, #14]
 8010c30:	2b02      	cmp	r3, #2
 8010c32:	d104      	bne.n	8010c3e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	200b      	movs	r0, #11
 8010c38:	f7ff f9ee 	bl	8010018 <memp_free>
 8010c3c:	e002      	b.n	8010c44 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7fe fe8a 	bl	800f958 <mem_free>
        }
      }
      count++;
 8010c44:	7ffb      	ldrb	r3, [r7, #31]
 8010c46:	3301      	adds	r3, #1
 8010c48:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	607b      	str	r3, [r7, #4]
 8010c4e:	e001      	b.n	8010c54 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1a3      	bne.n	8010ba2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3720      	adds	r7, #32
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	0801b5f8 	.word	0x0801b5f8
 8010c68:	0801b854 	.word	0x0801b854
 8010c6c:	0801b668 	.word	0x0801b668
 8010c70:	0801b890 	.word	0x0801b890
 8010c74:	0801b8a8 	.word	0x0801b8a8
 8010c78:	0801b8c0 	.word	0x0801b8c0

08010c7c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010c84:	2300      	movs	r3, #0
 8010c86:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010c88:	e005      	b.n	8010c96 <pbuf_clen+0x1a>
    ++len;
 8010c8a:	89fb      	ldrh	r3, [r7, #14]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d1f6      	bne.n	8010c8a <pbuf_clen+0xe>
  }
  return len;
 8010c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
	...

08010cac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d016      	beq.n	8010ce8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010cba:	f008 fbbd 	bl	8019438 <sys_arch_protect>
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	89db      	ldrh	r3, [r3, #14]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	81da      	strh	r2, [r3, #14]
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f008 fbc1 	bl	8019454 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	89db      	ldrh	r3, [r3, #14]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <pbuf_ref+0x3c>
 8010cda:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <pbuf_ref+0x44>)
 8010cdc:	f240 3239 	movw	r2, #825	; 0x339
 8010ce0:	4904      	ldr	r1, [pc, #16]	; (8010cf4 <pbuf_ref+0x48>)
 8010ce2:	4805      	ldr	r0, [pc, #20]	; (8010cf8 <pbuf_ref+0x4c>)
 8010ce4:	f008 fc0c 	bl	8019500 <iprintf>
  }
}
 8010ce8:	bf00      	nop
 8010cea:	3710      	adds	r7, #16
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	0801b5f8 	.word	0x0801b5f8
 8010cf4:	0801b8e4 	.word	0x0801b8e4
 8010cf8:	0801b668 	.word	0x0801b668

08010cfc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d002      	beq.n	8010d12 <pbuf_cat+0x16>
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d107      	bne.n	8010d22 <pbuf_cat+0x26>
 8010d12:	4b20      	ldr	r3, [pc, #128]	; (8010d94 <pbuf_cat+0x98>)
 8010d14:	f240 324d 	movw	r2, #845	; 0x34d
 8010d18:	491f      	ldr	r1, [pc, #124]	; (8010d98 <pbuf_cat+0x9c>)
 8010d1a:	4820      	ldr	r0, [pc, #128]	; (8010d9c <pbuf_cat+0xa0>)
 8010d1c:	f008 fbf0 	bl	8019500 <iprintf>
 8010d20:	e034      	b.n	8010d8c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	60fb      	str	r3, [r7, #12]
 8010d26:	e00a      	b.n	8010d3e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	891a      	ldrh	r2, [r3, #8]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	891b      	ldrh	r3, [r3, #8]
 8010d30:	4413      	add	r3, r2
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	60fb      	str	r3, [r7, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d1f0      	bne.n	8010d28 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	891a      	ldrh	r2, [r3, #8]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	895b      	ldrh	r3, [r3, #10]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d006      	beq.n	8010d60 <pbuf_cat+0x64>
 8010d52:	4b10      	ldr	r3, [pc, #64]	; (8010d94 <pbuf_cat+0x98>)
 8010d54:	f240 3255 	movw	r2, #853	; 0x355
 8010d58:	4911      	ldr	r1, [pc, #68]	; (8010da0 <pbuf_cat+0xa4>)
 8010d5a:	4810      	ldr	r0, [pc, #64]	; (8010d9c <pbuf_cat+0xa0>)
 8010d5c:	f008 fbd0 	bl	8019500 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d006      	beq.n	8010d76 <pbuf_cat+0x7a>
 8010d68:	4b0a      	ldr	r3, [pc, #40]	; (8010d94 <pbuf_cat+0x98>)
 8010d6a:	f240 3256 	movw	r2, #854	; 0x356
 8010d6e:	490d      	ldr	r1, [pc, #52]	; (8010da4 <pbuf_cat+0xa8>)
 8010d70:	480a      	ldr	r0, [pc, #40]	; (8010d9c <pbuf_cat+0xa0>)
 8010d72:	f008 fbc5 	bl	8019500 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	891a      	ldrh	r2, [r3, #8]
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	891b      	ldrh	r3, [r3, #8]
 8010d7e:	4413      	add	r3, r2
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	683a      	ldr	r2, [r7, #0]
 8010d8a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	0801b5f8 	.word	0x0801b5f8
 8010d98:	0801b8f8 	.word	0x0801b8f8
 8010d9c:	0801b668 	.word	0x0801b668
 8010da0:	0801b930 	.word	0x0801b930
 8010da4:	0801b960 	.word	0x0801b960

08010da8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010db2:	2300      	movs	r3, #0
 8010db4:	81fb      	strh	r3, [r7, #14]
 8010db6:	2300      	movs	r3, #0
 8010db8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d008      	beq.n	8010dd2 <pbuf_copy+0x2a>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <pbuf_copy+0x2a>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	891a      	ldrh	r2, [r3, #8]
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	891b      	ldrh	r3, [r3, #8]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d209      	bcs.n	8010de6 <pbuf_copy+0x3e>
 8010dd2:	4b54      	ldr	r3, [pc, #336]	; (8010f24 <pbuf_copy+0x17c>)
 8010dd4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010dd8:	4953      	ldr	r1, [pc, #332]	; (8010f28 <pbuf_copy+0x180>)
 8010dda:	4854      	ldr	r0, [pc, #336]	; (8010f2c <pbuf_copy+0x184>)
 8010ddc:	f008 fb90 	bl	8019500 <iprintf>
 8010de0:	f06f 030f 	mvn.w	r3, #15
 8010de4:	e099      	b.n	8010f1a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	461a      	mov	r2, r3
 8010dec:	89fb      	ldrh	r3, [r7, #14]
 8010dee:	1ad2      	subs	r2, r2, r3
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	895b      	ldrh	r3, [r3, #10]
 8010df4:	4619      	mov	r1, r3
 8010df6:	89bb      	ldrh	r3, [r7, #12]
 8010df8:	1acb      	subs	r3, r1, r3
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	db05      	blt.n	8010e0a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	895a      	ldrh	r2, [r3, #10]
 8010e02:	89bb      	ldrh	r3, [r7, #12]
 8010e04:	1ad3      	subs	r3, r2, r3
 8010e06:	817b      	strh	r3, [r7, #10]
 8010e08:	e004      	b.n	8010e14 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	895a      	ldrh	r2, [r3, #10]
 8010e0e:	89fb      	ldrh	r3, [r7, #14]
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	89fb      	ldrh	r3, [r7, #14]
 8010e1a:	18d0      	adds	r0, r2, r3
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	89bb      	ldrh	r3, [r7, #12]
 8010e22:	4413      	add	r3, r2
 8010e24:	897a      	ldrh	r2, [r7, #10]
 8010e26:	4619      	mov	r1, r3
 8010e28:	f008 fb57 	bl	80194da <memcpy>
    offset_to += len;
 8010e2c:	89fa      	ldrh	r2, [r7, #14]
 8010e2e:	897b      	ldrh	r3, [r7, #10]
 8010e30:	4413      	add	r3, r2
 8010e32:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010e34:	89ba      	ldrh	r2, [r7, #12]
 8010e36:	897b      	ldrh	r3, [r7, #10]
 8010e38:	4413      	add	r3, r2
 8010e3a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	895b      	ldrh	r3, [r3, #10]
 8010e40:	89fa      	ldrh	r2, [r7, #14]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d906      	bls.n	8010e54 <pbuf_copy+0xac>
 8010e46:	4b37      	ldr	r3, [pc, #220]	; (8010f24 <pbuf_copy+0x17c>)
 8010e48:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010e4c:	4938      	ldr	r1, [pc, #224]	; (8010f30 <pbuf_copy+0x188>)
 8010e4e:	4837      	ldr	r0, [pc, #220]	; (8010f2c <pbuf_copy+0x184>)
 8010e50:	f008 fb56 	bl	8019500 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	895b      	ldrh	r3, [r3, #10]
 8010e58:	89ba      	ldrh	r2, [r7, #12]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d906      	bls.n	8010e6c <pbuf_copy+0xc4>
 8010e5e:	4b31      	ldr	r3, [pc, #196]	; (8010f24 <pbuf_copy+0x17c>)
 8010e60:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010e64:	4933      	ldr	r1, [pc, #204]	; (8010f34 <pbuf_copy+0x18c>)
 8010e66:	4831      	ldr	r0, [pc, #196]	; (8010f2c <pbuf_copy+0x184>)
 8010e68:	f008 fb4a 	bl	8019500 <iprintf>
    if (offset_from >= p_from->len) {
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	895b      	ldrh	r3, [r3, #10]
 8010e70:	89ba      	ldrh	r2, [r7, #12]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d304      	bcc.n	8010e80 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010e76:	2300      	movs	r3, #0
 8010e78:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	895b      	ldrh	r3, [r3, #10]
 8010e84:	89fa      	ldrh	r2, [r7, #14]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d114      	bne.n	8010eb4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d10c      	bne.n	8010eb4 <pbuf_copy+0x10c>
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d009      	beq.n	8010eb4 <pbuf_copy+0x10c>
 8010ea0:	4b20      	ldr	r3, [pc, #128]	; (8010f24 <pbuf_copy+0x17c>)
 8010ea2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010ea6:	4924      	ldr	r1, [pc, #144]	; (8010f38 <pbuf_copy+0x190>)
 8010ea8:	4820      	ldr	r0, [pc, #128]	; (8010f2c <pbuf_copy+0x184>)
 8010eaa:	f008 fb29 	bl	8019500 <iprintf>
 8010eae:	f06f 030f 	mvn.w	r3, #15
 8010eb2:	e032      	b.n	8010f1a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d013      	beq.n	8010ee2 <pbuf_copy+0x13a>
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	895a      	ldrh	r2, [r3, #10]
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	891b      	ldrh	r3, [r3, #8]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d10d      	bne.n	8010ee2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d009      	beq.n	8010ee2 <pbuf_copy+0x13a>
 8010ece:	4b15      	ldr	r3, [pc, #84]	; (8010f24 <pbuf_copy+0x17c>)
 8010ed0:	f240 32de 	movw	r2, #990	; 0x3de
 8010ed4:	4919      	ldr	r1, [pc, #100]	; (8010f3c <pbuf_copy+0x194>)
 8010ed6:	4815      	ldr	r0, [pc, #84]	; (8010f2c <pbuf_copy+0x184>)
 8010ed8:	f008 fb12 	bl	8019500 <iprintf>
 8010edc:	f06f 0305 	mvn.w	r3, #5
 8010ee0:	e01b      	b.n	8010f1a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d013      	beq.n	8010f10 <pbuf_copy+0x168>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	895a      	ldrh	r2, [r3, #10]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	891b      	ldrh	r3, [r3, #8]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d10d      	bne.n	8010f10 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d009      	beq.n	8010f10 <pbuf_copy+0x168>
 8010efc:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <pbuf_copy+0x17c>)
 8010efe:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010f02:	490e      	ldr	r1, [pc, #56]	; (8010f3c <pbuf_copy+0x194>)
 8010f04:	4809      	ldr	r0, [pc, #36]	; (8010f2c <pbuf_copy+0x184>)
 8010f06:	f008 fafb 	bl	8019500 <iprintf>
 8010f0a:	f06f 0305 	mvn.w	r3, #5
 8010f0e:	e004      	b.n	8010f1a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f47f af67 	bne.w	8010de6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010f18:	2300      	movs	r3, #0
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	0801b5f8 	.word	0x0801b5f8
 8010f28:	0801b9ac 	.word	0x0801b9ac
 8010f2c:	0801b668 	.word	0x0801b668
 8010f30:	0801b9dc 	.word	0x0801b9dc
 8010f34:	0801b9f4 	.word	0x0801b9f4
 8010f38:	0801ba10 	.word	0x0801ba10
 8010f3c:	0801ba20 	.word	0x0801ba20

08010f40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b088      	sub	sp, #32
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	460b      	mov	r3, r1
 8010f50:	80fb      	strh	r3, [r7, #6]
 8010f52:	4613      	mov	r3, r2
 8010f54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d108      	bne.n	8010f72 <pbuf_copy_partial+0x32>
 8010f60:	4b30      	ldr	r3, [pc, #192]	; (8011024 <pbuf_copy_partial+0xe4>)
 8010f62:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010f66:	4930      	ldr	r1, [pc, #192]	; (8011028 <pbuf_copy_partial+0xe8>)
 8010f68:	4830      	ldr	r0, [pc, #192]	; (801102c <pbuf_copy_partial+0xec>)
 8010f6a:	f008 fac9 	bl	8019500 <iprintf>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	e054      	b.n	801101c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d108      	bne.n	8010f8a <pbuf_copy_partial+0x4a>
 8010f78:	4b2a      	ldr	r3, [pc, #168]	; (8011024 <pbuf_copy_partial+0xe4>)
 8010f7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010f7e:	492c      	ldr	r1, [pc, #176]	; (8011030 <pbuf_copy_partial+0xf0>)
 8010f80:	482a      	ldr	r0, [pc, #168]	; (801102c <pbuf_copy_partial+0xec>)
 8010f82:	f008 fabd 	bl	8019500 <iprintf>
 8010f86:	2300      	movs	r3, #0
 8010f88:	e048      	b.n	801101c <pbuf_copy_partial+0xdc>

  left = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <pbuf_copy_partial+0x5a>
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d101      	bne.n	8010f9e <pbuf_copy_partial+0x5e>
    return 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	e03e      	b.n	801101c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	61fb      	str	r3, [r7, #28]
 8010fa2:	e034      	b.n	801100e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010fa4:	88bb      	ldrh	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00a      	beq.n	8010fc0 <pbuf_copy_partial+0x80>
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	895b      	ldrh	r3, [r3, #10]
 8010fae:	88ba      	ldrh	r2, [r7, #4]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d305      	bcc.n	8010fc0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	895b      	ldrh	r3, [r3, #10]
 8010fb8:	88ba      	ldrh	r2, [r7, #4]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	80bb      	strh	r3, [r7, #4]
 8010fbe:	e023      	b.n	8011008 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	895a      	ldrh	r2, [r3, #10]
 8010fc4:	88bb      	ldrh	r3, [r7, #4]
 8010fc6:	1ad3      	subs	r3, r2, r3
 8010fc8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010fca:	8b3a      	ldrh	r2, [r7, #24]
 8010fcc:	88fb      	ldrh	r3, [r7, #6]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d901      	bls.n	8010fd6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010fd2:	88fb      	ldrh	r3, [r7, #6]
 8010fd4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8010fd6:	8b7b      	ldrh	r3, [r7, #26]
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	18d0      	adds	r0, r2, r3
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	88bb      	ldrh	r3, [r7, #4]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	8b3a      	ldrh	r2, [r7, #24]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	f008 fa77 	bl	80194da <memcpy>
      copied_total += buf_copy_len;
 8010fec:	8afa      	ldrh	r2, [r7, #22]
 8010fee:	8b3b      	ldrh	r3, [r7, #24]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010ff4:	8b7a      	ldrh	r2, [r7, #26]
 8010ff6:	8b3b      	ldrh	r3, [r7, #24]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010ffc:	88fa      	ldrh	r2, [r7, #6]
 8010ffe:	8b3b      	ldrh	r3, [r7, #24]
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011004:	2300      	movs	r3, #0
 8011006:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	61fb      	str	r3, [r7, #28]
 801100e:	88fb      	ldrh	r3, [r7, #6]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d002      	beq.n	801101a <pbuf_copy_partial+0xda>
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1c4      	bne.n	8010fa4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801101a:	8afb      	ldrh	r3, [r7, #22]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3720      	adds	r7, #32
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	0801b5f8 	.word	0x0801b5f8
 8011028:	0801ba4c 	.word	0x0801ba4c
 801102c:	0801b668 	.word	0x0801b668
 8011030:	0801ba6c 	.word	0x0801ba6c

08011034 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011034:	b480      	push	{r7}
 8011036:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011038:	bf00      	nop
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr
	...

08011044 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011048:	f000 ffb6 	bl	8011fb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801104c:	4b07      	ldr	r3, [pc, #28]	; (801106c <tcp_tmr+0x28>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	3301      	adds	r3, #1
 8011052:	b2da      	uxtb	r2, r3
 8011054:	4b05      	ldr	r3, [pc, #20]	; (801106c <tcp_tmr+0x28>)
 8011056:	701a      	strb	r2, [r3, #0]
 8011058:	4b04      	ldr	r3, [pc, #16]	; (801106c <tcp_tmr+0x28>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	f003 0301 	and.w	r3, r3, #1
 8011060:	2b00      	cmp	r3, #0
 8011062:	d001      	beq.n	8011068 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011064:	f000 fce8 	bl	8011a38 <tcp_slowtmr>
  }
}
 8011068:	bf00      	nop
 801106a:	bd80      	pop	{r7, pc}
 801106c:	2000c801 	.word	0x2000c801

08011070 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	60fb      	str	r3, [r7, #12]
 801107e:	e00a      	b.n	8011096 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011084:	683a      	ldr	r2, [r7, #0]
 8011086:	429a      	cmp	r2, r3
 8011088:	d102      	bne.n	8011090 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2200      	movs	r2, #0
 801108e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	60fb      	str	r3, [r7, #12]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1f1      	bne.n	8011080 <tcp_remove_listener+0x10>
      }
   }
}
 801109c:	bf00      	nop
 801109e:	3714      	adds	r7, #20
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d105      	bne.n	80110c2 <tcp_listen_closed+0x1a>
 80110b6:	4b13      	ldr	r3, [pc, #76]	; (8011104 <tcp_listen_closed+0x5c>)
 80110b8:	22c0      	movs	r2, #192	; 0xc0
 80110ba:	4913      	ldr	r1, [pc, #76]	; (8011108 <tcp_listen_closed+0x60>)
 80110bc:	4813      	ldr	r0, [pc, #76]	; (801110c <tcp_listen_closed+0x64>)
 80110be:	f008 fa1f 	bl	8019500 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	7d1b      	ldrb	r3, [r3, #20]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d005      	beq.n	80110d6 <tcp_listen_closed+0x2e>
 80110ca:	4b0e      	ldr	r3, [pc, #56]	; (8011104 <tcp_listen_closed+0x5c>)
 80110cc:	22c1      	movs	r2, #193	; 0xc1
 80110ce:	4910      	ldr	r1, [pc, #64]	; (8011110 <tcp_listen_closed+0x68>)
 80110d0:	480e      	ldr	r0, [pc, #56]	; (801110c <tcp_listen_closed+0x64>)
 80110d2:	f008 fa15 	bl	8019500 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80110d6:	2301      	movs	r3, #1
 80110d8:	60fb      	str	r3, [r7, #12]
 80110da:	e00b      	b.n	80110f4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80110dc:	4a0d      	ldr	r2, [pc, #52]	; (8011114 <tcp_listen_closed+0x6c>)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff ffc1 	bl	8011070 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3301      	adds	r3, #1
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b03      	cmp	r3, #3
 80110f8:	d9f0      	bls.n	80110dc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80110fa:	bf00      	nop
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	0801bba0 	.word	0x0801bba0
 8011108:	0801bbf4 	.word	0x0801bbf4
 801110c:	0801bc00 	.word	0x0801bc00
 8011110:	0801bc28 	.word	0x0801bc28
 8011114:	0801d184 	.word	0x0801d184

08011118 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011118:	b5b0      	push	{r4, r5, r7, lr}
 801111a:	b086      	sub	sp, #24
 801111c:	af02      	add	r7, sp, #8
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	460b      	mov	r3, r1
 8011122:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d075      	beq.n	8011216 <tcp_close_shutdown+0xfe>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	7d1b      	ldrb	r3, [r3, #20]
 801112e:	2b04      	cmp	r3, #4
 8011130:	d003      	beq.n	801113a <tcp_close_shutdown+0x22>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	7d1b      	ldrb	r3, [r3, #20]
 8011136:	2b07      	cmp	r3, #7
 8011138:	d16d      	bne.n	8011216 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801113e:	2b00      	cmp	r3, #0
 8011140:	d104      	bne.n	801114c <tcp_close_shutdown+0x34>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011146:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801114a:	d064      	beq.n	8011216 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7e9b      	ldrb	r3, [r3, #26]
 8011150:	f003 0310 	and.w	r3, r3, #16
 8011154:	2b00      	cmp	r3, #0
 8011156:	d106      	bne.n	8011166 <tcp_close_shutdown+0x4e>
 8011158:	4b59      	ldr	r3, [pc, #356]	; (80112c0 <tcp_close_shutdown+0x1a8>)
 801115a:	f240 120f 	movw	r2, #271	; 0x10f
 801115e:	4959      	ldr	r1, [pc, #356]	; (80112c4 <tcp_close_shutdown+0x1ac>)
 8011160:	4859      	ldr	r0, [pc, #356]	; (80112c8 <tcp_close_shutdown+0x1b0>)
 8011162:	f008 f9cd 	bl	8019500 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801116e:	687c      	ldr	r4, [r7, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	1d1d      	adds	r5, r3, #4
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	8adb      	ldrh	r3, [r3, #22]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	8b12      	ldrh	r2, [r2, #24]
 801117c:	9201      	str	r2, [sp, #4]
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	462b      	mov	r3, r5
 8011182:	4622      	mov	r2, r4
 8011184:	f004 ff1a 	bl	8015fbc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f001 fa4b 	bl	8012624 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801118e:	4b4f      	ldr	r3, [pc, #316]	; (80112cc <tcp_close_shutdown+0x1b4>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	429a      	cmp	r2, r3
 8011196:	d105      	bne.n	80111a4 <tcp_close_shutdown+0x8c>
 8011198:	4b4c      	ldr	r3, [pc, #304]	; (80112cc <tcp_close_shutdown+0x1b4>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	4a4b      	ldr	r2, [pc, #300]	; (80112cc <tcp_close_shutdown+0x1b4>)
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	e013      	b.n	80111cc <tcp_close_shutdown+0xb4>
 80111a4:	4b49      	ldr	r3, [pc, #292]	; (80112cc <tcp_close_shutdown+0x1b4>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	60fb      	str	r3, [r7, #12]
 80111aa:	e00c      	b.n	80111c6 <tcp_close_shutdown+0xae>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d104      	bne.n	80111c0 <tcp_close_shutdown+0xa8>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	68da      	ldr	r2, [r3, #12]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	60da      	str	r2, [r3, #12]
 80111be:	e005      	b.n	80111cc <tcp_close_shutdown+0xb4>
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	60fb      	str	r3, [r7, #12]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1ef      	bne.n	80111ac <tcp_close_shutdown+0x94>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	60da      	str	r2, [r3, #12]
 80111d2:	4b3f      	ldr	r3, [pc, #252]	; (80112d0 <tcp_close_shutdown+0x1b8>)
 80111d4:	2201      	movs	r2, #1
 80111d6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	2b04      	cmp	r3, #4
 80111de:	d10c      	bne.n	80111fa <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	220a      	movs	r2, #10
 80111e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111e6:	4b3b      	ldr	r3, [pc, #236]	; (80112d4 <tcp_close_shutdown+0x1bc>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	60da      	str	r2, [r3, #12]
 80111ee:	4a39      	ldr	r2, [pc, #228]	; (80112d4 <tcp_close_shutdown+0x1bc>)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6013      	str	r3, [r2, #0]
 80111f4:	f005 f934 	bl	8016460 <tcp_timer_needed>
 80111f8:	e00b      	b.n	8011212 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80111fa:	4b37      	ldr	r3, [pc, #220]	; (80112d8 <tcp_close_shutdown+0x1c0>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	429a      	cmp	r2, r3
 8011202:	d102      	bne.n	801120a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8011204:	f003 fd72 	bl	8014cec <tcp_trigger_input_pcb_close>
 8011208:	e003      	b.n	8011212 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801120a:	6879      	ldr	r1, [r7, #4]
 801120c:	2001      	movs	r0, #1
 801120e:	f7fe ff03 	bl	8010018 <memp_free>
        }
      }
      return ERR_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	e050      	b.n	80112b8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	7d1b      	ldrb	r3, [r3, #20]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d02e      	beq.n	801127c <tcp_close_shutdown+0x164>
 801121e:	2b02      	cmp	r3, #2
 8011220:	d038      	beq.n	8011294 <tcp_close_shutdown+0x17c>
 8011222:	2b00      	cmp	r3, #0
 8011224:	d142      	bne.n	80112ac <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	8adb      	ldrh	r3, [r3, #22]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d021      	beq.n	8011272 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801122e:	4b2b      	ldr	r3, [pc, #172]	; (80112dc <tcp_close_shutdown+0x1c4>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	429a      	cmp	r2, r3
 8011236:	d105      	bne.n	8011244 <tcp_close_shutdown+0x12c>
 8011238:	4b28      	ldr	r3, [pc, #160]	; (80112dc <tcp_close_shutdown+0x1c4>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	4a27      	ldr	r2, [pc, #156]	; (80112dc <tcp_close_shutdown+0x1c4>)
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	e013      	b.n	801126c <tcp_close_shutdown+0x154>
 8011244:	4b25      	ldr	r3, [pc, #148]	; (80112dc <tcp_close_shutdown+0x1c4>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	60bb      	str	r3, [r7, #8]
 801124a:	e00c      	b.n	8011266 <tcp_close_shutdown+0x14e>
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	429a      	cmp	r2, r3
 8011254:	d104      	bne.n	8011260 <tcp_close_shutdown+0x148>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	68da      	ldr	r2, [r3, #12]
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	60da      	str	r2, [r3, #12]
 801125e:	e005      	b.n	801126c <tcp_close_shutdown+0x154>
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	60bb      	str	r3, [r7, #8]
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1ef      	bne.n	801124c <tcp_close_shutdown+0x134>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	2001      	movs	r0, #1
 8011276:	f7fe fecf 	bl	8010018 <memp_free>
    break;
 801127a:	e01c      	b.n	80112b6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ff13 	bl	80110a8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	4816      	ldr	r0, [pc, #88]	; (80112e0 <tcp_close_shutdown+0x1c8>)
 8011286:	f001 fa0f 	bl	80126a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801128a:	6879      	ldr	r1, [r7, #4]
 801128c:	2002      	movs	r0, #2
 801128e:	f7fe fec3 	bl	8010018 <memp_free>
    break;
 8011292:	e010      	b.n	80112b6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	480d      	ldr	r0, [pc, #52]	; (80112cc <tcp_close_shutdown+0x1b4>)
 8011298:	f001 fa06 	bl	80126a8 <tcp_pcb_remove>
 801129c:	4b0c      	ldr	r3, [pc, #48]	; (80112d0 <tcp_close_shutdown+0x1b8>)
 801129e:	2201      	movs	r2, #1
 80112a0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	2001      	movs	r0, #1
 80112a6:	f7fe feb7 	bl	8010018 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80112aa:	e004      	b.n	80112b6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 f819 	bl	80112e4 <tcp_close_shutdown_fin>
 80112b2:	4603      	mov	r3, r0
 80112b4:	e000      	b.n	80112b8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bdb0      	pop	{r4, r5, r7, pc}
 80112c0:	0801bba0 	.word	0x0801bba0
 80112c4:	0801bc40 	.word	0x0801bc40
 80112c8:	0801bc00 	.word	0x0801bc00
 80112cc:	200101cc 	.word	0x200101cc
 80112d0:	200101c8 	.word	0x200101c8
 80112d4:	200101dc 	.word	0x200101dc
 80112d8:	200101e0 	.word	0x200101e0
 80112dc:	200101d8 	.word	0x200101d8
 80112e0:	200101d4 	.word	0x200101d4

080112e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_close_shutdown_fin+0x1c>
 80112f2:	4b2c      	ldr	r3, [pc, #176]	; (80113a4 <tcp_close_shutdown_fin+0xc0>)
 80112f4:	f240 124d 	movw	r2, #333	; 0x14d
 80112f8:	492b      	ldr	r1, [pc, #172]	; (80113a8 <tcp_close_shutdown_fin+0xc4>)
 80112fa:	482c      	ldr	r0, [pc, #176]	; (80113ac <tcp_close_shutdown_fin+0xc8>)
 80112fc:	f008 f900 	bl	8019500 <iprintf>

  switch (pcb->state) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7d1b      	ldrb	r3, [r3, #20]
 8011304:	2b04      	cmp	r3, #4
 8011306:	d010      	beq.n	801132a <tcp_close_shutdown_fin+0x46>
 8011308:	2b07      	cmp	r3, #7
 801130a:	d01b      	beq.n	8011344 <tcp_close_shutdown_fin+0x60>
 801130c:	2b03      	cmp	r3, #3
 801130e:	d126      	bne.n	801135e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f003 fd77 	bl	8014e04 <tcp_send_fin>
 8011316:	4603      	mov	r3, r0
 8011318:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d11f      	bne.n	8011362 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2205      	movs	r2, #5
 8011326:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011328:	e01b      	b.n	8011362 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f003 fd6a 	bl	8014e04 <tcp_send_fin>
 8011330:	4603      	mov	r3, r0
 8011332:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d114      	bne.n	8011366 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2205      	movs	r2, #5
 8011340:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011342:	e010      	b.n	8011366 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f003 fd5d 	bl	8014e04 <tcp_send_fin>
 801134a:	4603      	mov	r3, r0
 801134c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d109      	bne.n	801136a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2209      	movs	r2, #9
 801135a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801135c:	e005      	b.n	801136a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801135e:	2300      	movs	r3, #0
 8011360:	e01c      	b.n	801139c <tcp_close_shutdown_fin+0xb8>
    break;
 8011362:	bf00      	nop
 8011364:	e002      	b.n	801136c <tcp_close_shutdown_fin+0x88>
    break;
 8011366:	bf00      	nop
 8011368:	e000      	b.n	801136c <tcp_close_shutdown_fin+0x88>
    break;
 801136a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d103      	bne.n	801137c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f004 fb97 	bl	8015aa8 <tcp_output>
 801137a:	e00d      	b.n	8011398 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011384:	d108      	bne.n	8011398 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	7e9b      	ldrb	r3, [r3, #26]
 801138a:	f043 0308 	orr.w	r3, r3, #8
 801138e:	b2da      	uxtb	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	e001      	b.n	801139c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	0801bba0 	.word	0x0801bba0
 80113a8:	0801bbf4 	.word	0x0801bbf4
 80113ac:	0801bc00 	.word	0x0801bc00

080113b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	7d1b      	ldrb	r3, [r3, #20]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d006      	beq.n	80113ce <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	7e9b      	ldrb	r3, [r3, #26]
 80113c4:	f043 0310 	orr.w	r3, r3, #16
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80113ce:	2101      	movs	r1, #1
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff fea1 	bl	8011118 <tcp_close_shutdown>
 80113d6:	4603      	mov	r3, r0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	7d1b      	ldrb	r3, [r3, #20]
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d102      	bne.n	80113fa <tcp_shutdown+0x1a>
    return ERR_CONN;
 80113f4:	f06f 030a 	mvn.w	r3, #10
 80113f8:	e035      	b.n	8011466 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01b      	beq.n	8011438 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	7e9b      	ldrb	r3, [r3, #26]
 8011404:	f043 0310 	orr.w	r3, r3, #16
 8011408:	b2da      	uxtb	r2, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d005      	beq.n	8011420 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011414:	2101      	movs	r1, #1
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f7ff fe7e 	bl	8011118 <tcp_close_shutdown>
 801141c:	4603      	mov	r3, r0
 801141e:	e022      	b.n	8011466 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff fb8b 	bl	8010b48 <pbuf_free>
      pcb->refused_data = NULL;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2200      	movs	r2, #0
 8011436:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d012      	beq.n	8011464 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	7d1b      	ldrb	r3, [r3, #20]
 8011442:	2b03      	cmp	r3, #3
 8011444:	db0b      	blt.n	801145e <tcp_shutdown+0x7e>
 8011446:	2b04      	cmp	r3, #4
 8011448:	dd01      	ble.n	801144e <tcp_shutdown+0x6e>
 801144a:	2b07      	cmp	r3, #7
 801144c:	d107      	bne.n	801145e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	b2db      	uxtb	r3, r3
 8011452:	4619      	mov	r1, r3
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7ff fe5f 	bl	8011118 <tcp_close_shutdown>
 801145a:	4603      	mov	r3, r0
 801145c:	e003      	b.n	8011466 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801145e:	f06f 030a 	mvn.w	r3, #10
 8011462:	e000      	b.n	8011466 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
	...

08011470 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08c      	sub	sp, #48	; 0x30
 8011474:	af02      	add	r7, sp, #8
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7d1b      	ldrb	r3, [r3, #20]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d106      	bne.n	8011490 <tcp_abandon+0x20>
 8011482:	4b4d      	ldr	r3, [pc, #308]	; (80115b8 <tcp_abandon+0x148>)
 8011484:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011488:	494c      	ldr	r1, [pc, #304]	; (80115bc <tcp_abandon+0x14c>)
 801148a:	484d      	ldr	r0, [pc, #308]	; (80115c0 <tcp_abandon+0x150>)
 801148c:	f008 f838 	bl	8019500 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	2b0a      	cmp	r3, #10
 8011496:	d108      	bne.n	80114aa <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011498:	6879      	ldr	r1, [r7, #4]
 801149a:	484a      	ldr	r0, [pc, #296]	; (80115c4 <tcp_abandon+0x154>)
 801149c:	f001 f904 	bl	80126a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	2001      	movs	r0, #1
 80114a4:	f7fe fdb8 	bl	8010018 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80114a8:	e081      	b.n	80115ae <tcp_abandon+0x13e>
    int send_rst = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114bc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114c4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7d1b      	ldrb	r3, [r3, #20]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d126      	bne.n	8011522 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	8adb      	ldrh	r3, [r3, #22]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d02e      	beq.n	801153a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114dc:	4b3a      	ldr	r3, [pc, #232]	; (80115c8 <tcp_abandon+0x158>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d105      	bne.n	80114f2 <tcp_abandon+0x82>
 80114e6:	4b38      	ldr	r3, [pc, #224]	; (80115c8 <tcp_abandon+0x158>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	4a36      	ldr	r2, [pc, #216]	; (80115c8 <tcp_abandon+0x158>)
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	e013      	b.n	801151a <tcp_abandon+0xaa>
 80114f2:	4b35      	ldr	r3, [pc, #212]	; (80115c8 <tcp_abandon+0x158>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	61fb      	str	r3, [r7, #28]
 80114f8:	e00c      	b.n	8011514 <tcp_abandon+0xa4>
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	429a      	cmp	r2, r3
 8011502:	d104      	bne.n	801150e <tcp_abandon+0x9e>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	68da      	ldr	r2, [r3, #12]
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	60da      	str	r2, [r3, #12]
 801150c:	e005      	b.n	801151a <tcp_abandon+0xaa>
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	61fb      	str	r3, [r7, #28]
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1ef      	bne.n	80114fa <tcp_abandon+0x8a>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2200      	movs	r2, #0
 801151e:	60da      	str	r2, [r3, #12]
 8011520:	e00b      	b.n	801153a <tcp_abandon+0xca>
      send_rst = reset;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	8adb      	ldrh	r3, [r3, #22]
 801152a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	4827      	ldr	r0, [pc, #156]	; (80115cc <tcp_abandon+0x15c>)
 8011530:	f001 f8ba 	bl	80126a8 <tcp_pcb_remove>
 8011534:	4b26      	ldr	r3, [pc, #152]	; (80115d0 <tcp_abandon+0x160>)
 8011536:	2201      	movs	r2, #1
 8011538:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801153e:	2b00      	cmp	r3, #0
 8011540:	d004      	beq.n	801154c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011546:	4618      	mov	r0, r3
 8011548:	f000 fe03 	bl	8012152 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011550:	2b00      	cmp	r3, #0
 8011552:	d004      	beq.n	801155e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011558:	4618      	mov	r0, r3
 801155a:	f000 fdfa 	bl	8012152 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011562:	2b00      	cmp	r3, #0
 8011564:	d004      	beq.n	8011570 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801156a:	4618      	mov	r0, r3
 801156c:	f000 fdf1 	bl	8012152 <tcp_segs_free>
    if (send_rst) {
 8011570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00c      	beq.n	8011590 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	1d19      	adds	r1, r3, #4
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	8b1b      	ldrh	r3, [r3, #24]
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	460b      	mov	r3, r1
 8011588:	6979      	ldr	r1, [r7, #20]
 801158a:	69b8      	ldr	r0, [r7, #24]
 801158c:	f004 fd16 	bl	8015fbc <tcp_rst>
    last_state = pcb->state;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	7d1b      	ldrb	r3, [r3, #20]
 8011594:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8011596:	6879      	ldr	r1, [r7, #4]
 8011598:	2001      	movs	r0, #1
 801159a:	f7fe fd3d 	bl	8010018 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d004      	beq.n	80115ae <tcp_abandon+0x13e>
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	f06f 010c 	mvn.w	r1, #12
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	4798      	blx	r3
}
 80115ae:	bf00      	nop
 80115b0:	3728      	adds	r7, #40	; 0x28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801bba0 	.word	0x0801bba0
 80115bc:	0801bc5c 	.word	0x0801bc5c
 80115c0:	0801bc00 	.word	0x0801bc00
 80115c4:	200101dc 	.word	0x200101dc
 80115c8:	200101d8 	.word	0x200101d8
 80115cc:	200101cc 	.word	0x200101cc
 80115d0:	200101c8 	.word	0x200101c8

080115d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80115dc:	2101      	movs	r1, #1
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff ff46 	bl	8011470 <tcp_abandon>
}
 80115e4:	bf00      	nop
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	4613      	mov	r3, r2
 80115f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80115fa:	2304      	movs	r3, #4
 80115fc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011604:	4b3c      	ldr	r3, [pc, #240]	; (80116f8 <tcp_bind+0x10c>)
 8011606:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <tcp_bind+0x28>
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d102      	bne.n	801161a <tcp_bind+0x2e>
    return ERR_VAL;
 8011614:	f06f 0305 	mvn.w	r3, #5
 8011618:	e06a      	b.n	80116f0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	7d1b      	ldrb	r3, [r3, #20]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d009      	beq.n	8011636 <tcp_bind+0x4a>
 8011622:	4b36      	ldr	r3, [pc, #216]	; (80116fc <tcp_bind+0x110>)
 8011624:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011628:	4935      	ldr	r1, [pc, #212]	; (8011700 <tcp_bind+0x114>)
 801162a:	4836      	ldr	r0, [pc, #216]	; (8011704 <tcp_bind+0x118>)
 801162c:	f007 ff68 	bl	8019500 <iprintf>
 8011630:	f06f 0305 	mvn.w	r3, #5
 8011634:	e05c      	b.n	80116f0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8011636:	88fb      	ldrh	r3, [r7, #6]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d109      	bne.n	8011650 <tcp_bind+0x64>
    port = tcp_new_port();
 801163c:	f000 f9b8 	bl	80119b0 <tcp_new_port>
 8011640:	4603      	mov	r3, r0
 8011642:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011644:	88fb      	ldrh	r3, [r7, #6]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d135      	bne.n	80116b6 <tcp_bind+0xca>
      return ERR_BUF;
 801164a:	f06f 0301 	mvn.w	r3, #1
 801164e:	e04f      	b.n	80116f0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
 8011654:	e02b      	b.n	80116ae <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011656:	4a2c      	ldr	r2, [pc, #176]	; (8011708 <tcp_bind+0x11c>)
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	61bb      	str	r3, [r7, #24]
 8011662:	e01e      	b.n	80116a2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	8adb      	ldrh	r3, [r3, #22]
 8011668:	88fa      	ldrh	r2, [r7, #6]
 801166a:	429a      	cmp	r2, r3
 801166c:	d116      	bne.n	801169c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801166e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011670:	2b00      	cmp	r3, #0
 8011672:	d010      	beq.n	8011696 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00c      	beq.n	8011696 <tcp_bind+0xaa>
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d009      	beq.n	8011696 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d005      	beq.n	8011696 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011692:	429a      	cmp	r2, r3
 8011694:	d102      	bne.n	801169c <tcp_bind+0xb0>
              return ERR_USE;
 8011696:	f06f 0307 	mvn.w	r3, #7
 801169a:	e029      	b.n	80116f0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	61bb      	str	r3, [r7, #24]
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1dd      	bne.n	8011664 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	3301      	adds	r3, #1
 80116ac:	61fb      	str	r3, [r7, #28]
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	dbcf      	blt.n	8011656 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00c      	beq.n	80116d6 <tcp_bind+0xea>
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d008      	beq.n	80116d6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <tcp_bind+0xe4>
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	e000      	b.n	80116d2 <tcp_bind+0xe6>
 80116d0:	2300      	movs	r3, #0
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	88fa      	ldrh	r2, [r7, #6]
 80116da:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80116dc:	4b0b      	ldr	r3, [pc, #44]	; (801170c <tcp_bind+0x120>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	60da      	str	r2, [r3, #12]
 80116e4:	4a09      	ldr	r2, [pc, #36]	; (801170c <tcp_bind+0x120>)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6013      	str	r3, [r2, #0]
 80116ea:	f004 feb9 	bl	8016460 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	0801d1ac 	.word	0x0801d1ac
 80116fc:	0801bba0 	.word	0x0801bba0
 8011700:	0801bc90 	.word	0x0801bc90
 8011704:	0801bc00 	.word	0x0801bc00
 8011708:	0801d184 	.word	0x0801d184
 801170c:	200101d8 	.word	0x200101d8

08011710 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	4613      	mov	r3, r2
 801171c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801171e:	68b8      	ldr	r0, [r7, #8]
 8011720:	f7ff ff58 	bl	80115d4 <tcp_abort>

  return ERR_ABRT;
 8011724:	f06f 030c 	mvn.w	r3, #12
}
 8011728:	4618      	mov	r0, r3
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	460b      	mov	r3, r1
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801173e:	2300      	movs	r3, #0
 8011740:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	7d1b      	ldrb	r3, [r3, #20]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d009      	beq.n	801175e <tcp_listen_with_backlog_and_err+0x2e>
 801174a:	4b3f      	ldr	r3, [pc, #252]	; (8011848 <tcp_listen_with_backlog_and_err+0x118>)
 801174c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011750:	493e      	ldr	r1, [pc, #248]	; (801184c <tcp_listen_with_backlog_and_err+0x11c>)
 8011752:	483f      	ldr	r0, [pc, #252]	; (8011850 <tcp_listen_with_backlog_and_err+0x120>)
 8011754:	f007 fed4 	bl	8019500 <iprintf>
 8011758:	23f1      	movs	r3, #241	; 0xf1
 801175a:	76fb      	strb	r3, [r7, #27]
 801175c:	e069      	b.n	8011832 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	7d1b      	ldrb	r3, [r3, #20]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d104      	bne.n	8011770 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801176a:	23f7      	movs	r3, #247	; 0xf7
 801176c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801176e:	e060      	b.n	8011832 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011770:	2002      	movs	r0, #2
 8011772:	f7fe fbdb 	bl	800ff2c <memp_malloc>
 8011776:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d102      	bne.n	8011784 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801177e:	23ff      	movs	r3, #255	; 0xff
 8011780:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011782:	e056      	b.n	8011832 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	691a      	ldr	r2, [r3, #16]
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	8ada      	ldrh	r2, [r3, #22]
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	2201      	movs	r2, #1
 8011798:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	7d5a      	ldrb	r2, [r3, #21]
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	7a1a      	ldrb	r2, [r3, #8]
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	7a9a      	ldrb	r2, [r3, #10]
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	7a5a      	ldrb	r2, [r3, #9]
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	8adb      	ldrh	r3, [r3, #22]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d021      	beq.n	801180e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80117ca:	4b22      	ldr	r3, [pc, #136]	; (8011854 <tcp_listen_with_backlog_and_err+0x124>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68fa      	ldr	r2, [r7, #12]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d105      	bne.n	80117e0 <tcp_listen_with_backlog_and_err+0xb0>
 80117d4:	4b1f      	ldr	r3, [pc, #124]	; (8011854 <tcp_listen_with_backlog_and_err+0x124>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	4a1e      	ldr	r2, [pc, #120]	; (8011854 <tcp_listen_with_backlog_and_err+0x124>)
 80117dc:	6013      	str	r3, [r2, #0]
 80117de:	e013      	b.n	8011808 <tcp_listen_with_backlog_and_err+0xd8>
 80117e0:	4b1c      	ldr	r3, [pc, #112]	; (8011854 <tcp_listen_with_backlog_and_err+0x124>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	617b      	str	r3, [r7, #20]
 80117e6:	e00c      	b.n	8011802 <tcp_listen_with_backlog_and_err+0xd2>
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d104      	bne.n	80117fc <tcp_listen_with_backlog_and_err+0xcc>
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	68da      	ldr	r2, [r3, #12]
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	60da      	str	r2, [r3, #12]
 80117fa:	e005      	b.n	8011808 <tcp_listen_with_backlog_and_err+0xd8>
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	617b      	str	r3, [r7, #20]
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d1ef      	bne.n	80117e8 <tcp_listen_with_backlog_and_err+0xb8>
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2200      	movs	r2, #0
 801180c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801180e:	68f9      	ldr	r1, [r7, #12]
 8011810:	2001      	movs	r0, #1
 8011812:	f7fe fc01 	bl	8010018 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	4a0f      	ldr	r2, [pc, #60]	; (8011858 <tcp_listen_with_backlog_and_err+0x128>)
 801181a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801181c:	4b0f      	ldr	r3, [pc, #60]	; (801185c <tcp_listen_with_backlog_and_err+0x12c>)
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	60da      	str	r2, [r3, #12]
 8011824:	4a0d      	ldr	r2, [pc, #52]	; (801185c <tcp_listen_with_backlog_and_err+0x12c>)
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	6013      	str	r3, [r2, #0]
 801182a:	f004 fe19 	bl	8016460 <tcp_timer_needed>
  res = ERR_OK;
 801182e:	2300      	movs	r3, #0
 8011830:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7efa      	ldrb	r2, [r7, #27]
 801183c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801183e:	69fb      	ldr	r3, [r7, #28]
}
 8011840:	4618      	mov	r0, r3
 8011842:	3720      	adds	r7, #32
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	0801bba0 	.word	0x0801bba0
 801184c:	0801bcb8 	.word	0x0801bcb8
 8011850:	0801bc00 	.word	0x0801bc00
 8011854:	200101d8 	.word	0x200101d8
 8011858:	08011711 	.word	0x08011711
 801185c:	200101d4 	.word	0x200101d4

08011860 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011870:	4413      	add	r3, r2
 8011872:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801187c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011880:	bf28      	it	cs
 8011882:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011886:	b292      	uxth	r2, r2
 8011888:	4413      	add	r3, r2
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	1ad3      	subs	r3, r2, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	db08      	blt.n	80118a4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	e020      	b.n	80118e6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ac:	1ad3      	subs	r3, r2, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	dd03      	ble.n	80118ba <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2200      	movs	r2, #0
 80118b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80118b8:	e014      	b.n	80118e4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118cc:	d306      	bcc.n	80118dc <tcp_update_rcv_ann_wnd+0x7c>
 80118ce:	4b08      	ldr	r3, [pc, #32]	; (80118f0 <tcp_update_rcv_ann_wnd+0x90>)
 80118d0:	f44f 7242 	mov.w	r2, #776	; 0x308
 80118d4:	4907      	ldr	r1, [pc, #28]	; (80118f4 <tcp_update_rcv_ann_wnd+0x94>)
 80118d6:	4808      	ldr	r0, [pc, #32]	; (80118f8 <tcp_update_rcv_ann_wnd+0x98>)
 80118d8:	f007 fe12 	bl	8019500 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	b29a      	uxth	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80118e4:	2300      	movs	r3, #0
  }
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	0801bba0 	.word	0x0801bba0
 80118f4:	0801bcdc 	.word	0x0801bcdc
 80118f8:	0801bc00 	.word	0x0801bc00

080118fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7d1b      	ldrb	r3, [r3, #20]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d106      	bne.n	801191e <tcp_recved+0x22>
 8011910:	4b23      	ldr	r3, [pc, #140]	; (80119a0 <tcp_recved+0xa4>)
 8011912:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011916:	4923      	ldr	r1, [pc, #140]	; (80119a4 <tcp_recved+0xa8>)
 8011918:	4823      	ldr	r0, [pc, #140]	; (80119a8 <tcp_recved+0xac>)
 801191a:	f007 fdf1 	bl	8019500 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011922:	887b      	ldrh	r3, [r7, #2]
 8011924:	4413      	add	r3, r2
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011930:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011934:	d904      	bls.n	8011940 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801193c:	851a      	strh	r2, [r3, #40]	; 0x28
 801193e:	e017      	b.n	8011970 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011944:	2b00      	cmp	r3, #0
 8011946:	d113      	bne.n	8011970 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	7d1b      	ldrb	r3, [r3, #20]
 801194c:	2b07      	cmp	r3, #7
 801194e:	d003      	beq.n	8011958 <tcp_recved+0x5c>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7d1b      	ldrb	r3, [r3, #20]
 8011954:	2b09      	cmp	r3, #9
 8011956:	d104      	bne.n	8011962 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801195e:	851a      	strh	r2, [r3, #40]	; 0x28
 8011960:	e006      	b.n	8011970 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011962:	4b0f      	ldr	r3, [pc, #60]	; (80119a0 <tcp_recved+0xa4>)
 8011964:	f240 322d 	movw	r2, #813	; 0x32d
 8011968:	4910      	ldr	r1, [pc, #64]	; (80119ac <tcp_recved+0xb0>)
 801196a:	480f      	ldr	r0, [pc, #60]	; (80119a8 <tcp_recved+0xac>)
 801196c:	f007 fdc8 	bl	8019500 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f7ff ff75 	bl	8011860 <tcp_update_rcv_ann_wnd>
 8011976:	4603      	mov	r3, r0
 8011978:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011980:	db09      	blt.n	8011996 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7e9b      	ldrb	r3, [r3, #26]
 8011986:	f043 0302 	orr.w	r3, r3, #2
 801198a:	b2da      	uxtb	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f004 f889 	bl	8015aa8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011996:	bf00      	nop
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	0801bba0 	.word	0x0801bba0
 80119a4:	0801bcf8 	.word	0x0801bcf8
 80119a8:	0801bc00 	.word	0x0801bc00
 80119ac:	0801bd20 	.word	0x0801bd20

080119b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80119b6:	2300      	movs	r3, #0
 80119b8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80119ba:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <tcp_new_port+0x80>)
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	b291      	uxth	r1, r2
 80119c2:	4a1b      	ldr	r2, [pc, #108]	; (8011a30 <tcp_new_port+0x80>)
 80119c4:	8011      	strh	r1, [r2, #0]
 80119c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d103      	bne.n	80119d6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80119ce:	4b18      	ldr	r3, [pc, #96]	; (8011a30 <tcp_new_port+0x80>)
 80119d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80119d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80119d6:	2300      	movs	r3, #0
 80119d8:	71fb      	strb	r3, [r7, #7]
 80119da:	e01e      	b.n	8011a1a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80119dc:	79fb      	ldrb	r3, [r7, #7]
 80119de:	4a15      	ldr	r2, [pc, #84]	; (8011a34 <tcp_new_port+0x84>)
 80119e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	603b      	str	r3, [r7, #0]
 80119e8:	e011      	b.n	8011a0e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	8ada      	ldrh	r2, [r3, #22]
 80119ee:	4b10      	ldr	r3, [pc, #64]	; (8011a30 <tcp_new_port+0x80>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d108      	bne.n	8011a08 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80119f6:	88bb      	ldrh	r3, [r7, #4]
 80119f8:	3301      	adds	r3, #1
 80119fa:	80bb      	strh	r3, [r7, #4]
 80119fc:	88bb      	ldrh	r3, [r7, #4]
 80119fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a02:	d3da      	bcc.n	80119ba <tcp_new_port+0xa>
          return 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	e00d      	b.n	8011a24 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	603b      	str	r3, [r7, #0]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1ea      	bne.n	80119ea <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011a14:	79fb      	ldrb	r3, [r7, #7]
 8011a16:	3301      	adds	r3, #1
 8011a18:	71fb      	strb	r3, [r7, #7]
 8011a1a:	79fb      	ldrb	r3, [r7, #7]
 8011a1c:	2b03      	cmp	r3, #3
 8011a1e:	d9dd      	bls.n	80119dc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011a20:	4b03      	ldr	r3, [pc, #12]	; (8011a30 <tcp_new_port+0x80>)
 8011a22:	881b      	ldrh	r3, [r3, #0]
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	20000028 	.word	0x20000028
 8011a34:	0801d184 	.word	0x0801d184

08011a38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011a38:	b5b0      	push	{r4, r5, r7, lr}
 8011a3a:	b08c      	sub	sp, #48	; 0x30
 8011a3c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011a42:	4b96      	ldr	r3, [pc, #600]	; (8011c9c <tcp_slowtmr+0x264>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3301      	adds	r3, #1
 8011a48:	4a94      	ldr	r2, [pc, #592]	; (8011c9c <tcp_slowtmr+0x264>)
 8011a4a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011a4c:	4b94      	ldr	r3, [pc, #592]	; (8011ca0 <tcp_slowtmr+0x268>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	3301      	adds	r3, #1
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	4b92      	ldr	r3, [pc, #584]	; (8011ca0 <tcp_slowtmr+0x268>)
 8011a56:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8011a5c:	4b91      	ldr	r3, [pc, #580]	; (8011ca4 <tcp_slowtmr+0x26c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011a62:	e227      	b.n	8011eb4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d106      	bne.n	8011a7a <tcp_slowtmr+0x42>
 8011a6c:	4b8e      	ldr	r3, [pc, #568]	; (8011ca8 <tcp_slowtmr+0x270>)
 8011a6e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011a72:	498e      	ldr	r1, [pc, #568]	; (8011cac <tcp_slowtmr+0x274>)
 8011a74:	488e      	ldr	r0, [pc, #568]	; (8011cb0 <tcp_slowtmr+0x278>)
 8011a76:	f007 fd43 	bl	8019500 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	7d1b      	ldrb	r3, [r3, #20]
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d106      	bne.n	8011a90 <tcp_slowtmr+0x58>
 8011a82:	4b89      	ldr	r3, [pc, #548]	; (8011ca8 <tcp_slowtmr+0x270>)
 8011a84:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011a88:	498a      	ldr	r1, [pc, #552]	; (8011cb4 <tcp_slowtmr+0x27c>)
 8011a8a:	4889      	ldr	r0, [pc, #548]	; (8011cb0 <tcp_slowtmr+0x278>)
 8011a8c:	f007 fd38 	bl	8019500 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
 8011a94:	2b0a      	cmp	r3, #10
 8011a96:	d106      	bne.n	8011aa6 <tcp_slowtmr+0x6e>
 8011a98:	4b83      	ldr	r3, [pc, #524]	; (8011ca8 <tcp_slowtmr+0x270>)
 8011a9a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8011a9e:	4986      	ldr	r1, [pc, #536]	; (8011cb8 <tcp_slowtmr+0x280>)
 8011aa0:	4883      	ldr	r0, [pc, #524]	; (8011cb0 <tcp_slowtmr+0x278>)
 8011aa2:	f007 fd2d 	bl	8019500 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	7f5a      	ldrb	r2, [r3, #29]
 8011aaa:	4b7d      	ldr	r3, [pc, #500]	; (8011ca0 <tcp_slowtmr+0x268>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d103      	bne.n	8011aba <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	68db      	ldr	r3, [r3, #12]
 8011ab6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8011ab8:	e1fc      	b.n	8011eb4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011aba:	4b79      	ldr	r3, [pc, #484]	; (8011ca0 <tcp_slowtmr+0x268>)
 8011abc:	781a      	ldrb	r2, [r3, #0]
 8011abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	7d1b      	ldrb	r3, [r3, #20]
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d108      	bne.n	8011ae4 <tcp_slowtmr+0xac>
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ad8:	2b05      	cmp	r3, #5
 8011ada:	d903      	bls.n	8011ae4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8011adc:	7ffb      	ldrb	r3, [r7, #31]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	77fb      	strb	r3, [r7, #31]
 8011ae2:	e0a2      	b.n	8011c2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aea:	2b0b      	cmp	r3, #11
 8011aec:	d903      	bls.n	8011af6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011aee:	7ffb      	ldrb	r3, [r7, #31]
 8011af0:	3301      	adds	r3, #1
 8011af2:	77fb      	strb	r3, [r7, #31]
 8011af4:	e099      	b.n	8011c2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d032      	beq.n	8011b66 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011b06:	3b01      	subs	r3, #1
 8011b08:	4a6c      	ldr	r2, [pc, #432]	; (8011cbc <tcp_slowtmr+0x284>)
 8011b0a:	5cd3      	ldrb	r3, [r2, r3]
 8011b0c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8011b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011b14:	7cfa      	ldrb	r2, [r7, #19]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d907      	bls.n	8011b2a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011b20:	3301      	adds	r3, #1
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b26:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011b30:	7cfa      	ldrb	r2, [r7, #19]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d879      	bhi.n	8011c2a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b38:	f004 fbd2 	bl	80162e0 <tcp_zero_window_probe>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d173      	bne.n	8011c2a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	2200      	movs	r2, #0
 8011b46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011b50:	2b06      	cmp	r3, #6
 8011b52:	d86a      	bhi.n	8011c2a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8011b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b56:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b60:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011b64:	e061      	b.n	8011c2a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8011b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	db08      	blt.n	8011b82 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8011b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	3301      	adds	r3, #1
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	b21a      	sxth	r2, r3
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d04f      	beq.n	8011c2a <tcp_slowtmr+0x1f2>
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011b96:	429a      	cmp	r2, r3
 8011b98:	db47      	blt.n	8011c2a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	7d1b      	ldrb	r3, [r3, #20]
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d018      	beq.n	8011bd4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ba8:	2b0c      	cmp	r3, #12
 8011baa:	bf28      	it	cs
 8011bac:	230c      	movcs	r3, #12
 8011bae:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bb6:	10db      	asrs	r3, r3, #3
 8011bb8:	b21b      	sxth	r3, r3
 8011bba:	461a      	mov	r2, r3
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011bc2:	4413      	add	r3, r2
 8011bc4:	7dfa      	ldrb	r2, [r7, #23]
 8011bc6:	493e      	ldr	r1, [pc, #248]	; (8011cc0 <tcp_slowtmr+0x288>)
 8011bc8:	5c8a      	ldrb	r2, [r1, r2]
 8011bca:	4093      	lsls	r3, r2
 8011bcc:	b21a      	sxth	r2, r3
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011be6:	4293      	cmp	r3, r2
 8011be8:	bf28      	it	cs
 8011bea:	4613      	movcs	r3, r2
 8011bec:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8011bee:	8abb      	ldrh	r3, [r7, #20]
 8011bf0:	085b      	lsrs	r3, r3, #1
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c04:	005b      	lsls	r3, r3, #1
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d206      	bcs.n	8011c1a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c10:	005b      	lsls	r3, r3, #1
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8011c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c26:	f004 fa3f 	bl	80160a8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	7d1b      	ldrb	r3, [r3, #20]
 8011c2e:	2b06      	cmp	r3, #6
 8011c30:	d10f      	bne.n	8011c52 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c34:	7e9b      	ldrb	r3, [r3, #26]
 8011c36:	f003 0310 	and.w	r3, r3, #16
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d009      	beq.n	8011c52 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c3e:	4b17      	ldr	r3, [pc, #92]	; (8011c9c <tcp_slowtmr+0x264>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c44:	6a1b      	ldr	r3, [r3, #32]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	2b28      	cmp	r3, #40	; 0x28
 8011c4a:	d902      	bls.n	8011c52 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011c4c:	7ffb      	ldrb	r3, [r7, #31]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c54:	7a1b      	ldrb	r3, [r3, #8]
 8011c56:	f003 0308 	and.w	r3, r3, #8
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d05d      	beq.n	8011d1a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8011c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c60:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011c62:	2b04      	cmp	r3, #4
 8011c64:	d003      	beq.n	8011c6e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8011c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c68:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8011c6a:	2b07      	cmp	r3, #7
 8011c6c:	d155      	bne.n	8011d1a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c6e:	4b0b      	ldr	r3, [pc, #44]	; (8011c9c <tcp_slowtmr+0x264>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011c7e:	4b11      	ldr	r3, [pc, #68]	; (8011cc4 <tcp_slowtmr+0x28c>)
 8011c80:	440b      	add	r3, r1
 8011c82:	4911      	ldr	r1, [pc, #68]	; (8011cc8 <tcp_slowtmr+0x290>)
 8011c84:	fba1 1303 	umull	r1, r3, r1, r3
 8011c88:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d91e      	bls.n	8011ccc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011c8e:	7ffb      	ldrb	r3, [r7, #31]
 8011c90:	3301      	adds	r3, #1
 8011c92:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011c94:	7fbb      	ldrb	r3, [r7, #30]
 8011c96:	3301      	adds	r3, #1
 8011c98:	77bb      	strb	r3, [r7, #30]
 8011c9a:	e03e      	b.n	8011d1a <tcp_slowtmr+0x2e2>
 8011c9c:	200101d0 	.word	0x200101d0
 8011ca0:	2000c802 	.word	0x2000c802
 8011ca4:	200101cc 	.word	0x200101cc
 8011ca8:	0801bba0 	.word	0x0801bba0
 8011cac:	0801bd74 	.word	0x0801bd74
 8011cb0:	0801bc00 	.word	0x0801bc00
 8011cb4:	0801bda0 	.word	0x0801bda0
 8011cb8:	0801bdcc 	.word	0x0801bdcc
 8011cbc:	0801d17c 	.word	0x0801d17c
 8011cc0:	0801d16c 	.word	0x0801d16c
 8011cc4:	000a4cb8 	.word	0x000a4cb8
 8011cc8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ccc:	4b97      	ldr	r3, [pc, #604]	; (8011f2c <tcp_slowtmr+0x4f4>)
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	6a1b      	ldr	r3, [r3, #32]
 8011cd4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	4b92      	ldr	r3, [pc, #584]	; (8011f30 <tcp_slowtmr+0x4f8>)
 8011ce6:	fb03 f300 	mul.w	r3, r3, r0
 8011cea:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011cec:	4991      	ldr	r1, [pc, #580]	; (8011f34 <tcp_slowtmr+0x4fc>)
 8011cee:	fba1 1303 	umull	r1, r3, r1, r3
 8011cf2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d910      	bls.n	8011d1a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8011cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cfa:	f004 fab4 	bl	8016266 <tcp_keepalive>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011d02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d107      	bne.n	8011d1a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011d10:	3301      	adds	r3, #1
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d16:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d016      	beq.n	8011d50 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011d22:	4b82      	ldr	r3, [pc, #520]	; (8011f2c <tcp_slowtmr+0x4f4>)
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	6a1b      	ldr	r3, [r3, #32]
 8011d2a:	1ad2      	subs	r2, r2, r3
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011d32:	4619      	mov	r1, r3
 8011d34:	460b      	mov	r3, r1
 8011d36:	005b      	lsls	r3, r3, #1
 8011d38:	440b      	add	r3, r1
 8011d3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d307      	bcc.n	8011d50 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 fa04 	bl	8012152 <tcp_segs_free>
      pcb->ooseq = NULL;
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	7d1b      	ldrb	r3, [r3, #20]
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d109      	bne.n	8011d6c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d58:	4b74      	ldr	r3, [pc, #464]	; (8011f2c <tcp_slowtmr+0x4f4>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	6a1b      	ldr	r3, [r3, #32]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	2b28      	cmp	r3, #40	; 0x28
 8011d64:	d902      	bls.n	8011d6c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011d66:	7ffb      	ldrb	r3, [r7, #31]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	7d1b      	ldrb	r3, [r3, #20]
 8011d70:	2b09      	cmp	r3, #9
 8011d72:	d109      	bne.n	8011d88 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011d74:	4b6d      	ldr	r3, [pc, #436]	; (8011f2c <tcp_slowtmr+0x4f4>)
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	6a1b      	ldr	r3, [r3, #32]
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	2bf0      	cmp	r3, #240	; 0xf0
 8011d80:	d902      	bls.n	8011d88 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011d82:	7ffb      	ldrb	r3, [r7, #31]
 8011d84:	3301      	adds	r3, #1
 8011d86:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011d88:	7ffb      	ldrb	r3, [r7, #31]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d05d      	beq.n	8011e4a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d94:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d98:	f000 fc44 	bl	8012624 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011d9c:	6a3b      	ldr	r3, [r7, #32]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d010      	beq.n	8011dc4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011da2:	4b65      	ldr	r3, [pc, #404]	; (8011f38 <tcp_slowtmr+0x500>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d106      	bne.n	8011dba <tcp_slowtmr+0x382>
 8011dac:	4b63      	ldr	r3, [pc, #396]	; (8011f3c <tcp_slowtmr+0x504>)
 8011dae:	f240 4289 	movw	r2, #1161	; 0x489
 8011db2:	4963      	ldr	r1, [pc, #396]	; (8011f40 <tcp_slowtmr+0x508>)
 8011db4:	4863      	ldr	r0, [pc, #396]	; (8011f44 <tcp_slowtmr+0x50c>)
 8011db6:	f007 fba3 	bl	8019500 <iprintf>
        prev->next = pcb->next;
 8011dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbc:	68da      	ldr	r2, [r3, #12]
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	60da      	str	r2, [r3, #12]
 8011dc2:	e00f      	b.n	8011de4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011dc4:	4b5c      	ldr	r3, [pc, #368]	; (8011f38 <tcp_slowtmr+0x500>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d006      	beq.n	8011ddc <tcp_slowtmr+0x3a4>
 8011dce:	4b5b      	ldr	r3, [pc, #364]	; (8011f3c <tcp_slowtmr+0x504>)
 8011dd0:	f240 428d 	movw	r2, #1165	; 0x48d
 8011dd4:	495c      	ldr	r1, [pc, #368]	; (8011f48 <tcp_slowtmr+0x510>)
 8011dd6:	485b      	ldr	r0, [pc, #364]	; (8011f44 <tcp_slowtmr+0x50c>)
 8011dd8:	f007 fb92 	bl	8019500 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	4a55      	ldr	r2, [pc, #340]	; (8011f38 <tcp_slowtmr+0x500>)
 8011de2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011de4:	7fbb      	ldrb	r3, [r7, #30]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d010      	beq.n	8011e0c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011df2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	1d1d      	adds	r5, r3, #4
 8011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfa:	8adb      	ldrh	r3, [r3, #22]
 8011dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dfe:	8b12      	ldrh	r2, [r2, #24]
 8011e00:	9201      	str	r2, [sp, #4]
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	462b      	mov	r3, r5
 8011e06:	4622      	mov	r2, r4
 8011e08:	f004 f8d8 	bl	8015fbc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	7d1b      	ldrb	r3, [r3, #20]
 8011e16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	2001      	movs	r0, #1
 8011e26:	f7fe f8f7 	bl	8010018 <memp_free>

      tcp_active_pcbs_changed = 0;
 8011e2a:	4b48      	ldr	r3, [pc, #288]	; (8011f4c <tcp_slowtmr+0x514>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d004      	beq.n	8011e40 <tcp_slowtmr+0x408>
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f06f 010c 	mvn.w	r1, #12
 8011e3c:	68b8      	ldr	r0, [r7, #8]
 8011e3e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011e40:	4b42      	ldr	r3, [pc, #264]	; (8011f4c <tcp_slowtmr+0x514>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d035      	beq.n	8011eb4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011e48:	e606      	b.n	8011a58 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	7edb      	ldrb	r3, [r3, #27]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	6a3b      	ldr	r3, [r7, #32]
 8011e5e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011e60:	6a3b      	ldr	r3, [r7, #32]
 8011e62:	7eda      	ldrb	r2, [r3, #27]
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	7f1b      	ldrb	r3, [r3, #28]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d323      	bcc.n	8011eb4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011e72:	4b36      	ldr	r3, [pc, #216]	; (8011f4c <tcp_slowtmr+0x514>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011e78:	6a3b      	ldr	r3, [r7, #32]
 8011e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d00a      	beq.n	8011e98 <tcp_slowtmr+0x460>
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e88:	6a3a      	ldr	r2, [r7, #32]
 8011e8a:	6912      	ldr	r2, [r2, #16]
 8011e8c:	6a39      	ldr	r1, [r7, #32]
 8011e8e:	4610      	mov	r0, r2
 8011e90:	4798      	blx	r3
 8011e92:	4603      	mov	r3, r0
 8011e94:	777b      	strb	r3, [r7, #29]
 8011e96:	e001      	b.n	8011e9c <tcp_slowtmr+0x464>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011e9c:	4b2b      	ldr	r3, [pc, #172]	; (8011f4c <tcp_slowtmr+0x514>)
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d000      	beq.n	8011ea6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011ea4:	e5d8      	b.n	8011a58 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011ea6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d102      	bne.n	8011eb4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8011eae:	6a38      	ldr	r0, [r7, #32]
 8011eb0:	f003 fdfa 	bl	8015aa8 <tcp_output>
  while (pcb != NULL) {
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f47f add4 	bne.w	8011a64 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011ec0:	4b23      	ldr	r3, [pc, #140]	; (8011f50 <tcp_slowtmr+0x518>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011ec6:	e068      	b.n	8011f9a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	7d1b      	ldrb	r3, [r3, #20]
 8011ecc:	2b0a      	cmp	r3, #10
 8011ece:	d006      	beq.n	8011ede <tcp_slowtmr+0x4a6>
 8011ed0:	4b1a      	ldr	r3, [pc, #104]	; (8011f3c <tcp_slowtmr+0x504>)
 8011ed2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011ed6:	491f      	ldr	r1, [pc, #124]	; (8011f54 <tcp_slowtmr+0x51c>)
 8011ed8:	481a      	ldr	r0, [pc, #104]	; (8011f44 <tcp_slowtmr+0x50c>)
 8011eda:	f007 fb11 	bl	8019500 <iprintf>
    pcb_remove = 0;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <tcp_slowtmr+0x4f4>)
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	6a1b      	ldr	r3, [r3, #32]
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	2bf0      	cmp	r3, #240	; 0xf0
 8011eee:	d902      	bls.n	8011ef6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8011ef0:	7ffb      	ldrb	r3, [r7, #31]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011ef6:	7ffb      	ldrb	r3, [r7, #31]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d049      	beq.n	8011f90 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011efe:	f000 fb91 	bl	8012624 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011f02:	6a3b      	ldr	r3, [r7, #32]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d029      	beq.n	8011f5c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011f08:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <tcp_slowtmr+0x518>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d106      	bne.n	8011f20 <tcp_slowtmr+0x4e8>
 8011f12:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <tcp_slowtmr+0x504>)
 8011f14:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8011f18:	490f      	ldr	r1, [pc, #60]	; (8011f58 <tcp_slowtmr+0x520>)
 8011f1a:	480a      	ldr	r0, [pc, #40]	; (8011f44 <tcp_slowtmr+0x50c>)
 8011f1c:	f007 faf0 	bl	8019500 <iprintf>
        prev->next = pcb->next;
 8011f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f22:	68da      	ldr	r2, [r3, #12]
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	60da      	str	r2, [r3, #12]
 8011f28:	e028      	b.n	8011f7c <tcp_slowtmr+0x544>
 8011f2a:	bf00      	nop
 8011f2c:	200101d0 	.word	0x200101d0
 8011f30:	000124f8 	.word	0x000124f8
 8011f34:	10624dd3 	.word	0x10624dd3
 8011f38:	200101cc 	.word	0x200101cc
 8011f3c:	0801bba0 	.word	0x0801bba0
 8011f40:	0801bdfc 	.word	0x0801bdfc
 8011f44:	0801bc00 	.word	0x0801bc00
 8011f48:	0801be28 	.word	0x0801be28
 8011f4c:	200101c8 	.word	0x200101c8
 8011f50:	200101dc 	.word	0x200101dc
 8011f54:	0801be54 	.word	0x0801be54
 8011f58:	0801be84 	.word	0x0801be84
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011f5c:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <tcp_slowtmr+0x570>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d006      	beq.n	8011f74 <tcp_slowtmr+0x53c>
 8011f66:	4b11      	ldr	r3, [pc, #68]	; (8011fac <tcp_slowtmr+0x574>)
 8011f68:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8011f6c:	4910      	ldr	r1, [pc, #64]	; (8011fb0 <tcp_slowtmr+0x578>)
 8011f6e:	4811      	ldr	r0, [pc, #68]	; (8011fb4 <tcp_slowtmr+0x57c>)
 8011f70:	f007 fac6 	bl	8019500 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	4a0b      	ldr	r2, [pc, #44]	; (8011fa8 <tcp_slowtmr+0x570>)
 8011f7a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011f86:	69b9      	ldr	r1, [r7, #24]
 8011f88:	2001      	movs	r0, #1
 8011f8a:	f7fe f845 	bl	8010018 <memp_free>
 8011f8e:	e004      	b.n	8011f9a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d193      	bne.n	8011ec8 <tcp_slowtmr+0x490>
    }
  }
}
 8011fa0:	bf00      	nop
 8011fa2:	3728      	adds	r7, #40	; 0x28
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8011fa8:	200101dc 	.word	0x200101dc
 8011fac:	0801bba0 	.word	0x0801bba0
 8011fb0:	0801beac 	.word	0x0801beac
 8011fb4:	0801bc00 	.word	0x0801bc00

08011fb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011fbe:	4b2d      	ldr	r3, [pc, #180]	; (8012074 <tcp_fasttmr+0xbc>)
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	b2da      	uxtb	r2, r3
 8011fc6:	4b2b      	ldr	r3, [pc, #172]	; (8012074 <tcp_fasttmr+0xbc>)
 8011fc8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011fca:	4b2b      	ldr	r3, [pc, #172]	; (8012078 <tcp_fasttmr+0xc0>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011fd0:	e048      	b.n	8012064 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	7f5a      	ldrb	r2, [r3, #29]
 8011fd6:	4b27      	ldr	r3, [pc, #156]	; (8012074 <tcp_fasttmr+0xbc>)
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d03f      	beq.n	801205e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011fde:	4b25      	ldr	r3, [pc, #148]	; (8012074 <tcp_fasttmr+0xbc>)
 8011fe0:	781a      	ldrb	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7e9b      	ldrb	r3, [r3, #26]
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d010      	beq.n	8012014 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	7e9b      	ldrb	r3, [r3, #26]
 8011ff6:	f043 0302 	orr.w	r3, r3, #2
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f003 fd51 	bl	8015aa8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	7e9b      	ldrb	r3, [r3, #26]
 801200a:	f023 0303 	bic.w	r3, r3, #3
 801200e:	b2da      	uxtb	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	7e9b      	ldrb	r3, [r3, #26]
 8012018:	f003 0308 	and.w	r3, r3, #8
 801201c:	2b00      	cmp	r3, #0
 801201e:	d009      	beq.n	8012034 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	7e9b      	ldrb	r3, [r3, #26]
 8012024:	f023 0308 	bic.w	r3, r3, #8
 8012028:	b2da      	uxtb	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7ff f958 	bl	80112e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801203e:	2b00      	cmp	r3, #0
 8012040:	d00a      	beq.n	8012058 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012042:	4b0e      	ldr	r3, [pc, #56]	; (801207c <tcp_fasttmr+0xc4>)
 8012044:	2200      	movs	r2, #0
 8012046:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 f819 	bl	8012080 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801204e:	4b0b      	ldr	r3, [pc, #44]	; (801207c <tcp_fasttmr+0xc4>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d000      	beq.n	8012058 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012056:	e7b8      	b.n	8011fca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	607b      	str	r3, [r7, #4]
 801205c:	e002      	b.n	8012064 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1b3      	bne.n	8011fd2 <tcp_fasttmr+0x1a>
    }
  }
}
 801206a:	bf00      	nop
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	2000c802 	.word	0x2000c802
 8012078:	200101cc 	.word	0x200101cc
 801207c:	200101c8 	.word	0x200101c8

08012080 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012080:	b590      	push	{r4, r7, lr}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801208c:	7b5b      	ldrb	r3, [r3, #13]
 801208e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012094:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00b      	beq.n	80120be <tcp_process_refused_data+0x3e>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6918      	ldr	r0, [r3, #16]
 80120b0:	2300      	movs	r3, #0
 80120b2:	68ba      	ldr	r2, [r7, #8]
 80120b4:	6879      	ldr	r1, [r7, #4]
 80120b6:	47a0      	blx	r4
 80120b8:	4603      	mov	r3, r0
 80120ba:	73fb      	strb	r3, [r7, #15]
 80120bc:	e007      	b.n	80120ce <tcp_process_refused_data+0x4e>
 80120be:	2300      	movs	r3, #0
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	2000      	movs	r0, #0
 80120c6:	f000 f88c 	bl	80121e2 <tcp_recv_null>
 80120ca:	4603      	mov	r3, r0
 80120cc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80120ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d12a      	bne.n	801212c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80120d6:	7bbb      	ldrb	r3, [r7, #14]
 80120d8:	f003 0320 	and.w	r3, r3, #32
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d033      	beq.n	8012148 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80120e8:	d005      	beq.n	80120f6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120ee:	3301      	adds	r3, #1
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00b      	beq.n	8012118 <tcp_process_refused_data+0x98>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6918      	ldr	r0, [r3, #16]
 801210a:	2300      	movs	r3, #0
 801210c:	2200      	movs	r2, #0
 801210e:	6879      	ldr	r1, [r7, #4]
 8012110:	47a0      	blx	r4
 8012112:	4603      	mov	r3, r0
 8012114:	73fb      	strb	r3, [r7, #15]
 8012116:	e001      	b.n	801211c <tcp_process_refused_data+0x9c>
 8012118:	2300      	movs	r3, #0
 801211a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012120:	f113 0f0d 	cmn.w	r3, #13
 8012124:	d110      	bne.n	8012148 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8012126:	f06f 030c 	mvn.w	r3, #12
 801212a:	e00e      	b.n	801214a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012130:	f113 0f0d 	cmn.w	r3, #13
 8012134:	d102      	bne.n	801213c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012136:	f06f 030c 	mvn.w	r3, #12
 801213a:	e006      	b.n	801214a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8012142:	f06f 0304 	mvn.w	r3, #4
 8012146:	e000      	b.n	801214a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3714      	adds	r7, #20
 801214e:	46bd      	mov	sp, r7
 8012150:	bd90      	pop	{r4, r7, pc}

08012152 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b084      	sub	sp, #16
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801215a:	e007      	b.n	801216c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 f809 	bl	801217a <tcp_seg_free>
    seg = next;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d1f4      	bne.n	801215c <tcp_segs_free+0xa>
  }
}
 8012172:	bf00      	nop
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801217a:	b580      	push	{r7, lr}
 801217c:	b082      	sub	sp, #8
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d00c      	beq.n	80121a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d004      	beq.n	801219a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fcd7 	bl	8010b48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	2003      	movs	r0, #3
 801219e:	f7fd ff3b 	bl	8010018 <memp_free>
  }
}
 80121a2:	bf00      	nop
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b084      	sub	sp, #16
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80121b2:	2003      	movs	r0, #3
 80121b4:	f7fd feba 	bl	800ff2c <memp_malloc>
 80121b8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d101      	bne.n	80121c4 <tcp_seg_copy+0x1a>
    return NULL;
 80121c0:	2300      	movs	r3, #0
 80121c2:	e00a      	b.n	80121da <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80121c4:	2210      	movs	r2, #16
 80121c6:	6879      	ldr	r1, [r7, #4]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f007 f986 	bl	80194da <memcpy>
  pbuf_ref(cseg->p);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fe fd6a 	bl	8010cac <pbuf_ref>
  return cseg;
 80121d8:	68fb      	ldr	r3, [r7, #12]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	60f8      	str	r0, [r7, #12]
 80121ea:	60b9      	str	r1, [r7, #8]
 80121ec:	607a      	str	r2, [r7, #4]
 80121ee:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d009      	beq.n	801220a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	891b      	ldrh	r3, [r3, #8]
 80121fa:	4619      	mov	r1, r3
 80121fc:	68b8      	ldr	r0, [r7, #8]
 80121fe:	f7ff fb7d 	bl	80118fc <tcp_recved>
    pbuf_free(p);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7fe fca0 	bl	8010b48 <pbuf_free>
 8012208:	e008      	b.n	801221c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801220a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d104      	bne.n	801221c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8012212:	68b8      	ldr	r0, [r7, #8]
 8012214:	f7ff f8cc 	bl	80113b0 <tcp_close>
 8012218:	4603      	mov	r3, r0
 801221a:	e000      	b.n	801221e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801221c:	2300      	movs	r3, #0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
	...

08012228 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af00      	add	r7, sp, #0
 801222e:	4603      	mov	r3, r0
 8012230:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012236:	2b00      	cmp	r3, #0
 8012238:	db01      	blt.n	801223e <tcp_kill_prio+0x16>
 801223a:	79fb      	ldrb	r3, [r7, #7]
 801223c:	e000      	b.n	8012240 <tcp_kill_prio+0x18>
 801223e:	237f      	movs	r3, #127	; 0x7f
 8012240:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801224a:	4b16      	ldr	r3, [pc, #88]	; (80122a4 <tcp_kill_prio+0x7c>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	e01a      	b.n	8012288 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	7d5b      	ldrb	r3, [r3, #21]
 8012256:	7afa      	ldrb	r2, [r7, #11]
 8012258:	429a      	cmp	r2, r3
 801225a:	d312      	bcc.n	8012282 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801225c:	4b12      	ldr	r3, [pc, #72]	; (80122a8 <tcp_kill_prio+0x80>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	6a1b      	ldr	r3, [r3, #32]
 8012264:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	429a      	cmp	r2, r3
 801226a:	d80a      	bhi.n	8012282 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801226c:	4b0e      	ldr	r3, [pc, #56]	; (80122a8 <tcp_kill_prio+0x80>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	6a1b      	ldr	r3, [r3, #32]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	7d5b      	ldrb	r3, [r3, #21]
 8012280:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	617b      	str	r3, [r7, #20]
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1e1      	bne.n	8012252 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d002      	beq.n	801229a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012294:	6938      	ldr	r0, [r7, #16]
 8012296:	f7ff f99d 	bl	80115d4 <tcp_abort>
  }
}
 801229a:	bf00      	nop
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200101cc 	.word	0x200101cc
 80122a8:	200101d0 	.word	0x200101d0

080122ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	4603      	mov	r3, r0
 80122b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80122b6:	79fb      	ldrb	r3, [r7, #7]
 80122b8:	2b08      	cmp	r3, #8
 80122ba:	d009      	beq.n	80122d0 <tcp_kill_state+0x24>
 80122bc:	79fb      	ldrb	r3, [r7, #7]
 80122be:	2b09      	cmp	r3, #9
 80122c0:	d006      	beq.n	80122d0 <tcp_kill_state+0x24>
 80122c2:	4b1a      	ldr	r3, [pc, #104]	; (801232c <tcp_kill_state+0x80>)
 80122c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80122c8:	4919      	ldr	r1, [pc, #100]	; (8012330 <tcp_kill_state+0x84>)
 80122ca:	481a      	ldr	r0, [pc, #104]	; (8012334 <tcp_kill_state+0x88>)
 80122cc:	f007 f918 	bl	8019500 <iprintf>

  inactivity = 0;
 80122d0:	2300      	movs	r3, #0
 80122d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80122d4:	2300      	movs	r3, #0
 80122d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d8:	4b17      	ldr	r3, [pc, #92]	; (8012338 <tcp_kill_state+0x8c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	617b      	str	r3, [r7, #20]
 80122de:	e017      	b.n	8012310 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	7d1b      	ldrb	r3, [r3, #20]
 80122e4:	79fa      	ldrb	r2, [r7, #7]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d10f      	bne.n	801230a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122ea:	4b14      	ldr	r3, [pc, #80]	; (801233c <tcp_kill_state+0x90>)
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	6a1b      	ldr	r3, [r3, #32]
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	68fa      	ldr	r2, [r7, #12]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d807      	bhi.n	801230a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80122fa:	4b10      	ldr	r3, [pc, #64]	; (801233c <tcp_kill_state+0x90>)
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	6a1b      	ldr	r3, [r3, #32]
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1e4      	bne.n	80122e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d003      	beq.n	8012324 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801231c:	2100      	movs	r1, #0
 801231e:	6938      	ldr	r0, [r7, #16]
 8012320:	f7ff f8a6 	bl	8011470 <tcp_abandon>
  }
}
 8012324:	bf00      	nop
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	0801bba0 	.word	0x0801bba0
 8012330:	0801bed4 	.word	0x0801bed4
 8012334:	0801bc00 	.word	0x0801bc00
 8012338:	200101cc 	.word	0x200101cc
 801233c:	200101d0 	.word	0x200101d0

08012340 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801234a:	2300      	movs	r3, #0
 801234c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801234e:	4b12      	ldr	r3, [pc, #72]	; (8012398 <tcp_kill_timewait+0x58>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	60fb      	str	r3, [r7, #12]
 8012354:	e012      	b.n	801237c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012356:	4b11      	ldr	r3, [pc, #68]	; (801239c <tcp_kill_timewait+0x5c>)
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6a1b      	ldr	r3, [r3, #32]
 801235e:	1ad3      	subs	r3, r2, r3
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	429a      	cmp	r2, r3
 8012364:	d807      	bhi.n	8012376 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012366:	4b0d      	ldr	r3, [pc, #52]	; (801239c <tcp_kill_timewait+0x5c>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6a1b      	ldr	r3, [r3, #32]
 801236e:	1ad3      	subs	r3, r2, r3
 8012370:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	60fb      	str	r3, [r7, #12]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1e9      	bne.n	8012356 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d002      	beq.n	801238e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012388:	68b8      	ldr	r0, [r7, #8]
 801238a:	f7ff f923 	bl	80115d4 <tcp_abort>
  }
}
 801238e:	bf00      	nop
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	200101dc 	.word	0x200101dc
 801239c:	200101d0 	.word	0x200101d0

080123a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123aa:	2001      	movs	r0, #1
 80123ac:	f7fd fdbe 	bl	800ff2c <memp_malloc>
 80123b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d124      	bne.n	8012402 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80123b8:	f7ff ffc2 	bl	8012340 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123bc:	2001      	movs	r0, #1
 80123be:	f7fd fdb5 	bl	800ff2c <memp_malloc>
 80123c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d11b      	bne.n	8012402 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80123ca:	2009      	movs	r0, #9
 80123cc:	f7ff ff6e 	bl	80122ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123d0:	2001      	movs	r0, #1
 80123d2:	f7fd fdab 	bl	800ff2c <memp_malloc>
 80123d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d111      	bne.n	8012402 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80123de:	2008      	movs	r0, #8
 80123e0:	f7ff ff64 	bl	80122ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123e4:	2001      	movs	r0, #1
 80123e6:	f7fd fda1 	bl	800ff2c <memp_malloc>
 80123ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d107      	bne.n	8012402 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80123f2:	79fb      	ldrb	r3, [r7, #7]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff ff17 	bl	8012228 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123fa:	2001      	movs	r0, #1
 80123fc:	f7fd fd96 	bl	800ff2c <memp_malloc>
 8012400:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d03f      	beq.n	8012488 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012408:	2298      	movs	r2, #152	; 0x98
 801240a:	2100      	movs	r1, #0
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f007 f86f 	bl	80194f0 <memset>
    pcb->prio = prio;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	79fa      	ldrb	r2, [r7, #7]
 8012416:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801241e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012428:	855a      	strh	r2, [r3, #42]	; 0x2a
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	22ff      	movs	r2, #255	; 0xff
 8012436:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801243e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2206      	movs	r2, #6
 8012444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2206      	movs	r2, #6
 801244c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012454:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2201      	movs	r2, #1
 801245a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801245e:	4b0d      	ldr	r3, [pc, #52]	; (8012494 <tcp_alloc+0xf4>)
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012466:	4b0c      	ldr	r3, [pc, #48]	; (8012498 <tcp_alloc+0xf8>)
 8012468:	781a      	ldrb	r2, [r3, #0]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012474:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4a08      	ldr	r2, [pc, #32]	; (801249c <tcp_alloc+0xfc>)
 801247c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	4a07      	ldr	r2, [pc, #28]	; (80124a0 <tcp_alloc+0x100>)
 8012484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012488:	68fb      	ldr	r3, [r7, #12]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	200101d0 	.word	0x200101d0
 8012498:	2000c802 	.word	0x2000c802
 801249c:	080121e3 	.word	0x080121e3
 80124a0:	006ddd00 	.word	0x006ddd00

080124a4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	4603      	mov	r3, r0
 80124ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80124ae:	2040      	movs	r0, #64	; 0x40
 80124b0:	f7ff ff76 	bl	80123a0 <tcp_alloc>
 80124b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80124b6:	68fb      	ldr	r3, [r7, #12]
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3710      	adds	r7, #16
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	611a      	str	r2, [r3, #16]
  }
}
 80124d6:	bf00      	nop
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr
	...

080124e4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d00e      	beq.n	8012512 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	7d1b      	ldrb	r3, [r3, #20]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d106      	bne.n	801250a <tcp_recv+0x26>
 80124fc:	4b07      	ldr	r3, [pc, #28]	; (801251c <tcp_recv+0x38>)
 80124fe:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8012502:	4907      	ldr	r1, [pc, #28]	; (8012520 <tcp_recv+0x3c>)
 8012504:	4807      	ldr	r0, [pc, #28]	; (8012524 <tcp_recv+0x40>)
 8012506:	f006 fffb 	bl	8019500 <iprintf>
    pcb->recv = recv;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	683a      	ldr	r2, [r7, #0]
 801250e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012512:	bf00      	nop
 8012514:	3708      	adds	r7, #8
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	0801bba0 	.word	0x0801bba0
 8012520:	0801bee4 	.word	0x0801bee4
 8012524:	0801bc00 	.word	0x0801bc00

08012528 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00d      	beq.n	8012554 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	7d1b      	ldrb	r3, [r3, #20]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d106      	bne.n	801254e <tcp_sent+0x26>
 8012540:	4b06      	ldr	r3, [pc, #24]	; (801255c <tcp_sent+0x34>)
 8012542:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8012546:	4906      	ldr	r1, [pc, #24]	; (8012560 <tcp_sent+0x38>)
 8012548:	4806      	ldr	r0, [pc, #24]	; (8012564 <tcp_sent+0x3c>)
 801254a:	f006 ffd9 	bl	8019500 <iprintf>
    pcb->sent = sent;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	683a      	ldr	r2, [r7, #0]
 8012552:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	0801bba0 	.word	0x0801bba0
 8012560:	0801bf0c 	.word	0x0801bf0c
 8012564:	0801bc00 	.word	0x0801bc00

08012568 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d00e      	beq.n	8012596 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	7d1b      	ldrb	r3, [r3, #20]
 801257c:	2b01      	cmp	r3, #1
 801257e:	d106      	bne.n	801258e <tcp_err+0x26>
 8012580:	4b07      	ldr	r3, [pc, #28]	; (80125a0 <tcp_err+0x38>)
 8012582:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8012586:	4907      	ldr	r1, [pc, #28]	; (80125a4 <tcp_err+0x3c>)
 8012588:	4807      	ldr	r0, [pc, #28]	; (80125a8 <tcp_err+0x40>)
 801258a:	f006 ffb9 	bl	8019500 <iprintf>
    pcb->errf = err;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	683a      	ldr	r2, [r7, #0]
 8012592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8012596:	bf00      	nop
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	0801bba0 	.word	0x0801bba0
 80125a4:	0801bf34 	.word	0x0801bf34
 80125a8:	0801bc00 	.word	0x0801bc00

080125ac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d008      	beq.n	80125ce <tcp_accept+0x22>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7d1b      	ldrb	r3, [r3, #20]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d104      	bne.n	80125ce <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	683a      	ldr	r2, [r7, #0]
 80125cc:	619a      	str	r2, [r3, #24]
  }
}
 80125ce:	bf00      	nop
 80125d0:	3714      	adds	r7, #20
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
	...

080125dc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	4613      	mov	r3, r2
 80125e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	7d1b      	ldrb	r3, [r3, #20]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d106      	bne.n	8012600 <tcp_poll+0x24>
 80125f2:	4b09      	ldr	r3, [pc, #36]	; (8012618 <tcp_poll+0x3c>)
 80125f4:	f240 7203 	movw	r2, #1795	; 0x703
 80125f8:	4908      	ldr	r1, [pc, #32]	; (801261c <tcp_poll+0x40>)
 80125fa:	4809      	ldr	r0, [pc, #36]	; (8012620 <tcp_poll+0x44>)
 80125fc:	f006 ff80 	bl	8019500 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	79fa      	ldrb	r2, [r7, #7]
 801260c:	771a      	strb	r2, [r3, #28]
}
 801260e:	bf00      	nop
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	0801bba0 	.word	0x0801bba0
 801261c:	0801bf5c 	.word	0x0801bf5c
 8012620:	0801bc00 	.word	0x0801bc00

08012624 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	7d1b      	ldrb	r3, [r3, #20]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d034      	beq.n	801269e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012638:	2b0a      	cmp	r3, #10
 801263a:	d030      	beq.n	801269e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012640:	2b01      	cmp	r3, #1
 8012642:	d02c      	beq.n	801269e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012648:	2b00      	cmp	r3, #0
 801264a:	d007      	beq.n	801265c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012650:	4618      	mov	r0, r3
 8012652:	f7fe fa79 	bl	8010b48 <pbuf_free>
      pcb->refused_data = NULL;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2200      	movs	r2, #0
 801265a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012660:	4618      	mov	r0, r3
 8012662:	f7ff fd76 	bl	8012152 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2200      	movs	r2, #0
 801266a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012672:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012678:	4618      	mov	r0, r3
 801267a:	f7ff fd6a 	bl	8012152 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012682:	4618      	mov	r0, r3
 8012684:	f7ff fd65 	bl	8012152 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	669a      	str	r2, [r3, #104]	; 0x68
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2200      	movs	r2, #0
 801269a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801269e:	bf00      	nop
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
	...

080126a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d105      	bne.n	80126c8 <tcp_pcb_remove+0x20>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68da      	ldr	r2, [r3, #12]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	601a      	str	r2, [r3, #0]
 80126c6:	e013      	b.n	80126f0 <tcp_pcb_remove+0x48>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	60fb      	str	r3, [r7, #12]
 80126ce:	e00c      	b.n	80126ea <tcp_pcb_remove+0x42>
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d104      	bne.n	80126e4 <tcp_pcb_remove+0x3c>
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	68da      	ldr	r2, [r3, #12]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	60da      	str	r2, [r3, #12]
 80126e2:	e005      	b.n	80126f0 <tcp_pcb_remove+0x48>
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1ef      	bne.n	80126d0 <tcp_pcb_remove+0x28>
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	2200      	movs	r2, #0
 80126f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80126f6:	6838      	ldr	r0, [r7, #0]
 80126f8:	f7ff ff94 	bl	8012624 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	7d1b      	ldrb	r3, [r3, #20]
 8012700:	2b0a      	cmp	r3, #10
 8012702:	d013      	beq.n	801272c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012708:	2b01      	cmp	r3, #1
 801270a:	d00f      	beq.n	801272c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	7e9b      	ldrb	r3, [r3, #26]
 8012710:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8012714:	2b00      	cmp	r3, #0
 8012716:	d009      	beq.n	801272c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	7e9b      	ldrb	r3, [r3, #26]
 801271c:	f043 0302 	orr.w	r3, r3, #2
 8012720:	b2da      	uxtb	r2, r3
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012726:	6838      	ldr	r0, [r7, #0]
 8012728:	f003 f9be 	bl	8015aa8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	2b01      	cmp	r3, #1
 8012732:	d020      	beq.n	8012776 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012738:	2b00      	cmp	r3, #0
 801273a:	d006      	beq.n	801274a <tcp_pcb_remove+0xa2>
 801273c:	4b13      	ldr	r3, [pc, #76]	; (801278c <tcp_pcb_remove+0xe4>)
 801273e:	f240 7253 	movw	r2, #1875	; 0x753
 8012742:	4913      	ldr	r1, [pc, #76]	; (8012790 <tcp_pcb_remove+0xe8>)
 8012744:	4813      	ldr	r0, [pc, #76]	; (8012794 <tcp_pcb_remove+0xec>)
 8012746:	f006 fedb 	bl	8019500 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801274e:	2b00      	cmp	r3, #0
 8012750:	d006      	beq.n	8012760 <tcp_pcb_remove+0xb8>
 8012752:	4b0e      	ldr	r3, [pc, #56]	; (801278c <tcp_pcb_remove+0xe4>)
 8012754:	f240 7254 	movw	r2, #1876	; 0x754
 8012758:	490f      	ldr	r1, [pc, #60]	; (8012798 <tcp_pcb_remove+0xf0>)
 801275a:	480e      	ldr	r0, [pc, #56]	; (8012794 <tcp_pcb_remove+0xec>)
 801275c:	f006 fed0 	bl	8019500 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012764:	2b00      	cmp	r3, #0
 8012766:	d006      	beq.n	8012776 <tcp_pcb_remove+0xce>
 8012768:	4b08      	ldr	r3, [pc, #32]	; (801278c <tcp_pcb_remove+0xe4>)
 801276a:	f240 7256 	movw	r2, #1878	; 0x756
 801276e:	490b      	ldr	r1, [pc, #44]	; (801279c <tcp_pcb_remove+0xf4>)
 8012770:	4808      	ldr	r0, [pc, #32]	; (8012794 <tcp_pcb_remove+0xec>)
 8012772:	f006 fec5 	bl	8019500 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	2200      	movs	r2, #0
 801277a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2200      	movs	r2, #0
 8012780:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012782:	bf00      	nop
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	0801bba0 	.word	0x0801bba0
 8012790:	0801bf7c 	.word	0x0801bf7c
 8012794:	0801bc00 	.word	0x0801bc00
 8012798:	0801bf94 	.word	0x0801bf94
 801279c:	0801bfb0 	.word	0x0801bfb0

080127a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80127a8:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <tcp_next_iss+0x28>)
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	4b07      	ldr	r3, [pc, #28]	; (80127cc <tcp_next_iss+0x2c>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4413      	add	r3, r2
 80127b2:	4a05      	ldr	r2, [pc, #20]	; (80127c8 <tcp_next_iss+0x28>)
 80127b4:	6013      	str	r3, [r2, #0]
  return iss;
 80127b6:	4b04      	ldr	r3, [pc, #16]	; (80127c8 <tcp_next_iss+0x28>)
 80127b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	2000002c 	.word	0x2000002c
 80127cc:	200101d0 	.word	0x200101d0

080127d0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	4603      	mov	r3, r0
 80127d8:	6039      	str	r1, [r7, #0]
 80127da:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80127dc:	6838      	ldr	r0, [r7, #0]
 80127de:	f005 faed 	bl	8017dbc <ip4_route>
 80127e2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d101      	bne.n	80127ee <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80127ea:	88fb      	ldrh	r3, [r7, #6]
 80127ec:	e010      	b.n	8012810 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80127f2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80127f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d008      	beq.n	801280e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80127fc:	897b      	ldrh	r3, [r7, #10]
 80127fe:	3b28      	subs	r3, #40	; 0x28
 8012800:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012802:	893a      	ldrh	r2, [r7, #8]
 8012804:	88fb      	ldrh	r3, [r7, #6]
 8012806:	4293      	cmp	r3, r2
 8012808:	bf28      	it	cs
 801280a:	4613      	movcs	r3, r2
 801280c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801280e:	88fb      	ldrh	r3, [r7, #6]
}
 8012810:	4618      	mov	r0, r3
 8012812:	3710      	adds	r7, #16
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012826:	e011      	b.n	801284c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	429a      	cmp	r2, r3
 8012832:	d108      	bne.n	8012846 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7fe feca 	bl	80115d4 <tcp_abort>
      pcb = next;
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	60fb      	str	r3, [r7, #12]
 8012844:	e002      	b.n	801284c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1ea      	bne.n	8012828 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012852:	bf00      	nop
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d02c      	beq.n	80128c6 <tcp_netif_ip_addr_changed+0x6a>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d028      	beq.n	80128c6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012874:	4b16      	ldr	r3, [pc, #88]	; (80128d0 <tcp_netif_ip_addr_changed+0x74>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	4619      	mov	r1, r3
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7ff ffcc 	bl	8012818 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012880:	4b14      	ldr	r3, [pc, #80]	; (80128d4 <tcp_netif_ip_addr_changed+0x78>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4619      	mov	r1, r3
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff ffc6 	bl	8012818 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d019      	beq.n	80128c6 <tcp_netif_ip_addr_changed+0x6a>
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d015      	beq.n	80128c6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801289a:	4b0f      	ldr	r3, [pc, #60]	; (80128d8 <tcp_netif_ip_addr_changed+0x7c>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	60fb      	str	r3, [r7, #12]
 80128a0:	e00e      	b.n	80128c0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d103      	bne.n	80128bc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1ed      	bne.n	80128a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80128c6:	bf00      	nop
 80128c8:	3710      	adds	r7, #16
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	200101cc 	.word	0x200101cc
 80128d4:	200101d8 	.word	0x200101d8
 80128d8:	200101d4 	.word	0x200101d4

080128dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80128dc:	b590      	push	{r4, r7, lr}
 80128de:	b08b      	sub	sp, #44	; 0x2c
 80128e0:	af02      	add	r7, sp, #8
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4a82      	ldr	r2, [pc, #520]	; (8012af4 <tcp_input+0x218>)
 80128ec:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	895b      	ldrh	r3, [r3, #10]
 80128f2:	2b13      	cmp	r3, #19
 80128f4:	f240 838a 	bls.w	801300c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128f8:	4b7f      	ldr	r3, [pc, #508]	; (8012af8 <tcp_input+0x21c>)
 80128fa:	695a      	ldr	r2, [r3, #20]
 80128fc:	4b7e      	ldr	r3, [pc, #504]	; (8012af8 <tcp_input+0x21c>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4619      	mov	r1, r3
 8012902:	4610      	mov	r0, r2
 8012904:	f005 fcd4 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	f040 8380 	bne.w	8013010 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012910:	4b79      	ldr	r3, [pc, #484]	; (8012af8 <tcp_input+0x21c>)
 8012912:	695b      	ldr	r3, [r3, #20]
 8012914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012918:	2be0      	cmp	r3, #224	; 0xe0
 801291a:	f000 8379 	beq.w	8013010 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801291e:	4b75      	ldr	r3, [pc, #468]	; (8012af4 <tcp_input+0x218>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	899b      	ldrh	r3, [r3, #12]
 8012924:	b29b      	uxth	r3, r3
 8012926:	4618      	mov	r0, r3
 8012928:	f7fc fef4 	bl	800f714 <lwip_htons>
 801292c:	4603      	mov	r3, r0
 801292e:	0b1b      	lsrs	r3, r3, #12
 8012930:	b29b      	uxth	r3, r3
 8012932:	b2db      	uxtb	r3, r3
 8012934:	009b      	lsls	r3, r3, #2
 8012936:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012938:	7cbb      	ldrb	r3, [r7, #18]
 801293a:	2b13      	cmp	r3, #19
 801293c:	f240 8368 	bls.w	8013010 <tcp_input+0x734>
 8012940:	7cbb      	ldrb	r3, [r7, #18]
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	891b      	ldrh	r3, [r3, #8]
 8012948:	429a      	cmp	r2, r3
 801294a:	f200 8361 	bhi.w	8013010 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801294e:	7cbb      	ldrb	r3, [r7, #18]
 8012950:	b29b      	uxth	r3, r3
 8012952:	3b14      	subs	r3, #20
 8012954:	b29a      	uxth	r2, r3
 8012956:	4b69      	ldr	r3, [pc, #420]	; (8012afc <tcp_input+0x220>)
 8012958:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801295a:	4b69      	ldr	r3, [pc, #420]	; (8012b00 <tcp_input+0x224>)
 801295c:	2200      	movs	r2, #0
 801295e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	895a      	ldrh	r2, [r3, #10]
 8012964:	7cbb      	ldrb	r3, [r7, #18]
 8012966:	b29b      	uxth	r3, r3
 8012968:	429a      	cmp	r2, r3
 801296a:	d30d      	bcc.n	8012988 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801296c:	4b63      	ldr	r3, [pc, #396]	; (8012afc <tcp_input+0x220>)
 801296e:	881a      	ldrh	r2, [r3, #0]
 8012970:	4b64      	ldr	r3, [pc, #400]	; (8012b04 <tcp_input+0x228>)
 8012972:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8012974:	7cbb      	ldrb	r3, [r7, #18]
 8012976:	b29b      	uxth	r3, r3
 8012978:	425b      	negs	r3, r3
 801297a:	b29b      	uxth	r3, r3
 801297c:	b21b      	sxth	r3, r3
 801297e:	4619      	mov	r1, r3
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7fe f8bd 	bl	8010b00 <pbuf_header>
 8012986:	e055      	b.n	8012a34 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d105      	bne.n	801299c <tcp_input+0xc0>
 8012990:	4b5d      	ldr	r3, [pc, #372]	; (8012b08 <tcp_input+0x22c>)
 8012992:	22b2      	movs	r2, #178	; 0xb2
 8012994:	495d      	ldr	r1, [pc, #372]	; (8012b0c <tcp_input+0x230>)
 8012996:	485e      	ldr	r0, [pc, #376]	; (8012b10 <tcp_input+0x234>)
 8012998:	f006 fdb2 	bl	8019500 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801299c:	f06f 0113 	mvn.w	r1, #19
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f7fe f8ad 	bl	8010b00 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	895a      	ldrh	r2, [r3, #10]
 80129aa:	4b56      	ldr	r3, [pc, #344]	; (8012b04 <tcp_input+0x228>)
 80129ac:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80129ae:	4b53      	ldr	r3, [pc, #332]	; (8012afc <tcp_input+0x220>)
 80129b0:	881a      	ldrh	r2, [r3, #0]
 80129b2:	4b54      	ldr	r3, [pc, #336]	; (8012b04 <tcp_input+0x228>)
 80129b4:	881b      	ldrh	r3, [r3, #0]
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80129ba:	4b52      	ldr	r3, [pc, #328]	; (8012b04 <tcp_input+0x228>)
 80129bc:	881b      	ldrh	r3, [r3, #0]
 80129be:	425b      	negs	r3, r3
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	b21b      	sxth	r3, r3
 80129c4:	4619      	mov	r1, r3
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7fe f89a 	bl	8010b00 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	895b      	ldrh	r3, [r3, #10]
 80129d2:	8a3a      	ldrh	r2, [r7, #16]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	f200 831d 	bhi.w	8013014 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	4a47      	ldr	r2, [pc, #284]	; (8012b00 <tcp_input+0x224>)
 80129e2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	8a3b      	ldrh	r3, [r7, #16]
 80129ea:	425b      	negs	r3, r3
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	b21b      	sxth	r3, r3
 80129f0:	4619      	mov	r1, r3
 80129f2:	4610      	mov	r0, r2
 80129f4:	f7fe f884 	bl	8010b00 <pbuf_header>
    p->tot_len -= opt2len;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	891a      	ldrh	r2, [r3, #8]
 80129fc:	8a3b      	ldrh	r3, [r7, #16]
 80129fe:	1ad3      	subs	r3, r2, r3
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	895b      	ldrh	r3, [r3, #10]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d005      	beq.n	8012a1a <tcp_input+0x13e>
 8012a0e:	4b3e      	ldr	r3, [pc, #248]	; (8012b08 <tcp_input+0x22c>)
 8012a10:	22cf      	movs	r2, #207	; 0xcf
 8012a12:	4940      	ldr	r1, [pc, #256]	; (8012b14 <tcp_input+0x238>)
 8012a14:	483e      	ldr	r0, [pc, #248]	; (8012b10 <tcp_input+0x234>)
 8012a16:	f006 fd73 	bl	8019500 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	891a      	ldrh	r2, [r3, #8]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	891b      	ldrh	r3, [r3, #8]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d005      	beq.n	8012a34 <tcp_input+0x158>
 8012a28:	4b37      	ldr	r3, [pc, #220]	; (8012b08 <tcp_input+0x22c>)
 8012a2a:	22d0      	movs	r2, #208	; 0xd0
 8012a2c:	493a      	ldr	r1, [pc, #232]	; (8012b18 <tcp_input+0x23c>)
 8012a2e:	4838      	ldr	r0, [pc, #224]	; (8012b10 <tcp_input+0x234>)
 8012a30:	f006 fd66 	bl	8019500 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012a34:	4b2f      	ldr	r3, [pc, #188]	; (8012af4 <tcp_input+0x218>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	881b      	ldrh	r3, [r3, #0]
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	4b2d      	ldr	r3, [pc, #180]	; (8012af4 <tcp_input+0x218>)
 8012a3e:	681c      	ldr	r4, [r3, #0]
 8012a40:	4610      	mov	r0, r2
 8012a42:	f7fc fe67 	bl	800f714 <lwip_htons>
 8012a46:	4603      	mov	r3, r0
 8012a48:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012a4a:	4b2a      	ldr	r3, [pc, #168]	; (8012af4 <tcp_input+0x218>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	885b      	ldrh	r3, [r3, #2]
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	4b28      	ldr	r3, [pc, #160]	; (8012af4 <tcp_input+0x218>)
 8012a54:	681c      	ldr	r4, [r3, #0]
 8012a56:	4610      	mov	r0, r2
 8012a58:	f7fc fe5c 	bl	800f714 <lwip_htons>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012a60:	4b24      	ldr	r3, [pc, #144]	; (8012af4 <tcp_input+0x218>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	685a      	ldr	r2, [r3, #4]
 8012a66:	4b23      	ldr	r3, [pc, #140]	; (8012af4 <tcp_input+0x218>)
 8012a68:	681c      	ldr	r4, [r3, #0]
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	f7fc fe60 	bl	800f730 <lwip_htonl>
 8012a70:	4603      	mov	r3, r0
 8012a72:	6063      	str	r3, [r4, #4]
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	4a29      	ldr	r2, [pc, #164]	; (8012b1c <tcp_input+0x240>)
 8012a78:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012a7a:	4b1e      	ldr	r3, [pc, #120]	; (8012af4 <tcp_input+0x218>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	689a      	ldr	r2, [r3, #8]
 8012a80:	4b1c      	ldr	r3, [pc, #112]	; (8012af4 <tcp_input+0x218>)
 8012a82:	681c      	ldr	r4, [r3, #0]
 8012a84:	4610      	mov	r0, r2
 8012a86:	f7fc fe53 	bl	800f730 <lwip_htonl>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	60a3      	str	r3, [r4, #8]
 8012a8e:	68a3      	ldr	r3, [r4, #8]
 8012a90:	4a23      	ldr	r2, [pc, #140]	; (8012b20 <tcp_input+0x244>)
 8012a92:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012a94:	4b17      	ldr	r3, [pc, #92]	; (8012af4 <tcp_input+0x218>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	89db      	ldrh	r3, [r3, #14]
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	4b15      	ldr	r3, [pc, #84]	; (8012af4 <tcp_input+0x218>)
 8012a9e:	681c      	ldr	r4, [r3, #0]
 8012aa0:	4610      	mov	r0, r2
 8012aa2:	f7fc fe37 	bl	800f714 <lwip_htons>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012aaa:	4b12      	ldr	r3, [pc, #72]	; (8012af4 <tcp_input+0x218>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	899b      	ldrh	r3, [r3, #12]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fc fe2e 	bl	800f714 <lwip_htons>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ac0:	b2da      	uxtb	r2, r3
 8012ac2:	4b18      	ldr	r3, [pc, #96]	; (8012b24 <tcp_input+0x248>)
 8012ac4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	891a      	ldrh	r2, [r3, #8]
 8012aca:	4b16      	ldr	r3, [pc, #88]	; (8012b24 <tcp_input+0x248>)
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	f003 0303 	and.w	r3, r3, #3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	bf14      	ite	ne
 8012ad6:	2301      	movne	r3, #1
 8012ad8:	2300      	moveq	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	4413      	add	r3, r2
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	4b11      	ldr	r3, [pc, #68]	; (8012b28 <tcp_input+0x24c>)
 8012ae4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012aea:	4b10      	ldr	r3, [pc, #64]	; (8012b2c <tcp_input+0x250>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	61fb      	str	r3, [r7, #28]
 8012af0:	e082      	b.n	8012bf8 <tcp_input+0x31c>
 8012af2:	bf00      	nop
 8012af4:	2000c814 	.word	0x2000c814
 8012af8:	2000d110 	.word	0x2000d110
 8012afc:	2000c818 	.word	0x2000c818
 8012b00:	2000c81c 	.word	0x2000c81c
 8012b04:	2000c81a 	.word	0x2000c81a
 8012b08:	0801bfc8 	.word	0x0801bfc8
 8012b0c:	0801c020 	.word	0x0801c020
 8012b10:	0801c030 	.word	0x0801c030
 8012b14:	0801c058 	.word	0x0801c058
 8012b18:	0801c064 	.word	0x0801c064
 8012b1c:	2000c824 	.word	0x2000c824
 8012b20:	2000c828 	.word	0x2000c828
 8012b24:	2000c830 	.word	0x2000c830
 8012b28:	2000c82e 	.word	0x2000c82e
 8012b2c:	200101cc 	.word	0x200101cc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d105      	bne.n	8012b44 <tcp_input+0x268>
 8012b38:	4b8f      	ldr	r3, [pc, #572]	; (8012d78 <tcp_input+0x49c>)
 8012b3a:	22e2      	movs	r2, #226	; 0xe2
 8012b3c:	498f      	ldr	r1, [pc, #572]	; (8012d7c <tcp_input+0x4a0>)
 8012b3e:	4890      	ldr	r0, [pc, #576]	; (8012d80 <tcp_input+0x4a4>)
 8012b40:	f006 fcde 	bl	8019500 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	7d1b      	ldrb	r3, [r3, #20]
 8012b48:	2b0a      	cmp	r3, #10
 8012b4a:	d105      	bne.n	8012b58 <tcp_input+0x27c>
 8012b4c:	4b8a      	ldr	r3, [pc, #552]	; (8012d78 <tcp_input+0x49c>)
 8012b4e:	22e3      	movs	r2, #227	; 0xe3
 8012b50:	498c      	ldr	r1, [pc, #560]	; (8012d84 <tcp_input+0x4a8>)
 8012b52:	488b      	ldr	r0, [pc, #556]	; (8012d80 <tcp_input+0x4a4>)
 8012b54:	f006 fcd4 	bl	8019500 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	7d1b      	ldrb	r3, [r3, #20]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d105      	bne.n	8012b6c <tcp_input+0x290>
 8012b60:	4b85      	ldr	r3, [pc, #532]	; (8012d78 <tcp_input+0x49c>)
 8012b62:	22e4      	movs	r2, #228	; 0xe4
 8012b64:	4988      	ldr	r1, [pc, #544]	; (8012d88 <tcp_input+0x4ac>)
 8012b66:	4886      	ldr	r0, [pc, #536]	; (8012d80 <tcp_input+0x4a4>)
 8012b68:	f006 fcca 	bl	8019500 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	8b1a      	ldrh	r2, [r3, #24]
 8012b70:	4b86      	ldr	r3, [pc, #536]	; (8012d8c <tcp_input+0x4b0>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	881b      	ldrh	r3, [r3, #0]
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d138      	bne.n	8012bee <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	8ada      	ldrh	r2, [r3, #22]
 8012b80:	4b82      	ldr	r3, [pc, #520]	; (8012d8c <tcp_input+0x4b0>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	885b      	ldrh	r3, [r3, #2]
 8012b86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d130      	bne.n	8012bee <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	685a      	ldr	r2, [r3, #4]
 8012b90:	4b7f      	ldr	r3, [pc, #508]	; (8012d90 <tcp_input+0x4b4>)
 8012b92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d12a      	bne.n	8012bee <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	4b7c      	ldr	r3, [pc, #496]	; (8012d90 <tcp_input+0x4b4>)
 8012b9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d124      	bne.n	8012bee <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	69fa      	ldr	r2, [r7, #28]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d105      	bne.n	8012bba <tcp_input+0x2de>
 8012bae:	4b72      	ldr	r3, [pc, #456]	; (8012d78 <tcp_input+0x49c>)
 8012bb0:	22ec      	movs	r2, #236	; 0xec
 8012bb2:	4978      	ldr	r1, [pc, #480]	; (8012d94 <tcp_input+0x4b8>)
 8012bb4:	4872      	ldr	r0, [pc, #456]	; (8012d80 <tcp_input+0x4a4>)
 8012bb6:	f006 fca3 	bl	8019500 <iprintf>
      if (prev != NULL) {
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d00a      	beq.n	8012bd6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	68da      	ldr	r2, [r3, #12]
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012bc8:	4b73      	ldr	r3, [pc, #460]	; (8012d98 <tcp_input+0x4bc>)
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012bd0:	4a71      	ldr	r2, [pc, #452]	; (8012d98 <tcp_input+0x4bc>)
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	68db      	ldr	r3, [r3, #12]
 8012bda:	69fa      	ldr	r2, [r7, #28]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d10f      	bne.n	8012c00 <tcp_input+0x324>
 8012be0:	4b65      	ldr	r3, [pc, #404]	; (8012d78 <tcp_input+0x49c>)
 8012be2:	22f4      	movs	r2, #244	; 0xf4
 8012be4:	496d      	ldr	r1, [pc, #436]	; (8012d9c <tcp_input+0x4c0>)
 8012be6:	4866      	ldr	r0, [pc, #408]	; (8012d80 <tcp_input+0x4a4>)
 8012be8:	f006 fc8a 	bl	8019500 <iprintf>
      break;
 8012bec:	e008      	b.n	8012c00 <tcp_input+0x324>
    }
    prev = pcb;
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	61fb      	str	r3, [r7, #28]
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d198      	bne.n	8012b30 <tcp_input+0x254>
 8012bfe:	e000      	b.n	8012c02 <tcp_input+0x326>
      break;
 8012c00:	bf00      	nop
  }

  if (pcb == NULL) {
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d173      	bne.n	8012cf0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c08:	4b65      	ldr	r3, [pc, #404]	; (8012da0 <tcp_input+0x4c4>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	61fb      	str	r3, [r7, #28]
 8012c0e:	e02f      	b.n	8012c70 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	7d1b      	ldrb	r3, [r3, #20]
 8012c14:	2b0a      	cmp	r3, #10
 8012c16:	d005      	beq.n	8012c24 <tcp_input+0x348>
 8012c18:	4b57      	ldr	r3, [pc, #348]	; (8012d78 <tcp_input+0x49c>)
 8012c1a:	22fe      	movs	r2, #254	; 0xfe
 8012c1c:	4961      	ldr	r1, [pc, #388]	; (8012da4 <tcp_input+0x4c8>)
 8012c1e:	4858      	ldr	r0, [pc, #352]	; (8012d80 <tcp_input+0x4a4>)
 8012c20:	f006 fc6e 	bl	8019500 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	8b1a      	ldrh	r2, [r3, #24]
 8012c28:	4b58      	ldr	r3, [pc, #352]	; (8012d8c <tcp_input+0x4b0>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	881b      	ldrh	r3, [r3, #0]
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d11a      	bne.n	8012c6a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	8ada      	ldrh	r2, [r3, #22]
 8012c38:	4b54      	ldr	r3, [pc, #336]	; (8012d8c <tcp_input+0x4b0>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	885b      	ldrh	r3, [r3, #2]
 8012c3e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d112      	bne.n	8012c6a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	685a      	ldr	r2, [r3, #4]
 8012c48:	4b51      	ldr	r3, [pc, #324]	; (8012d90 <tcp_input+0x4b4>)
 8012c4a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d10c      	bne.n	8012c6a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	4b4e      	ldr	r3, [pc, #312]	; (8012d90 <tcp_input+0x4b4>)
 8012c56:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d106      	bne.n	8012c6a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8012c5c:	69f8      	ldr	r0, [r7, #28]
 8012c5e:	f000 fb15 	bl	801328c <tcp_timewait_input>
        pbuf_free(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7fd ff70 	bl	8010b48 <pbuf_free>
        return;
 8012c68:	e1da      	b.n	8013020 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	61fb      	str	r3, [r7, #28]
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1cc      	bne.n	8012c10 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c76:	2300      	movs	r3, #0
 8012c78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c7a:	4b4b      	ldr	r3, [pc, #300]	; (8012da8 <tcp_input+0x4cc>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	617b      	str	r3, [r7, #20]
 8012c80:	e019      	b.n	8012cb6 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	8ada      	ldrh	r2, [r3, #22]
 8012c86:	4b41      	ldr	r3, [pc, #260]	; (8012d8c <tcp_input+0x4b0>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	885b      	ldrh	r3, [r3, #2]
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d10c      	bne.n	8012cac <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	4b3e      	ldr	r3, [pc, #248]	; (8012d90 <tcp_input+0x4b4>)
 8012c98:	695b      	ldr	r3, [r3, #20]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d00f      	beq.n	8012cbe <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00d      	beq.n	8012cc0 <tcp_input+0x3e4>
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d009      	beq.n	8012cc0 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1e2      	bne.n	8012c82 <tcp_input+0x3a6>
 8012cbc:	e000      	b.n	8012cc0 <tcp_input+0x3e4>
            break;
 8012cbe:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d014      	beq.n	8012cf0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00a      	beq.n	8012ce2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	68da      	ldr	r2, [r3, #12]
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012cd4:	4b34      	ldr	r3, [pc, #208]	; (8012da8 <tcp_input+0x4cc>)
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012cdc:	4a32      	ldr	r2, [pc, #200]	; (8012da8 <tcp_input+0x4cc>)
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012ce2:	6978      	ldr	r0, [r7, #20]
 8012ce4:	f000 f9f0 	bl	80130c8 <tcp_listen_input>
      pbuf_free(p);
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7fd ff2d 	bl	8010b48 <pbuf_free>
      return;
 8012cee:	e197      	b.n	8013020 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	f000 8164 	beq.w	8012fc0 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012cf8:	4b2c      	ldr	r3, [pc, #176]	; (8012dac <tcp_input+0x4d0>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	891a      	ldrh	r2, [r3, #8]
 8012d02:	4b2a      	ldr	r3, [pc, #168]	; (8012dac <tcp_input+0x4d0>)
 8012d04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012d06:	4a29      	ldr	r2, [pc, #164]	; (8012dac <tcp_input+0x4d0>)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012d0c:	4b1f      	ldr	r3, [pc, #124]	; (8012d8c <tcp_input+0x4b0>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4a26      	ldr	r2, [pc, #152]	; (8012dac <tcp_input+0x4d0>)
 8012d12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012d14:	4b26      	ldr	r3, [pc, #152]	; (8012db0 <tcp_input+0x4d4>)
 8012d16:	2200      	movs	r2, #0
 8012d18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d1a:	4b26      	ldr	r3, [pc, #152]	; (8012db4 <tcp_input+0x4d8>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012d20:	4b25      	ldr	r3, [pc, #148]	; (8012db8 <tcp_input+0x4dc>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012d26:	4b25      	ldr	r3, [pc, #148]	; (8012dbc <tcp_input+0x4e0>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	f003 0308 	and.w	r3, r3, #8
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d006      	beq.n	8012d40 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	7b5b      	ldrb	r3, [r3, #13]
 8012d36:	f043 0301 	orr.w	r3, r3, #1
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d03d      	beq.n	8012dc4 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d48:	69f8      	ldr	r0, [r7, #28]
 8012d4a:	f7ff f999 	bl	8012080 <tcp_process_refused_data>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	f113 0f0d 	cmn.w	r3, #13
 8012d54:	d007      	beq.n	8012d66 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d032      	beq.n	8012dc4 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d5e:	4b18      	ldr	r3, [pc, #96]	; (8012dc0 <tcp_input+0x4e4>)
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d02e      	beq.n	8012dc4 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f040 8108 	bne.w	8012f80 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012d70:	69f8      	ldr	r0, [r7, #28]
 8012d72:	f002 fe3d 	bl	80159f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012d76:	e103      	b.n	8012f80 <tcp_input+0x6a4>
 8012d78:	0801bfc8 	.word	0x0801bfc8
 8012d7c:	0801c084 	.word	0x0801c084
 8012d80:	0801c030 	.word	0x0801c030
 8012d84:	0801c0ac 	.word	0x0801c0ac
 8012d88:	0801c0d8 	.word	0x0801c0d8
 8012d8c:	2000c814 	.word	0x2000c814
 8012d90:	2000d110 	.word	0x2000d110
 8012d94:	0801c100 	.word	0x0801c100
 8012d98:	200101cc 	.word	0x200101cc
 8012d9c:	0801c12c 	.word	0x0801c12c
 8012da0:	200101dc 	.word	0x200101dc
 8012da4:	0801c158 	.word	0x0801c158
 8012da8:	200101d4 	.word	0x200101d4
 8012dac:	2000c804 	.word	0x2000c804
 8012db0:	2000c834 	.word	0x2000c834
 8012db4:	2000c831 	.word	0x2000c831
 8012db8:	2000c82c 	.word	0x2000c82c
 8012dbc:	2000c830 	.word	0x2000c830
 8012dc0:	2000c82e 	.word	0x2000c82e
      }
    }
    tcp_input_pcb = pcb;
 8012dc4:	4a98      	ldr	r2, [pc, #608]	; (8013028 <tcp_input+0x74c>)
 8012dc6:	69fb      	ldr	r3, [r7, #28]
 8012dc8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012dca:	69f8      	ldr	r0, [r7, #28]
 8012dcc:	f000 fac6 	bl	801335c <tcp_process>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012dd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dd8:	f113 0f0d 	cmn.w	r3, #13
 8012ddc:	f000 80d2 	beq.w	8012f84 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8012de0:	4b92      	ldr	r3, [pc, #584]	; (801302c <tcp_input+0x750>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	f003 0308 	and.w	r3, r3, #8
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d016      	beq.n	8012e1a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d008      	beq.n	8012e08 <tcp_input+0x52c>
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012dfc:	69fa      	ldr	r2, [r7, #28]
 8012dfe:	6912      	ldr	r2, [r2, #16]
 8012e00:	f06f 010d 	mvn.w	r1, #13
 8012e04:	4610      	mov	r0, r2
 8012e06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e08:	69f9      	ldr	r1, [r7, #28]
 8012e0a:	4889      	ldr	r0, [pc, #548]	; (8013030 <tcp_input+0x754>)
 8012e0c:	f7ff fc4c 	bl	80126a8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012e10:	69f9      	ldr	r1, [r7, #28]
 8012e12:	2001      	movs	r0, #1
 8012e14:	f7fd f900 	bl	8010018 <memp_free>
 8012e18:	e0bf      	b.n	8012f9a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012e1e:	4b85      	ldr	r3, [pc, #532]	; (8013034 <tcp_input+0x758>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d01b      	beq.n	8012e5e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e26:	4b83      	ldr	r3, [pc, #524]	; (8013034 <tcp_input+0x758>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d009      	beq.n	8012e48 <tcp_input+0x56c>
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e38:	69fa      	ldr	r2, [r7, #28]
 8012e3a:	6910      	ldr	r0, [r2, #16]
 8012e3c:	89fa      	ldrh	r2, [r7, #14]
 8012e3e:	69f9      	ldr	r1, [r7, #28]
 8012e40:	4798      	blx	r3
 8012e42:	4603      	mov	r3, r0
 8012e44:	74fb      	strb	r3, [r7, #19]
 8012e46:	e001      	b.n	8012e4c <tcp_input+0x570>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e50:	f113 0f0d 	cmn.w	r3, #13
 8012e54:	f000 8098 	beq.w	8012f88 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e58:	4b76      	ldr	r3, [pc, #472]	; (8013034 <tcp_input+0x758>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e5e:	69f8      	ldr	r0, [r7, #28]
 8012e60:	f000 f900 	bl	8013064 <tcp_input_delayed_close>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f040 8090 	bne.w	8012f8c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e6c:	4b72      	ldr	r3, [pc, #456]	; (8013038 <tcp_input+0x75c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d041      	beq.n	8012ef8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d006      	beq.n	8012e8a <tcp_input+0x5ae>
 8012e7c:	4b6f      	ldr	r3, [pc, #444]	; (801303c <tcp_input+0x760>)
 8012e7e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012e82:	496f      	ldr	r1, [pc, #444]	; (8013040 <tcp_input+0x764>)
 8012e84:	486f      	ldr	r0, [pc, #444]	; (8013044 <tcp_input+0x768>)
 8012e86:	f006 fb3b 	bl	8019500 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	7e9b      	ldrb	r3, [r3, #26]
 8012e8e:	f003 0310 	and.w	r3, r3, #16
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d008      	beq.n	8012ea8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012e96:	4b68      	ldr	r3, [pc, #416]	; (8013038 <tcp_input+0x75c>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fd fe54 	bl	8010b48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012ea0:	69f8      	ldr	r0, [r7, #28]
 8012ea2:	f7fe fb97 	bl	80115d4 <tcp_abort>
            goto aborted;
 8012ea6:	e078      	b.n	8012f9a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00c      	beq.n	8012ecc <tcp_input+0x5f0>
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	6918      	ldr	r0, [r3, #16]
 8012ebc:	4b5e      	ldr	r3, [pc, #376]	; (8013038 <tcp_input+0x75c>)
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	69f9      	ldr	r1, [r7, #28]
 8012ec4:	47a0      	blx	r4
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	74fb      	strb	r3, [r7, #19]
 8012eca:	e008      	b.n	8012ede <tcp_input+0x602>
 8012ecc:	4b5a      	ldr	r3, [pc, #360]	; (8013038 <tcp_input+0x75c>)
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	69f9      	ldr	r1, [r7, #28]
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	f7ff f984 	bl	80121e2 <tcp_recv_null>
 8012eda:	4603      	mov	r3, r0
 8012edc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012ede:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ee2:	f113 0f0d 	cmn.w	r3, #13
 8012ee6:	d053      	beq.n	8012f90 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012ee8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d003      	beq.n	8012ef8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012ef0:	4b51      	ldr	r3, [pc, #324]	; (8013038 <tcp_input+0x75c>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012ef8:	4b4c      	ldr	r3, [pc, #304]	; (801302c <tcp_input+0x750>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	f003 0320 	and.w	r3, r3, #32
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d030      	beq.n	8012f66 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d009      	beq.n	8012f20 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f10:	7b5a      	ldrb	r2, [r3, #13]
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f16:	f042 0220 	orr.w	r2, r2, #32
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	735a      	strb	r2, [r3, #13]
 8012f1e:	e022      	b.n	8012f66 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012f28:	d005      	beq.n	8012f36 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f2e:	3301      	adds	r3, #1
 8012f30:	b29a      	uxth	r2, r3
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d00b      	beq.n	8012f58 <tcp_input+0x67c>
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	6918      	ldr	r0, [r3, #16]
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	69f9      	ldr	r1, [r7, #28]
 8012f50:	47a0      	blx	r4
 8012f52:	4603      	mov	r3, r0
 8012f54:	74fb      	strb	r3, [r7, #19]
 8012f56:	e001      	b.n	8012f5c <tcp_input+0x680>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f60:	f113 0f0d 	cmn.w	r3, #13
 8012f64:	d016      	beq.n	8012f94 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f66:	4b30      	ldr	r3, [pc, #192]	; (8013028 <tcp_input+0x74c>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f6c:	69f8      	ldr	r0, [r7, #28]
 8012f6e:	f000 f879 	bl	8013064 <tcp_input_delayed_close>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10f      	bne.n	8012f98 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f78:	69f8      	ldr	r0, [r7, #28]
 8012f7a:	f002 fd95 	bl	8015aa8 <tcp_output>
 8012f7e:	e00c      	b.n	8012f9a <tcp_input+0x6be>
        goto aborted;
 8012f80:	bf00      	nop
 8012f82:	e00a      	b.n	8012f9a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012f84:	bf00      	nop
 8012f86:	e008      	b.n	8012f9a <tcp_input+0x6be>
              goto aborted;
 8012f88:	bf00      	nop
 8012f8a:	e006      	b.n	8012f9a <tcp_input+0x6be>
          goto aborted;
 8012f8c:	bf00      	nop
 8012f8e:	e004      	b.n	8012f9a <tcp_input+0x6be>
            goto aborted;
 8012f90:	bf00      	nop
 8012f92:	e002      	b.n	8012f9a <tcp_input+0x6be>
              goto aborted;
 8012f94:	bf00      	nop
 8012f96:	e000      	b.n	8012f9a <tcp_input+0x6be>
          goto aborted;
 8012f98:	bf00      	nop
    tcp_input_pcb = NULL;
 8012f9a:	4b23      	ldr	r3, [pc, #140]	; (8013028 <tcp_input+0x74c>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012fa0:	4b25      	ldr	r3, [pc, #148]	; (8013038 <tcp_input+0x75c>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012fa6:	4b28      	ldr	r3, [pc, #160]	; (8013048 <tcp_input+0x76c>)
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d037      	beq.n	801301e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8012fae:	4b26      	ldr	r3, [pc, #152]	; (8013048 <tcp_input+0x76c>)
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fd fdc8 	bl	8010b48 <pbuf_free>
      inseg.p = NULL;
 8012fb8:	4b23      	ldr	r3, [pc, #140]	; (8013048 <tcp_input+0x76c>)
 8012fba:	2200      	movs	r2, #0
 8012fbc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012fbe:	e02e      	b.n	801301e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012fc0:	4b22      	ldr	r3, [pc, #136]	; (801304c <tcp_input+0x770>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	899b      	ldrh	r3, [r3, #12]
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fc fba3 	bl	800f714 <lwip_htons>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	f003 0304 	and.w	r3, r3, #4
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d115      	bne.n	8013004 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fd8:	4b1d      	ldr	r3, [pc, #116]	; (8013050 <tcp_input+0x774>)
 8012fda:	6818      	ldr	r0, [r3, #0]
 8012fdc:	4b1d      	ldr	r3, [pc, #116]	; (8013054 <tcp_input+0x778>)
 8012fde:	881b      	ldrh	r3, [r3, #0]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	4b1d      	ldr	r3, [pc, #116]	; (8013058 <tcp_input+0x77c>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fe8:	4b18      	ldr	r3, [pc, #96]	; (801304c <tcp_input+0x770>)
 8012fea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fec:	885b      	ldrh	r3, [r3, #2]
 8012fee:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ff0:	4a16      	ldr	r2, [pc, #88]	; (801304c <tcp_input+0x770>)
 8012ff2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ff4:	8812      	ldrh	r2, [r2, #0]
 8012ff6:	b292      	uxth	r2, r2
 8012ff8:	9201      	str	r2, [sp, #4]
 8012ffa:	9300      	str	r3, [sp, #0]
 8012ffc:	4b17      	ldr	r3, [pc, #92]	; (801305c <tcp_input+0x780>)
 8012ffe:	4a18      	ldr	r2, [pc, #96]	; (8013060 <tcp_input+0x784>)
 8013000:	f002 ffdc 	bl	8015fbc <tcp_rst>
    pbuf_free(p);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7fd fd9f 	bl	8010b48 <pbuf_free>
  return;
 801300a:	e008      	b.n	801301e <tcp_input+0x742>
    goto dropped;
 801300c:	bf00      	nop
 801300e:	e002      	b.n	8013016 <tcp_input+0x73a>
dropped:
 8013010:	bf00      	nop
 8013012:	e000      	b.n	8013016 <tcp_input+0x73a>
      goto dropped;
 8013014:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7fd fd96 	bl	8010b48 <pbuf_free>
 801301c:	e000      	b.n	8013020 <tcp_input+0x744>
  return;
 801301e:	bf00      	nop
}
 8013020:	3724      	adds	r7, #36	; 0x24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd90      	pop	{r4, r7, pc}
 8013026:	bf00      	nop
 8013028:	200101e0 	.word	0x200101e0
 801302c:	2000c831 	.word	0x2000c831
 8013030:	200101cc 	.word	0x200101cc
 8013034:	2000c82c 	.word	0x2000c82c
 8013038:	2000c834 	.word	0x2000c834
 801303c:	0801bfc8 	.word	0x0801bfc8
 8013040:	0801c188 	.word	0x0801c188
 8013044:	0801c030 	.word	0x0801c030
 8013048:	2000c804 	.word	0x2000c804
 801304c:	2000c814 	.word	0x2000c814
 8013050:	2000c828 	.word	0x2000c828
 8013054:	2000c82e 	.word	0x2000c82e
 8013058:	2000c824 	.word	0x2000c824
 801305c:	2000d120 	.word	0x2000d120
 8013060:	2000d124 	.word	0x2000d124

08013064 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801306c:	4b14      	ldr	r3, [pc, #80]	; (80130c0 <tcp_input_delayed_close+0x5c>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 0310 	and.w	r3, r3, #16
 8013074:	2b00      	cmp	r3, #0
 8013076:	d01d      	beq.n	80130b4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7e9b      	ldrb	r3, [r3, #26]
 801307c:	f003 0310 	and.w	r3, r3, #16
 8013080:	2b00      	cmp	r3, #0
 8013082:	d10d      	bne.n	80130a0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801308a:	2b00      	cmp	r3, #0
 801308c:	d008      	beq.n	80130a0 <tcp_input_delayed_close+0x3c>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	6912      	ldr	r2, [r2, #16]
 8013098:	f06f 010e 	mvn.w	r1, #14
 801309c:	4610      	mov	r0, r2
 801309e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130a0:	6879      	ldr	r1, [r7, #4]
 80130a2:	4808      	ldr	r0, [pc, #32]	; (80130c4 <tcp_input_delayed_close+0x60>)
 80130a4:	f7ff fb00 	bl	80126a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80130a8:	6879      	ldr	r1, [r7, #4]
 80130aa:	2001      	movs	r0, #1
 80130ac:	f7fc ffb4 	bl	8010018 <memp_free>
    return 1;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e000      	b.n	80130b6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	2000c831 	.word	0x2000c831
 80130c4:	200101cc 	.word	0x200101cc

080130c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b088      	sub	sp, #32
 80130cc:	af02      	add	r7, sp, #8
 80130ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80130d0:	4b64      	ldr	r3, [pc, #400]	; (8013264 <tcp_listen_input+0x19c>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f003 0304 	and.w	r3, r3, #4
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f040 80bc 	bne.w	8013256 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80130de:	4b61      	ldr	r3, [pc, #388]	; (8013264 <tcp_listen_input+0x19c>)
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	f003 0310 	and.w	r3, r3, #16
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d016      	beq.n	8013118 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80130ea:	4b5f      	ldr	r3, [pc, #380]	; (8013268 <tcp_listen_input+0x1a0>)
 80130ec:	6818      	ldr	r0, [r3, #0]
 80130ee:	4b5f      	ldr	r3, [pc, #380]	; (801326c <tcp_listen_input+0x1a4>)
 80130f0:	881b      	ldrh	r3, [r3, #0]
 80130f2:	461a      	mov	r2, r3
 80130f4:	4b5e      	ldr	r3, [pc, #376]	; (8013270 <tcp_listen_input+0x1a8>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130fa:	4b5e      	ldr	r3, [pc, #376]	; (8013274 <tcp_listen_input+0x1ac>)
 80130fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80130fe:	885b      	ldrh	r3, [r3, #2]
 8013100:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013102:	4a5c      	ldr	r2, [pc, #368]	; (8013274 <tcp_listen_input+0x1ac>)
 8013104:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013106:	8812      	ldrh	r2, [r2, #0]
 8013108:	b292      	uxth	r2, r2
 801310a:	9201      	str	r2, [sp, #4]
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	4b5a      	ldr	r3, [pc, #360]	; (8013278 <tcp_listen_input+0x1b0>)
 8013110:	4a5a      	ldr	r2, [pc, #360]	; (801327c <tcp_listen_input+0x1b4>)
 8013112:	f002 ff53 	bl	8015fbc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013116:	e0a0      	b.n	801325a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8013118:	4b52      	ldr	r3, [pc, #328]	; (8013264 <tcp_listen_input+0x19c>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 0302 	and.w	r3, r3, #2
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 809a 	beq.w	801325a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	7d5b      	ldrb	r3, [r3, #21]
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff f938 	bl	80123a0 <tcp_alloc>
 8013130:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d111      	bne.n	801315c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	699b      	ldr	r3, [r3, #24]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00a      	beq.n	8013156 <tcp_listen_input+0x8e>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	699b      	ldr	r3, [r3, #24]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	6910      	ldr	r0, [r2, #16]
 8013148:	f04f 32ff 	mov.w	r2, #4294967295
 801314c:	2100      	movs	r1, #0
 801314e:	4798      	blx	r3
 8013150:	4603      	mov	r3, r0
 8013152:	73bb      	strb	r3, [r7, #14]
      return;
 8013154:	e082      	b.n	801325c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013156:	23f0      	movs	r3, #240	; 0xf0
 8013158:	73bb      	strb	r3, [r7, #14]
      return;
 801315a:	e07f      	b.n	801325c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801315c:	4b48      	ldr	r3, [pc, #288]	; (8013280 <tcp_listen_input+0x1b8>)
 801315e:	695a      	ldr	r2, [r3, #20]
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013164:	4b46      	ldr	r3, [pc, #280]	; (8013280 <tcp_listen_input+0x1b8>)
 8013166:	691a      	ldr	r2, [r3, #16]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	8ada      	ldrh	r2, [r3, #22]
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013174:	4b3f      	ldr	r3, [pc, #252]	; (8013274 <tcp_listen_input+0x1ac>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	b29a      	uxth	r2, r3
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	2203      	movs	r2, #3
 8013184:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013186:	4b3a      	ldr	r3, [pc, #232]	; (8013270 <tcp_listen_input+0x1a8>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	1c5a      	adds	r2, r3, #1
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013198:	6978      	ldr	r0, [r7, #20]
 801319a:	f7ff fb01 	bl	80127a0 <tcp_next_iss>
 801319e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	693a      	ldr	r2, [r7, #16]
 80131a4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	693a      	ldr	r2, [r7, #16]
 80131b0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	693a      	ldr	r2, [r7, #16]
 80131b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80131b8:	4b2d      	ldr	r3, [pc, #180]	; (8013270 <tcp_listen_input+0x1a8>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	1e5a      	subs	r2, r3, #1
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	691a      	ldr	r2, [r3, #16]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	7a1b      	ldrb	r3, [r3, #8]
 80131d4:	f003 030c 	and.w	r3, r3, #12
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80131de:	4b29      	ldr	r3, [pc, #164]	; (8013284 <tcp_listen_input+0x1bc>)
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	60da      	str	r2, [r3, #12]
 80131e6:	4a27      	ldr	r2, [pc, #156]	; (8013284 <tcp_listen_input+0x1bc>)
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	6013      	str	r3, [r2, #0]
 80131ec:	f003 f938 	bl	8016460 <tcp_timer_needed>
 80131f0:	4b25      	ldr	r3, [pc, #148]	; (8013288 <tcp_listen_input+0x1c0>)
 80131f2:	2201      	movs	r2, #1
 80131f4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80131f6:	6978      	ldr	r0, [r7, #20]
 80131f8:	f001 fd14 	bl	8014c24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80131fc:	4b1d      	ldr	r3, [pc, #116]	; (8013274 <tcp_listen_input+0x1ac>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	89db      	ldrh	r3, [r3, #14]
 8013202:	b29a      	uxth	r2, r3
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	3304      	adds	r3, #4
 801321e:	4619      	mov	r1, r3
 8013220:	4610      	mov	r0, r2
 8013222:	f7ff fad5 	bl	80127d0 <tcp_eff_send_mss_impl>
 8013226:	4603      	mov	r3, r0
 8013228:	461a      	mov	r2, r3
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801322e:	2112      	movs	r1, #18
 8013230:	6978      	ldr	r0, [r7, #20]
 8013232:	f002 fae1 	bl	80157f8 <tcp_enqueue_flags>
 8013236:	4603      	mov	r3, r0
 8013238:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d004      	beq.n	801324c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8013242:	2100      	movs	r1, #0
 8013244:	6978      	ldr	r0, [r7, #20]
 8013246:	f7fe f913 	bl	8011470 <tcp_abandon>
      return;
 801324a:	e007      	b.n	801325c <tcp_listen_input+0x194>
    tcp_output(npcb);
 801324c:	6978      	ldr	r0, [r7, #20]
 801324e:	f002 fc2b 	bl	8015aa8 <tcp_output>
  return;
 8013252:	bf00      	nop
 8013254:	e001      	b.n	801325a <tcp_listen_input+0x192>
    return;
 8013256:	bf00      	nop
 8013258:	e000      	b.n	801325c <tcp_listen_input+0x194>
  return;
 801325a:	bf00      	nop
}
 801325c:	3718      	adds	r7, #24
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	2000c830 	.word	0x2000c830
 8013268:	2000c828 	.word	0x2000c828
 801326c:	2000c82e 	.word	0x2000c82e
 8013270:	2000c824 	.word	0x2000c824
 8013274:	2000c814 	.word	0x2000c814
 8013278:	2000d120 	.word	0x2000d120
 801327c:	2000d124 	.word	0x2000d124
 8013280:	2000d110 	.word	0x2000d110
 8013284:	200101cc 	.word	0x200101cc
 8013288:	200101c8 	.word	0x200101c8

0801328c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af02      	add	r7, sp, #8
 8013292:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013294:	4b29      	ldr	r3, [pc, #164]	; (801333c <tcp_timewait_input+0xb0>)
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	f003 0304 	and.w	r3, r3, #4
 801329c:	2b00      	cmp	r3, #0
 801329e:	d147      	bne.n	8013330 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80132a0:	4b26      	ldr	r3, [pc, #152]	; (801333c <tcp_timewait_input+0xb0>)
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	f003 0302 	and.w	r3, r3, #2
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d027      	beq.n	80132fc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80132ac:	4b24      	ldr	r3, [pc, #144]	; (8013340 <tcp_timewait_input+0xb4>)
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b4:	1ad3      	subs	r3, r2, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	db2a      	blt.n	8013310 <tcp_timewait_input+0x84>
 80132ba:	4b21      	ldr	r3, [pc, #132]	; (8013340 <tcp_timewait_input+0xb4>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c2:	6879      	ldr	r1, [r7, #4]
 80132c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132c6:	440b      	add	r3, r1
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	dc20      	bgt.n	8013310 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ce:	4b1d      	ldr	r3, [pc, #116]	; (8013344 <tcp_timewait_input+0xb8>)
 80132d0:	6818      	ldr	r0, [r3, #0]
 80132d2:	4b1d      	ldr	r3, [pc, #116]	; (8013348 <tcp_timewait_input+0xbc>)
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	4b19      	ldr	r3, [pc, #100]	; (8013340 <tcp_timewait_input+0xb4>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132de:	4b1b      	ldr	r3, [pc, #108]	; (801334c <tcp_timewait_input+0xc0>)
 80132e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80132e2:	885b      	ldrh	r3, [r3, #2]
 80132e4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132e6:	4a19      	ldr	r2, [pc, #100]	; (801334c <tcp_timewait_input+0xc0>)
 80132e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ea:	8812      	ldrh	r2, [r2, #0]
 80132ec:	b292      	uxth	r2, r2
 80132ee:	9201      	str	r2, [sp, #4]
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4b17      	ldr	r3, [pc, #92]	; (8013350 <tcp_timewait_input+0xc4>)
 80132f4:	4a17      	ldr	r2, [pc, #92]	; (8013354 <tcp_timewait_input+0xc8>)
 80132f6:	f002 fe61 	bl	8015fbc <tcp_rst>
      return;
 80132fa:	e01c      	b.n	8013336 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80132fc:	4b0f      	ldr	r3, [pc, #60]	; (801333c <tcp_timewait_input+0xb0>)
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	f003 0301 	and.w	r3, r3, #1
 8013304:	2b00      	cmp	r3, #0
 8013306:	d003      	beq.n	8013310 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013308:	4b13      	ldr	r3, [pc, #76]	; (8013358 <tcp_timewait_input+0xcc>)
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013310:	4b0d      	ldr	r3, [pc, #52]	; (8013348 <tcp_timewait_input+0xbc>)
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00d      	beq.n	8013334 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	7e9b      	ldrb	r3, [r3, #26]
 801331c:	f043 0302 	orr.w	r3, r3, #2
 8013320:	b2da      	uxtb	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f002 fbbe 	bl	8015aa8 <tcp_output>
  }
  return;
 801332c:	bf00      	nop
 801332e:	e001      	b.n	8013334 <tcp_timewait_input+0xa8>
    return;
 8013330:	bf00      	nop
 8013332:	e000      	b.n	8013336 <tcp_timewait_input+0xaa>
  return;
 8013334:	bf00      	nop
}
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	2000c830 	.word	0x2000c830
 8013340:	2000c824 	.word	0x2000c824
 8013344:	2000c828 	.word	0x2000c828
 8013348:	2000c82e 	.word	0x2000c82e
 801334c:	2000c814 	.word	0x2000c814
 8013350:	2000d120 	.word	0x2000d120
 8013354:	2000d124 	.word	0x2000d124
 8013358:	200101d0 	.word	0x200101d0

0801335c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b08a      	sub	sp, #40	; 0x28
 8013360:	af02      	add	r7, sp, #8
 8013362:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013364:	2300      	movs	r3, #0
 8013366:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013368:	2300      	movs	r3, #0
 801336a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801336c:	4ba4      	ldr	r3, [pc, #656]	; (8013600 <tcp_process+0x2a4>)
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	f003 0304 	and.w	r3, r3, #4
 8013374:	2b00      	cmp	r3, #0
 8013376:	d04e      	beq.n	8013416 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	7d1b      	ldrb	r3, [r3, #20]
 801337c:	2b02      	cmp	r3, #2
 801337e:	d108      	bne.n	8013392 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013384:	4b9f      	ldr	r3, [pc, #636]	; (8013604 <tcp_process+0x2a8>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	d123      	bne.n	80133d4 <tcp_process+0x78>
        acceptable = 1;
 801338c:	2301      	movs	r3, #1
 801338e:	76fb      	strb	r3, [r7, #27]
 8013390:	e020      	b.n	80133d4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013396:	4b9c      	ldr	r3, [pc, #624]	; (8013608 <tcp_process+0x2ac>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	429a      	cmp	r2, r3
 801339c:	d102      	bne.n	80133a4 <tcp_process+0x48>
        acceptable = 1;
 801339e:	2301      	movs	r3, #1
 80133a0:	76fb      	strb	r3, [r7, #27]
 80133a2:	e017      	b.n	80133d4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80133a4:	4b98      	ldr	r3, [pc, #608]	; (8013608 <tcp_process+0x2ac>)
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ac:	1ad3      	subs	r3, r2, r3
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	db10      	blt.n	80133d4 <tcp_process+0x78>
 80133b2:	4b95      	ldr	r3, [pc, #596]	; (8013608 <tcp_process+0x2ac>)
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ba:	6879      	ldr	r1, [r7, #4]
 80133bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80133be:	440b      	add	r3, r1
 80133c0:	1ad3      	subs	r3, r2, r3
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	dc06      	bgt.n	80133d4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	7e9b      	ldrb	r3, [r3, #26]
 80133ca:	f043 0302 	orr.w	r3, r3, #2
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80133d4:	7efb      	ldrb	r3, [r7, #27]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d01b      	beq.n	8013412 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d106      	bne.n	80133f0 <tcp_process+0x94>
 80133e2:	4b8a      	ldr	r3, [pc, #552]	; (801360c <tcp_process+0x2b0>)
 80133e4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80133e8:	4989      	ldr	r1, [pc, #548]	; (8013610 <tcp_process+0x2b4>)
 80133ea:	488a      	ldr	r0, [pc, #552]	; (8013614 <tcp_process+0x2b8>)
 80133ec:	f006 f888 	bl	8019500 <iprintf>
      recv_flags |= TF_RESET;
 80133f0:	4b89      	ldr	r3, [pc, #548]	; (8013618 <tcp_process+0x2bc>)
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	f043 0308 	orr.w	r3, r3, #8
 80133f8:	b2da      	uxtb	r2, r3
 80133fa:	4b87      	ldr	r3, [pc, #540]	; (8013618 <tcp_process+0x2bc>)
 80133fc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	7e9b      	ldrb	r3, [r3, #26]
 8013402:	f023 0301 	bic.w	r3, r3, #1
 8013406:	b2da      	uxtb	r2, r3
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801340c:	f06f 030d 	mvn.w	r3, #13
 8013410:	e34d      	b.n	8013aae <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013412:	2300      	movs	r3, #0
 8013414:	e34b      	b.n	8013aae <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013416:	4b7a      	ldr	r3, [pc, #488]	; (8013600 <tcp_process+0x2a4>)
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	f003 0302 	and.w	r3, r3, #2
 801341e:	2b00      	cmp	r3, #0
 8013420:	d010      	beq.n	8013444 <tcp_process+0xe8>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	7d1b      	ldrb	r3, [r3, #20]
 8013426:	2b02      	cmp	r3, #2
 8013428:	d00c      	beq.n	8013444 <tcp_process+0xe8>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	7d1b      	ldrb	r3, [r3, #20]
 801342e:	2b03      	cmp	r3, #3
 8013430:	d008      	beq.n	8013444 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	7e9b      	ldrb	r3, [r3, #26]
 8013436:	f043 0302 	orr.w	r3, r3, #2
 801343a:	b2da      	uxtb	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	e334      	b.n	8013aae <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	7e9b      	ldrb	r3, [r3, #26]
 8013448:	f003 0310 	and.w	r3, r3, #16
 801344c:	2b00      	cmp	r3, #0
 801344e:	d103      	bne.n	8013458 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013450:	4b72      	ldr	r3, [pc, #456]	; (801361c <tcp_process+0x2c0>)
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2200      	movs	r2, #0
 801345c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f001 fbdf 	bl	8014c24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	7d1b      	ldrb	r3, [r3, #20]
 801346a:	3b02      	subs	r3, #2
 801346c:	2b07      	cmp	r3, #7
 801346e:	f200 830e 	bhi.w	8013a8e <tcp_process+0x732>
 8013472:	a201      	add	r2, pc, #4	; (adr r2, 8013478 <tcp_process+0x11c>)
 8013474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013478:	08013499 	.word	0x08013499
 801347c:	08013691 	.word	0x08013691
 8013480:	080137e9 	.word	0x080137e9
 8013484:	08013813 	.word	0x08013813
 8013488:	0801393d 	.word	0x0801393d
 801348c:	080137e9 	.word	0x080137e9
 8013490:	080139c9 	.word	0x080139c9
 8013494:	08013a59 	.word	0x08013a59
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013498:	4b59      	ldr	r3, [pc, #356]	; (8013600 <tcp_process+0x2a4>)
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	f003 0310 	and.w	r3, r3, #16
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f000 80cb 	beq.w	801363c <tcp_process+0x2e0>
 80134a6:	4b56      	ldr	r3, [pc, #344]	; (8013600 <tcp_process+0x2a4>)
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	f003 0302 	and.w	r3, r3, #2
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f000 80c4 	beq.w	801363c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134b8:	1c5a      	adds	r2, r3, #1
 80134ba:	4b52      	ldr	r3, [pc, #328]	; (8013604 <tcp_process+0x2a8>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	429a      	cmp	r2, r3
 80134c0:	f040 80bc 	bne.w	801363c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80134c4:	4b50      	ldr	r3, [pc, #320]	; (8013608 <tcp_process+0x2ac>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80134d6:	4b4b      	ldr	r3, [pc, #300]	; (8013604 <tcp_process+0x2a8>)
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80134de:	4b50      	ldr	r3, [pc, #320]	; (8013620 <tcp_process+0x2c4>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	89db      	ldrh	r3, [r3, #14]
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80134f8:	4b43      	ldr	r3, [pc, #268]	; (8013608 <tcp_process+0x2ac>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	1e5a      	subs	r2, r3, #1
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2204      	movs	r2, #4
 8013506:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3304      	adds	r3, #4
 8013510:	4619      	mov	r1, r3
 8013512:	4610      	mov	r0, r2
 8013514:	f7ff f95c 	bl	80127d0 <tcp_eff_send_mss_impl>
 8013518:	4603      	mov	r3, r0
 801351a:	461a      	mov	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013524:	005b      	lsls	r3, r3, #1
 8013526:	f241 121c 	movw	r2, #4380	; 0x111c
 801352a:	429a      	cmp	r2, r3
 801352c:	bf38      	it	cc
 801352e:	461a      	movcc	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	4293      	cmp	r3, r2
 8013538:	bf28      	it	cs
 801353a:	4613      	movcs	r3, r2
 801353c:	b29a      	uxth	r2, r3
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801354a:	2b00      	cmp	r3, #0
 801354c:	d106      	bne.n	801355c <tcp_process+0x200>
 801354e:	4b2f      	ldr	r3, [pc, #188]	; (801360c <tcp_process+0x2b0>)
 8013550:	f240 321a 	movw	r2, #794	; 0x31a
 8013554:	4933      	ldr	r1, [pc, #204]	; (8013624 <tcp_process+0x2c8>)
 8013556:	482f      	ldr	r0, [pc, #188]	; (8013614 <tcp_process+0x2b8>)
 8013558:	f005 ffd2 	bl	8019500 <iprintf>
      --pcb->snd_queuelen;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013562:	3b01      	subs	r3, #1
 8013564:	b29a      	uxth	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013570:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d111      	bne.n	801359c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801357c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d106      	bne.n	8013592 <tcp_process+0x236>
 8013584:	4b21      	ldr	r3, [pc, #132]	; (801360c <tcp_process+0x2b0>)
 8013586:	f240 3222 	movw	r2, #802	; 0x322
 801358a:	4927      	ldr	r1, [pc, #156]	; (8013628 <tcp_process+0x2cc>)
 801358c:	4821      	ldr	r0, [pc, #132]	; (8013614 <tcp_process+0x2b8>)
 801358e:	f005 ffb7 	bl	8019500 <iprintf>
        pcb->unsent = rseg->next;
 8013592:	69fb      	ldr	r3, [r7, #28]
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	669a      	str	r2, [r3, #104]	; 0x68
 801359a:	e003      	b.n	80135a4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80135a4:	69f8      	ldr	r0, [r7, #28]
 80135a6:	f7fe fde8 	bl	801217a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d104      	bne.n	80135bc <tcp_process+0x260>
        pcb->rtime = -1;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80135ba:	e006      	b.n	80135ca <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2200      	movs	r2, #0
 80135c0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2200      	movs	r2, #0
 80135c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00a      	beq.n	80135ea <tcp_process+0x28e>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	6910      	ldr	r0, [r2, #16]
 80135de:	2200      	movs	r2, #0
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	4798      	blx	r3
 80135e4:	4603      	mov	r3, r0
 80135e6:	76bb      	strb	r3, [r7, #26]
 80135e8:	e001      	b.n	80135ee <tcp_process+0x292>
 80135ea:	2300      	movs	r3, #0
 80135ec:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80135ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135f2:	f113 0f0d 	cmn.w	r3, #13
 80135f6:	d119      	bne.n	801362c <tcp_process+0x2d0>
        return ERR_ABRT;
 80135f8:	f06f 030c 	mvn.w	r3, #12
 80135fc:	e257      	b.n	8013aae <tcp_process+0x752>
 80135fe:	bf00      	nop
 8013600:	2000c830 	.word	0x2000c830
 8013604:	2000c828 	.word	0x2000c828
 8013608:	2000c824 	.word	0x2000c824
 801360c:	0801bfc8 	.word	0x0801bfc8
 8013610:	0801c1a4 	.word	0x0801c1a4
 8013614:	0801c030 	.word	0x0801c030
 8013618:	2000c831 	.word	0x2000c831
 801361c:	200101d0 	.word	0x200101d0
 8013620:	2000c814 	.word	0x2000c814
 8013624:	0801c1c4 	.word	0x0801c1c4
 8013628:	0801c1dc 	.word	0x0801c1dc
      }
      tcp_ack_now(pcb);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	7e9b      	ldrb	r3, [r3, #26]
 8013630:	f043 0302 	orr.w	r3, r3, #2
 8013634:	b2da      	uxtb	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801363a:	e22a      	b.n	8013a92 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801363c:	4b9f      	ldr	r3, [pc, #636]	; (80138bc <tcp_process+0x560>)
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f003 0310 	and.w	r3, r3, #16
 8013644:	2b00      	cmp	r3, #0
 8013646:	f000 8224 	beq.w	8013a92 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801364a:	4b9d      	ldr	r3, [pc, #628]	; (80138c0 <tcp_process+0x564>)
 801364c:	6818      	ldr	r0, [r3, #0]
 801364e:	4b9d      	ldr	r3, [pc, #628]	; (80138c4 <tcp_process+0x568>)
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	461a      	mov	r2, r3
 8013654:	4b9c      	ldr	r3, [pc, #624]	; (80138c8 <tcp_process+0x56c>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801365a:	4b9c      	ldr	r3, [pc, #624]	; (80138cc <tcp_process+0x570>)
 801365c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801365e:	885b      	ldrh	r3, [r3, #2]
 8013660:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013662:	4a9a      	ldr	r2, [pc, #616]	; (80138cc <tcp_process+0x570>)
 8013664:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013666:	8812      	ldrh	r2, [r2, #0]
 8013668:	b292      	uxth	r2, r2
 801366a:	9201      	str	r2, [sp, #4]
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	4b98      	ldr	r3, [pc, #608]	; (80138d0 <tcp_process+0x574>)
 8013670:	4a98      	ldr	r2, [pc, #608]	; (80138d4 <tcp_process+0x578>)
 8013672:	f002 fca3 	bl	8015fbc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801367c:	2b05      	cmp	r3, #5
 801367e:	f200 8208 	bhi.w	8013a92 <tcp_process+0x736>
        pcb->rtime = 0;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f002 fd0d 	bl	80160a8 <tcp_rexmit_rto>
    break;
 801368e:	e200      	b.n	8013a92 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8013690:	4b8a      	ldr	r3, [pc, #552]	; (80138bc <tcp_process+0x560>)
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	f003 0310 	and.w	r3, r3, #16
 8013698:	2b00      	cmp	r3, #0
 801369a:	f000 8091 	beq.w	80137c0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801369e:	4b88      	ldr	r3, [pc, #544]	; (80138c0 <tcp_process+0x564>)
 80136a0:	681a      	ldr	r2, [r3, #0]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136a6:	1ad3      	subs	r3, r2, r3
 80136a8:	3b01      	subs	r3, #1
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	db71      	blt.n	8013792 <tcp_process+0x436>
 80136ae:	4b84      	ldr	r3, [pc, #528]	; (80138c0 <tcp_process+0x564>)
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136b6:	1ad3      	subs	r3, r2, r3
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	dc6a      	bgt.n	8013792 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2204      	movs	r2, #4
 80136c0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d00b      	beq.n	80136e2 <tcp_process+0x386>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136ce:	699b      	ldr	r3, [r3, #24]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d106      	bne.n	80136e2 <tcp_process+0x386>
 80136d4:	4b80      	ldr	r3, [pc, #512]	; (80138d8 <tcp_process+0x57c>)
 80136d6:	f240 3251 	movw	r2, #849	; 0x351
 80136da:	4980      	ldr	r1, [pc, #512]	; (80138dc <tcp_process+0x580>)
 80136dc:	4880      	ldr	r0, [pc, #512]	; (80138e0 <tcp_process+0x584>)
 80136de:	f005 ff0f 	bl	8019500 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d102      	bne.n	80136f0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80136ea:	23fa      	movs	r3, #250	; 0xfa
 80136ec:	76bb      	strb	r3, [r7, #26]
 80136ee:	e011      	b.n	8013714 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136f4:	699b      	ldr	r3, [r3, #24]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00a      	beq.n	8013710 <tcp_process+0x3b4>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	6910      	ldr	r0, [r2, #16]
 8013704:	2200      	movs	r2, #0
 8013706:	6879      	ldr	r1, [r7, #4]
 8013708:	4798      	blx	r3
 801370a:	4603      	mov	r3, r0
 801370c:	76bb      	strb	r3, [r7, #26]
 801370e:	e001      	b.n	8013714 <tcp_process+0x3b8>
 8013710:	23f0      	movs	r3, #240	; 0xf0
 8013712:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8013714:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00a      	beq.n	8013732 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801371c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013720:	f113 0f0d 	cmn.w	r3, #13
 8013724:	d002      	beq.n	801372c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7fd ff54 	bl	80115d4 <tcp_abort>
          }
          return ERR_ABRT;
 801372c:	f06f 030c 	mvn.w	r3, #12
 8013730:	e1bd      	b.n	8013aae <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 fa42 	bl	8013bbc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013738:	4b6a      	ldr	r3, [pc, #424]	; (80138e4 <tcp_process+0x588>)
 801373a:	881b      	ldrh	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d005      	beq.n	801374c <tcp_process+0x3f0>
          recv_acked--;
 8013740:	4b68      	ldr	r3, [pc, #416]	; (80138e4 <tcp_process+0x588>)
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	3b01      	subs	r3, #1
 8013746:	b29a      	uxth	r2, r3
 8013748:	4b66      	ldr	r3, [pc, #408]	; (80138e4 <tcp_process+0x588>)
 801374a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	f241 121c 	movw	r2, #4380	; 0x111c
 8013756:	429a      	cmp	r2, r3
 8013758:	bf38      	it	cc
 801375a:	461a      	movcc	r2, r3
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	4293      	cmp	r3, r2
 8013764:	bf28      	it	cs
 8013766:	4613      	movcs	r3, r2
 8013768:	b29a      	uxth	r2, r3
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013770:	4b5d      	ldr	r3, [pc, #372]	; (80138e8 <tcp_process+0x58c>)
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	f003 0320 	and.w	r3, r3, #32
 8013778:	2b00      	cmp	r3, #0
 801377a:	d034      	beq.n	80137e6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	7e9b      	ldrb	r3, [r3, #26]
 8013780:	f043 0302 	orr.w	r3, r3, #2
 8013784:	b2da      	uxtb	r2, r3
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2207      	movs	r2, #7
 801378e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013790:	e029      	b.n	80137e6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013792:	4b4b      	ldr	r3, [pc, #300]	; (80138c0 <tcp_process+0x564>)
 8013794:	6818      	ldr	r0, [r3, #0]
 8013796:	4b4b      	ldr	r3, [pc, #300]	; (80138c4 <tcp_process+0x568>)
 8013798:	881b      	ldrh	r3, [r3, #0]
 801379a:	461a      	mov	r2, r3
 801379c:	4b4a      	ldr	r3, [pc, #296]	; (80138c8 <tcp_process+0x56c>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80137a2:	4b4a      	ldr	r3, [pc, #296]	; (80138cc <tcp_process+0x570>)
 80137a4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80137a6:	885b      	ldrh	r3, [r3, #2]
 80137a8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80137aa:	4a48      	ldr	r2, [pc, #288]	; (80138cc <tcp_process+0x570>)
 80137ac:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80137ae:	8812      	ldrh	r2, [r2, #0]
 80137b0:	b292      	uxth	r2, r2
 80137b2:	9201      	str	r2, [sp, #4]
 80137b4:	9300      	str	r3, [sp, #0]
 80137b6:	4b46      	ldr	r3, [pc, #280]	; (80138d0 <tcp_process+0x574>)
 80137b8:	4a46      	ldr	r2, [pc, #280]	; (80138d4 <tcp_process+0x578>)
 80137ba:	f002 fbff 	bl	8015fbc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80137be:	e16a      	b.n	8013a96 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80137c0:	4b3e      	ldr	r3, [pc, #248]	; (80138bc <tcp_process+0x560>)
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	f003 0302 	and.w	r3, r3, #2
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f000 8164 	beq.w	8013a96 <tcp_process+0x73a>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d2:	1e5a      	subs	r2, r3, #1
 80137d4:	4b3c      	ldr	r3, [pc, #240]	; (80138c8 <tcp_process+0x56c>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	429a      	cmp	r2, r3
 80137da:	f040 815c 	bne.w	8013a96 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f002 fc98 	bl	8016114 <tcp_rexmit>
    break;
 80137e4:	e157      	b.n	8013a96 <tcp_process+0x73a>
 80137e6:	e156      	b.n	8013a96 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f000 f9e7 	bl	8013bbc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80137ee:	4b3e      	ldr	r3, [pc, #248]	; (80138e8 <tcp_process+0x58c>)
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f003 0320 	and.w	r3, r3, #32
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f000 814f 	beq.w	8013a9a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	7e9b      	ldrb	r3, [r3, #26]
 8013800:	f043 0302 	orr.w	r3, r3, #2
 8013804:	b2da      	uxtb	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2207      	movs	r2, #7
 801380e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8013810:	e143      	b.n	8013a9a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 f9d2 	bl	8013bbc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013818:	4b33      	ldr	r3, [pc, #204]	; (80138e8 <tcp_process+0x58c>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	f003 0320 	and.w	r3, r3, #32
 8013820:	2b00      	cmp	r3, #0
 8013822:	d074      	beq.n	801390e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013824:	4b25      	ldr	r3, [pc, #148]	; (80138bc <tcp_process+0x560>)
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	f003 0310 	and.w	r3, r3, #16
 801382c:	2b00      	cmp	r3, #0
 801382e:	d063      	beq.n	80138f8 <tcp_process+0x59c>
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013834:	4b22      	ldr	r3, [pc, #136]	; (80138c0 <tcp_process+0x564>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	429a      	cmp	r2, r3
 801383a:	d15d      	bne.n	80138f8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013840:	2b00      	cmp	r3, #0
 8013842:	d159      	bne.n	80138f8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7e9b      	ldrb	r3, [r3, #26]
 8013848:	f043 0302 	orr.w	r3, r3, #2
 801384c:	b2da      	uxtb	r2, r3
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f7fe fee6 	bl	8012624 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013858:	4b24      	ldr	r3, [pc, #144]	; (80138ec <tcp_process+0x590>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	429a      	cmp	r2, r3
 8013860:	d105      	bne.n	801386e <tcp_process+0x512>
 8013862:	4b22      	ldr	r3, [pc, #136]	; (80138ec <tcp_process+0x590>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	4a20      	ldr	r2, [pc, #128]	; (80138ec <tcp_process+0x590>)
 801386a:	6013      	str	r3, [r2, #0]
 801386c:	e013      	b.n	8013896 <tcp_process+0x53a>
 801386e:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <tcp_process+0x590>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	617b      	str	r3, [r7, #20]
 8013874:	e00c      	b.n	8013890 <tcp_process+0x534>
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	429a      	cmp	r2, r3
 801387e:	d104      	bne.n	801388a <tcp_process+0x52e>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	68da      	ldr	r2, [r3, #12]
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	60da      	str	r2, [r3, #12]
 8013888:	e005      	b.n	8013896 <tcp_process+0x53a>
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	68db      	ldr	r3, [r3, #12]
 801388e:	617b      	str	r3, [r7, #20]
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1ef      	bne.n	8013876 <tcp_process+0x51a>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2200      	movs	r2, #0
 801389a:	60da      	str	r2, [r3, #12]
 801389c:	4b14      	ldr	r3, [pc, #80]	; (80138f0 <tcp_process+0x594>)
 801389e:	2201      	movs	r2, #1
 80138a0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	220a      	movs	r2, #10
 80138a6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80138a8:	4b12      	ldr	r3, [pc, #72]	; (80138f4 <tcp_process+0x598>)
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	60da      	str	r2, [r3, #12]
 80138b0:	4a10      	ldr	r2, [pc, #64]	; (80138f4 <tcp_process+0x598>)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	f002 fdd3 	bl	8016460 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80138ba:	e0f0      	b.n	8013a9e <tcp_process+0x742>
 80138bc:	2000c830 	.word	0x2000c830
 80138c0:	2000c828 	.word	0x2000c828
 80138c4:	2000c82e 	.word	0x2000c82e
 80138c8:	2000c824 	.word	0x2000c824
 80138cc:	2000c814 	.word	0x2000c814
 80138d0:	2000d120 	.word	0x2000d120
 80138d4:	2000d124 	.word	0x2000d124
 80138d8:	0801bfc8 	.word	0x0801bfc8
 80138dc:	0801c1f0 	.word	0x0801c1f0
 80138e0:	0801c030 	.word	0x0801c030
 80138e4:	2000c82c 	.word	0x2000c82c
 80138e8:	2000c831 	.word	0x2000c831
 80138ec:	200101cc 	.word	0x200101cc
 80138f0:	200101c8 	.word	0x200101c8
 80138f4:	200101dc 	.word	0x200101dc
        tcp_ack_now(pcb);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	7e9b      	ldrb	r3, [r3, #26]
 80138fc:	f043 0302 	orr.w	r3, r3, #2
 8013900:	b2da      	uxtb	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2208      	movs	r2, #8
 801390a:	751a      	strb	r2, [r3, #20]
    break;
 801390c:	e0c7      	b.n	8013a9e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801390e:	4b6a      	ldr	r3, [pc, #424]	; (8013ab8 <tcp_process+0x75c>)
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	f003 0310 	and.w	r3, r3, #16
 8013916:	2b00      	cmp	r3, #0
 8013918:	f000 80c1 	beq.w	8013a9e <tcp_process+0x742>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013920:	4b66      	ldr	r3, [pc, #408]	; (8013abc <tcp_process+0x760>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	429a      	cmp	r2, r3
 8013926:	f040 80ba 	bne.w	8013a9e <tcp_process+0x742>
               pcb->unsent == NULL) {
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801392e:	2b00      	cmp	r3, #0
 8013930:	f040 80b5 	bne.w	8013a9e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2206      	movs	r2, #6
 8013938:	751a      	strb	r2, [r3, #20]
    break;
 801393a:	e0b0      	b.n	8013a9e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f000 f93d 	bl	8013bbc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013942:	4b5f      	ldr	r3, [pc, #380]	; (8013ac0 <tcp_process+0x764>)
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	f003 0320 	and.w	r3, r3, #32
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 80a9 	beq.w	8013aa2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	7e9b      	ldrb	r3, [r3, #26]
 8013954:	f043 0302 	orr.w	r3, r3, #2
 8013958:	b2da      	uxtb	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f7fe fe60 	bl	8012624 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013964:	4b57      	ldr	r3, [pc, #348]	; (8013ac4 <tcp_process+0x768>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	687a      	ldr	r2, [r7, #4]
 801396a:	429a      	cmp	r2, r3
 801396c:	d105      	bne.n	801397a <tcp_process+0x61e>
 801396e:	4b55      	ldr	r3, [pc, #340]	; (8013ac4 <tcp_process+0x768>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	4a53      	ldr	r2, [pc, #332]	; (8013ac4 <tcp_process+0x768>)
 8013976:	6013      	str	r3, [r2, #0]
 8013978:	e013      	b.n	80139a2 <tcp_process+0x646>
 801397a:	4b52      	ldr	r3, [pc, #328]	; (8013ac4 <tcp_process+0x768>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	613b      	str	r3, [r7, #16]
 8013980:	e00c      	b.n	801399c <tcp_process+0x640>
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	429a      	cmp	r2, r3
 801398a:	d104      	bne.n	8013996 <tcp_process+0x63a>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	68da      	ldr	r2, [r3, #12]
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	60da      	str	r2, [r3, #12]
 8013994:	e005      	b.n	80139a2 <tcp_process+0x646>
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	613b      	str	r3, [r7, #16]
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1ef      	bne.n	8013982 <tcp_process+0x626>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	60da      	str	r2, [r3, #12]
 80139a8:	4b47      	ldr	r3, [pc, #284]	; (8013ac8 <tcp_process+0x76c>)
 80139aa:	2201      	movs	r2, #1
 80139ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	220a      	movs	r2, #10
 80139b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80139b4:	4b45      	ldr	r3, [pc, #276]	; (8013acc <tcp_process+0x770>)
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	60da      	str	r2, [r3, #12]
 80139bc:	4a43      	ldr	r2, [pc, #268]	; (8013acc <tcp_process+0x770>)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6013      	str	r3, [r2, #0]
 80139c2:	f002 fd4d 	bl	8016460 <tcp_timer_needed>
    }
    break;
 80139c6:	e06c      	b.n	8013aa2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 f8f7 	bl	8013bbc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80139ce:	4b3a      	ldr	r3, [pc, #232]	; (8013ab8 <tcp_process+0x75c>)
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	f003 0310 	and.w	r3, r3, #16
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d065      	beq.n	8013aa6 <tcp_process+0x74a>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139de:	4b37      	ldr	r3, [pc, #220]	; (8013abc <tcp_process+0x760>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d15f      	bne.n	8013aa6 <tcp_process+0x74a>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d15b      	bne.n	8013aa6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7fe fe18 	bl	8012624 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80139f4:	4b33      	ldr	r3, [pc, #204]	; (8013ac4 <tcp_process+0x768>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d105      	bne.n	8013a0a <tcp_process+0x6ae>
 80139fe:	4b31      	ldr	r3, [pc, #196]	; (8013ac4 <tcp_process+0x768>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	4a2f      	ldr	r2, [pc, #188]	; (8013ac4 <tcp_process+0x768>)
 8013a06:	6013      	str	r3, [r2, #0]
 8013a08:	e013      	b.n	8013a32 <tcp_process+0x6d6>
 8013a0a:	4b2e      	ldr	r3, [pc, #184]	; (8013ac4 <tcp_process+0x768>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	60fb      	str	r3, [r7, #12]
 8013a10:	e00c      	b.n	8013a2c <tcp_process+0x6d0>
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d104      	bne.n	8013a26 <tcp_process+0x6ca>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68da      	ldr	r2, [r3, #12]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	60da      	str	r2, [r3, #12]
 8013a24:	e005      	b.n	8013a32 <tcp_process+0x6d6>
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	60fb      	str	r3, [r7, #12]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d1ef      	bne.n	8013a12 <tcp_process+0x6b6>
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2200      	movs	r2, #0
 8013a36:	60da      	str	r2, [r3, #12]
 8013a38:	4b23      	ldr	r3, [pc, #140]	; (8013ac8 <tcp_process+0x76c>)
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	220a      	movs	r2, #10
 8013a42:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013a44:	4b21      	ldr	r3, [pc, #132]	; (8013acc <tcp_process+0x770>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	60da      	str	r2, [r3, #12]
 8013a4c:	4a1f      	ldr	r2, [pc, #124]	; (8013acc <tcp_process+0x770>)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6013      	str	r3, [r2, #0]
 8013a52:	f002 fd05 	bl	8016460 <tcp_timer_needed>
    }
    break;
 8013a56:	e026      	b.n	8013aa6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 f8af 	bl	8013bbc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013a5e:	4b16      	ldr	r3, [pc, #88]	; (8013ab8 <tcp_process+0x75c>)
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	f003 0310 	and.w	r3, r3, #16
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d01f      	beq.n	8013aaa <tcp_process+0x74e>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a6e:	4b13      	ldr	r3, [pc, #76]	; (8013abc <tcp_process+0x760>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d119      	bne.n	8013aaa <tcp_process+0x74e>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d115      	bne.n	8013aaa <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8013a7e:	4b10      	ldr	r3, [pc, #64]	; (8013ac0 <tcp_process+0x764>)
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	f043 0310 	orr.w	r3, r3, #16
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	4b0d      	ldr	r3, [pc, #52]	; (8013ac0 <tcp_process+0x764>)
 8013a8a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8013a8c:	e00d      	b.n	8013aaa <tcp_process+0x74e>
  default:
    break;
 8013a8e:	bf00      	nop
 8013a90:	e00c      	b.n	8013aac <tcp_process+0x750>
    break;
 8013a92:	bf00      	nop
 8013a94:	e00a      	b.n	8013aac <tcp_process+0x750>
    break;
 8013a96:	bf00      	nop
 8013a98:	e008      	b.n	8013aac <tcp_process+0x750>
    break;
 8013a9a:	bf00      	nop
 8013a9c:	e006      	b.n	8013aac <tcp_process+0x750>
    break;
 8013a9e:	bf00      	nop
 8013aa0:	e004      	b.n	8013aac <tcp_process+0x750>
    break;
 8013aa2:	bf00      	nop
 8013aa4:	e002      	b.n	8013aac <tcp_process+0x750>
    break;
 8013aa6:	bf00      	nop
 8013aa8:	e000      	b.n	8013aac <tcp_process+0x750>
    break;
 8013aaa:	bf00      	nop
  }
  return ERR_OK;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3720      	adds	r7, #32
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2000c830 	.word	0x2000c830
 8013abc:	2000c828 	.word	0x2000c828
 8013ac0:	2000c831 	.word	0x2000c831
 8013ac4:	200101cc 	.word	0x200101cc
 8013ac8:	200101c8 	.word	0x200101c8
 8013acc:	200101dc 	.word	0x200101dc

08013ad0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013ad0:	b590      	push	{r4, r7, lr}
 8013ad2:	b085      	sub	sp, #20
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	899b      	ldrh	r3, [r3, #12]
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fb fe16 	bl	800f714 <lwip_htons>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d027      	beq.n	8013b42 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013af2:	6838      	ldr	r0, [r7, #0]
 8013af4:	f7fe fb2d 	bl	8012152 <tcp_segs_free>
    next = NULL;
 8013af8:	2300      	movs	r3, #0
 8013afa:	603b      	str	r3, [r7, #0]
 8013afc:	e055      	b.n	8013baa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	899b      	ldrh	r3, [r3, #12]
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fb fe04 	bl	800f714 <lwip_htons>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d00d      	beq.n	8013b32 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	899b      	ldrh	r3, [r3, #12]
 8013b1c:	b29c      	uxth	r4, r3
 8013b1e:	2001      	movs	r0, #1
 8013b20:	f7fb fdf8 	bl	800f714 <lwip_htons>
 8013b24:	4603      	mov	r3, r0
 8013b26:	461a      	mov	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	4322      	orrs	r2, r4
 8013b2e:	b292      	uxth	r2, r2
 8013b30:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7fe fb1c 	bl	801217a <tcp_seg_free>
    while (next &&
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00e      	beq.n	8013b66 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	891b      	ldrh	r3, [r3, #8]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b1a      	ldr	r3, [pc, #104]	; (8013bb8 <tcp_oos_insert_segment+0xe8>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	441a      	add	r2, r3
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	6839      	ldr	r1, [r7, #0]
 8013b5c:	8909      	ldrh	r1, [r1, #8]
 8013b5e:	440b      	add	r3, r1
 8013b60:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	dacb      	bge.n	8013afe <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d01e      	beq.n	8013baa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	891b      	ldrh	r3, [r3, #8]
 8013b70:	461a      	mov	r2, r3
 8013b72:	4b11      	ldr	r3, [pc, #68]	; (8013bb8 <tcp_oos_insert_segment+0xe8>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	441a      	add	r2, r3
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	dd12      	ble.n	8013baa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	4b0a      	ldr	r3, [pc, #40]	; (8013bb8 <tcp_oos_insert_segment+0xe8>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	1ad3      	subs	r3, r2, r3
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	685a      	ldr	r2, [r3, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	891b      	ldrh	r3, [r3, #8]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	f7fc fe5b 	bl	8010860 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	683a      	ldr	r2, [r7, #0]
 8013bae:	601a      	str	r2, [r3, #0]
}
 8013bb0:	bf00      	nop
 8013bb2:	3714      	adds	r7, #20
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd90      	pop	{r4, r7, pc}
 8013bb8:	2000c824 	.word	0x2000c824

08013bbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bbe:	b08d      	sub	sp, #52	; 0x34
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	d806      	bhi.n	8013bde <tcp_receive+0x22>
 8013bd0:	4ba6      	ldr	r3, [pc, #664]	; (8013e6c <tcp_receive+0x2b0>)
 8013bd2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8013bd6:	49a6      	ldr	r1, [pc, #664]	; (8013e70 <tcp_receive+0x2b4>)
 8013bd8:	48a6      	ldr	r0, [pc, #664]	; (8013e74 <tcp_receive+0x2b8>)
 8013bda:	f005 fc91 	bl	8019500 <iprintf>

  if (flags & TCP_ACK) {
 8013bde:	4ba6      	ldr	r3, [pc, #664]	; (8013e78 <tcp_receive+0x2bc>)
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	f003 0310 	and.w	r3, r3, #16
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f000 82bf 	beq.w	801416a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bf8:	4413      	add	r3, r2
 8013bfa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c00:	4b9e      	ldr	r3, [pc, #632]	; (8013e7c <tcp_receive+0x2c0>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	1ad3      	subs	r3, r2, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	db1b      	blt.n	8013c42 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c0e:	4b9b      	ldr	r3, [pc, #620]	; (8013e7c <tcp_receive+0x2c0>)
 8013c10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d106      	bne.n	8013c24 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c1a:	4b99      	ldr	r3, [pc, #612]	; (8013e80 <tcp_receive+0x2c4>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	db0e      	blt.n	8013c42 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c28:	4b95      	ldr	r3, [pc, #596]	; (8013e80 <tcp_receive+0x2c4>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d141      	bne.n	8013cb4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c30:	4b94      	ldr	r3, [pc, #592]	; (8013e84 <tcp_receive+0x2c8>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	89db      	ldrh	r3, [r3, #14]
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d938      	bls.n	8013cb4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c42:	4b90      	ldr	r3, [pc, #576]	; (8013e84 <tcp_receive+0x2c8>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	89db      	ldrh	r3, [r3, #14]
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d205      	bcs.n	8013c6c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8013c6c:	4b83      	ldr	r3, [pc, #524]	; (8013e7c <tcp_receive+0x2c0>)
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8013c74:	4b82      	ldr	r3, [pc, #520]	; (8013e80 <tcp_receive+0x2c4>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d10d      	bne.n	8013ca2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d111      	bne.n	8013cb4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013ca0:	e008      	b.n	8013cb4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d003      	beq.n	8013cb4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013cb4:	4b72      	ldr	r3, [pc, #456]	; (8013e80 <tcp_receive+0x2c4>)
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	dc53      	bgt.n	8013d6a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013cc2:	4b71      	ldr	r3, [pc, #452]	; (8013e88 <tcp_receive+0x2cc>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d146      	bne.n	8013d58 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8013cd4:	4413      	add	r3, r2
 8013cd6:	697a      	ldr	r2, [r7, #20]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d13d      	bne.n	8013d58 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	db38      	blt.n	8013d58 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cea:	4b65      	ldr	r3, [pc, #404]	; (8013e80 <tcp_receive+0x2c4>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d132      	bne.n	8013d58 <tcp_receive+0x19c>
              found_dupack = 1;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cfc:	2bff      	cmp	r3, #255	; 0xff
 8013cfe:	d007      	beq.n	8013d10 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d06:	3301      	adds	r3, #1
 8013d08:	b2da      	uxtb	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	d916      	bls.n	8013d48 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d24:	4413      	add	r3, r2
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d912      	bls.n	8013d58 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d3c:	4413      	add	r3, r2
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d46:	e007      	b.n	8013d58 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d4e:	2b03      	cmp	r3, #3
 8013d50:	d102      	bne.n	8013d58 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f002 fa2e 	bl	80161b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	f040 8169 	bne.w	8014032 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d68:	e163      	b.n	8014032 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013d6a:	4b45      	ldr	r3, [pc, #276]	; (8013e80 <tcp_receive+0x2c4>)
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d72:	1ad3      	subs	r3, r2, r3
 8013d74:	3b01      	subs	r3, #1
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f2c0 8107 	blt.w	8013f8a <tcp_receive+0x3ce>
 8013d7c:	4b40      	ldr	r3, [pc, #256]	; (8013e80 <tcp_receive+0x2c4>)
 8013d7e:	681a      	ldr	r2, [r3, #0]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f300 80ff 	bgt.w	8013f8a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	7e9b      	ldrb	r3, [r3, #26]
 8013d90:	f003 0304 	and.w	r3, r3, #4
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00c      	beq.n	8013db2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	7e9b      	ldrb	r3, [r3, #26]
 8013d9c:	f023 0304 	bic.w	r3, r3, #4
 8013da0:	b2da      	uxtb	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013dc0:	10db      	asrs	r3, r3, #3
 8013dc2:	b21b      	sxth	r3, r3
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	4413      	add	r3, r2
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	b21a      	sxth	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013de2:	4b27      	ldr	r3, [pc, #156]	; (8013e80 <tcp_receive+0x2c4>)
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	7d1b      	ldrb	r3, [r3, #20]
 8013dee:	2b03      	cmp	r3, #3
 8013df0:	f240 8094 	bls.w	8013f1c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d216      	bcs.n	8013e32 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e0e:	4413      	add	r3, r2
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d97f      	bls.n	8013f1c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e26:	4413      	add	r3, r2
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e30:	e074      	b.n	8013f1c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e42:	fb03 f301 	mul.w	r3, r3, r1
 8013e46:	6879      	ldr	r1, [r7, #4]
 8013e48:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8013e4c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	4413      	add	r3, r2
 8013e54:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e5c:	8a7a      	ldrh	r2, [r7, #18]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d95c      	bls.n	8013f1c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	8a7a      	ldrh	r2, [r7, #18]
 8013e66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8013e6a:	e057      	b.n	8013f1c <tcp_receive+0x360>
 8013e6c:	0801bfc8 	.word	0x0801bfc8
 8013e70:	0801c210 	.word	0x0801c210
 8013e74:	0801c030 	.word	0x0801c030
 8013e78:	2000c830 	.word	0x2000c830
 8013e7c:	2000c824 	.word	0x2000c824
 8013e80:	2000c828 	.word	0x2000c828
 8013e84:	2000c814 	.word	0x2000c814
 8013e88:	2000c82e 	.word	0x2000c82e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e96:	681a      	ldr	r2, [r3, #0]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fc fee8 	bl	8010c7c <pbuf_clen>
 8013eac:	4603      	mov	r3, r0
 8013eae:	429c      	cmp	r4, r3
 8013eb0:	d206      	bcs.n	8013ec0 <tcp_receive+0x304>
 8013eb2:	4b70      	ldr	r3, [pc, #448]	; (8014074 <tcp_receive+0x4b8>)
 8013eb4:	f240 429e 	movw	r2, #1182	; 0x49e
 8013eb8:	496f      	ldr	r1, [pc, #444]	; (8014078 <tcp_receive+0x4bc>)
 8013eba:	4870      	ldr	r0, [pc, #448]	; (801407c <tcp_receive+0x4c0>)
 8013ebc:	f005 fb20 	bl	8019500 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fc fed9 	bl	8010c7c <pbuf_clen>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	461a      	mov	r2, r3
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013ed4:	1a9b      	subs	r3, r3, r2
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	891a      	ldrh	r2, [r3, #8]
 8013ee2:	4b67      	ldr	r3, [pc, #412]	; (8014080 <tcp_receive+0x4c4>)
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	4413      	add	r3, r2
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	4b65      	ldr	r3, [pc, #404]	; (8014080 <tcp_receive+0x4c4>)
 8013eec:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ef0:	f7fe f943 	bl	801217a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d00e      	beq.n	8013f1c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d10a      	bne.n	8013f1c <tcp_receive+0x360>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d106      	bne.n	8013f1c <tcp_receive+0x360>
 8013f0e:	4b59      	ldr	r3, [pc, #356]	; (8014074 <tcp_receive+0x4b8>)
 8013f10:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8013f14:	495b      	ldr	r1, [pc, #364]	; (8014084 <tcp_receive+0x4c8>)
 8013f16:	4859      	ldr	r0, [pc, #356]	; (801407c <tcp_receive+0x4c0>)
 8013f18:	f005 faf2 	bl	8019500 <iprintf>
      while (pcb->unacked != NULL &&
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d022      	beq.n	8013f6a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	685b      	ldr	r3, [r3, #4]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fb fbff 	bl	800f730 <lwip_htonl>
 8013f32:	4604      	mov	r4, r0
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f38:	891b      	ldrh	r3, [r3, #8]
 8013f3a:	461d      	mov	r5, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	899b      	ldrh	r3, [r3, #12]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fb fbe4 	bl	800f714 <lwip_htons>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	f003 0303 	and.w	r3, r3, #3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d001      	beq.n	8013f5a <tcp_receive+0x39e>
 8013f56:	2301      	movs	r3, #1
 8013f58:	e000      	b.n	8013f5c <tcp_receive+0x3a0>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	442b      	add	r3, r5
 8013f5e:	18e2      	adds	r2, r4, r3
 8013f60:	4b49      	ldr	r3, [pc, #292]	; (8014088 <tcp_receive+0x4cc>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	dd90      	ble.n	8013e8c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d104      	bne.n	8013f7c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f78:	861a      	strh	r2, [r3, #48]	; 0x30
 8013f7a:	e002      	b.n	8013f82 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	76da      	strb	r2, [r3, #27]
 8013f88:	e002      	b.n	8013f90 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f001 fd30 	bl	80159f0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013f90:	e04f      	b.n	8014032 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d103      	bne.n	8013fb2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2200      	movs	r2, #0
 8013fae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7fc fe5d 	bl	8010c7c <pbuf_clen>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	429c      	cmp	r4, r3
 8013fc6:	d206      	bcs.n	8013fd6 <tcp_receive+0x41a>
 8013fc8:	4b2a      	ldr	r3, [pc, #168]	; (8014074 <tcp_receive+0x4b8>)
 8013fca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013fce:	492a      	ldr	r1, [pc, #168]	; (8014078 <tcp_receive+0x4bc>)
 8013fd0:	482a      	ldr	r0, [pc, #168]	; (801407c <tcp_receive+0x4c0>)
 8013fd2:	f005 fa95 	bl	8019500 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8013fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fc fe4e 	bl	8010c7c <pbuf_clen>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013fea:	1a9b      	subs	r3, r3, r2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	891a      	ldrh	r2, [r3, #8]
 8013ff8:	4b21      	ldr	r3, [pc, #132]	; (8014080 <tcp_receive+0x4c4>)
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	4b1f      	ldr	r3, [pc, #124]	; (8014080 <tcp_receive+0x4c4>)
 8014002:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8014004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014006:	f7fe f8b8 	bl	801217a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00e      	beq.n	8014032 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014018:	2b00      	cmp	r3, #0
 801401a:	d10a      	bne.n	8014032 <tcp_receive+0x476>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <tcp_receive+0x476>
 8014024:	4b13      	ldr	r3, [pc, #76]	; (8014074 <tcp_receive+0x4b8>)
 8014026:	f240 42dd 	movw	r2, #1245	; 0x4dd
 801402a:	4916      	ldr	r1, [pc, #88]	; (8014084 <tcp_receive+0x4c8>)
 801402c:	4813      	ldr	r0, [pc, #76]	; (801407c <tcp_receive+0x4c0>)
 801402e:	f005 fa67 	bl	8019500 <iprintf>
    while (pcb->unsent != NULL &&
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014036:	2b00      	cmp	r3, #0
 8014038:	d036      	beq.n	80140a8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801403a:	4b13      	ldr	r3, [pc, #76]	; (8014088 <tcp_receive+0x4cc>)
 801403c:	681c      	ldr	r4, [r3, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	4618      	mov	r0, r3
 8014048:	f7fb fb72 	bl	800f730 <lwip_htonl>
 801404c:	4605      	mov	r5, r0
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014052:	891b      	ldrh	r3, [r3, #8]
 8014054:	461e      	mov	r6, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	899b      	ldrh	r3, [r3, #12]
 801405e:	b29b      	uxth	r3, r3
 8014060:	4618      	mov	r0, r3
 8014062:	f7fb fb57 	bl	800f714 <lwip_htons>
 8014066:	4603      	mov	r3, r0
 8014068:	f003 0303 	and.w	r3, r3, #3
 801406c:	2b00      	cmp	r3, #0
 801406e:	d00d      	beq.n	801408c <tcp_receive+0x4d0>
 8014070:	2301      	movs	r3, #1
 8014072:	e00c      	b.n	801408e <tcp_receive+0x4d2>
 8014074:	0801bfc8 	.word	0x0801bfc8
 8014078:	0801c22c 	.word	0x0801c22c
 801407c:	0801c030 	.word	0x0801c030
 8014080:	2000c82c 	.word	0x2000c82c
 8014084:	0801c254 	.word	0x0801c254
 8014088:	2000c828 	.word	0x2000c828
 801408c:	2300      	movs	r3, #0
 801408e:	4433      	add	r3, r6
 8014090:	442b      	add	r3, r5
 8014092:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8014094:	2b00      	cmp	r3, #0
 8014096:	db07      	blt.n	80140a8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014098:	4b8d      	ldr	r3, [pc, #564]	; (80142d0 <tcp_receive+0x714>)
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f77f af75 	ble.w	8013f92 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140ae:	4b89      	ldr	r3, [pc, #548]	; (80142d4 <tcp_receive+0x718>)
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	4413      	add	r3, r2
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d052      	beq.n	801416a <tcp_receive+0x5ae>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140c8:	4b81      	ldr	r3, [pc, #516]	; (80142d0 <tcp_receive+0x714>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	1ad3      	subs	r3, r2, r3
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	da4b      	bge.n	801416a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80140d2:	4b81      	ldr	r3, [pc, #516]	; (80142d8 <tcp_receive+0x71c>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140dc:	b29b      	uxth	r3, r3
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80140e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140ec:	10db      	asrs	r3, r3, #3
 80140ee:	b21b      	sxth	r3, r3
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140fe:	b29a      	uxth	r2, r3
 8014100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014102:	4413      	add	r3, r2
 8014104:	b29b      	uxth	r3, r3
 8014106:	b21a      	sxth	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801410c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014110:	2b00      	cmp	r3, #0
 8014112:	da03      	bge.n	801411c <tcp_receive+0x560>
        m = -m;
 8014114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014116:	425b      	negs	r3, r3
 8014118:	b29b      	uxth	r3, r3
 801411a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 801411c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014124:	109b      	asrs	r3, r3, #2
 8014126:	b21b      	sxth	r3, r3
 8014128:	b29b      	uxth	r3, r3
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	b29b      	uxth	r3, r3
 801412e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014136:	b29a      	uxth	r2, r3
 8014138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801413a:	4413      	add	r3, r2
 801413c:	b29b      	uxth	r3, r3
 801413e:	b21a      	sxth	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801414a:	10db      	asrs	r3, r3, #3
 801414c:	b21b      	sxth	r3, r3
 801414e:	b29a      	uxth	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014156:	b29b      	uxth	r3, r3
 8014158:	4413      	add	r3, r2
 801415a:	b29b      	uxth	r3, r3
 801415c:	b21a      	sxth	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801416a:	4b5c      	ldr	r3, [pc, #368]	; (80142dc <tcp_receive+0x720>)
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	f000 84f1 	beq.w	8014b56 <tcp_receive+0xf9a>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	7d1b      	ldrb	r3, [r3, #20]
 8014178:	2b06      	cmp	r3, #6
 801417a:	f200 84ec 	bhi.w	8014b56 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014182:	4b57      	ldr	r3, [pc, #348]	; (80142e0 <tcp_receive+0x724>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	3b01      	subs	r3, #1
 801418a:	2b00      	cmp	r3, #0
 801418c:	f2c0 80b8 	blt.w	8014300 <tcp_receive+0x744>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014194:	4b51      	ldr	r3, [pc, #324]	; (80142dc <tcp_receive+0x720>)
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	4619      	mov	r1, r3
 801419a:	4b51      	ldr	r3, [pc, #324]	; (80142e0 <tcp_receive+0x724>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	440b      	add	r3, r1
 80141a0:	1ad3      	subs	r3, r2, r3
 80141a2:	3301      	adds	r3, #1
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	f300 80ab 	bgt.w	8014300 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80141aa:	4b4e      	ldr	r3, [pc, #312]	; (80142e4 <tcp_receive+0x728>)
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141b4:	4b4a      	ldr	r3, [pc, #296]	; (80142e0 <tcp_receive+0x724>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	1ad3      	subs	r3, r2, r3
 80141ba:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80141bc:	4b49      	ldr	r3, [pc, #292]	; (80142e4 <tcp_receive+0x728>)
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d106      	bne.n	80141d2 <tcp_receive+0x616>
 80141c4:	4b48      	ldr	r3, [pc, #288]	; (80142e8 <tcp_receive+0x72c>)
 80141c6:	f240 523c 	movw	r2, #1340	; 0x53c
 80141ca:	4948      	ldr	r1, [pc, #288]	; (80142ec <tcp_receive+0x730>)
 80141cc:	4848      	ldr	r0, [pc, #288]	; (80142f0 <tcp_receive+0x734>)
 80141ce:	f005 f997 	bl	8019500 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80141d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80141d8:	4293      	cmp	r3, r2
 80141da:	dd06      	ble.n	80141ea <tcp_receive+0x62e>
 80141dc:	4b42      	ldr	r3, [pc, #264]	; (80142e8 <tcp_receive+0x72c>)
 80141de:	f240 523d 	movw	r2, #1341	; 0x53d
 80141e2:	4944      	ldr	r1, [pc, #272]	; (80142f4 <tcp_receive+0x738>)
 80141e4:	4842      	ldr	r0, [pc, #264]	; (80142f0 <tcp_receive+0x734>)
 80141e6:	f005 f98b 	bl	8019500 <iprintf>
      if (inseg.p->len < off) {
 80141ea:	4b3e      	ldr	r3, [pc, #248]	; (80142e4 <tcp_receive+0x728>)
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	895b      	ldrh	r3, [r3, #10]
 80141f0:	461a      	mov	r2, r3
 80141f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f4:	4293      	cmp	r3, r2
 80141f6:	dd3e      	ble.n	8014276 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80141f8:	4b3a      	ldr	r3, [pc, #232]	; (80142e4 <tcp_receive+0x728>)
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	891b      	ldrh	r3, [r3, #8]
 80141fe:	461a      	mov	r2, r3
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	4293      	cmp	r3, r2
 8014204:	dd06      	ble.n	8014214 <tcp_receive+0x658>
 8014206:	4b38      	ldr	r3, [pc, #224]	; (80142e8 <tcp_receive+0x72c>)
 8014208:	f240 523f 	movw	r2, #1343	; 0x53f
 801420c:	493a      	ldr	r1, [pc, #232]	; (80142f8 <tcp_receive+0x73c>)
 801420e:	4838      	ldr	r0, [pc, #224]	; (80142f0 <tcp_receive+0x734>)
 8014210:	f005 f976 	bl	8019500 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014214:	4b33      	ldr	r3, [pc, #204]	; (80142e4 <tcp_receive+0x728>)
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	891a      	ldrh	r2, [r3, #8]
 801421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421c:	b29b      	uxth	r3, r3
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8014222:	e00e      	b.n	8014242 <tcp_receive+0x686>
          off -= p->len;
 8014224:	69bb      	ldr	r3, [r7, #24]
 8014226:	895b      	ldrh	r3, [r3, #10]
 8014228:	461a      	mov	r2, r3
 801422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422c:	1a9b      	subs	r3, r3, r2
 801422e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	8a3a      	ldrh	r2, [r7, #16]
 8014234:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8014236:	69bb      	ldr	r3, [r7, #24]
 8014238:	2200      	movs	r2, #0
 801423a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	895b      	ldrh	r3, [r3, #10]
 8014246:	461a      	mov	r2, r3
 8014248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424a:	4293      	cmp	r3, r2
 801424c:	dcea      	bgt.n	8014224 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014250:	b29b      	uxth	r3, r3
 8014252:	425b      	negs	r3, r3
 8014254:	b29b      	uxth	r3, r3
 8014256:	b21b      	sxth	r3, r3
 8014258:	4619      	mov	r1, r3
 801425a:	69b8      	ldr	r0, [r7, #24]
 801425c:	f7fc fc50 	bl	8010b00 <pbuf_header>
 8014260:	4603      	mov	r3, r0
 8014262:	2b00      	cmp	r3, #0
 8014264:	d01c      	beq.n	80142a0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014266:	4b20      	ldr	r3, [pc, #128]	; (80142e8 <tcp_receive+0x72c>)
 8014268:	f240 524c 	movw	r2, #1356	; 0x54c
 801426c:	4923      	ldr	r1, [pc, #140]	; (80142fc <tcp_receive+0x740>)
 801426e:	4820      	ldr	r0, [pc, #128]	; (80142f0 <tcp_receive+0x734>)
 8014270:	f005 f946 	bl	8019500 <iprintf>
 8014274:	e014      	b.n	80142a0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8014276:	4b1b      	ldr	r3, [pc, #108]	; (80142e4 <tcp_receive+0x728>)
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801427c:	b292      	uxth	r2, r2
 801427e:	4252      	negs	r2, r2
 8014280:	b292      	uxth	r2, r2
 8014282:	b212      	sxth	r2, r2
 8014284:	4611      	mov	r1, r2
 8014286:	4618      	mov	r0, r3
 8014288:	f7fc fc3a 	bl	8010b00 <pbuf_header>
 801428c:	4603      	mov	r3, r0
 801428e:	2b00      	cmp	r3, #0
 8014290:	d006      	beq.n	80142a0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014292:	4b15      	ldr	r3, [pc, #84]	; (80142e8 <tcp_receive+0x72c>)
 8014294:	f240 5251 	movw	r2, #1361	; 0x551
 8014298:	4918      	ldr	r1, [pc, #96]	; (80142fc <tcp_receive+0x740>)
 801429a:	4815      	ldr	r0, [pc, #84]	; (80142f0 <tcp_receive+0x734>)
 801429c:	f005 f930 	bl	8019500 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80142a0:	4b10      	ldr	r3, [pc, #64]	; (80142e4 <tcp_receive+0x728>)
 80142a2:	891a      	ldrh	r2, [r3, #8]
 80142a4:	4b0e      	ldr	r3, [pc, #56]	; (80142e0 <tcp_receive+0x724>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	b299      	uxth	r1, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	1acb      	subs	r3, r1, r3
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	4413      	add	r3, r2
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	4b0a      	ldr	r3, [pc, #40]	; (80142e4 <tcp_receive+0x728>)
 80142ba:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c0:	4a07      	ldr	r2, [pc, #28]	; (80142e0 <tcp_receive+0x724>)
 80142c2:	6013      	str	r3, [r2, #0]
 80142c4:	4b07      	ldr	r3, [pc, #28]	; (80142e4 <tcp_receive+0x728>)
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	4a05      	ldr	r2, [pc, #20]	; (80142e0 <tcp_receive+0x724>)
 80142ca:	6812      	ldr	r2, [r2, #0]
 80142cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80142ce:	e025      	b.n	801431c <tcp_receive+0x760>
 80142d0:	2000c828 	.word	0x2000c828
 80142d4:	2000c82c 	.word	0x2000c82c
 80142d8:	200101d0 	.word	0x200101d0
 80142dc:	2000c82e 	.word	0x2000c82e
 80142e0:	2000c824 	.word	0x2000c824
 80142e4:	2000c804 	.word	0x2000c804
 80142e8:	0801bfc8 	.word	0x0801bfc8
 80142ec:	0801c274 	.word	0x0801c274
 80142f0:	0801c030 	.word	0x0801c030
 80142f4:	0801c284 	.word	0x0801c284
 80142f8:	0801c294 	.word	0x0801c294
 80142fc:	0801c2a4 	.word	0x0801c2a4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014300:	4b87      	ldr	r3, [pc, #540]	; (8014520 <tcp_receive+0x964>)
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014308:	1ad3      	subs	r3, r2, r3
 801430a:	2b00      	cmp	r3, #0
 801430c:	da06      	bge.n	801431c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	7e9b      	ldrb	r3, [r3, #26]
 8014312:	f043 0302 	orr.w	r3, r3, #2
 8014316:	b2da      	uxtb	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801431c:	4b80      	ldr	r3, [pc, #512]	; (8014520 <tcp_receive+0x964>)
 801431e:	681a      	ldr	r2, [r3, #0]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014324:	1ad3      	subs	r3, r2, r3
 8014326:	2b00      	cmp	r3, #0
 8014328:	f2c0 8410 	blt.w	8014b4c <tcp_receive+0xf90>
 801432c:	4b7c      	ldr	r3, [pc, #496]	; (8014520 <tcp_receive+0x964>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014338:	440b      	add	r3, r1
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	3301      	adds	r3, #1
 801433e:	2b00      	cmp	r3, #0
 8014340:	f300 8404 	bgt.w	8014b4c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014348:	4b75      	ldr	r3, [pc, #468]	; (8014520 <tcp_receive+0x964>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	429a      	cmp	r2, r3
 801434e:	f040 8287 	bne.w	8014860 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014352:	4b74      	ldr	r3, [pc, #464]	; (8014524 <tcp_receive+0x968>)
 8014354:	891c      	ldrh	r4, [r3, #8]
 8014356:	4b73      	ldr	r3, [pc, #460]	; (8014524 <tcp_receive+0x968>)
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	899b      	ldrh	r3, [r3, #12]
 801435c:	b29b      	uxth	r3, r3
 801435e:	4618      	mov	r0, r3
 8014360:	f7fb f9d8 	bl	800f714 <lwip_htons>
 8014364:	4603      	mov	r3, r0
 8014366:	f003 0303 	and.w	r3, r3, #3
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <tcp_receive+0x7b6>
 801436e:	2301      	movs	r3, #1
 8014370:	e000      	b.n	8014374 <tcp_receive+0x7b8>
 8014372:	2300      	movs	r3, #0
 8014374:	4423      	add	r3, r4
 8014376:	b29a      	uxth	r2, r3
 8014378:	4b6b      	ldr	r3, [pc, #428]	; (8014528 <tcp_receive+0x96c>)
 801437a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014380:	4b69      	ldr	r3, [pc, #420]	; (8014528 <tcp_receive+0x96c>)
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	429a      	cmp	r2, r3
 8014386:	d26e      	bcs.n	8014466 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014388:	4b66      	ldr	r3, [pc, #408]	; (8014524 <tcp_receive+0x968>)
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	899b      	ldrh	r3, [r3, #12]
 801438e:	b29b      	uxth	r3, r3
 8014390:	4618      	mov	r0, r3
 8014392:	f7fb f9bf 	bl	800f714 <lwip_htons>
 8014396:	4603      	mov	r3, r0
 8014398:	f003 0301 	and.w	r3, r3, #1
 801439c:	2b00      	cmp	r3, #0
 801439e:	d01b      	beq.n	80143d8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80143a0:	4b60      	ldr	r3, [pc, #384]	; (8014524 <tcp_receive+0x968>)
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80143ac:	b29c      	uxth	r4, r3
 80143ae:	4b5d      	ldr	r3, [pc, #372]	; (8014524 <tcp_receive+0x968>)
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	899b      	ldrh	r3, [r3, #12]
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7fb f9ac 	bl	800f714 <lwip_htons>
 80143bc:	4603      	mov	r3, r0
 80143be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fb f9a5 	bl	800f714 <lwip_htons>
 80143ca:	4603      	mov	r3, r0
 80143cc:	461a      	mov	r2, r3
 80143ce:	4b55      	ldr	r3, [pc, #340]	; (8014524 <tcp_receive+0x968>)
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	4322      	orrs	r2, r4
 80143d4:	b292      	uxth	r2, r2
 80143d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80143dc:	4b51      	ldr	r3, [pc, #324]	; (8014524 <tcp_receive+0x968>)
 80143de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80143e0:	4b50      	ldr	r3, [pc, #320]	; (8014524 <tcp_receive+0x968>)
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	899b      	ldrh	r3, [r3, #12]
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fb f993 	bl	800f714 <lwip_htons>
 80143ee:	4603      	mov	r3, r0
 80143f0:	f003 0302 	and.w	r3, r3, #2
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d005      	beq.n	8014404 <tcp_receive+0x848>
            inseg.len -= 1;
 80143f8:	4b4a      	ldr	r3, [pc, #296]	; (8014524 <tcp_receive+0x968>)
 80143fa:	891b      	ldrh	r3, [r3, #8]
 80143fc:	3b01      	subs	r3, #1
 80143fe:	b29a      	uxth	r2, r3
 8014400:	4b48      	ldr	r3, [pc, #288]	; (8014524 <tcp_receive+0x968>)
 8014402:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014404:	4b47      	ldr	r3, [pc, #284]	; (8014524 <tcp_receive+0x968>)
 8014406:	685a      	ldr	r2, [r3, #4]
 8014408:	4b46      	ldr	r3, [pc, #280]	; (8014524 <tcp_receive+0x968>)
 801440a:	891b      	ldrh	r3, [r3, #8]
 801440c:	4619      	mov	r1, r3
 801440e:	4610      	mov	r0, r2
 8014410:	f7fc fa26 	bl	8010860 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014414:	4b43      	ldr	r3, [pc, #268]	; (8014524 <tcp_receive+0x968>)
 8014416:	891c      	ldrh	r4, [r3, #8]
 8014418:	4b42      	ldr	r3, [pc, #264]	; (8014524 <tcp_receive+0x968>)
 801441a:	68db      	ldr	r3, [r3, #12]
 801441c:	899b      	ldrh	r3, [r3, #12]
 801441e:	b29b      	uxth	r3, r3
 8014420:	4618      	mov	r0, r3
 8014422:	f7fb f977 	bl	800f714 <lwip_htons>
 8014426:	4603      	mov	r3, r0
 8014428:	f003 0303 	and.w	r3, r3, #3
 801442c:	2b00      	cmp	r3, #0
 801442e:	d001      	beq.n	8014434 <tcp_receive+0x878>
 8014430:	2301      	movs	r3, #1
 8014432:	e000      	b.n	8014436 <tcp_receive+0x87a>
 8014434:	2300      	movs	r3, #0
 8014436:	4423      	add	r3, r4
 8014438:	b29a      	uxth	r2, r3
 801443a:	4b3b      	ldr	r3, [pc, #236]	; (8014528 <tcp_receive+0x96c>)
 801443c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801443e:	4b3a      	ldr	r3, [pc, #232]	; (8014528 <tcp_receive+0x96c>)
 8014440:	881b      	ldrh	r3, [r3, #0]
 8014442:	461a      	mov	r2, r3
 8014444:	4b36      	ldr	r3, [pc, #216]	; (8014520 <tcp_receive+0x964>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	441a      	add	r2, r3
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444e:	6879      	ldr	r1, [r7, #4]
 8014450:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014452:	440b      	add	r3, r1
 8014454:	429a      	cmp	r2, r3
 8014456:	d006      	beq.n	8014466 <tcp_receive+0x8aa>
 8014458:	4b34      	ldr	r3, [pc, #208]	; (801452c <tcp_receive+0x970>)
 801445a:	f240 527f 	movw	r2, #1407	; 0x57f
 801445e:	4934      	ldr	r1, [pc, #208]	; (8014530 <tcp_receive+0x974>)
 8014460:	4834      	ldr	r0, [pc, #208]	; (8014534 <tcp_receive+0x978>)
 8014462:	f005 f84d 	bl	8019500 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801446a:	2b00      	cmp	r3, #0
 801446c:	f000 80e1 	beq.w	8014632 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014470:	4b2c      	ldr	r3, [pc, #176]	; (8014524 <tcp_receive+0x968>)
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	899b      	ldrh	r3, [r3, #12]
 8014476:	b29b      	uxth	r3, r3
 8014478:	4618      	mov	r0, r3
 801447a:	f7fb f94b 	bl	800f714 <lwip_htons>
 801447e:	4603      	mov	r3, r0
 8014480:	f003 0301 	and.w	r3, r3, #1
 8014484:	2b00      	cmp	r3, #0
 8014486:	d010      	beq.n	80144aa <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014488:	e00a      	b.n	80144a0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801448e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801449a:	68b8      	ldr	r0, [r7, #8]
 801449c:	f7fd fe6d 	bl	801217a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d1f0      	bne.n	801448a <tcp_receive+0x8ce>
 80144a8:	e0c3      	b.n	8014632 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80144b0:	e04f      	b.n	8014552 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b4:	68db      	ldr	r3, [r3, #12]
 80144b6:	899b      	ldrh	r3, [r3, #12]
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7fb f92a 	bl	800f714 <lwip_htons>
 80144c0:	4603      	mov	r3, r0
 80144c2:	f003 0301 	and.w	r3, r3, #1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d03b      	beq.n	8014542 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80144ca:	4b16      	ldr	r3, [pc, #88]	; (8014524 <tcp_receive+0x968>)
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	899b      	ldrh	r3, [r3, #12]
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fb f91e 	bl	800f714 <lwip_htons>
 80144d8:	4603      	mov	r3, r0
 80144da:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d12f      	bne.n	8014542 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80144e2:	4b10      	ldr	r3, [pc, #64]	; (8014524 <tcp_receive+0x968>)
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	899b      	ldrh	r3, [r3, #12]
 80144e8:	b29c      	uxth	r4, r3
 80144ea:	2001      	movs	r0, #1
 80144ec:	f7fb f912 	bl	800f714 <lwip_htons>
 80144f0:	4603      	mov	r3, r0
 80144f2:	461a      	mov	r2, r3
 80144f4:	4b0b      	ldr	r3, [pc, #44]	; (8014524 <tcp_receive+0x968>)
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	4322      	orrs	r2, r4
 80144fa:	b292      	uxth	r2, r2
 80144fc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80144fe:	4b09      	ldr	r3, [pc, #36]	; (8014524 <tcp_receive+0x968>)
 8014500:	891c      	ldrh	r4, [r3, #8]
 8014502:	4b08      	ldr	r3, [pc, #32]	; (8014524 <tcp_receive+0x968>)
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	899b      	ldrh	r3, [r3, #12]
 8014508:	b29b      	uxth	r3, r3
 801450a:	4618      	mov	r0, r3
 801450c:	f7fb f902 	bl	800f714 <lwip_htons>
 8014510:	4603      	mov	r3, r0
 8014512:	f003 0303 	and.w	r3, r3, #3
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00e      	beq.n	8014538 <tcp_receive+0x97c>
 801451a:	2301      	movs	r3, #1
 801451c:	e00d      	b.n	801453a <tcp_receive+0x97e>
 801451e:	bf00      	nop
 8014520:	2000c824 	.word	0x2000c824
 8014524:	2000c804 	.word	0x2000c804
 8014528:	2000c82e 	.word	0x2000c82e
 801452c:	0801bfc8 	.word	0x0801bfc8
 8014530:	0801c2b8 	.word	0x0801c2b8
 8014534:	0801c030 	.word	0x0801c030
 8014538:	2300      	movs	r3, #0
 801453a:	4423      	add	r3, r4
 801453c:	b29a      	uxth	r2, r3
 801453e:	4b95      	ldr	r3, [pc, #596]	; (8014794 <tcp_receive+0xbd8>)
 8014540:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014544:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8014546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801454c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801454e:	f7fd fe14 	bl	801217a <tcp_seg_free>
            while (next &&
 8014552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00e      	beq.n	8014576 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014558:	4b8e      	ldr	r3, [pc, #568]	; (8014794 <tcp_receive+0xbd8>)
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	461a      	mov	r2, r3
 801455e:	4b8e      	ldr	r3, [pc, #568]	; (8014798 <tcp_receive+0xbdc>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	441a      	add	r2, r3
 8014564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801456c:	8909      	ldrh	r1, [r1, #8]
 801456e:	440b      	add	r3, r1
 8014570:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014572:	2b00      	cmp	r3, #0
 8014574:	da9d      	bge.n	80144b2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014578:	2b00      	cmp	r3, #0
 801457a:	d057      	beq.n	801462c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801457c:	4b85      	ldr	r3, [pc, #532]	; (8014794 <tcp_receive+0xbd8>)
 801457e:	881b      	ldrh	r3, [r3, #0]
 8014580:	461a      	mov	r2, r3
 8014582:	4b85      	ldr	r3, [pc, #532]	; (8014798 <tcp_receive+0xbdc>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	441a      	add	r2, r3
 8014588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014590:	2b00      	cmp	r3, #0
 8014592:	dd4b      	ble.n	801462c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014596:	68db      	ldr	r3, [r3, #12]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	b29a      	uxth	r2, r3
 801459c:	4b7e      	ldr	r3, [pc, #504]	; (8014798 <tcp_receive+0xbdc>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	1ad3      	subs	r3, r2, r3
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	4b7d      	ldr	r3, [pc, #500]	; (801479c <tcp_receive+0xbe0>)
 80145a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80145aa:	4b7c      	ldr	r3, [pc, #496]	; (801479c <tcp_receive+0xbe0>)
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	899b      	ldrh	r3, [r3, #12]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fb f8ae 	bl	800f714 <lwip_htons>
 80145b8:	4603      	mov	r3, r0
 80145ba:	f003 0302 	and.w	r3, r3, #2
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d005      	beq.n	80145ce <tcp_receive+0xa12>
                inseg.len -= 1;
 80145c2:	4b76      	ldr	r3, [pc, #472]	; (801479c <tcp_receive+0xbe0>)
 80145c4:	891b      	ldrh	r3, [r3, #8]
 80145c6:	3b01      	subs	r3, #1
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	4b74      	ldr	r3, [pc, #464]	; (801479c <tcp_receive+0xbe0>)
 80145cc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80145ce:	4b73      	ldr	r3, [pc, #460]	; (801479c <tcp_receive+0xbe0>)
 80145d0:	685a      	ldr	r2, [r3, #4]
 80145d2:	4b72      	ldr	r3, [pc, #456]	; (801479c <tcp_receive+0xbe0>)
 80145d4:	891b      	ldrh	r3, [r3, #8]
 80145d6:	4619      	mov	r1, r3
 80145d8:	4610      	mov	r0, r2
 80145da:	f7fc f941 	bl	8010860 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80145de:	4b6f      	ldr	r3, [pc, #444]	; (801479c <tcp_receive+0xbe0>)
 80145e0:	891c      	ldrh	r4, [r3, #8]
 80145e2:	4b6e      	ldr	r3, [pc, #440]	; (801479c <tcp_receive+0xbe0>)
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	899b      	ldrh	r3, [r3, #12]
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fb f892 	bl	800f714 <lwip_htons>
 80145f0:	4603      	mov	r3, r0
 80145f2:	f003 0303 	and.w	r3, r3, #3
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <tcp_receive+0xa42>
 80145fa:	2301      	movs	r3, #1
 80145fc:	e000      	b.n	8014600 <tcp_receive+0xa44>
 80145fe:	2300      	movs	r3, #0
 8014600:	4423      	add	r3, r4
 8014602:	b29a      	uxth	r2, r3
 8014604:	4b63      	ldr	r3, [pc, #396]	; (8014794 <tcp_receive+0xbd8>)
 8014606:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014608:	4b62      	ldr	r3, [pc, #392]	; (8014794 <tcp_receive+0xbd8>)
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	461a      	mov	r2, r3
 801460e:	4b62      	ldr	r3, [pc, #392]	; (8014798 <tcp_receive+0xbdc>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	441a      	add	r2, r3
 8014614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	429a      	cmp	r2, r3
 801461c:	d006      	beq.n	801462c <tcp_receive+0xa70>
 801461e:	4b60      	ldr	r3, [pc, #384]	; (80147a0 <tcp_receive+0xbe4>)
 8014620:	f240 52af 	movw	r2, #1455	; 0x5af
 8014624:	495f      	ldr	r1, [pc, #380]	; (80147a4 <tcp_receive+0xbe8>)
 8014626:	4860      	ldr	r0, [pc, #384]	; (80147a8 <tcp_receive+0xbec>)
 8014628:	f004 ff6a 	bl	8019500 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014630:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014632:	4b58      	ldr	r3, [pc, #352]	; (8014794 <tcp_receive+0xbd8>)
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	4b57      	ldr	r3, [pc, #348]	; (8014798 <tcp_receive+0xbdc>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	441a      	add	r2, r3
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014646:	4b53      	ldr	r3, [pc, #332]	; (8014794 <tcp_receive+0xbd8>)
 8014648:	881b      	ldrh	r3, [r3, #0]
 801464a:	429a      	cmp	r2, r3
 801464c:	d206      	bcs.n	801465c <tcp_receive+0xaa0>
 801464e:	4b54      	ldr	r3, [pc, #336]	; (80147a0 <tcp_receive+0xbe4>)
 8014650:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014654:	4955      	ldr	r1, [pc, #340]	; (80147ac <tcp_receive+0xbf0>)
 8014656:	4854      	ldr	r0, [pc, #336]	; (80147a8 <tcp_receive+0xbec>)
 8014658:	f004 ff52 	bl	8019500 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014660:	4b4c      	ldr	r3, [pc, #304]	; (8014794 <tcp_receive+0xbd8>)
 8014662:	881b      	ldrh	r3, [r3, #0]
 8014664:	1ad3      	subs	r3, r2, r3
 8014666:	b29a      	uxth	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7fd f8f7 	bl	8011860 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014672:	4b4a      	ldr	r3, [pc, #296]	; (801479c <tcp_receive+0xbe0>)
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	891b      	ldrh	r3, [r3, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d006      	beq.n	801468a <tcp_receive+0xace>
          recv_data = inseg.p;
 801467c:	4b47      	ldr	r3, [pc, #284]	; (801479c <tcp_receive+0xbe0>)
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	4a4b      	ldr	r2, [pc, #300]	; (80147b0 <tcp_receive+0xbf4>)
 8014682:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014684:	4b45      	ldr	r3, [pc, #276]	; (801479c <tcp_receive+0xbe0>)
 8014686:	2200      	movs	r2, #0
 8014688:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801468a:	4b44      	ldr	r3, [pc, #272]	; (801479c <tcp_receive+0xbe0>)
 801468c:	68db      	ldr	r3, [r3, #12]
 801468e:	899b      	ldrh	r3, [r3, #12]
 8014690:	b29b      	uxth	r3, r3
 8014692:	4618      	mov	r0, r3
 8014694:	f7fb f83e 	bl	800f714 <lwip_htons>
 8014698:	4603      	mov	r3, r0
 801469a:	f003 0301 	and.w	r3, r3, #1
 801469e:	2b00      	cmp	r3, #0
 80146a0:	f000 80b4 	beq.w	801480c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80146a4:	4b43      	ldr	r3, [pc, #268]	; (80147b4 <tcp_receive+0xbf8>)
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	f043 0320 	orr.w	r3, r3, #32
 80146ac:	b2da      	uxtb	r2, r3
 80146ae:	4b41      	ldr	r3, [pc, #260]	; (80147b4 <tcp_receive+0xbf8>)
 80146b0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80146b2:	e0ab      	b.n	801480c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146b8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	4a35      	ldr	r2, [pc, #212]	; (8014798 <tcp_receive+0xbdc>)
 80146c4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	891b      	ldrh	r3, [r3, #8]
 80146ca:	461c      	mov	r4, r3
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	899b      	ldrh	r3, [r3, #12]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7fb f81d 	bl	800f714 <lwip_htons>
 80146da:	4603      	mov	r3, r0
 80146dc:	f003 0303 	and.w	r3, r3, #3
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d001      	beq.n	80146e8 <tcp_receive+0xb2c>
 80146e4:	2301      	movs	r3, #1
 80146e6:	e000      	b.n	80146ea <tcp_receive+0xb2e>
 80146e8:	2300      	movs	r3, #0
 80146ea:	191a      	adds	r2, r3, r4
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f0:	441a      	add	r2, r3
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146fa:	461c      	mov	r4, r3
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	891b      	ldrh	r3, [r3, #8]
 8014700:	461d      	mov	r5, r3
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	899b      	ldrh	r3, [r3, #12]
 8014708:	b29b      	uxth	r3, r3
 801470a:	4618      	mov	r0, r3
 801470c:	f7fb f802 	bl	800f714 <lwip_htons>
 8014710:	4603      	mov	r3, r0
 8014712:	f003 0303 	and.w	r3, r3, #3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d001      	beq.n	801471e <tcp_receive+0xb62>
 801471a:	2301      	movs	r3, #1
 801471c:	e000      	b.n	8014720 <tcp_receive+0xb64>
 801471e:	2300      	movs	r3, #0
 8014720:	442b      	add	r3, r5
 8014722:	429c      	cmp	r4, r3
 8014724:	d206      	bcs.n	8014734 <tcp_receive+0xb78>
 8014726:	4b1e      	ldr	r3, [pc, #120]	; (80147a0 <tcp_receive+0xbe4>)
 8014728:	f240 52de 	movw	r2, #1502	; 0x5de
 801472c:	4922      	ldr	r1, [pc, #136]	; (80147b8 <tcp_receive+0xbfc>)
 801472e:	481e      	ldr	r0, [pc, #120]	; (80147a8 <tcp_receive+0xbec>)
 8014730:	f004 fee6 	bl	8019500 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	891b      	ldrh	r3, [r3, #8]
 8014738:	461c      	mov	r4, r3
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	899b      	ldrh	r3, [r3, #12]
 8014740:	b29b      	uxth	r3, r3
 8014742:	4618      	mov	r0, r3
 8014744:	f7fa ffe6 	bl	800f714 <lwip_htons>
 8014748:	4603      	mov	r3, r0
 801474a:	f003 0303 	and.w	r3, r3, #3
 801474e:	2b00      	cmp	r3, #0
 8014750:	d001      	beq.n	8014756 <tcp_receive+0xb9a>
 8014752:	2301      	movs	r3, #1
 8014754:	e000      	b.n	8014758 <tcp_receive+0xb9c>
 8014756:	2300      	movs	r3, #0
 8014758:	1919      	adds	r1, r3, r4
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801475e:	b28b      	uxth	r3, r1
 8014760:	1ad3      	subs	r3, r2, r3
 8014762:	b29a      	uxth	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7fd f879 	bl	8011860 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	891b      	ldrh	r3, [r3, #8]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d028      	beq.n	80147ca <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014778:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <tcp_receive+0xbf4>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d01d      	beq.n	80147bc <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8014780:	4b0b      	ldr	r3, [pc, #44]	; (80147b0 <tcp_receive+0xbf4>)
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	4619      	mov	r1, r3
 801478a:	4610      	mov	r0, r2
 801478c:	f7fc fab6 	bl	8010cfc <pbuf_cat>
 8014790:	e018      	b.n	80147c4 <tcp_receive+0xc08>
 8014792:	bf00      	nop
 8014794:	2000c82e 	.word	0x2000c82e
 8014798:	2000c824 	.word	0x2000c824
 801479c:	2000c804 	.word	0x2000c804
 80147a0:	0801bfc8 	.word	0x0801bfc8
 80147a4:	0801c2f0 	.word	0x0801c2f0
 80147a8:	0801c030 	.word	0x0801c030
 80147ac:	0801c32c 	.word	0x0801c32c
 80147b0:	2000c834 	.word	0x2000c834
 80147b4:	2000c831 	.word	0x2000c831
 80147b8:	0801c34c 	.word	0x0801c34c
            } else {
              recv_data = cseg->p;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	4a71      	ldr	r2, [pc, #452]	; (8014988 <tcp_receive+0xdcc>)
 80147c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2200      	movs	r2, #0
 80147c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	899b      	ldrh	r3, [r3, #12]
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fa ff9e 	bl	800f714 <lwip_htons>
 80147d8:	4603      	mov	r3, r0
 80147da:	f003 0301 	and.w	r3, r3, #1
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d00d      	beq.n	80147fe <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80147e2:	4b6a      	ldr	r3, [pc, #424]	; (801498c <tcp_receive+0xdd0>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	f043 0320 	orr.w	r3, r3, #32
 80147ea:	b2da      	uxtb	r2, r3
 80147ec:	4b67      	ldr	r3, [pc, #412]	; (801498c <tcp_receive+0xdd0>)
 80147ee:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	7d1b      	ldrb	r3, [r3, #20]
 80147f4:	2b04      	cmp	r3, #4
 80147f6:	d102      	bne.n	80147fe <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2207      	movs	r2, #7
 80147fc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	681a      	ldr	r2, [r3, #0]
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8014806:	68f8      	ldr	r0, [r7, #12]
 8014808:	f7fd fcb7 	bl	801217a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014810:	2b00      	cmp	r3, #0
 8014812:	d008      	beq.n	8014826 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	685a      	ldr	r2, [r3, #4]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014820:	429a      	cmp	r2, r3
 8014822:	f43f af47 	beq.w	80146b4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	7e9b      	ldrb	r3, [r3, #26]
 801482a:	f003 0301 	and.w	r3, r3, #1
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00e      	beq.n	8014850 <tcp_receive+0xc94>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	7e9b      	ldrb	r3, [r3, #26]
 8014836:	f023 0301 	bic.w	r3, r3, #1
 801483a:	b2da      	uxtb	r2, r3
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	769a      	strb	r2, [r3, #26]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	7e9b      	ldrb	r3, [r3, #26]
 8014844:	f043 0302 	orr.w	r3, r3, #2
 8014848:	b2da      	uxtb	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801484e:	e181      	b.n	8014b54 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	7e9b      	ldrb	r3, [r3, #26]
 8014854:	f043 0301 	orr.w	r3, r3, #1
 8014858:	b2da      	uxtb	r2, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801485e:	e179      	b.n	8014b54 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f001 f8c5 	bl	80159f0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801486e:	4848      	ldr	r0, [pc, #288]	; (8014990 <tcp_receive+0xdd4>)
 8014870:	f7fd fc9b 	bl	80121aa <tcp_seg_copy>
 8014874:	4602      	mov	r2, r0
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801487a:	e16b      	b.n	8014b54 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801487c:	2300      	movs	r3, #0
 801487e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014886:	e150      	b.n	8014b2a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8014888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	685a      	ldr	r2, [r3, #4]
 801488e:	4b41      	ldr	r3, [pc, #260]	; (8014994 <tcp_receive+0xdd8>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	429a      	cmp	r2, r3
 8014894:	d11d      	bne.n	80148d2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014896:	4b3e      	ldr	r3, [pc, #248]	; (8014990 <tcp_receive+0xdd4>)
 8014898:	891a      	ldrh	r2, [r3, #8]
 801489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489c:	891b      	ldrh	r3, [r3, #8]
 801489e:	429a      	cmp	r2, r3
 80148a0:	f240 8148 	bls.w	8014b34 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80148a4:	483a      	ldr	r0, [pc, #232]	; (8014990 <tcp_receive+0xdd4>)
 80148a6:	f7fd fc80 	bl	80121aa <tcp_seg_copy>
 80148aa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f000 8142 	beq.w	8014b38 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d003      	beq.n	80148c2 <tcp_receive+0xd06>
                    prev->next = cseg;
 80148ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	601a      	str	r2, [r3, #0]
 80148c0:	e002      	b.n	80148c8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	68fa      	ldr	r2, [r7, #12]
 80148c6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80148c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	f7ff f900 	bl	8013ad0 <tcp_oos_insert_segment>
                }
                break;
 80148d0:	e132      	b.n	8014b38 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80148d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d117      	bne.n	8014908 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80148d8:	4b2e      	ldr	r3, [pc, #184]	; (8014994 <tcp_receive+0xdd8>)
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	da57      	bge.n	8014998 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80148e8:	4829      	ldr	r0, [pc, #164]	; (8014990 <tcp_receive+0xdd4>)
 80148ea:	f7fd fc5e 	bl	80121aa <tcp_seg_copy>
 80148ee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	f000 8122 	beq.w	8014b3c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	68fa      	ldr	r2, [r7, #12]
 80148fc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80148fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	f7ff f8e5 	bl	8013ad0 <tcp_oos_insert_segment>
                  }
                  break;
 8014906:	e119      	b.n	8014b3c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8014908:	4b22      	ldr	r3, [pc, #136]	; (8014994 <tcp_receive+0xdd8>)
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	3b01      	subs	r3, #1
 8014916:	2b00      	cmp	r3, #0
 8014918:	db3e      	blt.n	8014998 <tcp_receive+0xddc>
 801491a:	4b1e      	ldr	r3, [pc, #120]	; (8014994 <tcp_receive+0xdd8>)
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	3301      	adds	r3, #1
 8014928:	2b00      	cmp	r3, #0
 801492a:	dc35      	bgt.n	8014998 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801492c:	4818      	ldr	r0, [pc, #96]	; (8014990 <tcp_receive+0xdd4>)
 801492e:	f7fd fc3c 	bl	80121aa <tcp_seg_copy>
 8014932:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2b00      	cmp	r3, #0
 8014938:	f000 8102 	beq.w	8014b40 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014944:	8912      	ldrh	r2, [r2, #8]
 8014946:	441a      	add	r2, r3
 8014948:	4b12      	ldr	r3, [pc, #72]	; (8014994 <tcp_receive+0xdd8>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	dd12      	ble.n	8014978 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014952:	4b10      	ldr	r3, [pc, #64]	; (8014994 <tcp_receive+0xdd8>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	b29a      	uxth	r2, r3
 8014958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	b29b      	uxth	r3, r3
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	b29a      	uxth	r2, r3
 8014964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014966:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496e:	891b      	ldrh	r3, [r3, #8]
 8014970:	4619      	mov	r1, r3
 8014972:	4610      	mov	r0, r2
 8014974:	f7fb ff74 	bl	8010860 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801497a:	68fa      	ldr	r2, [r7, #12]
 801497c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801497e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f7ff f8a5 	bl	8013ad0 <tcp_oos_insert_segment>
                  }
                  break;
 8014986:	e0db      	b.n	8014b40 <tcp_receive+0xf84>
 8014988:	2000c834 	.word	0x2000c834
 801498c:	2000c831 	.word	0x2000c831
 8014990:	2000c804 	.word	0x2000c804
 8014994:	2000c824 	.word	0x2000c824
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	f040 80bf 	bne.w	8014b20 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80149a2:	4b7c      	ldr	r3, [pc, #496]	; (8014b94 <tcp_receive+0xfd8>)
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	f340 80b6 	ble.w	8014b20 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	899b      	ldrh	r3, [r3, #12]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fa fea9 	bl	800f714 <lwip_htons>
 80149c2:	4603      	mov	r3, r0
 80149c4:	f003 0301 	and.w	r3, r3, #1
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f040 80bb 	bne.w	8014b44 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80149ce:	4872      	ldr	r0, [pc, #456]	; (8014b98 <tcp_receive+0xfdc>)
 80149d0:	f7fd fbeb 	bl	80121aa <tcp_seg_copy>
 80149d4:	4602      	mov	r2, r0
 80149d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80149da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	f000 80b2 	beq.w	8014b48 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80149e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149ec:	8912      	ldrh	r2, [r2, #8]
 80149ee:	441a      	add	r2, r3
 80149f0:	4b68      	ldr	r3, [pc, #416]	; (8014b94 <tcp_receive+0xfd8>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	1ad3      	subs	r3, r2, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	dd12      	ble.n	8014a20 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80149fa:	4b66      	ldr	r3, [pc, #408]	; (8014b94 <tcp_receive+0xfd8>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	1ad3      	subs	r3, r2, r3
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a12:	685a      	ldr	r2, [r3, #4]
 8014a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a16:	891b      	ldrh	r3, [r3, #8]
 8014a18:	4619      	mov	r1, r3
 8014a1a:	4610      	mov	r0, r2
 8014a1c:	f7fb ff20 	bl	8010860 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014a20:	4b5e      	ldr	r3, [pc, #376]	; (8014b9c <tcp_receive+0xfe0>)
 8014a22:	881b      	ldrh	r3, [r3, #0]
 8014a24:	461a      	mov	r2, r3
 8014a26:	4b5b      	ldr	r3, [pc, #364]	; (8014b94 <tcp_receive+0xfd8>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	441a      	add	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a30:	6879      	ldr	r1, [r7, #4]
 8014a32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a34:	440b      	add	r3, r1
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	f340 8085 	ble.w	8014b48 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	899b      	ldrh	r3, [r3, #12]
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7fa fe63 	bl	800f714 <lwip_htons>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	f003 0301 	and.w	r3, r3, #1
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d01e      	beq.n	8014a96 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	68db      	ldr	r3, [r3, #12]
 8014a5e:	899b      	ldrh	r3, [r3, #12]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a66:	b29c      	uxth	r4, r3
 8014a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	899b      	ldrh	r3, [r3, #12]
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fa fe4e 	bl	800f714 <lwip_htons>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fa fe47 	bl	800f714 <lwip_htons>
 8014a86:	4603      	mov	r3, r0
 8014a88:	461a      	mov	r2, r3
 8014a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	68db      	ldr	r3, [r3, #12]
 8014a90:	4322      	orrs	r2, r4
 8014a92:	b292      	uxth	r2, r2
 8014a94:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014aa0:	4413      	add	r3, r2
 8014aa2:	b299      	uxth	r1, r3
 8014aa4:	4b3b      	ldr	r3, [pc, #236]	; (8014b94 <tcp_receive+0xfd8>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	b29a      	uxth	r2, r3
 8014aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	1a8a      	subs	r2, r1, r2
 8014ab0:	b292      	uxth	r2, r2
 8014ab2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	685a      	ldr	r2, [r3, #4]
 8014aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	891b      	ldrh	r3, [r3, #8]
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4610      	mov	r0, r2
 8014ac4:	f7fb fecc 	bl	8010860 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	891c      	ldrh	r4, [r3, #8]
 8014ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	899b      	ldrh	r3, [r3, #12]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fa fe1b 	bl	800f714 <lwip_htons>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	f003 0303 	and.w	r3, r3, #3
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <tcp_receive+0xf30>
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e000      	b.n	8014aee <tcp_receive+0xf32>
 8014aec:	2300      	movs	r3, #0
 8014aee:	4423      	add	r3, r4
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	4b2a      	ldr	r3, [pc, #168]	; (8014b9c <tcp_receive+0xfe0>)
 8014af4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014af6:	4b29      	ldr	r3, [pc, #164]	; (8014b9c <tcp_receive+0xfe0>)
 8014af8:	881b      	ldrh	r3, [r3, #0]
 8014afa:	461a      	mov	r2, r3
 8014afc:	4b25      	ldr	r3, [pc, #148]	; (8014b94 <tcp_receive+0xfd8>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	441a      	add	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b06:	6879      	ldr	r1, [r7, #4]
 8014b08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b0a:	440b      	add	r3, r1
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d01b      	beq.n	8014b48 <tcp_receive+0xf8c>
 8014b10:	4b23      	ldr	r3, [pc, #140]	; (8014ba0 <tcp_receive+0xfe4>)
 8014b12:	f240 627b 	movw	r2, #1659	; 0x67b
 8014b16:	4923      	ldr	r1, [pc, #140]	; (8014ba4 <tcp_receive+0xfe8>)
 8014b18:	4823      	ldr	r0, [pc, #140]	; (8014ba8 <tcp_receive+0xfec>)
 8014b1a:	f004 fcf1 	bl	8019500 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014b1e:	e013      	b.n	8014b48 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8014b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b22:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f47f aeab 	bne.w	8014888 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8014b32:	e00f      	b.n	8014b54 <tcp_receive+0xf98>
                break;
 8014b34:	bf00      	nop
 8014b36:	e00d      	b.n	8014b54 <tcp_receive+0xf98>
                break;
 8014b38:	bf00      	nop
 8014b3a:	e00b      	b.n	8014b54 <tcp_receive+0xf98>
                  break;
 8014b3c:	bf00      	nop
 8014b3e:	e009      	b.n	8014b54 <tcp_receive+0xf98>
                  break;
 8014b40:	bf00      	nop
 8014b42:	e007      	b.n	8014b54 <tcp_receive+0xf98>
                  break;
 8014b44:	bf00      	nop
 8014b46:	e005      	b.n	8014b54 <tcp_receive+0xf98>
                break;
 8014b48:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8014b4a:	e003      	b.n	8014b54 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 ff4f 	bl	80159f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b52:	e01a      	b.n	8014b8a <tcp_receive+0xfce>
 8014b54:	e019      	b.n	8014b8a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b56:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <tcp_receive+0xfd8>)
 8014b58:	681a      	ldr	r2, [r3, #0]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	db0a      	blt.n	8014b7a <tcp_receive+0xfbe>
 8014b64:	4b0b      	ldr	r3, [pc, #44]	; (8014b94 <tcp_receive+0xfd8>)
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b6c:	6879      	ldr	r1, [r7, #4]
 8014b6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b70:	440b      	add	r3, r1
 8014b72:	1ad3      	subs	r3, r2, r3
 8014b74:	3301      	adds	r3, #1
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	dd07      	ble.n	8014b8a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	7e9b      	ldrb	r3, [r3, #26]
 8014b7e:	f043 0302 	orr.w	r3, r3, #2
 8014b82:	b2da      	uxtb	r2, r3
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014b88:	e7ff      	b.n	8014b8a <tcp_receive+0xfce>
 8014b8a:	bf00      	nop
 8014b8c:	3734      	adds	r7, #52	; 0x34
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b92:	bf00      	nop
 8014b94:	2000c824 	.word	0x2000c824
 8014b98:	2000c804 	.word	0x2000c804
 8014b9c:	2000c82e 	.word	0x2000c82e
 8014ba0:	0801bfc8 	.word	0x0801bfc8
 8014ba4:	0801c2b8 	.word	0x0801c2b8
 8014ba8:	0801c030 	.word	0x0801c030

08014bac <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014bb2:	4b18      	ldr	r3, [pc, #96]	; (8014c14 <tcp_getoptbyte+0x68>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d005      	beq.n	8014bc6 <tcp_getoptbyte+0x1a>
 8014bba:	4b17      	ldr	r3, [pc, #92]	; (8014c18 <tcp_getoptbyte+0x6c>)
 8014bbc:	881a      	ldrh	r2, [r3, #0]
 8014bbe:	4b17      	ldr	r3, [pc, #92]	; (8014c1c <tcp_getoptbyte+0x70>)
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d20e      	bcs.n	8014be4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014bc6:	4b16      	ldr	r3, [pc, #88]	; (8014c20 <tcp_getoptbyte+0x74>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	3314      	adds	r3, #20
 8014bcc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8014bce:	4b12      	ldr	r3, [pc, #72]	; (8014c18 <tcp_getoptbyte+0x6c>)
 8014bd0:	881b      	ldrh	r3, [r3, #0]
 8014bd2:	1c5a      	adds	r2, r3, #1
 8014bd4:	b291      	uxth	r1, r2
 8014bd6:	4a10      	ldr	r2, [pc, #64]	; (8014c18 <tcp_getoptbyte+0x6c>)
 8014bd8:	8011      	strh	r1, [r2, #0]
 8014bda:	461a      	mov	r2, r3
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	4413      	add	r3, r2
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	e010      	b.n	8014c06 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014be4:	4b0c      	ldr	r3, [pc, #48]	; (8014c18 <tcp_getoptbyte+0x6c>)
 8014be6:	881b      	ldrh	r3, [r3, #0]
 8014be8:	1c5a      	adds	r2, r3, #1
 8014bea:	b291      	uxth	r1, r2
 8014bec:	4a0a      	ldr	r2, [pc, #40]	; (8014c18 <tcp_getoptbyte+0x6c>)
 8014bee:	8011      	strh	r1, [r2, #0]
 8014bf0:	b2da      	uxtb	r2, r3
 8014bf2:	4b0a      	ldr	r3, [pc, #40]	; (8014c1c <tcp_getoptbyte+0x70>)
 8014bf4:	881b      	ldrh	r3, [r3, #0]
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	1ad3      	subs	r3, r2, r3
 8014bfa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8014bfc:	4b05      	ldr	r3, [pc, #20]	; (8014c14 <tcp_getoptbyte+0x68>)
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	79fb      	ldrb	r3, [r7, #7]
 8014c02:	4413      	add	r3, r2
 8014c04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	2000c81c 	.word	0x2000c81c
 8014c18:	2000c820 	.word	0x2000c820
 8014c1c:	2000c81a 	.word	0x2000c81a
 8014c20:	2000c814 	.word	0x2000c814

08014c24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014c2c:	4b2d      	ldr	r3, [pc, #180]	; (8014ce4 <tcp_parseopt+0xc0>)
 8014c2e:	881b      	ldrh	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d053      	beq.n	8014cdc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c34:	4b2c      	ldr	r3, [pc, #176]	; (8014ce8 <tcp_parseopt+0xc4>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	801a      	strh	r2, [r3, #0]
 8014c3a:	e043      	b.n	8014cc4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8014c3c:	f7ff ffb6 	bl	8014bac <tcp_getoptbyte>
 8014c40:	4603      	mov	r3, r0
 8014c42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c44:	7bfb      	ldrb	r3, [r7, #15]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d03c      	beq.n	8014cc4 <tcp_parseopt+0xa0>
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d002      	beq.n	8014c54 <tcp_parseopt+0x30>
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d03f      	beq.n	8014cd2 <tcp_parseopt+0xae>
 8014c52:	e026      	b.n	8014ca2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014c54:	f7ff ffaa 	bl	8014bac <tcp_getoptbyte>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b04      	cmp	r3, #4
 8014c5c:	d13b      	bne.n	8014cd6 <tcp_parseopt+0xb2>
 8014c5e:	4b22      	ldr	r3, [pc, #136]	; (8014ce8 <tcp_parseopt+0xc4>)
 8014c60:	881b      	ldrh	r3, [r3, #0]
 8014c62:	3302      	adds	r3, #2
 8014c64:	4a1f      	ldr	r2, [pc, #124]	; (8014ce4 <tcp_parseopt+0xc0>)
 8014c66:	8812      	ldrh	r2, [r2, #0]
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	dc34      	bgt.n	8014cd6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8014c6c:	f7ff ff9e 	bl	8014bac <tcp_getoptbyte>
 8014c70:	4603      	mov	r3, r0
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	021b      	lsls	r3, r3, #8
 8014c76:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014c78:	f7ff ff98 	bl	8014bac <tcp_getoptbyte>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	89bb      	ldrh	r3, [r7, #12]
 8014c82:	4313      	orrs	r3, r2
 8014c84:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014c86:	89bb      	ldrh	r3, [r7, #12]
 8014c88:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014c8c:	d804      	bhi.n	8014c98 <tcp_parseopt+0x74>
 8014c8e:	89bb      	ldrh	r3, [r7, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d001      	beq.n	8014c98 <tcp_parseopt+0x74>
 8014c94:	89ba      	ldrh	r2, [r7, #12]
 8014c96:	e001      	b.n	8014c9c <tcp_parseopt+0x78>
 8014c98:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014ca0:	e010      	b.n	8014cc4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014ca2:	f7ff ff83 	bl	8014bac <tcp_getoptbyte>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8014caa:	7afb      	ldrb	r3, [r7, #11]
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d914      	bls.n	8014cda <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014cb0:	7afb      	ldrb	r3, [r7, #11]
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	4b0c      	ldr	r3, [pc, #48]	; (8014ce8 <tcp_parseopt+0xc4>)
 8014cb6:	881b      	ldrh	r3, [r3, #0]
 8014cb8:	4413      	add	r3, r2
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	3b02      	subs	r3, #2
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	4b09      	ldr	r3, [pc, #36]	; (8014ce8 <tcp_parseopt+0xc4>)
 8014cc2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014cc4:	4b08      	ldr	r3, [pc, #32]	; (8014ce8 <tcp_parseopt+0xc4>)
 8014cc6:	881a      	ldrh	r2, [r3, #0]
 8014cc8:	4b06      	ldr	r3, [pc, #24]	; (8014ce4 <tcp_parseopt+0xc0>)
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d3b5      	bcc.n	8014c3c <tcp_parseopt+0x18>
 8014cd0:	e004      	b.n	8014cdc <tcp_parseopt+0xb8>
        return;
 8014cd2:	bf00      	nop
 8014cd4:	e002      	b.n	8014cdc <tcp_parseopt+0xb8>
          return;
 8014cd6:	bf00      	nop
 8014cd8:	e000      	b.n	8014cdc <tcp_parseopt+0xb8>
          return;
 8014cda:	bf00      	nop
      }
    }
  }
}
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	2000c818 	.word	0x2000c818
 8014ce8:	2000c820 	.word	0x2000c820

08014cec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014cec:	b480      	push	{r7}
 8014cee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014cf0:	4b05      	ldr	r3, [pc, #20]	; (8014d08 <tcp_trigger_input_pcb_close+0x1c>)
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	f043 0310 	orr.w	r3, r3, #16
 8014cf8:	b2da      	uxtb	r2, r3
 8014cfa:	4b03      	ldr	r3, [pc, #12]	; (8014d08 <tcp_trigger_input_pcb_close+0x1c>)
 8014cfc:	701a      	strb	r2, [r3, #0]
}
 8014cfe:	bf00      	nop
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr
 8014d08:	2000c831 	.word	0x2000c831

08014d0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b086      	sub	sp, #24
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	607b      	str	r3, [r7, #4]
 8014d16:	460b      	mov	r3, r1
 8014d18:	817b      	strh	r3, [r7, #10]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014d1e:	897a      	ldrh	r2, [r7, #10]
 8014d20:	893b      	ldrh	r3, [r7, #8]
 8014d22:	4413      	add	r3, r2
 8014d24:	b29b      	uxth	r3, r3
 8014d26:	3314      	adds	r3, #20
 8014d28:	b29b      	uxth	r3, r3
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	2001      	movs	r0, #1
 8014d30:	f7fb fb98 	bl	8010464 <pbuf_alloc>
 8014d34:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d057      	beq.n	8014dec <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	895b      	ldrh	r3, [r3, #10]
 8014d40:	461a      	mov	r2, r3
 8014d42:	897b      	ldrh	r3, [r7, #10]
 8014d44:	3314      	adds	r3, #20
 8014d46:	429a      	cmp	r2, r3
 8014d48:	da05      	bge.n	8014d56 <tcp_output_alloc_header+0x4a>
 8014d4a:	4b2b      	ldr	r3, [pc, #172]	; (8014df8 <tcp_output_alloc_header+0xec>)
 8014d4c:	2273      	movs	r2, #115	; 0x73
 8014d4e:	492b      	ldr	r1, [pc, #172]	; (8014dfc <tcp_output_alloc_header+0xf0>)
 8014d50:	482b      	ldr	r0, [pc, #172]	; (8014e00 <tcp_output_alloc_header+0xf4>)
 8014d52:	f004 fbd5 	bl	8019500 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	8adb      	ldrh	r3, [r3, #22]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7fa fcd7 	bl	800f714 <lwip_htons>
 8014d66:	4603      	mov	r3, r0
 8014d68:	461a      	mov	r2, r3
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	8b1b      	ldrh	r3, [r3, #24]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fa fcce 	bl	800f714 <lwip_htons>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fa fcd0 	bl	800f730 <lwip_htonl>
 8014d90:	4602      	mov	r2, r0
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014d96:	897b      	ldrh	r3, [r7, #10]
 8014d98:	089b      	lsrs	r3, r3, #2
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	3305      	adds	r3, #5
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	031b      	lsls	r3, r3, #12
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	f043 0310 	orr.w	r3, r3, #16
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fa fcb2 	bl	800f714 <lwip_htons>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fa fca9 	bl	800f714 <lwip_htons>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	741a      	strb	r2, [r3, #16]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	749a      	strb	r2, [r3, #18]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014de2:	68fa      	ldr	r2, [r7, #12]
 8014de4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014de6:	441a      	add	r2, r3
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014dec:	697b      	ldr	r3, [r7, #20]
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3718      	adds	r7, #24
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	0801c374 	.word	0x0801c374
 8014dfc:	0801c3cc 	.word	0x0801c3cc
 8014e00:	0801c3fc 	.word	0x0801c3fc

08014e04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d02d      	beq.n	8014e70 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e18:	60fb      	str	r3, [r7, #12]
 8014e1a:	e002      	b.n	8014e22 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1f8      	bne.n	8014e1c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	68db      	ldr	r3, [r3, #12]
 8014e2e:	899b      	ldrh	r3, [r3, #12]
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fa fc6e 	bl	800f714 <lwip_htons>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	f003 0307 	and.w	r3, r3, #7
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d116      	bne.n	8014e70 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	b29c      	uxth	r4, r3
 8014e4a:	2001      	movs	r0, #1
 8014e4c:	f7fa fc62 	bl	800f714 <lwip_htons>
 8014e50:	4603      	mov	r3, r0
 8014e52:	461a      	mov	r2, r3
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	4322      	orrs	r2, r4
 8014e5a:	b292      	uxth	r2, r2
 8014e5c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	7e9b      	ldrb	r3, [r3, #26]
 8014e62:	f043 0320 	orr.w	r3, r3, #32
 8014e66:	b2da      	uxtb	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e004      	b.n	8014e7a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014e70:	2101      	movs	r1, #1
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 fcc0 	bl	80157f8 <tcp_enqueue_flags>
 8014e78:	4603      	mov	r3, r0
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3714      	adds	r7, #20
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd90      	pop	{r4, r7, pc}
	...

08014e84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014e84:	b590      	push	{r4, r7, lr}
 8014e86:	b087      	sub	sp, #28
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	60f8      	str	r0, [r7, #12]
 8014e8c:	60b9      	str	r1, [r7, #8]
 8014e8e:	603b      	str	r3, [r7, #0]
 8014e90:	4613      	mov	r3, r2
 8014e92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	f003 0304 	and.w	r3, r3, #4
 8014ea0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014ea2:	2003      	movs	r0, #3
 8014ea4:	f7fb f842 	bl	800ff2c <memp_malloc>
 8014ea8:	6138      	str	r0, [r7, #16]
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d104      	bne.n	8014eba <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014eb0:	68b8      	ldr	r0, [r7, #8]
 8014eb2:	f7fb fe49 	bl	8010b48 <pbuf_free>
    return NULL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	e061      	b.n	8014f7e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ec0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	68ba      	ldr	r2, [r7, #8]
 8014ecc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	891a      	ldrh	r2, [r3, #8]
 8014ed2:	7dfb      	ldrb	r3, [r7, #23]
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d205      	bcs.n	8014ee6 <tcp_create_segment+0x62>
 8014eda:	4b2b      	ldr	r3, [pc, #172]	; (8014f88 <tcp_create_segment+0x104>)
 8014edc:	22ba      	movs	r2, #186	; 0xba
 8014ede:	492b      	ldr	r1, [pc, #172]	; (8014f8c <tcp_create_segment+0x108>)
 8014ee0:	482b      	ldr	r0, [pc, #172]	; (8014f90 <tcp_create_segment+0x10c>)
 8014ee2:	f004 fb0d 	bl	8019500 <iprintf>
  seg->len = p->tot_len - optlen;
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	891a      	ldrh	r2, [r3, #8]
 8014eea:	7dfb      	ldrb	r3, [r7, #23]
 8014eec:	b29b      	uxth	r3, r3
 8014eee:	1ad3      	subs	r3, r2, r3
 8014ef0:	b29a      	uxth	r2, r3
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014ef6:	2114      	movs	r1, #20
 8014ef8:	68b8      	ldr	r0, [r7, #8]
 8014efa:	f7fb fe01 	bl	8010b00 <pbuf_header>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d004      	beq.n	8014f0e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f04:	6938      	ldr	r0, [r7, #16]
 8014f06:	f7fd f938 	bl	801217a <tcp_seg_free>
    return NULL;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e037      	b.n	8014f7e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	685a      	ldr	r2, [r3, #4]
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	8ada      	ldrh	r2, [r3, #22]
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	68dc      	ldr	r4, [r3, #12]
 8014f20:	4610      	mov	r0, r2
 8014f22:	f7fa fbf7 	bl	800f714 <lwip_htons>
 8014f26:	4603      	mov	r3, r0
 8014f28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	8b1a      	ldrh	r2, [r3, #24]
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	68dc      	ldr	r4, [r3, #12]
 8014f32:	4610      	mov	r0, r2
 8014f34:	f7fa fbee 	bl	800f714 <lwip_htons>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	68dc      	ldr	r4, [r3, #12]
 8014f40:	6838      	ldr	r0, [r7, #0]
 8014f42:	f7fa fbf5 	bl	800f730 <lwip_htonl>
 8014f46:	4603      	mov	r3, r0
 8014f48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014f4a:	7dfb      	ldrb	r3, [r7, #23]
 8014f4c:	089b      	lsrs	r3, r3, #2
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	3305      	adds	r3, #5
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	031b      	lsls	r3, r3, #12
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	79fb      	ldrb	r3, [r7, #7]
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	4313      	orrs	r3, r2
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	68dc      	ldr	r4, [r3, #12]
 8014f66:	4610      	mov	r0, r2
 8014f68:	f7fa fbd4 	bl	800f714 <lwip_htons>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	2200      	movs	r2, #0
 8014f76:	749a      	strb	r2, [r3, #18]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8014f7c:	693b      	ldr	r3, [r7, #16]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	371c      	adds	r7, #28
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd90      	pop	{r4, r7, pc}
 8014f86:	bf00      	nop
 8014f88:	0801c374 	.word	0x0801c374
 8014f8c:	0801c424 	.word	0x0801c424
 8014f90:	0801c3fc 	.word	0x0801c3fc

08014f94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b086      	sub	sp, #24
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	607b      	str	r3, [r7, #4]
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	73fb      	strb	r3, [r7, #15]
 8014fa0:	460b      	mov	r3, r1
 8014fa2:	81bb      	strh	r3, [r7, #12]
 8014fa4:	4613      	mov	r3, r2
 8014fa6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014fa8:	89bb      	ldrh	r3, [r7, #12]
 8014faa:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014fac:	89ba      	ldrh	r2, [r7, #12]
 8014fae:	897b      	ldrh	r3, [r7, #10]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d221      	bcs.n	8014ff8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014fb8:	f003 0302 	and.w	r3, r3, #2
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d111      	bne.n	8014fe4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	7e9b      	ldrb	r3, [r3, #26]
 8014fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d115      	bne.n	8014ff8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8014fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d007      	beq.n	8014fe4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014fd4:	6a3b      	ldr	r3, [r7, #32]
 8014fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d103      	bne.n	8014fe4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
 8014fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d009      	beq.n	8014ff8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014fe4:	89bb      	ldrh	r3, [r7, #12]
 8014fe6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014fea:	f023 0203 	bic.w	r2, r3, #3
 8014fee:	897b      	ldrh	r3, [r7, #10]
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	bf28      	it	cs
 8014ff4:	4613      	movcs	r3, r2
 8014ff6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014ff8:	8af9      	ldrh	r1, [r7, #22]
 8014ffa:	7bfb      	ldrb	r3, [r7, #15]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7fb fa30 	bl	8010464 <pbuf_alloc>
 8015004:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d101      	bne.n	8015010 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801500c:	2300      	movs	r3, #0
 801500e:	e019      	b.n	8015044 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d006      	beq.n	8015026 <tcp_pbuf_prealloc+0x92>
 8015018:	4b0c      	ldr	r3, [pc, #48]	; (801504c <tcp_pbuf_prealloc+0xb8>)
 801501a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801501e:	490c      	ldr	r1, [pc, #48]	; (8015050 <tcp_pbuf_prealloc+0xbc>)
 8015020:	480c      	ldr	r0, [pc, #48]	; (8015054 <tcp_pbuf_prealloc+0xc0>)
 8015022:	f004 fa6d 	bl	8019500 <iprintf>
  *oversize = p->len - length;
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	895a      	ldrh	r2, [r3, #10]
 801502a:	89bb      	ldrh	r3, [r7, #12]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	b29a      	uxth	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	89ba      	ldrh	r2, [r7, #12]
 8015038:	811a      	strh	r2, [r3, #8]
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	891a      	ldrh	r2, [r3, #8]
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	815a      	strh	r2, [r3, #10]
  return p;
 8015042:	693b      	ldr	r3, [r7, #16]
}
 8015044:	4618      	mov	r0, r3
 8015046:	3718      	adds	r7, #24
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	0801c374 	.word	0x0801c374
 8015050:	0801c43c 	.word	0x0801c43c
 8015054:	0801c3fc 	.word	0x0801c3fc

08015058 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	460b      	mov	r3, r1
 8015062:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	7d1b      	ldrb	r3, [r3, #20]
 8015068:	2b04      	cmp	r3, #4
 801506a:	d00e      	beq.n	801508a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015070:	2b07      	cmp	r3, #7
 8015072:	d00a      	beq.n	801508a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015078:	2b02      	cmp	r3, #2
 801507a:	d006      	beq.n	801508a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015080:	2b03      	cmp	r3, #3
 8015082:	d002      	beq.n	801508a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015084:	f06f 030a 	mvn.w	r3, #10
 8015088:	e04f      	b.n	801512a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801508a:	887b      	ldrh	r3, [r7, #2]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d101      	bne.n	8015094 <tcp_write_checks+0x3c>
    return ERR_OK;
 8015090:	2300      	movs	r3, #0
 8015092:	e04a      	b.n	801512a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801509a:	887a      	ldrh	r2, [r7, #2]
 801509c:	429a      	cmp	r2, r3
 801509e:	d909      	bls.n	80150b4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	7e9b      	ldrb	r3, [r3, #26]
 80150a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80150a8:	b2da      	uxtb	r2, r3
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80150ae:	f04f 33ff 	mov.w	r3, #4294967295
 80150b2:	e03a      	b.n	801512a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150ba:	2b08      	cmp	r3, #8
 80150bc:	d806      	bhi.n	80150cc <tcp_write_checks+0x74>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150c4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d909      	bls.n	80150e0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	7e9b      	ldrb	r3, [r3, #26]
 80150d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80150d4:	b2da      	uxtb	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80150da:	f04f 33ff 	mov.w	r3, #4294967295
 80150de:	e024      	b.n	801512a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d00f      	beq.n	801510a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d11a      	bne.n	8015128 <tcp_write_checks+0xd0>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d116      	bne.n	8015128 <tcp_write_checks+0xd0>
 80150fa:	4b0e      	ldr	r3, [pc, #56]	; (8015134 <tcp_write_checks+0xdc>)
 80150fc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8015100:	490d      	ldr	r1, [pc, #52]	; (8015138 <tcp_write_checks+0xe0>)
 8015102:	480e      	ldr	r0, [pc, #56]	; (801513c <tcp_write_checks+0xe4>)
 8015104:	f004 f9fc 	bl	8019500 <iprintf>
 8015108:	e00e      	b.n	8015128 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801510e:	2b00      	cmp	r3, #0
 8015110:	d103      	bne.n	801511a <tcp_write_checks+0xc2>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015116:	2b00      	cmp	r3, #0
 8015118:	d006      	beq.n	8015128 <tcp_write_checks+0xd0>
 801511a:	4b06      	ldr	r3, [pc, #24]	; (8015134 <tcp_write_checks+0xdc>)
 801511c:	f240 1259 	movw	r2, #345	; 0x159
 8015120:	4907      	ldr	r1, [pc, #28]	; (8015140 <tcp_write_checks+0xe8>)
 8015122:	4806      	ldr	r0, [pc, #24]	; (801513c <tcp_write_checks+0xe4>)
 8015124:	f004 f9ec 	bl	8019500 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop
 8015134:	0801c374 	.word	0x0801c374
 8015138:	0801c450 	.word	0x0801c450
 801513c:	0801c3fc 	.word	0x0801c3fc
 8015140:	0801c48c 	.word	0x0801c48c

08015144 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015144:	b590      	push	{r4, r7, lr}
 8015146:	b09b      	sub	sp, #108	; 0x6c
 8015148:	af04      	add	r7, sp, #16
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	4611      	mov	r1, r2
 8015150:	461a      	mov	r2, r3
 8015152:	460b      	mov	r3, r1
 8015154:	80fb      	strh	r3, [r7, #6]
 8015156:	4613      	mov	r3, r2
 8015158:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801515a:	2300      	movs	r3, #0
 801515c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801515e:	2300      	movs	r3, #0
 8015160:	653b      	str	r3, [r7, #80]	; 0x50
 8015162:	2300      	movs	r3, #0
 8015164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015166:	2300      	movs	r3, #0
 8015168:	64bb      	str	r3, [r7, #72]	; 0x48
 801516a:	2300      	movs	r3, #0
 801516c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801516e:	2300      	movs	r3, #0
 8015170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8015174:	2300      	movs	r3, #0
 8015176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801517a:	2300      	movs	r3, #0
 801517c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015180:	2300      	movs	r3, #0
 8015182:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015184:	2300      	movs	r3, #0
 8015186:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015188:	2300      	movs	r3, #0
 801518a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015192:	085b      	lsrs	r3, r3, #1
 8015194:	b29a      	uxth	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801519a:	4293      	cmp	r3, r2
 801519c:	bf28      	it	cs
 801519e:	4613      	movcs	r3, r2
 80151a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80151a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d102      	bne.n	80151ae <tcp_write+0x6a>
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151ac:	e000      	b.n	80151b0 <tcp_write+0x6c>
 80151ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d109      	bne.n	80151cc <tcp_write+0x88>
 80151b8:	4b92      	ldr	r3, [pc, #584]	; (8015404 <tcp_write+0x2c0>)
 80151ba:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80151be:	4992      	ldr	r1, [pc, #584]	; (8015408 <tcp_write+0x2c4>)
 80151c0:	4892      	ldr	r0, [pc, #584]	; (801540c <tcp_write+0x2c8>)
 80151c2:	f004 f99d 	bl	8019500 <iprintf>
 80151c6:	f06f 030f 	mvn.w	r3, #15
 80151ca:	e30a      	b.n	80157e2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80151cc:	88fb      	ldrh	r3, [r7, #6]
 80151ce:	4619      	mov	r1, r3
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f7ff ff41 	bl	8015058 <tcp_write_checks>
 80151d6:	4603      	mov	r3, r0
 80151d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80151dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <tcp_write+0xa6>
    return err;
 80151e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80151e8:	e2fb      	b.n	80157e2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80151f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f000 80f5 	beq.w	80153e8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015202:	653b      	str	r3, [r7, #80]	; 0x50
 8015204:	e002      	b.n	801520c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8015206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801520c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d1f8      	bne.n	8015206 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015216:	7a9b      	ldrb	r3, [r3, #10]
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	b29b      	uxth	r3, r3
 801521c:	f003 0304 	and.w	r3, r3, #4
 8015220:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015226:	891b      	ldrh	r3, [r3, #8]
 8015228:	4619      	mov	r1, r3
 801522a:	8c3b      	ldrh	r3, [r7, #32]
 801522c:	440b      	add	r3, r1
 801522e:	429a      	cmp	r2, r3
 8015230:	da06      	bge.n	8015240 <tcp_write+0xfc>
 8015232:	4b74      	ldr	r3, [pc, #464]	; (8015404 <tcp_write+0x2c0>)
 8015234:	f240 12c7 	movw	r2, #455	; 0x1c7
 8015238:	4975      	ldr	r1, [pc, #468]	; (8015410 <tcp_write+0x2cc>)
 801523a:	4874      	ldr	r0, [pc, #464]	; (801540c <tcp_write+0x2c8>)
 801523c:	f004 f960 	bl	8019500 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015242:	891a      	ldrh	r2, [r3, #8]
 8015244:	8c3b      	ldrh	r3, [r7, #32]
 8015246:	4413      	add	r3, r2
 8015248:	b29b      	uxth	r3, r3
 801524a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801524c:	1ad3      	subs	r3, r2, r3
 801524e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015256:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015258:	8a7b      	ldrh	r3, [r7, #18]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d027      	beq.n	80152ae <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801525e:	8a7b      	ldrh	r3, [r7, #18]
 8015260:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015262:	429a      	cmp	r2, r3
 8015264:	d206      	bcs.n	8015274 <tcp_write+0x130>
 8015266:	4b67      	ldr	r3, [pc, #412]	; (8015404 <tcp_write+0x2c0>)
 8015268:	f240 12d9 	movw	r2, #473	; 0x1d9
 801526c:	4969      	ldr	r1, [pc, #420]	; (8015414 <tcp_write+0x2d0>)
 801526e:	4867      	ldr	r0, [pc, #412]	; (801540c <tcp_write+0x2c8>)
 8015270:	f004 f946 	bl	8019500 <iprintf>
      seg = last_unsent;
 8015274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015276:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015278:	8a7b      	ldrh	r3, [r7, #18]
 801527a:	88fa      	ldrh	r2, [r7, #6]
 801527c:	429a      	cmp	r2, r3
 801527e:	d901      	bls.n	8015284 <tcp_write+0x140>
 8015280:	8a7b      	ldrh	r3, [r7, #18]
 8015282:	e000      	b.n	8015286 <tcp_write+0x142>
 8015284:	88fb      	ldrh	r3, [r7, #6]
 8015286:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015288:	4293      	cmp	r3, r2
 801528a:	bfa8      	it	ge
 801528c:	4613      	movge	r3, r2
 801528e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015290:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015294:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015296:	4413      	add	r3, r2
 8015298:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801529c:	8a7a      	ldrh	r2, [r7, #18]
 801529e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80152a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80152ae:	8a7b      	ldrh	r3, [r7, #18]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d00b      	beq.n	80152cc <tcp_write+0x188>
 80152b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152b8:	88fb      	ldrh	r3, [r7, #6]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d006      	beq.n	80152cc <tcp_write+0x188>
 80152be:	4b51      	ldr	r3, [pc, #324]	; (8015404 <tcp_write+0x2c0>)
 80152c0:	f240 12e1 	movw	r2, #481	; 0x1e1
 80152c4:	4954      	ldr	r1, [pc, #336]	; (8015418 <tcp_write+0x2d4>)
 80152c6:	4851      	ldr	r0, [pc, #324]	; (801540c <tcp_write+0x2c8>)
 80152c8:	f004 f91a 	bl	8019500 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80152cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152d0:	88fb      	ldrh	r3, [r7, #6]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	f080 8168 	bcs.w	80155a8 <tcp_write+0x464>
 80152d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f000 8164 	beq.w	80155a8 <tcp_write+0x464>
 80152e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152e2:	891b      	ldrh	r3, [r3, #8]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f000 815f 	beq.w	80155a8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80152ea:	88fa      	ldrh	r2, [r7, #6]
 80152ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152f0:	1ad2      	subs	r2, r2, r3
 80152f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152f4:	4293      	cmp	r3, r2
 80152f6:	bfa8      	it	ge
 80152f8:	4613      	movge	r3, r2
 80152fa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80152fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152fe:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015300:	797b      	ldrb	r3, [r7, #5]
 8015302:	f003 0301 	and.w	r3, r3, #1
 8015306:	2b00      	cmp	r3, #0
 8015308:	d027      	beq.n	801535a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801530a:	f107 0012 	add.w	r0, r7, #18
 801530e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015310:	8bf9      	ldrh	r1, [r7, #30]
 8015312:	2301      	movs	r3, #1
 8015314:	9302      	str	r3, [sp, #8]
 8015316:	797b      	ldrb	r3, [r7, #5]
 8015318:	9301      	str	r3, [sp, #4]
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	9300      	str	r3, [sp, #0]
 801531e:	4603      	mov	r3, r0
 8015320:	2004      	movs	r0, #4
 8015322:	f7ff fe37 	bl	8014f94 <tcp_pbuf_prealloc>
 8015326:	6578      	str	r0, [r7, #84]	; 0x54
 8015328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801532a:	2b00      	cmp	r3, #0
 801532c:	f000 8227 	beq.w	801577e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015332:	6858      	ldr	r0, [r3, #4]
 8015334:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015338:	68ba      	ldr	r2, [r7, #8]
 801533a:	4413      	add	r3, r2
 801533c:	8bfa      	ldrh	r2, [r7, #30]
 801533e:	4619      	mov	r1, r3
 8015340:	f004 f8cb 	bl	80194da <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015344:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015346:	f7fb fc99 	bl	8010c7c <pbuf_clen>
 801534a:	4603      	mov	r3, r0
 801534c:	461a      	mov	r2, r3
 801534e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015352:	4413      	add	r3, r2
 8015354:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015358:	e03f      	b.n	80153da <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	637b      	str	r3, [r7, #52]	; 0x34
 8015360:	e002      	b.n	8015368 <tcp_write+0x224>
 8015362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	637b      	str	r3, [r7, #52]	; 0x34
 8015368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1f8      	bne.n	8015362 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015372:	7b1b      	ldrb	r3, [r3, #12]
 8015374:	2b01      	cmp	r3, #1
 8015376:	d115      	bne.n	80153a4 <tcp_write+0x260>
 8015378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801537e:	8952      	ldrh	r2, [r2, #10]
 8015380:	4413      	add	r3, r2
 8015382:	68ba      	ldr	r2, [r7, #8]
 8015384:	429a      	cmp	r2, r3
 8015386:	d10d      	bne.n	80153a4 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801538c:	2b00      	cmp	r3, #0
 801538e:	d006      	beq.n	801539e <tcp_write+0x25a>
 8015390:	4b1c      	ldr	r3, [pc, #112]	; (8015404 <tcp_write+0x2c0>)
 8015392:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015396:	4921      	ldr	r1, [pc, #132]	; (801541c <tcp_write+0x2d8>)
 8015398:	481c      	ldr	r0, [pc, #112]	; (801540c <tcp_write+0x2c8>)
 801539a:	f004 f8b1 	bl	8019500 <iprintf>
          extendlen = seglen;
 801539e:	8bfb      	ldrh	r3, [r7, #30]
 80153a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80153a2:	e01a      	b.n	80153da <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80153a4:	8bfb      	ldrh	r3, [r7, #30]
 80153a6:	2201      	movs	r2, #1
 80153a8:	4619      	mov	r1, r3
 80153aa:	2004      	movs	r0, #4
 80153ac:	f7fb f85a 	bl	8010464 <pbuf_alloc>
 80153b0:	6578      	str	r0, [r7, #84]	; 0x54
 80153b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 81e4 	beq.w	8015782 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80153ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153be:	68ba      	ldr	r2, [r7, #8]
 80153c0:	441a      	add	r2, r3
 80153c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153c4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80153c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80153c8:	f7fb fc58 	bl	8010c7c <pbuf_clen>
 80153cc:	4603      	mov	r3, r0
 80153ce:	461a      	mov	r2, r3
 80153d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80153d4:	4413      	add	r3, r2
 80153d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80153da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153de:	8bfb      	ldrh	r3, [r7, #30]
 80153e0:	4413      	add	r3, r2
 80153e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80153e6:	e0df      	b.n	80155a8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f000 80da 	beq.w	80155a8 <tcp_write+0x464>
 80153f4:	4b03      	ldr	r3, [pc, #12]	; (8015404 <tcp_write+0x2c0>)
 80153f6:	f240 2225 	movw	r2, #549	; 0x225
 80153fa:	4909      	ldr	r1, [pc, #36]	; (8015420 <tcp_write+0x2dc>)
 80153fc:	4803      	ldr	r0, [pc, #12]	; (801540c <tcp_write+0x2c8>)
 80153fe:	f004 f87f 	bl	8019500 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015402:	e0d1      	b.n	80155a8 <tcp_write+0x464>
 8015404:	0801c374 	.word	0x0801c374
 8015408:	0801c4c0 	.word	0x0801c4c0
 801540c:	0801c3fc 	.word	0x0801c3fc
 8015410:	0801c4f4 	.word	0x0801c4f4
 8015414:	0801c50c 	.word	0x0801c50c
 8015418:	0801c52c 	.word	0x0801c52c
 801541c:	0801c54c 	.word	0x0801c54c
 8015420:	0801c578 	.word	0x0801c578
    struct pbuf *p;
    u16_t left = len - pos;
 8015424:	88fa      	ldrh	r2, [r7, #6]
 8015426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801542a:	1ad3      	subs	r3, r2, r3
 801542c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801542e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015432:	b29b      	uxth	r3, r3
 8015434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015436:	1ad3      	subs	r3, r2, r3
 8015438:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801543a:	8b7a      	ldrh	r2, [r7, #26]
 801543c:	8bbb      	ldrh	r3, [r7, #28]
 801543e:	4293      	cmp	r3, r2
 8015440:	bf28      	it	cs
 8015442:	4613      	movcs	r3, r2
 8015444:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015446:	797b      	ldrb	r3, [r7, #5]
 8015448:	f003 0301 	and.w	r3, r3, #1
 801544c:	2b00      	cmp	r3, #0
 801544e:	d036      	beq.n	80154be <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015454:	b29a      	uxth	r2, r3
 8015456:	8b3b      	ldrh	r3, [r7, #24]
 8015458:	4413      	add	r3, r2
 801545a:	b299      	uxth	r1, r3
 801545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801545e:	2b00      	cmp	r3, #0
 8015460:	bf0c      	ite	eq
 8015462:	2301      	moveq	r3, #1
 8015464:	2300      	movne	r3, #0
 8015466:	b2db      	uxtb	r3, r3
 8015468:	f107 0012 	add.w	r0, r7, #18
 801546c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801546e:	9302      	str	r3, [sp, #8]
 8015470:	797b      	ldrb	r3, [r7, #5]
 8015472:	9301      	str	r3, [sp, #4]
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	4603      	mov	r3, r0
 801547a:	2000      	movs	r0, #0
 801547c:	f7ff fd8a 	bl	8014f94 <tcp_pbuf_prealloc>
 8015480:	6338      	str	r0, [r7, #48]	; 0x30
 8015482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015484:	2b00      	cmp	r3, #0
 8015486:	f000 817e 	beq.w	8015786 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801548c:	895b      	ldrh	r3, [r3, #10]
 801548e:	8b3a      	ldrh	r2, [r7, #24]
 8015490:	429a      	cmp	r2, r3
 8015492:	d906      	bls.n	80154a2 <tcp_write+0x35e>
 8015494:	4b8f      	ldr	r3, [pc, #572]	; (80156d4 <tcp_write+0x590>)
 8015496:	f240 2241 	movw	r2, #577	; 0x241
 801549a:	498f      	ldr	r1, [pc, #572]	; (80156d8 <tcp_write+0x594>)
 801549c:	488f      	ldr	r0, [pc, #572]	; (80156dc <tcp_write+0x598>)
 801549e:	f004 f82f 	bl	8019500 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80154a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a4:	685a      	ldr	r2, [r3, #4]
 80154a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154aa:	18d0      	adds	r0, r2, r3
 80154ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154b0:	68ba      	ldr	r2, [r7, #8]
 80154b2:	4413      	add	r3, r2
 80154b4:	8b3a      	ldrh	r2, [r7, #24]
 80154b6:	4619      	mov	r1, r3
 80154b8:	f004 f80f 	bl	80194da <memcpy>
 80154bc:	e02e      	b.n	801551c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80154be:	8a7b      	ldrh	r3, [r7, #18]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d006      	beq.n	80154d2 <tcp_write+0x38e>
 80154c4:	4b83      	ldr	r3, [pc, #524]	; (80156d4 <tcp_write+0x590>)
 80154c6:	f240 224b 	movw	r2, #587	; 0x24b
 80154ca:	4985      	ldr	r1, [pc, #532]	; (80156e0 <tcp_write+0x59c>)
 80154cc:	4883      	ldr	r0, [pc, #524]	; (80156dc <tcp_write+0x598>)
 80154ce:	f004 f817 	bl	8019500 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80154d2:	8b3b      	ldrh	r3, [r7, #24]
 80154d4:	2201      	movs	r2, #1
 80154d6:	4619      	mov	r1, r3
 80154d8:	2000      	movs	r0, #0
 80154da:	f7fa ffc3 	bl	8010464 <pbuf_alloc>
 80154de:	6178      	str	r0, [r7, #20]
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	f000 8151 	beq.w	801578a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80154e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154ec:	68ba      	ldr	r2, [r7, #8]
 80154ee:	441a      	add	r2, r3
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	2200      	movs	r2, #0
 80154fc:	4619      	mov	r1, r3
 80154fe:	2000      	movs	r0, #0
 8015500:	f7fa ffb0 	bl	8010464 <pbuf_alloc>
 8015504:	6338      	str	r0, [r7, #48]	; 0x30
 8015506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015508:	2b00      	cmp	r3, #0
 801550a:	d103      	bne.n	8015514 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801550c:	6978      	ldr	r0, [r7, #20]
 801550e:	f7fb fb1b 	bl	8010b48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015512:	e13d      	b.n	8015790 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015514:	6979      	ldr	r1, [r7, #20]
 8015516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015518:	f7fb fbf0 	bl	8010cfc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801551e:	f7fb fbad 	bl	8010c7c <pbuf_clen>
 8015522:	4603      	mov	r3, r0
 8015524:	461a      	mov	r2, r3
 8015526:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801552a:	4413      	add	r3, r2
 801552c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015534:	2b09      	cmp	r3, #9
 8015536:	d805      	bhi.n	8015544 <tcp_write+0x400>
 8015538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801553c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015540:	4293      	cmp	r3, r2
 8015542:	d903      	bls.n	801554c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015546:	f7fb faff 	bl	8010b48 <pbuf_free>
      goto memerr;
 801554a:	e121      	b.n	8015790 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015550:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015554:	441a      	add	r2, r3
 8015556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801555a:	9300      	str	r3, [sp, #0]
 801555c:	4613      	mov	r3, r2
 801555e:	2200      	movs	r2, #0
 8015560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7ff fc8e 	bl	8014e84 <tcp_create_segment>
 8015568:	64f8      	str	r0, [r7, #76]	; 0x4c
 801556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801556c:	2b00      	cmp	r3, #0
 801556e:	f000 810e 	beq.w	801578e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015574:	2b00      	cmp	r3, #0
 8015576:	d102      	bne.n	801557e <tcp_write+0x43a>
      queue = seg;
 8015578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801557a:	647b      	str	r3, [r7, #68]	; 0x44
 801557c:	e00c      	b.n	8015598 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015580:	2b00      	cmp	r3, #0
 8015582:	d106      	bne.n	8015592 <tcp_write+0x44e>
 8015584:	4b53      	ldr	r3, [pc, #332]	; (80156d4 <tcp_write+0x590>)
 8015586:	f240 2285 	movw	r2, #645	; 0x285
 801558a:	4956      	ldr	r1, [pc, #344]	; (80156e4 <tcp_write+0x5a0>)
 801558c:	4853      	ldr	r0, [pc, #332]	; (80156dc <tcp_write+0x598>)
 801558e:	f003 ffb7 	bl	8019500 <iprintf>
      prev_seg->next = seg;
 8015592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015596:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801559a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801559c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80155a0:	8b3b      	ldrh	r3, [r7, #24]
 80155a2:	4413      	add	r3, r2
 80155a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80155a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80155ac:	88fb      	ldrh	r3, [r7, #6]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	f4ff af38 	bcc.w	8015424 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80155b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d02c      	beq.n	8015614 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80155ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155c0:	e01e      	b.n	8015600 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80155c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c4:	891a      	ldrh	r2, [r3, #8]
 80155c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155c8:	4413      	add	r3, r2
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ce:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d110      	bne.n	80155fa <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80155d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155de:	8952      	ldrh	r2, [r2, #10]
 80155e0:	4413      	add	r3, r2
 80155e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80155e4:	68b9      	ldr	r1, [r7, #8]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f003 ff77 	bl	80194da <memcpy>
        p->len += oversize_used;
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	895a      	ldrh	r2, [r3, #10]
 80155f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155f2:	4413      	add	r3, r2
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80155fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015602:	2b00      	cmp	r3, #0
 8015604:	d1dd      	bne.n	80155c2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8015606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015608:	891a      	ldrh	r2, [r3, #8]
 801560a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801560c:	4413      	add	r3, r2
 801560e:	b29a      	uxth	r2, r3
 8015610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015612:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015614:	8a7a      	ldrh	r2, [r7, #18]
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801561c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801561e:	2b00      	cmp	r3, #0
 8015620:	d018      	beq.n	8015654 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015624:	2b00      	cmp	r3, #0
 8015626:	d106      	bne.n	8015636 <tcp_write+0x4f2>
 8015628:	4b2a      	ldr	r3, [pc, #168]	; (80156d4 <tcp_write+0x590>)
 801562a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801562e:	492e      	ldr	r1, [pc, #184]	; (80156e8 <tcp_write+0x5a4>)
 8015630:	482a      	ldr	r0, [pc, #168]	; (80156dc <tcp_write+0x598>)
 8015632:	f003 ff65 	bl	8019500 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801563c:	4618      	mov	r0, r3
 801563e:	f7fb fb5d 	bl	8010cfc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015644:	891a      	ldrh	r2, [r3, #8]
 8015646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015648:	891b      	ldrh	r3, [r3, #8]
 801564a:	4413      	add	r3, r2
 801564c:	b29a      	uxth	r2, r3
 801564e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015650:	811a      	strh	r2, [r3, #8]
 8015652:	e037      	b.n	80156c4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8015654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015656:	2b00      	cmp	r3, #0
 8015658:	d034      	beq.n	80156c4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801565a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801565c:	2b00      	cmp	r3, #0
 801565e:	d003      	beq.n	8015668 <tcp_write+0x524>
 8015660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d106      	bne.n	8015676 <tcp_write+0x532>
 8015668:	4b1a      	ldr	r3, [pc, #104]	; (80156d4 <tcp_write+0x590>)
 801566a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801566e:	491f      	ldr	r1, [pc, #124]	; (80156ec <tcp_write+0x5a8>)
 8015670:	481a      	ldr	r0, [pc, #104]	; (80156dc <tcp_write+0x598>)
 8015672:	f003 ff45 	bl	8019500 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	62bb      	str	r3, [r7, #40]	; 0x28
 801567c:	e009      	b.n	8015692 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015680:	891a      	ldrh	r2, [r3, #8]
 8015682:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015684:	4413      	add	r3, r2
 8015686:	b29a      	uxth	r2, r3
 8015688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	62bb      	str	r3, [r7, #40]	; 0x28
 8015692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d1f1      	bne.n	801567e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569c:	891a      	ldrh	r2, [r3, #8]
 801569e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156a0:	4413      	add	r3, r2
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80156a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156aa:	895a      	ldrh	r2, [r3, #10]
 80156ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156ae:	4413      	add	r3, r2
 80156b0:	b29a      	uxth	r2, r3
 80156b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80156b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156b8:	891a      	ldrh	r2, [r3, #8]
 80156ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156bc:	4413      	add	r3, r2
 80156be:	b29a      	uxth	r2, r3
 80156c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156c2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80156c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d112      	bne.n	80156f0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156ce:	669a      	str	r2, [r3, #104]	; 0x68
 80156d0:	e011      	b.n	80156f6 <tcp_write+0x5b2>
 80156d2:	bf00      	nop
 80156d4:	0801c374 	.word	0x0801c374
 80156d8:	0801c5a8 	.word	0x0801c5a8
 80156dc:	0801c3fc 	.word	0x0801c3fc
 80156e0:	0801c5e8 	.word	0x0801c5e8
 80156e4:	0801c5f8 	.word	0x0801c5f8
 80156e8:	0801c60c 	.word	0x0801c60c
 80156ec:	0801c644 	.word	0x0801c644
  } else {
    last_unsent->next = queue;
 80156f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80156fa:	88fb      	ldrh	r3, [r7, #6]
 80156fc:	441a      	add	r2, r3
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015708:	88fb      	ldrh	r3, [r7, #6]
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	b29a      	uxth	r2, r3
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801571a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015724:	2b00      	cmp	r3, #0
 8015726:	d00e      	beq.n	8015746 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10a      	bne.n	8015746 <tcp_write+0x602>
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015734:	2b00      	cmp	r3, #0
 8015736:	d106      	bne.n	8015746 <tcp_write+0x602>
 8015738:	4b2c      	ldr	r3, [pc, #176]	; (80157ec <tcp_write+0x6a8>)
 801573a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801573e:	492c      	ldr	r1, [pc, #176]	; (80157f0 <tcp_write+0x6ac>)
 8015740:	482c      	ldr	r0, [pc, #176]	; (80157f4 <tcp_write+0x6b0>)
 8015742:	f003 fedd 	bl	8019500 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8015746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015748:	2b00      	cmp	r3, #0
 801574a:	d016      	beq.n	801577a <tcp_write+0x636>
 801574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801574e:	68db      	ldr	r3, [r3, #12]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d012      	beq.n	801577a <tcp_write+0x636>
 8015754:	797b      	ldrb	r3, [r7, #5]
 8015756:	f003 0302 	and.w	r3, r3, #2
 801575a:	2b00      	cmp	r3, #0
 801575c:	d10d      	bne.n	801577a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	899b      	ldrh	r3, [r3, #12]
 8015764:	b29c      	uxth	r4, r3
 8015766:	2008      	movs	r0, #8
 8015768:	f7f9 ffd4 	bl	800f714 <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	461a      	mov	r2, r3
 8015770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015772:	68db      	ldr	r3, [r3, #12]
 8015774:	4322      	orrs	r2, r4
 8015776:	b292      	uxth	r2, r2
 8015778:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801577a:	2300      	movs	r3, #0
 801577c:	e031      	b.n	80157e2 <tcp_write+0x69e>
          goto memerr;
 801577e:	bf00      	nop
 8015780:	e006      	b.n	8015790 <tcp_write+0x64c>
            goto memerr;
 8015782:	bf00      	nop
 8015784:	e004      	b.n	8015790 <tcp_write+0x64c>
        goto memerr;
 8015786:	bf00      	nop
 8015788:	e002      	b.n	8015790 <tcp_write+0x64c>
        goto memerr;
 801578a:	bf00      	nop
 801578c:	e000      	b.n	8015790 <tcp_write+0x64c>
      goto memerr;
 801578e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	7e9b      	ldrb	r3, [r3, #26]
 8015794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015798:	b2da      	uxtb	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801579e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d002      	beq.n	80157aa <tcp_write+0x666>
    pbuf_free(concat_p);
 80157a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80157a6:	f7fb f9cf 	bl	8010b48 <pbuf_free>
  }
  if (queue != NULL) {
 80157aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d002      	beq.n	80157b6 <tcp_write+0x672>
    tcp_segs_free(queue);
 80157b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80157b2:	f7fc fcce 	bl	8012152 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d00e      	beq.n	80157de <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d10a      	bne.n	80157de <tcp_write+0x69a>
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d106      	bne.n	80157de <tcp_write+0x69a>
 80157d0:	4b06      	ldr	r3, [pc, #24]	; (80157ec <tcp_write+0x6a8>)
 80157d2:	f240 3202 	movw	r2, #770	; 0x302
 80157d6:	4906      	ldr	r1, [pc, #24]	; (80157f0 <tcp_write+0x6ac>)
 80157d8:	4806      	ldr	r0, [pc, #24]	; (80157f4 <tcp_write+0x6b0>)
 80157da:	f003 fe91 	bl	8019500 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80157de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	375c      	adds	r7, #92	; 0x5c
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd90      	pop	{r4, r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801c374 	.word	0x0801c374
 80157f0:	0801c67c 	.word	0x0801c67c
 80157f4:	0801c3fc 	.word	0x0801c3fc

080157f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b08a      	sub	sp, #40	; 0x28
 80157fc:	af02      	add	r7, sp, #8
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	460b      	mov	r3, r1
 8015802:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015804:	2300      	movs	r3, #0
 8015806:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015808:	2300      	movs	r3, #0
 801580a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801580c:	78fb      	ldrb	r3, [r7, #3]
 801580e:	f003 0303 	and.w	r3, r3, #3
 8015812:	2b00      	cmp	r3, #0
 8015814:	d106      	bne.n	8015824 <tcp_enqueue_flags+0x2c>
 8015816:	4b6f      	ldr	r3, [pc, #444]	; (80159d4 <tcp_enqueue_flags+0x1dc>)
 8015818:	f240 321b 	movw	r2, #795	; 0x31b
 801581c:	496e      	ldr	r1, [pc, #440]	; (80159d8 <tcp_enqueue_flags+0x1e0>)
 801581e:	486f      	ldr	r0, [pc, #444]	; (80159dc <tcp_enqueue_flags+0x1e4>)
 8015820:	f003 fe6e 	bl	8019500 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801582a:	2b08      	cmp	r3, #8
 801582c:	d806      	bhi.n	801583c <tcp_enqueue_flags+0x44>
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015834:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015838:	4293      	cmp	r3, r2
 801583a:	d90e      	bls.n	801585a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 801583c:	78fb      	ldrb	r3, [r7, #3]
 801583e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015842:	2b00      	cmp	r3, #0
 8015844:	d109      	bne.n	801585a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	7e9b      	ldrb	r3, [r3, #26]
 801584a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801584e:	b2da      	uxtb	r2, r3
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015854:	f04f 33ff 	mov.w	r3, #4294967295
 8015858:	e0b7      	b.n	80159ca <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801585a:	78fb      	ldrb	r3, [r7, #3]
 801585c:	f003 0302 	and.w	r3, r3, #2
 8015860:	2b00      	cmp	r3, #0
 8015862:	d001      	beq.n	8015868 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015864:	2301      	movs	r3, #1
 8015866:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015868:	7ffb      	ldrb	r3, [r7, #31]
 801586a:	009b      	lsls	r3, r3, #2
 801586c:	b2db      	uxtb	r3, r3
 801586e:	f003 0304 	and.w	r3, r3, #4
 8015872:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015874:	7dfb      	ldrb	r3, [r7, #23]
 8015876:	b29b      	uxth	r3, r3
 8015878:	2200      	movs	r2, #0
 801587a:	4619      	mov	r1, r3
 801587c:	2000      	movs	r0, #0
 801587e:	f7fa fdf1 	bl	8010464 <pbuf_alloc>
 8015882:	6138      	str	r0, [r7, #16]
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	7e9b      	ldrb	r3, [r3, #26]
 801588e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015892:	b2da      	uxtb	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015898:	f04f 33ff 	mov.w	r3, #4294967295
 801589c:	e095      	b.n	80159ca <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	895a      	ldrh	r2, [r3, #10]
 80158a2:	7dfb      	ldrb	r3, [r7, #23]
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d206      	bcs.n	80158b8 <tcp_enqueue_flags+0xc0>
 80158aa:	4b4a      	ldr	r3, [pc, #296]	; (80159d4 <tcp_enqueue_flags+0x1dc>)
 80158ac:	f240 3241 	movw	r2, #833	; 0x341
 80158b0:	494b      	ldr	r1, [pc, #300]	; (80159e0 <tcp_enqueue_flags+0x1e8>)
 80158b2:	484a      	ldr	r0, [pc, #296]	; (80159dc <tcp_enqueue_flags+0x1e4>)
 80158b4:	f003 fe24 	bl	8019500 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80158bc:	78fa      	ldrb	r2, [r7, #3]
 80158be:	7ffb      	ldrb	r3, [r7, #31]
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	460b      	mov	r3, r1
 80158c4:	6939      	ldr	r1, [r7, #16]
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff fadc 	bl	8014e84 <tcp_create_segment>
 80158cc:	60f8      	str	r0, [r7, #12]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d109      	bne.n	80158e8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	7e9b      	ldrb	r3, [r3, #26]
 80158d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80158e2:	f04f 33ff 	mov.w	r3, #4294967295
 80158e6:	e070      	b.n	80159ca <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68db      	ldr	r3, [r3, #12]
 80158ec:	f003 0303 	and.w	r3, r3, #3
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d006      	beq.n	8015902 <tcp_enqueue_flags+0x10a>
 80158f4:	4b37      	ldr	r3, [pc, #220]	; (80159d4 <tcp_enqueue_flags+0x1dc>)
 80158f6:	f240 3249 	movw	r2, #841	; 0x349
 80158fa:	493a      	ldr	r1, [pc, #232]	; (80159e4 <tcp_enqueue_flags+0x1ec>)
 80158fc:	4837      	ldr	r0, [pc, #220]	; (80159dc <tcp_enqueue_flags+0x1e4>)
 80158fe:	f003 fdff 	bl	8019500 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	891b      	ldrh	r3, [r3, #8]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d006      	beq.n	8015918 <tcp_enqueue_flags+0x120>
 801590a:	4b32      	ldr	r3, [pc, #200]	; (80159d4 <tcp_enqueue_flags+0x1dc>)
 801590c:	f240 324a 	movw	r2, #842	; 0x34a
 8015910:	4935      	ldr	r1, [pc, #212]	; (80159e8 <tcp_enqueue_flags+0x1f0>)
 8015912:	4832      	ldr	r0, [pc, #200]	; (80159dc <tcp_enqueue_flags+0x1e4>)
 8015914:	f003 fdf4 	bl	8019500 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801591c:	2b00      	cmp	r3, #0
 801591e:	d103      	bne.n	8015928 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	68fa      	ldr	r2, [r7, #12]
 8015924:	669a      	str	r2, [r3, #104]	; 0x68
 8015926:	e00d      	b.n	8015944 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801592c:	61bb      	str	r3, [r7, #24]
 801592e:	e002      	b.n	8015936 <tcp_enqueue_flags+0x13e>
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	61bb      	str	r3, [r7, #24]
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d1f8      	bne.n	8015930 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	68fa      	ldr	r2, [r7, #12]
 8015942:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2200      	movs	r2, #0
 8015948:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801594c:	78fb      	ldrb	r3, [r7, #3]
 801594e:	f003 0302 	and.w	r3, r3, #2
 8015952:	2b00      	cmp	r3, #0
 8015954:	d104      	bne.n	8015960 <tcp_enqueue_flags+0x168>
 8015956:	78fb      	ldrb	r3, [r7, #3]
 8015958:	f003 0301 	and.w	r3, r3, #1
 801595c:	2b00      	cmp	r3, #0
 801595e:	d004      	beq.n	801596a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015964:	1c5a      	adds	r2, r3, #1
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801596a:	78fb      	ldrb	r3, [r7, #3]
 801596c:	f003 0301 	and.w	r3, r3, #1
 8015970:	2b00      	cmp	r3, #0
 8015972:	d006      	beq.n	8015982 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	7e9b      	ldrb	r3, [r3, #26]
 8015978:	f043 0320 	orr.w	r3, r3, #32
 801597c:	b2da      	uxtb	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	f7fb f978 	bl	8010c7c <pbuf_clen>
 801598c:	4603      	mov	r3, r0
 801598e:	461a      	mov	r2, r3
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015996:	4413      	add	r3, r2
 8015998:	b29a      	uxth	r2, r3
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d00e      	beq.n	80159c8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d10a      	bne.n	80159c8 <tcp_enqueue_flags+0x1d0>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d106      	bne.n	80159c8 <tcp_enqueue_flags+0x1d0>
 80159ba:	4b06      	ldr	r3, [pc, #24]	; (80159d4 <tcp_enqueue_flags+0x1dc>)
 80159bc:	f240 326d 	movw	r2, #877	; 0x36d
 80159c0:	490a      	ldr	r1, [pc, #40]	; (80159ec <tcp_enqueue_flags+0x1f4>)
 80159c2:	4806      	ldr	r0, [pc, #24]	; (80159dc <tcp_enqueue_flags+0x1e4>)
 80159c4:	f003 fd9c 	bl	8019500 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80159c8:	2300      	movs	r3, #0
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3720      	adds	r7, #32
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	0801c374 	.word	0x0801c374
 80159d8:	0801c69c 	.word	0x0801c69c
 80159dc:	0801c3fc 	.word	0x0801c3fc
 80159e0:	0801c6f4 	.word	0x0801c6f4
 80159e4:	0801c730 	.word	0x0801c730
 80159e8:	0801c748 	.word	0x0801c748
 80159ec:	0801c774 	.word	0x0801c774

080159f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80159f0:	b590      	push	{r4, r7, lr}
 80159f2:	b08b      	sub	sp, #44	; 0x2c
 80159f4:	af04      	add	r7, sp, #16
 80159f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80159f8:	2300      	movs	r3, #0
 80159fa:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80159fc:	7dbb      	ldrb	r3, [r7, #22]
 80159fe:	b29c      	uxth	r4, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f9 fe93 	bl	800f730 <lwip_htonl>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	4621      	mov	r1, r4
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f7ff f97b 	bl	8014d0c <tcp_output_alloc_header>
 8015a16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d109      	bne.n	8015a32 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	7e9b      	ldrb	r3, [r3, #26]
 8015a22:	f043 0303 	orr.w	r3, r3, #3
 8015a26:	b2da      	uxtb	r2, r3
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015a2c:	f06f 0301 	mvn.w	r3, #1
 8015a30:	e036      	b.n	8015aa0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	3304      	adds	r3, #4
 8015a36:	4618      	mov	r0, r3
 8015a38:	f002 f9c0 	bl	8017dbc <ip4_route>
 8015a3c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d102      	bne.n	8015a4a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8015a44:	23fc      	movs	r3, #252	; 0xfc
 8015a46:	75fb      	strb	r3, [r7, #23]
 8015a48:	e012      	b.n	8015a70 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8015a4a:	6879      	ldr	r1, [r7, #4]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	1d18      	adds	r0, r3, #4
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	7a9c      	ldrb	r4, [r3, #10]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	7a5b      	ldrb	r3, [r3, #9]
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	9202      	str	r2, [sp, #8]
 8015a5c:	2206      	movs	r2, #6
 8015a5e:	9201      	str	r2, [sp, #4]
 8015a60:	9300      	str	r3, [sp, #0]
 8015a62:	4623      	mov	r3, r4
 8015a64:	4602      	mov	r2, r0
 8015a66:	6938      	ldr	r0, [r7, #16]
 8015a68:	f002 fb50 	bl	801810c <ip4_output_if>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015a70:	6938      	ldr	r0, [r7, #16]
 8015a72:	f7fb f869 	bl	8010b48 <pbuf_free>

  if (err != ERR_OK) {
 8015a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d007      	beq.n	8015a8e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	7e9b      	ldrb	r3, [r3, #26]
 8015a82:	f043 0303 	orr.w	r3, r3, #3
 8015a86:	b2da      	uxtb	r2, r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	769a      	strb	r2, [r3, #26]
 8015a8c:	e006      	b.n	8015a9c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	7e9b      	ldrb	r3, [r3, #26]
 8015a92:	f023 0303 	bic.w	r3, r3, #3
 8015a96:	b2da      	uxtb	r2, r3
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8015a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	371c      	adds	r7, #28
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd90      	pop	{r4, r7, pc}

08015aa8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015aa8:	b5b0      	push	{r4, r5, r7, lr}
 8015aaa:	b08a      	sub	sp, #40	; 0x28
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	7d1b      	ldrb	r3, [r3, #20]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	d106      	bne.n	8015ac6 <tcp_output+0x1e>
 8015ab8:	4b9b      	ldr	r3, [pc, #620]	; (8015d28 <tcp_output+0x280>)
 8015aba:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8015abe:	499b      	ldr	r1, [pc, #620]	; (8015d2c <tcp_output+0x284>)
 8015ac0:	489b      	ldr	r0, [pc, #620]	; (8015d30 <tcp_output+0x288>)
 8015ac2:	f003 fd1d 	bl	8019500 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015ac6:	4b9b      	ldr	r3, [pc, #620]	; (8015d34 <tcp_output+0x28c>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d101      	bne.n	8015ad4 <tcp_output+0x2c>
    return ERR_OK;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	e1cf      	b.n	8015e74 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d203      	bcs.n	8015aec <tcp_output+0x44>
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015aea:	e002      	b.n	8015af2 <tcp_output+0x4a>
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015af2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015af8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7e9b      	ldrb	r3, [r3, #26]
 8015afe:	f003 0302 	and.w	r3, r3, #2
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d017      	beq.n	8015b36 <tcp_output+0x8e>
 8015b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d00f      	beq.n	8015b2c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8015b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f9 fe0c 	bl	800f730 <lwip_htonl>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b1e:	1ad3      	subs	r3, r2, r3
 8015b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b22:	8912      	ldrh	r2, [r2, #8]
 8015b24:	4413      	add	r3, r2
     (seg == NULL ||
 8015b26:	69ba      	ldr	r2, [r7, #24]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d204      	bcs.n	8015b36 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f7ff ff5f 	bl	80159f0 <tcp_send_empty_ack>
 8015b32:	4603      	mov	r3, r0
 8015b34:	e19e      	b.n	8015e74 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b3a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015b3c:	6a3b      	ldr	r3, [r7, #32]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d007      	beq.n	8015b52 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8015b42:	e002      	b.n	8015b4a <tcp_output+0xa2>
 8015b44:	6a3b      	ldr	r3, [r7, #32]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	623b      	str	r3, [r7, #32]
 8015b4a:	6a3b      	ldr	r3, [r7, #32]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d1f8      	bne.n	8015b44 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	3304      	adds	r3, #4
 8015b56:	4618      	mov	r0, r3
 8015b58:	f002 f930 	bl	8017dbc <ip4_route>
 8015b5c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d102      	bne.n	8015b6a <tcp_output+0xc2>
    return ERR_RTE;
 8015b64:	f06f 0303 	mvn.w	r3, #3
 8015b68:	e184      	b.n	8015e74 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d003      	beq.n	8015b78 <tcp_output+0xd0>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d111      	bne.n	8015b9c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d002      	beq.n	8015b84 <tcp_output+0xdc>
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	3304      	adds	r3, #4
 8015b82:	e000      	b.n	8015b86 <tcp_output+0xde>
 8015b84:	2300      	movs	r3, #0
 8015b86:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d102      	bne.n	8015b94 <tcp_output+0xec>
      return ERR_RTE;
 8015b8e:	f06f 0303 	mvn.w	r3, #3
 8015b92:	e16f      	b.n	8015e74 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8015b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 813e 	beq.w	8015e20 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f9 fdc0 	bl	800f730 <lwip_htonl>
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bba:	8912      	ldrh	r2, [r2, #8]
 8015bbc:	4413      	add	r3, r2
  if (seg != NULL &&
 8015bbe:	69ba      	ldr	r2, [r7, #24]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	f080 812d 	bcs.w	8015e20 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	f000 8129 	beq.w	8015e20 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	f040 8121 	bne.w	8015e20 <tcp_output+0x378>
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	f040 811c 	bne.w	8015e20 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	f040 812b 	bne.w	8015e4a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2201      	movs	r2, #1
 8015c00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8015c04:	e121      	b.n	8015e4a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	899b      	ldrh	r3, [r3, #12]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f9 fd80 	bl	800f714 <lwip_htons>
 8015c14:	4603      	mov	r3, r0
 8015c16:	f003 0304 	and.w	r3, r3, #4
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d006      	beq.n	8015c2c <tcp_output+0x184>
 8015c1e:	4b42      	ldr	r3, [pc, #264]	; (8015d28 <tcp_output+0x280>)
 8015c20:	f240 4246 	movw	r2, #1094	; 0x446
 8015c24:	4944      	ldr	r1, [pc, #272]	; (8015d38 <tcp_output+0x290>)
 8015c26:	4842      	ldr	r0, [pc, #264]	; (8015d30 <tcp_output+0x288>)
 8015c28:	f003 fc6a 	bl	8019500 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d01f      	beq.n	8015c74 <tcp_output+0x1cc>
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	7e9b      	ldrb	r3, [r3, #26]
 8015c38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d119      	bne.n	8015c74 <tcp_output+0x1cc>
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00b      	beq.n	8015c60 <tcp_output+0x1b8>
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d110      	bne.n	8015c74 <tcp_output+0x1cc>
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c56:	891a      	ldrh	r2, [r3, #8]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d209      	bcs.n	8015c74 <tcp_output+0x1cc>
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d004      	beq.n	8015c74 <tcp_output+0x1cc>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015c70:	2b08      	cmp	r3, #8
 8015c72:	d901      	bls.n	8015c78 <tcp_output+0x1d0>
 8015c74:	2301      	movs	r3, #1
 8015c76:	e000      	b.n	8015c7a <tcp_output+0x1d2>
 8015c78:	2300      	movs	r3, #0
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d106      	bne.n	8015c8c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	7e9b      	ldrb	r3, [r3, #26]
 8015c82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f000 80e1 	beq.w	8015e4e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	7d1b      	ldrb	r3, [r3, #20]
 8015c90:	2b02      	cmp	r3, #2
 8015c92:	d00d      	beq.n	8015cb0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c96:	68db      	ldr	r3, [r3, #12]
 8015c98:	899b      	ldrh	r3, [r3, #12]
 8015c9a:	b29c      	uxth	r4, r3
 8015c9c:	2010      	movs	r0, #16
 8015c9e:	f7f9 fd39 	bl	800f714 <lwip_htons>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	4322      	orrs	r2, r4
 8015cac:	b292      	uxth	r2, r2
 8015cae:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015cb0:	697a      	ldr	r2, [r7, #20]
 8015cb2:	6879      	ldr	r1, [r7, #4]
 8015cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cb6:	f000 f8e1 	bl	8015e7c <tcp_output_segment>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d009      	beq.n	8015cda <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7e9b      	ldrb	r3, [r3, #26]
 8015cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	769a      	strb	r2, [r3, #26]
      return err;
 8015cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cd8:	e0cc      	b.n	8015e74 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8015cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cdc:	681a      	ldr	r2, [r3, #0]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	7d1b      	ldrb	r3, [r3, #20]
 8015ce6:	2b02      	cmp	r3, #2
 8015ce8:	d006      	beq.n	8015cf8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	7e9b      	ldrb	r3, [r3, #26]
 8015cee:	f023 0303 	bic.w	r3, r3, #3
 8015cf2:	b2da      	uxtb	r2, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7f9 fd16 	bl	800f730 <lwip_htonl>
 8015d04:	4604      	mov	r4, r0
 8015d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d08:	891b      	ldrh	r3, [r3, #8]
 8015d0a:	461d      	mov	r5, r3
 8015d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	899b      	ldrh	r3, [r3, #12]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7f9 fcfd 	bl	800f714 <lwip_htons>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f003 0303 	and.w	r3, r3, #3
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d00b      	beq.n	8015d3c <tcp_output+0x294>
 8015d24:	2301      	movs	r3, #1
 8015d26:	e00a      	b.n	8015d3e <tcp_output+0x296>
 8015d28:	0801c374 	.word	0x0801c374
 8015d2c:	0801c79c 	.word	0x0801c79c
 8015d30:	0801c3fc 	.word	0x0801c3fc
 8015d34:	200101e0 	.word	0x200101e0
 8015d38:	0801c7c4 	.word	0x0801c7c4
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	442b      	add	r3, r5
 8015d40:	4423      	add	r3, r4
 8015d42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	1ad3      	subs	r3, r2, r3
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	da02      	bge.n	8015d56 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	68ba      	ldr	r2, [r7, #8]
 8015d54:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d58:	891b      	ldrh	r3, [r3, #8]
 8015d5a:	461c      	mov	r4, r3
 8015d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	899b      	ldrh	r3, [r3, #12]
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7f9 fcd5 	bl	800f714 <lwip_htons>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	f003 0303 	and.w	r3, r3, #3
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d001      	beq.n	8015d78 <tcp_output+0x2d0>
 8015d74:	2301      	movs	r3, #1
 8015d76:	e000      	b.n	8015d7a <tcp_output+0x2d2>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4423      	add	r3, r4
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d049      	beq.n	8015e14 <tcp_output+0x36c>
      seg->next = NULL;
 8015d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d105      	bne.n	8015d9a <tcp_output+0x2f2>
        pcb->unacked = seg;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d92:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d96:	623b      	str	r3, [r7, #32]
 8015d98:	e03f      	b.n	8015e1a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f9 fcc5 	bl	800f730 <lwip_htonl>
 8015da6:	4604      	mov	r4, r0
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	68db      	ldr	r3, [r3, #12]
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7f9 fcbe 	bl	800f730 <lwip_htonl>
 8015db4:	4603      	mov	r3, r0
 8015db6:	1ae3      	subs	r3, r4, r3
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	da24      	bge.n	8015e06 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	336c      	adds	r3, #108	; 0x6c
 8015dc0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015dc2:	e002      	b.n	8015dca <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d011      	beq.n	8015df6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	68db      	ldr	r3, [r3, #12]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7f9 fca8 	bl	800f730 <lwip_htonl>
 8015de0:	4604      	mov	r4, r0
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7f9 fca1 	bl	800f730 <lwip_htonl>
 8015dee:	4603      	mov	r3, r0
 8015df0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	dbe6      	blt.n	8015dc4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e02:	601a      	str	r2, [r3, #0]
 8015e04:	e009      	b.n	8015e1a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015e06:	6a3b      	ldr	r3, [r7, #32]
 8015e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e0a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015e0c:	6a3b      	ldr	r3, [r7, #32]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	623b      	str	r3, [r7, #32]
 8015e12:	e002      	b.n	8015e1a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e16:	f7fc f9b0 	bl	801217a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d015      	beq.n	8015e52 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7f9 fc7f 	bl	800f730 <lwip_htonl>
 8015e32:	4602      	mov	r2, r0
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e38:	1ad3      	subs	r3, r2, r3
 8015e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e3c:	8912      	ldrh	r2, [r2, #8]
 8015e3e:	4413      	add	r3, r2
  while (seg != NULL &&
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	f4bf aedf 	bcs.w	8015c06 <tcp_output+0x15e>
  }
output_done:
 8015e48:	e003      	b.n	8015e52 <tcp_output+0x3aa>
    goto output_done;
 8015e4a:	bf00      	nop
 8015e4c:	e002      	b.n	8015e54 <tcp_output+0x3ac>
      break;
 8015e4e:	bf00      	nop
 8015e50:	e000      	b.n	8015e54 <tcp_output+0x3ac>
output_done:
 8015e52:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d103      	bne.n	8015e64 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	7e9b      	ldrb	r3, [r3, #26]
 8015e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e6c:	b2da      	uxtb	r2, r3
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015e72:	2300      	movs	r3, #0
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3728      	adds	r7, #40	; 0x28
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bdb0      	pop	{r4, r5, r7, pc}

08015e7c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015e7c:	b5b0      	push	{r4, r5, r7, lr}
 8015e7e:	b08c      	sub	sp, #48	; 0x30
 8015e80:	af04      	add	r7, sp, #16
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	89db      	ldrh	r3, [r3, #14]
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d001      	beq.n	8015e96 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015e92:	2300      	movs	r3, #0
 8015e94:	e08b      	b.n	8015fae <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	68dc      	ldr	r4, [r3, #12]
 8015e9e:	4610      	mov	r0, r2
 8015ea0:	f7f9 fc46 	bl	800f730 <lwip_htonl>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	68dc      	ldr	r4, [r3, #12]
 8015eb0:	4610      	mov	r0, r2
 8015eb2:	f7f9 fc2f 	bl	800f714 <lwip_htons>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ebe:	68ba      	ldr	r2, [r7, #8]
 8015ec0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015ec2:	441a      	add	r2, r3
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	3314      	adds	r3, #20
 8015ece:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	7a9b      	ldrb	r3, [r3, #10]
 8015ed4:	f003 0301 	and.w	r3, r3, #1
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d014      	beq.n	8015f06 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	3304      	adds	r3, #4
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015ee6:	f7fc fc73 	bl	80127d0 <tcp_eff_send_mss_impl>
 8015eea:	4603      	mov	r3, r0
 8015eec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015eee:	8b7b      	ldrh	r3, [r7, #26]
 8015ef0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7f9 fc1b 	bl	800f730 <lwip_htonl>
 8015efa:	4602      	mov	r2, r0
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	3304      	adds	r3, #4
 8015f04:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	da02      	bge.n	8015f16 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	2200      	movs	r2, #0
 8015f14:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d10c      	bne.n	8015f38 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8015f1e:	4b26      	ldr	r3, [pc, #152]	; (8015fb8 <tcp_output_segment+0x13c>)
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	68bb      	ldr	r3, [r7, #8]
 8015f24:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	68db      	ldr	r3, [r3, #12]
 8015f2a:	685b      	ldr	r3, [r3, #4]
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f9 fbff 	bl	800f730 <lwip_htonl>
 8015f32:	4602      	mov	r2, r0
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68db      	ldr	r3, [r3, #12]
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	8959      	ldrh	r1, [r3, #10]
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	8b3a      	ldrh	r2, [r7, #24]
 8015f54:	1a8a      	subs	r2, r1, r2
 8015f56:	b292      	uxth	r2, r2
 8015f58:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	8919      	ldrh	r1, [r3, #8]
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	8b3a      	ldrh	r2, [r7, #24]
 8015f66:	1a8a      	subs	r2, r1, r2
 8015f68:	b292      	uxth	r2, r2
 8015f6a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	68fa      	ldr	r2, [r7, #12]
 8015f72:	68d2      	ldr	r2, [r2, #12]
 8015f74:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	741a      	strb	r2, [r3, #16]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	6858      	ldr	r0, [r3, #4]
 8015f86:	68b9      	ldr	r1, [r7, #8]
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	1d1c      	adds	r4, r3, #4
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	7a9d      	ldrb	r5, [r3, #10]
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	7a5b      	ldrb	r3, [r3, #9]
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	9202      	str	r2, [sp, #8]
 8015f98:	2206      	movs	r2, #6
 8015f9a:	9201      	str	r2, [sp, #4]
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	462b      	mov	r3, r5
 8015fa0:	4622      	mov	r2, r4
 8015fa2:	f002 f8b3 	bl	801810c <ip4_output_if>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8015faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3720      	adds	r7, #32
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	200101d0 	.word	0x200101d0

08015fbc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b08c      	sub	sp, #48	; 0x30
 8015fc0:	af04      	add	r7, sp, #16
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
 8015fc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8015fca:	2200      	movs	r2, #0
 8015fcc:	2114      	movs	r1, #20
 8015fce:	2001      	movs	r0, #1
 8015fd0:	f7fa fa48 	bl	8010464 <pbuf_alloc>
 8015fd4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d05b      	beq.n	8016094 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015fdc:	69fb      	ldr	r3, [r7, #28]
 8015fde:	895b      	ldrh	r3, [r3, #10]
 8015fe0:	2b13      	cmp	r3, #19
 8015fe2:	d806      	bhi.n	8015ff2 <tcp_rst+0x36>
 8015fe4:	4b2d      	ldr	r3, [pc, #180]	; (801609c <tcp_rst+0xe0>)
 8015fe6:	f240 524d 	movw	r2, #1357	; 0x54d
 8015fea:	492d      	ldr	r1, [pc, #180]	; (80160a0 <tcp_rst+0xe4>)
 8015fec:	482d      	ldr	r0, [pc, #180]	; (80160a4 <tcp_rst+0xe8>)
 8015fee:	f003 fa87 	bl	8019500 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8015ff2:	69fb      	ldr	r3, [r7, #28]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8015ff8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7f9 fb8a 	bl	800f714 <lwip_htons>
 8016000:	4603      	mov	r3, r0
 8016002:	461a      	mov	r2, r3
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801600a:	4618      	mov	r0, r3
 801600c:	f7f9 fb82 	bl	800f714 <lwip_htons>
 8016010:	4603      	mov	r3, r0
 8016012:	461a      	mov	r2, r3
 8016014:	69bb      	ldr	r3, [r7, #24]
 8016016:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f7f9 fb89 	bl	800f730 <lwip_htonl>
 801601e:	4602      	mov	r2, r0
 8016020:	69bb      	ldr	r3, [r7, #24]
 8016022:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8016024:	68b8      	ldr	r0, [r7, #8]
 8016026:	f7f9 fb83 	bl	800f730 <lwip_htonl>
 801602a:	4602      	mov	r2, r0
 801602c:	69bb      	ldr	r3, [r7, #24]
 801602e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8016030:	f245 0014 	movw	r0, #20500	; 0x5014
 8016034:	f7f9 fb6e 	bl	800f714 <lwip_htons>
 8016038:	4603      	mov	r3, r0
 801603a:	461a      	mov	r2, r3
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	2200      	movs	r2, #0
 8016044:	f042 0208 	orr.w	r2, r2, #8
 8016048:	739a      	strb	r2, [r3, #14]
 801604a:	2200      	movs	r2, #0
 801604c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8016050:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	2200      	movs	r2, #0
 8016056:	741a      	strb	r2, [r3, #16]
 8016058:	2200      	movs	r2, #0
 801605a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801605c:	69bb      	ldr	r3, [r7, #24]
 801605e:	2200      	movs	r2, #0
 8016060:	749a      	strb	r2, [r3, #18]
 8016062:	2200      	movs	r2, #0
 8016064:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8016066:	6838      	ldr	r0, [r7, #0]
 8016068:	f001 fea8 	bl	8017dbc <ip4_route>
 801606c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d00b      	beq.n	801608c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	9302      	str	r3, [sp, #8]
 8016078:	2306      	movs	r3, #6
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	2300      	movs	r3, #0
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	23ff      	movs	r3, #255	; 0xff
 8016082:	683a      	ldr	r2, [r7, #0]
 8016084:	6879      	ldr	r1, [r7, #4]
 8016086:	69f8      	ldr	r0, [r7, #28]
 8016088:	f002 f840 	bl	801810c <ip4_output_if>
  }
  pbuf_free(p);
 801608c:	69f8      	ldr	r0, [r7, #28]
 801608e:	f7fa fd5b 	bl	8010b48 <pbuf_free>
 8016092:	e000      	b.n	8016096 <tcp_rst+0xda>
    return;
 8016094:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016096:	3720      	adds	r7, #32
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	0801c374 	.word	0x0801c374
 80160a0:	0801c3cc 	.word	0x0801c3cc
 80160a4:	0801c3fc 	.word	0x0801c3fc

080160a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d029      	beq.n	801610c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160bc:	60fb      	str	r3, [r7, #12]
 80160be:	e002      	b.n	80160c6 <tcp_rexmit_rto+0x1e>
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	60fb      	str	r3, [r7, #12]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d1f8      	bne.n	80160c0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2200      	movs	r2, #0
 80160e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160ea:	2bff      	cmp	r3, #255	; 0xff
 80160ec:	d007      	beq.n	80160fe <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160f4:	3301      	adds	r3, #1
 80160f6:	b2da      	uxtb	r2, r3
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2200      	movs	r2, #0
 8016102:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7ff fccf 	bl	8015aa8 <tcp_output>
 801610a:	e000      	b.n	801610e <tcp_rexmit_rto+0x66>
    return;
 801610c:	bf00      	nop
}
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016114:	b590      	push	{r4, r7, lr}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016120:	2b00      	cmp	r3, #0
 8016122:	d043      	beq.n	80161ac <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016128:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	681a      	ldr	r2, [r3, #0]
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	3368      	adds	r3, #104	; 0x68
 8016136:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016138:	e002      	b.n	8016140 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d011      	beq.n	801616c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	68db      	ldr	r3, [r3, #12]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	4618      	mov	r0, r3
 8016152:	f7f9 faed 	bl	800f730 <lwip_htonl>
 8016156:	4604      	mov	r4, r0
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	4618      	mov	r0, r3
 8016160:	f7f9 fae6 	bl	800f730 <lwip_htonl>
 8016164:	4603      	mov	r3, r0
 8016166:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016168:	2b00      	cmp	r3, #0
 801616a:	dbe6      	blt.n	801613a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	68ba      	ldr	r2, [r7, #8]
 8016178:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d103      	bne.n	801618a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2200      	movs	r2, #0
 8016186:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016190:	2bff      	cmp	r3, #255	; 0xff
 8016192:	d007      	beq.n	80161a4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801619a:	3301      	adds	r3, #1
 801619c:	b2da      	uxtb	r2, r3
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	635a      	str	r2, [r3, #52]	; 0x34
 80161aa:	e000      	b.n	80161ae <tcp_rexmit+0x9a>
    return;
 80161ac:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd90      	pop	{r4, r7, pc}

080161b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d04c      	beq.n	801625e <tcp_rexmit_fast+0xaa>
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	7e9b      	ldrb	r3, [r3, #26]
 80161c8:	f003 0304 	and.w	r3, r3, #4
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d146      	bne.n	801625e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff ff9f 	bl	8016114 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d208      	bcs.n	80161f8 <tcp_rexmit_fast+0x44>
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	da00      	bge.n	80161f2 <tcp_rexmit_fast+0x3e>
 80161f0:	3301      	adds	r3, #1
 80161f2:	105b      	asrs	r3, r3, #1
 80161f4:	b29b      	uxth	r3, r3
 80161f6:	e007      	b.n	8016208 <tcp_rexmit_fast+0x54>
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161fe:	2b00      	cmp	r3, #0
 8016200:	da00      	bge.n	8016204 <tcp_rexmit_fast+0x50>
 8016202:	3301      	adds	r3, #1
 8016204:	105b      	asrs	r3, r3, #1
 8016206:	b29b      	uxth	r3, r3
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016214:	461a      	mov	r2, r3
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801621a:	005b      	lsls	r3, r3, #1
 801621c:	429a      	cmp	r2, r3
 801621e:	d206      	bcs.n	801622e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	b29a      	uxth	r2, r3
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016238:	4619      	mov	r1, r3
 801623a:	0049      	lsls	r1, r1, #1
 801623c:	440b      	add	r3, r1
 801623e:	b29b      	uxth	r3, r3
 8016240:	4413      	add	r3, r2
 8016242:	b29a      	uxth	r2, r3
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	7e9b      	ldrb	r3, [r3, #26]
 801624e:	f043 0304 	orr.w	r3, r3, #4
 8016252:	b2da      	uxtb	r2, r3
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2200      	movs	r2, #0
 801625c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801625e:	bf00      	nop
 8016260:	3708      	adds	r7, #8
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}

08016266 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016266:	b580      	push	{r7, lr}
 8016268:	b08a      	sub	sp, #40	; 0x28
 801626a:	af04      	add	r7, sp, #16
 801626c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016272:	3b01      	subs	r3, #1
 8016274:	4618      	mov	r0, r3
 8016276:	f7f9 fa5b 	bl	800f730 <lwip_htonl>
 801627a:	4603      	mov	r3, r0
 801627c:	2200      	movs	r2, #0
 801627e:	2100      	movs	r1, #0
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7fe fd43 	bl	8014d0c <tcp_output_alloc_header>
 8016286:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d102      	bne.n	8016294 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801628e:	f04f 33ff 	mov.w	r3, #4294967295
 8016292:	e021      	b.n	80162d8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	3304      	adds	r3, #4
 8016298:	4618      	mov	r0, r3
 801629a:	f001 fd8f 	bl	8017dbc <ip4_route>
 801629e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d102      	bne.n	80162ac <tcp_keepalive+0x46>
    err = ERR_RTE;
 80162a6:	23fc      	movs	r3, #252	; 0xfc
 80162a8:	75fb      	strb	r3, [r7, #23]
 80162aa:	e010      	b.n	80162ce <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80162ac:	6879      	ldr	r1, [r7, #4]
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	1d1a      	adds	r2, r3, #4
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	7a98      	ldrb	r0, [r3, #10]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	9302      	str	r3, [sp, #8]
 80162ba:	2306      	movs	r3, #6
 80162bc:	9301      	str	r3, [sp, #4]
 80162be:	2300      	movs	r3, #0
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	4603      	mov	r3, r0
 80162c4:	6938      	ldr	r0, [r7, #16]
 80162c6:	f001 ff21 	bl	801810c <ip4_output_if>
 80162ca:	4603      	mov	r3, r0
 80162cc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80162ce:	6938      	ldr	r0, [r7, #16]
 80162d0:	f7fa fc3a 	bl	8010b48 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80162d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3718      	adds	r7, #24
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80162e0:	b590      	push	{r4, r7, lr}
 80162e2:	b08f      	sub	sp, #60	; 0x3c
 80162e4:	af04      	add	r7, sp, #16
 80162e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ec:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80162ee:	6a3b      	ldr	r3, [r7, #32]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d102      	bne.n	80162fa <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162f8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80162fa:	6a3b      	ldr	r3, [r7, #32]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d101      	bne.n	8016304 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016300:	2300      	movs	r3, #0
 8016302:	e085      	b.n	8016410 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016304:	6a3b      	ldr	r3, [r7, #32]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	899b      	ldrh	r3, [r3, #12]
 801630a:	b29b      	uxth	r3, r3
 801630c:	4618      	mov	r0, r3
 801630e:	f7f9 fa01 	bl	800f714 <lwip_htons>
 8016312:	4603      	mov	r3, r0
 8016314:	f003 0301 	and.w	r3, r3, #1
 8016318:	2b00      	cmp	r3, #0
 801631a:	d005      	beq.n	8016328 <tcp_zero_window_probe+0x48>
 801631c:	6a3b      	ldr	r3, [r7, #32]
 801631e:	891b      	ldrh	r3, [r3, #8]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d101      	bne.n	8016328 <tcp_zero_window_probe+0x48>
 8016324:	2301      	movs	r3, #1
 8016326:	e000      	b.n	801632a <tcp_zero_window_probe+0x4a>
 8016328:	2300      	movs	r3, #0
 801632a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801632c:	7ffb      	ldrb	r3, [r7, #31]
 801632e:	2b00      	cmp	r3, #0
 8016330:	bf0c      	ite	eq
 8016332:	2301      	moveq	r3, #1
 8016334:	2300      	movne	r3, #0
 8016336:	b2db      	uxtb	r3, r3
 8016338:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801633a:	6a3b      	ldr	r3, [r7, #32]
 801633c:	68db      	ldr	r3, [r3, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	8bba      	ldrh	r2, [r7, #28]
 8016342:	2100      	movs	r1, #0
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7fe fce1 	bl	8014d0c <tcp_output_alloc_header>
 801634a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d102      	bne.n	8016358 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016352:	f04f 33ff 	mov.w	r3, #4294967295
 8016356:	e05b      	b.n	8016410 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801635e:	7ffb      	ldrb	r3, [r7, #31]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d00e      	beq.n	8016382 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	899b      	ldrh	r3, [r3, #12]
 8016368:	b29b      	uxth	r3, r3
 801636a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801636e:	b29c      	uxth	r4, r3
 8016370:	2011      	movs	r0, #17
 8016372:	f7f9 f9cf 	bl	800f714 <lwip_htons>
 8016376:	4603      	mov	r3, r0
 8016378:	4323      	orrs	r3, r4
 801637a:	b29a      	uxth	r2, r3
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	819a      	strh	r2, [r3, #12]
 8016380:	e010      	b.n	80163a4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016382:	69bb      	ldr	r3, [r7, #24]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	3314      	adds	r3, #20
 8016388:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801638a:	6a3b      	ldr	r3, [r7, #32]
 801638c:	6858      	ldr	r0, [r3, #4]
 801638e:	6a3b      	ldr	r3, [r7, #32]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	891a      	ldrh	r2, [r3, #8]
 8016394:	6a3b      	ldr	r3, [r7, #32]
 8016396:	891b      	ldrh	r3, [r3, #8]
 8016398:	1ad3      	subs	r3, r2, r3
 801639a:	b29b      	uxth	r3, r3
 801639c:	2201      	movs	r2, #1
 801639e:	6939      	ldr	r1, [r7, #16]
 80163a0:	f7fa fdce 	bl	8010f40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80163a4:	6a3b      	ldr	r3, [r7, #32]
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	685b      	ldr	r3, [r3, #4]
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f9 f9c0 	bl	800f730 <lwip_htonl>
 80163b0:	4603      	mov	r3, r0
 80163b2:	3301      	adds	r3, #1
 80163b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	2b00      	cmp	r3, #0
 80163c0:	da02      	bge.n	80163c8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	3304      	adds	r3, #4
 80163cc:	4618      	mov	r0, r3
 80163ce:	f001 fcf5 	bl	8017dbc <ip4_route>
 80163d2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d103      	bne.n	80163e2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80163da:	23fc      	movs	r3, #252	; 0xfc
 80163dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163e0:	e011      	b.n	8016406 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80163e2:	6879      	ldr	r1, [r7, #4]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	1d1a      	adds	r2, r3, #4
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	7a98      	ldrb	r0, [r3, #10]
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	9302      	str	r3, [sp, #8]
 80163f0:	2306      	movs	r3, #6
 80163f2:	9301      	str	r3, [sp, #4]
 80163f4:	2300      	movs	r3, #0
 80163f6:	9300      	str	r3, [sp, #0]
 80163f8:	4603      	mov	r3, r0
 80163fa:	69b8      	ldr	r0, [r7, #24]
 80163fc:	f001 fe86 	bl	801810c <ip4_output_if>
 8016400:	4603      	mov	r3, r0
 8016402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8016406:	69b8      	ldr	r0, [r7, #24]
 8016408:	f7fa fb9e 	bl	8010b48 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801640c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016410:	4618      	mov	r0, r3
 8016412:	372c      	adds	r7, #44	; 0x2c
 8016414:	46bd      	mov	sp, r7
 8016416:	bd90      	pop	{r4, r7, pc}

08016418 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016420:	f7fa fe10 	bl	8011044 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016424:	4b0a      	ldr	r3, [pc, #40]	; (8016450 <tcpip_tcp_timer+0x38>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d103      	bne.n	8016434 <tcpip_tcp_timer+0x1c>
 801642c:	4b09      	ldr	r3, [pc, #36]	; (8016454 <tcpip_tcp_timer+0x3c>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d005      	beq.n	8016440 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016434:	2200      	movs	r2, #0
 8016436:	4908      	ldr	r1, [pc, #32]	; (8016458 <tcpip_tcp_timer+0x40>)
 8016438:	20fa      	movs	r0, #250	; 0xfa
 801643a:	f000 f86f 	bl	801651c <sys_timeout>
 801643e:	e002      	b.n	8016446 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016440:	4b06      	ldr	r3, [pc, #24]	; (801645c <tcpip_tcp_timer+0x44>)
 8016442:	2200      	movs	r2, #0
 8016444:	601a      	str	r2, [r3, #0]
  }
}
 8016446:	bf00      	nop
 8016448:	3708      	adds	r7, #8
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	200101cc 	.word	0x200101cc
 8016454:	200101dc 	.word	0x200101dc
 8016458:	08016419 	.word	0x08016419
 801645c:	2000c840 	.word	0x2000c840

08016460 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016464:	4b0a      	ldr	r3, [pc, #40]	; (8016490 <tcp_timer_needed+0x30>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d10f      	bne.n	801648c <tcp_timer_needed+0x2c>
 801646c:	4b09      	ldr	r3, [pc, #36]	; (8016494 <tcp_timer_needed+0x34>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d103      	bne.n	801647c <tcp_timer_needed+0x1c>
 8016474:	4b08      	ldr	r3, [pc, #32]	; (8016498 <tcp_timer_needed+0x38>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d007      	beq.n	801648c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801647c:	4b04      	ldr	r3, [pc, #16]	; (8016490 <tcp_timer_needed+0x30>)
 801647e:	2201      	movs	r2, #1
 8016480:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016482:	2200      	movs	r2, #0
 8016484:	4905      	ldr	r1, [pc, #20]	; (801649c <tcp_timer_needed+0x3c>)
 8016486:	20fa      	movs	r0, #250	; 0xfa
 8016488:	f000 f848 	bl	801651c <sys_timeout>
  }
}
 801648c:	bf00      	nop
 801648e:	bd80      	pop	{r7, pc}
 8016490:	2000c840 	.word	0x2000c840
 8016494:	200101cc 	.word	0x200101cc
 8016498:	200101dc 	.word	0x200101dc
 801649c:	08016419 	.word	0x08016419

080164a0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	4903      	ldr	r1, [pc, #12]	; (80164c8 <cyclic_timer+0x28>)
 80164ba:	4618      	mov	r0, r3
 80164bc:	f000 f82e 	bl	801651c <sys_timeout>
}
 80164c0:	bf00      	nop
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	080164a1 	.word	0x080164a1

080164cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80164d2:	2301      	movs	r3, #1
 80164d4:	607b      	str	r3, [r7, #4]
 80164d6:	e00e      	b.n	80164f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80164d8:	4a0d      	ldr	r2, [pc, #52]	; (8016510 <sys_timeouts_init+0x44>)
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	00db      	lsls	r3, r3, #3
 80164e4:	4a0a      	ldr	r2, [pc, #40]	; (8016510 <sys_timeouts_init+0x44>)
 80164e6:	4413      	add	r3, r2
 80164e8:	461a      	mov	r2, r3
 80164ea:	490a      	ldr	r1, [pc, #40]	; (8016514 <sys_timeouts_init+0x48>)
 80164ec:	f000 f816 	bl	801651c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	3301      	adds	r3, #1
 80164f4:	607b      	str	r3, [r7, #4]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b02      	cmp	r3, #2
 80164fa:	d9ed      	bls.n	80164d8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80164fc:	f7f3 ff42 	bl	800a384 <sys_now>
 8016500:	4602      	mov	r2, r0
 8016502:	4b05      	ldr	r3, [pc, #20]	; (8016518 <sys_timeouts_init+0x4c>)
 8016504:	601a      	str	r2, [r3, #0]
}
 8016506:	bf00      	nop
 8016508:	3708      	adds	r7, #8
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	0801d194 	.word	0x0801d194
 8016514:	080164a1 	.word	0x080164a1
 8016518:	2000c83c 	.word	0x2000c83c

0801651c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b088      	sub	sp, #32
 8016520:	af00      	add	r7, sp, #0
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016528:	200a      	movs	r0, #10
 801652a:	f7f9 fcff 	bl	800ff2c <memp_malloc>
 801652e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d10a      	bne.n	801654c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	2b00      	cmp	r3, #0
 801653a:	f040 8084 	bne.w	8016646 <sys_timeout+0x12a>
 801653e:	4b44      	ldr	r3, [pc, #272]	; (8016650 <sys_timeout+0x134>)
 8016540:	22d4      	movs	r2, #212	; 0xd4
 8016542:	4944      	ldr	r1, [pc, #272]	; (8016654 <sys_timeout+0x138>)
 8016544:	4844      	ldr	r0, [pc, #272]	; (8016658 <sys_timeout+0x13c>)
 8016546:	f002 ffdb 	bl	8019500 <iprintf>
    return;
 801654a:	e07c      	b.n	8016646 <sys_timeout+0x12a>
  }

  now = sys_now();
 801654c:	f7f3 ff1a 	bl	800a384 <sys_now>
 8016550:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016552:	4b42      	ldr	r3, [pc, #264]	; (801665c <sys_timeout+0x140>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d105      	bne.n	8016566 <sys_timeout+0x4a>
    diff = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801655e:	4a40      	ldr	r2, [pc, #256]	; (8016660 <sys_timeout+0x144>)
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	6013      	str	r3, [r2, #0]
 8016564:	e004      	b.n	8016570 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8016566:	4b3e      	ldr	r3, [pc, #248]	; (8016660 <sys_timeout+0x144>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	693a      	ldr	r2, [r7, #16]
 801656c:	1ad3      	subs	r3, r2, r3
 801656e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	2200      	movs	r2, #0
 8016574:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	68ba      	ldr	r2, [r7, #8]
 801657a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801657c:	697b      	ldr	r3, [r7, #20]
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016582:	68fa      	ldr	r2, [r7, #12]
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	441a      	add	r2, r3
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801658c:	4b33      	ldr	r3, [pc, #204]	; (801665c <sys_timeout+0x140>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d103      	bne.n	801659c <sys_timeout+0x80>
    next_timeout = timeout;
 8016594:	4a31      	ldr	r2, [pc, #196]	; (801665c <sys_timeout+0x140>)
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	6013      	str	r3, [r2, #0]
    return;
 801659a:	e055      	b.n	8016648 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801659c:	4b2f      	ldr	r3, [pc, #188]	; (801665c <sys_timeout+0x140>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	68fa      	ldr	r2, [r7, #12]
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d20f      	bcs.n	80165c8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80165a8:	4b2c      	ldr	r3, [pc, #176]	; (801665c <sys_timeout+0x140>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	6859      	ldr	r1, [r3, #4]
 80165ae:	4b2b      	ldr	r3, [pc, #172]	; (801665c <sys_timeout+0x140>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	68fa      	ldr	r2, [r7, #12]
 80165b4:	1a8a      	subs	r2, r1, r2
 80165b6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80165b8:	4b28      	ldr	r3, [pc, #160]	; (801665c <sys_timeout+0x140>)
 80165ba:	681a      	ldr	r2, [r3, #0]
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80165c0:	4a26      	ldr	r2, [pc, #152]	; (801665c <sys_timeout+0x140>)
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	6013      	str	r3, [r2, #0]
 80165c6:	e03f      	b.n	8016648 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80165c8:	4b24      	ldr	r3, [pc, #144]	; (801665c <sys_timeout+0x140>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	61fb      	str	r3, [r7, #28]
 80165ce:	e036      	b.n	801663e <sys_timeout+0x122>
      timeout->time -= t->time;
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	685a      	ldr	r2, [r3, #4]
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	1ad2      	subs	r2, r2, r3
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d006      	beq.n	80165f4 <sys_timeout+0xd8>
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	685a      	ldr	r2, [r3, #4]
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	685b      	ldr	r3, [r3, #4]
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d921      	bls.n	8016638 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d009      	beq.n	8016610 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	6859      	ldr	r1, [r3, #4]
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	685a      	ldr	r2, [r3, #4]
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	1a8a      	subs	r2, r1, r2
 801660c:	605a      	str	r2, [r3, #4]
 801660e:	e00b      	b.n	8016628 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	68fa      	ldr	r2, [r7, #12]
 8016616:	429a      	cmp	r2, r3
 8016618:	d206      	bcs.n	8016628 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801661a:	4b10      	ldr	r3, [pc, #64]	; (801665c <sys_timeout+0x140>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	685a      	ldr	r2, [r3, #4]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	441a      	add	r2, r3
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8016628:	69fb      	ldr	r3, [r7, #28]
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	697a      	ldr	r2, [r7, #20]
 8016634:	601a      	str	r2, [r3, #0]
        break;
 8016636:	e007      	b.n	8016648 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	61fb      	str	r3, [r7, #28]
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d1c5      	bne.n	80165d0 <sys_timeout+0xb4>
 8016644:	e000      	b.n	8016648 <sys_timeout+0x12c>
    return;
 8016646:	bf00      	nop
      }
    }
  }
}
 8016648:	3720      	adds	r7, #32
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	0801c7dc 	.word	0x0801c7dc
 8016654:	0801c834 	.word	0x0801c834
 8016658:	0801c874 	.word	0x0801c874
 801665c:	2000c838 	.word	0x2000c838
 8016660:	2000c83c 	.word	0x2000c83c

08016664 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801666a:	4b24      	ldr	r3, [pc, #144]	; (80166fc <sys_check_timeouts+0x98>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d03f      	beq.n	80166f2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016672:	f7f3 fe87 	bl	800a384 <sys_now>
 8016676:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8016678:	4b21      	ldr	r3, [pc, #132]	; (8016700 <sys_check_timeouts+0x9c>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	68fa      	ldr	r2, [r7, #12]
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8016682:	2300      	movs	r3, #0
 8016684:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8016686:	4b1d      	ldr	r3, [pc, #116]	; (80166fc <sys_check_timeouts+0x98>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d02c      	beq.n	80166ec <sys_check_timeouts+0x88>
 8016692:	68bb      	ldr	r3, [r7, #8]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	697a      	ldr	r2, [r7, #20]
 8016698:	429a      	cmp	r2, r3
 801669a:	d327      	bcc.n	80166ec <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801669c:	2301      	movs	r3, #1
 801669e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	685a      	ldr	r2, [r3, #4]
 80166a4:	4b16      	ldr	r3, [pc, #88]	; (8016700 <sys_check_timeouts+0x9c>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4413      	add	r3, r2
 80166aa:	4a15      	ldr	r2, [pc, #84]	; (8016700 <sys_check_timeouts+0x9c>)
 80166ac:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	697a      	ldr	r2, [r7, #20]
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4a0f      	ldr	r2, [pc, #60]	; (80166fc <sys_check_timeouts+0x98>)
 80166be:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	689b      	ldr	r3, [r3, #8]
 80166c4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	68db      	ldr	r3, [r3, #12]
 80166ca:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80166cc:	68b9      	ldr	r1, [r7, #8]
 80166ce:	200a      	movs	r0, #10
 80166d0:	f7f9 fca2 	bl	8010018 <memp_free>
        if (handler != NULL) {
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d008      	beq.n	80166ec <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80166da:	480a      	ldr	r0, [pc, #40]	; (8016704 <sys_check_timeouts+0xa0>)
 80166dc:	f002 fe6a 	bl	80193b4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6838      	ldr	r0, [r7, #0]
 80166e4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80166e6:	4807      	ldr	r0, [pc, #28]	; (8016704 <sys_check_timeouts+0xa0>)
 80166e8:	f002 fe73 	bl	80193d2 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80166ec:	7cfb      	ldrb	r3, [r7, #19]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d1c7      	bne.n	8016682 <sys_check_timeouts+0x1e>
  }
}
 80166f2:	bf00      	nop
 80166f4:	3718      	adds	r7, #24
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	2000c838 	.word	0x2000c838
 8016700:	2000c83c 	.word	0x2000c83c
 8016704:	2000d10c 	.word	0x2000d10c

08016708 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801670e:	4b0f      	ldr	r3, [pc, #60]	; (801674c <sys_timeouts_sleeptime+0x44>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d102      	bne.n	801671c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8016716:	f04f 33ff 	mov.w	r3, #4294967295
 801671a:	e013      	b.n	8016744 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 801671c:	f7f3 fe32 	bl	800a384 <sys_now>
 8016720:	4602      	mov	r2, r0
 8016722:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <sys_timeouts_sleeptime+0x48>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	1ad3      	subs	r3, r2, r3
 8016728:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801672a:	4b08      	ldr	r3, [pc, #32]	; (801674c <sys_timeouts_sleeptime+0x44>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	687a      	ldr	r2, [r7, #4]
 8016732:	429a      	cmp	r2, r3
 8016734:	d901      	bls.n	801673a <sys_timeouts_sleeptime+0x32>
    return 0;
 8016736:	2300      	movs	r3, #0
 8016738:	e004      	b.n	8016744 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801673a:	4b04      	ldr	r3, [pc, #16]	; (801674c <sys_timeouts_sleeptime+0x44>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	685a      	ldr	r2, [r3, #4]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	1ad3      	subs	r3, r2, r3
  }
}
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	2000c838 	.word	0x2000c838
 8016750:	2000c83c 	.word	0x2000c83c

08016754 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801675e:	4b0f      	ldr	r3, [pc, #60]	; (801679c <sys_timeouts_mbox_fetch+0x48>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d105      	bne.n	8016772 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016766:	2200      	movs	r2, #0
 8016768:	6839      	ldr	r1, [r7, #0]
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f002 fced 	bl	801914a <sys_arch_mbox_fetch>
    return;
 8016770:	e011      	b.n	8016796 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016772:	f7ff ffc9 	bl	8016708 <sys_timeouts_sleeptime>
 8016776:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d008      	beq.n	8016790 <sys_timeouts_mbox_fetch+0x3c>
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	6839      	ldr	r1, [r7, #0]
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f002 fce1 	bl	801914a <sys_arch_mbox_fetch>
 8016788:	4603      	mov	r3, r0
 801678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801678e:	d102      	bne.n	8016796 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016790:	f7ff ff68 	bl	8016664 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016794:	e7e3      	b.n	801675e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016796:	3710      	adds	r7, #16
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	2000c838 	.word	0x2000c838

080167a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80167a0:	b480      	push	{r7}
 80167a2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80167a4:	bf00      	nop
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr
	...

080167b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80167b0:	b480      	push	{r7}
 80167b2:	b083      	sub	sp, #12
 80167b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80167b6:	2300      	movs	r3, #0
 80167b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80167ba:	4b17      	ldr	r3, [pc, #92]	; (8016818 <udp_new_port+0x68>)
 80167bc:	881b      	ldrh	r3, [r3, #0]
 80167be:	1c5a      	adds	r2, r3, #1
 80167c0:	b291      	uxth	r1, r2
 80167c2:	4a15      	ldr	r2, [pc, #84]	; (8016818 <udp_new_port+0x68>)
 80167c4:	8011      	strh	r1, [r2, #0]
 80167c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167ca:	4293      	cmp	r3, r2
 80167cc:	d103      	bne.n	80167d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80167ce:	4b12      	ldr	r3, [pc, #72]	; (8016818 <udp_new_port+0x68>)
 80167d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80167d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80167d6:	4b11      	ldr	r3, [pc, #68]	; (801681c <udp_new_port+0x6c>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	603b      	str	r3, [r7, #0]
 80167dc:	e011      	b.n	8016802 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	8a5a      	ldrh	r2, [r3, #18]
 80167e2:	4b0d      	ldr	r3, [pc, #52]	; (8016818 <udp_new_port+0x68>)
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d108      	bne.n	80167fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80167ea:	88fb      	ldrh	r3, [r7, #6]
 80167ec:	3301      	adds	r3, #1
 80167ee:	80fb      	strh	r3, [r7, #6]
 80167f0:	88fb      	ldrh	r3, [r7, #6]
 80167f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80167f6:	d3e0      	bcc.n	80167ba <udp_new_port+0xa>
        return 0;
 80167f8:	2300      	movs	r3, #0
 80167fa:	e007      	b.n	801680c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	603b      	str	r3, [r7, #0]
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d1ea      	bne.n	80167de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016808:	4b03      	ldr	r3, [pc, #12]	; (8016818 <udp_new_port+0x68>)
 801680a:	881b      	ldrh	r3, [r3, #0]
}
 801680c:	4618      	mov	r0, r3
 801680e:	370c      	adds	r7, #12
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr
 8016818:	20000030 	.word	0x20000030
 801681c:	200101e4 	.word	0x200101e4

08016820 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	4613      	mov	r3, r2
 801682c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801682e:	79fb      	ldrb	r3, [r7, #7]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d018      	beq.n	8016866 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d013      	beq.n	8016862 <udp_input_local_match+0x42>
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d00f      	beq.n	8016862 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016842:	4b14      	ldr	r3, [pc, #80]	; (8016894 <udp_input_local_match+0x74>)
 8016844:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801684a:	d00a      	beq.n	8016862 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	4b10      	ldr	r3, [pc, #64]	; (8016894 <udp_input_local_match+0x74>)
 8016852:	695b      	ldr	r3, [r3, #20]
 8016854:	405a      	eors	r2, r3
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	3308      	adds	r3, #8
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801685e:	2b00      	cmp	r3, #0
 8016860:	d110      	bne.n	8016884 <udp_input_local_match+0x64>
          return 1;
 8016862:	2301      	movs	r3, #1
 8016864:	e00f      	b.n	8016886 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d009      	beq.n	8016880 <udp_input_local_match+0x60>
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d005      	beq.n	8016880 <udp_input_local_match+0x60>
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	4b06      	ldr	r3, [pc, #24]	; (8016894 <udp_input_local_match+0x74>)
 801687a:	695b      	ldr	r3, [r3, #20]
 801687c:	429a      	cmp	r2, r3
 801687e:	d101      	bne.n	8016884 <udp_input_local_match+0x64>
      return 1;
 8016880:	2301      	movs	r3, #1
 8016882:	e000      	b.n	8016886 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3714      	adds	r7, #20
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr
 8016892:	bf00      	nop
 8016894:	2000d110 	.word	0x2000d110

08016898 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016898:	b590      	push	{r4, r7, lr}
 801689a:	b08d      	sub	sp, #52	; 0x34
 801689c:	af02      	add	r7, sp, #8
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80168a2:	2300      	movs	r3, #0
 80168a4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	895b      	ldrh	r3, [r3, #10]
 80168aa:	2b07      	cmp	r3, #7
 80168ac:	d803      	bhi.n	80168b6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f7fa f94a 	bl	8010b48 <pbuf_free>
    goto end;
 80168b4:	e0c6      	b.n	8016a44 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80168bc:	4b63      	ldr	r3, [pc, #396]	; (8016a4c <udp_input+0x1b4>)
 80168be:	695a      	ldr	r2, [r3, #20]
 80168c0:	4b62      	ldr	r3, [pc, #392]	; (8016a4c <udp_input+0x1b4>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	4619      	mov	r1, r3
 80168c6:	4610      	mov	r0, r2
 80168c8:	f001 fcf2 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 80168cc:	4603      	mov	r3, r0
 80168ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	881b      	ldrh	r3, [r3, #0]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7f8 ff1c 	bl	800f714 <lwip_htons>
 80168dc:	4603      	mov	r3, r0
 80168de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	885b      	ldrh	r3, [r3, #2]
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7f8 ff14 	bl	800f714 <lwip_htons>
 80168ec:	4603      	mov	r3, r0
 80168ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80168f4:	2300      	movs	r3, #0
 80168f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80168f8:	2300      	movs	r3, #0
 80168fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168fc:	4b54      	ldr	r3, [pc, #336]	; (8016a50 <udp_input+0x1b8>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	627b      	str	r3, [r7, #36]	; 0x24
 8016902:	e03b      	b.n	801697c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016906:	8a5b      	ldrh	r3, [r3, #18]
 8016908:	89fa      	ldrh	r2, [r7, #14]
 801690a:	429a      	cmp	r2, r3
 801690c:	d131      	bne.n	8016972 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801690e:	7cfb      	ldrb	r3, [r7, #19]
 8016910:	461a      	mov	r2, r3
 8016912:	6839      	ldr	r1, [r7, #0]
 8016914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016916:	f7ff ff83 	bl	8016820 <udp_input_local_match>
 801691a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801691c:	2b00      	cmp	r3, #0
 801691e:	d028      	beq.n	8016972 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8016920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016922:	7c1b      	ldrb	r3, [r3, #16]
 8016924:	f003 0304 	and.w	r3, r3, #4
 8016928:	2b00      	cmp	r3, #0
 801692a:	d104      	bne.n	8016936 <udp_input+0x9e>
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d101      	bne.n	8016936 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016934:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016938:	8a9b      	ldrh	r3, [r3, #20]
 801693a:	8a3a      	ldrh	r2, [r7, #16]
 801693c:	429a      	cmp	r2, r3
 801693e:	d118      	bne.n	8016972 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016944:	2b00      	cmp	r3, #0
 8016946:	d005      	beq.n	8016954 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694a:	685a      	ldr	r2, [r3, #4]
 801694c:	4b3f      	ldr	r3, [pc, #252]	; (8016a4c <udp_input+0x1b4>)
 801694e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016950:	429a      	cmp	r2, r3
 8016952:	d10e      	bne.n	8016972 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016954:	6a3b      	ldr	r3, [r7, #32]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d014      	beq.n	8016984 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695c:	68da      	ldr	r2, [r3, #12]
 801695e:	6a3b      	ldr	r3, [r7, #32]
 8016960:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016962:	4b3b      	ldr	r3, [pc, #236]	; (8016a50 <udp_input+0x1b8>)
 8016964:	681a      	ldr	r2, [r3, #0]
 8016966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016968:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801696a:	4a39      	ldr	r2, [pc, #228]	; (8016a50 <udp_input+0x1b8>)
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016970:	e008      	b.n	8016984 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016974:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	68db      	ldr	r3, [r3, #12]
 801697a:	627b      	str	r3, [r7, #36]	; 0x24
 801697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697e:	2b00      	cmp	r3, #0
 8016980:	d1c0      	bne.n	8016904 <udp_input+0x6c>
 8016982:	e000      	b.n	8016986 <udp_input+0xee>
        break;
 8016984:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016988:	2b00      	cmp	r3, #0
 801698a:	d101      	bne.n	8016990 <udp_input+0xf8>
    pcb = uncon_pcb;
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016992:	2b00      	cmp	r3, #0
 8016994:	d002      	beq.n	801699c <udp_input+0x104>
    for_us = 1;
 8016996:	2301      	movs	r3, #1
 8016998:	76fb      	strb	r3, [r7, #27]
 801699a:	e00a      	b.n	80169b2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	3304      	adds	r3, #4
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	4b2a      	ldr	r3, [pc, #168]	; (8016a4c <udp_input+0x1b4>)
 80169a4:	695b      	ldr	r3, [r3, #20]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	bf0c      	ite	eq
 80169aa:	2301      	moveq	r3, #1
 80169ac:	2300      	movne	r3, #0
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80169b2:	7efb      	ldrb	r3, [r7, #27]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d042      	beq.n	8016a3e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80169b8:	f06f 0107 	mvn.w	r1, #7
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f7fa f89f 	bl	8010b00 <pbuf_header>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d00a      	beq.n	80169de <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80169c8:	4b22      	ldr	r3, [pc, #136]	; (8016a54 <udp_input+0x1bc>)
 80169ca:	f240 1255 	movw	r2, #341	; 0x155
 80169ce:	4922      	ldr	r1, [pc, #136]	; (8016a58 <udp_input+0x1c0>)
 80169d0:	4822      	ldr	r0, [pc, #136]	; (8016a5c <udp_input+0x1c4>)
 80169d2:	f002 fd95 	bl	8019500 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7fa f8b6 	bl	8010b48 <pbuf_free>
      goto end;
 80169dc:	e032      	b.n	8016a44 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80169de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d012      	beq.n	8016a0a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80169e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e6:	699b      	ldr	r3, [r3, #24]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d00a      	beq.n	8016a02 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	699c      	ldr	r4, [r3, #24]
 80169f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f2:	69d8      	ldr	r0, [r3, #28]
 80169f4:	8a3b      	ldrh	r3, [r7, #16]
 80169f6:	9300      	str	r3, [sp, #0]
 80169f8:	4b19      	ldr	r3, [pc, #100]	; (8016a60 <udp_input+0x1c8>)
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016a00:	e021      	b.n	8016a46 <udp_input+0x1ae>
        pbuf_free(p);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f7fa f8a0 	bl	8010b48 <pbuf_free>
        goto end;
 8016a08:	e01c      	b.n	8016a44 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016a0a:	7cfb      	ldrb	r3, [r7, #19]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d112      	bne.n	8016a36 <udp_input+0x19e>
 8016a10:	4b0e      	ldr	r3, [pc, #56]	; (8016a4c <udp_input+0x1b4>)
 8016a12:	695b      	ldr	r3, [r3, #20]
 8016a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a18:	2be0      	cmp	r3, #224	; 0xe0
 8016a1a:	d00c      	beq.n	8016a36 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016a1c:	4b0b      	ldr	r3, [pc, #44]	; (8016a4c <udp_input+0x1b4>)
 8016a1e:	899b      	ldrh	r3, [r3, #12]
 8016a20:	3308      	adds	r3, #8
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	b21b      	sxth	r3, r3
 8016a26:	4619      	mov	r1, r3
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7fa f87b 	bl	8010b24 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016a2e:	2103      	movs	r1, #3
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f001 f93b 	bl	8017cac <icmp_dest_unreach>
      pbuf_free(p);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7fa f886 	bl	8010b48 <pbuf_free>
  return;
 8016a3c:	e003      	b.n	8016a46 <udp_input+0x1ae>
    pbuf_free(p);
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7fa f882 	bl	8010b48 <pbuf_free>
  return;
 8016a44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016a46:	372c      	adds	r7, #44	; 0x2c
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd90      	pop	{r4, r7, pc}
 8016a4c:	2000d110 	.word	0x2000d110
 8016a50:	200101e4 	.word	0x200101e4
 8016a54:	0801c89c 	.word	0x0801c89c
 8016a58:	0801c8f0 	.word	0x0801c8f0
 8016a5c:	0801c904 	.word	0x0801c904
 8016a60:	2000d120 	.word	0x2000d120

08016a64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b086      	sub	sp, #24
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	4613      	mov	r3, r2
 8016a70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d101      	bne.n	8016a7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016a78:	4b30      	ldr	r3, [pc, #192]	; (8016b3c <udp_bind+0xd8>)
 8016a7a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d002      	beq.n	8016a88 <udp_bind+0x24>
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d102      	bne.n	8016a8e <udp_bind+0x2a>
    return ERR_VAL;
 8016a88:	f06f 0305 	mvn.w	r3, #5
 8016a8c:	e052      	b.n	8016b34 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a92:	4b2b      	ldr	r3, [pc, #172]	; (8016b40 <udp_bind+0xdc>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	617b      	str	r3, [r7, #20]
 8016a98:	e009      	b.n	8016aae <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016a9a:	68fa      	ldr	r2, [r7, #12]
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d102      	bne.n	8016aa8 <udp_bind+0x44>
      rebind = 1;
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8016aa6:	e005      	b.n	8016ab4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	617b      	str	r3, [r7, #20]
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d1f2      	bne.n	8016a9a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016ab4:	88fb      	ldrh	r3, [r7, #6]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d109      	bne.n	8016ace <udp_bind+0x6a>
    port = udp_new_port();
 8016aba:	f7ff fe79 	bl	80167b0 <udp_new_port>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016ac2:	88fb      	ldrh	r3, [r7, #6]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d11e      	bne.n	8016b06 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016ac8:	f06f 0307 	mvn.w	r3, #7
 8016acc:	e032      	b.n	8016b34 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ace:	4b1c      	ldr	r3, [pc, #112]	; (8016b40 <udp_bind+0xdc>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	617b      	str	r3, [r7, #20]
 8016ad4:	e014      	b.n	8016b00 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016ad6:	68fa      	ldr	r2, [r7, #12]
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d00d      	beq.n	8016afa <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	8a5b      	ldrh	r3, [r3, #18]
 8016ae2:	88fa      	ldrh	r2, [r7, #6]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d108      	bne.n	8016afa <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d102      	bne.n	8016afa <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016af4:	f06f 0307 	mvn.w	r3, #7
 8016af8:	e01c      	b.n	8016b34 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	68db      	ldr	r3, [r3, #12]
 8016afe:	617b      	str	r3, [r7, #20]
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d1e7      	bne.n	8016ad6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d002      	beq.n	8016b12 <udp_bind+0xae>
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	e000      	b.n	8016b14 <udp_bind+0xb0>
 8016b12:	2300      	movs	r3, #0
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	88fa      	ldrh	r2, [r7, #6]
 8016b1c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016b1e:	7cfb      	ldrb	r3, [r7, #19]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d106      	bne.n	8016b32 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016b24:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <udp_bind+0xdc>)
 8016b26:	681a      	ldr	r2, [r3, #0]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016b2c:	4a04      	ldr	r2, [pc, #16]	; (8016b40 <udp_bind+0xdc>)
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016b32:	2300      	movs	r3, #0
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3718      	adds	r7, #24
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	0801d1ac 	.word	0x0801d1ac
 8016b40:	200101e4 	.word	0x200101e4

08016b44 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	68ba      	ldr	r2, [r7, #8]
 8016b54:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	687a      	ldr	r2, [r7, #4]
 8016b5a:	61da      	str	r2, [r3, #28]
}
 8016b5c:	bf00      	nop
 8016b5e:	3714      	adds	r7, #20
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016b70:	4b15      	ldr	r3, [pc, #84]	; (8016bc8 <udp_remove+0x60>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d105      	bne.n	8016b86 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016b7a:	4b13      	ldr	r3, [pc, #76]	; (8016bc8 <udp_remove+0x60>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	4a11      	ldr	r2, [pc, #68]	; (8016bc8 <udp_remove+0x60>)
 8016b82:	6013      	str	r3, [r2, #0]
 8016b84:	e017      	b.n	8016bb6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b86:	4b10      	ldr	r3, [pc, #64]	; (8016bc8 <udp_remove+0x60>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	60fb      	str	r3, [r7, #12]
 8016b8c:	e010      	b.n	8016bb0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d009      	beq.n	8016baa <udp_remove+0x42>
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d104      	bne.n	8016baa <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	68da      	ldr	r2, [r3, #12]
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	60da      	str	r2, [r3, #12]
        break;
 8016ba8:	e005      	b.n	8016bb6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	60fb      	str	r3, [r7, #12]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d1eb      	bne.n	8016b8e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	2000      	movs	r0, #0
 8016bba:	f7f9 fa2d 	bl	8010018 <memp_free>
}
 8016bbe:	bf00      	nop
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	200101e4 	.word	0x200101e4

08016bcc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	f7f9 f9aa 	bl	800ff2c <memp_malloc>
 8016bd8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d007      	beq.n	8016bf0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016be0:	2220      	movs	r2, #32
 8016be2:	2100      	movs	r1, #0
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f002 fc83 	bl	80194f0 <memset>
    pcb->ttl = UDP_TTL;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	22ff      	movs	r2, #255	; 0xff
 8016bee:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016bf0:	687b      	ldr	r3, [r7, #4]
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3708      	adds	r7, #8
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b084      	sub	sp, #16
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	4603      	mov	r3, r0
 8016c02:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8016c04:	f7ff ffe2 	bl	8016bcc <udp_new>
 8016c08:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3710      	adds	r7, #16
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}

08016c14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8016c14:	b480      	push	{r7}
 8016c16:	b085      	sub	sp, #20
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
 8016c1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d01e      	beq.n	8016c62 <udp_netif_ip_addr_changed+0x4e>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d01a      	beq.n	8016c62 <udp_netif_ip_addr_changed+0x4e>
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d017      	beq.n	8016c62 <udp_netif_ip_addr_changed+0x4e>
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d013      	beq.n	8016c62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c3a:	4b0d      	ldr	r3, [pc, #52]	; (8016c70 <udp_netif_ip_addr_changed+0x5c>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	60fb      	str	r3, [r7, #12]
 8016c40:	e00c      	b.n	8016c5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681a      	ldr	r2, [r3, #0]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d103      	bne.n	8016c56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	68db      	ldr	r3, [r3, #12]
 8016c5a:	60fb      	str	r3, [r7, #12]
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d1ef      	bne.n	8016c42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016c62:	bf00      	nop
 8016c64:	3714      	adds	r7, #20
 8016c66:	46bd      	mov	sp, r7
 8016c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6c:	4770      	bx	lr
 8016c6e:	bf00      	nop
 8016c70:	200101e4 	.word	0x200101e4

08016c74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016c7c:	4915      	ldr	r1, [pc, #84]	; (8016cd4 <etharp_free_entry+0x60>)
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	4613      	mov	r3, r2
 8016c82:	005b      	lsls	r3, r3, #1
 8016c84:	4413      	add	r3, r2
 8016c86:	00db      	lsls	r3, r3, #3
 8016c88:	440b      	add	r3, r1
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d013      	beq.n	8016cb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016c90:	4910      	ldr	r1, [pc, #64]	; (8016cd4 <etharp_free_entry+0x60>)
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	4613      	mov	r3, r2
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	4413      	add	r3, r2
 8016c9a:	00db      	lsls	r3, r3, #3
 8016c9c:	440b      	add	r3, r1
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7f9 ff51 	bl	8010b48 <pbuf_free>
    arp_table[i].q = NULL;
 8016ca6:	490b      	ldr	r1, [pc, #44]	; (8016cd4 <etharp_free_entry+0x60>)
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	4613      	mov	r3, r2
 8016cac:	005b      	lsls	r3, r3, #1
 8016cae:	4413      	add	r3, r2
 8016cb0:	00db      	lsls	r3, r3, #3
 8016cb2:	440b      	add	r3, r1
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016cb8:	4906      	ldr	r1, [pc, #24]	; (8016cd4 <etharp_free_entry+0x60>)
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	005b      	lsls	r3, r3, #1
 8016cc0:	4413      	add	r3, r2
 8016cc2:	00db      	lsls	r3, r3, #3
 8016cc4:	440b      	add	r3, r1
 8016cc6:	3314      	adds	r3, #20
 8016cc8:	2200      	movs	r2, #0
 8016cca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	2000c844 	.word	0x2000c844

08016cd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b082      	sub	sp, #8
 8016cdc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cde:	2300      	movs	r3, #0
 8016ce0:	71fb      	strb	r3, [r7, #7]
 8016ce2:	e096      	b.n	8016e12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016ce4:	79fa      	ldrb	r2, [r7, #7]
 8016ce6:	494f      	ldr	r1, [pc, #316]	; (8016e24 <etharp_tmr+0x14c>)
 8016ce8:	4613      	mov	r3, r2
 8016cea:	005b      	lsls	r3, r3, #1
 8016cec:	4413      	add	r3, r2
 8016cee:	00db      	lsls	r3, r3, #3
 8016cf0:	440b      	add	r3, r1
 8016cf2:	3314      	adds	r3, #20
 8016cf4:	781b      	ldrb	r3, [r3, #0]
 8016cf6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8016cf8:	79bb      	ldrb	r3, [r7, #6]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	f000 8086 	beq.w	8016e0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8016d00:	79fa      	ldrb	r2, [r7, #7]
 8016d02:	4948      	ldr	r1, [pc, #288]	; (8016e24 <etharp_tmr+0x14c>)
 8016d04:	4613      	mov	r3, r2
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	4413      	add	r3, r2
 8016d0a:	00db      	lsls	r3, r3, #3
 8016d0c:	440b      	add	r3, r1
 8016d0e:	3312      	adds	r3, #18
 8016d10:	881b      	ldrh	r3, [r3, #0]
 8016d12:	3301      	adds	r3, #1
 8016d14:	b298      	uxth	r0, r3
 8016d16:	4943      	ldr	r1, [pc, #268]	; (8016e24 <etharp_tmr+0x14c>)
 8016d18:	4613      	mov	r3, r2
 8016d1a:	005b      	lsls	r3, r3, #1
 8016d1c:	4413      	add	r3, r2
 8016d1e:	00db      	lsls	r3, r3, #3
 8016d20:	440b      	add	r3, r1
 8016d22:	3312      	adds	r3, #18
 8016d24:	4602      	mov	r2, r0
 8016d26:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016d28:	79fa      	ldrb	r2, [r7, #7]
 8016d2a:	493e      	ldr	r1, [pc, #248]	; (8016e24 <etharp_tmr+0x14c>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	3312      	adds	r3, #18
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016d3e:	d215      	bcs.n	8016d6c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d40:	79fa      	ldrb	r2, [r7, #7]
 8016d42:	4938      	ldr	r1, [pc, #224]	; (8016e24 <etharp_tmr+0x14c>)
 8016d44:	4613      	mov	r3, r2
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4413      	add	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	440b      	add	r3, r1
 8016d4e:	3314      	adds	r3, #20
 8016d50:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d10f      	bne.n	8016d76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016d56:	79fa      	ldrb	r2, [r7, #7]
 8016d58:	4932      	ldr	r1, [pc, #200]	; (8016e24 <etharp_tmr+0x14c>)
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	00db      	lsls	r3, r3, #3
 8016d62:	440b      	add	r3, r1
 8016d64:	3312      	adds	r3, #18
 8016d66:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d68:	2b04      	cmp	r3, #4
 8016d6a:	d904      	bls.n	8016d76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016d6c:	79fb      	ldrb	r3, [r7, #7]
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7ff ff80 	bl	8016c74 <etharp_free_entry>
 8016d74:	e04a      	b.n	8016e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016d76:	79fa      	ldrb	r2, [r7, #7]
 8016d78:	492a      	ldr	r1, [pc, #168]	; (8016e24 <etharp_tmr+0x14c>)
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	4413      	add	r3, r2
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	440b      	add	r3, r1
 8016d84:	3314      	adds	r3, #20
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	2b03      	cmp	r3, #3
 8016d8a:	d10a      	bne.n	8016da2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016d8c:	79fa      	ldrb	r2, [r7, #7]
 8016d8e:	4925      	ldr	r1, [pc, #148]	; (8016e24 <etharp_tmr+0x14c>)
 8016d90:	4613      	mov	r3, r2
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	4413      	add	r3, r2
 8016d96:	00db      	lsls	r3, r3, #3
 8016d98:	440b      	add	r3, r1
 8016d9a:	3314      	adds	r3, #20
 8016d9c:	2204      	movs	r2, #4
 8016d9e:	701a      	strb	r2, [r3, #0]
 8016da0:	e034      	b.n	8016e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016da2:	79fa      	ldrb	r2, [r7, #7]
 8016da4:	491f      	ldr	r1, [pc, #124]	; (8016e24 <etharp_tmr+0x14c>)
 8016da6:	4613      	mov	r3, r2
 8016da8:	005b      	lsls	r3, r3, #1
 8016daa:	4413      	add	r3, r2
 8016dac:	00db      	lsls	r3, r3, #3
 8016dae:	440b      	add	r3, r1
 8016db0:	3314      	adds	r3, #20
 8016db2:	781b      	ldrb	r3, [r3, #0]
 8016db4:	2b04      	cmp	r3, #4
 8016db6:	d10a      	bne.n	8016dce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016db8:	79fa      	ldrb	r2, [r7, #7]
 8016dba:	491a      	ldr	r1, [pc, #104]	; (8016e24 <etharp_tmr+0x14c>)
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	4413      	add	r3, r2
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	440b      	add	r3, r1
 8016dc6:	3314      	adds	r3, #20
 8016dc8:	2202      	movs	r2, #2
 8016dca:	701a      	strb	r2, [r3, #0]
 8016dcc:	e01e      	b.n	8016e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016dce:	79fa      	ldrb	r2, [r7, #7]
 8016dd0:	4914      	ldr	r1, [pc, #80]	; (8016e24 <etharp_tmr+0x14c>)
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	005b      	lsls	r3, r3, #1
 8016dd6:	4413      	add	r3, r2
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	440b      	add	r3, r1
 8016ddc:	3314      	adds	r3, #20
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	d113      	bne.n	8016e0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016de4:	79fa      	ldrb	r2, [r7, #7]
 8016de6:	490f      	ldr	r1, [pc, #60]	; (8016e24 <etharp_tmr+0x14c>)
 8016de8:	4613      	mov	r3, r2
 8016dea:	005b      	lsls	r3, r3, #1
 8016dec:	4413      	add	r3, r2
 8016dee:	00db      	lsls	r3, r3, #3
 8016df0:	440b      	add	r3, r1
 8016df2:	3308      	adds	r3, #8
 8016df4:	6818      	ldr	r0, [r3, #0]
 8016df6:	79fa      	ldrb	r2, [r7, #7]
 8016df8:	4613      	mov	r3, r2
 8016dfa:	005b      	lsls	r3, r3, #1
 8016dfc:	4413      	add	r3, r2
 8016dfe:	00db      	lsls	r3, r3, #3
 8016e00:	4a08      	ldr	r2, [pc, #32]	; (8016e24 <etharp_tmr+0x14c>)
 8016e02:	4413      	add	r3, r2
 8016e04:	3304      	adds	r3, #4
 8016e06:	4619      	mov	r1, r3
 8016e08:	f000 fe38 	bl	8017a7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e0c:	79fb      	ldrb	r3, [r7, #7]
 8016e0e:	3301      	adds	r3, #1
 8016e10:	71fb      	strb	r3, [r7, #7]
 8016e12:	79fb      	ldrb	r3, [r7, #7]
 8016e14:	2b09      	cmp	r3, #9
 8016e16:	f67f af65 	bls.w	8016ce4 <etharp_tmr+0xc>
      }
    }
  }
}
 8016e1a:	bf00      	nop
 8016e1c:	3708      	adds	r7, #8
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	2000c844 	.word	0x2000c844

08016e28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b088      	sub	sp, #32
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	460b      	mov	r3, r1
 8016e32:	607a      	str	r2, [r7, #4]
 8016e34:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016e36:	230a      	movs	r3, #10
 8016e38:	77fb      	strb	r3, [r7, #31]
 8016e3a:	230a      	movs	r3, #10
 8016e3c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8016e3e:	230a      	movs	r3, #10
 8016e40:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016e42:	2300      	movs	r3, #0
 8016e44:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8016e46:	230a      	movs	r3, #10
 8016e48:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	833b      	strh	r3, [r7, #24]
 8016e4e:	2300      	movs	r3, #0
 8016e50:	82fb      	strh	r3, [r7, #22]
 8016e52:	2300      	movs	r3, #0
 8016e54:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e56:	2300      	movs	r3, #0
 8016e58:	773b      	strb	r3, [r7, #28]
 8016e5a:	e093      	b.n	8016f84 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8016e5c:	7f3a      	ldrb	r2, [r7, #28]
 8016e5e:	4990      	ldr	r1, [pc, #576]	; (80170a0 <etharp_find_entry+0x278>)
 8016e60:	4613      	mov	r3, r2
 8016e62:	005b      	lsls	r3, r3, #1
 8016e64:	4413      	add	r3, r2
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	440b      	add	r3, r1
 8016e6a:	3314      	adds	r3, #20
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016e70:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016e74:	2b0a      	cmp	r3, #10
 8016e76:	d105      	bne.n	8016e84 <etharp_find_entry+0x5c>
 8016e78:	7cfb      	ldrb	r3, [r7, #19]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d102      	bne.n	8016e84 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016e7e:	7f3b      	ldrb	r3, [r7, #28]
 8016e80:	777b      	strb	r3, [r7, #29]
 8016e82:	e07c      	b.n	8016f7e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016e84:	7cfb      	ldrb	r3, [r7, #19]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d079      	beq.n	8016f7e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016e8a:	7cfb      	ldrb	r3, [r7, #19]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d009      	beq.n	8016ea4 <etharp_find_entry+0x7c>
 8016e90:	7cfb      	ldrb	r3, [r7, #19]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d806      	bhi.n	8016ea4 <etharp_find_entry+0x7c>
 8016e96:	4b83      	ldr	r3, [pc, #524]	; (80170a4 <etharp_find_entry+0x27c>)
 8016e98:	f44f 7293 	mov.w	r2, #294	; 0x126
 8016e9c:	4982      	ldr	r1, [pc, #520]	; (80170a8 <etharp_find_entry+0x280>)
 8016e9e:	4883      	ldr	r0, [pc, #524]	; (80170ac <etharp_find_entry+0x284>)
 8016ea0:	f002 fb2e 	bl	8019500 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d00f      	beq.n	8016eca <etharp_find_entry+0xa2>
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	6819      	ldr	r1, [r3, #0]
 8016eae:	7f3a      	ldrb	r2, [r7, #28]
 8016eb0:	487b      	ldr	r0, [pc, #492]	; (80170a0 <etharp_find_entry+0x278>)
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	00db      	lsls	r3, r3, #3
 8016eba:	4403      	add	r3, r0
 8016ebc:	3304      	adds	r3, #4
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	4299      	cmp	r1, r3
 8016ec2:	d102      	bne.n	8016eca <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016ec4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016ec8:	e0e5      	b.n	8017096 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016eca:	7cfb      	ldrb	r3, [r7, #19]
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d13b      	bne.n	8016f48 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ed0:	7f3a      	ldrb	r2, [r7, #28]
 8016ed2:	4973      	ldr	r1, [pc, #460]	; (80170a0 <etharp_find_entry+0x278>)
 8016ed4:	4613      	mov	r3, r2
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	4413      	add	r3, r2
 8016eda:	00db      	lsls	r3, r3, #3
 8016edc:	440b      	add	r3, r1
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d018      	beq.n	8016f16 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8016ee4:	7f3a      	ldrb	r2, [r7, #28]
 8016ee6:	496e      	ldr	r1, [pc, #440]	; (80170a0 <etharp_find_entry+0x278>)
 8016ee8:	4613      	mov	r3, r2
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	4413      	add	r3, r2
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	440b      	add	r3, r1
 8016ef2:	3312      	adds	r3, #18
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	8b3a      	ldrh	r2, [r7, #24]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d840      	bhi.n	8016f7e <etharp_find_entry+0x156>
            old_queue = i;
 8016efc:	7f3b      	ldrb	r3, [r7, #28]
 8016efe:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8016f00:	7f3a      	ldrb	r2, [r7, #28]
 8016f02:	4967      	ldr	r1, [pc, #412]	; (80170a0 <etharp_find_entry+0x278>)
 8016f04:	4613      	mov	r3, r2
 8016f06:	005b      	lsls	r3, r3, #1
 8016f08:	4413      	add	r3, r2
 8016f0a:	00db      	lsls	r3, r3, #3
 8016f0c:	440b      	add	r3, r1
 8016f0e:	3312      	adds	r3, #18
 8016f10:	881b      	ldrh	r3, [r3, #0]
 8016f12:	833b      	strh	r3, [r7, #24]
 8016f14:	e033      	b.n	8016f7e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016f16:	7f3a      	ldrb	r2, [r7, #28]
 8016f18:	4961      	ldr	r1, [pc, #388]	; (80170a0 <etharp_find_entry+0x278>)
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	005b      	lsls	r3, r3, #1
 8016f1e:	4413      	add	r3, r2
 8016f20:	00db      	lsls	r3, r3, #3
 8016f22:	440b      	add	r3, r1
 8016f24:	3312      	adds	r3, #18
 8016f26:	881b      	ldrh	r3, [r3, #0]
 8016f28:	8afa      	ldrh	r2, [r7, #22]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d827      	bhi.n	8016f7e <etharp_find_entry+0x156>
            old_pending = i;
 8016f2e:	7f3b      	ldrb	r3, [r7, #28]
 8016f30:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016f32:	7f3a      	ldrb	r2, [r7, #28]
 8016f34:	495a      	ldr	r1, [pc, #360]	; (80170a0 <etharp_find_entry+0x278>)
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	440b      	add	r3, r1
 8016f40:	3312      	adds	r3, #18
 8016f42:	881b      	ldrh	r3, [r3, #0]
 8016f44:	82fb      	strh	r3, [r7, #22]
 8016f46:	e01a      	b.n	8016f7e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016f48:	7cfb      	ldrb	r3, [r7, #19]
 8016f4a:	2b01      	cmp	r3, #1
 8016f4c:	d917      	bls.n	8016f7e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016f4e:	7f3a      	ldrb	r2, [r7, #28]
 8016f50:	4953      	ldr	r1, [pc, #332]	; (80170a0 <etharp_find_entry+0x278>)
 8016f52:	4613      	mov	r3, r2
 8016f54:	005b      	lsls	r3, r3, #1
 8016f56:	4413      	add	r3, r2
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	440b      	add	r3, r1
 8016f5c:	3312      	adds	r3, #18
 8016f5e:	881b      	ldrh	r3, [r3, #0]
 8016f60:	8aba      	ldrh	r2, [r7, #20]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d80b      	bhi.n	8016f7e <etharp_find_entry+0x156>
            old_stable = i;
 8016f66:	7f3b      	ldrb	r3, [r7, #28]
 8016f68:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8016f6a:	7f3a      	ldrb	r2, [r7, #28]
 8016f6c:	494c      	ldr	r1, [pc, #304]	; (80170a0 <etharp_find_entry+0x278>)
 8016f6e:	4613      	mov	r3, r2
 8016f70:	005b      	lsls	r3, r3, #1
 8016f72:	4413      	add	r3, r2
 8016f74:	00db      	lsls	r3, r3, #3
 8016f76:	440b      	add	r3, r1
 8016f78:	3312      	adds	r3, #18
 8016f7a:	881b      	ldrh	r3, [r3, #0]
 8016f7c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f7e:	7f3b      	ldrb	r3, [r7, #28]
 8016f80:	3301      	adds	r3, #1
 8016f82:	773b      	strb	r3, [r7, #28]
 8016f84:	7f3b      	ldrb	r3, [r7, #28]
 8016f86:	2b09      	cmp	r3, #9
 8016f88:	f67f af68 	bls.w	8016e5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016f8c:	7afb      	ldrb	r3, [r7, #11]
 8016f8e:	f003 0302 	and.w	r3, r3, #2
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d108      	bne.n	8016fa8 <etharp_find_entry+0x180>
 8016f96:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016f9a:	2b0a      	cmp	r3, #10
 8016f9c:	d107      	bne.n	8016fae <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016f9e:	7afb      	ldrb	r3, [r7, #11]
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d102      	bne.n	8016fae <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8016fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fac:	e073      	b.n	8017096 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016fae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016fb2:	2b09      	cmp	r3, #9
 8016fb4:	dc02      	bgt.n	8016fbc <etharp_find_entry+0x194>
    i = empty;
 8016fb6:	7f7b      	ldrb	r3, [r7, #29]
 8016fb8:	773b      	strb	r3, [r7, #28]
 8016fba:	e036      	b.n	801702a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016fbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016fc0:	2b09      	cmp	r3, #9
 8016fc2:	dc13      	bgt.n	8016fec <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8016fc4:	7fbb      	ldrb	r3, [r7, #30]
 8016fc6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016fc8:	7f3a      	ldrb	r2, [r7, #28]
 8016fca:	4935      	ldr	r1, [pc, #212]	; (80170a0 <etharp_find_entry+0x278>)
 8016fcc:	4613      	mov	r3, r2
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	4413      	add	r3, r2
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	440b      	add	r3, r1
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d018      	beq.n	801700e <etharp_find_entry+0x1e6>
 8016fdc:	4b31      	ldr	r3, [pc, #196]	; (80170a4 <etharp_find_entry+0x27c>)
 8016fde:	f240 126f 	movw	r2, #367	; 0x16f
 8016fe2:	4933      	ldr	r1, [pc, #204]	; (80170b0 <etharp_find_entry+0x288>)
 8016fe4:	4831      	ldr	r0, [pc, #196]	; (80170ac <etharp_find_entry+0x284>)
 8016fe6:	f002 fa8b 	bl	8019500 <iprintf>
 8016fea:	e010      	b.n	801700e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016ff0:	2b09      	cmp	r3, #9
 8016ff2:	dc02      	bgt.n	8016ffa <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8016ff4:	7ffb      	ldrb	r3, [r7, #31]
 8016ff6:	773b      	strb	r3, [r7, #28]
 8016ff8:	e009      	b.n	801700e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016ffe:	2b09      	cmp	r3, #9
 8017000:	dc02      	bgt.n	8017008 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017002:	7efb      	ldrb	r3, [r7, #27]
 8017004:	773b      	strb	r3, [r7, #28]
 8017006:	e002      	b.n	801700e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8017008:	f04f 33ff 	mov.w	r3, #4294967295
 801700c:	e043      	b.n	8017096 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801700e:	7f3b      	ldrb	r3, [r7, #28]
 8017010:	2b09      	cmp	r3, #9
 8017012:	d906      	bls.n	8017022 <etharp_find_entry+0x1fa>
 8017014:	4b23      	ldr	r3, [pc, #140]	; (80170a4 <etharp_find_entry+0x27c>)
 8017016:	f240 1281 	movw	r2, #385	; 0x181
 801701a:	4926      	ldr	r1, [pc, #152]	; (80170b4 <etharp_find_entry+0x28c>)
 801701c:	4823      	ldr	r0, [pc, #140]	; (80170ac <etharp_find_entry+0x284>)
 801701e:	f002 fa6f 	bl	8019500 <iprintf>
    etharp_free_entry(i);
 8017022:	7f3b      	ldrb	r3, [r7, #28]
 8017024:	4618      	mov	r0, r3
 8017026:	f7ff fe25 	bl	8016c74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801702a:	7f3b      	ldrb	r3, [r7, #28]
 801702c:	2b09      	cmp	r3, #9
 801702e:	d906      	bls.n	801703e <etharp_find_entry+0x216>
 8017030:	4b1c      	ldr	r3, [pc, #112]	; (80170a4 <etharp_find_entry+0x27c>)
 8017032:	f240 1285 	movw	r2, #389	; 0x185
 8017036:	491f      	ldr	r1, [pc, #124]	; (80170b4 <etharp_find_entry+0x28c>)
 8017038:	481c      	ldr	r0, [pc, #112]	; (80170ac <etharp_find_entry+0x284>)
 801703a:	f002 fa61 	bl	8019500 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801703e:	7f3a      	ldrb	r2, [r7, #28]
 8017040:	4917      	ldr	r1, [pc, #92]	; (80170a0 <etharp_find_entry+0x278>)
 8017042:	4613      	mov	r3, r2
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	4413      	add	r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	440b      	add	r3, r1
 801704c:	3314      	adds	r3, #20
 801704e:	781b      	ldrb	r3, [r3, #0]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d006      	beq.n	8017062 <etharp_find_entry+0x23a>
 8017054:	4b13      	ldr	r3, [pc, #76]	; (80170a4 <etharp_find_entry+0x27c>)
 8017056:	f240 1287 	movw	r2, #391	; 0x187
 801705a:	4917      	ldr	r1, [pc, #92]	; (80170b8 <etharp_find_entry+0x290>)
 801705c:	4813      	ldr	r0, [pc, #76]	; (80170ac <etharp_find_entry+0x284>)
 801705e:	f002 fa4f 	bl	8019500 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d00a      	beq.n	801707e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017068:	7f3a      	ldrb	r2, [r7, #28]
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	6819      	ldr	r1, [r3, #0]
 801706e:	480c      	ldr	r0, [pc, #48]	; (80170a0 <etharp_find_entry+0x278>)
 8017070:	4613      	mov	r3, r2
 8017072:	005b      	lsls	r3, r3, #1
 8017074:	4413      	add	r3, r2
 8017076:	00db      	lsls	r3, r3, #3
 8017078:	4403      	add	r3, r0
 801707a:	3304      	adds	r3, #4
 801707c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801707e:	7f3a      	ldrb	r2, [r7, #28]
 8017080:	4907      	ldr	r1, [pc, #28]	; (80170a0 <etharp_find_entry+0x278>)
 8017082:	4613      	mov	r3, r2
 8017084:	005b      	lsls	r3, r3, #1
 8017086:	4413      	add	r3, r2
 8017088:	00db      	lsls	r3, r3, #3
 801708a:	440b      	add	r3, r1
 801708c:	3312      	adds	r3, #18
 801708e:	2200      	movs	r2, #0
 8017090:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8017092:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8017096:	4618      	mov	r0, r3
 8017098:	3720      	adds	r7, #32
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	2000c844 	.word	0x2000c844
 80170a4:	0801c95c 	.word	0x0801c95c
 80170a8:	0801c9b8 	.word	0x0801c9b8
 80170ac:	0801c9f8 	.word	0x0801c9f8
 80170b0:	0801ca20 	.word	0x0801ca20
 80170b4:	0801ca38 	.word	0x0801ca38
 80170b8:	0801ca4c 	.word	0x0801ca4c

080170bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b088      	sub	sp, #32
 80170c0:	af02      	add	r7, sp, #8
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	60b9      	str	r1, [r7, #8]
 80170c6:	607a      	str	r2, [r7, #4]
 80170c8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80170d0:	2b06      	cmp	r3, #6
 80170d2:	d006      	beq.n	80170e2 <etharp_update_arp_entry+0x26>
 80170d4:	4b48      	ldr	r3, [pc, #288]	; (80171f8 <etharp_update_arp_entry+0x13c>)
 80170d6:	f240 12ab 	movw	r2, #427	; 0x1ab
 80170da:	4948      	ldr	r1, [pc, #288]	; (80171fc <etharp_update_arp_entry+0x140>)
 80170dc:	4848      	ldr	r0, [pc, #288]	; (8017200 <etharp_update_arp_entry+0x144>)
 80170de:	f002 fa0f 	bl	8019500 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d012      	beq.n	801710e <etharp_update_arp_entry+0x52>
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00e      	beq.n	801710e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	68f9      	ldr	r1, [r7, #12]
 80170f6:	4618      	mov	r0, r3
 80170f8:	f001 f8da 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 80170fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d105      	bne.n	801710e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801710a:	2be0      	cmp	r3, #224	; 0xe0
 801710c:	d102      	bne.n	8017114 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801710e:	f06f 030f 	mvn.w	r3, #15
 8017112:	e06c      	b.n	80171ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017114:	78fb      	ldrb	r3, [r7, #3]
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	4619      	mov	r1, r3
 801711a:	68b8      	ldr	r0, [r7, #8]
 801711c:	f7ff fe84 	bl	8016e28 <etharp_find_entry>
 8017120:	4603      	mov	r3, r0
 8017122:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017128:	2b00      	cmp	r3, #0
 801712a:	da02      	bge.n	8017132 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801712c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017130:	e05d      	b.n	80171ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017132:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017136:	4933      	ldr	r1, [pc, #204]	; (8017204 <etharp_update_arp_entry+0x148>)
 8017138:	4613      	mov	r3, r2
 801713a:	005b      	lsls	r3, r3, #1
 801713c:	4413      	add	r3, r2
 801713e:	00db      	lsls	r3, r3, #3
 8017140:	440b      	add	r3, r1
 8017142:	3314      	adds	r3, #20
 8017144:	2202      	movs	r2, #2
 8017146:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017148:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801714c:	492d      	ldr	r1, [pc, #180]	; (8017204 <etharp_update_arp_entry+0x148>)
 801714e:	4613      	mov	r3, r2
 8017150:	005b      	lsls	r3, r3, #1
 8017152:	4413      	add	r3, r2
 8017154:	00db      	lsls	r3, r3, #3
 8017156:	440b      	add	r3, r1
 8017158:	3308      	adds	r3, #8
 801715a:	68fa      	ldr	r2, [r7, #12]
 801715c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801715e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017162:	4613      	mov	r3, r2
 8017164:	005b      	lsls	r3, r3, #1
 8017166:	4413      	add	r3, r2
 8017168:	00db      	lsls	r3, r3, #3
 801716a:	3308      	adds	r3, #8
 801716c:	4a25      	ldr	r2, [pc, #148]	; (8017204 <etharp_update_arp_entry+0x148>)
 801716e:	4413      	add	r3, r2
 8017170:	3304      	adds	r3, #4
 8017172:	2206      	movs	r2, #6
 8017174:	6879      	ldr	r1, [r7, #4]
 8017176:	4618      	mov	r0, r3
 8017178:	f002 f9af 	bl	80194da <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801717c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017180:	4920      	ldr	r1, [pc, #128]	; (8017204 <etharp_update_arp_entry+0x148>)
 8017182:	4613      	mov	r3, r2
 8017184:	005b      	lsls	r3, r3, #1
 8017186:	4413      	add	r3, r2
 8017188:	00db      	lsls	r3, r3, #3
 801718a:	440b      	add	r3, r1
 801718c:	3312      	adds	r3, #18
 801718e:	2200      	movs	r2, #0
 8017190:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017192:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017196:	491b      	ldr	r1, [pc, #108]	; (8017204 <etharp_update_arp_entry+0x148>)
 8017198:	4613      	mov	r3, r2
 801719a:	005b      	lsls	r3, r3, #1
 801719c:	4413      	add	r3, r2
 801719e:	00db      	lsls	r3, r3, #3
 80171a0:	440b      	add	r3, r1
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d021      	beq.n	80171ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80171a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80171ac:	4915      	ldr	r1, [pc, #84]	; (8017204 <etharp_update_arp_entry+0x148>)
 80171ae:	4613      	mov	r3, r2
 80171b0:	005b      	lsls	r3, r3, #1
 80171b2:	4413      	add	r3, r2
 80171b4:	00db      	lsls	r3, r3, #3
 80171b6:	440b      	add	r3, r1
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80171bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80171c0:	4910      	ldr	r1, [pc, #64]	; (8017204 <etharp_update_arp_entry+0x148>)
 80171c2:	4613      	mov	r3, r2
 80171c4:	005b      	lsls	r3, r3, #1
 80171c6:	4413      	add	r3, r2
 80171c8:	00db      	lsls	r3, r3, #3
 80171ca:	440b      	add	r3, r1
 80171cc:	2200      	movs	r2, #0
 80171ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80171d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6939      	ldr	r1, [r7, #16]
 80171e0:	68f8      	ldr	r0, [r7, #12]
 80171e2:	f001 ff07 	bl	8018ff4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80171e6:	6938      	ldr	r0, [r7, #16]
 80171e8:	f7f9 fcae 	bl	8010b48 <pbuf_free>
  }
  return ERR_OK;
 80171ec:	2300      	movs	r3, #0
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	3718      	adds	r7, #24
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}
 80171f6:	bf00      	nop
 80171f8:	0801c95c 	.word	0x0801c95c
 80171fc:	0801ca78 	.word	0x0801ca78
 8017200:	0801c9f8 	.word	0x0801c9f8
 8017204:	2000c844 	.word	0x2000c844

08017208 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b084      	sub	sp, #16
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017210:	2300      	movs	r3, #0
 8017212:	73fb      	strb	r3, [r7, #15]
 8017214:	e01f      	b.n	8017256 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8017216:	7bfa      	ldrb	r2, [r7, #15]
 8017218:	4912      	ldr	r1, [pc, #72]	; (8017264 <etharp_cleanup_netif+0x5c>)
 801721a:	4613      	mov	r3, r2
 801721c:	005b      	lsls	r3, r3, #1
 801721e:	4413      	add	r3, r2
 8017220:	00db      	lsls	r3, r3, #3
 8017222:	440b      	add	r3, r1
 8017224:	3314      	adds	r3, #20
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801722a:	7bbb      	ldrb	r3, [r7, #14]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d00f      	beq.n	8017250 <etharp_cleanup_netif+0x48>
 8017230:	7bfa      	ldrb	r2, [r7, #15]
 8017232:	490c      	ldr	r1, [pc, #48]	; (8017264 <etharp_cleanup_netif+0x5c>)
 8017234:	4613      	mov	r3, r2
 8017236:	005b      	lsls	r3, r3, #1
 8017238:	4413      	add	r3, r2
 801723a:	00db      	lsls	r3, r3, #3
 801723c:	440b      	add	r3, r1
 801723e:	3308      	adds	r3, #8
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	687a      	ldr	r2, [r7, #4]
 8017244:	429a      	cmp	r2, r3
 8017246:	d103      	bne.n	8017250 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	4618      	mov	r0, r3
 801724c:	f7ff fd12 	bl	8016c74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017250:	7bfb      	ldrb	r3, [r7, #15]
 8017252:	3301      	adds	r3, #1
 8017254:	73fb      	strb	r3, [r7, #15]
 8017256:	7bfb      	ldrb	r3, [r7, #15]
 8017258:	2b09      	cmp	r3, #9
 801725a:	d9dc      	bls.n	8017216 <etharp_cleanup_netif+0xe>
    }
  }
}
 801725c:	bf00      	nop
 801725e:	3710      	adds	r7, #16
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}
 8017264:	2000c844 	.word	0x2000c844

08017268 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017268:	b5b0      	push	{r4, r5, r7, lr}
 801726a:	b08a      	sub	sp, #40	; 0x28
 801726c:	af04      	add	r7, sp, #16
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d107      	bne.n	8017288 <etharp_input+0x20>
 8017278:	4b3d      	ldr	r3, [pc, #244]	; (8017370 <etharp_input+0x108>)
 801727a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801727e:	493d      	ldr	r1, [pc, #244]	; (8017374 <etharp_input+0x10c>)
 8017280:	483d      	ldr	r0, [pc, #244]	; (8017378 <etharp_input+0x110>)
 8017282:	f002 f93d 	bl	8019500 <iprintf>
 8017286:	e06f      	b.n	8017368 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	881b      	ldrh	r3, [r3, #0]
 8017292:	b29b      	uxth	r3, r3
 8017294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017298:	d10c      	bne.n	80172b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801729e:	2b06      	cmp	r3, #6
 80172a0:	d108      	bne.n	80172b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80172a6:	2b04      	cmp	r3, #4
 80172a8:	d104      	bne.n	80172b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	885b      	ldrh	r3, [r3, #2]
 80172ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80172b0:	2b08      	cmp	r3, #8
 80172b2:	d003      	beq.n	80172bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f7f9 fc47 	bl	8010b48 <pbuf_free>
    return;
 80172ba:	e055      	b.n	8017368 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	330e      	adds	r3, #14
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	3318      	adds	r3, #24
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	3304      	adds	r3, #4
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d102      	bne.n	80172dc <etharp_input+0x74>
    for_us = 0;
 80172d6:	2300      	movs	r3, #0
 80172d8:	75fb      	strb	r3, [r7, #23]
 80172da:	e009      	b.n	80172f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80172dc:	68ba      	ldr	r2, [r7, #8]
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	3304      	adds	r3, #4
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	429a      	cmp	r2, r3
 80172e6:	bf0c      	ite	eq
 80172e8:	2301      	moveq	r3, #1
 80172ea:	2300      	movne	r3, #0
 80172ec:	b2db      	uxtb	r3, r3
 80172ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	f103 0208 	add.w	r2, r3, #8
 80172f6:	7dfb      	ldrb	r3, [r7, #23]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d001      	beq.n	8017300 <etharp_input+0x98>
 80172fc:	2301      	movs	r3, #1
 80172fe:	e000      	b.n	8017302 <etharp_input+0x9a>
 8017300:	2302      	movs	r3, #2
 8017302:	f107 010c 	add.w	r1, r7, #12
 8017306:	6838      	ldr	r0, [r7, #0]
 8017308:	f7ff fed8 	bl	80170bc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	88db      	ldrh	r3, [r3, #6]
 8017310:	b29b      	uxth	r3, r3
 8017312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017316:	d003      	beq.n	8017320 <etharp_input+0xb8>
 8017318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801731c:	d01e      	beq.n	801735c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801731e:	e020      	b.n	8017362 <etharp_input+0xfa>
    if (for_us) {
 8017320:	7dfb      	ldrb	r3, [r7, #23]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d01c      	beq.n	8017360 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8017338:	683b      	ldr	r3, [r7, #0]
 801733a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801733c:	693a      	ldr	r2, [r7, #16]
 801733e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8017340:	2102      	movs	r1, #2
 8017342:	9103      	str	r1, [sp, #12]
 8017344:	f107 010c 	add.w	r1, r7, #12
 8017348:	9102      	str	r1, [sp, #8]
 801734a:	9201      	str	r2, [sp, #4]
 801734c:	9300      	str	r3, [sp, #0]
 801734e:	462b      	mov	r3, r5
 8017350:	4622      	mov	r2, r4
 8017352:	4601      	mov	r1, r0
 8017354:	6838      	ldr	r0, [r7, #0]
 8017356:	f000 fae3 	bl	8017920 <etharp_raw>
    break;
 801735a:	e001      	b.n	8017360 <etharp_input+0xf8>
    break;
 801735c:	bf00      	nop
 801735e:	e000      	b.n	8017362 <etharp_input+0xfa>
    break;
 8017360:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f7f9 fbf0 	bl	8010b48 <pbuf_free>
}
 8017368:	3718      	adds	r7, #24
 801736a:	46bd      	mov	sp, r7
 801736c:	bdb0      	pop	{r4, r5, r7, pc}
 801736e:	bf00      	nop
 8017370:	0801c95c 	.word	0x0801c95c
 8017374:	0801cad0 	.word	0x0801cad0
 8017378:	0801c9f8 	.word	0x0801c9f8

0801737c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b086      	sub	sp, #24
 8017380:	af02      	add	r7, sp, #8
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	4613      	mov	r3, r2
 8017388:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801738a:	79fa      	ldrb	r2, [r7, #7]
 801738c:	4944      	ldr	r1, [pc, #272]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 801738e:	4613      	mov	r3, r2
 8017390:	005b      	lsls	r3, r3, #1
 8017392:	4413      	add	r3, r2
 8017394:	00db      	lsls	r3, r3, #3
 8017396:	440b      	add	r3, r1
 8017398:	3314      	adds	r3, #20
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	2b01      	cmp	r3, #1
 801739e:	d806      	bhi.n	80173ae <etharp_output_to_arp_index+0x32>
 80173a0:	4b40      	ldr	r3, [pc, #256]	; (80174a4 <etharp_output_to_arp_index+0x128>)
 80173a2:	f240 22ed 	movw	r2, #749	; 0x2ed
 80173a6:	4940      	ldr	r1, [pc, #256]	; (80174a8 <etharp_output_to_arp_index+0x12c>)
 80173a8:	4840      	ldr	r0, [pc, #256]	; (80174ac <etharp_output_to_arp_index+0x130>)
 80173aa:	f002 f8a9 	bl	8019500 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80173ae:	79fa      	ldrb	r2, [r7, #7]
 80173b0:	493b      	ldr	r1, [pc, #236]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 80173b2:	4613      	mov	r3, r2
 80173b4:	005b      	lsls	r3, r3, #1
 80173b6:	4413      	add	r3, r2
 80173b8:	00db      	lsls	r3, r3, #3
 80173ba:	440b      	add	r3, r1
 80173bc:	3314      	adds	r3, #20
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	2b02      	cmp	r3, #2
 80173c2:	d153      	bne.n	801746c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80173c4:	79fa      	ldrb	r2, [r7, #7]
 80173c6:	4936      	ldr	r1, [pc, #216]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 80173c8:	4613      	mov	r3, r2
 80173ca:	005b      	lsls	r3, r3, #1
 80173cc:	4413      	add	r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	440b      	add	r3, r1
 80173d2:	3312      	adds	r3, #18
 80173d4:	881b      	ldrh	r3, [r3, #0]
 80173d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80173da:	d919      	bls.n	8017410 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80173dc:	79fa      	ldrb	r2, [r7, #7]
 80173de:	4613      	mov	r3, r2
 80173e0:	005b      	lsls	r3, r3, #1
 80173e2:	4413      	add	r3, r2
 80173e4:	00db      	lsls	r3, r3, #3
 80173e6:	4a2e      	ldr	r2, [pc, #184]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 80173e8:	4413      	add	r3, r2
 80173ea:	3304      	adds	r3, #4
 80173ec:	4619      	mov	r1, r3
 80173ee:	68f8      	ldr	r0, [r7, #12]
 80173f0:	f000 fb44 	bl	8017a7c <etharp_request>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d138      	bne.n	801746c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80173fa:	79fa      	ldrb	r2, [r7, #7]
 80173fc:	4928      	ldr	r1, [pc, #160]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 80173fe:	4613      	mov	r3, r2
 8017400:	005b      	lsls	r3, r3, #1
 8017402:	4413      	add	r3, r2
 8017404:	00db      	lsls	r3, r3, #3
 8017406:	440b      	add	r3, r1
 8017408:	3314      	adds	r3, #20
 801740a:	2203      	movs	r2, #3
 801740c:	701a      	strb	r2, [r3, #0]
 801740e:	e02d      	b.n	801746c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017410:	79fa      	ldrb	r2, [r7, #7]
 8017412:	4923      	ldr	r1, [pc, #140]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 8017414:	4613      	mov	r3, r2
 8017416:	005b      	lsls	r3, r3, #1
 8017418:	4413      	add	r3, r2
 801741a:	00db      	lsls	r3, r3, #3
 801741c:	440b      	add	r3, r1
 801741e:	3312      	adds	r3, #18
 8017420:	881b      	ldrh	r3, [r3, #0]
 8017422:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017426:	d321      	bcc.n	801746c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017428:	79fa      	ldrb	r2, [r7, #7]
 801742a:	4613      	mov	r3, r2
 801742c:	005b      	lsls	r3, r3, #1
 801742e:	4413      	add	r3, r2
 8017430:	00db      	lsls	r3, r3, #3
 8017432:	4a1b      	ldr	r2, [pc, #108]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 8017434:	4413      	add	r3, r2
 8017436:	1d19      	adds	r1, r3, #4
 8017438:	79fa      	ldrb	r2, [r7, #7]
 801743a:	4613      	mov	r3, r2
 801743c:	005b      	lsls	r3, r3, #1
 801743e:	4413      	add	r3, r2
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	3308      	adds	r3, #8
 8017444:	4a16      	ldr	r2, [pc, #88]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 8017446:	4413      	add	r3, r2
 8017448:	3304      	adds	r3, #4
 801744a:	461a      	mov	r2, r3
 801744c:	68f8      	ldr	r0, [r7, #12]
 801744e:	f000 faf3 	bl	8017a38 <etharp_request_dst>
 8017452:	4603      	mov	r3, r0
 8017454:	2b00      	cmp	r3, #0
 8017456:	d109      	bne.n	801746c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017458:	79fa      	ldrb	r2, [r7, #7]
 801745a:	4911      	ldr	r1, [pc, #68]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 801745c:	4613      	mov	r3, r2
 801745e:	005b      	lsls	r3, r3, #1
 8017460:	4413      	add	r3, r2
 8017462:	00db      	lsls	r3, r3, #3
 8017464:	440b      	add	r3, r1
 8017466:	3314      	adds	r3, #20
 8017468:	2203      	movs	r2, #3
 801746a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8017472:	79fa      	ldrb	r2, [r7, #7]
 8017474:	4613      	mov	r3, r2
 8017476:	005b      	lsls	r3, r3, #1
 8017478:	4413      	add	r3, r2
 801747a:	00db      	lsls	r3, r3, #3
 801747c:	3308      	adds	r3, #8
 801747e:	4a08      	ldr	r2, [pc, #32]	; (80174a0 <etharp_output_to_arp_index+0x124>)
 8017480:	4413      	add	r3, r2
 8017482:	1d1a      	adds	r2, r3, #4
 8017484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017488:	9300      	str	r3, [sp, #0]
 801748a:	4613      	mov	r3, r2
 801748c:	460a      	mov	r2, r1
 801748e:	68b9      	ldr	r1, [r7, #8]
 8017490:	68f8      	ldr	r0, [r7, #12]
 8017492:	f001 fdaf 	bl	8018ff4 <ethernet_output>
 8017496:	4603      	mov	r3, r0
}
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	2000c844 	.word	0x2000c844
 80174a4:	0801c95c 	.word	0x0801c95c
 80174a8:	0801caf0 	.word	0x0801caf0
 80174ac:	0801c9f8 	.word	0x0801c9f8

080174b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b08a      	sub	sp, #40	; 0x28
 80174b4:	af02      	add	r7, sp, #8
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	60b9      	str	r1, [r7, #8]
 80174ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d106      	bne.n	80174d4 <etharp_output+0x24>
 80174c6:	4b69      	ldr	r3, [pc, #420]	; (801766c <etharp_output+0x1bc>)
 80174c8:	f240 321b 	movw	r2, #795	; 0x31b
 80174cc:	4968      	ldr	r1, [pc, #416]	; (8017670 <etharp_output+0x1c0>)
 80174ce:	4869      	ldr	r0, [pc, #420]	; (8017674 <etharp_output+0x1c4>)
 80174d0:	f002 f816 	bl	8019500 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d106      	bne.n	80174e8 <etharp_output+0x38>
 80174da:	4b64      	ldr	r3, [pc, #400]	; (801766c <etharp_output+0x1bc>)
 80174dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80174e0:	4965      	ldr	r1, [pc, #404]	; (8017678 <etharp_output+0x1c8>)
 80174e2:	4864      	ldr	r0, [pc, #400]	; (8017674 <etharp_output+0x1c4>)
 80174e4:	f002 f80c 	bl	8019500 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d106      	bne.n	80174fc <etharp_output+0x4c>
 80174ee:	4b5f      	ldr	r3, [pc, #380]	; (801766c <etharp_output+0x1bc>)
 80174f0:	f240 321d 	movw	r2, #797	; 0x31d
 80174f4:	4961      	ldr	r1, [pc, #388]	; (801767c <etharp_output+0x1cc>)
 80174f6:	485f      	ldr	r0, [pc, #380]	; (8017674 <etharp_output+0x1c4>)
 80174f8:	f002 f802 	bl	8019500 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	68f9      	ldr	r1, [r7, #12]
 8017502:	4618      	mov	r0, r3
 8017504:	f000 fed4 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 8017508:	4603      	mov	r3, r0
 801750a:	2b00      	cmp	r3, #0
 801750c:	d002      	beq.n	8017514 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801750e:	4b5c      	ldr	r3, [pc, #368]	; (8017680 <etharp_output+0x1d0>)
 8017510:	61fb      	str	r3, [r7, #28]
 8017512:	e09b      	b.n	801764c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801751c:	2be0      	cmp	r3, #224	; 0xe0
 801751e:	d118      	bne.n	8017552 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017520:	2301      	movs	r3, #1
 8017522:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017524:	2300      	movs	r3, #0
 8017526:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017528:	235e      	movs	r3, #94	; 0x5e
 801752a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	3301      	adds	r3, #1
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017536:	b2db      	uxtb	r3, r3
 8017538:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	3302      	adds	r3, #2
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	3303      	adds	r3, #3
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801754a:	f107 0310 	add.w	r3, r7, #16
 801754e:	61fb      	str	r3, [r7, #28]
 8017550:	e07c      	b.n	801764c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681a      	ldr	r2, [r3, #0]
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	3304      	adds	r3, #4
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	405a      	eors	r2, r3
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	3308      	adds	r3, #8
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	4013      	ands	r3, r2
 8017566:	2b00      	cmp	r3, #0
 8017568:	d012      	beq.n	8017590 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017570:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017574:	4293      	cmp	r3, r2
 8017576:	d00b      	beq.n	8017590 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	330c      	adds	r3, #12
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d003      	beq.n	801758a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	330c      	adds	r3, #12
 8017586:	61bb      	str	r3, [r7, #24]
 8017588:	e002      	b.n	8017590 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801758a:	f06f 0303 	mvn.w	r3, #3
 801758e:	e069      	b.n	8017664 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017590:	4b3c      	ldr	r3, [pc, #240]	; (8017684 <etharp_output+0x1d4>)
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	4619      	mov	r1, r3
 8017596:	4a3c      	ldr	r2, [pc, #240]	; (8017688 <etharp_output+0x1d8>)
 8017598:	460b      	mov	r3, r1
 801759a:	005b      	lsls	r3, r3, #1
 801759c:	440b      	add	r3, r1
 801759e:	00db      	lsls	r3, r3, #3
 80175a0:	4413      	add	r3, r2
 80175a2:	3314      	adds	r3, #20
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	2b01      	cmp	r3, #1
 80175a8:	d917      	bls.n	80175da <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80175aa:	69bb      	ldr	r3, [r7, #24]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	4b35      	ldr	r3, [pc, #212]	; (8017684 <etharp_output+0x1d4>)
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	4618      	mov	r0, r3
 80175b4:	4934      	ldr	r1, [pc, #208]	; (8017688 <etharp_output+0x1d8>)
 80175b6:	4603      	mov	r3, r0
 80175b8:	005b      	lsls	r3, r3, #1
 80175ba:	4403      	add	r3, r0
 80175bc:	00db      	lsls	r3, r3, #3
 80175be:	440b      	add	r3, r1
 80175c0:	3304      	adds	r3, #4
 80175c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80175c4:	429a      	cmp	r2, r3
 80175c6:	d108      	bne.n	80175da <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80175c8:	4b2e      	ldr	r3, [pc, #184]	; (8017684 <etharp_output+0x1d4>)
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	461a      	mov	r2, r3
 80175ce:	68b9      	ldr	r1, [r7, #8]
 80175d0:	68f8      	ldr	r0, [r7, #12]
 80175d2:	f7ff fed3 	bl	801737c <etharp_output_to_arp_index>
 80175d6:	4603      	mov	r3, r0
 80175d8:	e044      	b.n	8017664 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80175da:	2300      	movs	r3, #0
 80175dc:	75fb      	strb	r3, [r7, #23]
 80175de:	e02a      	b.n	8017636 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80175e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80175e4:	4928      	ldr	r1, [pc, #160]	; (8017688 <etharp_output+0x1d8>)
 80175e6:	4613      	mov	r3, r2
 80175e8:	005b      	lsls	r3, r3, #1
 80175ea:	4413      	add	r3, r2
 80175ec:	00db      	lsls	r3, r3, #3
 80175ee:	440b      	add	r3, r1
 80175f0:	3314      	adds	r3, #20
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d918      	bls.n	801762a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	6819      	ldr	r1, [r3, #0]
 80175fc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017600:	4821      	ldr	r0, [pc, #132]	; (8017688 <etharp_output+0x1d8>)
 8017602:	4613      	mov	r3, r2
 8017604:	005b      	lsls	r3, r3, #1
 8017606:	4413      	add	r3, r2
 8017608:	00db      	lsls	r3, r3, #3
 801760a:	4403      	add	r3, r0
 801760c:	3304      	adds	r3, #4
 801760e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017610:	4299      	cmp	r1, r3
 8017612:	d10a      	bne.n	801762a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8017614:	7dfa      	ldrb	r2, [r7, #23]
 8017616:	4b1b      	ldr	r3, [pc, #108]	; (8017684 <etharp_output+0x1d4>)
 8017618:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801761a:	7dfb      	ldrb	r3, [r7, #23]
 801761c:	461a      	mov	r2, r3
 801761e:	68b9      	ldr	r1, [r7, #8]
 8017620:	68f8      	ldr	r0, [r7, #12]
 8017622:	f7ff feab 	bl	801737c <etharp_output_to_arp_index>
 8017626:	4603      	mov	r3, r0
 8017628:	e01c      	b.n	8017664 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801762a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801762e:	b2db      	uxtb	r3, r3
 8017630:	3301      	adds	r3, #1
 8017632:	b2db      	uxtb	r3, r3
 8017634:	75fb      	strb	r3, [r7, #23]
 8017636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801763a:	2b09      	cmp	r3, #9
 801763c:	ddd0      	ble.n	80175e0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801763e:	68ba      	ldr	r2, [r7, #8]
 8017640:	69b9      	ldr	r1, [r7, #24]
 8017642:	68f8      	ldr	r0, [r7, #12]
 8017644:	f000 f822 	bl	801768c <etharp_query>
 8017648:	4603      	mov	r3, r0
 801764a:	e00b      	b.n	8017664 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8017652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	69fb      	ldr	r3, [r7, #28]
 801765a:	68b9      	ldr	r1, [r7, #8]
 801765c:	68f8      	ldr	r0, [r7, #12]
 801765e:	f001 fcc9 	bl	8018ff4 <ethernet_output>
 8017662:	4603      	mov	r3, r0
}
 8017664:	4618      	mov	r0, r3
 8017666:	3720      	adds	r7, #32
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}
 801766c:	0801c95c 	.word	0x0801c95c
 8017670:	0801cad0 	.word	0x0801cad0
 8017674:	0801c9f8 	.word	0x0801c9f8
 8017678:	0801cb20 	.word	0x0801cb20
 801767c:	0801cac0 	.word	0x0801cac0
 8017680:	0801d1b0 	.word	0x0801d1b0
 8017684:	2000c934 	.word	0x2000c934
 8017688:	2000c844 	.word	0x2000c844

0801768c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b08c      	sub	sp, #48	; 0x30
 8017690:	af02      	add	r7, sp, #8
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	3325      	adds	r3, #37	; 0x25
 801769c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801769e:	23ff      	movs	r3, #255	; 0xff
 80176a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80176a4:	2300      	movs	r3, #0
 80176a6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	68f9      	ldr	r1, [r7, #12]
 80176ae:	4618      	mov	r0, r3
 80176b0:	f000 fdfe 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d10c      	bne.n	80176d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80176c2:	2be0      	cmp	r3, #224	; 0xe0
 80176c4:	d006      	beq.n	80176d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d003      	beq.n	80176d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d102      	bne.n	80176da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80176d4:	f06f 030f 	mvn.w	r3, #15
 80176d8:	e10f      	b.n	80178fa <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80176da:	68fa      	ldr	r2, [r7, #12]
 80176dc:	2101      	movs	r1, #1
 80176de:	68b8      	ldr	r0, [r7, #8]
 80176e0:	f7ff fba2 	bl	8016e28 <etharp_find_entry>
 80176e4:	4603      	mov	r3, r0
 80176e6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80176e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	da02      	bge.n	80176f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 80176f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176f4:	e101      	b.n	80178fa <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80176f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80176fa:	4982      	ldr	r1, [pc, #520]	; (8017904 <etharp_query+0x278>)
 80176fc:	4613      	mov	r3, r2
 80176fe:	005b      	lsls	r3, r3, #1
 8017700:	4413      	add	r3, r2
 8017702:	00db      	lsls	r3, r3, #3
 8017704:	440b      	add	r3, r1
 8017706:	3314      	adds	r3, #20
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d117      	bne.n	801773e <etharp_query+0xb2>
    is_new_entry = 1;
 801770e:	2301      	movs	r3, #1
 8017710:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017712:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017716:	497b      	ldr	r1, [pc, #492]	; (8017904 <etharp_query+0x278>)
 8017718:	4613      	mov	r3, r2
 801771a:	005b      	lsls	r3, r3, #1
 801771c:	4413      	add	r3, r2
 801771e:	00db      	lsls	r3, r3, #3
 8017720:	440b      	add	r3, r1
 8017722:	3314      	adds	r3, #20
 8017724:	2201      	movs	r2, #1
 8017726:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017728:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801772c:	4975      	ldr	r1, [pc, #468]	; (8017904 <etharp_query+0x278>)
 801772e:	4613      	mov	r3, r2
 8017730:	005b      	lsls	r3, r3, #1
 8017732:	4413      	add	r3, r2
 8017734:	00db      	lsls	r3, r3, #3
 8017736:	440b      	add	r3, r1
 8017738:	3308      	adds	r3, #8
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801773e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017742:	4970      	ldr	r1, [pc, #448]	; (8017904 <etharp_query+0x278>)
 8017744:	4613      	mov	r3, r2
 8017746:	005b      	lsls	r3, r3, #1
 8017748:	4413      	add	r3, r2
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	440b      	add	r3, r1
 801774e:	3314      	adds	r3, #20
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b01      	cmp	r3, #1
 8017754:	d012      	beq.n	801777c <etharp_query+0xf0>
 8017756:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801775a:	496a      	ldr	r1, [pc, #424]	; (8017904 <etharp_query+0x278>)
 801775c:	4613      	mov	r3, r2
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	4413      	add	r3, r2
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	440b      	add	r3, r1
 8017766:	3314      	adds	r3, #20
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	2b01      	cmp	r3, #1
 801776c:	d806      	bhi.n	801777c <etharp_query+0xf0>
 801776e:	4b66      	ldr	r3, [pc, #408]	; (8017908 <etharp_query+0x27c>)
 8017770:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017774:	4965      	ldr	r1, [pc, #404]	; (801790c <etharp_query+0x280>)
 8017776:	4866      	ldr	r0, [pc, #408]	; (8017910 <etharp_query+0x284>)
 8017778:	f001 fec2 	bl	8019500 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801777c:	6a3b      	ldr	r3, [r7, #32]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d102      	bne.n	8017788 <etharp_query+0xfc>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d10c      	bne.n	80177a2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017788:	68b9      	ldr	r1, [r7, #8]
 801778a:	68f8      	ldr	r0, [r7, #12]
 801778c:	f000 f976 	bl	8017a7c <etharp_request>
 8017790:	4603      	mov	r3, r0
 8017792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d102      	bne.n	80177a2 <etharp_query+0x116>
      return result;
 801779c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80177a0:	e0ab      	b.n	80178fa <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d106      	bne.n	80177b6 <etharp_query+0x12a>
 80177a8:	4b57      	ldr	r3, [pc, #348]	; (8017908 <etharp_query+0x27c>)
 80177aa:	f240 32db 	movw	r2, #987	; 0x3db
 80177ae:	4959      	ldr	r1, [pc, #356]	; (8017914 <etharp_query+0x288>)
 80177b0:	4857      	ldr	r0, [pc, #348]	; (8017910 <etharp_query+0x284>)
 80177b2:	f001 fea5 	bl	8019500 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80177b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80177ba:	4952      	ldr	r1, [pc, #328]	; (8017904 <etharp_query+0x278>)
 80177bc:	4613      	mov	r3, r2
 80177be:	005b      	lsls	r3, r3, #1
 80177c0:	4413      	add	r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	440b      	add	r3, r1
 80177c6:	3314      	adds	r3, #20
 80177c8:	781b      	ldrb	r3, [r3, #0]
 80177ca:	2b01      	cmp	r3, #1
 80177cc:	d919      	bls.n	8017802 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80177ce:	7cfa      	ldrb	r2, [r7, #19]
 80177d0:	4b51      	ldr	r3, [pc, #324]	; (8017918 <etharp_query+0x28c>)
 80177d2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80177d4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80177d8:	4613      	mov	r3, r2
 80177da:	005b      	lsls	r3, r3, #1
 80177dc:	4413      	add	r3, r2
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	3308      	adds	r3, #8
 80177e2:	4a48      	ldr	r2, [pc, #288]	; (8017904 <etharp_query+0x278>)
 80177e4:	4413      	add	r3, r2
 80177e6:	1d1a      	adds	r2, r3, #4
 80177e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ec:	9300      	str	r3, [sp, #0]
 80177ee:	4613      	mov	r3, r2
 80177f0:	697a      	ldr	r2, [r7, #20]
 80177f2:	6879      	ldr	r1, [r7, #4]
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f001 fbfd 	bl	8018ff4 <ethernet_output>
 80177fa:	4603      	mov	r3, r0
 80177fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017800:	e079      	b.n	80178f6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017802:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017806:	493f      	ldr	r1, [pc, #252]	; (8017904 <etharp_query+0x278>)
 8017808:	4613      	mov	r3, r2
 801780a:	005b      	lsls	r3, r3, #1
 801780c:	4413      	add	r3, r2
 801780e:	00db      	lsls	r3, r3, #3
 8017810:	440b      	add	r3, r1
 8017812:	3314      	adds	r3, #20
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	2b01      	cmp	r3, #1
 8017818:	d16d      	bne.n	80178f6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801781a:	2300      	movs	r3, #0
 801781c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017822:	e01a      	b.n	801785a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017824:	69fb      	ldr	r3, [r7, #28]
 8017826:	895a      	ldrh	r2, [r3, #10]
 8017828:	69fb      	ldr	r3, [r7, #28]
 801782a:	891b      	ldrh	r3, [r3, #8]
 801782c:	429a      	cmp	r2, r3
 801782e:	d10a      	bne.n	8017846 <etharp_query+0x1ba>
 8017830:	69fb      	ldr	r3, [r7, #28]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d006      	beq.n	8017846 <etharp_query+0x1ba>
 8017838:	4b33      	ldr	r3, [pc, #204]	; (8017908 <etharp_query+0x27c>)
 801783a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801783e:	4937      	ldr	r1, [pc, #220]	; (801791c <etharp_query+0x290>)
 8017840:	4833      	ldr	r0, [pc, #204]	; (8017910 <etharp_query+0x284>)
 8017842:	f001 fe5d 	bl	8019500 <iprintf>
      if (p->type != PBUF_ROM) {
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	7b1b      	ldrb	r3, [r3, #12]
 801784a:	2b01      	cmp	r3, #1
 801784c:	d002      	beq.n	8017854 <etharp_query+0x1c8>
        copy_needed = 1;
 801784e:	2301      	movs	r3, #1
 8017850:	61bb      	str	r3, [r7, #24]
        break;
 8017852:	e005      	b.n	8017860 <etharp_query+0x1d4>
      }
      p = p->next;
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	61fb      	str	r3, [r7, #28]
    while (p) {
 801785a:	69fb      	ldr	r3, [r7, #28]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d1e1      	bne.n	8017824 <etharp_query+0x198>
    }
    if (copy_needed) {
 8017860:	69bb      	ldr	r3, [r7, #24]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d017      	beq.n	8017896 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017866:	69fb      	ldr	r3, [r7, #28]
 8017868:	891b      	ldrh	r3, [r3, #8]
 801786a:	2200      	movs	r2, #0
 801786c:	4619      	mov	r1, r3
 801786e:	2002      	movs	r0, #2
 8017870:	f7f8 fdf8 	bl	8010464 <pbuf_alloc>
 8017874:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017876:	69fb      	ldr	r3, [r7, #28]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d011      	beq.n	80178a0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801787c:	6879      	ldr	r1, [r7, #4]
 801787e:	69f8      	ldr	r0, [r7, #28]
 8017880:	f7f9 fa92 	bl	8010da8 <pbuf_copy>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d00a      	beq.n	80178a0 <etharp_query+0x214>
          pbuf_free(p);
 801788a:	69f8      	ldr	r0, [r7, #28]
 801788c:	f7f9 f95c 	bl	8010b48 <pbuf_free>
          p = NULL;
 8017890:	2300      	movs	r3, #0
 8017892:	61fb      	str	r3, [r7, #28]
 8017894:	e004      	b.n	80178a0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801789a:	69f8      	ldr	r0, [r7, #28]
 801789c:	f7f9 fa06 	bl	8010cac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d024      	beq.n	80178f0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80178a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80178aa:	4916      	ldr	r1, [pc, #88]	; (8017904 <etharp_query+0x278>)
 80178ac:	4613      	mov	r3, r2
 80178ae:	005b      	lsls	r3, r3, #1
 80178b0:	4413      	add	r3, r2
 80178b2:	00db      	lsls	r3, r3, #3
 80178b4:	440b      	add	r3, r1
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d00b      	beq.n	80178d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80178bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80178c0:	4910      	ldr	r1, [pc, #64]	; (8017904 <etharp_query+0x278>)
 80178c2:	4613      	mov	r3, r2
 80178c4:	005b      	lsls	r3, r3, #1
 80178c6:	4413      	add	r3, r2
 80178c8:	00db      	lsls	r3, r3, #3
 80178ca:	440b      	add	r3, r1
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	4618      	mov	r0, r3
 80178d0:	f7f9 f93a 	bl	8010b48 <pbuf_free>
      }
      arp_table[i].q = p;
 80178d4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80178d8:	490a      	ldr	r1, [pc, #40]	; (8017904 <etharp_query+0x278>)
 80178da:	4613      	mov	r3, r2
 80178dc:	005b      	lsls	r3, r3, #1
 80178de:	4413      	add	r3, r2
 80178e0:	00db      	lsls	r3, r3, #3
 80178e2:	440b      	add	r3, r1
 80178e4:	69fa      	ldr	r2, [r7, #28]
 80178e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80178e8:	2300      	movs	r3, #0
 80178ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80178ee:	e002      	b.n	80178f6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80178f0:	23ff      	movs	r3, #255	; 0xff
 80178f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80178f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3728      	adds	r7, #40	; 0x28
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	2000c844 	.word	0x2000c844
 8017908:	0801c95c 	.word	0x0801c95c
 801790c:	0801cb2c 	.word	0x0801cb2c
 8017910:	0801c9f8 	.word	0x0801c9f8
 8017914:	0801cb20 	.word	0x0801cb20
 8017918:	2000c934 	.word	0x2000c934
 801791c:	0801cb54 	.word	0x0801cb54

08017920 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b08a      	sub	sp, #40	; 0x28
 8017924:	af02      	add	r7, sp, #8
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
 801792c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801792e:	2300      	movs	r3, #0
 8017930:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d106      	bne.n	8017946 <etharp_raw+0x26>
 8017938:	4b3a      	ldr	r3, [pc, #232]	; (8017a24 <etharp_raw+0x104>)
 801793a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801793e:	493a      	ldr	r1, [pc, #232]	; (8017a28 <etharp_raw+0x108>)
 8017940:	483a      	ldr	r0, [pc, #232]	; (8017a2c <etharp_raw+0x10c>)
 8017942:	f001 fddd 	bl	8019500 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017946:	2200      	movs	r2, #0
 8017948:	211c      	movs	r1, #28
 801794a:	2002      	movs	r0, #2
 801794c:	f7f8 fd8a 	bl	8010464 <pbuf_alloc>
 8017950:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d102      	bne.n	801795e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017958:	f04f 33ff 	mov.w	r3, #4294967295
 801795c:	e05d      	b.n	8017a1a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	895b      	ldrh	r3, [r3, #10]
 8017962:	2b1b      	cmp	r3, #27
 8017964:	d806      	bhi.n	8017974 <etharp_raw+0x54>
 8017966:	4b2f      	ldr	r3, [pc, #188]	; (8017a24 <etharp_raw+0x104>)
 8017968:	f240 4264 	movw	r2, #1124	; 0x464
 801796c:	4930      	ldr	r1, [pc, #192]	; (8017a30 <etharp_raw+0x110>)
 801796e:	482f      	ldr	r0, [pc, #188]	; (8017a2c <etharp_raw+0x10c>)
 8017970:	f001 fdc6 	bl	8019500 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017974:	69bb      	ldr	r3, [r7, #24]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801797a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801797c:	4618      	mov	r0, r3
 801797e:	f7f7 fec9 	bl	800f714 <lwip_htons>
 8017982:	4603      	mov	r3, r0
 8017984:	461a      	mov	r2, r3
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017990:	2b06      	cmp	r3, #6
 8017992:	d006      	beq.n	80179a2 <etharp_raw+0x82>
 8017994:	4b23      	ldr	r3, [pc, #140]	; (8017a24 <etharp_raw+0x104>)
 8017996:	f240 426b 	movw	r2, #1131	; 0x46b
 801799a:	4926      	ldr	r1, [pc, #152]	; (8017a34 <etharp_raw+0x114>)
 801799c:	4823      	ldr	r0, [pc, #140]	; (8017a2c <etharp_raw+0x10c>)
 801799e:	f001 fdaf 	bl	8019500 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	3308      	adds	r3, #8
 80179a6:	2206      	movs	r2, #6
 80179a8:	6839      	ldr	r1, [r7, #0]
 80179aa:	4618      	mov	r0, r3
 80179ac:	f001 fd95 	bl	80194da <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	3312      	adds	r3, #18
 80179b4:	2206      	movs	r2, #6
 80179b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179b8:	4618      	mov	r0, r3
 80179ba:	f001 fd8e 	bl	80194da <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	330e      	adds	r3, #14
 80179c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179c4:	6812      	ldr	r2, [r2, #0]
 80179c6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	3318      	adds	r3, #24
 80179cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179ce:	6812      	ldr	r2, [r2, #0]
 80179d0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	2200      	movs	r2, #0
 80179d6:	701a      	strb	r2, [r3, #0]
 80179d8:	2200      	movs	r2, #0
 80179da:	f042 0201 	orr.w	r2, r2, #1
 80179de:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80179e0:	697b      	ldr	r3, [r7, #20]
 80179e2:	2200      	movs	r2, #0
 80179e4:	f042 0208 	orr.w	r2, r2, #8
 80179e8:	709a      	strb	r2, [r3, #2]
 80179ea:	2200      	movs	r2, #0
 80179ec:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	2206      	movs	r2, #6
 80179f2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	2204      	movs	r2, #4
 80179f8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80179fa:	f640 0306 	movw	r3, #2054	; 0x806
 80179fe:	9300      	str	r3, [sp, #0]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	68ba      	ldr	r2, [r7, #8]
 8017a04:	69b9      	ldr	r1, [r7, #24]
 8017a06:	68f8      	ldr	r0, [r7, #12]
 8017a08:	f001 faf4 	bl	8018ff4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017a0c:	69b8      	ldr	r0, [r7, #24]
 8017a0e:	f7f9 f89b 	bl	8010b48 <pbuf_free>
  p = NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3720      	adds	r7, #32
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	0801c95c 	.word	0x0801c95c
 8017a28:	0801cad0 	.word	0x0801cad0
 8017a2c:	0801c9f8 	.word	0x0801c9f8
 8017a30:	0801cb70 	.word	0x0801cb70
 8017a34:	0801cba4 	.word	0x0801cba4

08017a38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b088      	sub	sp, #32
 8017a3c:	af04      	add	r7, sp, #16
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a54:	2201      	movs	r2, #1
 8017a56:	9203      	str	r2, [sp, #12]
 8017a58:	68ba      	ldr	r2, [r7, #8]
 8017a5a:	9202      	str	r2, [sp, #8]
 8017a5c:	4a06      	ldr	r2, [pc, #24]	; (8017a78 <etharp_request_dst+0x40>)
 8017a5e:	9201      	str	r2, [sp, #4]
 8017a60:	9300      	str	r3, [sp, #0]
 8017a62:	4603      	mov	r3, r0
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	68f8      	ldr	r0, [r7, #12]
 8017a68:	f7ff ff5a 	bl	8017920 <etharp_raw>
 8017a6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
 8017a76:	bf00      	nop
 8017a78:	0801d1b8 	.word	0x0801d1b8

08017a7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017a86:	4a05      	ldr	r2, [pc, #20]	; (8017a9c <etharp_request+0x20>)
 8017a88:	6839      	ldr	r1, [r7, #0]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff ffd4 	bl	8017a38 <etharp_request_dst>
 8017a90:	4603      	mov	r3, r0
}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3708      	adds	r7, #8
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}
 8017a9a:	bf00      	nop
 8017a9c:	0801d1b0 	.word	0x0801d1b0

08017aa0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b08e      	sub	sp, #56	; 0x38
 8017aa4:	af04      	add	r7, sp, #16
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017aaa:	4b7a      	ldr	r3, [pc, #488]	; (8017c94 <icmp_input+0x1f4>)
 8017aac:	689b      	ldr	r3, [r3, #8]
 8017aae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	b29b      	uxth	r3, r3
 8017ab6:	f003 030f 	and.w	r3, r3, #15
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ac2:	2b13      	cmp	r3, #19
 8017ac4:	f240 80d1 	bls.w	8017c6a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	895b      	ldrh	r3, [r3, #10]
 8017acc:	2b03      	cmp	r3, #3
 8017ace:	f240 80ce 	bls.w	8017c6e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	685b      	ldr	r3, [r3, #4]
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017adc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f000 80bb 	beq.w	8017c5c <icmp_input+0x1bc>
 8017ae6:	2b08      	cmp	r3, #8
 8017ae8:	f040 80bb 	bne.w	8017c62 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8017aec:	4b6a      	ldr	r3, [pc, #424]	; (8017c98 <icmp_input+0x1f8>)
 8017aee:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017af0:	4b68      	ldr	r3, [pc, #416]	; (8017c94 <icmp_input+0x1f4>)
 8017af2:	695b      	ldr	r3, [r3, #20]
 8017af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017af8:	2be0      	cmp	r3, #224	; 0xe0
 8017afa:	f000 80bf 	beq.w	8017c7c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017afe:	4b65      	ldr	r3, [pc, #404]	; (8017c94 <icmp_input+0x1f4>)
 8017b00:	695a      	ldr	r2, [r3, #20]
 8017b02:	4b64      	ldr	r3, [pc, #400]	; (8017c94 <icmp_input+0x1f4>)
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	4619      	mov	r1, r3
 8017b08:	4610      	mov	r0, r2
 8017b0a:	f000 fbd1 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	f040 80b5 	bne.w	8017c80 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	891b      	ldrh	r3, [r3, #8]
 8017b1a:	2b07      	cmp	r3, #7
 8017b1c:	f240 80a9 	bls.w	8017c72 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b22:	330e      	adds	r3, #14
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	b21b      	sxth	r3, r3
 8017b28:	4619      	mov	r1, r3
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f7f8 ffe8 	bl	8010b00 <pbuf_header>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d046      	beq.n	8017bc4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	891a      	ldrh	r2, [r3, #8]
 8017b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b3c:	4413      	add	r3, r2
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	2200      	movs	r2, #0
 8017b42:	4619      	mov	r1, r3
 8017b44:	2002      	movs	r0, #2
 8017b46:	f7f8 fc8d 	bl	8010464 <pbuf_alloc>
 8017b4a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8017b4c:	69bb      	ldr	r3, [r7, #24]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	f000 8098 	beq.w	8017c84 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	895b      	ldrh	r3, [r3, #10]
 8017b58:	461a      	mov	r2, r3
 8017b5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b5c:	3308      	adds	r3, #8
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d203      	bcs.n	8017b6a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8017b62:	69b8      	ldr	r0, [r7, #24]
 8017b64:	f7f8 fff0 	bl	8010b48 <pbuf_free>
        goto icmperr;
 8017b68:	e08d      	b.n	8017c86 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8017b6a:	69bb      	ldr	r3, [r7, #24]
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b72:	4618      	mov	r0, r3
 8017b74:	f001 fcb1 	bl	80194da <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8017b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b7a:	425b      	negs	r3, r3
 8017b7c:	b29b      	uxth	r3, r3
 8017b7e:	b21b      	sxth	r3, r3
 8017b80:	4619      	mov	r1, r3
 8017b82:	69b8      	ldr	r0, [r7, #24]
 8017b84:	f7f8 ffbc 	bl	8010b00 <pbuf_header>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d009      	beq.n	8017ba2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017b8e:	4b43      	ldr	r3, [pc, #268]	; (8017c9c <icmp_input+0x1fc>)
 8017b90:	22af      	movs	r2, #175	; 0xaf
 8017b92:	4943      	ldr	r1, [pc, #268]	; (8017ca0 <icmp_input+0x200>)
 8017b94:	4843      	ldr	r0, [pc, #268]	; (8017ca4 <icmp_input+0x204>)
 8017b96:	f001 fcb3 	bl	8019500 <iprintf>
        pbuf_free(r);
 8017b9a:	69b8      	ldr	r0, [r7, #24]
 8017b9c:	f7f8 ffd4 	bl	8010b48 <pbuf_free>
        goto icmperr;
 8017ba0:	e071      	b.n	8017c86 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8017ba2:	6879      	ldr	r1, [r7, #4]
 8017ba4:	69b8      	ldr	r0, [r7, #24]
 8017ba6:	f7f9 f8ff 	bl	8010da8 <pbuf_copy>
 8017baa:	4603      	mov	r3, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d003      	beq.n	8017bb8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8017bb0:	69b8      	ldr	r0, [r7, #24]
 8017bb2:	f7f8 ffc9 	bl	8010b48 <pbuf_free>
        goto icmperr;
 8017bb6:	e066      	b.n	8017c86 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f7f8 ffc5 	bl	8010b48 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	607b      	str	r3, [r7, #4]
 8017bc2:	e015      	b.n	8017bf0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bc6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8017bca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017bce:	33f2      	adds	r3, #242	; 0xf2
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	b21b      	sxth	r3, r3
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	f7f8 ff92 	bl	8010b00 <pbuf_header>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d006      	beq.n	8017bf0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017be2:	4b2e      	ldr	r3, [pc, #184]	; (8017c9c <icmp_input+0x1fc>)
 8017be4:	22c0      	movs	r2, #192	; 0xc0
 8017be6:	4930      	ldr	r1, [pc, #192]	; (8017ca8 <icmp_input+0x208>)
 8017be8:	482e      	ldr	r0, [pc, #184]	; (8017ca4 <icmp_input+0x204>)
 8017bea:	f001 fc89 	bl	8019500 <iprintf>
        goto icmperr;
 8017bee:	e04a      	b.n	8017c86 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8017bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f7f8 ff7f 	bl	8010b00 <pbuf_header>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d12b      	bne.n	8017c60 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	685b      	ldr	r3, [r3, #4]
 8017c0c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	681a      	ldr	r2, [r3, #0]
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017c16:	4b1f      	ldr	r3, [pc, #124]	; (8017c94 <icmp_input+0x1f4>)
 8017c18:	691a      	ldr	r2, [r3, #16]
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	2200      	movs	r2, #0
 8017c22:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	2200      	movs	r2, #0
 8017c28:	709a      	strb	r2, [r3, #2]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	22ff      	movs	r2, #255	; 0xff
 8017c32:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	2200      	movs	r2, #0
 8017c38:	729a      	strb	r2, [r3, #10]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	9302      	str	r3, [sp, #8]
 8017c42:	2301      	movs	r3, #1
 8017c44:	9301      	str	r3, [sp, #4]
 8017c46:	2300      	movs	r3, #0
 8017c48:	9300      	str	r3, [sp, #0]
 8017c4a:	23ff      	movs	r3, #255	; 0xff
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	69f9      	ldr	r1, [r7, #28]
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 fa5b 	bl	801810c <ip4_output_if>
 8017c56:	4603      	mov	r3, r0
 8017c58:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8017c5a:	e001      	b.n	8017c60 <icmp_input+0x1c0>
    break;
 8017c5c:	bf00      	nop
 8017c5e:	e000      	b.n	8017c62 <icmp_input+0x1c2>
    break;
 8017c60:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7f8 ff70 	bl	8010b48 <pbuf_free>
  return;
 8017c68:	e011      	b.n	8017c8e <icmp_input+0x1ee>
    goto lenerr;
 8017c6a:	bf00      	nop
 8017c6c:	e002      	b.n	8017c74 <icmp_input+0x1d4>
    goto lenerr;
 8017c6e:	bf00      	nop
 8017c70:	e000      	b.n	8017c74 <icmp_input+0x1d4>
      goto lenerr;
 8017c72:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f7f8 ff67 	bl	8010b48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017c7a:	e008      	b.n	8017c8e <icmp_input+0x1ee>
      goto icmperr;
 8017c7c:	bf00      	nop
 8017c7e:	e002      	b.n	8017c86 <icmp_input+0x1e6>
      goto icmperr;
 8017c80:	bf00      	nop
 8017c82:	e000      	b.n	8017c86 <icmp_input+0x1e6>
        goto icmperr;
 8017c84:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017c86:	6878      	ldr	r0, [r7, #4]
 8017c88:	f7f8 ff5e 	bl	8010b48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017c8c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017c8e:	3728      	adds	r7, #40	; 0x28
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}
 8017c94:	2000d110 	.word	0x2000d110
 8017c98:	2000d124 	.word	0x2000d124
 8017c9c:	0801cbe8 	.word	0x0801cbe8
 8017ca0:	0801cc40 	.word	0x0801cc40
 8017ca4:	0801cc78 	.word	0x0801cc78
 8017ca8:	0801cca0 	.word	0x0801cca0

08017cac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
 8017cb4:	460b      	mov	r3, r1
 8017cb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017cb8:	78fb      	ldrb	r3, [r7, #3]
 8017cba:	461a      	mov	r2, r3
 8017cbc:	2103      	movs	r1, #3
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f000 f814 	bl	8017cec <icmp_send_response>
}
 8017cc4:	bf00      	nop
 8017cc6:	3708      	adds	r7, #8
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017cd8:	78fb      	ldrb	r3, [r7, #3]
 8017cda:	461a      	mov	r2, r3
 8017cdc:	210b      	movs	r1, #11
 8017cde:	6878      	ldr	r0, [r7, #4]
 8017ce0:	f000 f804 	bl	8017cec <icmp_send_response>
}
 8017ce4:	bf00      	nop
 8017ce6:	3708      	adds	r7, #8
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b08c      	sub	sp, #48	; 0x30
 8017cf0:	af04      	add	r7, sp, #16
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	460b      	mov	r3, r1
 8017cf6:	70fb      	strb	r3, [r7, #3]
 8017cf8:	4613      	mov	r3, r2
 8017cfa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	2124      	movs	r1, #36	; 0x24
 8017d00:	2001      	movs	r0, #1
 8017d02:	f7f8 fbaf 	bl	8010464 <pbuf_alloc>
 8017d06:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017d08:	69fb      	ldr	r3, [r7, #28]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d04c      	beq.n	8017da8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	895b      	ldrh	r3, [r3, #10]
 8017d12:	2b23      	cmp	r3, #35	; 0x23
 8017d14:	d806      	bhi.n	8017d24 <icmp_send_response+0x38>
 8017d16:	4b26      	ldr	r3, [pc, #152]	; (8017db0 <icmp_send_response+0xc4>)
 8017d18:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017d1c:	4925      	ldr	r1, [pc, #148]	; (8017db4 <icmp_send_response+0xc8>)
 8017d1e:	4826      	ldr	r0, [pc, #152]	; (8017db8 <icmp_send_response+0xcc>)
 8017d20:	f001 fbee 	bl	8019500 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017d2a:	69fb      	ldr	r3, [r7, #28]
 8017d2c:	685b      	ldr	r3, [r3, #4]
 8017d2e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017d30:	697b      	ldr	r3, [r7, #20]
 8017d32:	78fa      	ldrb	r2, [r7, #3]
 8017d34:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	78ba      	ldrb	r2, [r7, #2]
 8017d3a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	711a      	strb	r2, [r3, #4]
 8017d42:	2200      	movs	r2, #0
 8017d44:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	719a      	strb	r2, [r3, #6]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017d50:	69fb      	ldr	r3, [r7, #28]
 8017d52:	685b      	ldr	r3, [r3, #4]
 8017d54:	f103 0008 	add.w	r0, r3, #8
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	221c      	movs	r2, #28
 8017d5e:	4619      	mov	r1, r3
 8017d60:	f001 fbbb 	bl	80194da <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017d64:	69bb      	ldr	r3, [r7, #24]
 8017d66:	68db      	ldr	r3, [r3, #12]
 8017d68:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017d6a:	f107 030c 	add.w	r3, r7, #12
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f000 f824 	bl	8017dbc <ip4_route>
 8017d74:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d011      	beq.n	8017da0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	709a      	strb	r2, [r3, #2]
 8017d82:	2200      	movs	r2, #0
 8017d84:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017d86:	f107 020c 	add.w	r2, r7, #12
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	9302      	str	r3, [sp, #8]
 8017d8e:	2301      	movs	r3, #1
 8017d90:	9301      	str	r3, [sp, #4]
 8017d92:	2300      	movs	r3, #0
 8017d94:	9300      	str	r3, [sp, #0]
 8017d96:	23ff      	movs	r3, #255	; 0xff
 8017d98:	2100      	movs	r1, #0
 8017d9a:	69f8      	ldr	r0, [r7, #28]
 8017d9c:	f000 f9b6 	bl	801810c <ip4_output_if>
  }
  pbuf_free(q);
 8017da0:	69f8      	ldr	r0, [r7, #28]
 8017da2:	f7f8 fed1 	bl	8010b48 <pbuf_free>
 8017da6:	e000      	b.n	8017daa <icmp_send_response+0xbe>
    return;
 8017da8:	bf00      	nop
}
 8017daa:	3720      	adds	r7, #32
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bd80      	pop	{r7, pc}
 8017db0:	0801cbe8 	.word	0x0801cbe8
 8017db4:	0801ccd4 	.word	0x0801ccd4
 8017db8:	0801cc78 	.word	0x0801cc78

08017dbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b085      	sub	sp, #20
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017dc4:	4b30      	ldr	r3, [pc, #192]	; (8017e88 <ip4_route+0xcc>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	60fb      	str	r3, [r7, #12]
 8017dca:	e036      	b.n	8017e3a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017dd2:	f003 0301 	and.w	r3, r3, #1
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d02b      	beq.n	8017e34 <ip4_route+0x78>
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017de2:	089b      	lsrs	r3, r3, #2
 8017de4:	f003 0301 	and.w	r3, r3, #1
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d022      	beq.n	8017e34 <ip4_route+0x78>
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	3304      	adds	r3, #4
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d01d      	beq.n	8017e34 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	3304      	adds	r3, #4
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	405a      	eors	r2, r3
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	3308      	adds	r3, #8
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4013      	ands	r3, r2
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d101      	bne.n	8017e14 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	e033      	b.n	8017e7c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017e1a:	f003 0302 	and.w	r3, r3, #2
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d108      	bne.n	8017e34 <ip4_route+0x78>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	330c      	adds	r3, #12
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d101      	bne.n	8017e34 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	e023      	b.n	8017e7c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	60fb      	str	r3, [r7, #12]
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d1c5      	bne.n	8017dcc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017e40:	4b12      	ldr	r3, [pc, #72]	; (8017e8c <ip4_route+0xd0>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d015      	beq.n	8017e74 <ip4_route+0xb8>
 8017e48:	4b10      	ldr	r3, [pc, #64]	; (8017e8c <ip4_route+0xd0>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017e50:	f003 0301 	and.w	r3, r3, #1
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d00d      	beq.n	8017e74 <ip4_route+0xb8>
 8017e58:	4b0c      	ldr	r3, [pc, #48]	; (8017e8c <ip4_route+0xd0>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017e60:	f003 0304 	and.w	r3, r3, #4
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d005      	beq.n	8017e74 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017e68:	4b08      	ldr	r3, [pc, #32]	; (8017e8c <ip4_route+0xd0>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	3304      	adds	r3, #4
 8017e6e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d101      	bne.n	8017e78 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017e74:	2300      	movs	r3, #0
 8017e76:	e001      	b.n	8017e7c <ip4_route+0xc0>
  }

  return netif_default;
 8017e78:	4b04      	ldr	r3, [pc, #16]	; (8017e8c <ip4_route+0xd0>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3714      	adds	r7, #20
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr
 8017e88:	200101bc 	.word	0x200101bc
 8017e8c:	200101c0 	.word	0x200101c0

08017e90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b086      	sub	sp, #24
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	685b      	ldr	r3, [r3, #4]
 8017e9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	091b      	lsrs	r3, r3, #4
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	2b04      	cmp	r3, #4
 8017eaa:	d004      	beq.n	8017eb6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f7f8 fe4b 	bl	8010b48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	e122      	b.n	80180fc <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	f003 030f 	and.w	r3, r3, #15
 8017ec0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8017ec2:	897b      	ldrh	r3, [r7, #10]
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	885b      	ldrh	r3, [r3, #2]
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7f7 fc20 	bl	800f714 <lwip_htons>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	891b      	ldrh	r3, [r3, #8]
 8017edc:	893a      	ldrh	r2, [r7, #8]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d204      	bcs.n	8017eec <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8017ee2:	893b      	ldrh	r3, [r7, #8]
 8017ee4:	4619      	mov	r1, r3
 8017ee6:	6878      	ldr	r0, [r7, #4]
 8017ee8:	f7f8 fcba 	bl	8010860 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	895b      	ldrh	r3, [r3, #10]
 8017ef0:	897a      	ldrh	r2, [r7, #10]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d807      	bhi.n	8017f06 <ip4_input+0x76>
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	891b      	ldrh	r3, [r3, #8]
 8017efa:	893a      	ldrh	r2, [r7, #8]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d802      	bhi.n	8017f06 <ip4_input+0x76>
 8017f00:	897b      	ldrh	r3, [r7, #10]
 8017f02:	2b13      	cmp	r3, #19
 8017f04:	d804      	bhi.n	8017f10 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f7f8 fe1e 	bl	8010b48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	e0f5      	b.n	80180fc <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	691b      	ldr	r3, [r3, #16]
 8017f14:	4a7b      	ldr	r2, [pc, #492]	; (8018104 <ip4_input+0x274>)
 8017f16:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	68db      	ldr	r3, [r3, #12]
 8017f1c:	4a79      	ldr	r2, [pc, #484]	; (8018104 <ip4_input+0x274>)
 8017f1e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017f20:	4b78      	ldr	r3, [pc, #480]	; (8018104 <ip4_input+0x274>)
 8017f22:	695b      	ldr	r3, [r3, #20]
 8017f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f28:	2be0      	cmp	r3, #224	; 0xe0
 8017f2a:	d112      	bne.n	8017f52 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017f32:	f003 0301 	and.w	r3, r3, #1
 8017f36:	b2db      	uxtb	r3, r3
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d007      	beq.n	8017f4c <ip4_input+0xbc>
 8017f3c:	683b      	ldr	r3, [r7, #0]
 8017f3e:	3304      	adds	r3, #4
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d002      	beq.n	8017f4c <ip4_input+0xbc>
      netif = inp;
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	613b      	str	r3, [r7, #16]
 8017f4a:	e041      	b.n	8017fd0 <ip4_input+0x140>
    } else {
      netif = NULL;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	613b      	str	r3, [r7, #16]
 8017f50:	e03e      	b.n	8017fd0 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017f52:	2301      	movs	r3, #1
 8017f54:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017f5a:	693b      	ldr	r3, [r7, #16]
 8017f5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017f60:	f003 0301 	and.w	r3, r3, #1
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d014      	beq.n	8017f94 <ip4_input+0x104>
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	3304      	adds	r3, #4
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d00f      	beq.n	8017f94 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f74:	4b63      	ldr	r3, [pc, #396]	; (8018104 <ip4_input+0x274>)
 8017f76:	695a      	ldr	r2, [r3, #20]
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	3304      	adds	r3, #4
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d026      	beq.n	8017fd0 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017f82:	4b60      	ldr	r3, [pc, #384]	; (8018104 <ip4_input+0x274>)
 8017f84:	695b      	ldr	r3, [r3, #20]
 8017f86:	6939      	ldr	r1, [r7, #16]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f000 f991 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 8017f8e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d11d      	bne.n	8017fd0 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d00d      	beq.n	8017fb6 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8017f9a:	4b5a      	ldr	r3, [pc, #360]	; (8018104 <ip4_input+0x274>)
 8017f9c:	695b      	ldr	r3, [r3, #20]
 8017f9e:	b2db      	uxtb	r3, r3
 8017fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8017fa2:	d102      	bne.n	8017faa <ip4_input+0x11a>
          netif = NULL;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	613b      	str	r3, [r7, #16]
          break;
 8017fa8:	e012      	b.n	8017fd0 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8017faa:	2300      	movs	r3, #0
 8017fac:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8017fae:	4b56      	ldr	r3, [pc, #344]	; (8018108 <ip4_input+0x278>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	613b      	str	r3, [r7, #16]
 8017fb4:	e002      	b.n	8017fbc <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8017fb6:	693b      	ldr	r3, [r7, #16]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8017fbc:	693a      	ldr	r2, [r7, #16]
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d102      	bne.n	8017fca <ip4_input+0x13a>
        netif = netif->next;
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d1c4      	bne.n	8017f5a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017fd0:	4b4c      	ldr	r3, [pc, #304]	; (8018104 <ip4_input+0x274>)
 8017fd2:	691b      	ldr	r3, [r3, #16]
 8017fd4:	6839      	ldr	r1, [r7, #0]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f000 f96a 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d105      	bne.n	8017fee <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017fe2:	4b48      	ldr	r3, [pc, #288]	; (8018104 <ip4_input+0x274>)
 8017fe4:	691b      	ldr	r3, [r3, #16]
 8017fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017fea:	2be0      	cmp	r3, #224	; 0xe0
 8017fec:	d104      	bne.n	8017ff8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f7f8 fdaa 	bl	8010b48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	e081      	b.n	80180fc <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d104      	bne.n	8018008 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7f8 fda2 	bl	8010b48 <pbuf_free>
    return ERR_OK;
 8018004:	2300      	movs	r3, #0
 8018006:	e079      	b.n	80180fc <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	88db      	ldrh	r3, [r3, #6]
 801800c:	b29b      	uxth	r3, r3
 801800e:	461a      	mov	r2, r3
 8018010:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018014:	4013      	ands	r3, r2
 8018016:	2b00      	cmp	r3, #0
 8018018:	d00b      	beq.n	8018032 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	f000 fc8e 	bl	801893c <ip4_reass>
 8018020:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d101      	bne.n	801802c <ip4_input+0x19c>
      return ERR_OK;
 8018028:	2300      	movs	r3, #0
 801802a:	e067      	b.n	80180fc <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	685b      	ldr	r3, [r3, #4]
 8018030:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018032:	4a34      	ldr	r2, [pc, #208]	; (8018104 <ip4_input+0x274>)
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018038:	4a32      	ldr	r2, [pc, #200]	; (8018104 <ip4_input+0x274>)
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801803e:	4a31      	ldr	r2, [pc, #196]	; (8018104 <ip4_input+0x274>)
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	b29b      	uxth	r3, r3
 801804a:	f003 030f 	and.w	r3, r3, #15
 801804e:	b29b      	uxth	r3, r3
 8018050:	009b      	lsls	r3, r3, #2
 8018052:	b29a      	uxth	r2, r3
 8018054:	4b2b      	ldr	r3, [pc, #172]	; (8018104 <ip4_input+0x274>)
 8018056:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8018058:	897b      	ldrh	r3, [r7, #10]
 801805a:	425b      	negs	r3, r3
 801805c:	b29b      	uxth	r3, r3
 801805e:	b21b      	sxth	r3, r3
 8018060:	4619      	mov	r1, r3
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	f7f8 fd4c 	bl	8010b00 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	7a5b      	ldrb	r3, [r3, #9]
 801806c:	2b06      	cmp	r3, #6
 801806e:	d009      	beq.n	8018084 <ip4_input+0x1f4>
 8018070:	2b11      	cmp	r3, #17
 8018072:	d002      	beq.n	801807a <ip4_input+0x1ea>
 8018074:	2b01      	cmp	r3, #1
 8018076:	d00a      	beq.n	801808e <ip4_input+0x1fe>
 8018078:	e00e      	b.n	8018098 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801807a:	6839      	ldr	r1, [r7, #0]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7fe fc0b 	bl	8016898 <udp_input>
      break;
 8018082:	e028      	b.n	80180d6 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8018084:	6839      	ldr	r1, [r7, #0]
 8018086:	6878      	ldr	r0, [r7, #4]
 8018088:	f7fa fc28 	bl	80128dc <tcp_input>
      break;
 801808c:	e023      	b.n	80180d6 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801808e:	6839      	ldr	r1, [r7, #0]
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f7ff fd05 	bl	8017aa0 <icmp_input>
      break;
 8018096:	e01e      	b.n	80180d6 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018098:	4b1a      	ldr	r3, [pc, #104]	; (8018104 <ip4_input+0x274>)
 801809a:	695b      	ldr	r3, [r3, #20]
 801809c:	6939      	ldr	r1, [r7, #16]
 801809e:	4618      	mov	r0, r3
 80180a0:	f000 f906 	bl	80182b0 <ip4_addr_isbroadcast_u32>
 80180a4:	4603      	mov	r3, r0
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d112      	bne.n	80180d0 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80180aa:	4b16      	ldr	r3, [pc, #88]	; (8018104 <ip4_input+0x274>)
 80180ac:	695b      	ldr	r3, [r3, #20]
 80180ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80180b2:	2be0      	cmp	r3, #224	; 0xe0
 80180b4:	d00c      	beq.n	80180d0 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80180b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80180ba:	4619      	mov	r1, r3
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	f7f8 fd31 	bl	8010b24 <pbuf_header_force>
        p->payload = iphdr;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	697a      	ldr	r2, [r7, #20]
 80180c6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80180c8:	2102      	movs	r1, #2
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f7ff fdee 	bl	8017cac <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7f8 fd39 	bl	8010b48 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80180d6:	4b0b      	ldr	r3, [pc, #44]	; (8018104 <ip4_input+0x274>)
 80180d8:	2200      	movs	r2, #0
 80180da:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80180dc:	4b09      	ldr	r3, [pc, #36]	; (8018104 <ip4_input+0x274>)
 80180de:	2200      	movs	r2, #0
 80180e0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80180e2:	4b08      	ldr	r3, [pc, #32]	; (8018104 <ip4_input+0x274>)
 80180e4:	2200      	movs	r2, #0
 80180e6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80180e8:	4b06      	ldr	r3, [pc, #24]	; (8018104 <ip4_input+0x274>)
 80180ea:	2200      	movs	r2, #0
 80180ec:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80180ee:	4b05      	ldr	r3, [pc, #20]	; (8018104 <ip4_input+0x274>)
 80180f0:	2200      	movs	r2, #0
 80180f2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80180f4:	4b03      	ldr	r3, [pc, #12]	; (8018104 <ip4_input+0x274>)
 80180f6:	2200      	movs	r2, #0
 80180f8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3718      	adds	r7, #24
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}
 8018104:	2000d110 	.word	0x2000d110
 8018108:	200101bc 	.word	0x200101bc

0801810c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b08a      	sub	sp, #40	; 0x28
 8018110:	af04      	add	r7, sp, #16
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
 8018118:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d009      	beq.n	8018138 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d003      	beq.n	8018132 <ip4_output_if+0x26>
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d102      	bne.n	8018138 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018134:	3304      	adds	r3, #4
 8018136:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018138:	78fa      	ldrb	r2, [r7, #3]
 801813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801813c:	9302      	str	r3, [sp, #8]
 801813e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018142:	9301      	str	r3, [sp, #4]
 8018144:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018148:	9300      	str	r3, [sp, #0]
 801814a:	4613      	mov	r3, r2
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	6979      	ldr	r1, [r7, #20]
 8018150:	68f8      	ldr	r0, [r7, #12]
 8018152:	f000 f805 	bl	8018160 <ip4_output_if_src>
 8018156:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018158:	4618      	mov	r0, r3
 801815a:	3718      	adds	r7, #24
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b088      	sub	sp, #32
 8018164:	af00      	add	r7, sp, #0
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	607a      	str	r2, [r7, #4]
 801816c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	89db      	ldrh	r3, [r3, #14]
 8018172:	2b01      	cmp	r3, #1
 8018174:	d006      	beq.n	8018184 <ip4_output_if_src+0x24>
 8018176:	4b48      	ldr	r3, [pc, #288]	; (8018298 <ip4_output_if_src+0x138>)
 8018178:	f240 3233 	movw	r2, #819	; 0x333
 801817c:	4947      	ldr	r1, [pc, #284]	; (801829c <ip4_output_if_src+0x13c>)
 801817e:	4848      	ldr	r0, [pc, #288]	; (80182a0 <ip4_output_if_src+0x140>)
 8018180:	f001 f9be 	bl	8019500 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d060      	beq.n	801824c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801818a:	2314      	movs	r3, #20
 801818c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801818e:	2114      	movs	r1, #20
 8018190:	68f8      	ldr	r0, [r7, #12]
 8018192:	f7f8 fcb5 	bl	8010b00 <pbuf_header>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d002      	beq.n	80181a2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801819c:	f06f 0301 	mvn.w	r3, #1
 80181a0:	e075      	b.n	801828e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	685b      	ldr	r3, [r3, #4]
 80181a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	895b      	ldrh	r3, [r3, #10]
 80181ac:	2b13      	cmp	r3, #19
 80181ae:	d806      	bhi.n	80181be <ip4_output_if_src+0x5e>
 80181b0:	4b39      	ldr	r3, [pc, #228]	; (8018298 <ip4_output_if_src+0x138>)
 80181b2:	f240 3261 	movw	r2, #865	; 0x361
 80181b6:	493b      	ldr	r1, [pc, #236]	; (80182a4 <ip4_output_if_src+0x144>)
 80181b8:	4839      	ldr	r0, [pc, #228]	; (80182a0 <ip4_output_if_src+0x140>)
 80181ba:	f001 f9a1 	bl	8019500 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	78fa      	ldrb	r2, [r7, #3]
 80181c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80181c4:	69fb      	ldr	r3, [r7, #28]
 80181c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80181ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	69fb      	ldr	r3, [r7, #28]
 80181d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80181d4:	8b7b      	ldrh	r3, [r7, #26]
 80181d6:	089b      	lsrs	r3, r3, #2
 80181d8:	b29b      	uxth	r3, r3
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181e0:	b2da      	uxtb	r2, r3
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80181ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	891b      	ldrh	r3, [r3, #8]
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7f7 fa8e 	bl	800f714 <lwip_htons>
 80181f8:	4603      	mov	r3, r0
 80181fa:	461a      	mov	r2, r3
 80181fc:	69fb      	ldr	r3, [r7, #28]
 80181fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018200:	69fb      	ldr	r3, [r7, #28]
 8018202:	2200      	movs	r2, #0
 8018204:	719a      	strb	r2, [r3, #6]
 8018206:	2200      	movs	r2, #0
 8018208:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801820a:	4b27      	ldr	r3, [pc, #156]	; (80182a8 <ip4_output_if_src+0x148>)
 801820c:	881b      	ldrh	r3, [r3, #0]
 801820e:	4618      	mov	r0, r3
 8018210:	f7f7 fa80 	bl	800f714 <lwip_htons>
 8018214:	4603      	mov	r3, r0
 8018216:	461a      	mov	r2, r3
 8018218:	69fb      	ldr	r3, [r7, #28]
 801821a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801821c:	4b22      	ldr	r3, [pc, #136]	; (80182a8 <ip4_output_if_src+0x148>)
 801821e:	881b      	ldrh	r3, [r3, #0]
 8018220:	3301      	adds	r3, #1
 8018222:	b29a      	uxth	r2, r3
 8018224:	4b20      	ldr	r3, [pc, #128]	; (80182a8 <ip4_output_if_src+0x148>)
 8018226:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d104      	bne.n	8018238 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801822e:	4b1f      	ldr	r3, [pc, #124]	; (80182ac <ip4_output_if_src+0x14c>)
 8018230:	681a      	ldr	r2, [r3, #0]
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	60da      	str	r2, [r3, #12]
 8018236:	e003      	b.n	8018240 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	681a      	ldr	r2, [r3, #0]
 801823c:	69fb      	ldr	r3, [r7, #28]
 801823e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018240:	69fb      	ldr	r3, [r7, #28]
 8018242:	2200      	movs	r2, #0
 8018244:	729a      	strb	r2, [r3, #10]
 8018246:	2200      	movs	r2, #0
 8018248:	72da      	strb	r2, [r3, #11]
 801824a:	e008      	b.n	801825e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	685b      	ldr	r3, [r3, #4]
 8018250:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018252:	69fb      	ldr	r3, [r7, #28]
 8018254:	691b      	ldr	r3, [r3, #16]
 8018256:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018258:	f107 0314 	add.w	r3, r7, #20
 801825c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018262:	2b00      	cmp	r3, #0
 8018264:	d00c      	beq.n	8018280 <ip4_output_if_src+0x120>
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	891a      	ldrh	r2, [r3, #8]
 801826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801826c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801826e:	429a      	cmp	r2, r3
 8018270:	d906      	bls.n	8018280 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8018272:	687a      	ldr	r2, [r7, #4]
 8018274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f000 fd0a 	bl	8018c90 <ip4_frag>
 801827c:	4603      	mov	r3, r0
 801827e:	e006      	b.n	801828e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018282:	695b      	ldr	r3, [r3, #20]
 8018284:	687a      	ldr	r2, [r7, #4]
 8018286:	68f9      	ldr	r1, [r7, #12]
 8018288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801828a:	4798      	blx	r3
 801828c:	4603      	mov	r3, r0
}
 801828e:	4618      	mov	r0, r3
 8018290:	3720      	adds	r7, #32
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	0801cd00 	.word	0x0801cd00
 801829c:	0801cd58 	.word	0x0801cd58
 80182a0:	0801cd64 	.word	0x0801cd64
 80182a4:	0801cd8c 	.word	0x0801cd8c
 80182a8:	2000c936 	.word	0x2000c936
 80182ac:	0801d1ac 	.word	0x0801d1ac

080182b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80182b0:	b480      	push	{r7}
 80182b2:	b085      	sub	sp, #20
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182c4:	d002      	beq.n	80182cc <ip4_addr_isbroadcast_u32+0x1c>
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d101      	bne.n	80182d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80182cc:	2301      	movs	r3, #1
 80182ce:	e02a      	b.n	8018326 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80182d6:	f003 0302 	and.w	r3, r3, #2
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d101      	bne.n	80182e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80182de:	2300      	movs	r3, #0
 80182e0:	e021      	b.n	8018326 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	3304      	adds	r3, #4
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	429a      	cmp	r2, r3
 80182ec:	d101      	bne.n	80182f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	e019      	b.n	8018326 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	3304      	adds	r3, #4
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	405a      	eors	r2, r3
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	3308      	adds	r3, #8
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	4013      	ands	r3, r2
 8018304:	2b00      	cmp	r3, #0
 8018306:	d10d      	bne.n	8018324 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018308:	683b      	ldr	r3, [r7, #0]
 801830a:	3308      	adds	r3, #8
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	43da      	mvns	r2, r3
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	3308      	adds	r3, #8
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801831c:	429a      	cmp	r2, r3
 801831e:	d101      	bne.n	8018324 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018320:	2301      	movs	r3, #1
 8018322:	e000      	b.n	8018326 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018324:	2300      	movs	r3, #0
  }
}
 8018326:	4618      	mov	r0, r3
 8018328:	3714      	adds	r7, #20
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr
	...

08018334 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801833e:	4b12      	ldr	r3, [pc, #72]	; (8018388 <ip_reass_tmr+0x54>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018344:	e018      	b.n	8018378 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	7fdb      	ldrb	r3, [r3, #31]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d00b      	beq.n	8018366 <ip_reass_tmr+0x32>
      r->timer--;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	7fdb      	ldrb	r3, [r3, #31]
 8018352:	3b01      	subs	r3, #1
 8018354:	b2da      	uxtb	r2, r3
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	60fb      	str	r3, [r7, #12]
 8018364:	e008      	b.n	8018378 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018370:	68b9      	ldr	r1, [r7, #8]
 8018372:	6878      	ldr	r0, [r7, #4]
 8018374:	f000 f80a 	bl	801838c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d1e3      	bne.n	8018346 <ip_reass_tmr+0x12>
     }
   }
}
 801837e:	bf00      	nop
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	2000c938 	.word	0x2000c938

0801838c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b088      	sub	sp, #32
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
 8018394:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018396:	2300      	movs	r3, #0
 8018398:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	429a      	cmp	r2, r3
 80183a0:	d105      	bne.n	80183ae <ip_reass_free_complete_datagram+0x22>
 80183a2:	4b45      	ldr	r3, [pc, #276]	; (80184b8 <ip_reass_free_complete_datagram+0x12c>)
 80183a4:	22ab      	movs	r2, #171	; 0xab
 80183a6:	4945      	ldr	r1, [pc, #276]	; (80184bc <ip_reass_free_complete_datagram+0x130>)
 80183a8:	4845      	ldr	r0, [pc, #276]	; (80184c0 <ip_reass_free_complete_datagram+0x134>)
 80183aa:	f001 f8a9 	bl	8019500 <iprintf>
  if (prev != NULL) {
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d00a      	beq.n	80183ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d005      	beq.n	80183ca <ip_reass_free_complete_datagram+0x3e>
 80183be:	4b3e      	ldr	r3, [pc, #248]	; (80184b8 <ip_reass_free_complete_datagram+0x12c>)
 80183c0:	22ad      	movs	r2, #173	; 0xad
 80183c2:	4940      	ldr	r1, [pc, #256]	; (80184c4 <ip_reass_free_complete_datagram+0x138>)
 80183c4:	483e      	ldr	r0, [pc, #248]	; (80184c0 <ip_reass_free_complete_datagram+0x134>)
 80183c6:	f001 f89b 	bl	8019500 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	685b      	ldr	r3, [r3, #4]
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80183d2:	697b      	ldr	r3, [r7, #20]
 80183d4:	889b      	ldrh	r3, [r3, #4]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d12a      	bne.n	8018432 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	685b      	ldr	r3, [r3, #4]
 80183e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	681a      	ldr	r2, [r3, #0]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80183ea:	69bb      	ldr	r3, [r7, #24]
 80183ec:	6858      	ldr	r0, [r3, #4]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	3308      	adds	r3, #8
 80183f2:	2214      	movs	r2, #20
 80183f4:	4619      	mov	r1, r3
 80183f6:	f001 f870 	bl	80194da <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80183fa:	2101      	movs	r1, #1
 80183fc:	69b8      	ldr	r0, [r7, #24]
 80183fe:	f7ff fc65 	bl	8017ccc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018402:	69b8      	ldr	r0, [r7, #24]
 8018404:	f7f8 fc3a 	bl	8010c7c <pbuf_clen>
 8018408:	4603      	mov	r3, r0
 801840a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801840c:	8bfa      	ldrh	r2, [r7, #30]
 801840e:	8a7b      	ldrh	r3, [r7, #18]
 8018410:	4413      	add	r3, r2
 8018412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018416:	db05      	blt.n	8018424 <ip_reass_free_complete_datagram+0x98>
 8018418:	4b27      	ldr	r3, [pc, #156]	; (80184b8 <ip_reass_free_complete_datagram+0x12c>)
 801841a:	22bc      	movs	r2, #188	; 0xbc
 801841c:	492a      	ldr	r1, [pc, #168]	; (80184c8 <ip_reass_free_complete_datagram+0x13c>)
 801841e:	4828      	ldr	r0, [pc, #160]	; (80184c0 <ip_reass_free_complete_datagram+0x134>)
 8018420:	f001 f86e 	bl	8019500 <iprintf>
    pbufs_freed += clen;
 8018424:	8bfa      	ldrh	r2, [r7, #30]
 8018426:	8a7b      	ldrh	r3, [r7, #18]
 8018428:	4413      	add	r3, r2
 801842a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801842c:	69b8      	ldr	r0, [r7, #24]
 801842e:	f7f8 fb8b 	bl	8010b48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018438:	e01f      	b.n	801847a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801843a:	69bb      	ldr	r3, [r7, #24]
 801843c:	685b      	ldr	r3, [r3, #4]
 801843e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018440:	69bb      	ldr	r3, [r7, #24]
 8018442:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018444:	697b      	ldr	r3, [r7, #20]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801844a:	68f8      	ldr	r0, [r7, #12]
 801844c:	f7f8 fc16 	bl	8010c7c <pbuf_clen>
 8018450:	4603      	mov	r3, r0
 8018452:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018454:	8bfa      	ldrh	r2, [r7, #30]
 8018456:	8a7b      	ldrh	r3, [r7, #18]
 8018458:	4413      	add	r3, r2
 801845a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801845e:	db05      	blt.n	801846c <ip_reass_free_complete_datagram+0xe0>
 8018460:	4b15      	ldr	r3, [pc, #84]	; (80184b8 <ip_reass_free_complete_datagram+0x12c>)
 8018462:	22cc      	movs	r2, #204	; 0xcc
 8018464:	4918      	ldr	r1, [pc, #96]	; (80184c8 <ip_reass_free_complete_datagram+0x13c>)
 8018466:	4816      	ldr	r0, [pc, #88]	; (80184c0 <ip_reass_free_complete_datagram+0x134>)
 8018468:	f001 f84a 	bl	8019500 <iprintf>
    pbufs_freed += clen;
 801846c:	8bfa      	ldrh	r2, [r7, #30]
 801846e:	8a7b      	ldrh	r3, [r7, #18]
 8018470:	4413      	add	r3, r2
 8018472:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018474:	68f8      	ldr	r0, [r7, #12]
 8018476:	f7f8 fb67 	bl	8010b48 <pbuf_free>
  while (p != NULL) {
 801847a:	69bb      	ldr	r3, [r7, #24]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d1dc      	bne.n	801843a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018480:	6839      	ldr	r1, [r7, #0]
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 f8c2 	bl	801860c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8018488:	4b10      	ldr	r3, [pc, #64]	; (80184cc <ip_reass_free_complete_datagram+0x140>)
 801848a:	881b      	ldrh	r3, [r3, #0]
 801848c:	8bfa      	ldrh	r2, [r7, #30]
 801848e:	429a      	cmp	r2, r3
 8018490:	d905      	bls.n	801849e <ip_reass_free_complete_datagram+0x112>
 8018492:	4b09      	ldr	r3, [pc, #36]	; (80184b8 <ip_reass_free_complete_datagram+0x12c>)
 8018494:	22d2      	movs	r2, #210	; 0xd2
 8018496:	490e      	ldr	r1, [pc, #56]	; (80184d0 <ip_reass_free_complete_datagram+0x144>)
 8018498:	4809      	ldr	r0, [pc, #36]	; (80184c0 <ip_reass_free_complete_datagram+0x134>)
 801849a:	f001 f831 	bl	8019500 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801849e:	4b0b      	ldr	r3, [pc, #44]	; (80184cc <ip_reass_free_complete_datagram+0x140>)
 80184a0:	881a      	ldrh	r2, [r3, #0]
 80184a2:	8bfb      	ldrh	r3, [r7, #30]
 80184a4:	1ad3      	subs	r3, r2, r3
 80184a6:	b29a      	uxth	r2, r3
 80184a8:	4b08      	ldr	r3, [pc, #32]	; (80184cc <ip_reass_free_complete_datagram+0x140>)
 80184aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80184ac:	8bfb      	ldrh	r3, [r7, #30]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3720      	adds	r7, #32
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	0801cdbc 	.word	0x0801cdbc
 80184bc:	0801ce18 	.word	0x0801ce18
 80184c0:	0801ce24 	.word	0x0801ce24
 80184c4:	0801ce4c 	.word	0x0801ce4c
 80184c8:	0801ce60 	.word	0x0801ce60
 80184cc:	2000c93c 	.word	0x2000c93c
 80184d0:	0801ce80 	.word	0x0801ce80

080184d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b08a      	sub	sp, #40	; 0x28
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
 80184dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80184de:	2300      	movs	r3, #0
 80184e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80184e2:	2300      	movs	r3, #0
 80184e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80184e6:	2300      	movs	r3, #0
 80184e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80184ea:	2300      	movs	r3, #0
 80184ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80184ee:	2300      	movs	r3, #0
 80184f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80184f2:	4b28      	ldr	r3, [pc, #160]	; (8018594 <ip_reass_remove_oldest_datagram+0xc0>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80184f8:	e030      	b.n	801855c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80184fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fc:	695a      	ldr	r2, [r3, #20]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	429a      	cmp	r2, r3
 8018504:	d10c      	bne.n	8018520 <ip_reass_remove_oldest_datagram+0x4c>
 8018506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018508:	699a      	ldr	r2, [r3, #24]
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	691b      	ldr	r3, [r3, #16]
 801850e:	429a      	cmp	r2, r3
 8018510:	d106      	bne.n	8018520 <ip_reass_remove_oldest_datagram+0x4c>
 8018512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018514:	899a      	ldrh	r2, [r3, #12]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	889b      	ldrh	r3, [r3, #4]
 801851a:	b29b      	uxth	r3, r3
 801851c:	429a      	cmp	r2, r3
 801851e:	d014      	beq.n	801854a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	3301      	adds	r3, #1
 8018524:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018526:	6a3b      	ldr	r3, [r7, #32]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d104      	bne.n	8018536 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801852e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	61bb      	str	r3, [r7, #24]
 8018534:	e009      	b.n	801854a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018538:	7fda      	ldrb	r2, [r3, #31]
 801853a:	6a3b      	ldr	r3, [r7, #32]
 801853c:	7fdb      	ldrb	r3, [r3, #31]
 801853e:	429a      	cmp	r2, r3
 8018540:	d803      	bhi.n	801854a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018544:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018546:	69fb      	ldr	r3, [r7, #28]
 8018548:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d001      	beq.n	8018556 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	2b00      	cmp	r3, #0
 8018560:	d1cb      	bne.n	80184fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018562:	6a3b      	ldr	r3, [r7, #32]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d008      	beq.n	801857a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018568:	69b9      	ldr	r1, [r7, #24]
 801856a:	6a38      	ldr	r0, [r7, #32]
 801856c:	f7ff ff0e 	bl	801838c <ip_reass_free_complete_datagram>
 8018570:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018572:	697a      	ldr	r2, [r7, #20]
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	4413      	add	r3, r2
 8018578:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801857a:	697a      	ldr	r2, [r7, #20]
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	429a      	cmp	r2, r3
 8018580:	da02      	bge.n	8018588 <ip_reass_remove_oldest_datagram+0xb4>
 8018582:	693b      	ldr	r3, [r7, #16]
 8018584:	2b01      	cmp	r3, #1
 8018586:	dcac      	bgt.n	80184e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018588:	697b      	ldr	r3, [r7, #20]
}
 801858a:	4618      	mov	r0, r3
 801858c:	3728      	adds	r7, #40	; 0x28
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}
 8018592:	bf00      	nop
 8018594:	2000c938 	.word	0x2000c938

08018598 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80185a2:	2004      	movs	r0, #4
 80185a4:	f7f7 fcc2 	bl	800ff2c <memp_malloc>
 80185a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d110      	bne.n	80185d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80185b0:	6839      	ldr	r1, [r7, #0]
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f7ff ff8e 	bl	80184d4 <ip_reass_remove_oldest_datagram>
 80185b8:	4602      	mov	r2, r0
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	4293      	cmp	r3, r2
 80185be:	dc03      	bgt.n	80185c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80185c0:	2004      	movs	r0, #4
 80185c2:	f7f7 fcb3 	bl	800ff2c <memp_malloc>
 80185c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d101      	bne.n	80185d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80185ce:	2300      	movs	r3, #0
 80185d0:	e016      	b.n	8018600 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80185d2:	2220      	movs	r2, #32
 80185d4:	2100      	movs	r1, #0
 80185d6:	68f8      	ldr	r0, [r7, #12]
 80185d8:	f000 ff8a 	bl	80194f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2203      	movs	r2, #3
 80185e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80185e2:	4b09      	ldr	r3, [pc, #36]	; (8018608 <ip_reass_enqueue_new_datagram+0x70>)
 80185e4:	681a      	ldr	r2, [r3, #0]
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80185ea:	4a07      	ldr	r2, [pc, #28]	; (8018608 <ip_reass_enqueue_new_datagram+0x70>)
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	3308      	adds	r3, #8
 80185f4:	2214      	movs	r2, #20
 80185f6:	6879      	ldr	r1, [r7, #4]
 80185f8:	4618      	mov	r0, r3
 80185fa:	f000 ff6e 	bl	80194da <memcpy>
  return ipr;
 80185fe:	68fb      	ldr	r3, [r7, #12]
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}
 8018608:	2000c938 	.word	0x2000c938

0801860c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b082      	sub	sp, #8
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
 8018614:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018616:	4b10      	ldr	r3, [pc, #64]	; (8018658 <ip_reass_dequeue_datagram+0x4c>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	687a      	ldr	r2, [r7, #4]
 801861c:	429a      	cmp	r2, r3
 801861e:	d104      	bne.n	801862a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	4a0c      	ldr	r2, [pc, #48]	; (8018658 <ip_reass_dequeue_datagram+0x4c>)
 8018626:	6013      	str	r3, [r2, #0]
 8018628:	e00d      	b.n	8018646 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d106      	bne.n	801863e <ip_reass_dequeue_datagram+0x32>
 8018630:	4b0a      	ldr	r3, [pc, #40]	; (801865c <ip_reass_dequeue_datagram+0x50>)
 8018632:	f240 1245 	movw	r2, #325	; 0x145
 8018636:	490a      	ldr	r1, [pc, #40]	; (8018660 <ip_reass_dequeue_datagram+0x54>)
 8018638:	480a      	ldr	r0, [pc, #40]	; (8018664 <ip_reass_dequeue_datagram+0x58>)
 801863a:	f000 ff61 	bl	8019500 <iprintf>
    prev->next = ipr->next;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681a      	ldr	r2, [r3, #0]
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018646:	6879      	ldr	r1, [r7, #4]
 8018648:	2004      	movs	r0, #4
 801864a:	f7f7 fce5 	bl	8010018 <memp_free>
}
 801864e:	bf00      	nop
 8018650:	3708      	adds	r7, #8
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}
 8018656:	bf00      	nop
 8018658:	2000c938 	.word	0x2000c938
 801865c:	0801cdbc 	.word	0x0801cdbc
 8018660:	0801ce9c 	.word	0x0801ce9c
 8018664:	0801ce24 	.word	0x0801ce24

08018668 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b08c      	sub	sp, #48	; 0x30
 801866c:	af00      	add	r7, sp, #0
 801866e:	60f8      	str	r0, [r7, #12]
 8018670:	60b9      	str	r1, [r7, #8]
 8018672:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8018674:	2300      	movs	r3, #0
 8018676:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018678:	2301      	movs	r3, #1
 801867a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018682:	69fb      	ldr	r3, [r7, #28]
 8018684:	885b      	ldrh	r3, [r3, #2]
 8018686:	b29b      	uxth	r3, r3
 8018688:	4618      	mov	r0, r3
 801868a:	f7f7 f843 	bl	800f714 <lwip_htons>
 801868e:	4603      	mov	r3, r0
 8018690:	461a      	mov	r2, r3
 8018692:	69fb      	ldr	r3, [r7, #28]
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	b29b      	uxth	r3, r3
 8018698:	f003 030f 	and.w	r3, r3, #15
 801869c:	b29b      	uxth	r3, r3
 801869e:	009b      	lsls	r3, r3, #2
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	1ad3      	subs	r3, r2, r3
 80186a4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80186a6:	69fb      	ldr	r3, [r7, #28]
 80186a8:	88db      	ldrh	r3, [r3, #6]
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	4618      	mov	r0, r3
 80186ae:	f7f7 f831 	bl	800f714 <lwip_htons>
 80186b2:	4603      	mov	r3, r0
 80186b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	00db      	lsls	r3, r3, #3
 80186bc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80186c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c6:	2200      	movs	r2, #0
 80186c8:	701a      	strb	r2, [r3, #0]
 80186ca:	2200      	movs	r2, #0
 80186cc:	705a      	strb	r2, [r3, #1]
 80186ce:	2200      	movs	r2, #0
 80186d0:	709a      	strb	r2, [r3, #2]
 80186d2:	2200      	movs	r2, #0
 80186d4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80186d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d8:	8b3a      	ldrh	r2, [r7, #24]
 80186da:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80186dc:	8b3a      	ldrh	r2, [r7, #24]
 80186de:	8b7b      	ldrh	r3, [r7, #26]
 80186e0:	4413      	add	r3, r2
 80186e2:	b29a      	uxth	r2, r3
 80186e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	685b      	ldr	r3, [r3, #4]
 80186ec:	627b      	str	r3, [r7, #36]	; 0x24
 80186ee:	e061      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80186f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80186f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f8:	889b      	ldrh	r3, [r3, #4]
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	889b      	ldrh	r3, [r3, #4]
 8018700:	b29b      	uxth	r3, r3
 8018702:	429a      	cmp	r2, r3
 8018704:	d232      	bcs.n	801876c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801870a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	2b00      	cmp	r3, #0
 8018710:	d01f      	beq.n	8018752 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018714:	889b      	ldrh	r3, [r3, #4]
 8018716:	b29a      	uxth	r2, r3
 8018718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871a:	88db      	ldrh	r3, [r3, #6]
 801871c:	b29b      	uxth	r3, r3
 801871e:	429a      	cmp	r2, r3
 8018720:	f0c0 80e3 	bcc.w	80188ea <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8018724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018726:	88db      	ldrh	r3, [r3, #6]
 8018728:	b29a      	uxth	r2, r3
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	889b      	ldrh	r3, [r3, #4]
 801872e:	b29b      	uxth	r3, r3
 8018730:	429a      	cmp	r2, r3
 8018732:	f200 80da 	bhi.w	80188ea <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018738:	68ba      	ldr	r2, [r7, #8]
 801873a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873e:	88db      	ldrh	r3, [r3, #6]
 8018740:	b29a      	uxth	r2, r3
 8018742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018744:	889b      	ldrh	r3, [r3, #4]
 8018746:	b29b      	uxth	r3, r3
 8018748:	429a      	cmp	r2, r3
 801874a:	d037      	beq.n	80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801874c:	2300      	movs	r3, #0
 801874e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018750:	e034      	b.n	80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8018752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018754:	88db      	ldrh	r3, [r3, #6]
 8018756:	b29a      	uxth	r2, r3
 8018758:	697b      	ldr	r3, [r7, #20]
 801875a:	889b      	ldrh	r3, [r3, #4]
 801875c:	b29b      	uxth	r3, r3
 801875e:	429a      	cmp	r2, r3
 8018760:	f200 80c5 	bhi.w	80188ee <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	68ba      	ldr	r2, [r7, #8]
 8018768:	605a      	str	r2, [r3, #4]
      break;
 801876a:	e027      	b.n	80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876e:	889b      	ldrh	r3, [r3, #4]
 8018770:	b29a      	uxth	r2, r3
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	889b      	ldrh	r3, [r3, #4]
 8018776:	b29b      	uxth	r3, r3
 8018778:	429a      	cmp	r2, r3
 801877a:	f000 80ba 	beq.w	80188f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018780:	889b      	ldrh	r3, [r3, #4]
 8018782:	b29a      	uxth	r2, r3
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	88db      	ldrh	r3, [r3, #6]
 8018788:	b29b      	uxth	r3, r3
 801878a:	429a      	cmp	r2, r3
 801878c:	f0c0 80b3 	bcc.w	80188f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018792:	2b00      	cmp	r3, #0
 8018794:	d009      	beq.n	80187aa <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8018796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018798:	88db      	ldrh	r3, [r3, #6]
 801879a:	b29a      	uxth	r2, r3
 801879c:	697b      	ldr	r3, [r7, #20]
 801879e:	889b      	ldrh	r3, [r3, #4]
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	429a      	cmp	r2, r3
 80187a4:	d001      	beq.n	80187aa <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187a6:	2300      	movs	r3, #0
 80187a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80187b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d19a      	bne.n	80186f0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80187ba:	e000      	b.n	80187be <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80187bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80187be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d12d      	bne.n	8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d01c      	beq.n	8018804 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80187ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187cc:	88db      	ldrh	r3, [r3, #6]
 80187ce:	b29a      	uxth	r2, r3
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	889b      	ldrh	r3, [r3, #4]
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d906      	bls.n	80187e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80187da:	4b51      	ldr	r3, [pc, #324]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80187dc:	f240 12ab 	movw	r2, #427	; 0x1ab
 80187e0:	4950      	ldr	r1, [pc, #320]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187e2:	4851      	ldr	r0, [pc, #324]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80187e4:	f000 fe8c 	bl	8019500 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f0:	88db      	ldrh	r3, [r3, #6]
 80187f2:	b29a      	uxth	r2, r3
 80187f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f6:	889b      	ldrh	r3, [r3, #4]
 80187f8:	b29b      	uxth	r3, r3
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d010      	beq.n	8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80187fe:	2300      	movs	r3, #0
 8018800:	623b      	str	r3, [r7, #32]
 8018802:	e00d      	b.n	8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d006      	beq.n	801881a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801880c:	4b44      	ldr	r3, [pc, #272]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801880e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8018812:	4946      	ldr	r1, [pc, #280]	; (801892c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018814:	4844      	ldr	r0, [pc, #272]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018816:	f000 fe73 	bl	8019500 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d105      	bne.n	8018832 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	7f9b      	ldrb	r3, [r3, #30]
 801882a:	f003 0301 	and.w	r3, r3, #1
 801882e:	2b00      	cmp	r3, #0
 8018830:	d059      	beq.n	80188e6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8018832:	6a3b      	ldr	r3, [r7, #32]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d04f      	beq.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	685b      	ldr	r3, [r3, #4]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d006      	beq.n	801884e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	685b      	ldr	r3, [r3, #4]
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	889b      	ldrh	r3, [r3, #4]
 8018848:	b29b      	uxth	r3, r3
 801884a:	2b00      	cmp	r3, #0
 801884c:	d002      	beq.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801884e:	2300      	movs	r3, #0
 8018850:	623b      	str	r3, [r7, #32]
 8018852:	e041      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018856:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801885e:	e012      	b.n	8018886 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8018860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018868:	88db      	ldrh	r3, [r3, #6]
 801886a:	b29a      	uxth	r2, r3
 801886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886e:	889b      	ldrh	r3, [r3, #4]
 8018870:	b29b      	uxth	r3, r3
 8018872:	429a      	cmp	r2, r3
 8018874:	d002      	beq.n	801887c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018876:	2300      	movs	r3, #0
 8018878:	623b      	str	r3, [r7, #32]
            break;
 801887a:	e007      	b.n	801888c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018888:	2b00      	cmp	r3, #0
 801888a:	d1e9      	bne.n	8018860 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d022      	beq.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	685b      	ldr	r3, [r3, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d106      	bne.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801889a:	4b21      	ldr	r3, [pc, #132]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801889c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80188a0:	4923      	ldr	r1, [pc, #140]	; (8018930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80188a2:	4821      	ldr	r0, [pc, #132]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80188a4:	f000 fe2c 	bl	8019500 <iprintf>
          LWIP_ASSERT("sanity check",
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	685b      	ldr	r3, [r3, #4]
 80188ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d106      	bne.n	80188c2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80188b4:	4b1a      	ldr	r3, [pc, #104]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80188b6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80188ba:	491d      	ldr	r1, [pc, #116]	; (8018930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80188bc:	481a      	ldr	r0, [pc, #104]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80188be:	f000 fe1f 	bl	8019500 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80188c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d006      	beq.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80188ca:	4b15      	ldr	r3, [pc, #84]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80188cc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80188d0:	4918      	ldr	r1, [pc, #96]	; (8018934 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80188d2:	4815      	ldr	r0, [pc, #84]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80188d4:	f000 fe14 	bl	8019500 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80188d8:	6a3b      	ldr	r3, [r7, #32]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	bf14      	ite	ne
 80188de:	2301      	movne	r3, #1
 80188e0:	2300      	moveq	r3, #0
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	e018      	b.n	8018918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80188e6:	2300      	movs	r3, #0
 80188e8:	e016      	b.n	8018918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80188ea:	bf00      	nop
 80188ec:	e004      	b.n	80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80188ee:	bf00      	nop
 80188f0:	e002      	b.n	80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80188f2:	bf00      	nop
 80188f4:	e000      	b.n	80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80188f6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80188f8:	68b8      	ldr	r0, [r7, #8]
 80188fa:	f7f8 f9bf 	bl	8010c7c <pbuf_clen>
 80188fe:	4603      	mov	r3, r0
 8018900:	461a      	mov	r2, r3
 8018902:	4b0d      	ldr	r3, [pc, #52]	; (8018938 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018904:	881b      	ldrh	r3, [r3, #0]
 8018906:	1a9b      	subs	r3, r3, r2
 8018908:	b29a      	uxth	r2, r3
 801890a:	4b0b      	ldr	r3, [pc, #44]	; (8018938 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801890c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801890e:	68b8      	ldr	r0, [r7, #8]
 8018910:	f7f8 f91a 	bl	8010b48 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018914:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8018918:	4618      	mov	r0, r3
 801891a:	3730      	adds	r7, #48	; 0x30
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}
 8018920:	0801cdbc 	.word	0x0801cdbc
 8018924:	0801ceb8 	.word	0x0801ceb8
 8018928:	0801ce24 	.word	0x0801ce24
 801892c:	0801ced8 	.word	0x0801ced8
 8018930:	0801cf10 	.word	0x0801cf10
 8018934:	0801cf20 	.word	0x0801cf20
 8018938:	2000c93c 	.word	0x2000c93c

0801893c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b08e      	sub	sp, #56	; 0x38
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	781b      	ldrb	r3, [r3, #0]
 801894e:	f003 030f 	and.w	r3, r3, #15
 8018952:	009b      	lsls	r3, r3, #2
 8018954:	2b14      	cmp	r3, #20
 8018956:	f040 8131 	bne.w	8018bbc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895c:	88db      	ldrh	r3, [r3, #6]
 801895e:	b29b      	uxth	r3, r3
 8018960:	4618      	mov	r0, r3
 8018962:	f7f6 fed7 	bl	800f714 <lwip_htons>
 8018966:	4603      	mov	r3, r0
 8018968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801896c:	b29b      	uxth	r3, r3
 801896e:	00db      	lsls	r3, r3, #3
 8018970:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018974:	885b      	ldrh	r3, [r3, #2]
 8018976:	b29b      	uxth	r3, r3
 8018978:	4618      	mov	r0, r3
 801897a:	f7f6 fecb 	bl	800f714 <lwip_htons>
 801897e:	4603      	mov	r3, r0
 8018980:	461a      	mov	r2, r3
 8018982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	b29b      	uxth	r3, r3
 8018988:	f003 030f 	and.w	r3, r3, #15
 801898c:	b29b      	uxth	r3, r3
 801898e:	009b      	lsls	r3, r3, #2
 8018990:	b29b      	uxth	r3, r3
 8018992:	1ad3      	subs	r3, r2, r3
 8018994:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	f7f8 f970 	bl	8010c7c <pbuf_clen>
 801899c:	4603      	mov	r3, r0
 801899e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80189a0:	4b8d      	ldr	r3, [pc, #564]	; (8018bd8 <ip4_reass+0x29c>)
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	461a      	mov	r2, r3
 80189a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189a8:	4413      	add	r3, r2
 80189aa:	2b0a      	cmp	r3, #10
 80189ac:	dd10      	ble.n	80189d0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80189ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189b0:	4619      	mov	r1, r3
 80189b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189b4:	f7ff fd8e 	bl	80184d4 <ip_reass_remove_oldest_datagram>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 8100 	beq.w	8018bc0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80189c0:	4b85      	ldr	r3, [pc, #532]	; (8018bd8 <ip4_reass+0x29c>)
 80189c2:	881b      	ldrh	r3, [r3, #0]
 80189c4:	461a      	mov	r2, r3
 80189c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189c8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80189ca:	2b0a      	cmp	r3, #10
 80189cc:	f300 80f8 	bgt.w	8018bc0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189d0:	4b82      	ldr	r3, [pc, #520]	; (8018bdc <ip4_reass+0x2a0>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	633b      	str	r3, [r7, #48]	; 0x30
 80189d6:	e015      	b.n	8018a04 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80189d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189da:	695a      	ldr	r2, [r3, #20]
 80189dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189de:	68db      	ldr	r3, [r3, #12]
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d10c      	bne.n	80189fe <ip4_reass+0xc2>
 80189e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e6:	699a      	ldr	r2, [r3, #24]
 80189e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ea:	691b      	ldr	r3, [r3, #16]
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d106      	bne.n	80189fe <ip4_reass+0xc2>
 80189f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f2:	899a      	ldrh	r2, [r3, #12]
 80189f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f6:	889b      	ldrh	r3, [r3, #4]
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d006      	beq.n	8018a0c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	633b      	str	r3, [r7, #48]	; 0x30
 8018a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d1e6      	bne.n	80189d8 <ip4_reass+0x9c>
 8018a0a:	e000      	b.n	8018a0e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018a0c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d109      	bne.n	8018a28 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a16:	4619      	mov	r1, r3
 8018a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a1a:	f7ff fdbd 	bl	8018598 <ip_reass_enqueue_new_datagram>
 8018a1e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d11c      	bne.n	8018a60 <ip4_reass+0x124>
      goto nullreturn;
 8018a26:	e0ce      	b.n	8018bc6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a2a:	88db      	ldrh	r3, [r3, #6]
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7f6 fe70 	bl	800f714 <lwip_htons>
 8018a34:	4603      	mov	r3, r0
 8018a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d110      	bne.n	8018a60 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a40:	89db      	ldrh	r3, [r3, #14]
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7f6 fe66 	bl	800f714 <lwip_htons>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d006      	beq.n	8018a60 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a54:	3308      	adds	r3, #8
 8018a56:	2214      	movs	r2, #20
 8018a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f000 fd3d 	bl	80194da <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a62:	88db      	ldrh	r3, [r3, #6]
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	f003 0320 	and.w	r3, r3, #32
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	bf0c      	ite	eq
 8018a6e:	2301      	moveq	r3, #1
 8018a70:	2300      	movne	r3, #0
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00e      	beq.n	8018a9a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a80:	4413      	add	r3, r2
 8018a82:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018a84:	8b7a      	ldrh	r2, [r7, #26]
 8018a86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	f0c0 8099 	bcc.w	8018bc0 <ip4_reass+0x284>
 8018a8e:	8b7b      	ldrh	r3, [r7, #26]
 8018a90:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018a94:	4293      	cmp	r3, r2
 8018a96:	f200 8093 	bhi.w	8018bc0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018a9a:	69fa      	ldr	r2, [r7, #28]
 8018a9c:	6879      	ldr	r1, [r7, #4]
 8018a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018aa0:	f7ff fde2 	bl	8018668 <ip_reass_chain_frag_into_datagram_and_validate>
 8018aa4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018aac:	f000 808a 	beq.w	8018bc4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018ab0:	4b49      	ldr	r3, [pc, #292]	; (8018bd8 <ip4_reass+0x29c>)
 8018ab2:	881a      	ldrh	r2, [r3, #0]
 8018ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ab6:	4413      	add	r3, r2
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	4b47      	ldr	r3, [pc, #284]	; (8018bd8 <ip4_reass+0x29c>)
 8018abc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018abe:	69fb      	ldr	r3, [r7, #28]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d00d      	beq.n	8018ae0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8018ac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ac8:	4413      	add	r3, r2
 8018aca:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ace:	8a7a      	ldrh	r2, [r7, #18]
 8018ad0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad4:	7f9b      	ldrb	r3, [r3, #30]
 8018ad6:	f043 0301 	orr.w	r3, r3, #1
 8018ada:	b2da      	uxtb	r2, r3
 8018adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ade:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018ae0:	697b      	ldr	r3, [r7, #20]
 8018ae2:	2b01      	cmp	r3, #1
 8018ae4:	d168      	bne.n	8018bb8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8018ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae8:	8b9b      	ldrh	r3, [r3, #28]
 8018aea:	3314      	adds	r3, #20
 8018aec:	b29a      	uxth	r2, r3
 8018aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8018af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af4:	685b      	ldr	r3, [r3, #4]
 8018af6:	685b      	ldr	r3, [r3, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8018afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018afe:	685b      	ldr	r3, [r3, #4]
 8018b00:	685b      	ldr	r3, [r3, #4]
 8018b02:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b06:	3308      	adds	r3, #8
 8018b08:	2214      	movs	r2, #20
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b0e:	f000 fce4 	bl	80194da <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8018b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b14:	8b9b      	ldrh	r3, [r3, #28]
 8018b16:	4618      	mov	r0, r3
 8018b18:	f7f6 fdfc 	bl	800f714 <lwip_htons>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	461a      	mov	r2, r3
 8018b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b22:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b26:	2200      	movs	r2, #0
 8018b28:	719a      	strb	r2, [r3, #6]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b30:	2200      	movs	r2, #0
 8018b32:	729a      	strb	r2, [r3, #10]
 8018b34:	2200      	movs	r2, #0
 8018b36:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018b3e:	e00e      	b.n	8018b5e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8018b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8018b46:	f06f 0113 	mvn.w	r1, #19
 8018b4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018b4c:	f7f7 ffd8 	bl	8010b00 <pbuf_header>
      pbuf_cat(p, r);
 8018b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f7f8 f8d2 	bl	8010cfc <pbuf_cat>
      r = iprh->next_pbuf;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d1ed      	bne.n	8018b40 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018b64:	4b1d      	ldr	r3, [pc, #116]	; (8018bdc <ip4_reass+0x2a0>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d102      	bne.n	8018b74 <ip4_reass+0x238>
      ipr_prev = NULL;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b72:	e010      	b.n	8018b96 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b74:	4b19      	ldr	r3, [pc, #100]	; (8018bdc <ip4_reass+0x2a0>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b7a:	e007      	b.n	8018b8c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8018b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b82:	429a      	cmp	r2, r3
 8018b84:	d006      	beq.n	8018b94 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d1f4      	bne.n	8018b7c <ip4_reass+0x240>
 8018b92:	e000      	b.n	8018b96 <ip4_reass+0x25a>
          break;
 8018b94:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b9a:	f7ff fd37 	bl	801860c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f7f8 f86c 	bl	8010c7c <pbuf_clen>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	4b0b      	ldr	r3, [pc, #44]	; (8018bd8 <ip4_reass+0x29c>)
 8018baa:	881b      	ldrh	r3, [r3, #0]
 8018bac:	1a9b      	subs	r3, r3, r2
 8018bae:	b29a      	uxth	r2, r3
 8018bb0:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <ip4_reass+0x29c>)
 8018bb2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	e00a      	b.n	8018bce <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	e008      	b.n	8018bce <ip4_reass+0x292>
    goto nullreturn;
 8018bbc:	bf00      	nop
 8018bbe:	e002      	b.n	8018bc6 <ip4_reass+0x28a>

nullreturn:
 8018bc0:	bf00      	nop
 8018bc2:	e000      	b.n	8018bc6 <ip4_reass+0x28a>
    goto nullreturn;
 8018bc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f7 ffbe 	bl	8010b48 <pbuf_free>
  return NULL;
 8018bcc:	2300      	movs	r3, #0
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3738      	adds	r7, #56	; 0x38
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
 8018bd6:	bf00      	nop
 8018bd8:	2000c93c 	.word	0x2000c93c
 8018bdc:	2000c938 	.word	0x2000c938

08018be0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8018be4:	2005      	movs	r0, #5
 8018be6:	f7f7 f9a1 	bl	800ff2c <memp_malloc>
 8018bea:	4603      	mov	r3, r0
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	bd80      	pop	{r7, pc}

08018bf0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d106      	bne.n	8018c0c <ip_frag_free_pbuf_custom_ref+0x1c>
 8018bfe:	4b07      	ldr	r3, [pc, #28]	; (8018c1c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018c00:	f240 22ae 	movw	r2, #686	; 0x2ae
 8018c04:	4906      	ldr	r1, [pc, #24]	; (8018c20 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018c06:	4807      	ldr	r0, [pc, #28]	; (8018c24 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018c08:	f000 fc7a 	bl	8019500 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018c0c:	6879      	ldr	r1, [r7, #4]
 8018c0e:	2005      	movs	r0, #5
 8018c10:	f7f7 fa02 	bl	8010018 <memp_free>
}
 8018c14:	bf00      	nop
 8018c16:	3708      	adds	r7, #8
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	0801cdbc 	.word	0x0801cdbc
 8018c20:	0801cf44 	.word	0x0801cf44
 8018c24:	0801ce24 	.word	0x0801ce24

08018c28 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d106      	bne.n	8018c48 <ipfrag_free_pbuf_custom+0x20>
 8018c3a:	4b11      	ldr	r3, [pc, #68]	; (8018c80 <ipfrag_free_pbuf_custom+0x58>)
 8018c3c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8018c40:	4910      	ldr	r1, [pc, #64]	; (8018c84 <ipfrag_free_pbuf_custom+0x5c>)
 8018c42:	4811      	ldr	r0, [pc, #68]	; (8018c88 <ipfrag_free_pbuf_custom+0x60>)
 8018c44:	f000 fc5c 	bl	8019500 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8018c48:	68fa      	ldr	r2, [r7, #12]
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	429a      	cmp	r2, r3
 8018c4e:	d006      	beq.n	8018c5e <ipfrag_free_pbuf_custom+0x36>
 8018c50:	4b0b      	ldr	r3, [pc, #44]	; (8018c80 <ipfrag_free_pbuf_custom+0x58>)
 8018c52:	f240 22b9 	movw	r2, #697	; 0x2b9
 8018c56:	490d      	ldr	r1, [pc, #52]	; (8018c8c <ipfrag_free_pbuf_custom+0x64>)
 8018c58:	480b      	ldr	r0, [pc, #44]	; (8018c88 <ipfrag_free_pbuf_custom+0x60>)
 8018c5a:	f000 fc51 	bl	8019500 <iprintf>
  if (pcr->original != NULL) {
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	695b      	ldr	r3, [r3, #20]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d004      	beq.n	8018c70 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	695b      	ldr	r3, [r3, #20]
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7f7 ff6c 	bl	8010b48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018c70:	68f8      	ldr	r0, [r7, #12]
 8018c72:	f7ff ffbd 	bl	8018bf0 <ip_frag_free_pbuf_custom_ref>
}
 8018c76:	bf00      	nop
 8018c78:	3710      	adds	r7, #16
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	0801cdbc 	.word	0x0801cdbc
 8018c84:	0801cf50 	.word	0x0801cf50
 8018c88:	0801ce24 	.word	0x0801ce24
 8018c8c:	0801cf5c 	.word	0x0801cf5c

08018c90 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b092      	sub	sp, #72	; 0x48
 8018c94:	af02      	add	r7, sp, #8
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018ca4:	3b14      	subs	r3, #20
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	da00      	bge.n	8018cac <ip4_frag+0x1c>
 8018caa:	3307      	adds	r3, #7
 8018cac:	10db      	asrs	r3, r3, #3
 8018cae:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018cb0:	2314      	movs	r3, #20
 8018cb2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8018cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8018cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cc0:	781b      	ldrb	r3, [r3, #0]
 8018cc2:	f003 030f 	and.w	r3, r3, #15
 8018cc6:	009b      	lsls	r3, r3, #2
 8018cc8:	2b14      	cmp	r3, #20
 8018cca:	d009      	beq.n	8018ce0 <ip4_frag+0x50>
 8018ccc:	4b79      	ldr	r3, [pc, #484]	; (8018eb4 <ip4_frag+0x224>)
 8018cce:	f240 22e1 	movw	r2, #737	; 0x2e1
 8018cd2:	4979      	ldr	r1, [pc, #484]	; (8018eb8 <ip4_frag+0x228>)
 8018cd4:	4879      	ldr	r0, [pc, #484]	; (8018ebc <ip4_frag+0x22c>)
 8018cd6:	f000 fc13 	bl	8019500 <iprintf>
 8018cda:	f06f 0305 	mvn.w	r3, #5
 8018cde:	e0e5      	b.n	8018eac <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ce2:	88db      	ldrh	r3, [r3, #6]
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7f6 fd14 	bl	800f714 <lwip_htons>
 8018cec:	4603      	mov	r3, r0
 8018cee:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8018cf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cf6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8018cf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d009      	beq.n	8018d16 <ip4_frag+0x86>
 8018d02:	4b6c      	ldr	r3, [pc, #432]	; (8018eb4 <ip4_frag+0x224>)
 8018d04:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018d08:	496d      	ldr	r1, [pc, #436]	; (8018ec0 <ip4_frag+0x230>)
 8018d0a:	486c      	ldr	r0, [pc, #432]	; (8018ebc <ip4_frag+0x22c>)
 8018d0c:	f000 fbf8 	bl	8019500 <iprintf>
 8018d10:	f06f 0305 	mvn.w	r3, #5
 8018d14:	e0ca      	b.n	8018eac <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	891b      	ldrh	r3, [r3, #8]
 8018d1a:	3b14      	subs	r3, #20
 8018d1c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8018d1e:	e0bc      	b.n	8018e9a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8018d20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018d22:	00da      	lsls	r2, r3, #3
 8018d24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018d26:	4293      	cmp	r3, r2
 8018d28:	bfa8      	it	ge
 8018d2a:	4613      	movge	r3, r2
 8018d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018d2e:	2200      	movs	r2, #0
 8018d30:	2114      	movs	r1, #20
 8018d32:	2002      	movs	r0, #2
 8018d34:	f7f7 fb96 	bl	8010464 <pbuf_alloc>
 8018d38:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8018d3a:	6a3b      	ldr	r3, [r7, #32]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f000 80b2 	beq.w	8018ea6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	895b      	ldrh	r3, [r3, #10]
 8018d46:	2b13      	cmp	r3, #19
 8018d48:	d806      	bhi.n	8018d58 <ip4_frag+0xc8>
 8018d4a:	4b5a      	ldr	r3, [pc, #360]	; (8018eb4 <ip4_frag+0x224>)
 8018d4c:	f240 3209 	movw	r2, #777	; 0x309
 8018d50:	495c      	ldr	r1, [pc, #368]	; (8018ec4 <ip4_frag+0x234>)
 8018d52:	485a      	ldr	r0, [pc, #360]	; (8018ebc <ip4_frag+0x22c>)
 8018d54:	f000 fbd4 	bl	8019500 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018d58:	6a3b      	ldr	r3, [r7, #32]
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	2214      	movs	r2, #20
 8018d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d60:	4618      	mov	r0, r3
 8018d62:	f000 fbba 	bl	80194da <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018d66:	6a3b      	ldr	r3, [r7, #32]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8018d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018d70:	e04f      	b.n	8018e12 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	895a      	ldrh	r2, [r3, #10]
 8018d76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018d78:	1ad3      	subs	r3, r2, r3
 8018d7a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d7c:	8b7a      	ldrh	r2, [r7, #26]
 8018d7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d80:	4293      	cmp	r3, r2
 8018d82:	bf28      	it	cs
 8018d84:	4613      	movcs	r3, r2
 8018d86:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d105      	bne.n	8018d9a <ip4_frag+0x10a>
        poff = 0;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	60fb      	str	r3, [r7, #12]
        continue;
 8018d98:	e03b      	b.n	8018e12 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d9a:	f7ff ff21 	bl	8018be0 <ip_frag_alloc_pbuf_custom_ref>
 8018d9e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d103      	bne.n	8018dae <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8018da6:	6a38      	ldr	r0, [r7, #32]
 8018da8:	f7f7 fece 	bl	8010b48 <pbuf_free>
        goto memerr;
 8018dac:	e07c      	b.n	8018ea8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018dae:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018db6:	4413      	add	r3, r2
 8018db8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8018dba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018dbc:	9201      	str	r2, [sp, #4]
 8018dbe:	9300      	str	r3, [sp, #0]
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2202      	movs	r2, #2
 8018dc4:	2004      	movs	r0, #4
 8018dc6:	f7f7 fce1 	bl	801078c <pbuf_alloced_custom>
 8018dca:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d106      	bne.n	8018de0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018dd2:	6978      	ldr	r0, [r7, #20]
 8018dd4:	f7ff ff0c 	bl	8018bf0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018dd8:	6a38      	ldr	r0, [r7, #32]
 8018dda:	f7f7 feb5 	bl	8010b48 <pbuf_free>
        goto memerr;
 8018dde:	e063      	b.n	8018ea8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8018de0:	68f8      	ldr	r0, [r7, #12]
 8018de2:	f7f7 ff63 	bl	8010cac <pbuf_ref>
      pcr->original = p;
 8018de6:	697b      	ldr	r3, [r7, #20]
 8018de8:	68fa      	ldr	r2, [r7, #12]
 8018dea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	4a36      	ldr	r2, [pc, #216]	; (8018ec8 <ip4_frag+0x238>)
 8018df0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018df2:	6939      	ldr	r1, [r7, #16]
 8018df4:	6a38      	ldr	r0, [r7, #32]
 8018df6:	f7f7 ff81 	bl	8010cfc <pbuf_cat>
      left_to_copy -= newpbuflen;
 8018dfa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8018dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018dfe:	1ad3      	subs	r3, r2, r3
 8018e00:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8018e02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d004      	beq.n	8018e12 <ip4_frag+0x182>
        poff = 0;
 8018e08:	2300      	movs	r3, #0
 8018e0a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018e12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d1ac      	bne.n	8018d72 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8018e18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018e1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e1c:	4413      	add	r3, r2
 8018e1e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018e20:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018e26:	3b14      	subs	r3, #20
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	bfd4      	ite	le
 8018e2c:	2301      	movle	r3, #1
 8018e2e:	2300      	movgt	r3, #0
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018e34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d103      	bne.n	8018e4a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8018e42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018e48:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018e4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f6 fc61 	bl	800f714 <lwip_htons>
 8018e52:	4603      	mov	r3, r0
 8018e54:	461a      	mov	r2, r3
 8018e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e58:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8018e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e5c:	3314      	adds	r3, #20
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7f6 fc57 	bl	800f714 <lwip_htons>
 8018e66:	4603      	mov	r3, r0
 8018e68:	461a      	mov	r2, r3
 8018e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e6c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e70:	2200      	movs	r2, #0
 8018e72:	729a      	strb	r2, [r3, #10]
 8018e74:	2200      	movs	r2, #0
 8018e76:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	695b      	ldr	r3, [r3, #20]
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	6a39      	ldr	r1, [r7, #32]
 8018e80:	68b8      	ldr	r0, [r7, #8]
 8018e82:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018e84:	6a38      	ldr	r0, [r7, #32]
 8018e86:	f7f7 fe5f 	bl	8010b48 <pbuf_free>
    left -= fragsize;
 8018e8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e8e:	1ad3      	subs	r3, r2, r3
 8018e90:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8018e92:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018e94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018e96:	4413      	add	r3, r2
 8018e98:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8018e9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f47f af3f 	bne.w	8018d20 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e002      	b.n	8018eac <ip4_frag+0x21c>
      goto memerr;
 8018ea6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018eac:	4618      	mov	r0, r3
 8018eae:	3740      	adds	r7, #64	; 0x40
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	bd80      	pop	{r7, pc}
 8018eb4:	0801cdbc 	.word	0x0801cdbc
 8018eb8:	0801cf68 	.word	0x0801cf68
 8018ebc:	0801ce24 	.word	0x0801ce24
 8018ec0:	0801cf90 	.word	0x0801cf90
 8018ec4:	0801cfac 	.word	0x0801cfac
 8018ec8:	08018c29 	.word	0x08018c29

08018ecc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b086      	sub	sp, #24
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8018ed6:	230e      	movs	r3, #14
 8018ed8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	895b      	ldrh	r3, [r3, #10]
 8018ede:	2b0e      	cmp	r3, #14
 8018ee0:	d977      	bls.n	8018fd2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	685b      	ldr	r3, [r3, #4]
 8018ee6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	7b1a      	ldrb	r2, [r3, #12]
 8018eec:	7b5b      	ldrb	r3, [r3, #13]
 8018eee:	021b      	lsls	r3, r3, #8
 8018ef0:	4313      	orrs	r3, r2
 8018ef2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	f003 0301 	and.w	r3, r3, #1
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d023      	beq.n	8018f48 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018f00:	693b      	ldr	r3, [r7, #16]
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	2b01      	cmp	r3, #1
 8018f06:	d10f      	bne.n	8018f28 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	785b      	ldrb	r3, [r3, #1]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d11b      	bne.n	8018f48 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f14:	2b5e      	cmp	r3, #94	; 0x5e
 8018f16:	d117      	bne.n	8018f48 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	7b5b      	ldrb	r3, [r3, #13]
 8018f1c:	f043 0310 	orr.w	r3, r3, #16
 8018f20:	b2da      	uxtb	r2, r3
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	735a      	strb	r2, [r3, #13]
 8018f26:	e00f      	b.n	8018f48 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	2206      	movs	r2, #6
 8018f2c:	4930      	ldr	r1, [pc, #192]	; (8018ff0 <ethernet_input+0x124>)
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f000 fac4 	bl	80194bc <memcmp>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d106      	bne.n	8018f48 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	7b5b      	ldrb	r3, [r3, #13]
 8018f3e:	f043 0308 	orr.w	r3, r3, #8
 8018f42:	b2da      	uxtb	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f48:	89fb      	ldrh	r3, [r7, #14]
 8018f4a:	2b08      	cmp	r3, #8
 8018f4c:	d003      	beq.n	8018f56 <ethernet_input+0x8a>
 8018f4e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018f52:	d01e      	beq.n	8018f92 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018f54:	e044      	b.n	8018fe0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f56:	683b      	ldr	r3, [r7, #0]
 8018f58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018f5c:	f003 0308 	and.w	r3, r3, #8
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d038      	beq.n	8018fd6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	895b      	ldrh	r3, [r3, #10]
 8018f68:	461a      	mov	r2, r3
 8018f6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	db33      	blt.n	8018fda <ethernet_input+0x10e>
 8018f72:	8afb      	ldrh	r3, [r7, #22]
 8018f74:	425b      	negs	r3, r3
 8018f76:	b29b      	uxth	r3, r3
 8018f78:	b21b      	sxth	r3, r3
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f7f7 fdbf 	bl	8010b00 <pbuf_header>
 8018f82:	4603      	mov	r3, r0
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d128      	bne.n	8018fda <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018f88:	6839      	ldr	r1, [r7, #0]
 8018f8a:	6878      	ldr	r0, [r7, #4]
 8018f8c:	f7fe ff80 	bl	8017e90 <ip4_input>
      break;
 8018f90:	e01d      	b.n	8018fce <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018f98:	f003 0308 	and.w	r3, r3, #8
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d01e      	beq.n	8018fde <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	895b      	ldrh	r3, [r3, #10]
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	db15      	blt.n	8018fda <ethernet_input+0x10e>
 8018fae:	8afb      	ldrh	r3, [r7, #22]
 8018fb0:	425b      	negs	r3, r3
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	b21b      	sxth	r3, r3
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f7f7 fda1 	bl	8010b00 <pbuf_header>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d10a      	bne.n	8018fda <ethernet_input+0x10e>
        etharp_input(p, netif);
 8018fc4:	6839      	ldr	r1, [r7, #0]
 8018fc6:	6878      	ldr	r0, [r7, #4]
 8018fc8:	f7fe f94e 	bl	8017268 <etharp_input>
      break;
 8018fcc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	e00a      	b.n	8018fe8 <ethernet_input+0x11c>
    goto free_and_return;
 8018fd2:	bf00      	nop
 8018fd4:	e004      	b.n	8018fe0 <ethernet_input+0x114>
        goto free_and_return;
 8018fd6:	bf00      	nop
 8018fd8:	e002      	b.n	8018fe0 <ethernet_input+0x114>

free_and_return:
 8018fda:	bf00      	nop
 8018fdc:	e000      	b.n	8018fe0 <ethernet_input+0x114>
        goto free_and_return;
 8018fde:	bf00      	nop
  pbuf_free(p);
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7f7 fdb1 	bl	8010b48 <pbuf_free>
  return ERR_OK;
 8018fe6:	2300      	movs	r3, #0
}
 8018fe8:	4618      	mov	r0, r3
 8018fea:	3718      	adds	r7, #24
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}
 8018ff0:	0801d1b0 	.word	0x0801d1b0

08018ff4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b086      	sub	sp, #24
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	60b9      	str	r1, [r7, #8]
 8018ffe:	607a      	str	r2, [r7, #4]
 8019000:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019002:	8c3b      	ldrh	r3, [r7, #32]
 8019004:	4618      	mov	r0, r3
 8019006:	f7f6 fb85 	bl	800f714 <lwip_htons>
 801900a:	4603      	mov	r3, r0
 801900c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801900e:	210e      	movs	r1, #14
 8019010:	68b8      	ldr	r0, [r7, #8]
 8019012:	f7f7 fd75 	bl	8010b00 <pbuf_header>
 8019016:	4603      	mov	r3, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	d125      	bne.n	8019068 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	685b      	ldr	r3, [r3, #4]
 8019020:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019022:	693b      	ldr	r3, [r7, #16]
 8019024:	8afa      	ldrh	r2, [r7, #22]
 8019026:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	2206      	movs	r2, #6
 801902c:	6839      	ldr	r1, [r7, #0]
 801902e:	4618      	mov	r0, r3
 8019030:	f000 fa53 	bl	80194da <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8019034:	693b      	ldr	r3, [r7, #16]
 8019036:	3306      	adds	r3, #6
 8019038:	2206      	movs	r2, #6
 801903a:	6879      	ldr	r1, [r7, #4]
 801903c:	4618      	mov	r0, r3
 801903e:	f000 fa4c 	bl	80194da <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019048:	2b06      	cmp	r3, #6
 801904a:	d006      	beq.n	801905a <ethernet_output+0x66>
 801904c:	4b0a      	ldr	r3, [pc, #40]	; (8019078 <ethernet_output+0x84>)
 801904e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019052:	490a      	ldr	r1, [pc, #40]	; (801907c <ethernet_output+0x88>)
 8019054:	480a      	ldr	r0, [pc, #40]	; (8019080 <ethernet_output+0x8c>)
 8019056:	f000 fa53 	bl	8019500 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	699b      	ldr	r3, [r3, #24]
 801905e:	68b9      	ldr	r1, [r7, #8]
 8019060:	68f8      	ldr	r0, [r7, #12]
 8019062:	4798      	blx	r3
 8019064:	4603      	mov	r3, r0
 8019066:	e002      	b.n	801906e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019068:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801906a:	f06f 0301 	mvn.w	r3, #1
}
 801906e:	4618      	mov	r0, r3
 8019070:	3718      	adds	r7, #24
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop
 8019078:	0801cfcc 	.word	0x0801cfcc
 801907c:	0801d024 	.word	0x0801d024
 8019080:	0801d058 	.word	0x0801d058

08019084 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b086      	sub	sp, #24
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
 801908c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	60bb      	str	r3, [r7, #8]
 8019092:	2304      	movs	r3, #4
 8019094:	60fb      	str	r3, [r7, #12]
 8019096:	2300      	movs	r3, #0
 8019098:	613b      	str	r3, [r7, #16]
 801909a:	2300      	movs	r3, #0
 801909c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801909e:	f107 0308 	add.w	r3, r7, #8
 80190a2:	2100      	movs	r1, #0
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7f1 fbca 	bl	800a83e <osMessageCreate>
 80190aa:	4602      	mov	r2, r0
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d102      	bne.n	80190be <sys_mbox_new+0x3a>
    return ERR_MEM;
 80190b8:	f04f 33ff 	mov.w	r3, #4294967295
 80190bc:	e000      	b.n	80190c0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80190be:	2300      	movs	r3, #0
}
 80190c0:	4618      	mov	r0, r3
 80190c2:	3718      	adds	r7, #24
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd80      	pop	{r7, pc}

080190c8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7f1 fc8f 	bl	800a9f8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	4618      	mov	r0, r3
 80190e0:	f7f1 fca0 	bl	800aa24 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80190e4:	bf00      	nop
 80190e6:	3708      	adds	r7, #8
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}

080190ec <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
 80190f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80190f6:	bf00      	nop
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	6839      	ldr	r1, [r7, #0]
 80190fe:	f04f 32ff 	mov.w	r2, #4294967295
 8019102:	4618      	mov	r0, r3
 8019104:	f7f1 fbc4 	bl	800a890 <osMessagePut>
 8019108:	4603      	mov	r3, r0
 801910a:	2b00      	cmp	r3, #0
 801910c:	d1f4      	bne.n	80190f8 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801910e:	bf00      	nop
 8019110:	3708      	adds	r7, #8
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}

08019116 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019116:	b580      	push	{r7, lr}
 8019118:	b084      	sub	sp, #16
 801911a:	af00      	add	r7, sp, #0
 801911c:	6078      	str	r0, [r7, #4]
 801911e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	6839      	ldr	r1, [r7, #0]
 8019126:	2200      	movs	r2, #0
 8019128:	4618      	mov	r0, r3
 801912a:	f7f1 fbb1 	bl	800a890 <osMessagePut>
 801912e:	4603      	mov	r3, r0
 8019130:	2b00      	cmp	r3, #0
 8019132:	d102      	bne.n	801913a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019134:	2300      	movs	r3, #0
 8019136:	73fb      	strb	r3, [r7, #15]
 8019138:	e001      	b.n	801913e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801913a:	23ff      	movs	r3, #255	; 0xff
 801913c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801913e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019142:	4618      	mov	r0, r3
 8019144:	3710      	adds	r7, #16
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}

0801914a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801914a:	b580      	push	{r7, lr}
 801914c:	b08c      	sub	sp, #48	; 0x30
 801914e:	af00      	add	r7, sp, #0
 8019150:	61f8      	str	r0, [r7, #28]
 8019152:	61b9      	str	r1, [r7, #24]
 8019154:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019156:	f7f1 f99b 	bl	800a490 <osKernelSysTick>
 801915a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d017      	beq.n	8019192 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019162:	69fb      	ldr	r3, [r7, #28]
 8019164:	6819      	ldr	r1, [r3, #0]
 8019166:	f107 0320 	add.w	r3, r7, #32
 801916a:	697a      	ldr	r2, [r7, #20]
 801916c:	4618      	mov	r0, r3
 801916e:	f7f1 fbcf 	bl	800a910 <osMessageGet>

    if(event.status == osEventMessage)
 8019172:	6a3b      	ldr	r3, [r7, #32]
 8019174:	2b10      	cmp	r3, #16
 8019176:	d109      	bne.n	801918c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917a:	461a      	mov	r2, r3
 801917c:	69bb      	ldr	r3, [r7, #24]
 801917e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019180:	f7f1 f986 	bl	800a490 <osKernelSysTick>
 8019184:	4602      	mov	r2, r0
 8019186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019188:	1ad3      	subs	r3, r2, r3
 801918a:	e019      	b.n	80191c0 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801918c:	f04f 33ff 	mov.w	r3, #4294967295
 8019190:	e016      	b.n	80191c0 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019192:	69fb      	ldr	r3, [r7, #28]
 8019194:	6819      	ldr	r1, [r3, #0]
 8019196:	463b      	mov	r3, r7
 8019198:	f04f 32ff 	mov.w	r2, #4294967295
 801919c:	4618      	mov	r0, r3
 801919e:	f7f1 fbb7 	bl	800a910 <osMessageGet>
 80191a2:	f107 0320 	add.w	r3, r7, #32
 80191a6:	463a      	mov	r2, r7
 80191a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80191aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80191ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b0:	461a      	mov	r2, r3
 80191b2:	69bb      	ldr	r3, [r7, #24]
 80191b4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80191b6:	f7f1 f96b 	bl	800a490 <osKernelSysTick>
 80191ba:	4602      	mov	r2, r0
 80191bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191be:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3730      	adds	r7, #48	; 0x30
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}

080191c8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b086      	sub	sp, #24
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6819      	ldr	r1, [r3, #0]
 80191d6:	f107 030c 	add.w	r3, r7, #12
 80191da:	2200      	movs	r2, #0
 80191dc:	4618      	mov	r0, r3
 80191de:	f7f1 fb97 	bl	800a910 <osMessageGet>

  if(event.status == osEventMessage)
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	2b10      	cmp	r3, #16
 80191e6:	d105      	bne.n	80191f4 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	461a      	mov	r2, r3
 80191ec:	683b      	ldr	r3, [r7, #0]
 80191ee:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80191f0:	2300      	movs	r3, #0
 80191f2:	e001      	b.n	80191f8 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80191f4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80191f8:	4618      	mov	r0, r3
 80191fa:	3718      	adds	r7, #24
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}

08019200 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d101      	bne.n	8019214 <sys_mbox_valid+0x14>
    return 0;
 8019210:	2300      	movs	r3, #0
 8019212:	e000      	b.n	8019216 <sys_mbox_valid+0x16>
  else
    return 1;
 8019214:	2301      	movs	r3, #1
}
 8019216:	4618      	mov	r0, r3
 8019218:	370c      	adds	r7, #12
 801921a:	46bd      	mov	sp, r7
 801921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019220:	4770      	bx	lr

08019222 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019222:	b480      	push	{r7}
 8019224:	b083      	sub	sp, #12
 8019226:	af00      	add	r7, sp, #0
 8019228:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2200      	movs	r2, #0
 801922e:	601a      	str	r2, [r3, #0]
}
 8019230:	bf00      	nop
 8019232:	370c      	adds	r7, #12
 8019234:	46bd      	mov	sp, r7
 8019236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923a:	4770      	bx	lr

0801923c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b084      	sub	sp, #16
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	460b      	mov	r3, r1
 8019246:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019248:	2300      	movs	r3, #0
 801924a:	60bb      	str	r3, [r7, #8]
 801924c:	2300      	movs	r3, #0
 801924e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019250:	f107 0308 	add.w	r3, r7, #8
 8019254:	2101      	movs	r1, #1
 8019256:	4618      	mov	r0, r3
 8019258:	f7f1 fa26 	bl	800a6a8 <osSemaphoreCreate>
 801925c:	4602      	mov	r2, r0
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d102      	bne.n	8019270 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801926a:	f04f 33ff 	mov.w	r3, #4294967295
 801926e:	e009      	b.n	8019284 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019270:	78fb      	ldrb	r3, [r7, #3]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d105      	bne.n	8019282 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2100      	movs	r1, #0
 801927c:	4618      	mov	r0, r3
 801927e:	f7f1 fa47 	bl	800a710 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019282:	2300      	movs	r3, #0
}
 8019284:	4618      	mov	r0, r3
 8019286:	3710      	adds	r7, #16
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}

0801928c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b084      	sub	sp, #16
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019296:	f7f1 f8fb 	bl	800a490 <osKernelSysTick>
 801929a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d011      	beq.n	80192c6 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	6839      	ldr	r1, [r7, #0]
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7f1 fa31 	bl	800a710 <osSemaphoreWait>
 80192ae:	4603      	mov	r3, r0
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d105      	bne.n	80192c0 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80192b4:	f7f1 f8ec 	bl	800a490 <osKernelSysTick>
 80192b8:	4602      	mov	r2, r0
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	1ad3      	subs	r3, r2, r3
 80192be:	e012      	b.n	80192e6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80192c0:	f04f 33ff 	mov.w	r3, #4294967295
 80192c4:	e00f      	b.n	80192e6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80192c6:	bf00      	nop
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f04f 31ff 	mov.w	r1, #4294967295
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7f1 fa1d 	bl	800a710 <osSemaphoreWait>
 80192d6:	4603      	mov	r3, r0
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d1f5      	bne.n	80192c8 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80192dc:	f7f1 f8d8 	bl	800a490 <osKernelSysTick>
 80192e0:	4602      	mov	r2, r0
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}

080192ee <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80192ee:	b580      	push	{r7, lr}
 80192f0:	b082      	sub	sp, #8
 80192f2:	af00      	add	r7, sp, #0
 80192f4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7f1 fa56 	bl	800a7ac <osSemaphoreRelease>
}
 8019300:	bf00      	nop
 8019302:	3708      	adds	r7, #8
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}

08019308 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b082      	sub	sp, #8
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	4618      	mov	r0, r3
 8019316:	f7f1 fa7f 	bl	800a818 <osSemaphoreDelete>
}
 801931a:	bf00      	nop
 801931c:	3708      	adds	r7, #8
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}

08019322 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019322:	b480      	push	{r7}
 8019324:	b083      	sub	sp, #12
 8019326:	af00      	add	r7, sp, #0
 8019328:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d101      	bne.n	8019336 <sys_sem_valid+0x14>
    return 0;
 8019332:	2300      	movs	r3, #0
 8019334:	e000      	b.n	8019338 <sys_sem_valid+0x16>
  else
    return 1;
 8019336:	2301      	movs	r3, #1
}
 8019338:	4618      	mov	r0, r3
 801933a:	370c      	adds	r7, #12
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr

08019344 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2200      	movs	r2, #0
 8019350:	601a      	str	r2, [r3, #0]
}
 8019352:	bf00      	nop
 8019354:	370c      	adds	r7, #12
 8019356:	46bd      	mov	sp, r7
 8019358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935c:	4770      	bx	lr
	...

08019360 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019364:	4803      	ldr	r0, [pc, #12]	; (8019374 <sys_init+0x14>)
 8019366:	f7f1 f903 	bl	800a570 <osMutexCreate>
 801936a:	4602      	mov	r2, r0
 801936c:	4b02      	ldr	r3, [pc, #8]	; (8019378 <sys_init+0x18>)
 801936e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019370:	bf00      	nop
 8019372:	bd80      	pop	{r7, pc}
 8019374:	0801d1c0 	.word	0x0801d1c0
 8019378:	200101ec 	.word	0x200101ec

0801937c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801937c:	b580      	push	{r7, lr}
 801937e:	b084      	sub	sp, #16
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019384:	2300      	movs	r3, #0
 8019386:	60bb      	str	r3, [r7, #8]
 8019388:	2300      	movs	r3, #0
 801938a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801938c:	f107 0308 	add.w	r3, r7, #8
 8019390:	4618      	mov	r0, r3
 8019392:	f7f1 f8ed 	bl	800a570 <osMutexCreate>
 8019396:	4602      	mov	r2, r0
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d102      	bne.n	80193aa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80193a4:	f04f 33ff 	mov.w	r3, #4294967295
 80193a8:	e000      	b.n	80193ac <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80193aa:	2300      	movs	r3, #0
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	3710      	adds	r7, #16
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	f04f 31ff 	mov.w	r1, #4294967295
 80193c4:	4618      	mov	r0, r3
 80193c6:	f7f1 f8eb 	bl	800a5a0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80193ca:	bf00      	nop
 80193cc:	3708      	adds	r7, #8
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}

080193d2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80193d2:	b580      	push	{r7, lr}
 80193d4:	b082      	sub	sp, #8
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	4618      	mov	r0, r3
 80193e0:	f7f1 f92c 	bl	800a63c <osMutexRelease>
}
 80193e4:	bf00      	nop
 80193e6:	3708      	adds	r7, #8
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}

080193ec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b08c      	sub	sp, #48	; 0x30
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	60f8      	str	r0, [r7, #12]
 80193f4:	60b9      	str	r1, [r7, #8]
 80193f6:	607a      	str	r2, [r7, #4]
 80193f8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80193fa:	f107 0314 	add.w	r3, r7, #20
 80193fe:	2200      	movs	r2, #0
 8019400:	601a      	str	r2, [r3, #0]
 8019402:	605a      	str	r2, [r3, #4]
 8019404:	609a      	str	r2, [r3, #8]
 8019406:	60da      	str	r2, [r3, #12]
 8019408:	611a      	str	r2, [r3, #16]
 801940a:	615a      	str	r2, [r3, #20]
 801940c:	619a      	str	r2, [r3, #24]
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	617b      	str	r3, [r7, #20]
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	61bb      	str	r3, [r7, #24]
 8019416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019418:	b21b      	sxth	r3, r3
 801941a:	83bb      	strh	r3, [r7, #28]
 801941c:	683b      	ldr	r3, [r7, #0]
 801941e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019420:	f107 0314 	add.w	r3, r7, #20
 8019424:	6879      	ldr	r1, [r7, #4]
 8019426:	4618      	mov	r0, r3
 8019428:	f7f1 f842 	bl	800a4b0 <osThreadCreate>
 801942c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801942e:	4618      	mov	r0, r3
 8019430:	3730      	adds	r7, #48	; 0x30
 8019432:	46bd      	mov	sp, r7
 8019434:	bd80      	pop	{r7, pc}
	...

08019438 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801943c:	4b04      	ldr	r3, [pc, #16]	; (8019450 <sys_arch_protect+0x18>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	f04f 31ff 	mov.w	r1, #4294967295
 8019444:	4618      	mov	r0, r3
 8019446:	f7f1 f8ab 	bl	800a5a0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801944a:	2301      	movs	r3, #1
}
 801944c:	4618      	mov	r0, r3
 801944e:	bd80      	pop	{r7, pc}
 8019450:	200101ec 	.word	0x200101ec

08019454 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801945c:	4b04      	ldr	r3, [pc, #16]	; (8019470 <sys_arch_unprotect+0x1c>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	4618      	mov	r0, r3
 8019462:	f7f1 f8eb 	bl	800a63c <osMutexRelease>
}
 8019466:	bf00      	nop
 8019468:	3708      	adds	r7, #8
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
 801946e:	bf00      	nop
 8019470:	200101ec 	.word	0x200101ec

08019474 <__libc_init_array>:
 8019474:	b570      	push	{r4, r5, r6, lr}
 8019476:	4e0d      	ldr	r6, [pc, #52]	; (80194ac <__libc_init_array+0x38>)
 8019478:	4c0d      	ldr	r4, [pc, #52]	; (80194b0 <__libc_init_array+0x3c>)
 801947a:	1ba4      	subs	r4, r4, r6
 801947c:	10a4      	asrs	r4, r4, #2
 801947e:	2500      	movs	r5, #0
 8019480:	42a5      	cmp	r5, r4
 8019482:	d109      	bne.n	8019498 <__libc_init_array+0x24>
 8019484:	4e0b      	ldr	r6, [pc, #44]	; (80194b4 <__libc_init_array+0x40>)
 8019486:	4c0c      	ldr	r4, [pc, #48]	; (80194b8 <__libc_init_array+0x44>)
 8019488:	f001 f8d8 	bl	801a63c <_init>
 801948c:	1ba4      	subs	r4, r4, r6
 801948e:	10a4      	asrs	r4, r4, #2
 8019490:	2500      	movs	r5, #0
 8019492:	42a5      	cmp	r5, r4
 8019494:	d105      	bne.n	80194a2 <__libc_init_array+0x2e>
 8019496:	bd70      	pop	{r4, r5, r6, pc}
 8019498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801949c:	4798      	blx	r3
 801949e:	3501      	adds	r5, #1
 80194a0:	e7ee      	b.n	8019480 <__libc_init_array+0xc>
 80194a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80194a6:	4798      	blx	r3
 80194a8:	3501      	adds	r5, #1
 80194aa:	e7f2      	b.n	8019492 <__libc_init_array+0x1e>
 80194ac:	0801d268 	.word	0x0801d268
 80194b0:	0801d268 	.word	0x0801d268
 80194b4:	0801d268 	.word	0x0801d268
 80194b8:	0801d26c 	.word	0x0801d26c

080194bc <memcmp>:
 80194bc:	b530      	push	{r4, r5, lr}
 80194be:	2400      	movs	r4, #0
 80194c0:	42a2      	cmp	r2, r4
 80194c2:	d101      	bne.n	80194c8 <memcmp+0xc>
 80194c4:	2000      	movs	r0, #0
 80194c6:	e007      	b.n	80194d8 <memcmp+0x1c>
 80194c8:	5d03      	ldrb	r3, [r0, r4]
 80194ca:	3401      	adds	r4, #1
 80194cc:	190d      	adds	r5, r1, r4
 80194ce:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80194d2:	42ab      	cmp	r3, r5
 80194d4:	d0f4      	beq.n	80194c0 <memcmp+0x4>
 80194d6:	1b58      	subs	r0, r3, r5
 80194d8:	bd30      	pop	{r4, r5, pc}

080194da <memcpy>:
 80194da:	b510      	push	{r4, lr}
 80194dc:	1e43      	subs	r3, r0, #1
 80194de:	440a      	add	r2, r1
 80194e0:	4291      	cmp	r1, r2
 80194e2:	d100      	bne.n	80194e6 <memcpy+0xc>
 80194e4:	bd10      	pop	{r4, pc}
 80194e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194ee:	e7f7      	b.n	80194e0 <memcpy+0x6>

080194f0 <memset>:
 80194f0:	4402      	add	r2, r0
 80194f2:	4603      	mov	r3, r0
 80194f4:	4293      	cmp	r3, r2
 80194f6:	d100      	bne.n	80194fa <memset+0xa>
 80194f8:	4770      	bx	lr
 80194fa:	f803 1b01 	strb.w	r1, [r3], #1
 80194fe:	e7f9      	b.n	80194f4 <memset+0x4>

08019500 <iprintf>:
 8019500:	b40f      	push	{r0, r1, r2, r3}
 8019502:	4b0a      	ldr	r3, [pc, #40]	; (801952c <iprintf+0x2c>)
 8019504:	b513      	push	{r0, r1, r4, lr}
 8019506:	681c      	ldr	r4, [r3, #0]
 8019508:	b124      	cbz	r4, 8019514 <iprintf+0x14>
 801950a:	69a3      	ldr	r3, [r4, #24]
 801950c:	b913      	cbnz	r3, 8019514 <iprintf+0x14>
 801950e:	4620      	mov	r0, r4
 8019510:	f000 f86e 	bl	80195f0 <__sinit>
 8019514:	ab05      	add	r3, sp, #20
 8019516:	9a04      	ldr	r2, [sp, #16]
 8019518:	68a1      	ldr	r1, [r4, #8]
 801951a:	9301      	str	r3, [sp, #4]
 801951c:	4620      	mov	r0, r4
 801951e:	f000 fac7 	bl	8019ab0 <_vfiprintf_r>
 8019522:	b002      	add	sp, #8
 8019524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019528:	b004      	add	sp, #16
 801952a:	4770      	bx	lr
 801952c:	20000034 	.word	0x20000034

08019530 <siprintf>:
 8019530:	b40e      	push	{r1, r2, r3}
 8019532:	b500      	push	{lr}
 8019534:	b09c      	sub	sp, #112	; 0x70
 8019536:	ab1d      	add	r3, sp, #116	; 0x74
 8019538:	9002      	str	r0, [sp, #8]
 801953a:	9006      	str	r0, [sp, #24]
 801953c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019540:	4809      	ldr	r0, [pc, #36]	; (8019568 <siprintf+0x38>)
 8019542:	9107      	str	r1, [sp, #28]
 8019544:	9104      	str	r1, [sp, #16]
 8019546:	4909      	ldr	r1, [pc, #36]	; (801956c <siprintf+0x3c>)
 8019548:	f853 2b04 	ldr.w	r2, [r3], #4
 801954c:	9105      	str	r1, [sp, #20]
 801954e:	6800      	ldr	r0, [r0, #0]
 8019550:	9301      	str	r3, [sp, #4]
 8019552:	a902      	add	r1, sp, #8
 8019554:	f000 f98a 	bl	801986c <_svfiprintf_r>
 8019558:	9b02      	ldr	r3, [sp, #8]
 801955a:	2200      	movs	r2, #0
 801955c:	701a      	strb	r2, [r3, #0]
 801955e:	b01c      	add	sp, #112	; 0x70
 8019560:	f85d eb04 	ldr.w	lr, [sp], #4
 8019564:	b003      	add	sp, #12
 8019566:	4770      	bx	lr
 8019568:	20000034 	.word	0x20000034
 801956c:	ffff0208 	.word	0xffff0208

08019570 <std>:
 8019570:	2300      	movs	r3, #0
 8019572:	b510      	push	{r4, lr}
 8019574:	4604      	mov	r4, r0
 8019576:	e9c0 3300 	strd	r3, r3, [r0]
 801957a:	6083      	str	r3, [r0, #8]
 801957c:	8181      	strh	r1, [r0, #12]
 801957e:	6643      	str	r3, [r0, #100]	; 0x64
 8019580:	81c2      	strh	r2, [r0, #14]
 8019582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019586:	6183      	str	r3, [r0, #24]
 8019588:	4619      	mov	r1, r3
 801958a:	2208      	movs	r2, #8
 801958c:	305c      	adds	r0, #92	; 0x5c
 801958e:	f7ff ffaf 	bl	80194f0 <memset>
 8019592:	4b05      	ldr	r3, [pc, #20]	; (80195a8 <std+0x38>)
 8019594:	6263      	str	r3, [r4, #36]	; 0x24
 8019596:	4b05      	ldr	r3, [pc, #20]	; (80195ac <std+0x3c>)
 8019598:	62a3      	str	r3, [r4, #40]	; 0x28
 801959a:	4b05      	ldr	r3, [pc, #20]	; (80195b0 <std+0x40>)
 801959c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801959e:	4b05      	ldr	r3, [pc, #20]	; (80195b4 <std+0x44>)
 80195a0:	6224      	str	r4, [r4, #32]
 80195a2:	6323      	str	r3, [r4, #48]	; 0x30
 80195a4:	bd10      	pop	{r4, pc}
 80195a6:	bf00      	nop
 80195a8:	0801a00d 	.word	0x0801a00d
 80195ac:	0801a02f 	.word	0x0801a02f
 80195b0:	0801a067 	.word	0x0801a067
 80195b4:	0801a08b 	.word	0x0801a08b

080195b8 <_cleanup_r>:
 80195b8:	4901      	ldr	r1, [pc, #4]	; (80195c0 <_cleanup_r+0x8>)
 80195ba:	f000 b885 	b.w	80196c8 <_fwalk_reent>
 80195be:	bf00      	nop
 80195c0:	0801a365 	.word	0x0801a365

080195c4 <__sfmoreglue>:
 80195c4:	b570      	push	{r4, r5, r6, lr}
 80195c6:	1e4a      	subs	r2, r1, #1
 80195c8:	2568      	movs	r5, #104	; 0x68
 80195ca:	4355      	muls	r5, r2
 80195cc:	460e      	mov	r6, r1
 80195ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80195d2:	f000 f897 	bl	8019704 <_malloc_r>
 80195d6:	4604      	mov	r4, r0
 80195d8:	b140      	cbz	r0, 80195ec <__sfmoreglue+0x28>
 80195da:	2100      	movs	r1, #0
 80195dc:	e9c0 1600 	strd	r1, r6, [r0]
 80195e0:	300c      	adds	r0, #12
 80195e2:	60a0      	str	r0, [r4, #8]
 80195e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80195e8:	f7ff ff82 	bl	80194f0 <memset>
 80195ec:	4620      	mov	r0, r4
 80195ee:	bd70      	pop	{r4, r5, r6, pc}

080195f0 <__sinit>:
 80195f0:	6983      	ldr	r3, [r0, #24]
 80195f2:	b510      	push	{r4, lr}
 80195f4:	4604      	mov	r4, r0
 80195f6:	bb33      	cbnz	r3, 8019646 <__sinit+0x56>
 80195f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80195fc:	6503      	str	r3, [r0, #80]	; 0x50
 80195fe:	4b12      	ldr	r3, [pc, #72]	; (8019648 <__sinit+0x58>)
 8019600:	4a12      	ldr	r2, [pc, #72]	; (801964c <__sinit+0x5c>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	6282      	str	r2, [r0, #40]	; 0x28
 8019606:	4298      	cmp	r0, r3
 8019608:	bf04      	itt	eq
 801960a:	2301      	moveq	r3, #1
 801960c:	6183      	streq	r3, [r0, #24]
 801960e:	f000 f81f 	bl	8019650 <__sfp>
 8019612:	6060      	str	r0, [r4, #4]
 8019614:	4620      	mov	r0, r4
 8019616:	f000 f81b 	bl	8019650 <__sfp>
 801961a:	60a0      	str	r0, [r4, #8]
 801961c:	4620      	mov	r0, r4
 801961e:	f000 f817 	bl	8019650 <__sfp>
 8019622:	2200      	movs	r2, #0
 8019624:	60e0      	str	r0, [r4, #12]
 8019626:	2104      	movs	r1, #4
 8019628:	6860      	ldr	r0, [r4, #4]
 801962a:	f7ff ffa1 	bl	8019570 <std>
 801962e:	2201      	movs	r2, #1
 8019630:	2109      	movs	r1, #9
 8019632:	68a0      	ldr	r0, [r4, #8]
 8019634:	f7ff ff9c 	bl	8019570 <std>
 8019638:	2202      	movs	r2, #2
 801963a:	2112      	movs	r1, #18
 801963c:	68e0      	ldr	r0, [r4, #12]
 801963e:	f7ff ff97 	bl	8019570 <std>
 8019642:	2301      	movs	r3, #1
 8019644:	61a3      	str	r3, [r4, #24]
 8019646:	bd10      	pop	{r4, pc}
 8019648:	0801d1c8 	.word	0x0801d1c8
 801964c:	080195b9 	.word	0x080195b9

08019650 <__sfp>:
 8019650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019652:	4b1b      	ldr	r3, [pc, #108]	; (80196c0 <__sfp+0x70>)
 8019654:	681e      	ldr	r6, [r3, #0]
 8019656:	69b3      	ldr	r3, [r6, #24]
 8019658:	4607      	mov	r7, r0
 801965a:	b913      	cbnz	r3, 8019662 <__sfp+0x12>
 801965c:	4630      	mov	r0, r6
 801965e:	f7ff ffc7 	bl	80195f0 <__sinit>
 8019662:	3648      	adds	r6, #72	; 0x48
 8019664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019668:	3b01      	subs	r3, #1
 801966a:	d503      	bpl.n	8019674 <__sfp+0x24>
 801966c:	6833      	ldr	r3, [r6, #0]
 801966e:	b133      	cbz	r3, 801967e <__sfp+0x2e>
 8019670:	6836      	ldr	r6, [r6, #0]
 8019672:	e7f7      	b.n	8019664 <__sfp+0x14>
 8019674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019678:	b16d      	cbz	r5, 8019696 <__sfp+0x46>
 801967a:	3468      	adds	r4, #104	; 0x68
 801967c:	e7f4      	b.n	8019668 <__sfp+0x18>
 801967e:	2104      	movs	r1, #4
 8019680:	4638      	mov	r0, r7
 8019682:	f7ff ff9f 	bl	80195c4 <__sfmoreglue>
 8019686:	6030      	str	r0, [r6, #0]
 8019688:	2800      	cmp	r0, #0
 801968a:	d1f1      	bne.n	8019670 <__sfp+0x20>
 801968c:	230c      	movs	r3, #12
 801968e:	603b      	str	r3, [r7, #0]
 8019690:	4604      	mov	r4, r0
 8019692:	4620      	mov	r0, r4
 8019694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019696:	4b0b      	ldr	r3, [pc, #44]	; (80196c4 <__sfp+0x74>)
 8019698:	6665      	str	r5, [r4, #100]	; 0x64
 801969a:	e9c4 5500 	strd	r5, r5, [r4]
 801969e:	60a5      	str	r5, [r4, #8]
 80196a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80196a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80196a8:	2208      	movs	r2, #8
 80196aa:	4629      	mov	r1, r5
 80196ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80196b0:	f7ff ff1e 	bl	80194f0 <memset>
 80196b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80196b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80196bc:	e7e9      	b.n	8019692 <__sfp+0x42>
 80196be:	bf00      	nop
 80196c0:	0801d1c8 	.word	0x0801d1c8
 80196c4:	ffff0001 	.word	0xffff0001

080196c8 <_fwalk_reent>:
 80196c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196cc:	4680      	mov	r8, r0
 80196ce:	4689      	mov	r9, r1
 80196d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80196d4:	2600      	movs	r6, #0
 80196d6:	b914      	cbnz	r4, 80196de <_fwalk_reent+0x16>
 80196d8:	4630      	mov	r0, r6
 80196da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80196e2:	3f01      	subs	r7, #1
 80196e4:	d501      	bpl.n	80196ea <_fwalk_reent+0x22>
 80196e6:	6824      	ldr	r4, [r4, #0]
 80196e8:	e7f5      	b.n	80196d6 <_fwalk_reent+0xe>
 80196ea:	89ab      	ldrh	r3, [r5, #12]
 80196ec:	2b01      	cmp	r3, #1
 80196ee:	d907      	bls.n	8019700 <_fwalk_reent+0x38>
 80196f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196f4:	3301      	adds	r3, #1
 80196f6:	d003      	beq.n	8019700 <_fwalk_reent+0x38>
 80196f8:	4629      	mov	r1, r5
 80196fa:	4640      	mov	r0, r8
 80196fc:	47c8      	blx	r9
 80196fe:	4306      	orrs	r6, r0
 8019700:	3568      	adds	r5, #104	; 0x68
 8019702:	e7ee      	b.n	80196e2 <_fwalk_reent+0x1a>

08019704 <_malloc_r>:
 8019704:	b570      	push	{r4, r5, r6, lr}
 8019706:	1ccd      	adds	r5, r1, #3
 8019708:	f025 0503 	bic.w	r5, r5, #3
 801970c:	3508      	adds	r5, #8
 801970e:	2d0c      	cmp	r5, #12
 8019710:	bf38      	it	cc
 8019712:	250c      	movcc	r5, #12
 8019714:	2d00      	cmp	r5, #0
 8019716:	4606      	mov	r6, r0
 8019718:	db01      	blt.n	801971e <_malloc_r+0x1a>
 801971a:	42a9      	cmp	r1, r5
 801971c:	d903      	bls.n	8019726 <_malloc_r+0x22>
 801971e:	230c      	movs	r3, #12
 8019720:	6033      	str	r3, [r6, #0]
 8019722:	2000      	movs	r0, #0
 8019724:	bd70      	pop	{r4, r5, r6, pc}
 8019726:	f000 fed6 	bl	801a4d6 <__malloc_lock>
 801972a:	4a21      	ldr	r2, [pc, #132]	; (80197b0 <_malloc_r+0xac>)
 801972c:	6814      	ldr	r4, [r2, #0]
 801972e:	4621      	mov	r1, r4
 8019730:	b991      	cbnz	r1, 8019758 <_malloc_r+0x54>
 8019732:	4c20      	ldr	r4, [pc, #128]	; (80197b4 <_malloc_r+0xb0>)
 8019734:	6823      	ldr	r3, [r4, #0]
 8019736:	b91b      	cbnz	r3, 8019740 <_malloc_r+0x3c>
 8019738:	4630      	mov	r0, r6
 801973a:	f000 fc57 	bl	8019fec <_sbrk_r>
 801973e:	6020      	str	r0, [r4, #0]
 8019740:	4629      	mov	r1, r5
 8019742:	4630      	mov	r0, r6
 8019744:	f000 fc52 	bl	8019fec <_sbrk_r>
 8019748:	1c43      	adds	r3, r0, #1
 801974a:	d124      	bne.n	8019796 <_malloc_r+0x92>
 801974c:	230c      	movs	r3, #12
 801974e:	6033      	str	r3, [r6, #0]
 8019750:	4630      	mov	r0, r6
 8019752:	f000 fec1 	bl	801a4d8 <__malloc_unlock>
 8019756:	e7e4      	b.n	8019722 <_malloc_r+0x1e>
 8019758:	680b      	ldr	r3, [r1, #0]
 801975a:	1b5b      	subs	r3, r3, r5
 801975c:	d418      	bmi.n	8019790 <_malloc_r+0x8c>
 801975e:	2b0b      	cmp	r3, #11
 8019760:	d90f      	bls.n	8019782 <_malloc_r+0x7e>
 8019762:	600b      	str	r3, [r1, #0]
 8019764:	50cd      	str	r5, [r1, r3]
 8019766:	18cc      	adds	r4, r1, r3
 8019768:	4630      	mov	r0, r6
 801976a:	f000 feb5 	bl	801a4d8 <__malloc_unlock>
 801976e:	f104 000b 	add.w	r0, r4, #11
 8019772:	1d23      	adds	r3, r4, #4
 8019774:	f020 0007 	bic.w	r0, r0, #7
 8019778:	1ac3      	subs	r3, r0, r3
 801977a:	d0d3      	beq.n	8019724 <_malloc_r+0x20>
 801977c:	425a      	negs	r2, r3
 801977e:	50e2      	str	r2, [r4, r3]
 8019780:	e7d0      	b.n	8019724 <_malloc_r+0x20>
 8019782:	428c      	cmp	r4, r1
 8019784:	684b      	ldr	r3, [r1, #4]
 8019786:	bf16      	itet	ne
 8019788:	6063      	strne	r3, [r4, #4]
 801978a:	6013      	streq	r3, [r2, #0]
 801978c:	460c      	movne	r4, r1
 801978e:	e7eb      	b.n	8019768 <_malloc_r+0x64>
 8019790:	460c      	mov	r4, r1
 8019792:	6849      	ldr	r1, [r1, #4]
 8019794:	e7cc      	b.n	8019730 <_malloc_r+0x2c>
 8019796:	1cc4      	adds	r4, r0, #3
 8019798:	f024 0403 	bic.w	r4, r4, #3
 801979c:	42a0      	cmp	r0, r4
 801979e:	d005      	beq.n	80197ac <_malloc_r+0xa8>
 80197a0:	1a21      	subs	r1, r4, r0
 80197a2:	4630      	mov	r0, r6
 80197a4:	f000 fc22 	bl	8019fec <_sbrk_r>
 80197a8:	3001      	adds	r0, #1
 80197aa:	d0cf      	beq.n	801974c <_malloc_r+0x48>
 80197ac:	6025      	str	r5, [r4, #0]
 80197ae:	e7db      	b.n	8019768 <_malloc_r+0x64>
 80197b0:	2000c940 	.word	0x2000c940
 80197b4:	2000c944 	.word	0x2000c944

080197b8 <__ssputs_r>:
 80197b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197bc:	688e      	ldr	r6, [r1, #8]
 80197be:	429e      	cmp	r6, r3
 80197c0:	4682      	mov	sl, r0
 80197c2:	460c      	mov	r4, r1
 80197c4:	4690      	mov	r8, r2
 80197c6:	4699      	mov	r9, r3
 80197c8:	d837      	bhi.n	801983a <__ssputs_r+0x82>
 80197ca:	898a      	ldrh	r2, [r1, #12]
 80197cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197d0:	d031      	beq.n	8019836 <__ssputs_r+0x7e>
 80197d2:	6825      	ldr	r5, [r4, #0]
 80197d4:	6909      	ldr	r1, [r1, #16]
 80197d6:	1a6f      	subs	r7, r5, r1
 80197d8:	6965      	ldr	r5, [r4, #20]
 80197da:	2302      	movs	r3, #2
 80197dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80197e4:	f109 0301 	add.w	r3, r9, #1
 80197e8:	443b      	add	r3, r7
 80197ea:	429d      	cmp	r5, r3
 80197ec:	bf38      	it	cc
 80197ee:	461d      	movcc	r5, r3
 80197f0:	0553      	lsls	r3, r2, #21
 80197f2:	d530      	bpl.n	8019856 <__ssputs_r+0x9e>
 80197f4:	4629      	mov	r1, r5
 80197f6:	f7ff ff85 	bl	8019704 <_malloc_r>
 80197fa:	4606      	mov	r6, r0
 80197fc:	b950      	cbnz	r0, 8019814 <__ssputs_r+0x5c>
 80197fe:	230c      	movs	r3, #12
 8019800:	f8ca 3000 	str.w	r3, [sl]
 8019804:	89a3      	ldrh	r3, [r4, #12]
 8019806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801980a:	81a3      	strh	r3, [r4, #12]
 801980c:	f04f 30ff 	mov.w	r0, #4294967295
 8019810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019814:	463a      	mov	r2, r7
 8019816:	6921      	ldr	r1, [r4, #16]
 8019818:	f7ff fe5f 	bl	80194da <memcpy>
 801981c:	89a3      	ldrh	r3, [r4, #12]
 801981e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019826:	81a3      	strh	r3, [r4, #12]
 8019828:	6126      	str	r6, [r4, #16]
 801982a:	6165      	str	r5, [r4, #20]
 801982c:	443e      	add	r6, r7
 801982e:	1bed      	subs	r5, r5, r7
 8019830:	6026      	str	r6, [r4, #0]
 8019832:	60a5      	str	r5, [r4, #8]
 8019834:	464e      	mov	r6, r9
 8019836:	454e      	cmp	r6, r9
 8019838:	d900      	bls.n	801983c <__ssputs_r+0x84>
 801983a:	464e      	mov	r6, r9
 801983c:	4632      	mov	r2, r6
 801983e:	4641      	mov	r1, r8
 8019840:	6820      	ldr	r0, [r4, #0]
 8019842:	f000 fe2f 	bl	801a4a4 <memmove>
 8019846:	68a3      	ldr	r3, [r4, #8]
 8019848:	1b9b      	subs	r3, r3, r6
 801984a:	60a3      	str	r3, [r4, #8]
 801984c:	6823      	ldr	r3, [r4, #0]
 801984e:	441e      	add	r6, r3
 8019850:	6026      	str	r6, [r4, #0]
 8019852:	2000      	movs	r0, #0
 8019854:	e7dc      	b.n	8019810 <__ssputs_r+0x58>
 8019856:	462a      	mov	r2, r5
 8019858:	f000 fe8e 	bl	801a578 <_realloc_r>
 801985c:	4606      	mov	r6, r0
 801985e:	2800      	cmp	r0, #0
 8019860:	d1e2      	bne.n	8019828 <__ssputs_r+0x70>
 8019862:	6921      	ldr	r1, [r4, #16]
 8019864:	4650      	mov	r0, sl
 8019866:	f000 fe39 	bl	801a4dc <_free_r>
 801986a:	e7c8      	b.n	80197fe <__ssputs_r+0x46>

0801986c <_svfiprintf_r>:
 801986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019870:	461d      	mov	r5, r3
 8019872:	898b      	ldrh	r3, [r1, #12]
 8019874:	061f      	lsls	r7, r3, #24
 8019876:	b09d      	sub	sp, #116	; 0x74
 8019878:	4680      	mov	r8, r0
 801987a:	460c      	mov	r4, r1
 801987c:	4616      	mov	r6, r2
 801987e:	d50f      	bpl.n	80198a0 <_svfiprintf_r+0x34>
 8019880:	690b      	ldr	r3, [r1, #16]
 8019882:	b96b      	cbnz	r3, 80198a0 <_svfiprintf_r+0x34>
 8019884:	2140      	movs	r1, #64	; 0x40
 8019886:	f7ff ff3d 	bl	8019704 <_malloc_r>
 801988a:	6020      	str	r0, [r4, #0]
 801988c:	6120      	str	r0, [r4, #16]
 801988e:	b928      	cbnz	r0, 801989c <_svfiprintf_r+0x30>
 8019890:	230c      	movs	r3, #12
 8019892:	f8c8 3000 	str.w	r3, [r8]
 8019896:	f04f 30ff 	mov.w	r0, #4294967295
 801989a:	e0c8      	b.n	8019a2e <_svfiprintf_r+0x1c2>
 801989c:	2340      	movs	r3, #64	; 0x40
 801989e:	6163      	str	r3, [r4, #20]
 80198a0:	2300      	movs	r3, #0
 80198a2:	9309      	str	r3, [sp, #36]	; 0x24
 80198a4:	2320      	movs	r3, #32
 80198a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198aa:	2330      	movs	r3, #48	; 0x30
 80198ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198b0:	9503      	str	r5, [sp, #12]
 80198b2:	f04f 0b01 	mov.w	fp, #1
 80198b6:	4637      	mov	r7, r6
 80198b8:	463d      	mov	r5, r7
 80198ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80198be:	b10b      	cbz	r3, 80198c4 <_svfiprintf_r+0x58>
 80198c0:	2b25      	cmp	r3, #37	; 0x25
 80198c2:	d13e      	bne.n	8019942 <_svfiprintf_r+0xd6>
 80198c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80198c8:	d00b      	beq.n	80198e2 <_svfiprintf_r+0x76>
 80198ca:	4653      	mov	r3, sl
 80198cc:	4632      	mov	r2, r6
 80198ce:	4621      	mov	r1, r4
 80198d0:	4640      	mov	r0, r8
 80198d2:	f7ff ff71 	bl	80197b8 <__ssputs_r>
 80198d6:	3001      	adds	r0, #1
 80198d8:	f000 80a4 	beq.w	8019a24 <_svfiprintf_r+0x1b8>
 80198dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198de:	4453      	add	r3, sl
 80198e0:	9309      	str	r3, [sp, #36]	; 0x24
 80198e2:	783b      	ldrb	r3, [r7, #0]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	f000 809d 	beq.w	8019a24 <_svfiprintf_r+0x1b8>
 80198ea:	2300      	movs	r3, #0
 80198ec:	f04f 32ff 	mov.w	r2, #4294967295
 80198f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198f4:	9304      	str	r3, [sp, #16]
 80198f6:	9307      	str	r3, [sp, #28]
 80198f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198fc:	931a      	str	r3, [sp, #104]	; 0x68
 80198fe:	462f      	mov	r7, r5
 8019900:	2205      	movs	r2, #5
 8019902:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019906:	4850      	ldr	r0, [pc, #320]	; (8019a48 <_svfiprintf_r+0x1dc>)
 8019908:	f7e6 fcf2 	bl	80002f0 <memchr>
 801990c:	9b04      	ldr	r3, [sp, #16]
 801990e:	b9d0      	cbnz	r0, 8019946 <_svfiprintf_r+0xda>
 8019910:	06d9      	lsls	r1, r3, #27
 8019912:	bf44      	itt	mi
 8019914:	2220      	movmi	r2, #32
 8019916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801991a:	071a      	lsls	r2, r3, #28
 801991c:	bf44      	itt	mi
 801991e:	222b      	movmi	r2, #43	; 0x2b
 8019920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019924:	782a      	ldrb	r2, [r5, #0]
 8019926:	2a2a      	cmp	r2, #42	; 0x2a
 8019928:	d015      	beq.n	8019956 <_svfiprintf_r+0xea>
 801992a:	9a07      	ldr	r2, [sp, #28]
 801992c:	462f      	mov	r7, r5
 801992e:	2000      	movs	r0, #0
 8019930:	250a      	movs	r5, #10
 8019932:	4639      	mov	r1, r7
 8019934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019938:	3b30      	subs	r3, #48	; 0x30
 801993a:	2b09      	cmp	r3, #9
 801993c:	d94d      	bls.n	80199da <_svfiprintf_r+0x16e>
 801993e:	b1b8      	cbz	r0, 8019970 <_svfiprintf_r+0x104>
 8019940:	e00f      	b.n	8019962 <_svfiprintf_r+0xf6>
 8019942:	462f      	mov	r7, r5
 8019944:	e7b8      	b.n	80198b8 <_svfiprintf_r+0x4c>
 8019946:	4a40      	ldr	r2, [pc, #256]	; (8019a48 <_svfiprintf_r+0x1dc>)
 8019948:	1a80      	subs	r0, r0, r2
 801994a:	fa0b f000 	lsl.w	r0, fp, r0
 801994e:	4318      	orrs	r0, r3
 8019950:	9004      	str	r0, [sp, #16]
 8019952:	463d      	mov	r5, r7
 8019954:	e7d3      	b.n	80198fe <_svfiprintf_r+0x92>
 8019956:	9a03      	ldr	r2, [sp, #12]
 8019958:	1d11      	adds	r1, r2, #4
 801995a:	6812      	ldr	r2, [r2, #0]
 801995c:	9103      	str	r1, [sp, #12]
 801995e:	2a00      	cmp	r2, #0
 8019960:	db01      	blt.n	8019966 <_svfiprintf_r+0xfa>
 8019962:	9207      	str	r2, [sp, #28]
 8019964:	e004      	b.n	8019970 <_svfiprintf_r+0x104>
 8019966:	4252      	negs	r2, r2
 8019968:	f043 0302 	orr.w	r3, r3, #2
 801996c:	9207      	str	r2, [sp, #28]
 801996e:	9304      	str	r3, [sp, #16]
 8019970:	783b      	ldrb	r3, [r7, #0]
 8019972:	2b2e      	cmp	r3, #46	; 0x2e
 8019974:	d10c      	bne.n	8019990 <_svfiprintf_r+0x124>
 8019976:	787b      	ldrb	r3, [r7, #1]
 8019978:	2b2a      	cmp	r3, #42	; 0x2a
 801997a:	d133      	bne.n	80199e4 <_svfiprintf_r+0x178>
 801997c:	9b03      	ldr	r3, [sp, #12]
 801997e:	1d1a      	adds	r2, r3, #4
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	9203      	str	r2, [sp, #12]
 8019984:	2b00      	cmp	r3, #0
 8019986:	bfb8      	it	lt
 8019988:	f04f 33ff 	movlt.w	r3, #4294967295
 801998c:	3702      	adds	r7, #2
 801998e:	9305      	str	r3, [sp, #20]
 8019990:	4d2e      	ldr	r5, [pc, #184]	; (8019a4c <_svfiprintf_r+0x1e0>)
 8019992:	7839      	ldrb	r1, [r7, #0]
 8019994:	2203      	movs	r2, #3
 8019996:	4628      	mov	r0, r5
 8019998:	f7e6 fcaa 	bl	80002f0 <memchr>
 801999c:	b138      	cbz	r0, 80199ae <_svfiprintf_r+0x142>
 801999e:	2340      	movs	r3, #64	; 0x40
 80199a0:	1b40      	subs	r0, r0, r5
 80199a2:	fa03 f000 	lsl.w	r0, r3, r0
 80199a6:	9b04      	ldr	r3, [sp, #16]
 80199a8:	4303      	orrs	r3, r0
 80199aa:	3701      	adds	r7, #1
 80199ac:	9304      	str	r3, [sp, #16]
 80199ae:	7839      	ldrb	r1, [r7, #0]
 80199b0:	4827      	ldr	r0, [pc, #156]	; (8019a50 <_svfiprintf_r+0x1e4>)
 80199b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199b6:	2206      	movs	r2, #6
 80199b8:	1c7e      	adds	r6, r7, #1
 80199ba:	f7e6 fc99 	bl	80002f0 <memchr>
 80199be:	2800      	cmp	r0, #0
 80199c0:	d038      	beq.n	8019a34 <_svfiprintf_r+0x1c8>
 80199c2:	4b24      	ldr	r3, [pc, #144]	; (8019a54 <_svfiprintf_r+0x1e8>)
 80199c4:	bb13      	cbnz	r3, 8019a0c <_svfiprintf_r+0x1a0>
 80199c6:	9b03      	ldr	r3, [sp, #12]
 80199c8:	3307      	adds	r3, #7
 80199ca:	f023 0307 	bic.w	r3, r3, #7
 80199ce:	3308      	adds	r3, #8
 80199d0:	9303      	str	r3, [sp, #12]
 80199d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d4:	444b      	add	r3, r9
 80199d6:	9309      	str	r3, [sp, #36]	; 0x24
 80199d8:	e76d      	b.n	80198b6 <_svfiprintf_r+0x4a>
 80199da:	fb05 3202 	mla	r2, r5, r2, r3
 80199de:	2001      	movs	r0, #1
 80199e0:	460f      	mov	r7, r1
 80199e2:	e7a6      	b.n	8019932 <_svfiprintf_r+0xc6>
 80199e4:	2300      	movs	r3, #0
 80199e6:	3701      	adds	r7, #1
 80199e8:	9305      	str	r3, [sp, #20]
 80199ea:	4619      	mov	r1, r3
 80199ec:	250a      	movs	r5, #10
 80199ee:	4638      	mov	r0, r7
 80199f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f4:	3a30      	subs	r2, #48	; 0x30
 80199f6:	2a09      	cmp	r2, #9
 80199f8:	d903      	bls.n	8019a02 <_svfiprintf_r+0x196>
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d0c8      	beq.n	8019990 <_svfiprintf_r+0x124>
 80199fe:	9105      	str	r1, [sp, #20]
 8019a00:	e7c6      	b.n	8019990 <_svfiprintf_r+0x124>
 8019a02:	fb05 2101 	mla	r1, r5, r1, r2
 8019a06:	2301      	movs	r3, #1
 8019a08:	4607      	mov	r7, r0
 8019a0a:	e7f0      	b.n	80199ee <_svfiprintf_r+0x182>
 8019a0c:	ab03      	add	r3, sp, #12
 8019a0e:	9300      	str	r3, [sp, #0]
 8019a10:	4622      	mov	r2, r4
 8019a12:	4b11      	ldr	r3, [pc, #68]	; (8019a58 <_svfiprintf_r+0x1ec>)
 8019a14:	a904      	add	r1, sp, #16
 8019a16:	4640      	mov	r0, r8
 8019a18:	f3af 8000 	nop.w
 8019a1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019a20:	4681      	mov	r9, r0
 8019a22:	d1d6      	bne.n	80199d2 <_svfiprintf_r+0x166>
 8019a24:	89a3      	ldrh	r3, [r4, #12]
 8019a26:	065b      	lsls	r3, r3, #25
 8019a28:	f53f af35 	bmi.w	8019896 <_svfiprintf_r+0x2a>
 8019a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a2e:	b01d      	add	sp, #116	; 0x74
 8019a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a34:	ab03      	add	r3, sp, #12
 8019a36:	9300      	str	r3, [sp, #0]
 8019a38:	4622      	mov	r2, r4
 8019a3a:	4b07      	ldr	r3, [pc, #28]	; (8019a58 <_svfiprintf_r+0x1ec>)
 8019a3c:	a904      	add	r1, sp, #16
 8019a3e:	4640      	mov	r0, r8
 8019a40:	f000 f9c2 	bl	8019dc8 <_printf_i>
 8019a44:	e7ea      	b.n	8019a1c <_svfiprintf_r+0x1b0>
 8019a46:	bf00      	nop
 8019a48:	0801d22c 	.word	0x0801d22c
 8019a4c:	0801d232 	.word	0x0801d232
 8019a50:	0801d236 	.word	0x0801d236
 8019a54:	00000000 	.word	0x00000000
 8019a58:	080197b9 	.word	0x080197b9

08019a5c <__sfputc_r>:
 8019a5c:	6893      	ldr	r3, [r2, #8]
 8019a5e:	3b01      	subs	r3, #1
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	b410      	push	{r4}
 8019a64:	6093      	str	r3, [r2, #8]
 8019a66:	da08      	bge.n	8019a7a <__sfputc_r+0x1e>
 8019a68:	6994      	ldr	r4, [r2, #24]
 8019a6a:	42a3      	cmp	r3, r4
 8019a6c:	db01      	blt.n	8019a72 <__sfputc_r+0x16>
 8019a6e:	290a      	cmp	r1, #10
 8019a70:	d103      	bne.n	8019a7a <__sfputc_r+0x1e>
 8019a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a76:	f000 bb0d 	b.w	801a094 <__swbuf_r>
 8019a7a:	6813      	ldr	r3, [r2, #0]
 8019a7c:	1c58      	adds	r0, r3, #1
 8019a7e:	6010      	str	r0, [r2, #0]
 8019a80:	7019      	strb	r1, [r3, #0]
 8019a82:	4608      	mov	r0, r1
 8019a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a88:	4770      	bx	lr

08019a8a <__sfputs_r>:
 8019a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a8c:	4606      	mov	r6, r0
 8019a8e:	460f      	mov	r7, r1
 8019a90:	4614      	mov	r4, r2
 8019a92:	18d5      	adds	r5, r2, r3
 8019a94:	42ac      	cmp	r4, r5
 8019a96:	d101      	bne.n	8019a9c <__sfputs_r+0x12>
 8019a98:	2000      	movs	r0, #0
 8019a9a:	e007      	b.n	8019aac <__sfputs_r+0x22>
 8019a9c:	463a      	mov	r2, r7
 8019a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019aa2:	4630      	mov	r0, r6
 8019aa4:	f7ff ffda 	bl	8019a5c <__sfputc_r>
 8019aa8:	1c43      	adds	r3, r0, #1
 8019aaa:	d1f3      	bne.n	8019a94 <__sfputs_r+0xa>
 8019aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ab0 <_vfiprintf_r>:
 8019ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab4:	460c      	mov	r4, r1
 8019ab6:	b09d      	sub	sp, #116	; 0x74
 8019ab8:	4617      	mov	r7, r2
 8019aba:	461d      	mov	r5, r3
 8019abc:	4606      	mov	r6, r0
 8019abe:	b118      	cbz	r0, 8019ac8 <_vfiprintf_r+0x18>
 8019ac0:	6983      	ldr	r3, [r0, #24]
 8019ac2:	b90b      	cbnz	r3, 8019ac8 <_vfiprintf_r+0x18>
 8019ac4:	f7ff fd94 	bl	80195f0 <__sinit>
 8019ac8:	4b7c      	ldr	r3, [pc, #496]	; (8019cbc <_vfiprintf_r+0x20c>)
 8019aca:	429c      	cmp	r4, r3
 8019acc:	d158      	bne.n	8019b80 <_vfiprintf_r+0xd0>
 8019ace:	6874      	ldr	r4, [r6, #4]
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	0718      	lsls	r0, r3, #28
 8019ad4:	d55e      	bpl.n	8019b94 <_vfiprintf_r+0xe4>
 8019ad6:	6923      	ldr	r3, [r4, #16]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d05b      	beq.n	8019b94 <_vfiprintf_r+0xe4>
 8019adc:	2300      	movs	r3, #0
 8019ade:	9309      	str	r3, [sp, #36]	; 0x24
 8019ae0:	2320      	movs	r3, #32
 8019ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ae6:	2330      	movs	r3, #48	; 0x30
 8019ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019aec:	9503      	str	r5, [sp, #12]
 8019aee:	f04f 0b01 	mov.w	fp, #1
 8019af2:	46b8      	mov	r8, r7
 8019af4:	4645      	mov	r5, r8
 8019af6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019afa:	b10b      	cbz	r3, 8019b00 <_vfiprintf_r+0x50>
 8019afc:	2b25      	cmp	r3, #37	; 0x25
 8019afe:	d154      	bne.n	8019baa <_vfiprintf_r+0xfa>
 8019b00:	ebb8 0a07 	subs.w	sl, r8, r7
 8019b04:	d00b      	beq.n	8019b1e <_vfiprintf_r+0x6e>
 8019b06:	4653      	mov	r3, sl
 8019b08:	463a      	mov	r2, r7
 8019b0a:	4621      	mov	r1, r4
 8019b0c:	4630      	mov	r0, r6
 8019b0e:	f7ff ffbc 	bl	8019a8a <__sfputs_r>
 8019b12:	3001      	adds	r0, #1
 8019b14:	f000 80c2 	beq.w	8019c9c <_vfiprintf_r+0x1ec>
 8019b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b1a:	4453      	add	r3, sl
 8019b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b1e:	f898 3000 	ldrb.w	r3, [r8]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f000 80ba 	beq.w	8019c9c <_vfiprintf_r+0x1ec>
 8019b28:	2300      	movs	r3, #0
 8019b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8019b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b32:	9304      	str	r3, [sp, #16]
 8019b34:	9307      	str	r3, [sp, #28]
 8019b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8019b3c:	46a8      	mov	r8, r5
 8019b3e:	2205      	movs	r2, #5
 8019b40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019b44:	485e      	ldr	r0, [pc, #376]	; (8019cc0 <_vfiprintf_r+0x210>)
 8019b46:	f7e6 fbd3 	bl	80002f0 <memchr>
 8019b4a:	9b04      	ldr	r3, [sp, #16]
 8019b4c:	bb78      	cbnz	r0, 8019bae <_vfiprintf_r+0xfe>
 8019b4e:	06d9      	lsls	r1, r3, #27
 8019b50:	bf44      	itt	mi
 8019b52:	2220      	movmi	r2, #32
 8019b54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b58:	071a      	lsls	r2, r3, #28
 8019b5a:	bf44      	itt	mi
 8019b5c:	222b      	movmi	r2, #43	; 0x2b
 8019b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b62:	782a      	ldrb	r2, [r5, #0]
 8019b64:	2a2a      	cmp	r2, #42	; 0x2a
 8019b66:	d02a      	beq.n	8019bbe <_vfiprintf_r+0x10e>
 8019b68:	9a07      	ldr	r2, [sp, #28]
 8019b6a:	46a8      	mov	r8, r5
 8019b6c:	2000      	movs	r0, #0
 8019b6e:	250a      	movs	r5, #10
 8019b70:	4641      	mov	r1, r8
 8019b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b76:	3b30      	subs	r3, #48	; 0x30
 8019b78:	2b09      	cmp	r3, #9
 8019b7a:	d969      	bls.n	8019c50 <_vfiprintf_r+0x1a0>
 8019b7c:	b360      	cbz	r0, 8019bd8 <_vfiprintf_r+0x128>
 8019b7e:	e024      	b.n	8019bca <_vfiprintf_r+0x11a>
 8019b80:	4b50      	ldr	r3, [pc, #320]	; (8019cc4 <_vfiprintf_r+0x214>)
 8019b82:	429c      	cmp	r4, r3
 8019b84:	d101      	bne.n	8019b8a <_vfiprintf_r+0xda>
 8019b86:	68b4      	ldr	r4, [r6, #8]
 8019b88:	e7a2      	b.n	8019ad0 <_vfiprintf_r+0x20>
 8019b8a:	4b4f      	ldr	r3, [pc, #316]	; (8019cc8 <_vfiprintf_r+0x218>)
 8019b8c:	429c      	cmp	r4, r3
 8019b8e:	bf08      	it	eq
 8019b90:	68f4      	ldreq	r4, [r6, #12]
 8019b92:	e79d      	b.n	8019ad0 <_vfiprintf_r+0x20>
 8019b94:	4621      	mov	r1, r4
 8019b96:	4630      	mov	r0, r6
 8019b98:	f000 fae0 	bl	801a15c <__swsetup_r>
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	d09d      	beq.n	8019adc <_vfiprintf_r+0x2c>
 8019ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ba4:	b01d      	add	sp, #116	; 0x74
 8019ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019baa:	46a8      	mov	r8, r5
 8019bac:	e7a2      	b.n	8019af4 <_vfiprintf_r+0x44>
 8019bae:	4a44      	ldr	r2, [pc, #272]	; (8019cc0 <_vfiprintf_r+0x210>)
 8019bb0:	1a80      	subs	r0, r0, r2
 8019bb2:	fa0b f000 	lsl.w	r0, fp, r0
 8019bb6:	4318      	orrs	r0, r3
 8019bb8:	9004      	str	r0, [sp, #16]
 8019bba:	4645      	mov	r5, r8
 8019bbc:	e7be      	b.n	8019b3c <_vfiprintf_r+0x8c>
 8019bbe:	9a03      	ldr	r2, [sp, #12]
 8019bc0:	1d11      	adds	r1, r2, #4
 8019bc2:	6812      	ldr	r2, [r2, #0]
 8019bc4:	9103      	str	r1, [sp, #12]
 8019bc6:	2a00      	cmp	r2, #0
 8019bc8:	db01      	blt.n	8019bce <_vfiprintf_r+0x11e>
 8019bca:	9207      	str	r2, [sp, #28]
 8019bcc:	e004      	b.n	8019bd8 <_vfiprintf_r+0x128>
 8019bce:	4252      	negs	r2, r2
 8019bd0:	f043 0302 	orr.w	r3, r3, #2
 8019bd4:	9207      	str	r2, [sp, #28]
 8019bd6:	9304      	str	r3, [sp, #16]
 8019bd8:	f898 3000 	ldrb.w	r3, [r8]
 8019bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8019bde:	d10e      	bne.n	8019bfe <_vfiprintf_r+0x14e>
 8019be0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019be4:	2b2a      	cmp	r3, #42	; 0x2a
 8019be6:	d138      	bne.n	8019c5a <_vfiprintf_r+0x1aa>
 8019be8:	9b03      	ldr	r3, [sp, #12]
 8019bea:	1d1a      	adds	r2, r3, #4
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	9203      	str	r2, [sp, #12]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	bfb8      	it	lt
 8019bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bf8:	f108 0802 	add.w	r8, r8, #2
 8019bfc:	9305      	str	r3, [sp, #20]
 8019bfe:	4d33      	ldr	r5, [pc, #204]	; (8019ccc <_vfiprintf_r+0x21c>)
 8019c00:	f898 1000 	ldrb.w	r1, [r8]
 8019c04:	2203      	movs	r2, #3
 8019c06:	4628      	mov	r0, r5
 8019c08:	f7e6 fb72 	bl	80002f0 <memchr>
 8019c0c:	b140      	cbz	r0, 8019c20 <_vfiprintf_r+0x170>
 8019c0e:	2340      	movs	r3, #64	; 0x40
 8019c10:	1b40      	subs	r0, r0, r5
 8019c12:	fa03 f000 	lsl.w	r0, r3, r0
 8019c16:	9b04      	ldr	r3, [sp, #16]
 8019c18:	4303      	orrs	r3, r0
 8019c1a:	f108 0801 	add.w	r8, r8, #1
 8019c1e:	9304      	str	r3, [sp, #16]
 8019c20:	f898 1000 	ldrb.w	r1, [r8]
 8019c24:	482a      	ldr	r0, [pc, #168]	; (8019cd0 <_vfiprintf_r+0x220>)
 8019c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c2a:	2206      	movs	r2, #6
 8019c2c:	f108 0701 	add.w	r7, r8, #1
 8019c30:	f7e6 fb5e 	bl	80002f0 <memchr>
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d037      	beq.n	8019ca8 <_vfiprintf_r+0x1f8>
 8019c38:	4b26      	ldr	r3, [pc, #152]	; (8019cd4 <_vfiprintf_r+0x224>)
 8019c3a:	bb1b      	cbnz	r3, 8019c84 <_vfiprintf_r+0x1d4>
 8019c3c:	9b03      	ldr	r3, [sp, #12]
 8019c3e:	3307      	adds	r3, #7
 8019c40:	f023 0307 	bic.w	r3, r3, #7
 8019c44:	3308      	adds	r3, #8
 8019c46:	9303      	str	r3, [sp, #12]
 8019c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c4a:	444b      	add	r3, r9
 8019c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c4e:	e750      	b.n	8019af2 <_vfiprintf_r+0x42>
 8019c50:	fb05 3202 	mla	r2, r5, r2, r3
 8019c54:	2001      	movs	r0, #1
 8019c56:	4688      	mov	r8, r1
 8019c58:	e78a      	b.n	8019b70 <_vfiprintf_r+0xc0>
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	f108 0801 	add.w	r8, r8, #1
 8019c60:	9305      	str	r3, [sp, #20]
 8019c62:	4619      	mov	r1, r3
 8019c64:	250a      	movs	r5, #10
 8019c66:	4640      	mov	r0, r8
 8019c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c6c:	3a30      	subs	r2, #48	; 0x30
 8019c6e:	2a09      	cmp	r2, #9
 8019c70:	d903      	bls.n	8019c7a <_vfiprintf_r+0x1ca>
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d0c3      	beq.n	8019bfe <_vfiprintf_r+0x14e>
 8019c76:	9105      	str	r1, [sp, #20]
 8019c78:	e7c1      	b.n	8019bfe <_vfiprintf_r+0x14e>
 8019c7a:	fb05 2101 	mla	r1, r5, r1, r2
 8019c7e:	2301      	movs	r3, #1
 8019c80:	4680      	mov	r8, r0
 8019c82:	e7f0      	b.n	8019c66 <_vfiprintf_r+0x1b6>
 8019c84:	ab03      	add	r3, sp, #12
 8019c86:	9300      	str	r3, [sp, #0]
 8019c88:	4622      	mov	r2, r4
 8019c8a:	4b13      	ldr	r3, [pc, #76]	; (8019cd8 <_vfiprintf_r+0x228>)
 8019c8c:	a904      	add	r1, sp, #16
 8019c8e:	4630      	mov	r0, r6
 8019c90:	f3af 8000 	nop.w
 8019c94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019c98:	4681      	mov	r9, r0
 8019c9a:	d1d5      	bne.n	8019c48 <_vfiprintf_r+0x198>
 8019c9c:	89a3      	ldrh	r3, [r4, #12]
 8019c9e:	065b      	lsls	r3, r3, #25
 8019ca0:	f53f af7e 	bmi.w	8019ba0 <_vfiprintf_r+0xf0>
 8019ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ca6:	e77d      	b.n	8019ba4 <_vfiprintf_r+0xf4>
 8019ca8:	ab03      	add	r3, sp, #12
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	4622      	mov	r2, r4
 8019cae:	4b0a      	ldr	r3, [pc, #40]	; (8019cd8 <_vfiprintf_r+0x228>)
 8019cb0:	a904      	add	r1, sp, #16
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f000 f888 	bl	8019dc8 <_printf_i>
 8019cb8:	e7ec      	b.n	8019c94 <_vfiprintf_r+0x1e4>
 8019cba:	bf00      	nop
 8019cbc:	0801d1ec 	.word	0x0801d1ec
 8019cc0:	0801d22c 	.word	0x0801d22c
 8019cc4:	0801d20c 	.word	0x0801d20c
 8019cc8:	0801d1cc 	.word	0x0801d1cc
 8019ccc:	0801d232 	.word	0x0801d232
 8019cd0:	0801d236 	.word	0x0801d236
 8019cd4:	00000000 	.word	0x00000000
 8019cd8:	08019a8b 	.word	0x08019a8b

08019cdc <_printf_common>:
 8019cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ce0:	4691      	mov	r9, r2
 8019ce2:	461f      	mov	r7, r3
 8019ce4:	688a      	ldr	r2, [r1, #8]
 8019ce6:	690b      	ldr	r3, [r1, #16]
 8019ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cec:	4293      	cmp	r3, r2
 8019cee:	bfb8      	it	lt
 8019cf0:	4613      	movlt	r3, r2
 8019cf2:	f8c9 3000 	str.w	r3, [r9]
 8019cf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019cfa:	4606      	mov	r6, r0
 8019cfc:	460c      	mov	r4, r1
 8019cfe:	b112      	cbz	r2, 8019d06 <_printf_common+0x2a>
 8019d00:	3301      	adds	r3, #1
 8019d02:	f8c9 3000 	str.w	r3, [r9]
 8019d06:	6823      	ldr	r3, [r4, #0]
 8019d08:	0699      	lsls	r1, r3, #26
 8019d0a:	bf42      	ittt	mi
 8019d0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019d10:	3302      	addmi	r3, #2
 8019d12:	f8c9 3000 	strmi.w	r3, [r9]
 8019d16:	6825      	ldr	r5, [r4, #0]
 8019d18:	f015 0506 	ands.w	r5, r5, #6
 8019d1c:	d107      	bne.n	8019d2e <_printf_common+0x52>
 8019d1e:	f104 0a19 	add.w	sl, r4, #25
 8019d22:	68e3      	ldr	r3, [r4, #12]
 8019d24:	f8d9 2000 	ldr.w	r2, [r9]
 8019d28:	1a9b      	subs	r3, r3, r2
 8019d2a:	42ab      	cmp	r3, r5
 8019d2c:	dc28      	bgt.n	8019d80 <_printf_common+0xa4>
 8019d2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019d32:	6822      	ldr	r2, [r4, #0]
 8019d34:	3300      	adds	r3, #0
 8019d36:	bf18      	it	ne
 8019d38:	2301      	movne	r3, #1
 8019d3a:	0692      	lsls	r2, r2, #26
 8019d3c:	d42d      	bmi.n	8019d9a <_printf_common+0xbe>
 8019d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d42:	4639      	mov	r1, r7
 8019d44:	4630      	mov	r0, r6
 8019d46:	47c0      	blx	r8
 8019d48:	3001      	adds	r0, #1
 8019d4a:	d020      	beq.n	8019d8e <_printf_common+0xb2>
 8019d4c:	6823      	ldr	r3, [r4, #0]
 8019d4e:	68e5      	ldr	r5, [r4, #12]
 8019d50:	f8d9 2000 	ldr.w	r2, [r9]
 8019d54:	f003 0306 	and.w	r3, r3, #6
 8019d58:	2b04      	cmp	r3, #4
 8019d5a:	bf08      	it	eq
 8019d5c:	1aad      	subeq	r5, r5, r2
 8019d5e:	68a3      	ldr	r3, [r4, #8]
 8019d60:	6922      	ldr	r2, [r4, #16]
 8019d62:	bf0c      	ite	eq
 8019d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d68:	2500      	movne	r5, #0
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	bfc4      	itt	gt
 8019d6e:	1a9b      	subgt	r3, r3, r2
 8019d70:	18ed      	addgt	r5, r5, r3
 8019d72:	f04f 0900 	mov.w	r9, #0
 8019d76:	341a      	adds	r4, #26
 8019d78:	454d      	cmp	r5, r9
 8019d7a:	d11a      	bne.n	8019db2 <_printf_common+0xd6>
 8019d7c:	2000      	movs	r0, #0
 8019d7e:	e008      	b.n	8019d92 <_printf_common+0xb6>
 8019d80:	2301      	movs	r3, #1
 8019d82:	4652      	mov	r2, sl
 8019d84:	4639      	mov	r1, r7
 8019d86:	4630      	mov	r0, r6
 8019d88:	47c0      	blx	r8
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	d103      	bne.n	8019d96 <_printf_common+0xba>
 8019d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d96:	3501      	adds	r5, #1
 8019d98:	e7c3      	b.n	8019d22 <_printf_common+0x46>
 8019d9a:	18e1      	adds	r1, r4, r3
 8019d9c:	1c5a      	adds	r2, r3, #1
 8019d9e:	2030      	movs	r0, #48	; 0x30
 8019da0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019da4:	4422      	add	r2, r4
 8019da6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019daa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019dae:	3302      	adds	r3, #2
 8019db0:	e7c5      	b.n	8019d3e <_printf_common+0x62>
 8019db2:	2301      	movs	r3, #1
 8019db4:	4622      	mov	r2, r4
 8019db6:	4639      	mov	r1, r7
 8019db8:	4630      	mov	r0, r6
 8019dba:	47c0      	blx	r8
 8019dbc:	3001      	adds	r0, #1
 8019dbe:	d0e6      	beq.n	8019d8e <_printf_common+0xb2>
 8019dc0:	f109 0901 	add.w	r9, r9, #1
 8019dc4:	e7d8      	b.n	8019d78 <_printf_common+0x9c>
	...

08019dc8 <_printf_i>:
 8019dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019dd0:	460c      	mov	r4, r1
 8019dd2:	7e09      	ldrb	r1, [r1, #24]
 8019dd4:	b085      	sub	sp, #20
 8019dd6:	296e      	cmp	r1, #110	; 0x6e
 8019dd8:	4617      	mov	r7, r2
 8019dda:	4606      	mov	r6, r0
 8019ddc:	4698      	mov	r8, r3
 8019dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019de0:	f000 80b3 	beq.w	8019f4a <_printf_i+0x182>
 8019de4:	d822      	bhi.n	8019e2c <_printf_i+0x64>
 8019de6:	2963      	cmp	r1, #99	; 0x63
 8019de8:	d036      	beq.n	8019e58 <_printf_i+0x90>
 8019dea:	d80a      	bhi.n	8019e02 <_printf_i+0x3a>
 8019dec:	2900      	cmp	r1, #0
 8019dee:	f000 80b9 	beq.w	8019f64 <_printf_i+0x19c>
 8019df2:	2958      	cmp	r1, #88	; 0x58
 8019df4:	f000 8083 	beq.w	8019efe <_printf_i+0x136>
 8019df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019dfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019e00:	e032      	b.n	8019e68 <_printf_i+0xa0>
 8019e02:	2964      	cmp	r1, #100	; 0x64
 8019e04:	d001      	beq.n	8019e0a <_printf_i+0x42>
 8019e06:	2969      	cmp	r1, #105	; 0x69
 8019e08:	d1f6      	bne.n	8019df8 <_printf_i+0x30>
 8019e0a:	6820      	ldr	r0, [r4, #0]
 8019e0c:	6813      	ldr	r3, [r2, #0]
 8019e0e:	0605      	lsls	r5, r0, #24
 8019e10:	f103 0104 	add.w	r1, r3, #4
 8019e14:	d52a      	bpl.n	8019e6c <_printf_i+0xa4>
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	6011      	str	r1, [r2, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	da03      	bge.n	8019e26 <_printf_i+0x5e>
 8019e1e:	222d      	movs	r2, #45	; 0x2d
 8019e20:	425b      	negs	r3, r3
 8019e22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019e26:	486f      	ldr	r0, [pc, #444]	; (8019fe4 <_printf_i+0x21c>)
 8019e28:	220a      	movs	r2, #10
 8019e2a:	e039      	b.n	8019ea0 <_printf_i+0xd8>
 8019e2c:	2973      	cmp	r1, #115	; 0x73
 8019e2e:	f000 809d 	beq.w	8019f6c <_printf_i+0x1a4>
 8019e32:	d808      	bhi.n	8019e46 <_printf_i+0x7e>
 8019e34:	296f      	cmp	r1, #111	; 0x6f
 8019e36:	d020      	beq.n	8019e7a <_printf_i+0xb2>
 8019e38:	2970      	cmp	r1, #112	; 0x70
 8019e3a:	d1dd      	bne.n	8019df8 <_printf_i+0x30>
 8019e3c:	6823      	ldr	r3, [r4, #0]
 8019e3e:	f043 0320 	orr.w	r3, r3, #32
 8019e42:	6023      	str	r3, [r4, #0]
 8019e44:	e003      	b.n	8019e4e <_printf_i+0x86>
 8019e46:	2975      	cmp	r1, #117	; 0x75
 8019e48:	d017      	beq.n	8019e7a <_printf_i+0xb2>
 8019e4a:	2978      	cmp	r1, #120	; 0x78
 8019e4c:	d1d4      	bne.n	8019df8 <_printf_i+0x30>
 8019e4e:	2378      	movs	r3, #120	; 0x78
 8019e50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019e54:	4864      	ldr	r0, [pc, #400]	; (8019fe8 <_printf_i+0x220>)
 8019e56:	e055      	b.n	8019f04 <_printf_i+0x13c>
 8019e58:	6813      	ldr	r3, [r2, #0]
 8019e5a:	1d19      	adds	r1, r3, #4
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	6011      	str	r1, [r2, #0]
 8019e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e68:	2301      	movs	r3, #1
 8019e6a:	e08c      	b.n	8019f86 <_printf_i+0x1be>
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	6011      	str	r1, [r2, #0]
 8019e70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e74:	bf18      	it	ne
 8019e76:	b21b      	sxthne	r3, r3
 8019e78:	e7cf      	b.n	8019e1a <_printf_i+0x52>
 8019e7a:	6813      	ldr	r3, [r2, #0]
 8019e7c:	6825      	ldr	r5, [r4, #0]
 8019e7e:	1d18      	adds	r0, r3, #4
 8019e80:	6010      	str	r0, [r2, #0]
 8019e82:	0628      	lsls	r0, r5, #24
 8019e84:	d501      	bpl.n	8019e8a <_printf_i+0xc2>
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	e002      	b.n	8019e90 <_printf_i+0xc8>
 8019e8a:	0668      	lsls	r0, r5, #25
 8019e8c:	d5fb      	bpl.n	8019e86 <_printf_i+0xbe>
 8019e8e:	881b      	ldrh	r3, [r3, #0]
 8019e90:	4854      	ldr	r0, [pc, #336]	; (8019fe4 <_printf_i+0x21c>)
 8019e92:	296f      	cmp	r1, #111	; 0x6f
 8019e94:	bf14      	ite	ne
 8019e96:	220a      	movne	r2, #10
 8019e98:	2208      	moveq	r2, #8
 8019e9a:	2100      	movs	r1, #0
 8019e9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019ea0:	6865      	ldr	r5, [r4, #4]
 8019ea2:	60a5      	str	r5, [r4, #8]
 8019ea4:	2d00      	cmp	r5, #0
 8019ea6:	f2c0 8095 	blt.w	8019fd4 <_printf_i+0x20c>
 8019eaa:	6821      	ldr	r1, [r4, #0]
 8019eac:	f021 0104 	bic.w	r1, r1, #4
 8019eb0:	6021      	str	r1, [r4, #0]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d13d      	bne.n	8019f32 <_printf_i+0x16a>
 8019eb6:	2d00      	cmp	r5, #0
 8019eb8:	f040 808e 	bne.w	8019fd8 <_printf_i+0x210>
 8019ebc:	4665      	mov	r5, ip
 8019ebe:	2a08      	cmp	r2, #8
 8019ec0:	d10b      	bne.n	8019eda <_printf_i+0x112>
 8019ec2:	6823      	ldr	r3, [r4, #0]
 8019ec4:	07db      	lsls	r3, r3, #31
 8019ec6:	d508      	bpl.n	8019eda <_printf_i+0x112>
 8019ec8:	6923      	ldr	r3, [r4, #16]
 8019eca:	6862      	ldr	r2, [r4, #4]
 8019ecc:	429a      	cmp	r2, r3
 8019ece:	bfde      	ittt	le
 8019ed0:	2330      	movle	r3, #48	; 0x30
 8019ed2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ed6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019eda:	ebac 0305 	sub.w	r3, ip, r5
 8019ede:	6123      	str	r3, [r4, #16]
 8019ee0:	f8cd 8000 	str.w	r8, [sp]
 8019ee4:	463b      	mov	r3, r7
 8019ee6:	aa03      	add	r2, sp, #12
 8019ee8:	4621      	mov	r1, r4
 8019eea:	4630      	mov	r0, r6
 8019eec:	f7ff fef6 	bl	8019cdc <_printf_common>
 8019ef0:	3001      	adds	r0, #1
 8019ef2:	d14d      	bne.n	8019f90 <_printf_i+0x1c8>
 8019ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ef8:	b005      	add	sp, #20
 8019efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019efe:	4839      	ldr	r0, [pc, #228]	; (8019fe4 <_printf_i+0x21c>)
 8019f00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019f04:	6813      	ldr	r3, [r2, #0]
 8019f06:	6821      	ldr	r1, [r4, #0]
 8019f08:	1d1d      	adds	r5, r3, #4
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	6015      	str	r5, [r2, #0]
 8019f0e:	060a      	lsls	r2, r1, #24
 8019f10:	d50b      	bpl.n	8019f2a <_printf_i+0x162>
 8019f12:	07ca      	lsls	r2, r1, #31
 8019f14:	bf44      	itt	mi
 8019f16:	f041 0120 	orrmi.w	r1, r1, #32
 8019f1a:	6021      	strmi	r1, [r4, #0]
 8019f1c:	b91b      	cbnz	r3, 8019f26 <_printf_i+0x15e>
 8019f1e:	6822      	ldr	r2, [r4, #0]
 8019f20:	f022 0220 	bic.w	r2, r2, #32
 8019f24:	6022      	str	r2, [r4, #0]
 8019f26:	2210      	movs	r2, #16
 8019f28:	e7b7      	b.n	8019e9a <_printf_i+0xd2>
 8019f2a:	064d      	lsls	r5, r1, #25
 8019f2c:	bf48      	it	mi
 8019f2e:	b29b      	uxthmi	r3, r3
 8019f30:	e7ef      	b.n	8019f12 <_printf_i+0x14a>
 8019f32:	4665      	mov	r5, ip
 8019f34:	fbb3 f1f2 	udiv	r1, r3, r2
 8019f38:	fb02 3311 	mls	r3, r2, r1, r3
 8019f3c:	5cc3      	ldrb	r3, [r0, r3]
 8019f3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019f42:	460b      	mov	r3, r1
 8019f44:	2900      	cmp	r1, #0
 8019f46:	d1f5      	bne.n	8019f34 <_printf_i+0x16c>
 8019f48:	e7b9      	b.n	8019ebe <_printf_i+0xf6>
 8019f4a:	6813      	ldr	r3, [r2, #0]
 8019f4c:	6825      	ldr	r5, [r4, #0]
 8019f4e:	6961      	ldr	r1, [r4, #20]
 8019f50:	1d18      	adds	r0, r3, #4
 8019f52:	6010      	str	r0, [r2, #0]
 8019f54:	0628      	lsls	r0, r5, #24
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	d501      	bpl.n	8019f5e <_printf_i+0x196>
 8019f5a:	6019      	str	r1, [r3, #0]
 8019f5c:	e002      	b.n	8019f64 <_printf_i+0x19c>
 8019f5e:	066a      	lsls	r2, r5, #25
 8019f60:	d5fb      	bpl.n	8019f5a <_printf_i+0x192>
 8019f62:	8019      	strh	r1, [r3, #0]
 8019f64:	2300      	movs	r3, #0
 8019f66:	6123      	str	r3, [r4, #16]
 8019f68:	4665      	mov	r5, ip
 8019f6a:	e7b9      	b.n	8019ee0 <_printf_i+0x118>
 8019f6c:	6813      	ldr	r3, [r2, #0]
 8019f6e:	1d19      	adds	r1, r3, #4
 8019f70:	6011      	str	r1, [r2, #0]
 8019f72:	681d      	ldr	r5, [r3, #0]
 8019f74:	6862      	ldr	r2, [r4, #4]
 8019f76:	2100      	movs	r1, #0
 8019f78:	4628      	mov	r0, r5
 8019f7a:	f7e6 f9b9 	bl	80002f0 <memchr>
 8019f7e:	b108      	cbz	r0, 8019f84 <_printf_i+0x1bc>
 8019f80:	1b40      	subs	r0, r0, r5
 8019f82:	6060      	str	r0, [r4, #4]
 8019f84:	6863      	ldr	r3, [r4, #4]
 8019f86:	6123      	str	r3, [r4, #16]
 8019f88:	2300      	movs	r3, #0
 8019f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f8e:	e7a7      	b.n	8019ee0 <_printf_i+0x118>
 8019f90:	6923      	ldr	r3, [r4, #16]
 8019f92:	462a      	mov	r2, r5
 8019f94:	4639      	mov	r1, r7
 8019f96:	4630      	mov	r0, r6
 8019f98:	47c0      	blx	r8
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	d0aa      	beq.n	8019ef4 <_printf_i+0x12c>
 8019f9e:	6823      	ldr	r3, [r4, #0]
 8019fa0:	079b      	lsls	r3, r3, #30
 8019fa2:	d413      	bmi.n	8019fcc <_printf_i+0x204>
 8019fa4:	68e0      	ldr	r0, [r4, #12]
 8019fa6:	9b03      	ldr	r3, [sp, #12]
 8019fa8:	4298      	cmp	r0, r3
 8019faa:	bfb8      	it	lt
 8019fac:	4618      	movlt	r0, r3
 8019fae:	e7a3      	b.n	8019ef8 <_printf_i+0x130>
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	464a      	mov	r2, r9
 8019fb4:	4639      	mov	r1, r7
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	47c0      	blx	r8
 8019fba:	3001      	adds	r0, #1
 8019fbc:	d09a      	beq.n	8019ef4 <_printf_i+0x12c>
 8019fbe:	3501      	adds	r5, #1
 8019fc0:	68e3      	ldr	r3, [r4, #12]
 8019fc2:	9a03      	ldr	r2, [sp, #12]
 8019fc4:	1a9b      	subs	r3, r3, r2
 8019fc6:	42ab      	cmp	r3, r5
 8019fc8:	dcf2      	bgt.n	8019fb0 <_printf_i+0x1e8>
 8019fca:	e7eb      	b.n	8019fa4 <_printf_i+0x1dc>
 8019fcc:	2500      	movs	r5, #0
 8019fce:	f104 0919 	add.w	r9, r4, #25
 8019fd2:	e7f5      	b.n	8019fc0 <_printf_i+0x1f8>
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d1ac      	bne.n	8019f32 <_printf_i+0x16a>
 8019fd8:	7803      	ldrb	r3, [r0, #0]
 8019fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019fde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fe2:	e76c      	b.n	8019ebe <_printf_i+0xf6>
 8019fe4:	0801d23d 	.word	0x0801d23d
 8019fe8:	0801d24e 	.word	0x0801d24e

08019fec <_sbrk_r>:
 8019fec:	b538      	push	{r3, r4, r5, lr}
 8019fee:	4c06      	ldr	r4, [pc, #24]	; (801a008 <_sbrk_r+0x1c>)
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	4608      	mov	r0, r1
 8019ff6:	6023      	str	r3, [r4, #0]
 8019ff8:	f7e7 f9ca 	bl	8001390 <_sbrk>
 8019ffc:	1c43      	adds	r3, r0, #1
 8019ffe:	d102      	bne.n	801a006 <_sbrk_r+0x1a>
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	b103      	cbz	r3, 801a006 <_sbrk_r+0x1a>
 801a004:	602b      	str	r3, [r5, #0]
 801a006:	bd38      	pop	{r3, r4, r5, pc}
 801a008:	200101e8 	.word	0x200101e8

0801a00c <__sread>:
 801a00c:	b510      	push	{r4, lr}
 801a00e:	460c      	mov	r4, r1
 801a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a014:	f000 fad6 	bl	801a5c4 <_read_r>
 801a018:	2800      	cmp	r0, #0
 801a01a:	bfab      	itete	ge
 801a01c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a01e:	89a3      	ldrhlt	r3, [r4, #12]
 801a020:	181b      	addge	r3, r3, r0
 801a022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a026:	bfac      	ite	ge
 801a028:	6563      	strge	r3, [r4, #84]	; 0x54
 801a02a:	81a3      	strhlt	r3, [r4, #12]
 801a02c:	bd10      	pop	{r4, pc}

0801a02e <__swrite>:
 801a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a032:	461f      	mov	r7, r3
 801a034:	898b      	ldrh	r3, [r1, #12]
 801a036:	05db      	lsls	r3, r3, #23
 801a038:	4605      	mov	r5, r0
 801a03a:	460c      	mov	r4, r1
 801a03c:	4616      	mov	r6, r2
 801a03e:	d505      	bpl.n	801a04c <__swrite+0x1e>
 801a040:	2302      	movs	r3, #2
 801a042:	2200      	movs	r2, #0
 801a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a048:	f000 f9b6 	bl	801a3b8 <_lseek_r>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a056:	81a3      	strh	r3, [r4, #12]
 801a058:	4632      	mov	r2, r6
 801a05a:	463b      	mov	r3, r7
 801a05c:	4628      	mov	r0, r5
 801a05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a062:	f000 b869 	b.w	801a138 <_write_r>

0801a066 <__sseek>:
 801a066:	b510      	push	{r4, lr}
 801a068:	460c      	mov	r4, r1
 801a06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a06e:	f000 f9a3 	bl	801a3b8 <_lseek_r>
 801a072:	1c43      	adds	r3, r0, #1
 801a074:	89a3      	ldrh	r3, [r4, #12]
 801a076:	bf15      	itete	ne
 801a078:	6560      	strne	r0, [r4, #84]	; 0x54
 801a07a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a07e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a082:	81a3      	strheq	r3, [r4, #12]
 801a084:	bf18      	it	ne
 801a086:	81a3      	strhne	r3, [r4, #12]
 801a088:	bd10      	pop	{r4, pc}

0801a08a <__sclose>:
 801a08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a08e:	f000 b8d3 	b.w	801a238 <_close_r>
	...

0801a094 <__swbuf_r>:
 801a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a096:	460e      	mov	r6, r1
 801a098:	4614      	mov	r4, r2
 801a09a:	4605      	mov	r5, r0
 801a09c:	b118      	cbz	r0, 801a0a6 <__swbuf_r+0x12>
 801a09e:	6983      	ldr	r3, [r0, #24]
 801a0a0:	b90b      	cbnz	r3, 801a0a6 <__swbuf_r+0x12>
 801a0a2:	f7ff faa5 	bl	80195f0 <__sinit>
 801a0a6:	4b21      	ldr	r3, [pc, #132]	; (801a12c <__swbuf_r+0x98>)
 801a0a8:	429c      	cmp	r4, r3
 801a0aa:	d12a      	bne.n	801a102 <__swbuf_r+0x6e>
 801a0ac:	686c      	ldr	r4, [r5, #4]
 801a0ae:	69a3      	ldr	r3, [r4, #24]
 801a0b0:	60a3      	str	r3, [r4, #8]
 801a0b2:	89a3      	ldrh	r3, [r4, #12]
 801a0b4:	071a      	lsls	r2, r3, #28
 801a0b6:	d52e      	bpl.n	801a116 <__swbuf_r+0x82>
 801a0b8:	6923      	ldr	r3, [r4, #16]
 801a0ba:	b363      	cbz	r3, 801a116 <__swbuf_r+0x82>
 801a0bc:	6923      	ldr	r3, [r4, #16]
 801a0be:	6820      	ldr	r0, [r4, #0]
 801a0c0:	1ac0      	subs	r0, r0, r3
 801a0c2:	6963      	ldr	r3, [r4, #20]
 801a0c4:	b2f6      	uxtb	r6, r6
 801a0c6:	4283      	cmp	r3, r0
 801a0c8:	4637      	mov	r7, r6
 801a0ca:	dc04      	bgt.n	801a0d6 <__swbuf_r+0x42>
 801a0cc:	4621      	mov	r1, r4
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f000 f948 	bl	801a364 <_fflush_r>
 801a0d4:	bb28      	cbnz	r0, 801a122 <__swbuf_r+0x8e>
 801a0d6:	68a3      	ldr	r3, [r4, #8]
 801a0d8:	3b01      	subs	r3, #1
 801a0da:	60a3      	str	r3, [r4, #8]
 801a0dc:	6823      	ldr	r3, [r4, #0]
 801a0de:	1c5a      	adds	r2, r3, #1
 801a0e0:	6022      	str	r2, [r4, #0]
 801a0e2:	701e      	strb	r6, [r3, #0]
 801a0e4:	6963      	ldr	r3, [r4, #20]
 801a0e6:	3001      	adds	r0, #1
 801a0e8:	4283      	cmp	r3, r0
 801a0ea:	d004      	beq.n	801a0f6 <__swbuf_r+0x62>
 801a0ec:	89a3      	ldrh	r3, [r4, #12]
 801a0ee:	07db      	lsls	r3, r3, #31
 801a0f0:	d519      	bpl.n	801a126 <__swbuf_r+0x92>
 801a0f2:	2e0a      	cmp	r6, #10
 801a0f4:	d117      	bne.n	801a126 <__swbuf_r+0x92>
 801a0f6:	4621      	mov	r1, r4
 801a0f8:	4628      	mov	r0, r5
 801a0fa:	f000 f933 	bl	801a364 <_fflush_r>
 801a0fe:	b190      	cbz	r0, 801a126 <__swbuf_r+0x92>
 801a100:	e00f      	b.n	801a122 <__swbuf_r+0x8e>
 801a102:	4b0b      	ldr	r3, [pc, #44]	; (801a130 <__swbuf_r+0x9c>)
 801a104:	429c      	cmp	r4, r3
 801a106:	d101      	bne.n	801a10c <__swbuf_r+0x78>
 801a108:	68ac      	ldr	r4, [r5, #8]
 801a10a:	e7d0      	b.n	801a0ae <__swbuf_r+0x1a>
 801a10c:	4b09      	ldr	r3, [pc, #36]	; (801a134 <__swbuf_r+0xa0>)
 801a10e:	429c      	cmp	r4, r3
 801a110:	bf08      	it	eq
 801a112:	68ec      	ldreq	r4, [r5, #12]
 801a114:	e7cb      	b.n	801a0ae <__swbuf_r+0x1a>
 801a116:	4621      	mov	r1, r4
 801a118:	4628      	mov	r0, r5
 801a11a:	f000 f81f 	bl	801a15c <__swsetup_r>
 801a11e:	2800      	cmp	r0, #0
 801a120:	d0cc      	beq.n	801a0bc <__swbuf_r+0x28>
 801a122:	f04f 37ff 	mov.w	r7, #4294967295
 801a126:	4638      	mov	r0, r7
 801a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a12a:	bf00      	nop
 801a12c:	0801d1ec 	.word	0x0801d1ec
 801a130:	0801d20c 	.word	0x0801d20c
 801a134:	0801d1cc 	.word	0x0801d1cc

0801a138 <_write_r>:
 801a138:	b538      	push	{r3, r4, r5, lr}
 801a13a:	4c07      	ldr	r4, [pc, #28]	; (801a158 <_write_r+0x20>)
 801a13c:	4605      	mov	r5, r0
 801a13e:	4608      	mov	r0, r1
 801a140:	4611      	mov	r1, r2
 801a142:	2200      	movs	r2, #0
 801a144:	6022      	str	r2, [r4, #0]
 801a146:	461a      	mov	r2, r3
 801a148:	f7e7 f8d1 	bl	80012ee <_write>
 801a14c:	1c43      	adds	r3, r0, #1
 801a14e:	d102      	bne.n	801a156 <_write_r+0x1e>
 801a150:	6823      	ldr	r3, [r4, #0]
 801a152:	b103      	cbz	r3, 801a156 <_write_r+0x1e>
 801a154:	602b      	str	r3, [r5, #0]
 801a156:	bd38      	pop	{r3, r4, r5, pc}
 801a158:	200101e8 	.word	0x200101e8

0801a15c <__swsetup_r>:
 801a15c:	4b32      	ldr	r3, [pc, #200]	; (801a228 <__swsetup_r+0xcc>)
 801a15e:	b570      	push	{r4, r5, r6, lr}
 801a160:	681d      	ldr	r5, [r3, #0]
 801a162:	4606      	mov	r6, r0
 801a164:	460c      	mov	r4, r1
 801a166:	b125      	cbz	r5, 801a172 <__swsetup_r+0x16>
 801a168:	69ab      	ldr	r3, [r5, #24]
 801a16a:	b913      	cbnz	r3, 801a172 <__swsetup_r+0x16>
 801a16c:	4628      	mov	r0, r5
 801a16e:	f7ff fa3f 	bl	80195f0 <__sinit>
 801a172:	4b2e      	ldr	r3, [pc, #184]	; (801a22c <__swsetup_r+0xd0>)
 801a174:	429c      	cmp	r4, r3
 801a176:	d10f      	bne.n	801a198 <__swsetup_r+0x3c>
 801a178:	686c      	ldr	r4, [r5, #4]
 801a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a17e:	b29a      	uxth	r2, r3
 801a180:	0715      	lsls	r5, r2, #28
 801a182:	d42c      	bmi.n	801a1de <__swsetup_r+0x82>
 801a184:	06d0      	lsls	r0, r2, #27
 801a186:	d411      	bmi.n	801a1ac <__swsetup_r+0x50>
 801a188:	2209      	movs	r2, #9
 801a18a:	6032      	str	r2, [r6, #0]
 801a18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a190:	81a3      	strh	r3, [r4, #12]
 801a192:	f04f 30ff 	mov.w	r0, #4294967295
 801a196:	e03e      	b.n	801a216 <__swsetup_r+0xba>
 801a198:	4b25      	ldr	r3, [pc, #148]	; (801a230 <__swsetup_r+0xd4>)
 801a19a:	429c      	cmp	r4, r3
 801a19c:	d101      	bne.n	801a1a2 <__swsetup_r+0x46>
 801a19e:	68ac      	ldr	r4, [r5, #8]
 801a1a0:	e7eb      	b.n	801a17a <__swsetup_r+0x1e>
 801a1a2:	4b24      	ldr	r3, [pc, #144]	; (801a234 <__swsetup_r+0xd8>)
 801a1a4:	429c      	cmp	r4, r3
 801a1a6:	bf08      	it	eq
 801a1a8:	68ec      	ldreq	r4, [r5, #12]
 801a1aa:	e7e6      	b.n	801a17a <__swsetup_r+0x1e>
 801a1ac:	0751      	lsls	r1, r2, #29
 801a1ae:	d512      	bpl.n	801a1d6 <__swsetup_r+0x7a>
 801a1b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1b2:	b141      	cbz	r1, 801a1c6 <__swsetup_r+0x6a>
 801a1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1b8:	4299      	cmp	r1, r3
 801a1ba:	d002      	beq.n	801a1c2 <__swsetup_r+0x66>
 801a1bc:	4630      	mov	r0, r6
 801a1be:	f000 f98d 	bl	801a4dc <_free_r>
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	6363      	str	r3, [r4, #52]	; 0x34
 801a1c6:	89a3      	ldrh	r3, [r4, #12]
 801a1c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a1cc:	81a3      	strh	r3, [r4, #12]
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	6063      	str	r3, [r4, #4]
 801a1d2:	6923      	ldr	r3, [r4, #16]
 801a1d4:	6023      	str	r3, [r4, #0]
 801a1d6:	89a3      	ldrh	r3, [r4, #12]
 801a1d8:	f043 0308 	orr.w	r3, r3, #8
 801a1dc:	81a3      	strh	r3, [r4, #12]
 801a1de:	6923      	ldr	r3, [r4, #16]
 801a1e0:	b94b      	cbnz	r3, 801a1f6 <__swsetup_r+0x9a>
 801a1e2:	89a3      	ldrh	r3, [r4, #12]
 801a1e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1ec:	d003      	beq.n	801a1f6 <__swsetup_r+0x9a>
 801a1ee:	4621      	mov	r1, r4
 801a1f0:	4630      	mov	r0, r6
 801a1f2:	f000 f917 	bl	801a424 <__smakebuf_r>
 801a1f6:	89a2      	ldrh	r2, [r4, #12]
 801a1f8:	f012 0301 	ands.w	r3, r2, #1
 801a1fc:	d00c      	beq.n	801a218 <__swsetup_r+0xbc>
 801a1fe:	2300      	movs	r3, #0
 801a200:	60a3      	str	r3, [r4, #8]
 801a202:	6963      	ldr	r3, [r4, #20]
 801a204:	425b      	negs	r3, r3
 801a206:	61a3      	str	r3, [r4, #24]
 801a208:	6923      	ldr	r3, [r4, #16]
 801a20a:	b953      	cbnz	r3, 801a222 <__swsetup_r+0xc6>
 801a20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a210:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a214:	d1ba      	bne.n	801a18c <__swsetup_r+0x30>
 801a216:	bd70      	pop	{r4, r5, r6, pc}
 801a218:	0792      	lsls	r2, r2, #30
 801a21a:	bf58      	it	pl
 801a21c:	6963      	ldrpl	r3, [r4, #20]
 801a21e:	60a3      	str	r3, [r4, #8]
 801a220:	e7f2      	b.n	801a208 <__swsetup_r+0xac>
 801a222:	2000      	movs	r0, #0
 801a224:	e7f7      	b.n	801a216 <__swsetup_r+0xba>
 801a226:	bf00      	nop
 801a228:	20000034 	.word	0x20000034
 801a22c:	0801d1ec 	.word	0x0801d1ec
 801a230:	0801d20c 	.word	0x0801d20c
 801a234:	0801d1cc 	.word	0x0801d1cc

0801a238 <_close_r>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	4c06      	ldr	r4, [pc, #24]	; (801a254 <_close_r+0x1c>)
 801a23c:	2300      	movs	r3, #0
 801a23e:	4605      	mov	r5, r0
 801a240:	4608      	mov	r0, r1
 801a242:	6023      	str	r3, [r4, #0]
 801a244:	f7e7 f86f 	bl	8001326 <_close>
 801a248:	1c43      	adds	r3, r0, #1
 801a24a:	d102      	bne.n	801a252 <_close_r+0x1a>
 801a24c:	6823      	ldr	r3, [r4, #0]
 801a24e:	b103      	cbz	r3, 801a252 <_close_r+0x1a>
 801a250:	602b      	str	r3, [r5, #0]
 801a252:	bd38      	pop	{r3, r4, r5, pc}
 801a254:	200101e8 	.word	0x200101e8

0801a258 <__sflush_r>:
 801a258:	898a      	ldrh	r2, [r1, #12]
 801a25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a25e:	4605      	mov	r5, r0
 801a260:	0710      	lsls	r0, r2, #28
 801a262:	460c      	mov	r4, r1
 801a264:	d458      	bmi.n	801a318 <__sflush_r+0xc0>
 801a266:	684b      	ldr	r3, [r1, #4]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	dc05      	bgt.n	801a278 <__sflush_r+0x20>
 801a26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a26e:	2b00      	cmp	r3, #0
 801a270:	dc02      	bgt.n	801a278 <__sflush_r+0x20>
 801a272:	2000      	movs	r0, #0
 801a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a27a:	2e00      	cmp	r6, #0
 801a27c:	d0f9      	beq.n	801a272 <__sflush_r+0x1a>
 801a27e:	2300      	movs	r3, #0
 801a280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a284:	682f      	ldr	r7, [r5, #0]
 801a286:	6a21      	ldr	r1, [r4, #32]
 801a288:	602b      	str	r3, [r5, #0]
 801a28a:	d032      	beq.n	801a2f2 <__sflush_r+0x9a>
 801a28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a28e:	89a3      	ldrh	r3, [r4, #12]
 801a290:	075a      	lsls	r2, r3, #29
 801a292:	d505      	bpl.n	801a2a0 <__sflush_r+0x48>
 801a294:	6863      	ldr	r3, [r4, #4]
 801a296:	1ac0      	subs	r0, r0, r3
 801a298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a29a:	b10b      	cbz	r3, 801a2a0 <__sflush_r+0x48>
 801a29c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a29e:	1ac0      	subs	r0, r0, r3
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	4602      	mov	r2, r0
 801a2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2a6:	6a21      	ldr	r1, [r4, #32]
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	47b0      	blx	r6
 801a2ac:	1c43      	adds	r3, r0, #1
 801a2ae:	89a3      	ldrh	r3, [r4, #12]
 801a2b0:	d106      	bne.n	801a2c0 <__sflush_r+0x68>
 801a2b2:	6829      	ldr	r1, [r5, #0]
 801a2b4:	291d      	cmp	r1, #29
 801a2b6:	d848      	bhi.n	801a34a <__sflush_r+0xf2>
 801a2b8:	4a29      	ldr	r2, [pc, #164]	; (801a360 <__sflush_r+0x108>)
 801a2ba:	40ca      	lsrs	r2, r1
 801a2bc:	07d6      	lsls	r6, r2, #31
 801a2be:	d544      	bpl.n	801a34a <__sflush_r+0xf2>
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	6062      	str	r2, [r4, #4]
 801a2c4:	04d9      	lsls	r1, r3, #19
 801a2c6:	6922      	ldr	r2, [r4, #16]
 801a2c8:	6022      	str	r2, [r4, #0]
 801a2ca:	d504      	bpl.n	801a2d6 <__sflush_r+0x7e>
 801a2cc:	1c42      	adds	r2, r0, #1
 801a2ce:	d101      	bne.n	801a2d4 <__sflush_r+0x7c>
 801a2d0:	682b      	ldr	r3, [r5, #0]
 801a2d2:	b903      	cbnz	r3, 801a2d6 <__sflush_r+0x7e>
 801a2d4:	6560      	str	r0, [r4, #84]	; 0x54
 801a2d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2d8:	602f      	str	r7, [r5, #0]
 801a2da:	2900      	cmp	r1, #0
 801a2dc:	d0c9      	beq.n	801a272 <__sflush_r+0x1a>
 801a2de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2e2:	4299      	cmp	r1, r3
 801a2e4:	d002      	beq.n	801a2ec <__sflush_r+0x94>
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	f000 f8f8 	bl	801a4dc <_free_r>
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	6360      	str	r0, [r4, #52]	; 0x34
 801a2f0:	e7c0      	b.n	801a274 <__sflush_r+0x1c>
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	47b0      	blx	r6
 801a2f8:	1c41      	adds	r1, r0, #1
 801a2fa:	d1c8      	bne.n	801a28e <__sflush_r+0x36>
 801a2fc:	682b      	ldr	r3, [r5, #0]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d0c5      	beq.n	801a28e <__sflush_r+0x36>
 801a302:	2b1d      	cmp	r3, #29
 801a304:	d001      	beq.n	801a30a <__sflush_r+0xb2>
 801a306:	2b16      	cmp	r3, #22
 801a308:	d101      	bne.n	801a30e <__sflush_r+0xb6>
 801a30a:	602f      	str	r7, [r5, #0]
 801a30c:	e7b1      	b.n	801a272 <__sflush_r+0x1a>
 801a30e:	89a3      	ldrh	r3, [r4, #12]
 801a310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a314:	81a3      	strh	r3, [r4, #12]
 801a316:	e7ad      	b.n	801a274 <__sflush_r+0x1c>
 801a318:	690f      	ldr	r7, [r1, #16]
 801a31a:	2f00      	cmp	r7, #0
 801a31c:	d0a9      	beq.n	801a272 <__sflush_r+0x1a>
 801a31e:	0793      	lsls	r3, r2, #30
 801a320:	680e      	ldr	r6, [r1, #0]
 801a322:	bf08      	it	eq
 801a324:	694b      	ldreq	r3, [r1, #20]
 801a326:	600f      	str	r7, [r1, #0]
 801a328:	bf18      	it	ne
 801a32a:	2300      	movne	r3, #0
 801a32c:	eba6 0807 	sub.w	r8, r6, r7
 801a330:	608b      	str	r3, [r1, #8]
 801a332:	f1b8 0f00 	cmp.w	r8, #0
 801a336:	dd9c      	ble.n	801a272 <__sflush_r+0x1a>
 801a338:	4643      	mov	r3, r8
 801a33a:	463a      	mov	r2, r7
 801a33c:	6a21      	ldr	r1, [r4, #32]
 801a33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a340:	4628      	mov	r0, r5
 801a342:	47b0      	blx	r6
 801a344:	2800      	cmp	r0, #0
 801a346:	dc06      	bgt.n	801a356 <__sflush_r+0xfe>
 801a348:	89a3      	ldrh	r3, [r4, #12]
 801a34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a34e:	81a3      	strh	r3, [r4, #12]
 801a350:	f04f 30ff 	mov.w	r0, #4294967295
 801a354:	e78e      	b.n	801a274 <__sflush_r+0x1c>
 801a356:	4407      	add	r7, r0
 801a358:	eba8 0800 	sub.w	r8, r8, r0
 801a35c:	e7e9      	b.n	801a332 <__sflush_r+0xda>
 801a35e:	bf00      	nop
 801a360:	20400001 	.word	0x20400001

0801a364 <_fflush_r>:
 801a364:	b538      	push	{r3, r4, r5, lr}
 801a366:	690b      	ldr	r3, [r1, #16]
 801a368:	4605      	mov	r5, r0
 801a36a:	460c      	mov	r4, r1
 801a36c:	b1db      	cbz	r3, 801a3a6 <_fflush_r+0x42>
 801a36e:	b118      	cbz	r0, 801a378 <_fflush_r+0x14>
 801a370:	6983      	ldr	r3, [r0, #24]
 801a372:	b90b      	cbnz	r3, 801a378 <_fflush_r+0x14>
 801a374:	f7ff f93c 	bl	80195f0 <__sinit>
 801a378:	4b0c      	ldr	r3, [pc, #48]	; (801a3ac <_fflush_r+0x48>)
 801a37a:	429c      	cmp	r4, r3
 801a37c:	d109      	bne.n	801a392 <_fflush_r+0x2e>
 801a37e:	686c      	ldr	r4, [r5, #4]
 801a380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a384:	b17b      	cbz	r3, 801a3a6 <_fflush_r+0x42>
 801a386:	4621      	mov	r1, r4
 801a388:	4628      	mov	r0, r5
 801a38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a38e:	f7ff bf63 	b.w	801a258 <__sflush_r>
 801a392:	4b07      	ldr	r3, [pc, #28]	; (801a3b0 <_fflush_r+0x4c>)
 801a394:	429c      	cmp	r4, r3
 801a396:	d101      	bne.n	801a39c <_fflush_r+0x38>
 801a398:	68ac      	ldr	r4, [r5, #8]
 801a39a:	e7f1      	b.n	801a380 <_fflush_r+0x1c>
 801a39c:	4b05      	ldr	r3, [pc, #20]	; (801a3b4 <_fflush_r+0x50>)
 801a39e:	429c      	cmp	r4, r3
 801a3a0:	bf08      	it	eq
 801a3a2:	68ec      	ldreq	r4, [r5, #12]
 801a3a4:	e7ec      	b.n	801a380 <_fflush_r+0x1c>
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	bd38      	pop	{r3, r4, r5, pc}
 801a3aa:	bf00      	nop
 801a3ac:	0801d1ec 	.word	0x0801d1ec
 801a3b0:	0801d20c 	.word	0x0801d20c
 801a3b4:	0801d1cc 	.word	0x0801d1cc

0801a3b8 <_lseek_r>:
 801a3b8:	b538      	push	{r3, r4, r5, lr}
 801a3ba:	4c07      	ldr	r4, [pc, #28]	; (801a3d8 <_lseek_r+0x20>)
 801a3bc:	4605      	mov	r5, r0
 801a3be:	4608      	mov	r0, r1
 801a3c0:	4611      	mov	r1, r2
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	6022      	str	r2, [r4, #0]
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	f7e6 ffd4 	bl	8001374 <_lseek>
 801a3cc:	1c43      	adds	r3, r0, #1
 801a3ce:	d102      	bne.n	801a3d6 <_lseek_r+0x1e>
 801a3d0:	6823      	ldr	r3, [r4, #0]
 801a3d2:	b103      	cbz	r3, 801a3d6 <_lseek_r+0x1e>
 801a3d4:	602b      	str	r3, [r5, #0]
 801a3d6:	bd38      	pop	{r3, r4, r5, pc}
 801a3d8:	200101e8 	.word	0x200101e8

0801a3dc <__swhatbuf_r>:
 801a3dc:	b570      	push	{r4, r5, r6, lr}
 801a3de:	460e      	mov	r6, r1
 801a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3e4:	2900      	cmp	r1, #0
 801a3e6:	b096      	sub	sp, #88	; 0x58
 801a3e8:	4614      	mov	r4, r2
 801a3ea:	461d      	mov	r5, r3
 801a3ec:	da07      	bge.n	801a3fe <__swhatbuf_r+0x22>
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	602b      	str	r3, [r5, #0]
 801a3f2:	89b3      	ldrh	r3, [r6, #12]
 801a3f4:	061a      	lsls	r2, r3, #24
 801a3f6:	d410      	bmi.n	801a41a <__swhatbuf_r+0x3e>
 801a3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a3fc:	e00e      	b.n	801a41c <__swhatbuf_r+0x40>
 801a3fe:	466a      	mov	r2, sp
 801a400:	f000 f8f2 	bl	801a5e8 <_fstat_r>
 801a404:	2800      	cmp	r0, #0
 801a406:	dbf2      	blt.n	801a3ee <__swhatbuf_r+0x12>
 801a408:	9a01      	ldr	r2, [sp, #4]
 801a40a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a40e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a412:	425a      	negs	r2, r3
 801a414:	415a      	adcs	r2, r3
 801a416:	602a      	str	r2, [r5, #0]
 801a418:	e7ee      	b.n	801a3f8 <__swhatbuf_r+0x1c>
 801a41a:	2340      	movs	r3, #64	; 0x40
 801a41c:	2000      	movs	r0, #0
 801a41e:	6023      	str	r3, [r4, #0]
 801a420:	b016      	add	sp, #88	; 0x58
 801a422:	bd70      	pop	{r4, r5, r6, pc}

0801a424 <__smakebuf_r>:
 801a424:	898b      	ldrh	r3, [r1, #12]
 801a426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a428:	079d      	lsls	r5, r3, #30
 801a42a:	4606      	mov	r6, r0
 801a42c:	460c      	mov	r4, r1
 801a42e:	d507      	bpl.n	801a440 <__smakebuf_r+0x1c>
 801a430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a434:	6023      	str	r3, [r4, #0]
 801a436:	6123      	str	r3, [r4, #16]
 801a438:	2301      	movs	r3, #1
 801a43a:	6163      	str	r3, [r4, #20]
 801a43c:	b002      	add	sp, #8
 801a43e:	bd70      	pop	{r4, r5, r6, pc}
 801a440:	ab01      	add	r3, sp, #4
 801a442:	466a      	mov	r2, sp
 801a444:	f7ff ffca 	bl	801a3dc <__swhatbuf_r>
 801a448:	9900      	ldr	r1, [sp, #0]
 801a44a:	4605      	mov	r5, r0
 801a44c:	4630      	mov	r0, r6
 801a44e:	f7ff f959 	bl	8019704 <_malloc_r>
 801a452:	b948      	cbnz	r0, 801a468 <__smakebuf_r+0x44>
 801a454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a458:	059a      	lsls	r2, r3, #22
 801a45a:	d4ef      	bmi.n	801a43c <__smakebuf_r+0x18>
 801a45c:	f023 0303 	bic.w	r3, r3, #3
 801a460:	f043 0302 	orr.w	r3, r3, #2
 801a464:	81a3      	strh	r3, [r4, #12]
 801a466:	e7e3      	b.n	801a430 <__smakebuf_r+0xc>
 801a468:	4b0d      	ldr	r3, [pc, #52]	; (801a4a0 <__smakebuf_r+0x7c>)
 801a46a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a46c:	89a3      	ldrh	r3, [r4, #12]
 801a46e:	6020      	str	r0, [r4, #0]
 801a470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a474:	81a3      	strh	r3, [r4, #12]
 801a476:	9b00      	ldr	r3, [sp, #0]
 801a478:	6163      	str	r3, [r4, #20]
 801a47a:	9b01      	ldr	r3, [sp, #4]
 801a47c:	6120      	str	r0, [r4, #16]
 801a47e:	b15b      	cbz	r3, 801a498 <__smakebuf_r+0x74>
 801a480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a484:	4630      	mov	r0, r6
 801a486:	f000 f8c1 	bl	801a60c <_isatty_r>
 801a48a:	b128      	cbz	r0, 801a498 <__smakebuf_r+0x74>
 801a48c:	89a3      	ldrh	r3, [r4, #12]
 801a48e:	f023 0303 	bic.w	r3, r3, #3
 801a492:	f043 0301 	orr.w	r3, r3, #1
 801a496:	81a3      	strh	r3, [r4, #12]
 801a498:	89a3      	ldrh	r3, [r4, #12]
 801a49a:	431d      	orrs	r5, r3
 801a49c:	81a5      	strh	r5, [r4, #12]
 801a49e:	e7cd      	b.n	801a43c <__smakebuf_r+0x18>
 801a4a0:	080195b9 	.word	0x080195b9

0801a4a4 <memmove>:
 801a4a4:	4288      	cmp	r0, r1
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	eb01 0302 	add.w	r3, r1, r2
 801a4ac:	d807      	bhi.n	801a4be <memmove+0x1a>
 801a4ae:	1e42      	subs	r2, r0, #1
 801a4b0:	4299      	cmp	r1, r3
 801a4b2:	d00a      	beq.n	801a4ca <memmove+0x26>
 801a4b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a4bc:	e7f8      	b.n	801a4b0 <memmove+0xc>
 801a4be:	4283      	cmp	r3, r0
 801a4c0:	d9f5      	bls.n	801a4ae <memmove+0xa>
 801a4c2:	1881      	adds	r1, r0, r2
 801a4c4:	1ad2      	subs	r2, r2, r3
 801a4c6:	42d3      	cmn	r3, r2
 801a4c8:	d100      	bne.n	801a4cc <memmove+0x28>
 801a4ca:	bd10      	pop	{r4, pc}
 801a4cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a4d4:	e7f7      	b.n	801a4c6 <memmove+0x22>

0801a4d6 <__malloc_lock>:
 801a4d6:	4770      	bx	lr

0801a4d8 <__malloc_unlock>:
 801a4d8:	4770      	bx	lr
	...

0801a4dc <_free_r>:
 801a4dc:	b538      	push	{r3, r4, r5, lr}
 801a4de:	4605      	mov	r5, r0
 801a4e0:	2900      	cmp	r1, #0
 801a4e2:	d045      	beq.n	801a570 <_free_r+0x94>
 801a4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4e8:	1f0c      	subs	r4, r1, #4
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	bfb8      	it	lt
 801a4ee:	18e4      	addlt	r4, r4, r3
 801a4f0:	f7ff fff1 	bl	801a4d6 <__malloc_lock>
 801a4f4:	4a1f      	ldr	r2, [pc, #124]	; (801a574 <_free_r+0x98>)
 801a4f6:	6813      	ldr	r3, [r2, #0]
 801a4f8:	4610      	mov	r0, r2
 801a4fa:	b933      	cbnz	r3, 801a50a <_free_r+0x2e>
 801a4fc:	6063      	str	r3, [r4, #4]
 801a4fe:	6014      	str	r4, [r2, #0]
 801a500:	4628      	mov	r0, r5
 801a502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a506:	f7ff bfe7 	b.w	801a4d8 <__malloc_unlock>
 801a50a:	42a3      	cmp	r3, r4
 801a50c:	d90c      	bls.n	801a528 <_free_r+0x4c>
 801a50e:	6821      	ldr	r1, [r4, #0]
 801a510:	1862      	adds	r2, r4, r1
 801a512:	4293      	cmp	r3, r2
 801a514:	bf04      	itt	eq
 801a516:	681a      	ldreq	r2, [r3, #0]
 801a518:	685b      	ldreq	r3, [r3, #4]
 801a51a:	6063      	str	r3, [r4, #4]
 801a51c:	bf04      	itt	eq
 801a51e:	1852      	addeq	r2, r2, r1
 801a520:	6022      	streq	r2, [r4, #0]
 801a522:	6004      	str	r4, [r0, #0]
 801a524:	e7ec      	b.n	801a500 <_free_r+0x24>
 801a526:	4613      	mov	r3, r2
 801a528:	685a      	ldr	r2, [r3, #4]
 801a52a:	b10a      	cbz	r2, 801a530 <_free_r+0x54>
 801a52c:	42a2      	cmp	r2, r4
 801a52e:	d9fa      	bls.n	801a526 <_free_r+0x4a>
 801a530:	6819      	ldr	r1, [r3, #0]
 801a532:	1858      	adds	r0, r3, r1
 801a534:	42a0      	cmp	r0, r4
 801a536:	d10b      	bne.n	801a550 <_free_r+0x74>
 801a538:	6820      	ldr	r0, [r4, #0]
 801a53a:	4401      	add	r1, r0
 801a53c:	1858      	adds	r0, r3, r1
 801a53e:	4282      	cmp	r2, r0
 801a540:	6019      	str	r1, [r3, #0]
 801a542:	d1dd      	bne.n	801a500 <_free_r+0x24>
 801a544:	6810      	ldr	r0, [r2, #0]
 801a546:	6852      	ldr	r2, [r2, #4]
 801a548:	605a      	str	r2, [r3, #4]
 801a54a:	4401      	add	r1, r0
 801a54c:	6019      	str	r1, [r3, #0]
 801a54e:	e7d7      	b.n	801a500 <_free_r+0x24>
 801a550:	d902      	bls.n	801a558 <_free_r+0x7c>
 801a552:	230c      	movs	r3, #12
 801a554:	602b      	str	r3, [r5, #0]
 801a556:	e7d3      	b.n	801a500 <_free_r+0x24>
 801a558:	6820      	ldr	r0, [r4, #0]
 801a55a:	1821      	adds	r1, r4, r0
 801a55c:	428a      	cmp	r2, r1
 801a55e:	bf04      	itt	eq
 801a560:	6811      	ldreq	r1, [r2, #0]
 801a562:	6852      	ldreq	r2, [r2, #4]
 801a564:	6062      	str	r2, [r4, #4]
 801a566:	bf04      	itt	eq
 801a568:	1809      	addeq	r1, r1, r0
 801a56a:	6021      	streq	r1, [r4, #0]
 801a56c:	605c      	str	r4, [r3, #4]
 801a56e:	e7c7      	b.n	801a500 <_free_r+0x24>
 801a570:	bd38      	pop	{r3, r4, r5, pc}
 801a572:	bf00      	nop
 801a574:	2000c940 	.word	0x2000c940

0801a578 <_realloc_r>:
 801a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a57a:	4607      	mov	r7, r0
 801a57c:	4614      	mov	r4, r2
 801a57e:	460e      	mov	r6, r1
 801a580:	b921      	cbnz	r1, 801a58c <_realloc_r+0x14>
 801a582:	4611      	mov	r1, r2
 801a584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a588:	f7ff b8bc 	b.w	8019704 <_malloc_r>
 801a58c:	b922      	cbnz	r2, 801a598 <_realloc_r+0x20>
 801a58e:	f7ff ffa5 	bl	801a4dc <_free_r>
 801a592:	4625      	mov	r5, r4
 801a594:	4628      	mov	r0, r5
 801a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a598:	f000 f848 	bl	801a62c <_malloc_usable_size_r>
 801a59c:	42a0      	cmp	r0, r4
 801a59e:	d20f      	bcs.n	801a5c0 <_realloc_r+0x48>
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	4638      	mov	r0, r7
 801a5a4:	f7ff f8ae 	bl	8019704 <_malloc_r>
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d0f2      	beq.n	801a594 <_realloc_r+0x1c>
 801a5ae:	4631      	mov	r1, r6
 801a5b0:	4622      	mov	r2, r4
 801a5b2:	f7fe ff92 	bl	80194da <memcpy>
 801a5b6:	4631      	mov	r1, r6
 801a5b8:	4638      	mov	r0, r7
 801a5ba:	f7ff ff8f 	bl	801a4dc <_free_r>
 801a5be:	e7e9      	b.n	801a594 <_realloc_r+0x1c>
 801a5c0:	4635      	mov	r5, r6
 801a5c2:	e7e7      	b.n	801a594 <_realloc_r+0x1c>

0801a5c4 <_read_r>:
 801a5c4:	b538      	push	{r3, r4, r5, lr}
 801a5c6:	4c07      	ldr	r4, [pc, #28]	; (801a5e4 <_read_r+0x20>)
 801a5c8:	4605      	mov	r5, r0
 801a5ca:	4608      	mov	r0, r1
 801a5cc:	4611      	mov	r1, r2
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	6022      	str	r2, [r4, #0]
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	f7e6 fe6e 	bl	80012b4 <_read>
 801a5d8:	1c43      	adds	r3, r0, #1
 801a5da:	d102      	bne.n	801a5e2 <_read_r+0x1e>
 801a5dc:	6823      	ldr	r3, [r4, #0]
 801a5de:	b103      	cbz	r3, 801a5e2 <_read_r+0x1e>
 801a5e0:	602b      	str	r3, [r5, #0]
 801a5e2:	bd38      	pop	{r3, r4, r5, pc}
 801a5e4:	200101e8 	.word	0x200101e8

0801a5e8 <_fstat_r>:
 801a5e8:	b538      	push	{r3, r4, r5, lr}
 801a5ea:	4c07      	ldr	r4, [pc, #28]	; (801a608 <_fstat_r+0x20>)
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	4605      	mov	r5, r0
 801a5f0:	4608      	mov	r0, r1
 801a5f2:	4611      	mov	r1, r2
 801a5f4:	6023      	str	r3, [r4, #0]
 801a5f6:	f7e6 fea2 	bl	800133e <_fstat>
 801a5fa:	1c43      	adds	r3, r0, #1
 801a5fc:	d102      	bne.n	801a604 <_fstat_r+0x1c>
 801a5fe:	6823      	ldr	r3, [r4, #0]
 801a600:	b103      	cbz	r3, 801a604 <_fstat_r+0x1c>
 801a602:	602b      	str	r3, [r5, #0]
 801a604:	bd38      	pop	{r3, r4, r5, pc}
 801a606:	bf00      	nop
 801a608:	200101e8 	.word	0x200101e8

0801a60c <_isatty_r>:
 801a60c:	b538      	push	{r3, r4, r5, lr}
 801a60e:	4c06      	ldr	r4, [pc, #24]	; (801a628 <_isatty_r+0x1c>)
 801a610:	2300      	movs	r3, #0
 801a612:	4605      	mov	r5, r0
 801a614:	4608      	mov	r0, r1
 801a616:	6023      	str	r3, [r4, #0]
 801a618:	f7e6 fea1 	bl	800135e <_isatty>
 801a61c:	1c43      	adds	r3, r0, #1
 801a61e:	d102      	bne.n	801a626 <_isatty_r+0x1a>
 801a620:	6823      	ldr	r3, [r4, #0]
 801a622:	b103      	cbz	r3, 801a626 <_isatty_r+0x1a>
 801a624:	602b      	str	r3, [r5, #0]
 801a626:	bd38      	pop	{r3, r4, r5, pc}
 801a628:	200101e8 	.word	0x200101e8

0801a62c <_malloc_usable_size_r>:
 801a62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a630:	1f18      	subs	r0, r3, #4
 801a632:	2b00      	cmp	r3, #0
 801a634:	bfbc      	itt	lt
 801a636:	580b      	ldrlt	r3, [r1, r0]
 801a638:	18c0      	addlt	r0, r0, r3
 801a63a:	4770      	bx	lr

0801a63c <_init>:
 801a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a63e:	bf00      	nop
 801a640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a642:	bc08      	pop	{r3}
 801a644:	469e      	mov	lr, r3
 801a646:	4770      	bx	lr

0801a648 <_fini>:
 801a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64a:	bf00      	nop
 801a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a64e:	bc08      	pop	{r3}
 801a650:	469e      	mov	lr, r3
 801a652:	4770      	bx	lr
