
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a114  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c24  0801a3b4  0801a3b4  0002a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cfd8  0801cfd8  0002cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cfe0  0801cfe0  0002cfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cfe4  0801cfe4  0002cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801cfe8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010158  20000098  0801d080  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200101f0  0801d080  000301f0  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801d080  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005cdd6  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000098d7  00000000  00000000  0008ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000028c0  00000000  00000000  00096778  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002608  00000000  00000000  00099038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004cb15  00000000  00000000  0009b640  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00035638  00000000  00000000  000e8155  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a56ad  00000000  00000000  0011d78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c2e3a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000aea8  00000000  00000000  002c2eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a39c 	.word	0x0801a39c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0801a39c 	.word	0x0801a39c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <vApplicationGetIdleTaskMemory+0x2c>)
 8000780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000b4 	.word	0x200000b4
 80007a0:	20000108 	.word	0x20000108

080007a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_FREERTOS_Init+0x5c>)
 80007ac:	1d3c      	adds	r4, r7, #4
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 fd29 	bl	800a218 <osThreadCreate>
 80007c6:	4602      	mov	r2, r0
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_FREERTOS_Init+0x60>)
 80007ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthReceiveCommand, "TaskEthReceiveCommand", 3000, NULL, 1, NULL);
 80007cc:	2300      	movs	r3, #0
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007da:	490b      	ldr	r1, [pc, #44]	; (8000808 <MX_FREERTOS_Init+0x64>)
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_FREERTOS_Init+0x68>)
 80007de:	f00b f8a5 	bl	800b92c <xTaskCreate>

  xTaskCreate(vTaskEthSendData, "TaskEthSendData", 1000, NULL, 1, NULL);
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <MX_FREERTOS_Init+0x6c>)
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_FREERTOS_Init+0x70>)
 80007f4:	f00b f89a 	bl	800b92c <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000800:	0801a3e8 	.word	0x0801a3e8
 8000804:	2000c948 	.word	0x2000c948
 8000808:	0801a3b4 	.word	0x0801a3b4
 800080c:	0800082d 	.word	0x0800082d
 8000810:	0801a3cc 	.word	0x0801a3cc
 8000814:	08000915 	.word	0x08000915

08000818 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000824:	f009 fd44 	bl	800a2b0 <osDelay>
 8000828:	e7fa      	b.n	8000820 <StartDefaultTask+0x8>
	...

0800082c <vTaskEthReceiveCommand>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

/* task to hold tcp communication */
void vTaskEthReceiveCommand(void * argument){
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

	for(;;){

		/* Infinite loop */
		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_TCP);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2010      	movs	r0, #16
 800083a:	f00c fc5d 	bl	800d0f8 <netconn_new_with_proto_and_callback>
 800083e:	61f8      	str	r0, [r7, #28]

		if (conn != NULL) {
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f6      	beq.n	8000834 <vTaskEthReceiveCommand+0x8>

			/* Bind connection to well known port number. */
			err = netconn_bind(conn, NULL, 4242);
 8000846:	f241 0292 	movw	r2, #4242	; 0x1092
 800084a:	2100      	movs	r1, #0
 800084c:	69f8      	ldr	r0, [r7, #28]
 800084e:	f00c fcf3 	bl	800d238 <netconn_bind>
 8000852:	4603      	mov	r3, r0
 8000854:	76fb      	strb	r3, [r7, #27]

			if (err == ERR_OK) {
 8000856:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d14b      	bne.n	80008f6 <vTaskEthReceiveCommand+0xca>

				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 800085e:	21ff      	movs	r1, #255	; 0xff
 8000860:	69f8      	ldr	r0, [r7, #28]
 8000862:	f00c fd21 	bl	800d2a8 <netconn_listen_with_backlog>

				while (1) {

					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 8000866:	4927      	ldr	r1, [pc, #156]	; (8000904 <vTaskEthReceiveCommand+0xd8>)
 8000868:	69f8      	ldr	r0, [r7, #28]
 800086a:	f00c fd49 	bl	800d300 <netconn_accept>
 800086e:	4603      	mov	r3, r0
 8000870:	76bb      	strb	r3, [r7, #26]

					/* Process the new connection. */
					if (accept_err == ERR_OK) {
 8000872:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f5      	bne.n	8000866 <vTaskEthReceiveCommand+0x3a>

						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 800087a:	e023      	b.n	80008c4 <vTaskEthReceiveCommand+0x98>

							do {

								netbuf_data(buf, &data, &len);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f107 020e 	add.w	r2, r7, #14
 8000882:	f107 0110 	add.w	r1, r7, #16
 8000886:	4618      	mov	r0, r3
 8000888:	f00e fc04 	bl	800f094 <netbuf_data>

								/* receive command from control station */
								sprintf(uart3_send, "Eth tcp received data: %s \n\r", (char*) data);
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	461a      	mov	r2, r3
 8000890:	491d      	ldr	r1, [pc, #116]	; (8000908 <vTaskEthReceiveCommand+0xdc>)
 8000892:	481e      	ldr	r0, [pc, #120]	; (800090c <vTaskEthReceiveCommand+0xe0>)
 8000894:	f018 fcfc 	bl	8019290 <siprintf>
								HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <vTaskEthReceiveCommand+0xe0>)
 800089a:	f7ff fd21 	bl	80002e0 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	4919      	ldr	r1, [pc, #100]	; (800090c <vTaskEthReceiveCommand+0xe0>)
 80008a8:	4819      	ldr	r0, [pc, #100]	; (8000910 <vTaskEthReceiveCommand+0xe4>)
 80008aa:	f006 f823 	bl	80068f4 <HAL_UART_Transmit>

								/* parse received command and control ROV */


							} while (netbuf_next(buf) >= 0);
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00e fc39 	bl	800f128 <netbuf_next>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dadf      	bge.n	800087c <vTaskEthReceiveCommand+0x50>

							netbuf_delete(buf);
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4618      	mov	r0, r3
 80008c0:	f00e fbc8 	bl	800f054 <netbuf_delete>
						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <vTaskEthReceiveCommand+0xd8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f107 0214 	add.w	r2, r7, #20
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00c fe64 	bl	800d59c <netconn_recv>
 80008d4:	4603      	mov	r3, r0
 80008d6:	767b      	strb	r3, [r7, #25]
 80008d8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0cd      	beq.n	800087c <vTaskEthReceiveCommand+0x50>

						}

						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <vTaskEthReceiveCommand+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00c ff79 	bl	800d7dc <netconn_close>
						netconn_delete(newconn);
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <vTaskEthReceiveCommand+0xd8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00c fc7c 	bl	800d1ec <netconn_delete>
					accept_err = netconn_accept(conn, &newconn);
 80008f4:	e7b7      	b.n	8000866 <vTaskEthReceiveCommand+0x3a>
					}
				}

			} else {
				netconn_delete(newconn);
 80008f6:	4b03      	ldr	r3, [pc, #12]	; (8000904 <vTaskEthReceiveCommand+0xd8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00c fc76 	bl	800d1ec <netconn_delete>
		conn = netconn_new(NETCONN_TCP);
 8000900:	e798      	b.n	8000834 <vTaskEthReceiveCommand+0x8>
 8000902:	bf00      	nop
 8000904:	2000c94c 	.word	0x2000c94c
 8000908:	0801a404 	.word	0x0801a404
 800090c:	2000c950 	.word	0x2000c950
 8000910:	2000ca58 	.word	0x2000ca58

08000914 <vTaskEthSendData>:
	vTaskDelete(NULL);

}


void vTaskEthSendData(void * argument){
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b087      	sub	sp, #28
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]

	void *tcpeth_send_data = "hello eth h7";
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <vTaskEthSendData+0x60>)
 800091e:	60fb      	str	r3, [r7, #12]


		/* send data packet with netconn_write function */


		tcp_send_data_status = netconn_write(newconn, tcpeth_send_data, strlen(tcpeth_send_data), NETCONN_COPY);
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <vTaskEthSendData+0x64>)
 8000922:	681c      	ldr	r4, [r3, #0]
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff fcdb 	bl	80002e0 <strlen>
 800092a:	4602      	mov	r2, r0
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	68f9      	ldr	r1, [r7, #12]
 8000934:	4620      	mov	r0, r4
 8000936:	f00c fea9 	bl	800d68c <netconn_write_partly>
 800093a:	4603      	mov	r3, r0
 800093c:	72fb      	strb	r3, [r7, #11]

		sprintf(uart3_send, "Netconn write status: %d\n\r", tcp_send_data_status);
 800093e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000942:	461a      	mov	r2, r3
 8000944:	490d      	ldr	r1, [pc, #52]	; (800097c <vTaskEthSendData+0x68>)
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <vTaskEthSendData+0x6c>)
 8000948:	f018 fca2 	bl	8019290 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <vTaskEthSendData+0x6c>)
 800094e:	f7ff fcc7 	bl	80002e0 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	4909      	ldr	r1, [pc, #36]	; (8000980 <vTaskEthSendData+0x6c>)
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <vTaskEthSendData+0x70>)
 800095e:	f005 ffc9 	bl	80068f4 <HAL_UART_Transmit>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000962:	2102      	movs	r1, #2
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <vTaskEthSendData+0x74>)
 8000966:	f003 f88c 	bl	8003a82 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f00b f913 	bl	800bb98 <vTaskDelay>
		tcp_send_data_status = netconn_write(newconn, tcpeth_send_data, strlen(tcpeth_send_data), NETCONN_COPY);
 8000972:	e7d5      	b.n	8000920 <vTaskEthSendData+0xc>
 8000974:	0801a424 	.word	0x0801a424
 8000978:	2000c94c 	.word	0x2000c94c
 800097c:	0801a434 	.word	0x0801a434
 8000980:	2000c950 	.word	0x2000c950
 8000984:	2000ca58 	.word	0x2000ca58
 8000988:	58021000 	.word	0x58021000

0800098c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <MX_GPIO_Init+0x140>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <MX_GPIO_Init+0x140>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b2:	4b46      	ldr	r3, [pc, #280]	; (8000acc <MX_GPIO_Init+0x140>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c0:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_GPIO_Init+0x140>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	4a41      	ldr	r2, [pc, #260]	; (8000acc <MX_GPIO_Init+0x140>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_GPIO_Init+0x140>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_GPIO_Init+0x140>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a39      	ldr	r2, [pc, #228]	; (8000acc <MX_GPIO_Init+0x140>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b37      	ldr	r3, [pc, #220]	; (8000acc <MX_GPIO_Init+0x140>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <MX_GPIO_Init+0x140>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_GPIO_Init+0x140>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0x144>)
 8000a7c:	f002 ffe8 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a86:	f002 ffe3 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a8a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0x144>)
 8000aa4:	f002 fe24 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000ac0:	f002 fe16 	bl	80036f0 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	58021000 	.word	0x58021000

08000ad8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000adc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <SCB_EnableICache+0x3c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000af0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <SCB_EnableICache+0x3c>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <SCB_EnableICache+0x3c>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b04:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <SCB_EnableDCache+0x7c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <SCB_EnableDCache+0x7c>)
 8000b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b30:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0b5b      	lsrs	r3, r3, #13
 8000b36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b3a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b44:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	015a      	lsls	r2, r3, #5
 8000b4a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b4e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b54:	490f      	ldr	r1, [pc, #60]	; (8000b94 <SCB_EnableDCache+0x7c>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1ef      	bne.n	8000b46 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	1e5a      	subs	r2, r3, #1
 8000b6a:	60fa      	str	r2, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1e5      	bne.n	8000b3c <SCB_EnableDCache+0x24>
 8000b70:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <SCB_EnableDCache+0x7c>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <SCB_EnableDCache+0x7c>)
 8000b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7e:	6153      	str	r3, [r2, #20]
 8000b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b84:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000b9e:	f000 ff03 	bl	80019a8 <HAL_MPU_Disable>

	/* Configure the MPU attributes as Device not cacheable
	 for ETH DMA descriptors */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MPU_Config+0x80>)
 8000ba8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000baa:	2307      	movs	r3, #7
 8000bac:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 ff1d 	bl	8001a10 <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes as Normal Non Cacheable
	 for LwIP RAM heap which contains the Tx buffers */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30044000;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MPU_Config+0x84>)
 8000bdc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000bde:	230d      	movs	r3, #13
 8000be0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000be2:	2303      	movs	r3, #3
 8000be4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 ff03 	bl	8001a10 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f000 fee2 	bl	80019d4 <HAL_MPU_Enable>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	30040000 	.word	0x30040000
 8000c1c:	30044000 	.word	0x30044000

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MPU_Config();
 8000c26:	f7ff ffb7 	bl	8000b98 <MPU_Config>
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c2a:	f7ff ff55 	bl	8000ad8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c2e:	f7ff ff73 	bl	8000b18 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c36:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c38:	bf00      	nop
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <main+0xb0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <main+0x30>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dcf4      	bgt.n	8000c3a <main+0x1a>
  if ( timeout < 0 )
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da01      	bge.n	8000c5a <main+0x3a>
  {
  Error_Handler();
 8000c56:	f000 f933 	bl	8000ec0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f000 fd27 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 f839 	bl	8000cd4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <main+0xb0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <main+0xb0>)
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <main+0xb0>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f002 ff19 	bl	8003ab8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f002 ff2f 	bl	8003aec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c92:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c94:	bf00      	nop
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <main+0xb0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d104      	bne.n	8000cac <main+0x8c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	dcf4      	bgt.n	8000c96 <main+0x76>
if ( timeout < 0 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da01      	bge.n	8000cb6 <main+0x96>
{
Error_Handler();
 8000cb2:	f000 f905 	bl	8000ec0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f7ff fe69 	bl	800098c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cba:	f000 fa4d 	bl	8001158 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cbe:	f000 fae1 	bl	8001284 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 8000cc2:	f008 fd5d 	bl	8009780 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000cc6:	f7ff fd6d 	bl	80007a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000cca:	f009 fa8e 	bl	800a1ea <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <main+0xae>
 8000cd0:	58024400 	.word	0x58024400

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0cc      	sub	sp, #304	; 0x130
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cde:	224c      	movs	r2, #76	; 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f018 fab4 	bl	8019250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cec:	2220      	movs	r2, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f018 faad 	bl	8019250 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	23bc      	movs	r3, #188	; 0xbc
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	f018 faa5 	bl	8019250 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d06:	2004      	movs	r0, #4
 8000d08:	f003 f84c 	bl	8003da4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <SystemClock_Config+0x1b8>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a5d      	ldr	r2, [pc, #372]	; (8000e8c <SystemClock_Config+0x1b8>)
 8000d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b5b      	ldr	r3, [pc, #364]	; (8000e8c <SystemClock_Config+0x1b8>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <SystemClock_Config+0x1bc>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	4a58      	ldr	r2, [pc, #352]	; (8000e90 <SystemClock_Config+0x1bc>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <SystemClock_Config+0x1bc>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d46:	bf00      	nop
 8000d48:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <SystemClock_Config+0x1b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d54:	d1f8      	bne.n	8000d48 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d56:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <SystemClock_Config+0x1c0>)
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f023 0303 	bic.w	r3, r3, #3
 8000d5e:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <SystemClock_Config+0x1c0>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d86:	2378      	movs	r3, #120	; 0x78
 8000d88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 f85f 	bl	8003e78 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000dc0:	f000 f87e 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	233f      	movs	r3, #63	; 0x3f
 8000dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fc13 	bl	8004628 <HAL_RCC_ClockConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000e08:	f000 f85a 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <SystemClock_Config+0x1c4>)
 8000e12:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2201      	movs	r2, #1
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2218      	movs	r2, #24
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	2202      	movs	r2, #2
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2204      	movs	r2, #4
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2202      	movs	r2, #2
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 ffa0 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 8000e7a:	f000 f821 	bl	8000ec0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e7e:	f002 ffeb 	bl	8003e58 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e82:	bf00      	nop
 8000e84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024800 	.word	0x58024800
 8000e90:	58000400 	.word	0x58000400
 8000e94:	58024400 	.word	0x58024400
 8000e98:	00040002 	.word	0x00040002

08000e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eae:	f000 fc39 	bl	8001724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x38>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x38>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x38>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f06f 0001 	mvn.w	r0, #1
 8000efc:	f000 fd2c 	bl	8001958 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58024400 	.word	0x58024400

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2019      	movs	r0, #25
 8000f22:	f000 fd19 	bl	8001958 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000f26:	2019      	movs	r0, #25
 8000f28:	f000 fd30 	bl	800198c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 feeb 	bl	8004d30 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f5a:	f003 fed3 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_InitTick+0xac>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	0c9b      	lsrs	r3, r3, #18
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_InitTick+0xb4>)
 8000f76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f84:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f94:	f005 f9fe 	bl	8006394 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <HAL_InitTick+0xb0>)
 8000fa0:	f005 fa2e 	bl	8006400 <HAL_TIM_Base_Start_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	e000      	b.n	8000faa <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3738      	adds	r7, #56	; 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	2000ca18 	.word	0x2000ca18
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ETH_IRQHandler+0x10>)
 8000ffe:	f001 f9bf 	bl	8002380 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000d024 	.word	0x2000d024

0800100c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM1_UP_IRQHandler+0x10>)
 8001012:	f005 fa1f 	bl	8006454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000ca18 	.word	0x2000ca18

08001020 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00a      	b.n	8001048 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001032:	f3af 8000 	nop.w
 8001036:	4601      	mov	r1, r0
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf0      	blt.n	8001032 <_read+0x12>
	}

return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e009      	b.n	8001080 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf1      	blt.n	800106c <_write+0x12>
	}
	return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_close>:

int _close(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	605a      	str	r2, [r3, #4]
	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_isatty>:

int _isatty(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return 1;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x50>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x16>
		heap_end = &end;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <_sbrk+0x50>)
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <_sbrk+0x54>)
 8001110:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <_sbrk+0x50>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <_sbrk+0x50>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	466a      	mov	r2, sp
 8001122:	4293      	cmp	r3, r2
 8001124:	d905      	bls.n	8001132 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <_sbrk+0x58>)
 8001128:	220c      	movs	r2, #12
 800112a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	e006      	b.n	8001140 <_sbrk+0x44>
	}

	heap_end += incr;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <_sbrk+0x50>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <_sbrk+0x50>)
 800113c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000308 	.word	0x20000308
 8001150:	200101f0 	.word	0x200101f0
 8001154:	200101e8 	.word	0x200101e8

08001158 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_USART3_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011a2:	f005 fb57 	bl	8006854 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f7ff fe88 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011b4:	f007 ff55 	bl	8009062 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f7ff fe7f 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f007 ff8a 	bl	80090de <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f7ff fe76 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011d6:	f007 ff0b 	bl	8008ff0 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f7ff fe6e 	bl	8000ec0 <Error_Handler>
  }

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000ca58 	.word	0x2000ca58
 80011ec:	40004800 	.word	0x40004800

080011f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <HAL_UART_MspInit+0x88>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12e      	bne.n	8001270 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_UART_MspInit+0x8c>)
 800121a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800124e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_UART_MspInit+0x90>)
 800126c:	f002 fa40 	bl	80036f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004800 	.word	0x40004800
 800127c:	58024400 	.word	0x58024400
 8001280:	58020c00 	.word	0x58020c00

08001284 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800128c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001290:	2209      	movs	r2, #9
 8001292:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001296:	2202      	movs	r2, #2
 8001298:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012cc:	f002 fc22 	bl	8003b14 <HAL_PCD_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012d6:	f7ff fdf3 	bl	8000ec0 <Error_Handler>
  }

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000cae4 	.word	0x2000cae4
 80012e4:	40080000 	.word	0x40080000

080012e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_PCD_MspInit+0xa4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d13b      	bne.n	8001382 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001328:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800133a:	230a      	movs	r3, #10
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <HAL_PCD_MspInit+0xac>)
 8001346:	f002 f9d3 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <HAL_PCD_MspInit+0xac>)
 8001360:	f002 f9c6 	bl	80036f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 8001366:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 800136c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001370:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_PCD_MspInit+0xa8>)
 8001376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800137a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40080000 	.word	0x40080000
 8001390:	58024400 	.word	0x58024400
 8001394:	58020000 	.word	0x58020000

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800139c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800139e:	e003      	b.n	80013a8 <LoopCopyDataInit>

080013a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013a6:	3104      	adds	r1, #4

080013a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b0:	d3f6      	bcc.n	80013a0 <CopyDataInit>
  ldr  r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b4:	e002      	b.n	80013bc <LoopFillZerobss>

080013b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013b8:	f842 3b04 	str.w	r3, [r2], #4

080013bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c0:	d3f9      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c2:	f7ff f965 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f017 ff05 	bl	80191d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fc29 	bl	8000c20 <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013d4:	0801cfe8 	.word	0x0801cfe8
  ldr  r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013dc:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80013e0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80013e4:	200101f0 	.word	0x200101f0

080013e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>

080013ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <LAN8742_RegisterBusIO+0x28>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <LAN8742_RegisterBusIO+0x28>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <LAN8742_RegisterBusIO+0x28>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e014      	b.n	8001442 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d17c      	bne.n	8001568 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e01c      	b.n	80014c2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f107 0208 	add.w	r2, r7, #8
 8001490:	2112      	movs	r1, #18
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	4798      	blx	r3
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	da03      	bge.n	80014a4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800149c:	f06f 0304 	mvn.w	r3, #4
 80014a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014a2:	e00b      	b.n	80014bc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d105      	bne.n	80014bc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
         break;
 80014ba:	e005      	b.n	80014c8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b1f      	cmp	r3, #31
 80014c6:	d9df      	bls.n	8001488 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b1f      	cmp	r3, #31
 80014ce:	d902      	bls.n	80014d6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80014d0:	f06f 0302 	mvn.w	r3, #2
 80014d4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d145      	bne.n	8001568 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6810      	ldr	r0, [r2, #0]
 80014e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014e8:	2100      	movs	r1, #0
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db37      	blt.n	8001562 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6810      	ldr	r0, [r2, #0]
 80014fa:	f107 0208 	add.w	r2, r7, #8
 80014fe:	2100      	movs	r1, #0
 8001500:	4798      	blx	r3
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	db28      	blt.n	800155a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4798      	blx	r3
 800150e:	4603      	mov	r3, r0
 8001510:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001512:	e01c      	b.n	800154e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4798      	blx	r3
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001526:	d80e      	bhi.n	8001546 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6810      	ldr	r0, [r2, #0]
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	2100      	movs	r1, #0
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	da07      	bge.n	800154e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800153e:	f06f 0304 	mvn.w	r3, #4
 8001542:	613b      	str	r3, [r7, #16]
                 break;
 8001544:	e010      	b.n	8001568 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001546:	f06f 0301 	mvn.w	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
               break;
 800154c:	e00c      	b.n	8001568 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1dd      	bne.n	8001514 <LAN8742_Init+0xc6>
 8001558:	e006      	b.n	8001568 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800155a:	f06f 0304 	mvn.w	r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	e002      	b.n	8001568 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001562:	f06f 0303 	mvn.w	r3, #3
 8001566:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d112      	bne.n	8001594 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4798      	blx	r3
 8001574:	4603      	mov	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001578:	bf00      	nop
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4798      	blx	r3
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800158c:	d9f5      	bls.n	800157a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001594:	693b      	ldr	r3, [r7, #16]
 }
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6810      	ldr	r0, [r2, #0]
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	2101      	movs	r1, #1
 80015b8:	4798      	blx	r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da02      	bge.n	80015c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015c0:	f06f 0304 	mvn.w	r3, #4
 80015c4:	e06e      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6810      	ldr	r0, [r2, #0]
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	2101      	movs	r1, #1
 80015d4:	4798      	blx	r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da02      	bge.n	80015e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015dc:	f06f 0304 	mvn.w	r3, #4
 80015e0:	e060      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80015ec:	2301      	movs	r3, #1
 80015ee:	e059      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6810      	ldr	r0, [r2, #0]
 80015f8:	f107 020c 	add.w	r2, r7, #12
 80015fc:	2100      	movs	r1, #0
 80015fe:	4798      	blx	r3
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	da02      	bge.n	800160c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001606:	f06f 0304 	mvn.w	r3, #4
 800160a:	e04b      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11b      	bne.n	800164e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <LAN8742_GetLinkState+0x90>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800162a:	2302      	movs	r3, #2
 800162c:	e03a      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001638:	2303      	movs	r3, #3
 800163a:	e033      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001646:	2304      	movs	r3, #4
 8001648:	e02c      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800164a:	2305      	movs	r3, #5
 800164c:	e02a      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6810      	ldr	r0, [r2, #0]
 8001656:	f107 020c 	add.w	r2, r7, #12
 800165a:	211f      	movs	r1, #31
 800165c:	4798      	blx	r3
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	da02      	bge.n	800166a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001664:	f06f 0304 	mvn.w	r3, #4
 8001668:	e01c      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001674:	2306      	movs	r3, #6
 8001676:	e015      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 031c 	and.w	r3, r3, #28
 800167e:	2b18      	cmp	r3, #24
 8001680:	d101      	bne.n	8001686 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001682:	2302      	movs	r3, #2
 8001684:	e00e      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	2b08      	cmp	r3, #8
 800168e:	d101      	bne.n	8001694 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001690:	2303      	movs	r3, #3
 8001692:	e007      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 031c 	and.w	r3, r3, #28
 800169a:	2b14      	cmp	r3, #20
 800169c:	d101      	bne.n	80016a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800169e:	2304      	movs	r3, #4
 80016a0:	e000      	b.n	80016a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016a2:	2305      	movs	r3, #5
    }				
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f000 f945 	bl	8001942 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b8:	f003 f96c 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80016bc:	4601      	mov	r1, r0
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_Init+0x6c>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	fa21 f303 	lsr.w	r3, r1, r3
 80016d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_Init+0x68>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_Init+0x6c>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_Init+0x70>)
 80016ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_Init+0x74>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fc08 	bl	8000f0c <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e002      	b.n	800170c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001706:	f7ff fbe3 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024400 	.word	0x58024400
 8001718:	0801cdf8 	.word	0x0801cdf8
 800171c:	20000004 	.word	0x20000004
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000000c 	.word	0x2000000c
 8001748:	2000ceec 	.word	0x2000ceec

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2000ceec 	.word	0x2000ceec

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_Delay+0x40>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetREVID+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0c1b      	lsrs	r3, r3, #16
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	5c001000 	.word	0x5c001000

080017c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	58000400 	.word	0x58000400

080017e8 <__NVIC_SetPriorityGrouping>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff4c 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001966:	f7ff ff63 	bl	8001830 <__NVIC_GetPriorityGrouping>
 800196a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7ff ffb3 	bl	80018dc <NVIC_EncodePriority>
 8001976:	4602      	mov	r2, r0
 8001978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff82 	bl	8001888 <__NVIC_SetPriority>
}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff56 	bl	800184c <__NVIC_EnableIRQ>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019ac:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_MPU_Disable+0x24>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <HAL_MPU_Disable+0x24>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_MPU_Disable+0x28>)
 80019be:	2200      	movs	r2, #0
 80019c0:	605a      	str	r2, [r3, #4]
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	e000ed90 	.word	0xe000ed90

080019d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_MPU_Enable+0x34>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MPU_Enable+0x38>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_MPU_Enable+0x38>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019f6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed90 	.word	0xe000ed90
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	785a      	ldrb	r2, [r3, #1]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_MPU_ConfigRegion+0x84>)
 8001a1e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d029      	beq.n	8001a7c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_MPU_ConfigRegion+0x84>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7adb      	ldrb	r3, [r3, #11]
 8001a3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7a9b      	ldrb	r3, [r3, #10]
 8001a42:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7b5b      	ldrb	r3, [r3, #13]
 8001a4a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7b9b      	ldrb	r3, [r3, #14]
 8001a52:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7bdb      	ldrb	r3, [r3, #15]
 8001a5a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7a5b      	ldrb	r3, [r3, #9]
 8001a62:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7a1b      	ldrb	r3, [r3, #8]
 8001a6a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a6c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a76:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a78:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a7a:	e005      	b.n	8001a88 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_MPU_ConfigRegion+0x84>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_MPU_ConfigRegion+0x84>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed90 	.word	0xe000ed90

08001a98 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_GetCurrentCPUID+0x24>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d101      	bne.n	8001aae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e000      	b.n	8001ab0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001aae:	2301      	movs	r3, #1
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0c6      	b.n	8001c60 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f007 ffa8 	bl	8009a30 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2223      	movs	r2, #35	; 0x23
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_ETH_Init+0x1a8>)
 8001ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aec:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_ETH_Init+0x1a8>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_ETH_Init+0x1a8>)
 8001af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7a1b      	ldrb	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fe57 	bl	80017c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b12:	e003      	b.n	8001b1c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b18:	f7ff fe52 	bl	80017c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff fe0a 	bl	800174c <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b3a:	e00f      	b.n	8001b5c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b3c:	f7ff fe06 	bl	800174c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b4a:	d907      	bls.n	8001b5c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	22e0      	movs	r2, #224	; 0xe0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e081      	b.n	8001c60 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e6      	bne.n	8001b3c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f001 fa6e 	bl	8003050 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b74:	f003 f880 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_ETH_Init+0x1ac>)
 8001b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b80:	0c9a      	lsrs	r2, r3, #18
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3a01      	subs	r2, #1
 8001b88:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f001 f9c1 	bl	8002f14 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ba8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bac:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	22e0      	movs	r2, #224	; 0xe0
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e04a      	b.n	8001c60 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_ETH_Init+0x1b0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6952      	ldr	r2, [r2, #20]
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bea:	440b      	add	r3, r1
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f001 fa86 	bl	8003100 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f001 faca 	bl	800318e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	3305      	adds	r3, #5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	021a      	lsls	r2, r3, #8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	061a      	lsls	r2, r3, #24
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	3302      	adds	r3, #2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c46:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2210      	movs	r2, #16
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	431bde83 	.word	0x431bde83
 8001c70:	ffff8001 	.word	0xffff8001

08001c74 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	330a      	adds	r3, #10
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_ETH_DescAssignMemory+0x28>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d904      	bls.n	8001ca6 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e021      	b.n	8001cea <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	330a      	adds	r3, #10
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d17d      	bne.n	8001e14 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2223      	movs	r2, #35	; 0x23
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e018      	b.n	8001d56 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d902      	bls.n	8001d42 <HAL_ETH_Start_IT+0x4c>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	330a      	adds	r3, #10
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	3301      	adds	r3, #1
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d9e3      	bls.n	8001d24 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0202 	orr.w	r2, r2, #2
 8001d70:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6811      	ldr	r1, [r2, #0]
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	f241 1304 	movw	r3, #4356	; 0x1104
 8001dae:	440b      	add	r3, r1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6811      	ldr	r1, [r2, #0]
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dca:	440b      	add	r3, r1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001de0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001de4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2210      	movs	r2, #16
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2222      	movs	r2, #34	; 0x22
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f241 1334 	movw	r3, #4404	; 0x1134
 8001dfa:	4413      	add	r3, r2
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001e06:	431a      	orrs	r2, r3
 8001e08:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e0c:	440b      	add	r3, r1
 8001e0e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e076      	b.n	8001f32 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d171      	bne.n	8001f30 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f001 f9f9 	bl	8003248 <ETH_Prepare_Tx_Descriptors>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e062      	b.n	8001f32 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3206      	adds	r2, #6
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d904      	bls.n	8001e96 <HAL_ETH_Transmit+0x74>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	1f1a      	subs	r2, r3, #4
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	3106      	adds	r1, #6
 8001ea2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ea6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001eaa:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001eac:	f7ff fc4e 	bl	800174c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001eb2:	e034      	b.n	8001f1e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d011      	beq.n	8001eea <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	f043 0208 	orr.w	r2, r3, #8
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	22e0      	movs	r2, #224	; 0xe0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e023      	b.n	8001f32 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d015      	beq.n	8001f1e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff fc2b 	bl	800174c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <HAL_ETH_Transmit+0xe6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2210      	movs	r2, #16
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e009      	b.n	8001f32 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dbc6      	blt.n	8001eb4 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b089      	sub	sp, #36	; 0x24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	332c      	adds	r3, #44	; 0x2c
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d06b      	beq.n	8002044 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e0bc      	b.n	80020ea <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d036      	beq.n	8001ff0 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	3301      	adds	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d902      	bls.n	8001fa4 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b04      	subs	r3, #4
 8001fa2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db11      	blt.n	8001fda <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d902      	bls.n	8001fda <HAL_ETH_IsRxDataAvailable+0xa0>
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e07c      	b.n	80020ea <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002000:	2301      	movs	r3, #1
 8002002:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3301      	adds	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d902      	bls.n	8002016 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3b04      	subs	r3, #4
 8002014:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e010      	b.n	8002044 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	3301      	adds	r3, #1
 8002026:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d902      	bls.n	800203a <HAL_ETH_IsRxDataAvailable+0x100>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3b04      	subs	r3, #4
 8002038:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db02      	blt.n	8002052 <HAL_ETH_IsRxDataAvailable+0x118>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d98e      	bls.n	8001f70 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d044      	beq.n	80020e2 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e036      	b.n	80020da <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800207a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d902      	bls.n	80020ca <HAL_ETH_IsRxDataAvailable+0x190>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3b04      	subs	r3, #4
 80020c8:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d3c4      	bcc.n	800206c <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]

  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b08a      	sub	sp, #40	; 0x28
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	332c      	adds	r3, #44	; 0x2c
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07d      	b.n	800222a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff feff 	bl	8001f3a <HAL_ETH_IsRxDataAvailable>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e071      	b.n	800222a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002154:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e031      	b.n	80021c0 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	461a      	mov	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002196:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3301      	adds	r3, #1
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d902      	bls.n	80021aa <HAL_ETH_GetRxDataBuffer+0xb4>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3b04      	subs	r3, #4
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b2:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	3301      	adds	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d3c7      	bcc.n	800215c <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	461a      	mov	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d803      	bhi.n	80021f6 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	e018      	b.n	8002228 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	461a      	mov	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	1ad2      	subs	r2, r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e001      	b.n	8002228 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	332c      	adds	r3, #44	; 0x2c
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fe72 	bl	8001f3a <HAL_ETH_IsRxDataAvailable>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e017      	b.n	8002290 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4413      	add	r3, r2
 8002268:	3b01      	subs	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d902      	bls.n	8002278 <HAL_ETH_GetRxDataLength+0x46>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3b04      	subs	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	332c      	adds	r3, #44	; 0x2c
 80022a4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e055      	b.n	8002374 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e03c      	b.n	8002356 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ea:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d009      	beq.n	8002308 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	3b01      	subs	r3, #1
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d20d      	bcs.n	8002350 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d902      	bls.n	8002346 <HAL_ETH_BuildRxDescriptors+0xae>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3b04      	subs	r3, #4
 8002344:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	3301      	adds	r3, #1
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	429a      	cmp	r2, r3
 800235c:	d3be      	bcc.n	80022dc <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	f241 1328 	movw	r3, #4392	; 0x1128
 8002368:	440b      	add	r3, r1
 800236a:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3724      	adds	r7, #36	; 0x24
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d113      	bne.n	80023c2 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f241 1334 	movw	r3, #4404	; 0x1134
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b40      	cmp	r3, #64	; 0x40
 80023ac:	d109      	bne.n	80023c2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f007 fc14 	bl	8009bdc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80023bc:	f248 0240 	movw	r2, #32832	; 0x8040
 80023c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d113      	bne.n	80023fc <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f241 1334 	movw	r3, #4404	; 0x1134
 80023dc:	4413      	add	r3, r2
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d109      	bne.n	80023fc <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8c7 	bl	800257c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80023f6:	f248 0201 	movw	r2, #32769	; 0x8001
 80023fa:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240e:	d149      	bne.n	80024a4 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	f241 1334 	movw	r3, #4404	; 0x1134
 8002418:	4413      	add	r3, r2
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002424:	d13e      	bne.n	80024a4 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f043 0208 	orr.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002444:	d11b      	bne.n	800247e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	f241 1302 	movw	r3, #4354	; 0x1102
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002472:	440b      	add	r3, r1
 8002474:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	22e0      	movs	r2, #224	; 0xe0
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
 800247c:	e00f      	b.n	800249e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002498:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800249c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f876 	bl	8002590 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024ac:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80024b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80024b4:	d10e      	bne.n	80024d4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	22e0      	movs	r2, #224	; 0xe0
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f86b 	bl	80025a4 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d10d      	bne.n	8002500 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f85f 	bl	80025b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d10d      	bne.n	800252c <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f853 	bl	80025cc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800252c:	f7ff fab4 	bl	8001a98 <HAL_GetCurrentCPUID>
 8002530:	4603      	mov	r3, r0
 8002532:	2b03      	cmp	r3, #3
 8002534:	d10d      	bne.n	8002552 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_ETH_IRQHandler+0x1f4>)
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_ETH_IRQHandler+0x1f4>)
 8002544:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f848 	bl	80025e0 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8002550:	e00c      	b.n	800256c <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_ETH_IRQHandler+0x1f8>)
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_ETH_IRQHandler+0x1f8>)
 8002560:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f83a 	bl	80025e0 <HAL_ETH_WakeUpCallback>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58000080 	.word	0x58000080
 8002578:	580000c0 	.word	0x580000c0

0800257c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e03e      	b.n	8002694 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800261e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f043 030c 	orr.w	r3, r3, #12
 8002642:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002656:	f7ff f879 	bl	800174c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800265c:	e009      	b.n	8002672 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800265e:	f7ff f875 	bl	800174c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266c:	d901      	bls.n	8002672 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e010      	b.n	8002694 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ed      	bne.n	800265e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e03c      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 030c 	bic.w	r3, r3, #12
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ETH_WritePHYRegister+0xa4>)
 80026fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_ETH_WritePHYRegister+0xa4>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800270a:	f7ff f81f 	bl	800174c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002710:	e009      	b.n	8002726 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002712:	f7ff f81b 	bl	800174c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002720:	d901      	bls.n	8002726 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e008      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ed      	bne.n	8002712 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40028000 	.word	0x40028000

08002744 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e1c3      	b.n	8002ae0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a6c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a7c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00a      	b.n	8002b16 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d105      	bne.n	8002b14 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f860 	bl	8002bd0 <ETH_SetMACConfig>

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b30:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b38:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b3a:	f002 f89d 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8002b3e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d908      	bls.n	8002b5a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d804      	bhi.n	8002b5a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e027      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d908      	bls.n	8002b74 <HAL_ETH_SetMDIOClockRange+0x54>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d804      	bhi.n	8002b74 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e01a      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d903      	bls.n	8002b84 <HAL_ETH_SetMDIOClockRange+0x64>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d911      	bls.n	8002ba8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d908      	bls.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x7e>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d804      	bhi.n	8002b9e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e005      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e000      	b.n	8002baa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ba8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	01312cff 	.word	0x01312cff
 8002bc0:	02160ebf 	.word	0x02160ebf
 8002bc4:	039386ff 	.word	0x039386ff
 8002bc8:	05f5e0ff 	.word	0x05f5e0ff
 8002bcc:	08f0d17f 	.word	0x08f0d17f

08002bd0 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002be2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	791b      	ldrb	r3, [r3, #4]
 8002be8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002bea:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	7b1b      	ldrb	r3, [r3, #12]
 8002bf0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002bf2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	7b5b      	ldrb	r3, [r3, #13]
 8002bf8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bfa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	7b9b      	ldrb	r3, [r3, #14]
 8002c00:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7bdb      	ldrb	r3, [r3, #15]
 8002c08:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c0a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	7c12      	ldrb	r2, [r2, #16]
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d102      	bne.n	8002c1a <ETH_SetMACConfig+0x4a>
 8002c14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c18:	e000      	b.n	8002c1c <ETH_SetMACConfig+0x4c>
 8002c1a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c1c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	7c52      	ldrb	r2, [r2, #17]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d102      	bne.n	8002c2c <ETH_SetMACConfig+0x5c>
 8002c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c2a:	e000      	b.n	8002c2e <ETH_SetMACConfig+0x5e>
 8002c2c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c2e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7c9b      	ldrb	r3, [r3, #18]
 8002c34:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c36:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002c3c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002c42:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002c4a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	7f5b      	ldrb	r3, [r3, #29]
 8002c50:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002c52:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	7f92      	ldrb	r2, [r2, #30]
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d102      	bne.n	8002c62 <ETH_SetMACConfig+0x92>
 8002c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c60:	e000      	b.n	8002c64 <ETH_SetMACConfig+0x94>
 8002c62:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002c64:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	7fdb      	ldrb	r3, [r3, #31]
 8002c6a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002c6c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c74:	2a00      	cmp	r2, #0
 8002c76:	d102      	bne.n	8002c7e <ETH_SetMACConfig+0xae>
 8002c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7c:	e000      	b.n	8002c80 <ETH_SetMACConfig+0xb0>
 8002c7e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002c80:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002c86:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002c90:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <ETH_SetMACConfig+0x22c>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002cbc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002cc6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cce:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002cd0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	d102      	bne.n	8002ce2 <ETH_SetMACConfig+0x112>
 8002cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ce0:	e000      	b.n	8002ce4 <ETH_SetMACConfig+0x114>
 8002ce2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002ce4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <ETH_SetMACConfig+0x230>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	68f9      	ldr	r1, [r7, #12]
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d08:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <ETH_SetMACConfig+0x234>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d2c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d32:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	d101      	bne.n	8002d42 <ETH_SetMACConfig+0x172>
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	e000      	b.n	8002d44 <ETH_SetMACConfig+0x174>
 8002d42:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d44:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d56:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002d6c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d74:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f023 0103 	bic.w	r1, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d9a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d101      	bne.n	8002dbe <ETH_SetMACConfig+0x1ee>
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	e000      	b.n	8002dc0 <ETH_SetMACConfig+0x1f0>
 8002dbe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002dc0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002dc8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dca:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002dd2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002de0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	00048083 	.word	0x00048083
 8002e00:	c0f88000 	.word	0xc0f88000
 8002e04:	fffffef0 	.word	0xfffffef0

08002e08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <ETH_SetDMAConfig+0xf8>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	6809      	ldr	r1, [r1, #0]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002e2e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	791b      	ldrb	r3, [r3, #4]
 8002e34:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e3a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	7b1b      	ldrb	r3, [r3, #12]
 8002e40:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002e4e:	4413      	add	r3, r2
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <ETH_SetDMAConfig+0xfc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002e62:	440b      	add	r3, r1
 8002e64:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7b5b      	ldrb	r3, [r3, #13]
 8002e6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <ETH_SetDMAConfig+0x100>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6811      	ldr	r1, [r2, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002e8e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	7d1b      	ldrb	r3, [r3, #20]
 8002e98:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e9a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7f5b      	ldrb	r3, [r3, #29]
 8002ea0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f241 1304 	movw	r3, #4356	; 0x1104
 8002eae:	4413      	add	r3, r2
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <ETH_SetDMAConfig+0x104>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ec2:	440b      	add	r3, r1
 8002ec4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7f1b      	ldrb	r3, [r3, #28]
 8002eca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002edc:	4413      	add	r3, r2
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <ETH_SetDMAConfig+0x108>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6811      	ldr	r1, [r2, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ef0:	440b      	add	r3, r1
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	ffff87fd 	.word	0xffff87fd
 8002f04:	ffff2ffe 	.word	0xffff2ffe
 8002f08:	fffec000 	.word	0xfffec000
 8002f0c:	ffc0efef 	.word	0xffc0efef
 8002f10:	7fc0ffff 	.word	0x7fc0ffff

08002f14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0a4      	sub	sp, #144	; 0x90
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f22:	2300      	movs	r3, #0
 8002f24:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002f6c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002f70:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002f96:	2300      	movs	r3, #0
 8002f98:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fac:	2320      	movs	r3, #32
 8002fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fbe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fc8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fde6 	bl	8002bd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003004:	2301      	movs	r3, #1
 8003006:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003008:	2301      	movs	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800301e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003022:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003028:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800302c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003034:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fee1 	bl	8002e08 <ETH_SetDMAConfig>
}
 8003046:	bf00      	nop
 8003048:	3790      	adds	r7, #144	; 0x90
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003060:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003068:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800306a:	f001 fe05 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 800306e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d908      	bls.n	800308a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d804      	bhi.n	800308a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e027      	b.n	80030da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d908      	bls.n	80030a4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d804      	bhi.n	80030a4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e01a      	b.n	80030da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d903      	bls.n	80030b4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d911      	bls.n	80030d8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d908      	bls.n	80030ce <ETH_MAC_MDIO_ClkConfig+0x7e>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d804      	bhi.n	80030ce <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e005      	b.n	80030da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e000      	b.n	80030da <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80030d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	01312cff 	.word	0x01312cff
 80030f0:	02160ebf 	.word	0x02160ebf
 80030f4:	039386ff 	.word	0x039386ff
 80030f8:	05f5e0ff 	.word	0x05f5e0ff
 80030fc:	08f0d17f 	.word	0x08f0d17f

08003100 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e01d      	b.n	800314a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	3206      	adds	r2, #6
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d9de      	bls.n	800310e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f241 132c 	movw	r3, #4396	; 0x112c
 800315e:	4413      	add	r3, r2
 8003160:	2203      	movs	r2, #3
 8003162:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68d9      	ldr	r1, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003170:	4413      	add	r3, r2
 8003172:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e024      	b.n	80031e6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6919      	ldr	r1, [r3, #16]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	330a      	adds	r3, #10
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d9d7      	bls.n	800319c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003212:	4413      	add	r3, r2
 8003214:	2203      	movs	r2, #3
 8003216:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6919      	ldr	r1, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f241 131c 	movw	r3, #4380	; 0x111c
 8003224:	4413      	add	r3, r2
 8003226:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f241 1328 	movw	r3, #4392	; 0x1128
 8003238:	4413      	add	r3, r2
 800323a:	6019      	str	r1, [r3, #0]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003248:	b480      	push	{r7}
 800324a:	b08d      	sub	sp, #52	; 0x34
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3318      	adds	r3, #24
 8003258:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003272:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003286:	d101      	bne.n	800328c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8003288:	2302      	movs	r3, #2
 800328a:	e223      	b.n	80036d4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d044      	beq.n	8003322 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b72      	ldr	r3, [pc, #456]	; (8003468 <ETH_Prepare_Tx_Descriptors+0x220>)
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d027      	beq.n	8003322 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	431a      	orrs	r2, r3
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003310:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003320:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00e      	beq.n	800334c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	4b4e      	ldr	r3, [pc, #312]	; (800346c <ETH_Prepare_Tx_Descriptors+0x224>)
 8003334:	4013      	ands	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	6992      	ldr	r2, [r2, #24]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <ETH_Prepare_Tx_Descriptors+0x11c>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d030      	beq.n	80033c6 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	3301      	adds	r3, #1
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b03      	cmp	r3, #3
 8003386:	d902      	bls.n	800338e <ETH_Prepare_Tx_Descriptors+0x146>
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	3b04      	subs	r3, #4
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003396:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	3301      	adds	r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033aa:	d10c      	bne.n	80033c6 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e186      	b.n	80036d4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	3301      	adds	r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <ETH_Prepare_Tx_Descriptors+0x224>)
 80033dc:	4013      	ands	r3, r2
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	6852      	ldr	r2, [r2, #4]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003406:	4013      	ands	r3, r2
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	6852      	ldr	r2, [r2, #4]
 800340c:	0412      	lsls	r2, r2, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e008      	b.n	8003428 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	2200      	movs	r2, #0
 800341a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003422:	4013      	ands	r3, r2
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d021      	beq.n	8003478 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	04db      	lsls	r3, r3, #19
 8003442:	431a      	orrs	r2, r3
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	69d2      	ldr	r2, [r2, #28]
 8003454:	431a      	orrs	r2, r3
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	e02e      	b.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x27e>
 8003468:	ffff0000 	.word	0xffff0000
 800346c:	ffffc000 	.word	0xffffc000
 8003470:	c000ffff 	.word	0xc000ffff
 8003474:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4b98      	ldr	r3, [pc, #608]	; (80036e0 <ETH_Prepare_Tx_Descriptors+0x498>)
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	431a      	orrs	r2, r3
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	431a      	orrs	r2, r3
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80c0 	beq.w	8003696 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	431a      	orrs	r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003528:	e0b5      	b.n	8003696 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	3301      	adds	r3, #1
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	2b03      	cmp	r3, #3
 8003540:	d902      	bls.n	8003548 <ETH_Prepare_Tx_Descriptors+0x300>
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	3b04      	subs	r3, #4
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003550:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356a:	d126      	bne.n	80035ba <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003578:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	e016      	b.n	80035ae <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	3301      	adds	r3, #1
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b03      	cmp	r3, #3
 8003596:	d902      	bls.n	800359e <ETH_Prepare_Tx_Descriptors+0x356>
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	3b04      	subs	r3, #4
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	3301      	adds	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3e4      	bcc.n	8003580 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	e08c      	b.n	80036d4 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	3301      	adds	r3, #1
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	6852      	ldr	r2, [r2, #4]
 80035dc:	431a      	orrs	r2, r3
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003600:	4013      	ands	r3, r2
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	6852      	ldr	r2, [r2, #4]
 8003606:	0412      	lsls	r2, r2, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	e008      	b.n	8003622 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2200      	movs	r2, #0
 8003614:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800361c:	4013      	ands	r3, r2
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	69d2      	ldr	r2, [r2, #28]
 800363a:	431a      	orrs	r2, r3
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e017      	b.n	800367e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003654:	4013      	ands	r3, r2
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	431a      	orrs	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	431a      	orrs	r2, r3
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f47f af45 	bne.w	800352a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	e005      	b.n	80036c0 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d0:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3734      	adds	r7, #52	; 0x34
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	ffff8000 	.word	0xffff8000
 80036e4:	ffffc000 	.word	0xffffc000
 80036e8:	c000ffff 	.word	0xc000ffff
 80036ec:	fffc0000 	.word	0xfffc0000

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_GPIO_Init+0x234>)
 8003700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003702:	e194      	b.n	8003a2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8186 	beq.w	8003a28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d00b      	beq.n	800373c <HAL_GPIO_Init+0x4c>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d007      	beq.n	800373c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003730:	2b11      	cmp	r3, #17
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0201 	and.w	r2, r3, #1
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0xee>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d123      	bne.n	8003826 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80e0 	beq.w	8003a28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003868:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_GPIO_Init+0x238>)
 800386a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800386e:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_GPIO_Init+0x238>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_GPIO_Init+0x238>)
 800387a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_GPIO_Init+0x23c>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a20      	ldr	r2, [pc, #128]	; (8003930 <HAL_GPIO_Init+0x240>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d052      	beq.n	8003958 <HAL_GPIO_Init+0x268>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <HAL_GPIO_Init+0x244>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_GPIO_Init+0x22e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_GPIO_Init+0x248>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02b      	beq.n	800391a <HAL_GPIO_Init+0x22a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_GPIO_Init+0x24c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d025      	beq.n	8003916 <HAL_GPIO_Init+0x226>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <HAL_GPIO_Init+0x250>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <HAL_GPIO_Init+0x222>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_GPIO_Init+0x254>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x21e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_GPIO_Init+0x258>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x21a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_GPIO_Init+0x25c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x216>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_GPIO_Init+0x260>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x212>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_GPIO_Init+0x264>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x20e>
 80038fa:	2309      	movs	r3, #9
 80038fc:	e02d      	b.n	800395a <HAL_GPIO_Init+0x26a>
 80038fe:	230a      	movs	r3, #10
 8003900:	e02b      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003902:	2308      	movs	r3, #8
 8003904:	e029      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003906:	2307      	movs	r3, #7
 8003908:	e027      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800390a:	2306      	movs	r3, #6
 800390c:	e025      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800390e:	2305      	movs	r3, #5
 8003910:	e023      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003912:	2304      	movs	r3, #4
 8003914:	e021      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003916:	2303      	movs	r3, #3
 8003918:	e01f      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800391a:	2302      	movs	r3, #2
 800391c:	e01d      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800391e:	2301      	movs	r3, #1
 8003920:	e01b      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003922:	bf00      	nop
 8003924:	58000080 	.word	0x58000080
 8003928:	58024400 	.word	0x58024400
 800392c:	58000400 	.word	0x58000400
 8003930:	58020000 	.word	0x58020000
 8003934:	58020400 	.word	0x58020400
 8003938:	58020800 	.word	0x58020800
 800393c:	58020c00 	.word	0x58020c00
 8003940:	58021000 	.word	0x58021000
 8003944:	58021400 	.word	0x58021400
 8003948:	58021800 	.word	0x58021800
 800394c:	58021c00 	.word	0x58021c00
 8003950:	58022000 	.word	0x58022000
 8003954:	58022400 	.word	0x58022400
 8003958:	2300      	movs	r3, #0
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f002 0203 	and.w	r2, r2, #3
 8003960:	0092      	lsls	r2, r2, #2
 8003962:	4093      	lsls	r3, r2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800396a:	4938      	ldr	r1, [pc, #224]	; (8003a4c <HAL_GPIO_Init+0x35c>)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	3302      	adds	r3, #2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f ae63 	bne.w	8003704 <HAL_GPIO_Init+0x14>
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58000400 	.word	0x58000400

08003a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a60:	787b      	ldrb	r3, [r7, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a6c:	e003      	b.n	8003a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	041a      	lsls	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	619a      	str	r2, [r3, #24]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	401a      	ands	r2, r3
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d104      	bne.n	8003aa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	041a      	lsls	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003aa4:	e002      	b.n	8003aac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_HSEM_FastTake+0x2c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <HAL_HSEM_FastTake+0x30>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	58026400 	.word	0x58026400
 8003ae8:	80000300 	.word	0x80000300

08003aec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003af6:	4906      	ldr	r1, [pc, #24]	; (8003b10 <HAL_HSEM_Release+0x24>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	58026400 	.word	0x58026400

08003b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b08f      	sub	sp, #60	; 0x3c
 8003b18:	af0a      	add	r7, sp, #40	; 0x28
 8003b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e116      	b.n	8003d54 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fd fbd1 	bl	80012e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fbc3 	bl	80092f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	687e      	ldr	r6, [r7, #4]
 8003b72:	466d      	mov	r5, sp
 8003b74:	f106 0410 	add.w	r4, r6, #16
 8003b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b84:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b88:	1d33      	adds	r3, r6, #4
 8003b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b8c:	6838      	ldr	r0, [r7, #0]
 8003b8e:	f005 fb4d 	bl	800922c <USB_CoreInit>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0d7      	b.n	8003d54 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 fbb1 	bl	8009312 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e04a      	b.n	8003c4c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	333d      	adds	r3, #61	; 0x3d
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	333c      	adds	r3, #60	; 0x3c
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	b298      	uxth	r0, r3
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3342      	adds	r3, #66	; 0x42
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	333f      	adds	r3, #63	; 0x3f
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3344      	adds	r3, #68	; 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3348      	adds	r3, #72	; 0x48
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3350      	adds	r3, #80	; 0x50
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3af      	bcc.n	8003bb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e044      	b.n	8003ce6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3b5      	bcc.n	8003c5c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	687e      	ldr	r6, [r7, #4]
 8003cf8:	466d      	mov	r5, sp
 8003cfa:	f106 0410 	add.w	r4, r6, #16
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d0e:	1d33      	adds	r3, r6, #4
 8003d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f005 fb28 	bl	8009368 <USB_DevInit>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e014      	b.n	8003d54 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d102      	bne.n	8003d48 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f80a 	bl	8003d5c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 fcca 	bl	80096e6 <USB_DevDisconnect>

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	10000003 	.word	0x10000003

08003da4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003dac:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d00a      	beq.n	8003dce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e040      	b.n	8003e4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e03e      	b.n	8003e4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003dd6:	491f      	ldr	r1, [pc, #124]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dde:	f7fd fcb5 	bl	800174c <HAL_GetTick>
 8003de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003de4:	e009      	b.n	8003dfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003de6:	f7fd fcb1 	bl	800174c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df4:	d901      	bls.n	8003dfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e028      	b.n	8003e4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	d1ee      	bne.n	8003de6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b1e      	cmp	r3, #30
 8003e0c:	d008      	beq.n	8003e20 <HAL_PWREx_ConfigSupply+0x7c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b2e      	cmp	r3, #46	; 0x2e
 8003e12:	d005      	beq.n	8003e20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b1d      	cmp	r3, #29
 8003e18:	d002      	beq.n	8003e20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b2d      	cmp	r3, #45	; 0x2d
 8003e1e:	d114      	bne.n	8003e4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e20:	f7fd fc94 	bl	800174c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e26:	e009      	b.n	8003e3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e28:	f7fd fc90 	bl	800174c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e36:	d901      	bls.n	8003e3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e007      	b.n	8003e4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d1ee      	bne.n	8003e28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	58024800 	.word	0x58024800

08003e58 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	60d3      	str	r3, [r2, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	58024800 	.word	0x58024800

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e3c4      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8087 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e98:	4ba2      	ldr	r3, [pc, #648]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ea2:	4ba0      	ldr	r3, [pc, #640]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d007      	beq.n	8003ebe <HAL_RCC_OscConfig+0x46>
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	2b18      	cmp	r3, #24
 8003eb2:	d110      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	4b99      	ldr	r3, [pc, #612]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d06c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d168      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e39e      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ede:	d106      	bne.n	8003eee <HAL_RCC_OscConfig+0x76>
 8003ee0:	4b90      	ldr	r3, [pc, #576]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a8f      	ldr	r2, [pc, #572]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e02e      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x98>
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a8a      	ldr	r2, [pc, #552]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0xbc>
 8003f1a:	4b82      	ldr	r3, [pc, #520]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a81      	ldr	r2, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b7f      	ldr	r3, [pc, #508]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7e      	ldr	r2, [pc, #504]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f34:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b78      	ldr	r3, [pc, #480]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a77      	ldr	r2, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fbfa 	bl	800174c <HAL_GetTick>
 8003f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd fbf6 	bl	800174c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e352      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xe4>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fbe6 	bl	800174c <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fd fbe2 	bl	800174c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e33e      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f96:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x10c>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8092 	beq.w	80040d8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fbe:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_RCC_OscConfig+0x162>
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	2b18      	cmp	r3, #24
 8003fce:	d12d      	bne.n	800402c <HAL_RCC_OscConfig+0x1b4>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d128      	bne.n	800402c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fda:	4b52      	ldr	r3, [pc, #328]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x17a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e310      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	f7fd fbd9 	bl	80017a8 <HAL_GetREVID>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d80a      	bhi.n	8004016 <HAL_RCC_OscConfig+0x19e>
 8004000:	4b48      	ldr	r3, [pc, #288]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	4945      	ldr	r1, [pc, #276]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	e060      	b.n	80040d8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	493f      	ldr	r1, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402a:	e055      	b.n	80040d8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d038      	beq.n	80040a6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 0219 	bic.w	r2, r3, #25
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4938      	ldr	r1, [pc, #224]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd fb81 	bl	800174c <HAL_GetTick>
 800404a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7fd fb7d 	bl	800174c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e2d9      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	f7fd fb9c 	bl	80017a8 <HAL_GetREVID>
 8004070:	4602      	mov	r2, r0
 8004072:	f241 0303 	movw	r3, #4099	; 0x1003
 8004076:	429a      	cmp	r2, r3
 8004078:	d80a      	bhi.n	8004090 <HAL_RCC_OscConfig+0x218>
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	031b      	lsls	r3, r3, #12
 8004088:	4926      	ldr	r1, [pc, #152]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
 800408e:	e023      	b.n	80040d8 <HAL_RCC_OscConfig+0x260>
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	4921      	ldr	r1, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	e018      	b.n	80040d8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd fb4b 	bl	800174c <HAL_GetTick>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd fb47 	bl	800174c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e2a3      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8091 	beq.w	8004208 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d007      	beq.n	800410c <HAL_RCC_OscConfig+0x294>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b18      	cmp	r3, #24
 8004100:	d12f      	bne.n	8004162 <HAL_RCC_OscConfig+0x2ea>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d12a      	bne.n	8004162 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_RCC_OscConfig+0x2b0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d003      	beq.n	8004128 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e277      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
 8004124:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004128:	f7fd fb3e 	bl	80017a8 <HAL_GetREVID>
 800412c:	4602      	mov	r2, r0
 800412e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004132:	429a      	cmp	r2, r3
 8004134:	d80a      	bhi.n	800414c <HAL_RCC_OscConfig+0x2d4>
 8004136:	4ba2      	ldr	r3, [pc, #648]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	069b      	lsls	r3, r3, #26
 8004144:	499e      	ldr	r1, [pc, #632]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800414a:	e05d      	b.n	8004208 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800414c:	4b9c      	ldr	r3, [pc, #624]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	4999      	ldr	r1, [pc, #612]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800415c:	4313      	orrs	r3, r2
 800415e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004160:	e052      	b.n	8004208 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d035      	beq.n	80041d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800416a:	4b95      	ldr	r3, [pc, #596]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a94      	ldr	r2, [pc, #592]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fd fae9 	bl	800174c <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800417e:	f7fd fae5 	bl	800174c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e241      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004190:	4b8b      	ldr	r3, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800419c:	f7fd fb04 	bl	80017a8 <HAL_GetREVID>
 80041a0:	4602      	mov	r2, r0
 80041a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d80a      	bhi.n	80041c0 <HAL_RCC_OscConfig+0x348>
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	069b      	lsls	r3, r3, #26
 80041b8:	4981      	ldr	r1, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	e023      	b.n	8004208 <HAL_RCC_OscConfig+0x390>
 80041c0:	4b7f      	ldr	r3, [pc, #508]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	497c      	ldr	r1, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60cb      	str	r3, [r1, #12]
 80041d4:	e018      	b.n	8004208 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fab3 	bl	800174c <HAL_GetTick>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041ea:	f7fd faaf 	bl	800174c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e20b      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041fc:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d036      	beq.n	8004282 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d019      	beq.n	8004250 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	4a67      	ldr	r2, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd fa90 	bl	800174c <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd fa8c 	bl	800174c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1e8      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x3b8>
 800424e:	e018      	b.n	8004282 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	4a5a      	ldr	r2, [pc, #360]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fd fa76 	bl	800174c <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004264:	f7fd fa72 	bl	800174c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e1ce      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004276:	4b52      	ldr	r3, [pc, #328]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d019      	beq.n	80042ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004296:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800429c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042a2:	f7fd fa53 	bl	800174c <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042aa:	f7fd fa4f 	bl	800174c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e1ab      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042bc:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x432>
 80042c8:	e018      	b.n	80042fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ca:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3c      	ldr	r2, [pc, #240]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80042d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042d6:	f7fd fa39 	bl	800174c <HAL_GetTick>
 80042da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042de:	f7fd fa35 	bl	800174c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e191      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8086 	beq.w	8004416 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_RCC_OscConfig+0x54c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2d      	ldr	r2, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x54c>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004316:	f7fd fa19 	bl	800174c <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fd fa15 	bl	800174c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	; 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e171      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_OscConfig+0x54c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4da>
 8004344:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	e02d      	b.n	80043ae <HAL_RCC_OscConfig+0x536>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x4fc>
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
 8004372:	e01c      	b.n	80043ae <HAL_RCC_OscConfig+0x536>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_OscConfig+0x51e>
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	e00b      	b.n	80043ae <HAL_RCC_OscConfig+0x536>
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x548>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01a      	beq.n	80043ec <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd f9c9 	bl	800174c <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043bc:	e00f      	b.n	80043de <HAL_RCC_OscConfig+0x566>
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fd f9c0 	bl	800174c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e11a      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043de:	4b8f      	ldr	r3, [pc, #572]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ee      	beq.n	80043c8 <HAL_RCC_OscConfig+0x550>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd f9ae 	bl	800174c <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fd f9aa 	bl	800174c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e104      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800440a:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ee      	bne.n	80043f4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80f9 	beq.w	8004612 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004420:	4b7e      	ldr	r3, [pc, #504]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004428:	2b18      	cmp	r3, #24
 800442a:	f000 80b4 	beq.w	8004596 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b02      	cmp	r3, #2
 8004434:	f040 8095 	bne.w	8004562 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b78      	ldr	r3, [pc, #480]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd f982 	bl	800174c <HAL_GetTick>
 8004448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd f97e 	bl	800174c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0da      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445e:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446a:	4b6c      	ldr	r3, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446e:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x7a8>)
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	430a      	orrs	r2, r1
 800447e:	4967      	ldr	r1, [pc, #412]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	628b      	str	r3, [r1, #40]	; 0x28
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	3b01      	subs	r3, #1
 800448a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	3b01      	subs	r3, #1
 8004494:	025b      	lsls	r3, r3, #9
 8004496:	b29b      	uxth	r3, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	3b01      	subs	r3, #1
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	3b01      	subs	r3, #1
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044b4:	4959      	ldr	r1, [pc, #356]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044ba:	4b58      	ldr	r3, [pc, #352]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a57      	ldr	r2, [pc, #348]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044c6:	4b55      	ldr	r3, [pc, #340]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <HAL_RCC_OscConfig+0x7ac>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044d2:	00d2      	lsls	r2, r2, #3
 80044d4:	4951      	ldr	r1, [pc, #324]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044da:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f023 020c 	bic.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044ec:	4b4b      	ldr	r3, [pc, #300]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f023 0202 	bic.w	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	4948      	ldr	r1, [pc, #288]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a46      	ldr	r2, [pc, #280]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4a43      	ldr	r2, [pc, #268]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	4a40      	ldr	r2, [pc, #256]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004522:	4b3e      	ldr	r3, [pc, #248]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a3d      	ldr	r2, [pc, #244]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3a      	ldr	r2, [pc, #232]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd f907 	bl	800174c <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004542:	f7fd f903 	bl	800174c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e05f      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004554:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x6ca>
 8004560:	e057      	b.n	8004612 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2d      	ldr	r2, [pc, #180]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fd f8ed 	bl	800174c <HAL_GetTick>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004576:	f7fd f8e9 	bl	800174c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e045      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x6fe>
 8004594:	e03d      	b.n	8004612 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d031      	beq.n	800460e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0203 	and.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d12a      	bne.n	800460e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d122      	bne.n	800460e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d11a      	bne.n	800460e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d111      	bne.n	800460e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d108      	bne.n	800460e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3730      	adds	r7, #48	; 0x30
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	58024400 	.word	0x58024400
 8004620:	fffffc0c 	.word	0xfffffc0c
 8004624:	ffff0007 	.word	0xffff0007

08004628 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e19c      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b8a      	ldr	r3, [pc, #552]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d910      	bls.n	800466c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b87      	ldr	r3, [pc, #540]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4985      	ldr	r1, [pc, #532]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b83      	ldr	r3, [pc, #524]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e184      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004684:	429a      	cmp	r2, r3
 8004686:	d908      	bls.n	800469a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004688:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4975      	ldr	r1, [pc, #468]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	4b70      	ldr	r3, [pc, #448]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d908      	bls.n	80046c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046b6:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	496a      	ldr	r1, [pc, #424]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b64      	ldr	r3, [pc, #400]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d908      	bls.n	80046f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	495e      	ldr	r1, [pc, #376]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800470e:	429a      	cmp	r2, r3
 8004710:	d908      	bls.n	8004724 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4953      	ldr	r1, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4b4d      	ldr	r3, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	429a      	cmp	r2, r3
 800473e:	d908      	bls.n	8004752 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b4a      	ldr	r3, [pc, #296]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f023 020f 	bic.w	r2, r3, #15
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4947      	ldr	r1, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800474e:	4313      	orrs	r3, r2
 8004750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d055      	beq.n	800480a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800475e:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4940      	ldr	r1, [pc, #256]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800476c:	4313      	orrs	r3, r2
 800476e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004778:	4b3c      	ldr	r3, [pc, #240]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d121      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0f6      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d115      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0ea      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0de      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d6      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f023 0207 	bic.w	r2, r3, #7
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4925      	ldr	r1, [pc, #148]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fc ffb7 	bl	800174c <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7fc ffb3 	bl	800174c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0be      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f8:	4b1c      	ldr	r3, [pc, #112]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	429a      	cmp	r2, r3
 8004808:	d1eb      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	429a      	cmp	r2, r3
 8004824:	d208      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f023 020f 	bic.w	r2, r3, #15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004834:	4313      	orrs	r3, r2
 8004836:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d214      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 020f 	bic.w	r2, r3, #15
 800484e:	4906      	ldr	r1, [pc, #24]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e086      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
 8004868:	52002000 	.word	0x52002000
 800486c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004888:	429a      	cmp	r2, r3
 800488a:	d208      	bcs.n	800489e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	4939      	ldr	r1, [pc, #228]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800489a:	4313      	orrs	r3, r2
 800489c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d208      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	492e      	ldr	r1, [pc, #184]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d208      	bcs.n	80048fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4922      	ldr	r1, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004912:	429a      	cmp	r2, r3
 8004914:	d208      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4917      	ldr	r1, [pc, #92]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004924:	4313      	orrs	r3, r2
 8004926:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004928:	f000 f834 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800492c:	4601      	mov	r1, r0
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	4a12      	ldr	r2, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x35c>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa21 f303 	lsr.w	r3, r1, r3
 8004944:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_RCC_ClockConfig+0x35c>)
 8004950:	5cd3      	ldrb	r3, [r2, r3]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x360>)
 800495e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <HAL_RCC_ClockConfig+0x364>)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x368>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc face 	bl	8000f0c <HAL_InitTick>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	0801cdf8 	.word	0x0801cdf8
 8004988:	20000004 	.word	0x20000004
 800498c:	20000000 	.word	0x20000000
 8004990:	20000008 	.word	0x20000008

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800499a:	4baf      	ldr	r3, [pc, #700]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a2:	2b18      	cmp	r3, #24
 80049a4:	f200 814e 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x2b0>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004c45 	.word	0x08004c45
 80049b8:	08004c45 	.word	0x08004c45
 80049bc:	08004c45 	.word	0x08004c45
 80049c0:	08004c45 	.word	0x08004c45
 80049c4:	08004c45 	.word	0x08004c45
 80049c8:	08004c45 	.word	0x08004c45
 80049cc:	08004c45 	.word	0x08004c45
 80049d0:	08004a3b 	.word	0x08004a3b
 80049d4:	08004c45 	.word	0x08004c45
 80049d8:	08004c45 	.word	0x08004c45
 80049dc:	08004c45 	.word	0x08004c45
 80049e0:	08004c45 	.word	0x08004c45
 80049e4:	08004c45 	.word	0x08004c45
 80049e8:	08004c45 	.word	0x08004c45
 80049ec:	08004c45 	.word	0x08004c45
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004c45 	.word	0x08004c45
 80049f8:	08004c45 	.word	0x08004c45
 80049fc:	08004c45 	.word	0x08004c45
 8004a00:	08004c45 	.word	0x08004c45
 8004a04:	08004c45 	.word	0x08004c45
 8004a08:	08004c45 	.word	0x08004c45
 8004a0c:	08004c45 	.word	0x08004c45
 8004a10:	08004a47 	.word	0x08004a47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a14:	4b90      	ldr	r3, [pc, #576]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a20:	4b8d      	ldr	r3, [pc, #564]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	4a8c      	ldr	r2, [pc, #560]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a32:	e10a      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a34:	4b89      	ldr	r3, [pc, #548]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a36:	61bb      	str	r3, [r7, #24]
    break;
 8004a38:	e107      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a3a:	4b89      	ldr	r3, [pc, #548]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004a3c:	61bb      	str	r3, [r7, #24]
    break;
 8004a3e:	e104      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a40:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004a42:	61bb      	str	r3, [r7, #24]
    break;
 8004a44:	e101      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a46:	4b84      	ldr	r3, [pc, #528]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a50:	4b81      	ldr	r3, [pc, #516]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a5c:	4b7e      	ldr	r3, [pc, #504]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a66:	4b7c      	ldr	r3, [pc, #496]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	08db      	lsrs	r3, r3, #3
 8004a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80da 	beq.w	8004c3e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d05a      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d302      	bcc.n	8004a9a <HAL_RCC_GetSysClockFreq+0x106>
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d078      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004a98:	e099      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9a:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02d      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa6:	4b6c      	ldr	r3, [pc, #432]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b00:	e087      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004c6c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b28:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b44:	e065      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b50:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b58:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b88:	e043      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c74 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bcc:	e021      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c10:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	0a5b      	lsrs	r3, r3, #9
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 3a90 	vmov	r3, s15
 8004c3a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c3c:	e005      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
    break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c46:	61bb      	str	r3, [r7, #24]
    break;
 8004c48:	bf00      	nop
  }

  return sysclockfreq;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3724      	adds	r7, #36	; 0x24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	03d09000 	.word	0x03d09000
 8004c60:	003d0900 	.word	0x003d0900
 8004c64:	007a1200 	.word	0x007a1200
 8004c68:	46000000 	.word	0x46000000
 8004c6c:	4c742400 	.word	0x4c742400
 8004c70:	4a742400 	.word	0x4a742400
 8004c74:	4af42400 	.word	0x4af42400

08004c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c7e:	f7ff fe89 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	fa21 f303 	lsr.w	r3, r1, r3
 8004c9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8004ca6:	5cd3      	ldrb	r3, [r2, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cb6:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	0801cdf8 	.word	0x0801cdf8
 8004cd0:	20000004 	.word	0x20000004
 8004cd4:	20000000 	.word	0x20000000

08004cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cdc:	f7ff ffcc 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	0801cdf8 	.word	0x0801cdf8

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d08:	f7ff ffb6 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	0801cdf8 	.word	0x0801cdf8

08004d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	223f      	movs	r2, #63	; 0x3f
 8004d3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0207 	and.w	r2, r3, #7
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCC_GetClockConfig+0x7c>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_GetClockConfig+0x80>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	58024400 	.word	0x58024400
 8004db0:	52002000 	.word	0x52002000

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d03d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd8:	d013      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dde:	d802      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004de4:	e01f      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dea:	d013      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004dec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004df0:	d01c      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004df2:	e018      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4baf      	ldr	r3, [pc, #700]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4aae      	ldr	r2, [pc, #696]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e00:	e015      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2102      	movs	r1, #2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 f95f 	bl	80060cc <RCCEx_PLL2_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e12:	e00c      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3324      	adds	r3, #36	; 0x24
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fa08 	bl	8006230 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e24:	e003      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
      break;
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e34:	4b9f      	ldr	r3, [pc, #636]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e40:	499c      	ldr	r1, [pc, #624]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	650b      	str	r3, [r1, #80]	; 0x50
 8004e46:	e001      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d03d      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d826      	bhi.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e7d 	.word	0x08004e7d
 8004e6c:	08004e8b 	.word	0x08004e8b
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004eb5 	.word	0x08004eb5
 8004e78:	08004eb5 	.word	0x08004eb5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7c:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	4a8c      	ldr	r2, [pc, #560]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e88:	e015      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f91b 	bl	80060cc <RCCEx_PLL2_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e9a:	e00c      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3324      	adds	r3, #36	; 0x24
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 f9c4 	bl	8006230 <RCCEx_PLL3_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ebc:	4b7d      	ldr	r3, [pc, #500]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	f023 0207 	bic.w	r2, r3, #7
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	497a      	ldr	r1, [pc, #488]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ece:	e001      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03e      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d01c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d804      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d00d      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ef4:	e01e      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef8:	d01f      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efe:	d01e      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f00:	e018      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f02:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	4a6b      	ldr	r2, [pc, #428]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f0e:	e017      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f8d8 	bl	80060cc <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f20:	e00e      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3324      	adds	r3, #36	; 0x24
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 f981 	bl	8006230 <RCCEx_PLL3_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f32:	e005      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f46:	4b5b      	ldr	r3, [pc, #364]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	4958      	ldr	r1, [pc, #352]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	650b      	str	r3, [r1, #80]	; 0x50
 8004f58:	e001      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d01f      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7a:	d805      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f84:	d00e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004f86:	e01f      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004f88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f8c:	d01f      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f92:	d01e      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f94:	e018      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fa2:	e017      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f88e 	bl	80060cc <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fb4:	e00e      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f937 	bl	8006230 <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      break;
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fe8:	4932      	ldr	r1, [pc, #200]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	658b      	str	r3, [r1, #88]	; 0x58
 8004fee:	e001      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d044      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800500a:	d01f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800500c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005010:	d805      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501a:	d00e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800501c:	e01f      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800501e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005022:	d01f      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005028:	d01e      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800502a:	e018      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005038:	e017      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f843 	bl	80060cc <RCCEx_PLL2_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800504a:	e00e      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f8ec 	bl	8006230 <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800505c:	e005      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
      break;
 8005062:	e002      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005064:	bf00      	nop
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005070:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800507e:	490d      	ldr	r1, [pc, #52]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005080:	4313      	orrs	r3, r2
 8005082:	658b      	str	r3, [r1, #88]	; 0x58
 8005084:	e001      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d035      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509a:	2b10      	cmp	r3, #16
 800509c:	d00c      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d802      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01b      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80050a6:	e017      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d00c      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80050ac:	2b30      	cmp	r3, #48	; 0x30
 80050ae:	d018      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80050b0:	e012      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b8:	4baf      	ldr	r3, [pc, #700]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4aae      	ldr	r2, [pc, #696]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050c4:	e00e      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3304      	adds	r3, #4
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fffd 	bl	80060cc <RCCEx_PLL2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050d6:	e005      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
      break;
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050ea:	4ba3      	ldr	r3, [pc, #652]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f6:	49a0      	ldr	r1, [pc, #640]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050fc:	e001      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d042      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005116:	d01f      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d805      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d00e      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005128:	e01f      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800512a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800512e:	d01f      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005134:	d01e      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005136:	e018      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005138:	4b8f      	ldr	r3, [pc, #572]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4a8e      	ldr	r2, [pc, #568]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800513e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005144:	e017      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3304      	adds	r3, #4
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f000 ffbd 	bl	80060cc <RCCEx_PLL2_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005156:	e00e      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3324      	adds	r3, #36	; 0x24
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f866 	bl	8006230 <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005168:	e005      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800517c:	4b7e      	ldr	r3, [pc, #504]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005188:	497b      	ldr	r1, [pc, #492]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	650b      	str	r3, [r1, #80]	; 0x50
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d042      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a8:	d01b      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80051aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ae:	d805      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d022      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x446>
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051ba:	e01b      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80051bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051c0:	d01d      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80051c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c6:	d01c      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80051c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051cc:	d01b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80051ce:	e011      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 ff78 	bl	80060cc <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051e0:	e012      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3324      	adds	r3, #36	; 0x24
 80051e6:	2101      	movs	r1, #1
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f821 	bl	8006230 <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051f2:	e009      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e006      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80051fa:	bf00      	nop
 80051fc:	e004      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80051fe:	bf00      	nop
 8005200:	e002      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800520e:	4b5a      	ldr	r3, [pc, #360]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005212:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	4957      	ldr	r1, [pc, #348]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800521c:	4313      	orrs	r3, r2
 800521e:	650b      	str	r3, [r1, #80]	; 0x50
 8005220:	e001      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
 8005224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d044      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523c:	d01b      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d805      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d022      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800524e:	e01b      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d01d      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800525a:	d01c      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800525c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005260:	d01b      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ff2e 	bl	80060cc <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005274:	e012      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f000 ffd7 	bl	8006230 <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005286:	e009      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e006      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800529a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052b0:	4931      	ldr	r1, [pc, #196]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	658b      	str	r3, [r1, #88]	; 0x58
 80052b6:	e001      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d0:	d005      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d6:	d009      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x538>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d013      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4b26      	ldr	r3, [pc, #152]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a25      	ldr	r2, [pc, #148]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052ea:	e00c      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2101      	movs	r1, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 feea 	bl	80060cc <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
      break;
 8005302:	e000      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005310:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005318:	4917      	ldr	r1, [pc, #92]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	650b      	str	r3, [r1, #80]	; 0x50
 800531e:	e001      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d035      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	2b03      	cmp	r3, #3
 8005336:	d81b      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	0800537d 	.word	0x0800537d
 8005344:	08005351 	.word	0x08005351
 8005348:	0800535f 	.word	0x0800535f
 800534c:	0800537d 	.word	0x0800537d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800535c:	e00f      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	2102      	movs	r1, #2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 feb1 	bl	80060cc <RCCEx_PLL2_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800536e:	e006      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
      break;
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
      break;
 800537c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005384:	4bba      	ldr	r3, [pc, #744]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	f023 0203 	bic.w	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	49b7      	ldr	r1, [pc, #732]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005396:	e001      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8086 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053aa:	4bb2      	ldr	r3, [pc, #712]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4ab1      	ldr	r2, [pc, #708]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053b6:	f7fc f9c9 	bl	800174c <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053bc:	e009      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053be:	f7fc f9c5 	bl	800174c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b64      	cmp	r3, #100	; 0x64
 80053ca:	d902      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	75fb      	strb	r3, [r7, #23]
        break;
 80053d0:	e005      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d2:	4ba8      	ldr	r3, [pc, #672]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0ef      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d166      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053e4:	4ba2      	ldr	r3, [pc, #648]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053ee:	4053      	eors	r3, r2
 80053f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f8:	4b9d      	ldr	r3, [pc, #628]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005402:	4b9b      	ldr	r3, [pc, #620]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a9a      	ldr	r2, [pc, #616]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800540e:	4b98      	ldr	r3, [pc, #608]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a97      	ldr	r2, [pc, #604]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800541a:	4a95      	ldr	r2, [pc, #596]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d115      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fc f98e 	bl	800174c <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005432:	e00b      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005434:	f7fc f98a 	bl	800174c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d902      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	75fb      	strb	r3, [r7, #23]
            break;
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ed      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d126      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546c:	d10d      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800546e:	4b80      	ldr	r3, [pc, #512]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800547c:	0919      	lsrs	r1, r3, #4
 800547e:	4b7e      	ldr	r3, [pc, #504]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005480:	400b      	ands	r3, r1
 8005482:	497b      	ldr	r1, [pc, #492]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	610b      	str	r3, [r1, #16]
 8005488:	e005      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800548a:	4b79      	ldr	r3, [pc, #484]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	4a78      	ldr	r2, [pc, #480]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005490:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005494:	6113      	str	r3, [r2, #16]
 8005496:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a4:	4972      	ldr	r1, [pc, #456]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	670b      	str	r3, [r1, #112]	; 0x70
 80054aa:	e004      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	75bb      	strb	r3, [r7, #22]
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d07d      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	2b28      	cmp	r3, #40	; 0x28
 80054c8:	d866      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	0800559f 	.word	0x0800559f
 80054d4:	08005599 	.word	0x08005599
 80054d8:	08005599 	.word	0x08005599
 80054dc:	08005599 	.word	0x08005599
 80054e0:	08005599 	.word	0x08005599
 80054e4:	08005599 	.word	0x08005599
 80054e8:	08005599 	.word	0x08005599
 80054ec:	08005599 	.word	0x08005599
 80054f0:	08005575 	.word	0x08005575
 80054f4:	08005599 	.word	0x08005599
 80054f8:	08005599 	.word	0x08005599
 80054fc:	08005599 	.word	0x08005599
 8005500:	08005599 	.word	0x08005599
 8005504:	08005599 	.word	0x08005599
 8005508:	08005599 	.word	0x08005599
 800550c:	08005599 	.word	0x08005599
 8005510:	08005587 	.word	0x08005587
 8005514:	08005599 	.word	0x08005599
 8005518:	08005599 	.word	0x08005599
 800551c:	08005599 	.word	0x08005599
 8005520:	08005599 	.word	0x08005599
 8005524:	08005599 	.word	0x08005599
 8005528:	08005599 	.word	0x08005599
 800552c:	08005599 	.word	0x08005599
 8005530:	0800559f 	.word	0x0800559f
 8005534:	08005599 	.word	0x08005599
 8005538:	08005599 	.word	0x08005599
 800553c:	08005599 	.word	0x08005599
 8005540:	08005599 	.word	0x08005599
 8005544:	08005599 	.word	0x08005599
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	0800559f 	.word	0x0800559f
 8005554:	08005599 	.word	0x08005599
 8005558:	08005599 	.word	0x08005599
 800555c:	08005599 	.word	0x08005599
 8005560:	08005599 	.word	0x08005599
 8005564:	08005599 	.word	0x08005599
 8005568:	08005599 	.word	0x08005599
 800556c:	08005599 	.word	0x08005599
 8005570:	0800559f 	.word	0x0800559f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fda6 	bl	80060cc <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe4f 	bl	8006230 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800559e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055a6:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	492f      	ldr	r1, [pc, #188]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	654b      	str	r3, [r1, #84]	; 0x54
 80055b8:	e001      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d037      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d820      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	0800561b 	.word	0x0800561b
 80055dc:	080055f1 	.word	0x080055f1
 80055e0:	08005603 	.word	0x08005603
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	0800561b 	.word	0x0800561b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fd68 	bl	80060cc <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005600:	e00c      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	; 0x24
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fe11 	bl	8006230 <RCCEx_PLL3_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005612:	e003      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
      break;
 8005618:	e000      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800561a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005622:	4b13      	ldr	r3, [pc, #76]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f023 0207 	bic.w	r2, r3, #7
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	4910      	ldr	r1, [pc, #64]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	654b      	str	r3, [r1, #84]	; 0x54
 8005634:	e001      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d040      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	2b05      	cmp	r3, #5
 800564e:	d827      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	080056a7 	.word	0x080056a7
 800565c:	0800567d 	.word	0x0800567d
 8005660:	0800568f 	.word	0x0800568f
 8005664:	080056a7 	.word	0x080056a7
 8005668:	080056a7 	.word	0x080056a7
 800566c:	080056a7 	.word	0x080056a7
 8005670:	58024400 	.word	0x58024400
 8005674:	58024800 	.word	0x58024800
 8005678:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2101      	movs	r1, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fd22 	bl	80060cc <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800568c:	e00c      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3324      	adds	r3, #36	; 0x24
 8005692:	2101      	movs	r1, #1
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fdcb 	bl	8006230 <RCCEx_PLL3_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800569e:	e003      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	e000      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80056a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ae:	4bb2      	ldr	r3, [pc, #712]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f023 0207 	bic.w	r2, r3, #7
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	49ae      	ldr	r1, [pc, #696]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	658b      	str	r3, [r1, #88]	; 0x58
 80056c2:	e001      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d044      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056de:	d01b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80056e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e4:	d805      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d022      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80056ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80056f0:	e01b      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d01d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80056f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fc:	d01c      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80056fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005702:	d01b      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005704:	e011      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fcdd 	bl	80060cc <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005716:	e012      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	2102      	movs	r1, #2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fd86 	bl	8006230 <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005728:	e009      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
      break;
 800572e:	e006      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005730:	bf00      	nop
 8005732:	e004      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005734:	bf00      	nop
 8005736:	e002      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005738:	bf00      	nop
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800573c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005744:	4b8c      	ldr	r3, [pc, #560]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005752:	4989      	ldr	r1, [pc, #548]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	654b      	str	r3, [r1, #84]	; 0x54
 8005758:	e001      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d044      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005774:	d01b      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577a:	d805      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d022      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005786:	e01b      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d01d      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800578e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005792:	d01c      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005798:	d01b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800579a:	e011      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fc92 	bl	80060cc <RCCEx_PLL2_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057ac:	e012      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	; 0x24
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd3b 	bl	8006230 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057be:	e009      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
      break;
 80057c4:	e006      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057c6:	bf00      	nop
 80057c8:	e004      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057da:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e8:	4963      	ldr	r1, [pc, #396]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	658b      	str	r3, [r1, #88]	; 0x58
 80057ee:	e001      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d044      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580a:	d01b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800580c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005810:	d805      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d022      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800581c:	e01b      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800581e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005822:	d01d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005828:	d01c      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800582a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800582e:	d01b      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005830:	e011      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fc47 	bl	80060cc <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005842:	e012      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3324      	adds	r3, #36	; 0x24
 8005848:	2102      	movs	r1, #2
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fcf0 	bl	8006230 <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005854:	e009      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
      break;
 800585a:	e006      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800585c:	bf00      	nop
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005860:	bf00      	nop
 8005862:	e002      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005870:	4b41      	ldr	r3, [pc, #260]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587e:	493e      	ldr	r1, [pc, #248]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	658b      	str	r3, [r1, #88]	; 0x58
 8005884:	e001      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d10a      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	2102      	movs	r1, #2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fcc1 	bl	8006230 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c6:	492c      	ldr	r1, [pc, #176]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d10a      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3324      	adds	r3, #36	; 0x24
 80058e8:	2102      	movs	r1, #2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fca0 	bl	8006230 <RCCEx_PLL3_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005908:	491b      	ldr	r1, [pc, #108]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d032      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d00d      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800592a:	d016      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	2100      	movs	r1, #0
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fbc8 	bl	80060cc <RCCEx_PLL2_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005940:	e00c      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3324      	adds	r3, #36	; 0x24
 8005946:	2102      	movs	r1, #2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fc71 	bl	8006230 <RCCEx_PLL3_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005952:	e003      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
      break;
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800595a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10c      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005970:	4901      	ldr	r1, [pc, #4]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005972:	4313      	orrs	r3, r2
 8005974:	658b      	str	r3, [r1, #88]	; 0x58
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02f      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005996:	d00c      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800599c:	d015      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a2:	d10f      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4b71      	ldr	r3, [pc, #452]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4a70      	ldr	r2, [pc, #448]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80059b0:	e00c      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fc39 	bl	8006230 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80059c2:	e003      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80059ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d2:	4b66      	ldr	r3, [pc, #408]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	4962      	ldr	r1, [pc, #392]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	654b      	str	r3, [r1, #84]	; 0x54
 80059e6:	e001      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d029      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d007      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005a06:	e00f      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a08:	4b58      	ldr	r3, [pc, #352]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4a57      	ldr	r2, [pc, #348]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a14:	e00b      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fb55 	bl	80060cc <RCCEx_PLL2_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a34:	4b4d      	ldr	r3, [pc, #308]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a40:	494a      	ldr	r1, [pc, #296]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a46:	e001      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fbe6 	bl	8006230 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d02f      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d00c      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	d802      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d011      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005a8e:	e00d      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a94:	d00f      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9a:	d00e      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005a9c:	e006      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9e:	4b33      	ldr	r3, [pc, #204]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a32      	ldr	r2, [pc, #200]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005aaa:	e007      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ace:	4927      	ldr	r1, [pc, #156]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ad4:	e001      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ae6:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	491e      	ldr	r1, [pc, #120]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b10:	4916      	ldr	r1, [pc, #88]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b2c:	6113      	str	r3, [r2, #16]
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b38:	490c      	ldr	r1, [pc, #48]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da08      	bge.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	4906      	ldr	r1, [pc, #24]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	58024400 	.word	0x58024400

08005b70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b74:	f7ff f880 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8005b78:	4601      	mov	r1, r0
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	58024400 	.word	0x58024400
 8005b98:	0801cdf8 	.word	0x0801cdf8

08005b9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b089      	sub	sp, #36	; 0x24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba4:	4b9d      	ldr	r3, [pc, #628]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005bae:	4b9b      	ldr	r3, [pc, #620]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	0b1b      	lsrs	r3, r3, #12
 8005bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bba:	4b98      	ldr	r3, [pc, #608]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005bc6:	4b95      	ldr	r3, [pc, #596]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 810a 	beq.w	8005dfe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d05a      	beq.n	8005ca6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d302      	bcc.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d078      	beq.n	8005cea <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005bf8:	e099      	b.n	8005d2e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02d      	beq.n	8005c62 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c06:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	4a83      	ldr	r2, [pc, #524]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c30:	4b7a      	ldr	r3, [pc, #488]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c60:	e087      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c74:	4b69      	ldr	r3, [pc, #420]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ca4:	e065      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb8:	4b58      	ldr	r3, [pc, #352]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ccc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ce8:	e043      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfc:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d2c:	e021      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d50:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d70:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d72:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	0a5b      	lsrs	r3, r3, #9
 8005d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d98:	ee17 2a90 	vmov	r2, s15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005da0:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc6:	ee17 2a90 	vmov	r2, s15
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	0e1b      	lsrs	r3, r3, #24
 8005dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df4:	ee17 2a90 	vmov	r2, s15
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dfc:	e008      	b.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
}
 8005e10:	bf00      	nop
 8005e12:	3724      	adds	r7, #36	; 0x24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	03d09000 	.word	0x03d09000
 8005e24:	46000000 	.word	0x46000000
 8005e28:	4c742400 	.word	0x4c742400
 8005e2c:	4a742400 	.word	0x4a742400
 8005e30:	4af42400 	.word	0x4af42400

08005e34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e3c:	4b9d      	ldr	r3, [pc, #628]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e46:	4b9b      	ldr	r3, [pc, #620]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	0d1b      	lsrs	r3, r3, #20
 8005e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e52:	4b98      	ldr	r3, [pc, #608]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e5e:	4b95      	ldr	r3, [pc, #596]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 810a 	beq.w	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d05a      	beq.n	8005f3e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d302      	bcc.n	8005e92 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d078      	beq.n	8005f82 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005e90:	e099      	b.n	8005fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e92:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02d      	beq.n	8005efa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e9e:	4b85      	ldr	r3, [pc, #532]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	4a83      	ldr	r2, [pc, #524]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005eae:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec8:	4b7a      	ldr	r3, [pc, #488]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005edc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ef8:	e087      	b.n	800600a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f20:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f3c:	e065      	b.n	800600a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f50:	4b58      	ldr	r3, [pc, #352]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f64:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f80:	e043      	b.n	800600a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f94:	4b47      	ldr	r3, [pc, #284]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc4:	e021      	b.n	800600a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd8:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006004:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006008:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800600a:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	0a5b      	lsrs	r3, r3, #9
 8006010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006024:	edd7 6a07 	vldr	s13, [r7, #28]
 8006028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006030:	ee17 2a90 	vmov	r2, s15
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800604e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006052:	edd7 6a07 	vldr	s13, [r7, #28]
 8006056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605e:	ee17 2a90 	vmov	r2, s15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	0e1b      	lsrs	r3, r3, #24
 800606c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006080:	edd7 6a07 	vldr	s13, [r7, #28]
 8006084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608c:	ee17 2a90 	vmov	r2, s15
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006094:	e008      	b.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	3724      	adds	r7, #36	; 0x24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	58024400 	.word	0x58024400
 80060b8:	03d09000 	.word	0x03d09000
 80060bc:	46000000 	.word	0x46000000
 80060c0:	4c742400 	.word	0x4c742400
 80060c4:	4a742400 	.word	0x4a742400
 80060c8:	4af42400 	.word	0x4af42400

080060cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060da:	4b53      	ldr	r3, [pc, #332]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d101      	bne.n	80060ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e099      	b.n	800621e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060ea:	4b4f      	ldr	r3, [pc, #316]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4e      	ldr	r2, [pc, #312]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80060f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f6:	f7fb fb29 	bl	800174c <HAL_GetTick>
 80060fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060fc:	e008      	b.n	8006110 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80060fe:	f7fb fb25 	bl	800174c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e086      	b.n	800621e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006110:	4b45      	ldr	r3, [pc, #276]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f0      	bne.n	80060fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800611c:	4b42      	ldr	r3, [pc, #264]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	493f      	ldr	r1, [pc, #252]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	628b      	str	r3, [r1, #40]	; 0x28
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	3b01      	subs	r3, #1
 8006136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	3b01      	subs	r3, #1
 8006140:	025b      	lsls	r3, r3, #9
 8006142:	b29b      	uxth	r3, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	3b01      	subs	r3, #1
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	3b01      	subs	r3, #1
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006160:	4931      	ldr	r1, [pc, #196]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006166:	4b30      	ldr	r3, [pc, #192]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	492d      	ldr	r1, [pc, #180]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006174:	4313      	orrs	r3, r2
 8006176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006178:	4b2b      	ldr	r3, [pc, #172]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f023 0220 	bic.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	4928      	ldr	r1, [pc, #160]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800618a:	4b27      	ldr	r3, [pc, #156]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	4a26      	ldr	r2, [pc, #152]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006190:	f023 0310 	bic.w	r3, r3, #16
 8006194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006196:	4b24      	ldr	r3, [pc, #144]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619a:	4b24      	ldr	r3, [pc, #144]	; (800622c <RCCEx_PLL2_Config+0x160>)
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	69d2      	ldr	r2, [r2, #28]
 80061a2:	00d2      	lsls	r2, r2, #3
 80061a4:	4920      	ldr	r1, [pc, #128]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061aa:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061b0:	f043 0310 	orr.w	r3, r3, #16
 80061b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061c8:	e00f      	b.n	80061ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d106      	bne.n	80061de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061d0:	4b15      	ldr	r3, [pc, #84]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061dc:	e005      	b.n	80061ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	4a11      	ldr	r2, [pc, #68]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f6:	f7fb faa9 	bl	800174c <HAL_GetTick>
 80061fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061fc:	e008      	b.n	8006210 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061fe:	f7fb faa5 	bl	800174c <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e006      	b.n	800621e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <RCCEx_PLL2_Config+0x15c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	ffff0007 	.word	0xffff0007

08006230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800623e:	4b53      	ldr	r3, [pc, #332]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b03      	cmp	r3, #3
 8006248:	d101      	bne.n	800624e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e099      	b.n	8006382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800624e:	4b4f      	ldr	r3, [pc, #316]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a4e      	ldr	r2, [pc, #312]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625a:	f7fb fa77 	bl	800174c <HAL_GetTick>
 800625e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006260:	e008      	b.n	8006274 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006262:	f7fb fa73 	bl	800174c <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e086      	b.n	8006382 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006274:	4b45      	ldr	r3, [pc, #276]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006280:	4b42      	ldr	r3, [pc, #264]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	051b      	lsls	r3, r3, #20
 800628e:	493f      	ldr	r1, [pc, #252]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006290:	4313      	orrs	r3, r2
 8006292:	628b      	str	r3, [r1, #40]	; 0x28
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	3b01      	subs	r3, #1
 800629a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	025b      	lsls	r3, r3, #9
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	041b      	lsls	r3, r3, #16
 80062b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	3b01      	subs	r3, #1
 80062be:	061b      	lsls	r3, r3, #24
 80062c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062c4:	4931      	ldr	r1, [pc, #196]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ca:	4b30      	ldr	r3, [pc, #192]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	492d      	ldr	r1, [pc, #180]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062dc:	4b2b      	ldr	r3, [pc, #172]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	4928      	ldr	r1, [pc, #160]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062ee:	4b27      	ldr	r3, [pc, #156]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	4a26      	ldr	r2, [pc, #152]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 80062fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fe:	4b24      	ldr	r3, [pc, #144]	; (8006390 <RCCEx_PLL3_Config+0x160>)
 8006300:	4013      	ands	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	69d2      	ldr	r2, [r2, #28]
 8006306:	00d2      	lsls	r2, r2, #3
 8006308:	4920      	ldr	r1, [pc, #128]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800630e:	4b1f      	ldr	r3, [pc, #124]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006320:	4b1a      	ldr	r3, [pc, #104]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a19      	ldr	r2, [pc, #100]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800632c:	e00f      	b.n	800634e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d106      	bne.n	8006342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006334:	4b15      	ldr	r3, [pc, #84]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 800633a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800633e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006340:	e005      	b.n	800634e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4a11      	ldr	r2, [pc, #68]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800634c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a0e      	ldr	r2, [pc, #56]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635a:	f7fb f9f7 	bl	800174c <HAL_GetTick>
 800635e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006360:	e008      	b.n	8006374 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006362:	f7fb f9f3 	bl	800174c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e006      	b.n	8006382 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <RCCEx_PLL3_Config+0x15c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	58024400 	.word	0x58024400
 8006390:	ffff0007 	.word	0xffff0007

08006394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e01d      	b.n	80063e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f815 	bl	80063ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 f986 	bl	80066e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_TIM_Base_Start_IT+0x50>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b06      	cmp	r3, #6
 8006428:	d00b      	beq.n	8006442 <HAL_TIM_Base_Start_IT+0x42>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d007      	beq.n	8006442 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	00010007 	.word	0x00010007

08006454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0202 	mvn.w	r2, #2
 8006480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f905 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8f7 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f908 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0204 	mvn.w	r2, #4
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8db 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8cd 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8de 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b08      	cmp	r3, #8
 8006510:	d122      	bne.n	8006558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d11b      	bne.n	8006558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0208 	mvn.w	r2, #8
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8b1 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8a3 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8b4 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b10      	cmp	r3, #16
 8006564:	d122      	bne.n	80065ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d11b      	bne.n	80065ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0210 	mvn.w	r2, #16
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2208      	movs	r2, #8
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f887 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f879 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f88a 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10e      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0201 	mvn.w	r2, #1
 80065d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fc62 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d10e      	bne.n	8006604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d107      	bne.n	8006604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f914 	bl	800682c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006612:	d10e      	bne.n	8006632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d107      	bne.n	8006632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800662a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f907 	bl	8006840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d10e      	bne.n	800665e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d107      	bne.n	800665e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f838 	bl	80066ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0220 	mvn.w	r2, #32
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8c7 	bl	8006818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a40      	ldr	r2, [pc, #256]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006702:	d00f      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a3d      	ldr	r2, [pc, #244]	; (80067fc <TIM_Base_SetConfig+0x118>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a3c      	ldr	r2, [pc, #240]	; (8006800 <TIM_Base_SetConfig+0x11c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a3b      	ldr	r2, [pc, #236]	; (8006804 <TIM_Base_SetConfig+0x120>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a3a      	ldr	r2, [pc, #232]	; (8006808 <TIM_Base_SetConfig+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01f      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d01b      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <TIM_Base_SetConfig+0x118>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d017      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <TIM_Base_SetConfig+0x11c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <TIM_Base_SetConfig+0x120>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00f      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_Base_SetConfig+0x124>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_Base_SetConfig+0x128>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a26      	ldr	r2, [pc, #152]	; (8006814 <TIM_Base_SetConfig+0x130>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d108      	bne.n	8006790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a12      	ldr	r2, [pc, #72]	; (8006808 <TIM_Base_SetConfig+0x124>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a11      	ldr	r2, [pc, #68]	; (800680c <TIM_Base_SetConfig+0x128>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <TIM_Base_SetConfig+0x130>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d103      	bne.n	80067e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	615a      	str	r2, [r3, #20]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40000400 	.word	0x40000400
 8006800:	40000800 	.word	0x40000800
 8006804:	40000c00 	.word	0x40000c00
 8006808:	40010400 	.word	0x40010400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e042      	b.n	80068ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fa fcb9 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2224      	movs	r2, #36	; 0x24
 8006882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8c2 	bl	8006a20 <UART_SetConfig>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e022      	b.n	80068ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f002 fa34 	bl	8008d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 fabb 	bl	8008e60 <UART_CheckIdleState>
 80068ea:	4603      	mov	r3, r0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690a:	2b20      	cmp	r3, #32
 800690c:	f040 8083 	bne.w	8006a16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Transmit+0x28>
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e07b      	b.n	8006a18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UART_Transmit+0x3a>
 800692a:	2302      	movs	r3, #2
 800692c:	e074      	b.n	8006a18 <HAL_UART_Transmit+0x124>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2221      	movs	r2, #33	; 0x21
 8006942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006946:	f7fa ff01 	bl	800174c <HAL_GetTick>
 800694a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d108      	bne.n	8006978 <HAL_UART_Transmit+0x84>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e003      	b.n	8006980 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006980:	e02c      	b.n	80069dc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2180      	movs	r1, #128	; 0x80
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f002 faaf 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e03d      	b.n	8006a18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3302      	adds	r3, #2
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e007      	b.n	80069ca <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1cc      	bne.n	8006982 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f002 fa7c 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e00a      	b.n	8006a18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e000      	b.n	8006a18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a16:	2302      	movs	r3, #2
  }
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a24:	b090      	sub	sp, #64	; 0x40
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a56:	4313      	orrs	r3, r2
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4bc1      	ldr	r3, [pc, #772]	; (8006d68 <UART_SetConfig+0x348>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4ab7      	ldr	r2, [pc, #732]	; (8006d6c <UART_SetConfig+0x34c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	4bb2      	ldr	r3, [pc, #712]	; (8006d70 <UART_SetConfig+0x350>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	f023 010f 	bic.w	r1, r3, #15
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4aa9      	ldr	r2, [pc, #676]	; (8006d74 <UART_SetConfig+0x354>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d177      	bne.n	8006bc2 <UART_SetConfig+0x1a2>
 8006ad2:	4ba9      	ldr	r3, [pc, #676]	; (8006d78 <UART_SetConfig+0x358>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ada:	2b28      	cmp	r3, #40	; 0x28
 8006adc:	d86c      	bhi.n	8006bb8 <UART_SetConfig+0x198>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0xc4>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b89 	.word	0x08006b89
 8006ae8:	08006bb9 	.word	0x08006bb9
 8006aec:	08006bb9 	.word	0x08006bb9
 8006af0:	08006bb9 	.word	0x08006bb9
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006bb9 	.word	0x08006bb9
 8006afc:	08006bb9 	.word	0x08006bb9
 8006b00:	08006bb9 	.word	0x08006bb9
 8006b04:	08006b91 	.word	0x08006b91
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006bb9 	.word	0x08006bb9
 8006b10:	08006bb9 	.word	0x08006bb9
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006bb9 	.word	0x08006bb9
 8006b1c:	08006bb9 	.word	0x08006bb9
 8006b20:	08006bb9 	.word	0x08006bb9
 8006b24:	08006b99 	.word	0x08006b99
 8006b28:	08006bb9 	.word	0x08006bb9
 8006b2c:	08006bb9 	.word	0x08006bb9
 8006b30:	08006bb9 	.word	0x08006bb9
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006bb9 	.word	0x08006bb9
 8006b3c:	08006bb9 	.word	0x08006bb9
 8006b40:	08006bb9 	.word	0x08006bb9
 8006b44:	08006ba1 	.word	0x08006ba1
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006bb9 	.word	0x08006bb9
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006bb9 	.word	0x08006bb9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006bb9 	.word	0x08006bb9
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bb9 	.word	0x08006bb9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bb9 	.word	0x08006bb9
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b8e:	e233      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b96:	e22f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b9e:	e22b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ba6:	e227      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bae:	e223      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bb6:	e21f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bbe:	bf00      	nop
 8006bc0:	e21a      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6d      	ldr	r2, [pc, #436]	; (8006d7c <UART_SetConfig+0x35c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d132      	bne.n	8006c32 <UART_SetConfig+0x212>
 8006bcc:	4b6a      	ldr	r3, [pc, #424]	; (8006d78 <UART_SetConfig+0x358>)
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	d827      	bhi.n	8006c28 <UART_SetConfig+0x208>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0x1c0>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006bf9 	.word	0x08006bf9
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	08006c09 	.word	0x08006c09
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bfe:	e1fb      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c06:	e1f7      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c0e:	e1f3      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c16:	e1ef      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c1e:	e1eb      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c26:	e1e7      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c2e:	bf00      	nop
 8006c30:	e1e2      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a52      	ldr	r2, [pc, #328]	; (8006d80 <UART_SetConfig+0x360>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d132      	bne.n	8006ca2 <UART_SetConfig+0x282>
 8006c3c:	4b4e      	ldr	r3, [pc, #312]	; (8006d78 <UART_SetConfig+0x358>)
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	2b05      	cmp	r3, #5
 8006c46:	d827      	bhi.n	8006c98 <UART_SetConfig+0x278>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x230>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c69 	.word	0x08006c69
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	08006c79 	.word	0x08006c79
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c89 	.word	0x08006c89
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c6e:	e1c3      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e1bf      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7e:	e1bb      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c86:	e1b7      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c8e:	e1b3      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c96:	e1af      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c9e:	bf00      	nop
 8006ca0:	e1aa      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <UART_SetConfig+0x364>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d132      	bne.n	8006d12 <UART_SetConfig+0x2f2>
 8006cac:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <UART_SetConfig+0x358>)
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d827      	bhi.n	8006d08 <UART_SetConfig+0x2e8>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x2a0>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cd9 	.word	0x08006cd9
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cde:	e18b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e187      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	e183      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	e17f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cfe:	e17b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d06:	e177      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d0e:	bf00      	nop
 8006d10:	e172      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <UART_SetConfig+0x368>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d144      	bne.n	8006da6 <UART_SetConfig+0x386>
 8006d1c:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <UART_SetConfig+0x358>)
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d839      	bhi.n	8006d9c <UART_SetConfig+0x37c>
 8006d28:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0x310>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d49 	.word	0x08006d49
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	08006d59 	.word	0x08006d59
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d8d 	.word	0x08006d8d
 8006d44:	08006d95 	.word	0x08006d95
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d4e:	e153      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e14f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	e14b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d66:	e147      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d68:	cfff69f3 	.word	0xcfff69f3
 8006d6c:	58000c00 	.word	0x58000c00
 8006d70:	11fff4ff 	.word	0x11fff4ff
 8006d74:	40011000 	.word	0x40011000
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	40004400 	.word	0x40004400
 8006d80:	40004800 	.word	0x40004800
 8006d84:	40004c00 	.word	0x40004c00
 8006d88:	40005000 	.word	0x40005000
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d92:	e131      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d9a:	e12d      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006da2:	bf00      	nop
 8006da4:	e128      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4ac3      	ldr	r2, [pc, #780]	; (80070b8 <UART_SetConfig+0x698>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d178      	bne.n	8006ea2 <UART_SetConfig+0x482>
 8006db0:	4bc2      	ldr	r3, [pc, #776]	; (80070bc <UART_SetConfig+0x69c>)
 8006db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db8:	2b28      	cmp	r3, #40	; 0x28
 8006dba:	d86d      	bhi.n	8006e98 <UART_SetConfig+0x478>
 8006dbc:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x3a4>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006e69 	.word	0x08006e69
 8006dc8:	08006e99 	.word	0x08006e99
 8006dcc:	08006e99 	.word	0x08006e99
 8006dd0:	08006e99 	.word	0x08006e99
 8006dd4:	08006e99 	.word	0x08006e99
 8006dd8:	08006e99 	.word	0x08006e99
 8006ddc:	08006e99 	.word	0x08006e99
 8006de0:	08006e99 	.word	0x08006e99
 8006de4:	08006e71 	.word	0x08006e71
 8006de8:	08006e99 	.word	0x08006e99
 8006dec:	08006e99 	.word	0x08006e99
 8006df0:	08006e99 	.word	0x08006e99
 8006df4:	08006e99 	.word	0x08006e99
 8006df8:	08006e99 	.word	0x08006e99
 8006dfc:	08006e99 	.word	0x08006e99
 8006e00:	08006e99 	.word	0x08006e99
 8006e04:	08006e79 	.word	0x08006e79
 8006e08:	08006e99 	.word	0x08006e99
 8006e0c:	08006e99 	.word	0x08006e99
 8006e10:	08006e99 	.word	0x08006e99
 8006e14:	08006e99 	.word	0x08006e99
 8006e18:	08006e99 	.word	0x08006e99
 8006e1c:	08006e99 	.word	0x08006e99
 8006e20:	08006e99 	.word	0x08006e99
 8006e24:	08006e81 	.word	0x08006e81
 8006e28:	08006e99 	.word	0x08006e99
 8006e2c:	08006e99 	.word	0x08006e99
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006e99 	.word	0x08006e99
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006e89 	.word	0x08006e89
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006e99 	.word	0x08006e99
 8006e50:	08006e99 	.word	0x08006e99
 8006e54:	08006e99 	.word	0x08006e99
 8006e58:	08006e99 	.word	0x08006e99
 8006e5c:	08006e99 	.word	0x08006e99
 8006e60:	08006e99 	.word	0x08006e99
 8006e64:	08006e91 	.word	0x08006e91
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e6e:	e0c3      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e76:	e0bf      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e7e:	e0bb      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e86:	e0b7      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e8e:	e0b3      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e96:	e0af      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e9e:	bf00      	nop
 8006ea0:	e0aa      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a86      	ldr	r2, [pc, #536]	; (80070c0 <UART_SetConfig+0x6a0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d132      	bne.n	8006f12 <UART_SetConfig+0x4f2>
 8006eac:	4b83      	ldr	r3, [pc, #524]	; (80070bc <UART_SetConfig+0x69c>)
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	2b05      	cmp	r3, #5
 8006eb6:	d827      	bhi.n	8006f08 <UART_SetConfig+0x4e8>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <UART_SetConfig+0x4a0>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006ed9 	.word	0x08006ed9
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	08006ee9 	.word	0x08006ee9
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006ef9 	.word	0x08006ef9
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ede:	e08b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ee6:	e087      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eee:	e083      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ef6:	e07f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006efe:	e07b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f06:	e077      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f0e:	bf00      	nop
 8006f10:	e072      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6b      	ldr	r2, [pc, #428]	; (80070c4 <UART_SetConfig+0x6a4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d132      	bne.n	8006f82 <UART_SetConfig+0x562>
 8006f1c:	4b67      	ldr	r3, [pc, #412]	; (80070bc <UART_SetConfig+0x69c>)
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d827      	bhi.n	8006f78 <UART_SetConfig+0x558>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x510>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	e053      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	e04f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f5e:	e04b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f66:	e047      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f6e:	e043      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f76:	e03f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f7e:	bf00      	nop
 8006f80:	e03a      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a50      	ldr	r2, [pc, #320]	; (80070c8 <UART_SetConfig+0x6a8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d132      	bne.n	8006ff2 <UART_SetConfig+0x5d2>
 8006f8c:	4b4b      	ldr	r3, [pc, #300]	; (80070bc <UART_SetConfig+0x69c>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	2b05      	cmp	r3, #5
 8006f96:	d827      	bhi.n	8006fe8 <UART_SetConfig+0x5c8>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x580>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fc1 	.word	0x08006fc1
 8006fa8:	08006fc9 	.word	0x08006fc9
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fbe:	e01b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fc6:	e017      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fce:	e013      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fd6:	e00f      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fd8:	2320      	movs	r3, #32
 8006fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fde:	e00b      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fe6:	e007      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <UART_SetConfig+0x5d8>
 8006ff2:	2380      	movs	r3, #128	; 0x80
 8006ff4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a32      	ldr	r2, [pc, #200]	; (80070c8 <UART_SetConfig+0x6a8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f040 86f7 	bne.w	8007df2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007004:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007008:	2b08      	cmp	r3, #8
 800700a:	f000 80c0 	beq.w	800718e <UART_SetConfig+0x76e>
 800700e:	2b08      	cmp	r3, #8
 8007010:	dc04      	bgt.n	800701c <UART_SetConfig+0x5fc>
 8007012:	2b02      	cmp	r3, #2
 8007014:	d00c      	beq.n	8007030 <UART_SetConfig+0x610>
 8007016:	2b04      	cmp	r3, #4
 8007018:	d065      	beq.n	80070e6 <UART_SetConfig+0x6c6>
 800701a:	e27a      	b.n	8007512 <UART_SetConfig+0xaf2>
 800701c:	2b20      	cmp	r3, #32
 800701e:	f000 81b0 	beq.w	8007382 <UART_SetConfig+0x962>
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	f000 821e 	beq.w	8007464 <UART_SetConfig+0xa44>
 8007028:	2b10      	cmp	r3, #16
 800702a:	f000 8104 	beq.w	8007236 <UART_SetConfig+0x816>
 800702e:	e270      	b.n	8007512 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007030:	f7fe fd9e 	bl	8005b70 <HAL_RCCEx_GetD3PCLK1Freq>
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d04e      	beq.n	80070dc <UART_SetConfig+0x6bc>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b01      	cmp	r3, #1
 8007044:	d048      	beq.n	80070d8 <UART_SetConfig+0x6b8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b02      	cmp	r3, #2
 800704c:	d042      	beq.n	80070d4 <UART_SetConfig+0x6b4>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b03      	cmp	r3, #3
 8007054:	d03c      	beq.n	80070d0 <UART_SetConfig+0x6b0>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b04      	cmp	r3, #4
 800705c:	d036      	beq.n	80070cc <UART_SetConfig+0x6ac>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b05      	cmp	r3, #5
 8007064:	d026      	beq.n	80070b4 <UART_SetConfig+0x694>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b06      	cmp	r3, #6
 800706c:	d020      	beq.n	80070b0 <UART_SetConfig+0x690>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b07      	cmp	r3, #7
 8007074:	d01a      	beq.n	80070ac <UART_SetConfig+0x68c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b08      	cmp	r3, #8
 800707c:	d014      	beq.n	80070a8 <UART_SetConfig+0x688>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b09      	cmp	r3, #9
 8007084:	d00e      	beq.n	80070a4 <UART_SetConfig+0x684>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b0a      	cmp	r3, #10
 800708c:	d008      	beq.n	80070a0 <UART_SetConfig+0x680>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b0b      	cmp	r3, #11
 8007094:	d102      	bne.n	800709c <UART_SetConfig+0x67c>
 8007096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709a:	e020      	b.n	80070de <UART_SetConfig+0x6be>
 800709c:	2301      	movs	r3, #1
 800709e:	e01e      	b.n	80070de <UART_SetConfig+0x6be>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	e01c      	b.n	80070de <UART_SetConfig+0x6be>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	e01a      	b.n	80070de <UART_SetConfig+0x6be>
 80070a8:	2320      	movs	r3, #32
 80070aa:	e018      	b.n	80070de <UART_SetConfig+0x6be>
 80070ac:	2310      	movs	r3, #16
 80070ae:	e016      	b.n	80070de <UART_SetConfig+0x6be>
 80070b0:	230c      	movs	r3, #12
 80070b2:	e014      	b.n	80070de <UART_SetConfig+0x6be>
 80070b4:	230a      	movs	r3, #10
 80070b6:	e012      	b.n	80070de <UART_SetConfig+0x6be>
 80070b8:	40011400 	.word	0x40011400
 80070bc:	58024400 	.word	0x58024400
 80070c0:	40007800 	.word	0x40007800
 80070c4:	40007c00 	.word	0x40007c00
 80070c8:	58000c00 	.word	0x58000c00
 80070cc:	2308      	movs	r3, #8
 80070ce:	e006      	b.n	80070de <UART_SetConfig+0x6be>
 80070d0:	2306      	movs	r3, #6
 80070d2:	e004      	b.n	80070de <UART_SetConfig+0x6be>
 80070d4:	2304      	movs	r3, #4
 80070d6:	e002      	b.n	80070de <UART_SetConfig+0x6be>
 80070d8:	2302      	movs	r3, #2
 80070da:	e000      	b.n	80070de <UART_SetConfig+0x6be>
 80070dc:	2301      	movs	r3, #1
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070e4:	e219      	b.n	800751a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0318 	add.w	r3, r7, #24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fd56 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d044      	beq.n	8007184 <UART_SetConfig+0x764>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d03e      	beq.n	8007180 <UART_SetConfig+0x760>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b02      	cmp	r3, #2
 8007108:	d038      	beq.n	800717c <UART_SetConfig+0x75c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	2b03      	cmp	r3, #3
 8007110:	d032      	beq.n	8007178 <UART_SetConfig+0x758>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	2b04      	cmp	r3, #4
 8007118:	d02c      	beq.n	8007174 <UART_SetConfig+0x754>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	2b05      	cmp	r3, #5
 8007120:	d026      	beq.n	8007170 <UART_SetConfig+0x750>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	2b06      	cmp	r3, #6
 8007128:	d020      	beq.n	800716c <UART_SetConfig+0x74c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b07      	cmp	r3, #7
 8007130:	d01a      	beq.n	8007168 <UART_SetConfig+0x748>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b08      	cmp	r3, #8
 8007138:	d014      	beq.n	8007164 <UART_SetConfig+0x744>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b09      	cmp	r3, #9
 8007140:	d00e      	beq.n	8007160 <UART_SetConfig+0x740>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d008      	beq.n	800715c <UART_SetConfig+0x73c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b0b      	cmp	r3, #11
 8007150:	d102      	bne.n	8007158 <UART_SetConfig+0x738>
 8007152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007156:	e016      	b.n	8007186 <UART_SetConfig+0x766>
 8007158:	2301      	movs	r3, #1
 800715a:	e014      	b.n	8007186 <UART_SetConfig+0x766>
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	e012      	b.n	8007186 <UART_SetConfig+0x766>
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	e010      	b.n	8007186 <UART_SetConfig+0x766>
 8007164:	2320      	movs	r3, #32
 8007166:	e00e      	b.n	8007186 <UART_SetConfig+0x766>
 8007168:	2310      	movs	r3, #16
 800716a:	e00c      	b.n	8007186 <UART_SetConfig+0x766>
 800716c:	230c      	movs	r3, #12
 800716e:	e00a      	b.n	8007186 <UART_SetConfig+0x766>
 8007170:	230a      	movs	r3, #10
 8007172:	e008      	b.n	8007186 <UART_SetConfig+0x766>
 8007174:	2308      	movs	r3, #8
 8007176:	e006      	b.n	8007186 <UART_SetConfig+0x766>
 8007178:	2306      	movs	r3, #6
 800717a:	e004      	b.n	8007186 <UART_SetConfig+0x766>
 800717c:	2304      	movs	r3, #4
 800717e:	e002      	b.n	8007186 <UART_SetConfig+0x766>
 8007180:	2302      	movs	r3, #2
 8007182:	e000      	b.n	8007186 <UART_SetConfig+0x766>
 8007184:	2301      	movs	r3, #1
 8007186:	fbb2 f3f3 	udiv	r3, r2, r3
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800718c:	e1c5      	b.n	800751a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800718e:	f107 030c 	add.w	r3, r7, #12
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fe4e 	bl	8005e34 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d044      	beq.n	800722c <UART_SetConfig+0x80c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d03e      	beq.n	8007228 <UART_SetConfig+0x808>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d038      	beq.n	8007224 <UART_SetConfig+0x804>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d032      	beq.n	8007220 <UART_SetConfig+0x800>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d02c      	beq.n	800721c <UART_SetConfig+0x7fc>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b05      	cmp	r3, #5
 80071c8:	d026      	beq.n	8007218 <UART_SetConfig+0x7f8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d020      	beq.n	8007214 <UART_SetConfig+0x7f4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	d01a      	beq.n	8007210 <UART_SetConfig+0x7f0>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d014      	beq.n	800720c <UART_SetConfig+0x7ec>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	d00e      	beq.n	8007208 <UART_SetConfig+0x7e8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b0a      	cmp	r3, #10
 80071f0:	d008      	beq.n	8007204 <UART_SetConfig+0x7e4>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b0b      	cmp	r3, #11
 80071f8:	d102      	bne.n	8007200 <UART_SetConfig+0x7e0>
 80071fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071fe:	e016      	b.n	800722e <UART_SetConfig+0x80e>
 8007200:	2301      	movs	r3, #1
 8007202:	e014      	b.n	800722e <UART_SetConfig+0x80e>
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	e012      	b.n	800722e <UART_SetConfig+0x80e>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x80e>
 800720c:	2320      	movs	r3, #32
 800720e:	e00e      	b.n	800722e <UART_SetConfig+0x80e>
 8007210:	2310      	movs	r3, #16
 8007212:	e00c      	b.n	800722e <UART_SetConfig+0x80e>
 8007214:	230c      	movs	r3, #12
 8007216:	e00a      	b.n	800722e <UART_SetConfig+0x80e>
 8007218:	230a      	movs	r3, #10
 800721a:	e008      	b.n	800722e <UART_SetConfig+0x80e>
 800721c:	2308      	movs	r3, #8
 800721e:	e006      	b.n	800722e <UART_SetConfig+0x80e>
 8007220:	2306      	movs	r3, #6
 8007222:	e004      	b.n	800722e <UART_SetConfig+0x80e>
 8007224:	2304      	movs	r3, #4
 8007226:	e002      	b.n	800722e <UART_SetConfig+0x80e>
 8007228:	2302      	movs	r3, #2
 800722a:	e000      	b.n	800722e <UART_SetConfig+0x80e>
 800722c:	2301      	movs	r3, #1
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007234:	e171      	b.n	800751a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007236:	4b7a      	ldr	r3, [pc, #488]	; (8007420 <UART_SetConfig+0xa00>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d054      	beq.n	80072ec <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007242:	4b77      	ldr	r3, [pc, #476]	; (8007420 <UART_SetConfig+0xa00>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	4a75      	ldr	r2, [pc, #468]	; (8007424 <UART_SetConfig+0xa04>)
 800724e:	40da      	lsrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d044      	beq.n	80072e2 <UART_SetConfig+0x8c2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b01      	cmp	r3, #1
 800725e:	d03e      	beq.n	80072de <UART_SetConfig+0x8be>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b02      	cmp	r3, #2
 8007266:	d038      	beq.n	80072da <UART_SetConfig+0x8ba>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b03      	cmp	r3, #3
 800726e:	d032      	beq.n	80072d6 <UART_SetConfig+0x8b6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b04      	cmp	r3, #4
 8007276:	d02c      	beq.n	80072d2 <UART_SetConfig+0x8b2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b05      	cmp	r3, #5
 800727e:	d026      	beq.n	80072ce <UART_SetConfig+0x8ae>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b06      	cmp	r3, #6
 8007286:	d020      	beq.n	80072ca <UART_SetConfig+0x8aa>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b07      	cmp	r3, #7
 800728e:	d01a      	beq.n	80072c6 <UART_SetConfig+0x8a6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b08      	cmp	r3, #8
 8007296:	d014      	beq.n	80072c2 <UART_SetConfig+0x8a2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	2b09      	cmp	r3, #9
 800729e:	d00e      	beq.n	80072be <UART_SetConfig+0x89e>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b0a      	cmp	r3, #10
 80072a6:	d008      	beq.n	80072ba <UART_SetConfig+0x89a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b0b      	cmp	r3, #11
 80072ae:	d102      	bne.n	80072b6 <UART_SetConfig+0x896>
 80072b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b4:	e016      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e014      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072ba:	2380      	movs	r3, #128	; 0x80
 80072bc:	e012      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072be:	2340      	movs	r3, #64	; 0x40
 80072c0:	e010      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072c2:	2320      	movs	r3, #32
 80072c4:	e00e      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072c6:	2310      	movs	r3, #16
 80072c8:	e00c      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072ca:	230c      	movs	r3, #12
 80072cc:	e00a      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072ce:	230a      	movs	r3, #10
 80072d0:	e008      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072d2:	2308      	movs	r3, #8
 80072d4:	e006      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072d6:	2306      	movs	r3, #6
 80072d8:	e004      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072da:	2304      	movs	r3, #4
 80072dc:	e002      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072de:	2302      	movs	r3, #2
 80072e0:	e000      	b.n	80072e4 <UART_SetConfig+0x8c4>
 80072e2:	2301      	movs	r3, #1
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80072ea:	e116      	b.n	800751a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d043      	beq.n	800737c <UART_SetConfig+0x95c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d03d      	beq.n	8007378 <UART_SetConfig+0x958>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b02      	cmp	r3, #2
 8007302:	d037      	beq.n	8007374 <UART_SetConfig+0x954>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b03      	cmp	r3, #3
 800730a:	d031      	beq.n	8007370 <UART_SetConfig+0x950>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b04      	cmp	r3, #4
 8007312:	d02b      	beq.n	800736c <UART_SetConfig+0x94c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b05      	cmp	r3, #5
 800731a:	d025      	beq.n	8007368 <UART_SetConfig+0x948>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b06      	cmp	r3, #6
 8007322:	d01f      	beq.n	8007364 <UART_SetConfig+0x944>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b07      	cmp	r3, #7
 800732a:	d019      	beq.n	8007360 <UART_SetConfig+0x940>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b08      	cmp	r3, #8
 8007332:	d013      	beq.n	800735c <UART_SetConfig+0x93c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b09      	cmp	r3, #9
 800733a:	d00d      	beq.n	8007358 <UART_SetConfig+0x938>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b0a      	cmp	r3, #10
 8007342:	d007      	beq.n	8007354 <UART_SetConfig+0x934>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b0b      	cmp	r3, #11
 800734a:	d101      	bne.n	8007350 <UART_SetConfig+0x930>
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <UART_SetConfig+0xa08>)
 800734e:	e016      	b.n	800737e <UART_SetConfig+0x95e>
 8007350:	4b34      	ldr	r3, [pc, #208]	; (8007424 <UART_SetConfig+0xa04>)
 8007352:	e014      	b.n	800737e <UART_SetConfig+0x95e>
 8007354:	4b35      	ldr	r3, [pc, #212]	; (800742c <UART_SetConfig+0xa0c>)
 8007356:	e012      	b.n	800737e <UART_SetConfig+0x95e>
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <UART_SetConfig+0xa10>)
 800735a:	e010      	b.n	800737e <UART_SetConfig+0x95e>
 800735c:	4b35      	ldr	r3, [pc, #212]	; (8007434 <UART_SetConfig+0xa14>)
 800735e:	e00e      	b.n	800737e <UART_SetConfig+0x95e>
 8007360:	4b35      	ldr	r3, [pc, #212]	; (8007438 <UART_SetConfig+0xa18>)
 8007362:	e00c      	b.n	800737e <UART_SetConfig+0x95e>
 8007364:	4b35      	ldr	r3, [pc, #212]	; (800743c <UART_SetConfig+0xa1c>)
 8007366:	e00a      	b.n	800737e <UART_SetConfig+0x95e>
 8007368:	4b35      	ldr	r3, [pc, #212]	; (8007440 <UART_SetConfig+0xa20>)
 800736a:	e008      	b.n	800737e <UART_SetConfig+0x95e>
 800736c:	4b35      	ldr	r3, [pc, #212]	; (8007444 <UART_SetConfig+0xa24>)
 800736e:	e006      	b.n	800737e <UART_SetConfig+0x95e>
 8007370:	4b35      	ldr	r3, [pc, #212]	; (8007448 <UART_SetConfig+0xa28>)
 8007372:	e004      	b.n	800737e <UART_SetConfig+0x95e>
 8007374:	4b35      	ldr	r3, [pc, #212]	; (800744c <UART_SetConfig+0xa2c>)
 8007376:	e002      	b.n	800737e <UART_SetConfig+0x95e>
 8007378:	4b35      	ldr	r3, [pc, #212]	; (8007450 <UART_SetConfig+0xa30>)
 800737a:	e000      	b.n	800737e <UART_SetConfig+0x95e>
 800737c:	4b29      	ldr	r3, [pc, #164]	; (8007424 <UART_SetConfig+0xa04>)
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007380:	e0cb      	b.n	800751a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d046      	beq.n	8007418 <UART_SetConfig+0x9f8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b01      	cmp	r3, #1
 8007390:	d040      	beq.n	8007414 <UART_SetConfig+0x9f4>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b02      	cmp	r3, #2
 8007398:	d03a      	beq.n	8007410 <UART_SetConfig+0x9f0>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d034      	beq.n	800740c <UART_SetConfig+0x9ec>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d02e      	beq.n	8007408 <UART_SetConfig+0x9e8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d028      	beq.n	8007404 <UART_SetConfig+0x9e4>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d022      	beq.n	8007400 <UART_SetConfig+0x9e0>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d01c      	beq.n	80073fc <UART_SetConfig+0x9dc>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d016      	beq.n	80073f8 <UART_SetConfig+0x9d8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d00f      	beq.n	80073f2 <UART_SetConfig+0x9d2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b0a      	cmp	r3, #10
 80073d8:	d008      	beq.n	80073ec <UART_SetConfig+0x9cc>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b0b      	cmp	r3, #11
 80073e0:	d102      	bne.n	80073e8 <UART_SetConfig+0x9c8>
 80073e2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80073e6:	e018      	b.n	800741a <UART_SetConfig+0x9fa>
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <UART_SetConfig+0xa18>)
 80073ea:	e016      	b.n	800741a <UART_SetConfig+0x9fa>
 80073ec:	f647 2312 	movw	r3, #31250	; 0x7a12
 80073f0:	e013      	b.n	800741a <UART_SetConfig+0x9fa>
 80073f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80073f6:	e010      	b.n	800741a <UART_SetConfig+0x9fa>
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <UART_SetConfig+0xa34>)
 80073fa:	e00e      	b.n	800741a <UART_SetConfig+0x9fa>
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <UART_SetConfig+0xa08>)
 80073fe:	e00c      	b.n	800741a <UART_SetConfig+0x9fa>
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <UART_SetConfig+0xa38>)
 8007402:	e00a      	b.n	800741a <UART_SetConfig+0x9fa>
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <UART_SetConfig+0xa3c>)
 8007406:	e008      	b.n	800741a <UART_SetConfig+0x9fa>
 8007408:	4b08      	ldr	r3, [pc, #32]	; (800742c <UART_SetConfig+0xa0c>)
 800740a:	e006      	b.n	800741a <UART_SetConfig+0x9fa>
 800740c:	4b14      	ldr	r3, [pc, #80]	; (8007460 <UART_SetConfig+0xa40>)
 800740e:	e004      	b.n	800741a <UART_SetConfig+0x9fa>
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <UART_SetConfig+0xa10>)
 8007412:	e002      	b.n	800741a <UART_SetConfig+0x9fa>
 8007414:	4b07      	ldr	r3, [pc, #28]	; (8007434 <UART_SetConfig+0xa14>)
 8007416:	e000      	b.n	800741a <UART_SetConfig+0x9fa>
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <UART_SetConfig+0xa18>)
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800741c:	e07d      	b.n	800751a <UART_SetConfig+0xafa>
 800741e:	bf00      	nop
 8007420:	58024400 	.word	0x58024400
 8007424:	03d09000 	.word	0x03d09000
 8007428:	0003d090 	.word	0x0003d090
 800742c:	0007a120 	.word	0x0007a120
 8007430:	000f4240 	.word	0x000f4240
 8007434:	001e8480 	.word	0x001e8480
 8007438:	003d0900 	.word	0x003d0900
 800743c:	00516155 	.word	0x00516155
 8007440:	0061a800 	.word	0x0061a800
 8007444:	007a1200 	.word	0x007a1200
 8007448:	00a2c2aa 	.word	0x00a2c2aa
 800744c:	00f42400 	.word	0x00f42400
 8007450:	01e84800 	.word	0x01e84800
 8007454:	0001e848 	.word	0x0001e848
 8007458:	00051615 	.word	0x00051615
 800745c:	00061a80 	.word	0x00061a80
 8007460:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d04e      	beq.n	800750a <UART_SetConfig+0xaea>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	2b01      	cmp	r3, #1
 8007472:	d047      	beq.n	8007504 <UART_SetConfig+0xae4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b02      	cmp	r3, #2
 800747a:	d040      	beq.n	80074fe <UART_SetConfig+0xade>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b03      	cmp	r3, #3
 8007482:	d039      	beq.n	80074f8 <UART_SetConfig+0xad8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b04      	cmp	r3, #4
 800748a:	d032      	beq.n	80074f2 <UART_SetConfig+0xad2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b05      	cmp	r3, #5
 8007492:	d02b      	beq.n	80074ec <UART_SetConfig+0xacc>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b06      	cmp	r3, #6
 800749a:	d024      	beq.n	80074e6 <UART_SetConfig+0xac6>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	2b07      	cmp	r3, #7
 80074a2:	d01d      	beq.n	80074e0 <UART_SetConfig+0xac0>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d016      	beq.n	80074da <UART_SetConfig+0xaba>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	2b09      	cmp	r3, #9
 80074b2:	d00f      	beq.n	80074d4 <UART_SetConfig+0xab4>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b0a      	cmp	r3, #10
 80074ba:	d008      	beq.n	80074ce <UART_SetConfig+0xaae>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b0b      	cmp	r3, #11
 80074c2:	d101      	bne.n	80074c8 <UART_SetConfig+0xaa8>
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	e022      	b.n	800750e <UART_SetConfig+0xaee>
 80074c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074cc:	e01f      	b.n	800750e <UART_SetConfig+0xaee>
 80074ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d2:	e01c      	b.n	800750e <UART_SetConfig+0xaee>
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	e019      	b.n	800750e <UART_SetConfig+0xaee>
 80074da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074de:	e016      	b.n	800750e <UART_SetConfig+0xaee>
 80074e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074e4:	e013      	b.n	800750e <UART_SetConfig+0xaee>
 80074e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80074ea:	e010      	b.n	800750e <UART_SetConfig+0xaee>
 80074ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 80074f0:	e00d      	b.n	800750e <UART_SetConfig+0xaee>
 80074f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074f6:	e00a      	b.n	800750e <UART_SetConfig+0xaee>
 80074f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80074fc:	e007      	b.n	800750e <UART_SetConfig+0xaee>
 80074fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007502:	e004      	b.n	800750e <UART_SetConfig+0xaee>
 8007504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007508:	e001      	b.n	800750e <UART_SetConfig+0xaee>
 800750a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007510:	e003      	b.n	800751a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007518:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	f001 83e8 	beq.w	8008cf2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4413      	add	r3, r2
 800752c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752e:	429a      	cmp	r2, r3
 8007530:	d305      	bcc.n	800753e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753a:	429a      	cmp	r2, r3
 800753c:	d904      	bls.n	8007548 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007544:	f001 bbd5 	b.w	8008cf2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007548:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800754c:	2b08      	cmp	r3, #8
 800754e:	f000 8154 	beq.w	80077fa <UART_SetConfig+0xdda>
 8007552:	2b08      	cmp	r3, #8
 8007554:	dc06      	bgt.n	8007564 <UART_SetConfig+0xb44>
 8007556:	2b02      	cmp	r3, #2
 8007558:	d00f      	beq.n	800757a <UART_SetConfig+0xb5a>
 800755a:	2b04      	cmp	r3, #4
 800755c:	f000 80ac 	beq.w	80076b8 <UART_SetConfig+0xc98>
 8007560:	f000 bc30 	b.w	8007dc4 <UART_SetConfig+0x13a4>
 8007564:	2b20      	cmp	r3, #32
 8007566:	f000 832d 	beq.w	8007bc4 <UART_SetConfig+0x11a4>
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	f000 83a5 	beq.w	8007cba <UART_SetConfig+0x129a>
 8007570:	2b10      	cmp	r3, #16
 8007572:	f000 81e3 	beq.w	800793c <UART_SetConfig+0xf1c>
 8007576:	f000 bc25 	b.w	8007dc4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800757a:	f7fe faf9 	bl	8005b70 <HAL_RCCEx_GetD3PCLK1Freq>
 800757e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	4618      	mov	r0, r3
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	d067      	beq.n	8007660 <UART_SetConfig+0xc40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b01      	cmp	r3, #1
 8007596:	d05e      	beq.n	8007656 <UART_SetConfig+0xc36>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b02      	cmp	r3, #2
 800759e:	d055      	beq.n	800764c <UART_SetConfig+0xc2c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d04c      	beq.n	8007642 <UART_SetConfig+0xc22>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d043      	beq.n	8007638 <UART_SetConfig+0xc18>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d03a      	beq.n	800762e <UART_SetConfig+0xc0e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b06      	cmp	r3, #6
 80075be:	d031      	beq.n	8007624 <UART_SetConfig+0xc04>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	d028      	beq.n	800761a <UART_SetConfig+0xbfa>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d01f      	beq.n	8007610 <UART_SetConfig+0xbf0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	d016      	beq.n	8007606 <UART_SetConfig+0xbe6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b0a      	cmp	r3, #10
 80075de:	d00d      	beq.n	80075fc <UART_SetConfig+0xbdc>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b0b      	cmp	r3, #11
 80075e6:	d104      	bne.n	80075f2 <UART_SetConfig+0xbd2>
 80075e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ec:	f04f 0400 	mov.w	r4, #0
 80075f0:	e03a      	b.n	8007668 <UART_SetConfig+0xc48>
 80075f2:	f04f 0301 	mov.w	r3, #1
 80075f6:	f04f 0400 	mov.w	r4, #0
 80075fa:	e035      	b.n	8007668 <UART_SetConfig+0xc48>
 80075fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007600:	f04f 0400 	mov.w	r4, #0
 8007604:	e030      	b.n	8007668 <UART_SetConfig+0xc48>
 8007606:	f04f 0340 	mov.w	r3, #64	; 0x40
 800760a:	f04f 0400 	mov.w	r4, #0
 800760e:	e02b      	b.n	8007668 <UART_SetConfig+0xc48>
 8007610:	f04f 0320 	mov.w	r3, #32
 8007614:	f04f 0400 	mov.w	r4, #0
 8007618:	e026      	b.n	8007668 <UART_SetConfig+0xc48>
 800761a:	f04f 0310 	mov.w	r3, #16
 800761e:	f04f 0400 	mov.w	r4, #0
 8007622:	e021      	b.n	8007668 <UART_SetConfig+0xc48>
 8007624:	f04f 030c 	mov.w	r3, #12
 8007628:	f04f 0400 	mov.w	r4, #0
 800762c:	e01c      	b.n	8007668 <UART_SetConfig+0xc48>
 800762e:	f04f 030a 	mov.w	r3, #10
 8007632:	f04f 0400 	mov.w	r4, #0
 8007636:	e017      	b.n	8007668 <UART_SetConfig+0xc48>
 8007638:	f04f 0308 	mov.w	r3, #8
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	e012      	b.n	8007668 <UART_SetConfig+0xc48>
 8007642:	f04f 0306 	mov.w	r3, #6
 8007646:	f04f 0400 	mov.w	r4, #0
 800764a:	e00d      	b.n	8007668 <UART_SetConfig+0xc48>
 800764c:	f04f 0304 	mov.w	r3, #4
 8007650:	f04f 0400 	mov.w	r4, #0
 8007654:	e008      	b.n	8007668 <UART_SetConfig+0xc48>
 8007656:	f04f 0302 	mov.w	r3, #2
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	e003      	b.n	8007668 <UART_SetConfig+0xc48>
 8007660:	f04f 0301 	mov.w	r3, #1
 8007664:	f04f 0400 	mov.w	r4, #0
 8007668:	461a      	mov	r2, r3
 800766a:	4623      	mov	r3, r4
 800766c:	f7f8 fe90 	bl	8000390 <__aeabi_uldivmod>
 8007670:	4603      	mov	r3, r0
 8007672:	460c      	mov	r4, r1
 8007674:	4619      	mov	r1, r3
 8007676:	4622      	mov	r2, r4
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	f04f 0400 	mov.w	r4, #0
 8007680:	0214      	lsls	r4, r2, #8
 8007682:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007686:	020b      	lsls	r3, r1, #8
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6852      	ldr	r2, [r2, #4]
 800768c:	0852      	lsrs	r2, r2, #1
 800768e:	4611      	mov	r1, r2
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	eb13 0b01 	adds.w	fp, r3, r1
 8007698:	eb44 0c02 	adc.w	ip, r4, r2
 800769c:	4658      	mov	r0, fp
 800769e:	4661      	mov	r1, ip
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	461a      	mov	r2, r3
 80076aa:	4623      	mov	r3, r4
 80076ac:	f7f8 fe70 	bl	8000390 <__aeabi_uldivmod>
 80076b0:	4603      	mov	r3, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076b6:	e389      	b.n	8007dcc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe fa6d 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f04f 0100 	mov.w	r1, #0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d067      	beq.n	80077a2 <UART_SetConfig+0xd82>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d05e      	beq.n	8007798 <UART_SetConfig+0xd78>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d055      	beq.n	800778e <UART_SetConfig+0xd6e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d04c      	beq.n	8007784 <UART_SetConfig+0xd64>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d043      	beq.n	800777a <UART_SetConfig+0xd5a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d03a      	beq.n	8007770 <UART_SetConfig+0xd50>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d031      	beq.n	8007766 <UART_SetConfig+0xd46>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b07      	cmp	r3, #7
 8007708:	d028      	beq.n	800775c <UART_SetConfig+0xd3c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	2b08      	cmp	r3, #8
 8007710:	d01f      	beq.n	8007752 <UART_SetConfig+0xd32>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	2b09      	cmp	r3, #9
 8007718:	d016      	beq.n	8007748 <UART_SetConfig+0xd28>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b0a      	cmp	r3, #10
 8007720:	d00d      	beq.n	800773e <UART_SetConfig+0xd1e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2b0b      	cmp	r3, #11
 8007728:	d104      	bne.n	8007734 <UART_SetConfig+0xd14>
 800772a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800772e:	f04f 0400 	mov.w	r4, #0
 8007732:	e03a      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007734:	f04f 0301 	mov.w	r3, #1
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	e035      	b.n	80077aa <UART_SetConfig+0xd8a>
 800773e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007742:	f04f 0400 	mov.w	r4, #0
 8007746:	e030      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007748:	f04f 0340 	mov.w	r3, #64	; 0x40
 800774c:	f04f 0400 	mov.w	r4, #0
 8007750:	e02b      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007752:	f04f 0320 	mov.w	r3, #32
 8007756:	f04f 0400 	mov.w	r4, #0
 800775a:	e026      	b.n	80077aa <UART_SetConfig+0xd8a>
 800775c:	f04f 0310 	mov.w	r3, #16
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	e021      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007766:	f04f 030c 	mov.w	r3, #12
 800776a:	f04f 0400 	mov.w	r4, #0
 800776e:	e01c      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007770:	f04f 030a 	mov.w	r3, #10
 8007774:	f04f 0400 	mov.w	r4, #0
 8007778:	e017      	b.n	80077aa <UART_SetConfig+0xd8a>
 800777a:	f04f 0308 	mov.w	r3, #8
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	e012      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007784:	f04f 0306 	mov.w	r3, #6
 8007788:	f04f 0400 	mov.w	r4, #0
 800778c:	e00d      	b.n	80077aa <UART_SetConfig+0xd8a>
 800778e:	f04f 0304 	mov.w	r3, #4
 8007792:	f04f 0400 	mov.w	r4, #0
 8007796:	e008      	b.n	80077aa <UART_SetConfig+0xd8a>
 8007798:	f04f 0302 	mov.w	r3, #2
 800779c:	f04f 0400 	mov.w	r4, #0
 80077a0:	e003      	b.n	80077aa <UART_SetConfig+0xd8a>
 80077a2:	f04f 0301 	mov.w	r3, #1
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	461a      	mov	r2, r3
 80077ac:	4623      	mov	r3, r4
 80077ae:	f7f8 fdef 	bl	8000390 <__aeabi_uldivmod>
 80077b2:	4603      	mov	r3, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	4619      	mov	r1, r3
 80077b8:	4622      	mov	r2, r4
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	0214      	lsls	r4, r2, #8
 80077c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077c8:	020b      	lsls	r3, r1, #8
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6852      	ldr	r2, [r2, #4]
 80077ce:	0852      	lsrs	r2, r2, #1
 80077d0:	4611      	mov	r1, r2
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	eb13 0b01 	adds.w	fp, r3, r1
 80077da:	eb44 0c02 	adc.w	ip, r4, r2
 80077de:	4658      	mov	r0, fp
 80077e0:	4661      	mov	r1, ip
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	461a      	mov	r2, r3
 80077ec:	4623      	mov	r3, r4
 80077ee:	f7f8 fdcf 	bl	8000390 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077f8:	e2e8      	b.n	8007dcc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077fa:	f107 030c 	add.w	r3, r7, #12
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fb18 	bl	8005e34 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4618      	mov	r0, r3
 8007808:	f04f 0100 	mov.w	r1, #0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d067      	beq.n	80078e4 <UART_SetConfig+0xec4>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b01      	cmp	r3, #1
 800781a:	d05e      	beq.n	80078da <UART_SetConfig+0xeba>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2b02      	cmp	r3, #2
 8007822:	d055      	beq.n	80078d0 <UART_SetConfig+0xeb0>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b03      	cmp	r3, #3
 800782a:	d04c      	beq.n	80078c6 <UART_SetConfig+0xea6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	2b04      	cmp	r3, #4
 8007832:	d043      	beq.n	80078bc <UART_SetConfig+0xe9c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	2b05      	cmp	r3, #5
 800783a:	d03a      	beq.n	80078b2 <UART_SetConfig+0xe92>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b06      	cmp	r3, #6
 8007842:	d031      	beq.n	80078a8 <UART_SetConfig+0xe88>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b07      	cmp	r3, #7
 800784a:	d028      	beq.n	800789e <UART_SetConfig+0xe7e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	2b08      	cmp	r3, #8
 8007852:	d01f      	beq.n	8007894 <UART_SetConfig+0xe74>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b09      	cmp	r3, #9
 800785a:	d016      	beq.n	800788a <UART_SetConfig+0xe6a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b0a      	cmp	r3, #10
 8007862:	d00d      	beq.n	8007880 <UART_SetConfig+0xe60>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b0b      	cmp	r3, #11
 800786a:	d104      	bne.n	8007876 <UART_SetConfig+0xe56>
 800786c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007870:	f04f 0400 	mov.w	r4, #0
 8007874:	e03a      	b.n	80078ec <UART_SetConfig+0xecc>
 8007876:	f04f 0301 	mov.w	r3, #1
 800787a:	f04f 0400 	mov.w	r4, #0
 800787e:	e035      	b.n	80078ec <UART_SetConfig+0xecc>
 8007880:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	e030      	b.n	80078ec <UART_SetConfig+0xecc>
 800788a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	e02b      	b.n	80078ec <UART_SetConfig+0xecc>
 8007894:	f04f 0320 	mov.w	r3, #32
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	e026      	b.n	80078ec <UART_SetConfig+0xecc>
 800789e:	f04f 0310 	mov.w	r3, #16
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	e021      	b.n	80078ec <UART_SetConfig+0xecc>
 80078a8:	f04f 030c 	mov.w	r3, #12
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	e01c      	b.n	80078ec <UART_SetConfig+0xecc>
 80078b2:	f04f 030a 	mov.w	r3, #10
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	e017      	b.n	80078ec <UART_SetConfig+0xecc>
 80078bc:	f04f 0308 	mov.w	r3, #8
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	e012      	b.n	80078ec <UART_SetConfig+0xecc>
 80078c6:	f04f 0306 	mov.w	r3, #6
 80078ca:	f04f 0400 	mov.w	r4, #0
 80078ce:	e00d      	b.n	80078ec <UART_SetConfig+0xecc>
 80078d0:	f04f 0304 	mov.w	r3, #4
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	e008      	b.n	80078ec <UART_SetConfig+0xecc>
 80078da:	f04f 0302 	mov.w	r3, #2
 80078de:	f04f 0400 	mov.w	r4, #0
 80078e2:	e003      	b.n	80078ec <UART_SetConfig+0xecc>
 80078e4:	f04f 0301 	mov.w	r3, #1
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	461a      	mov	r2, r3
 80078ee:	4623      	mov	r3, r4
 80078f0:	f7f8 fd4e 	bl	8000390 <__aeabi_uldivmod>
 80078f4:	4603      	mov	r3, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	4619      	mov	r1, r3
 80078fa:	4622      	mov	r2, r4
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	0214      	lsls	r4, r2, #8
 8007906:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800790a:	020b      	lsls	r3, r1, #8
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	0852      	lsrs	r2, r2, #1
 8007912:	4611      	mov	r1, r2
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	eb13 0b01 	adds.w	fp, r3, r1
 800791c:	eb44 0c02 	adc.w	ip, r4, r2
 8007920:	4658      	mov	r0, fp
 8007922:	4661      	mov	r1, ip
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f04f 0400 	mov.w	r4, #0
 800792c:	461a      	mov	r2, r3
 800792e:	4623      	mov	r3, r4
 8007930:	f7f8 fd2e 	bl	8000390 <__aeabi_uldivmod>
 8007934:	4603      	mov	r3, r0
 8007936:	460c      	mov	r4, r1
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800793a:	e247      	b.n	8007dcc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793c:	4b96      	ldr	r3, [pc, #600]	; (8007b98 <UART_SetConfig+0x1178>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80a3 	beq.w	8007a90 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794a:	4b93      	ldr	r3, [pc, #588]	; (8007b98 <UART_SetConfig+0x1178>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	08db      	lsrs	r3, r3, #3
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	4a91      	ldr	r2, [pc, #580]	; (8007b9c <UART_SetConfig+0x117c>)
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	4618      	mov	r0, r3
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d067      	beq.n	8007a38 <UART_SetConfig+0x1018>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b01      	cmp	r3, #1
 800796e:	d05e      	beq.n	8007a2e <UART_SetConfig+0x100e>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b02      	cmp	r3, #2
 8007976:	d055      	beq.n	8007a24 <UART_SetConfig+0x1004>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b03      	cmp	r3, #3
 800797e:	d04c      	beq.n	8007a1a <UART_SetConfig+0xffa>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b04      	cmp	r3, #4
 8007986:	d043      	beq.n	8007a10 <UART_SetConfig+0xff0>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b05      	cmp	r3, #5
 800798e:	d03a      	beq.n	8007a06 <UART_SetConfig+0xfe6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b06      	cmp	r3, #6
 8007996:	d031      	beq.n	80079fc <UART_SetConfig+0xfdc>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b07      	cmp	r3, #7
 800799e:	d028      	beq.n	80079f2 <UART_SetConfig+0xfd2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d01f      	beq.n	80079e8 <UART_SetConfig+0xfc8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b09      	cmp	r3, #9
 80079ae:	d016      	beq.n	80079de <UART_SetConfig+0xfbe>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b0a      	cmp	r3, #10
 80079b6:	d00d      	beq.n	80079d4 <UART_SetConfig+0xfb4>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d104      	bne.n	80079ca <UART_SetConfig+0xfaa>
 80079c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	e03a      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079ca:	f04f 0301 	mov.w	r3, #1
 80079ce:	f04f 0400 	mov.w	r4, #0
 80079d2:	e035      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	e030      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079e2:	f04f 0400 	mov.w	r4, #0
 80079e6:	e02b      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079e8:	f04f 0320 	mov.w	r3, #32
 80079ec:	f04f 0400 	mov.w	r4, #0
 80079f0:	e026      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079f2:	f04f 0310 	mov.w	r3, #16
 80079f6:	f04f 0400 	mov.w	r4, #0
 80079fa:	e021      	b.n	8007a40 <UART_SetConfig+0x1020>
 80079fc:	f04f 030c 	mov.w	r3, #12
 8007a00:	f04f 0400 	mov.w	r4, #0
 8007a04:	e01c      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a06:	f04f 030a 	mov.w	r3, #10
 8007a0a:	f04f 0400 	mov.w	r4, #0
 8007a0e:	e017      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a10:	f04f 0308 	mov.w	r3, #8
 8007a14:	f04f 0400 	mov.w	r4, #0
 8007a18:	e012      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a1a:	f04f 0306 	mov.w	r3, #6
 8007a1e:	f04f 0400 	mov.w	r4, #0
 8007a22:	e00d      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a24:	f04f 0304 	mov.w	r3, #4
 8007a28:	f04f 0400 	mov.w	r4, #0
 8007a2c:	e008      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a2e:	f04f 0302 	mov.w	r3, #2
 8007a32:	f04f 0400 	mov.w	r4, #0
 8007a36:	e003      	b.n	8007a40 <UART_SetConfig+0x1020>
 8007a38:	f04f 0301 	mov.w	r3, #1
 8007a3c:	f04f 0400 	mov.w	r4, #0
 8007a40:	461a      	mov	r2, r3
 8007a42:	4623      	mov	r3, r4
 8007a44:	f7f8 fca4 	bl	8000390 <__aeabi_uldivmod>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4622      	mov	r2, r4
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	f04f 0400 	mov.w	r4, #0
 8007a58:	0214      	lsls	r4, r2, #8
 8007a5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a5e:	020b      	lsls	r3, r1, #8
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6852      	ldr	r2, [r2, #4]
 8007a64:	0852      	lsrs	r2, r2, #1
 8007a66:	4611      	mov	r1, r2
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	eb13 0b01 	adds.w	fp, r3, r1
 8007a70:	eb44 0c02 	adc.w	ip, r4, r2
 8007a74:	4658      	mov	r0, fp
 8007a76:	4661      	mov	r1, ip
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f04f 0400 	mov.w	r4, #0
 8007a80:	461a      	mov	r2, r3
 8007a82:	4623      	mov	r3, r4
 8007a84:	f7f8 fc84 	bl	8000390 <__aeabi_uldivmod>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007a8e:	e19d      	b.n	8007dcc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d05b      	beq.n	8007b50 <UART_SetConfig+0x1130>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d053      	beq.n	8007b48 <UART_SetConfig+0x1128>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d04b      	beq.n	8007b40 <UART_SetConfig+0x1120>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d043      	beq.n	8007b38 <UART_SetConfig+0x1118>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d03b      	beq.n	8007b30 <UART_SetConfig+0x1110>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	2b05      	cmp	r3, #5
 8007abe:	d033      	beq.n	8007b28 <UART_SetConfig+0x1108>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b06      	cmp	r3, #6
 8007ac6:	d02b      	beq.n	8007b20 <UART_SetConfig+0x1100>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	d023      	beq.n	8007b18 <UART_SetConfig+0x10f8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d01b      	beq.n	8007b10 <UART_SetConfig+0x10f0>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	d013      	beq.n	8007b08 <UART_SetConfig+0x10e8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b0a      	cmp	r3, #10
 8007ae6:	d00b      	beq.n	8007b00 <UART_SetConfig+0x10e0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b0b      	cmp	r3, #11
 8007aee:	d103      	bne.n	8007af8 <UART_SetConfig+0x10d8>
 8007af0:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <UART_SetConfig+0x117c>)
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e02e      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007af8:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <UART_SetConfig+0x1180>)
 8007afa:	f04f 0403 	mov.w	r4, #3
 8007afe:	e02a      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <UART_SetConfig+0x1184>)
 8007b02:	f04f 0400 	mov.w	r4, #0
 8007b06:	e026      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b08:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <UART_SetConfig+0x1188>)
 8007b0a:	f04f 0400 	mov.w	r4, #0
 8007b0e:	e022      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b10:	4b26      	ldr	r3, [pc, #152]	; (8007bac <UART_SetConfig+0x118c>)
 8007b12:	f04f 0400 	mov.w	r4, #0
 8007b16:	e01e      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <UART_SetConfig+0x1190>)
 8007b1a:	f04f 0400 	mov.w	r4, #0
 8007b1e:	e01a      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b20:	a419      	add	r4, pc, #100	; (adr r4, 8007b88 <UART_SetConfig+0x1168>)
 8007b22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b26:	e016      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b28:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <UART_SetConfig+0x1194>)
 8007b2a:	f04f 0400 	mov.w	r4, #0
 8007b2e:	e012      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b30:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <UART_SetConfig+0x1198>)
 8007b32:	f04f 0400 	mov.w	r4, #0
 8007b36:	e00e      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b38:	a415      	add	r4, pc, #84	; (adr r4, 8007b90 <UART_SetConfig+0x1170>)
 8007b3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b3e:	e00a      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <UART_SetConfig+0x119c>)
 8007b42:	f04f 0400 	mov.w	r4, #0
 8007b46:	e006      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <UART_SetConfig+0x11a0>)
 8007b4a:	f04f 0401 	mov.w	r4, #1
 8007b4e:	e002      	b.n	8007b56 <UART_SetConfig+0x1136>
 8007b50:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <UART_SetConfig+0x1180>)
 8007b52:	f04f 0403 	mov.w	r4, #3
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	0852      	lsrs	r2, r2, #1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	eb13 0b01 	adds.w	fp, r3, r1
 8007b66:	eb44 0c02 	adc.w	ip, r4, r2
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	4661      	mov	r1, ip
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f04f 0400 	mov.w	r4, #0
 8007b76:	461a      	mov	r2, r3
 8007b78:	4623      	mov	r3, r4
 8007b7a:	f7f8 fc09 	bl	8000390 <__aeabi_uldivmod>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b84:	e122      	b.n	8007dcc <UART_SetConfig+0x13ac>
 8007b86:	bf00      	nop
 8007b88:	51615500 	.word	0x51615500
 8007b8c:	00000000 	.word	0x00000000
 8007b90:	a2c2aa00 	.word	0xa2c2aa00
 8007b94:	00000000 	.word	0x00000000
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	03d09000 	.word	0x03d09000
 8007ba0:	d0900000 	.word	0xd0900000
 8007ba4:	07a12000 	.word	0x07a12000
 8007ba8:	0f424000 	.word	0x0f424000
 8007bac:	1e848000 	.word	0x1e848000
 8007bb0:	3d090000 	.word	0x3d090000
 8007bb4:	61a80000 	.word	0x61a80000
 8007bb8:	7a120000 	.word	0x7a120000
 8007bbc:	f4240000 	.word	0xf4240000
 8007bc0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05b      	beq.n	8007c84 <UART_SetConfig+0x1264>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d053      	beq.n	8007c7c <UART_SetConfig+0x125c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d04b      	beq.n	8007c74 <UART_SetConfig+0x1254>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d043      	beq.n	8007c6c <UART_SetConfig+0x124c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d03b      	beq.n	8007c64 <UART_SetConfig+0x1244>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	2b05      	cmp	r3, #5
 8007bf2:	d033      	beq.n	8007c5c <UART_SetConfig+0x123c>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	2b06      	cmp	r3, #6
 8007bfa:	d02b      	beq.n	8007c54 <UART_SetConfig+0x1234>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	2b07      	cmp	r3, #7
 8007c02:	d023      	beq.n	8007c4c <UART_SetConfig+0x122c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d01b      	beq.n	8007c44 <UART_SetConfig+0x1224>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d013      	beq.n	8007c3c <UART_SetConfig+0x121c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b0a      	cmp	r3, #10
 8007c1a:	d00b      	beq.n	8007c34 <UART_SetConfig+0x1214>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	2b0b      	cmp	r3, #11
 8007c22:	d103      	bne.n	8007c2c <UART_SetConfig+0x120c>
 8007c24:	4bc0      	ldr	r3, [pc, #768]	; (8007f28 <UART_SetConfig+0x1508>)
 8007c26:	f04f 0400 	mov.w	r4, #0
 8007c2a:	e02e      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c2c:	4bbf      	ldr	r3, [pc, #764]	; (8007f2c <UART_SetConfig+0x150c>)
 8007c2e:	f04f 0400 	mov.w	r4, #0
 8007c32:	e02a      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c34:	4bbe      	ldr	r3, [pc, #760]	; (8007f30 <UART_SetConfig+0x1510>)
 8007c36:	f04f 0400 	mov.w	r4, #0
 8007c3a:	e026      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c3c:	4bbd      	ldr	r3, [pc, #756]	; (8007f34 <UART_SetConfig+0x1514>)
 8007c3e:	f04f 0400 	mov.w	r4, #0
 8007c42:	e022      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c44:	4bbc      	ldr	r3, [pc, #752]	; (8007f38 <UART_SetConfig+0x1518>)
 8007c46:	f04f 0400 	mov.w	r4, #0
 8007c4a:	e01e      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c4c:	4bbb      	ldr	r3, [pc, #748]	; (8007f3c <UART_SetConfig+0x151c>)
 8007c4e:	f04f 0400 	mov.w	r4, #0
 8007c52:	e01a      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c54:	a4b0      	add	r4, pc, #704	; (adr r4, 8007f18 <UART_SetConfig+0x14f8>)
 8007c56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c5a:	e016      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c5c:	4bb8      	ldr	r3, [pc, #736]	; (8007f40 <UART_SetConfig+0x1520>)
 8007c5e:	f04f 0400 	mov.w	r4, #0
 8007c62:	e012      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c64:	4bb7      	ldr	r3, [pc, #732]	; (8007f44 <UART_SetConfig+0x1524>)
 8007c66:	f04f 0400 	mov.w	r4, #0
 8007c6a:	e00e      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c6c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007f20 <UART_SetConfig+0x1500>)
 8007c6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c72:	e00a      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c74:	4bb4      	ldr	r3, [pc, #720]	; (8007f48 <UART_SetConfig+0x1528>)
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	e006      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c7c:	4bb3      	ldr	r3, [pc, #716]	; (8007f4c <UART_SetConfig+0x152c>)
 8007c7e:	f04f 0400 	mov.w	r4, #0
 8007c82:	e002      	b.n	8007c8a <UART_SetConfig+0x126a>
 8007c84:	4ba9      	ldr	r3, [pc, #676]	; (8007f2c <UART_SetConfig+0x150c>)
 8007c86:	f04f 0400 	mov.w	r4, #0
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6852      	ldr	r2, [r2, #4]
 8007c8e:	0852      	lsrs	r2, r2, #1
 8007c90:	4611      	mov	r1, r2
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	eb13 0b01 	adds.w	fp, r3, r1
 8007c9a:	eb44 0c02 	adc.w	ip, r4, r2
 8007c9e:	4658      	mov	r0, fp
 8007ca0:	4661      	mov	r1, ip
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f04f 0400 	mov.w	r4, #0
 8007caa:	461a      	mov	r2, r3
 8007cac:	4623      	mov	r3, r4
 8007cae:	f7f8 fb6f 	bl	8000390 <__aeabi_uldivmod>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007cb8:	e088      	b.n	8007dcc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d064      	beq.n	8007d8c <UART_SetConfig+0x136c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d05b      	beq.n	8007d82 <UART_SetConfig+0x1362>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d052      	beq.n	8007d78 <UART_SetConfig+0x1358>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d04a      	beq.n	8007d70 <UART_SetConfig+0x1350>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d041      	beq.n	8007d66 <UART_SetConfig+0x1346>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d039      	beq.n	8007d5e <UART_SetConfig+0x133e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d031      	beq.n	8007d56 <UART_SetConfig+0x1336>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b07      	cmp	r3, #7
 8007cf8:	d028      	beq.n	8007d4c <UART_SetConfig+0x132c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	d01f      	beq.n	8007d42 <UART_SetConfig+0x1322>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d016      	beq.n	8007d38 <UART_SetConfig+0x1318>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b0a      	cmp	r3, #10
 8007d10:	d00d      	beq.n	8007d2e <UART_SetConfig+0x130e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b0b      	cmp	r3, #11
 8007d18:	d104      	bne.n	8007d24 <UART_SetConfig+0x1304>
 8007d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	e037      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d28:	f04f 0400 	mov.w	r4, #0
 8007d2c:	e032      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d32:	f04f 0400 	mov.w	r4, #0
 8007d36:	e02d      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d3c:	f04f 0400 	mov.w	r4, #0
 8007d40:	e028      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	e023      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d50:	f04f 0400 	mov.w	r4, #0
 8007d54:	e01e      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d56:	4b7e      	ldr	r3, [pc, #504]	; (8007f50 <UART_SetConfig+0x1530>)
 8007d58:	f04f 0400 	mov.w	r4, #0
 8007d5c:	e01a      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d5e:	4b7d      	ldr	r3, [pc, #500]	; (8007f54 <UART_SetConfig+0x1534>)
 8007d60:	f04f 0400 	mov.w	r4, #0
 8007d64:	e016      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	e011      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d70:	4b79      	ldr	r3, [pc, #484]	; (8007f58 <UART_SetConfig+0x1538>)
 8007d72:	f04f 0400 	mov.w	r4, #0
 8007d76:	e00d      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d7c:	f04f 0400 	mov.w	r4, #0
 8007d80:	e008      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d86:	f04f 0400 	mov.w	r4, #0
 8007d8a:	e003      	b.n	8007d94 <UART_SetConfig+0x1374>
 8007d8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d90:	f04f 0400 	mov.w	r4, #0
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6852      	ldr	r2, [r2, #4]
 8007d98:	0852      	lsrs	r2, r2, #1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	eb13 0b01 	adds.w	fp, r3, r1
 8007da4:	eb44 0c02 	adc.w	ip, r4, r2
 8007da8:	4658      	mov	r0, fp
 8007daa:	4661      	mov	r1, ip
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	461a      	mov	r2, r3
 8007db6:	4623      	mov	r3, r4
 8007db8:	f7f8 faea 	bl	8000390 <__aeabi_uldivmod>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dc2:	e003      	b.n	8007dcc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007dca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd2:	d309      	bcc.n	8007de8 <UART_SetConfig+0x13c8>
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dda:	d205      	bcs.n	8007de8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de2:	60da      	str	r2, [r3, #12]
 8007de4:	f000 bf85 	b.w	8008cf2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	f000 bf80 	b.w	8008cf2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfa:	f040 83da 	bne.w	80085b2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007dfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	f200 83b3 	bhi.w	800856e <UART_SetConfig+0x1b4e>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x13f0>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007f5d 	.word	0x08007f5d
 8007e14:	08008015 	.word	0x08008015
 8007e18:	0800856f 	.word	0x0800856f
 8007e1c:	0800856f 	.word	0x0800856f
 8007e20:	080080cd 	.word	0x080080cd
 8007e24:	0800856f 	.word	0x0800856f
 8007e28:	0800856f 	.word	0x0800856f
 8007e2c:	0800856f 	.word	0x0800856f
 8007e30:	08008189 	.word	0x08008189
 8007e34:	0800856f 	.word	0x0800856f
 8007e38:	0800856f 	.word	0x0800856f
 8007e3c:	0800856f 	.word	0x0800856f
 8007e40:	0800856f 	.word	0x0800856f
 8007e44:	0800856f 	.word	0x0800856f
 8007e48:	0800856f 	.word	0x0800856f
 8007e4c:	0800856f 	.word	0x0800856f
 8007e50:	08008245 	.word	0x08008245
 8007e54:	0800856f 	.word	0x0800856f
 8007e58:	0800856f 	.word	0x0800856f
 8007e5c:	0800856f 	.word	0x0800856f
 8007e60:	0800856f 	.word	0x0800856f
 8007e64:	0800856f 	.word	0x0800856f
 8007e68:	0800856f 	.word	0x0800856f
 8007e6c:	0800856f 	.word	0x0800856f
 8007e70:	0800856f 	.word	0x0800856f
 8007e74:	0800856f 	.word	0x0800856f
 8007e78:	0800856f 	.word	0x0800856f
 8007e7c:	0800856f 	.word	0x0800856f
 8007e80:	0800856f 	.word	0x0800856f
 8007e84:	0800856f 	.word	0x0800856f
 8007e88:	0800856f 	.word	0x0800856f
 8007e8c:	0800856f 	.word	0x0800856f
 8007e90:	080083b7 	.word	0x080083b7
 8007e94:	0800856f 	.word	0x0800856f
 8007e98:	0800856f 	.word	0x0800856f
 8007e9c:	0800856f 	.word	0x0800856f
 8007ea0:	0800856f 	.word	0x0800856f
 8007ea4:	0800856f 	.word	0x0800856f
 8007ea8:	0800856f 	.word	0x0800856f
 8007eac:	0800856f 	.word	0x0800856f
 8007eb0:	0800856f 	.word	0x0800856f
 8007eb4:	0800856f 	.word	0x0800856f
 8007eb8:	0800856f 	.word	0x0800856f
 8007ebc:	0800856f 	.word	0x0800856f
 8007ec0:	0800856f 	.word	0x0800856f
 8007ec4:	0800856f 	.word	0x0800856f
 8007ec8:	0800856f 	.word	0x0800856f
 8007ecc:	0800856f 	.word	0x0800856f
 8007ed0:	0800856f 	.word	0x0800856f
 8007ed4:	0800856f 	.word	0x0800856f
 8007ed8:	0800856f 	.word	0x0800856f
 8007edc:	0800856f 	.word	0x0800856f
 8007ee0:	0800856f 	.word	0x0800856f
 8007ee4:	0800856f 	.word	0x0800856f
 8007ee8:	0800856f 	.word	0x0800856f
 8007eec:	0800856f 	.word	0x0800856f
 8007ef0:	0800856f 	.word	0x0800856f
 8007ef4:	0800856f 	.word	0x0800856f
 8007ef8:	0800856f 	.word	0x0800856f
 8007efc:	0800856f 	.word	0x0800856f
 8007f00:	0800856f 	.word	0x0800856f
 8007f04:	0800856f 	.word	0x0800856f
 8007f08:	0800856f 	.word	0x0800856f
 8007f0c:	0800856f 	.word	0x0800856f
 8007f10:	080084ad 	.word	0x080084ad
 8007f14:	f3af 8000 	nop.w
 8007f18:	05161500 	.word	0x05161500
 8007f1c:	00000000 	.word	0x00000000
 8007f20:	0a2c2a00 	.word	0x0a2c2a00
 8007f24:	00000000 	.word	0x00000000
 8007f28:	003d0900 	.word	0x003d0900
 8007f2c:	3d090000 	.word	0x3d090000
 8007f30:	007a1200 	.word	0x007a1200
 8007f34:	00f42400 	.word	0x00f42400
 8007f38:	01e84800 	.word	0x01e84800
 8007f3c:	03d09000 	.word	0x03d09000
 8007f40:	061a8000 	.word	0x061a8000
 8007f44:	07a12000 	.word	0x07a12000
 8007f48:	0f424000 	.word	0x0f424000
 8007f4c:	1e848000 	.word	0x1e848000
 8007f50:	000aaa00 	.word	0x000aaa00
 8007f54:	000ccc00 	.word	0x000ccc00
 8007f58:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fc febc 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 8007f60:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d044      	beq.n	8007ff4 <UART_SetConfig+0x15d4>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d03e      	beq.n	8007ff0 <UART_SetConfig+0x15d0>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d038      	beq.n	8007fec <UART_SetConfig+0x15cc>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d032      	beq.n	8007fe8 <UART_SetConfig+0x15c8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d02c      	beq.n	8007fe4 <UART_SetConfig+0x15c4>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d026      	beq.n	8007fe0 <UART_SetConfig+0x15c0>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b06      	cmp	r3, #6
 8007f98:	d020      	beq.n	8007fdc <UART_SetConfig+0x15bc>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b07      	cmp	r3, #7
 8007fa0:	d01a      	beq.n	8007fd8 <UART_SetConfig+0x15b8>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d014      	beq.n	8007fd4 <UART_SetConfig+0x15b4>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d00e      	beq.n	8007fd0 <UART_SetConfig+0x15b0>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b0a      	cmp	r3, #10
 8007fb8:	d008      	beq.n	8007fcc <UART_SetConfig+0x15ac>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2b0b      	cmp	r3, #11
 8007fc0:	d102      	bne.n	8007fc8 <UART_SetConfig+0x15a8>
 8007fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fc6:	e016      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e014      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	e012      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	e010      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fd4:	2320      	movs	r3, #32
 8007fd6:	e00e      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	e00c      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	e00a      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fe0:	230a      	movs	r3, #10
 8007fe2:	e008      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	e006      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fe8:	2306      	movs	r3, #6
 8007fea:	e004      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	e002      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e000      	b.n	8007ff6 <UART_SetConfig+0x15d6>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	005a      	lsls	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	441a      	add	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	fbb2 f3f3 	udiv	r3, r2, r3
 800800e:	b29b      	uxth	r3, r3
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008012:	e2b0      	b.n	8008576 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008014:	f7fc fe76 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8008018:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d044      	beq.n	80080ac <UART_SetConfig+0x168c>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b01      	cmp	r3, #1
 8008028:	d03e      	beq.n	80080a8 <UART_SetConfig+0x1688>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b02      	cmp	r3, #2
 8008030:	d038      	beq.n	80080a4 <UART_SetConfig+0x1684>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b03      	cmp	r3, #3
 8008038:	d032      	beq.n	80080a0 <UART_SetConfig+0x1680>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b04      	cmp	r3, #4
 8008040:	d02c      	beq.n	800809c <UART_SetConfig+0x167c>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b05      	cmp	r3, #5
 8008048:	d026      	beq.n	8008098 <UART_SetConfig+0x1678>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b06      	cmp	r3, #6
 8008050:	d020      	beq.n	8008094 <UART_SetConfig+0x1674>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b07      	cmp	r3, #7
 8008058:	d01a      	beq.n	8008090 <UART_SetConfig+0x1670>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b08      	cmp	r3, #8
 8008060:	d014      	beq.n	800808c <UART_SetConfig+0x166c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b09      	cmp	r3, #9
 8008068:	d00e      	beq.n	8008088 <UART_SetConfig+0x1668>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b0a      	cmp	r3, #10
 8008070:	d008      	beq.n	8008084 <UART_SetConfig+0x1664>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b0b      	cmp	r3, #11
 8008078:	d102      	bne.n	8008080 <UART_SetConfig+0x1660>
 800807a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807e:	e016      	b.n	80080ae <UART_SetConfig+0x168e>
 8008080:	2301      	movs	r3, #1
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x168e>
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	e012      	b.n	80080ae <UART_SetConfig+0x168e>
 8008088:	2340      	movs	r3, #64	; 0x40
 800808a:	e010      	b.n	80080ae <UART_SetConfig+0x168e>
 800808c:	2320      	movs	r3, #32
 800808e:	e00e      	b.n	80080ae <UART_SetConfig+0x168e>
 8008090:	2310      	movs	r3, #16
 8008092:	e00c      	b.n	80080ae <UART_SetConfig+0x168e>
 8008094:	230c      	movs	r3, #12
 8008096:	e00a      	b.n	80080ae <UART_SetConfig+0x168e>
 8008098:	230a      	movs	r3, #10
 800809a:	e008      	b.n	80080ae <UART_SetConfig+0x168e>
 800809c:	2308      	movs	r3, #8
 800809e:	e006      	b.n	80080ae <UART_SetConfig+0x168e>
 80080a0:	2306      	movs	r3, #6
 80080a2:	e004      	b.n	80080ae <UART_SetConfig+0x168e>
 80080a4:	2304      	movs	r3, #4
 80080a6:	e002      	b.n	80080ae <UART_SetConfig+0x168e>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e000      	b.n	80080ae <UART_SetConfig+0x168e>
 80080ac:	2301      	movs	r3, #1
 80080ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	005a      	lsls	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	441a      	add	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ca:	e254      	b.n	8008576 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080cc:	f107 0318 	add.w	r3, r7, #24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fd fd63 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d044      	beq.n	800816a <UART_SetConfig+0x174a>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d03e      	beq.n	8008166 <UART_SetConfig+0x1746>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d038      	beq.n	8008162 <UART_SetConfig+0x1742>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d032      	beq.n	800815e <UART_SetConfig+0x173e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d02c      	beq.n	800815a <UART_SetConfig+0x173a>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2b05      	cmp	r3, #5
 8008106:	d026      	beq.n	8008156 <UART_SetConfig+0x1736>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	2b06      	cmp	r3, #6
 800810e:	d020      	beq.n	8008152 <UART_SetConfig+0x1732>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	2b07      	cmp	r3, #7
 8008116:	d01a      	beq.n	800814e <UART_SetConfig+0x172e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b08      	cmp	r3, #8
 800811e:	d014      	beq.n	800814a <UART_SetConfig+0x172a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	2b09      	cmp	r3, #9
 8008126:	d00e      	beq.n	8008146 <UART_SetConfig+0x1726>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b0a      	cmp	r3, #10
 800812e:	d008      	beq.n	8008142 <UART_SetConfig+0x1722>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2b0b      	cmp	r3, #11
 8008136:	d102      	bne.n	800813e <UART_SetConfig+0x171e>
 8008138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813c:	e016      	b.n	800816c <UART_SetConfig+0x174c>
 800813e:	2301      	movs	r3, #1
 8008140:	e014      	b.n	800816c <UART_SetConfig+0x174c>
 8008142:	2380      	movs	r3, #128	; 0x80
 8008144:	e012      	b.n	800816c <UART_SetConfig+0x174c>
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	e010      	b.n	800816c <UART_SetConfig+0x174c>
 800814a:	2320      	movs	r3, #32
 800814c:	e00e      	b.n	800816c <UART_SetConfig+0x174c>
 800814e:	2310      	movs	r3, #16
 8008150:	e00c      	b.n	800816c <UART_SetConfig+0x174c>
 8008152:	230c      	movs	r3, #12
 8008154:	e00a      	b.n	800816c <UART_SetConfig+0x174c>
 8008156:	230a      	movs	r3, #10
 8008158:	e008      	b.n	800816c <UART_SetConfig+0x174c>
 800815a:	2308      	movs	r3, #8
 800815c:	e006      	b.n	800816c <UART_SetConfig+0x174c>
 800815e:	2306      	movs	r3, #6
 8008160:	e004      	b.n	800816c <UART_SetConfig+0x174c>
 8008162:	2304      	movs	r3, #4
 8008164:	e002      	b.n	800816c <UART_SetConfig+0x174c>
 8008166:	2302      	movs	r3, #2
 8008168:	e000      	b.n	800816c <UART_SetConfig+0x174c>
 800816a:	2301      	movs	r3, #1
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	005a      	lsls	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	441a      	add	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	b29b      	uxth	r3, r3
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008186:	e1f6      	b.n	8008576 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008188:	f107 030c 	add.w	r3, r7, #12
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fe51 	bl	8005e34 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	d044      	beq.n	8008226 <UART_SetConfig+0x1806>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d03e      	beq.n	8008222 <UART_SetConfig+0x1802>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d038      	beq.n	800821e <UART_SetConfig+0x17fe>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d032      	beq.n	800821a <UART_SetConfig+0x17fa>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d02c      	beq.n	8008216 <UART_SetConfig+0x17f6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	d026      	beq.n	8008212 <UART_SetConfig+0x17f2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b06      	cmp	r3, #6
 80081ca:	d020      	beq.n	800820e <UART_SetConfig+0x17ee>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b07      	cmp	r3, #7
 80081d2:	d01a      	beq.n	800820a <UART_SetConfig+0x17ea>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d014      	beq.n	8008206 <UART_SetConfig+0x17e6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d00e      	beq.n	8008202 <UART_SetConfig+0x17e2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b0a      	cmp	r3, #10
 80081ea:	d008      	beq.n	80081fe <UART_SetConfig+0x17de>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b0b      	cmp	r3, #11
 80081f2:	d102      	bne.n	80081fa <UART_SetConfig+0x17da>
 80081f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f8:	e016      	b.n	8008228 <UART_SetConfig+0x1808>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e014      	b.n	8008228 <UART_SetConfig+0x1808>
 80081fe:	2380      	movs	r3, #128	; 0x80
 8008200:	e012      	b.n	8008228 <UART_SetConfig+0x1808>
 8008202:	2340      	movs	r3, #64	; 0x40
 8008204:	e010      	b.n	8008228 <UART_SetConfig+0x1808>
 8008206:	2320      	movs	r3, #32
 8008208:	e00e      	b.n	8008228 <UART_SetConfig+0x1808>
 800820a:	2310      	movs	r3, #16
 800820c:	e00c      	b.n	8008228 <UART_SetConfig+0x1808>
 800820e:	230c      	movs	r3, #12
 8008210:	e00a      	b.n	8008228 <UART_SetConfig+0x1808>
 8008212:	230a      	movs	r3, #10
 8008214:	e008      	b.n	8008228 <UART_SetConfig+0x1808>
 8008216:	2308      	movs	r3, #8
 8008218:	e006      	b.n	8008228 <UART_SetConfig+0x1808>
 800821a:	2306      	movs	r3, #6
 800821c:	e004      	b.n	8008228 <UART_SetConfig+0x1808>
 800821e:	2304      	movs	r3, #4
 8008220:	e002      	b.n	8008228 <UART_SetConfig+0x1808>
 8008222:	2302      	movs	r3, #2
 8008224:	e000      	b.n	8008228 <UART_SetConfig+0x1808>
 8008226:	2301      	movs	r3, #1
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	005a      	lsls	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	b29b      	uxth	r3, r3
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008242:	e198      	b.n	8008576 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008244:	4b87      	ldr	r3, [pc, #540]	; (8008464 <UART_SetConfig+0x1a44>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05e      	beq.n	800830e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008250:	4b84      	ldr	r3, [pc, #528]	; (8008464 <UART_SetConfig+0x1a44>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	08db      	lsrs	r3, r3, #3
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	4a83      	ldr	r2, [pc, #524]	; (8008468 <UART_SetConfig+0x1a48>)
 800825c:	40da      	lsrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d044      	beq.n	80082f0 <UART_SetConfig+0x18d0>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b01      	cmp	r3, #1
 800826c:	d03e      	beq.n	80082ec <UART_SetConfig+0x18cc>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b02      	cmp	r3, #2
 8008274:	d038      	beq.n	80082e8 <UART_SetConfig+0x18c8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b03      	cmp	r3, #3
 800827c:	d032      	beq.n	80082e4 <UART_SetConfig+0x18c4>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b04      	cmp	r3, #4
 8008284:	d02c      	beq.n	80082e0 <UART_SetConfig+0x18c0>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b05      	cmp	r3, #5
 800828c:	d026      	beq.n	80082dc <UART_SetConfig+0x18bc>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b06      	cmp	r3, #6
 8008294:	d020      	beq.n	80082d8 <UART_SetConfig+0x18b8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b07      	cmp	r3, #7
 800829c:	d01a      	beq.n	80082d4 <UART_SetConfig+0x18b4>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b08      	cmp	r3, #8
 80082a4:	d014      	beq.n	80082d0 <UART_SetConfig+0x18b0>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	d00e      	beq.n	80082cc <UART_SetConfig+0x18ac>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b0a      	cmp	r3, #10
 80082b4:	d008      	beq.n	80082c8 <UART_SetConfig+0x18a8>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	2b0b      	cmp	r3, #11
 80082bc:	d102      	bne.n	80082c4 <UART_SetConfig+0x18a4>
 80082be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c2:	e016      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e014      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	e012      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	e010      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082d0:	2320      	movs	r3, #32
 80082d2:	e00e      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082d4:	2310      	movs	r3, #16
 80082d6:	e00c      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082d8:	230c      	movs	r3, #12
 80082da:	e00a      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082dc:	230a      	movs	r3, #10
 80082de:	e008      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082e0:	2308      	movs	r3, #8
 80082e2:	e006      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082e4:	2306      	movs	r3, #6
 80082e6:	e004      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082e8:	2304      	movs	r3, #4
 80082ea:	e002      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e000      	b.n	80082f2 <UART_SetConfig+0x18d2>
 80082f0:	2301      	movs	r3, #1
 80082f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f6:	005a      	lsls	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	441a      	add	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	b29b      	uxth	r3, r3
 800830a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800830c:	e133      	b.n	8008576 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	2b00      	cmp	r3, #0
 8008314:	d043      	beq.n	800839e <UART_SetConfig+0x197e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b01      	cmp	r3, #1
 800831c:	d03d      	beq.n	800839a <UART_SetConfig+0x197a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b02      	cmp	r3, #2
 8008324:	d037      	beq.n	8008396 <UART_SetConfig+0x1976>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b03      	cmp	r3, #3
 800832c:	d031      	beq.n	8008392 <UART_SetConfig+0x1972>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b04      	cmp	r3, #4
 8008334:	d02b      	beq.n	800838e <UART_SetConfig+0x196e>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b05      	cmp	r3, #5
 800833c:	d025      	beq.n	800838a <UART_SetConfig+0x196a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b06      	cmp	r3, #6
 8008344:	d01f      	beq.n	8008386 <UART_SetConfig+0x1966>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b07      	cmp	r3, #7
 800834c:	d019      	beq.n	8008382 <UART_SetConfig+0x1962>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b08      	cmp	r3, #8
 8008354:	d013      	beq.n	800837e <UART_SetConfig+0x195e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b09      	cmp	r3, #9
 800835c:	d00d      	beq.n	800837a <UART_SetConfig+0x195a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b0a      	cmp	r3, #10
 8008364:	d007      	beq.n	8008376 <UART_SetConfig+0x1956>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b0b      	cmp	r3, #11
 800836c:	d101      	bne.n	8008372 <UART_SetConfig+0x1952>
 800836e:	4b3f      	ldr	r3, [pc, #252]	; (800846c <UART_SetConfig+0x1a4c>)
 8008370:	e016      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008372:	4b3f      	ldr	r3, [pc, #252]	; (8008470 <UART_SetConfig+0x1a50>)
 8008374:	e014      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008376:	4b3f      	ldr	r3, [pc, #252]	; (8008474 <UART_SetConfig+0x1a54>)
 8008378:	e012      	b.n	80083a0 <UART_SetConfig+0x1980>
 800837a:	4b3f      	ldr	r3, [pc, #252]	; (8008478 <UART_SetConfig+0x1a58>)
 800837c:	e010      	b.n	80083a0 <UART_SetConfig+0x1980>
 800837e:	4b3f      	ldr	r3, [pc, #252]	; (800847c <UART_SetConfig+0x1a5c>)
 8008380:	e00e      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008382:	4b3f      	ldr	r3, [pc, #252]	; (8008480 <UART_SetConfig+0x1a60>)
 8008384:	e00c      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008386:	4b3f      	ldr	r3, [pc, #252]	; (8008484 <UART_SetConfig+0x1a64>)
 8008388:	e00a      	b.n	80083a0 <UART_SetConfig+0x1980>
 800838a:	4b3f      	ldr	r3, [pc, #252]	; (8008488 <UART_SetConfig+0x1a68>)
 800838c:	e008      	b.n	80083a0 <UART_SetConfig+0x1980>
 800838e:	4b3f      	ldr	r3, [pc, #252]	; (800848c <UART_SetConfig+0x1a6c>)
 8008390:	e006      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008392:	4b3f      	ldr	r3, [pc, #252]	; (8008490 <UART_SetConfig+0x1a70>)
 8008394:	e004      	b.n	80083a0 <UART_SetConfig+0x1980>
 8008396:	4b3f      	ldr	r3, [pc, #252]	; (8008494 <UART_SetConfig+0x1a74>)
 8008398:	e002      	b.n	80083a0 <UART_SetConfig+0x1980>
 800839a:	4b33      	ldr	r3, [pc, #204]	; (8008468 <UART_SetConfig+0x1a48>)
 800839c:	e000      	b.n	80083a0 <UART_SetConfig+0x1980>
 800839e:	4b34      	ldr	r3, [pc, #208]	; (8008470 <UART_SetConfig+0x1a50>)
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6852      	ldr	r2, [r2, #4]
 80083a4:	0852      	lsrs	r2, r2, #1
 80083a6:	441a      	add	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083b4:	e0df      	b.n	8008576 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d045      	beq.n	800844a <UART_SetConfig+0x1a2a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d03f      	beq.n	8008446 <UART_SetConfig+0x1a26>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d039      	beq.n	8008442 <UART_SetConfig+0x1a22>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d033      	beq.n	800843e <UART_SetConfig+0x1a1e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d02d      	beq.n	800843a <UART_SetConfig+0x1a1a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d027      	beq.n	8008436 <UART_SetConfig+0x1a16>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b06      	cmp	r3, #6
 80083ec:	d021      	beq.n	8008432 <UART_SetConfig+0x1a12>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	2b07      	cmp	r3, #7
 80083f4:	d01b      	beq.n	800842e <UART_SetConfig+0x1a0e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d015      	beq.n	800842a <UART_SetConfig+0x1a0a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b09      	cmp	r3, #9
 8008404:	d00f      	beq.n	8008426 <UART_SetConfig+0x1a06>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b0a      	cmp	r3, #10
 800840c:	d008      	beq.n	8008420 <UART_SetConfig+0x1a00>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b0b      	cmp	r3, #11
 8008414:	d102      	bne.n	800841c <UART_SetConfig+0x19fc>
 8008416:	f647 2312 	movw	r3, #31250	; 0x7a12
 800841a:	e017      	b.n	800844c <UART_SetConfig+0x1a2c>
 800841c:	4b18      	ldr	r3, [pc, #96]	; (8008480 <UART_SetConfig+0x1a60>)
 800841e:	e015      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008420:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008424:	e012      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008426:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <UART_SetConfig+0x1a78>)
 8008428:	e010      	b.n	800844c <UART_SetConfig+0x1a2c>
 800842a:	4b1c      	ldr	r3, [pc, #112]	; (800849c <UART_SetConfig+0x1a7c>)
 800842c:	e00e      	b.n	800844c <UART_SetConfig+0x1a2c>
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <UART_SetConfig+0x1a4c>)
 8008430:	e00c      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008432:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <UART_SetConfig+0x1a80>)
 8008434:	e00a      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008436:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <UART_SetConfig+0x1a84>)
 8008438:	e008      	b.n	800844c <UART_SetConfig+0x1a2c>
 800843a:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <UART_SetConfig+0x1a54>)
 800843c:	e006      	b.n	800844c <UART_SetConfig+0x1a2c>
 800843e:	4b1a      	ldr	r3, [pc, #104]	; (80084a8 <UART_SetConfig+0x1a88>)
 8008440:	e004      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <UART_SetConfig+0x1a58>)
 8008444:	e002      	b.n	800844c <UART_SetConfig+0x1a2c>
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <UART_SetConfig+0x1a5c>)
 8008448:	e000      	b.n	800844c <UART_SetConfig+0x1a2c>
 800844a:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <UART_SetConfig+0x1a60>)
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6852      	ldr	r2, [r2, #4]
 8008450:	0852      	lsrs	r2, r2, #1
 8008452:	441a      	add	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	b29b      	uxth	r3, r3
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008460:	e089      	b.n	8008576 <UART_SetConfig+0x1b56>
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	0007a120 	.word	0x0007a120
 8008470:	07a12000 	.word	0x07a12000
 8008474:	000f4240 	.word	0x000f4240
 8008478:	001e8480 	.word	0x001e8480
 800847c:	003d0900 	.word	0x003d0900
 8008480:	007a1200 	.word	0x007a1200
 8008484:	00a2c2aa 	.word	0x00a2c2aa
 8008488:	00c35000 	.word	0x00c35000
 800848c:	00f42400 	.word	0x00f42400
 8008490:	01458554 	.word	0x01458554
 8008494:	01e84800 	.word	0x01e84800
 8008498:	0001e848 	.word	0x0001e848
 800849c:	0003d090 	.word	0x0003d090
 80084a0:	000a2c2a 	.word	0x000a2c2a
 80084a4:	000c3500 	.word	0x000c3500
 80084a8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d04f      	beq.n	8008554 <UART_SetConfig+0x1b34>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d048      	beq.n	800854e <UART_SetConfig+0x1b2e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d041      	beq.n	8008548 <UART_SetConfig+0x1b28>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d03a      	beq.n	8008542 <UART_SetConfig+0x1b22>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d033      	beq.n	800853c <UART_SetConfig+0x1b1c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d02c      	beq.n	8008536 <UART_SetConfig+0x1b16>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b06      	cmp	r3, #6
 80084e2:	d025      	beq.n	8008530 <UART_SetConfig+0x1b10>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b07      	cmp	r3, #7
 80084ea:	d01e      	beq.n	800852a <UART_SetConfig+0x1b0a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d017      	beq.n	8008524 <UART_SetConfig+0x1b04>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	d010      	beq.n	800851e <UART_SetConfig+0x1afe>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b0a      	cmp	r3, #10
 8008502:	d009      	beq.n	8008518 <UART_SetConfig+0x1af8>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2b0b      	cmp	r3, #11
 800850a:	d102      	bne.n	8008512 <UART_SetConfig+0x1af2>
 800850c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008510:	e022      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008516:	e01f      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851c:	e01c      	b.n	8008558 <UART_SetConfig+0x1b38>
 800851e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008522:	e019      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008528:	e016      	b.n	8008558 <UART_SetConfig+0x1b38>
 800852a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852e:	e013      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008530:	f241 5354 	movw	r3, #5460	; 0x1554
 8008534:	e010      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008536:	f641 1398 	movw	r3, #6552	; 0x1998
 800853a:	e00d      	b.n	8008558 <UART_SetConfig+0x1b38>
 800853c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008540:	e00a      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008542:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008546:	e007      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800854c:	e004      	b.n	8008558 <UART_SetConfig+0x1b38>
 800854e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008552:	e001      	b.n	8008558 <UART_SetConfig+0x1b38>
 8008554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6852      	ldr	r2, [r2, #4]
 800855c:	0852      	lsrs	r2, r2, #1
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800856c:	e003      	b.n	8008576 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008574:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	2b0f      	cmp	r3, #15
 800857a:	d916      	bls.n	80085aa <UART_SetConfig+0x1b8a>
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008582:	d212      	bcs.n	80085aa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	b29b      	uxth	r3, r3
 8008588:	f023 030f 	bic.w	r3, r3, #15
 800858c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	b29b      	uxth	r3, r3
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	b29a      	uxth	r2, r3
 800859a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800859c:	4313      	orrs	r3, r2
 800859e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085a6:	60da      	str	r2, [r3, #12]
 80085a8:	e3a3      	b.n	8008cf2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b0:	e39f      	b.n	8008cf2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80085b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	f200 8388 	bhi.w	8008ccc <UART_SetConfig+0x22ac>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x1ba4>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080086c9 	.word	0x080086c9
 80085c8:	0800877f 	.word	0x0800877f
 80085cc:	08008ccd 	.word	0x08008ccd
 80085d0:	08008ccd 	.word	0x08008ccd
 80085d4:	08008835 	.word	0x08008835
 80085d8:	08008ccd 	.word	0x08008ccd
 80085dc:	08008ccd 	.word	0x08008ccd
 80085e0:	08008ccd 	.word	0x08008ccd
 80085e4:	080088ef 	.word	0x080088ef
 80085e8:	08008ccd 	.word	0x08008ccd
 80085ec:	08008ccd 	.word	0x08008ccd
 80085f0:	08008ccd 	.word	0x08008ccd
 80085f4:	08008ccd 	.word	0x08008ccd
 80085f8:	08008ccd 	.word	0x08008ccd
 80085fc:	08008ccd 	.word	0x08008ccd
 8008600:	08008ccd 	.word	0x08008ccd
 8008604:	080089a9 	.word	0x080089a9
 8008608:	08008ccd 	.word	0x08008ccd
 800860c:	08008ccd 	.word	0x08008ccd
 8008610:	08008ccd 	.word	0x08008ccd
 8008614:	08008ccd 	.word	0x08008ccd
 8008618:	08008ccd 	.word	0x08008ccd
 800861c:	08008ccd 	.word	0x08008ccd
 8008620:	08008ccd 	.word	0x08008ccd
 8008624:	08008ccd 	.word	0x08008ccd
 8008628:	08008ccd 	.word	0x08008ccd
 800862c:	08008ccd 	.word	0x08008ccd
 8008630:	08008ccd 	.word	0x08008ccd
 8008634:	08008ccd 	.word	0x08008ccd
 8008638:	08008ccd 	.word	0x08008ccd
 800863c:	08008ccd 	.word	0x08008ccd
 8008640:	08008ccd 	.word	0x08008ccd
 8008644:	08008b19 	.word	0x08008b19
 8008648:	08008ccd 	.word	0x08008ccd
 800864c:	08008ccd 	.word	0x08008ccd
 8008650:	08008ccd 	.word	0x08008ccd
 8008654:	08008ccd 	.word	0x08008ccd
 8008658:	08008ccd 	.word	0x08008ccd
 800865c:	08008ccd 	.word	0x08008ccd
 8008660:	08008ccd 	.word	0x08008ccd
 8008664:	08008ccd 	.word	0x08008ccd
 8008668:	08008ccd 	.word	0x08008ccd
 800866c:	08008ccd 	.word	0x08008ccd
 8008670:	08008ccd 	.word	0x08008ccd
 8008674:	08008ccd 	.word	0x08008ccd
 8008678:	08008ccd 	.word	0x08008ccd
 800867c:	08008ccd 	.word	0x08008ccd
 8008680:	08008ccd 	.word	0x08008ccd
 8008684:	08008ccd 	.word	0x08008ccd
 8008688:	08008ccd 	.word	0x08008ccd
 800868c:	08008ccd 	.word	0x08008ccd
 8008690:	08008ccd 	.word	0x08008ccd
 8008694:	08008ccd 	.word	0x08008ccd
 8008698:	08008ccd 	.word	0x08008ccd
 800869c:	08008ccd 	.word	0x08008ccd
 80086a0:	08008ccd 	.word	0x08008ccd
 80086a4:	08008ccd 	.word	0x08008ccd
 80086a8:	08008ccd 	.word	0x08008ccd
 80086ac:	08008ccd 	.word	0x08008ccd
 80086b0:	08008ccd 	.word	0x08008ccd
 80086b4:	08008ccd 	.word	0x08008ccd
 80086b8:	08008ccd 	.word	0x08008ccd
 80086bc:	08008ccd 	.word	0x08008ccd
 80086c0:	08008ccd 	.word	0x08008ccd
 80086c4:	08008c0d 	.word	0x08008c0d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086c8:	f7fc fb06 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 80086cc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d044      	beq.n	8008760 <UART_SetConfig+0x1d40>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d03e      	beq.n	800875c <UART_SetConfig+0x1d3c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d038      	beq.n	8008758 <UART_SetConfig+0x1d38>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d032      	beq.n	8008754 <UART_SetConfig+0x1d34>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d02c      	beq.n	8008750 <UART_SetConfig+0x1d30>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d026      	beq.n	800874c <UART_SetConfig+0x1d2c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	2b06      	cmp	r3, #6
 8008704:	d020      	beq.n	8008748 <UART_SetConfig+0x1d28>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	2b07      	cmp	r3, #7
 800870c:	d01a      	beq.n	8008744 <UART_SetConfig+0x1d24>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b08      	cmp	r3, #8
 8008714:	d014      	beq.n	8008740 <UART_SetConfig+0x1d20>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	2b09      	cmp	r3, #9
 800871c:	d00e      	beq.n	800873c <UART_SetConfig+0x1d1c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	2b0a      	cmp	r3, #10
 8008724:	d008      	beq.n	8008738 <UART_SetConfig+0x1d18>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	2b0b      	cmp	r3, #11
 800872c:	d102      	bne.n	8008734 <UART_SetConfig+0x1d14>
 800872e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008732:	e016      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008734:	2301      	movs	r3, #1
 8008736:	e014      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	e012      	b.n	8008762 <UART_SetConfig+0x1d42>
 800873c:	2340      	movs	r3, #64	; 0x40
 800873e:	e010      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008740:	2320      	movs	r3, #32
 8008742:	e00e      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008744:	2310      	movs	r3, #16
 8008746:	e00c      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008748:	230c      	movs	r3, #12
 800874a:	e00a      	b.n	8008762 <UART_SetConfig+0x1d42>
 800874c:	230a      	movs	r3, #10
 800874e:	e008      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008750:	2308      	movs	r3, #8
 8008752:	e006      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008754:	2306      	movs	r3, #6
 8008756:	e004      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008758:	2304      	movs	r3, #4
 800875a:	e002      	b.n	8008762 <UART_SetConfig+0x1d42>
 800875c:	2302      	movs	r3, #2
 800875e:	e000      	b.n	8008762 <UART_SetConfig+0x1d42>
 8008760:	2301      	movs	r3, #1
 8008762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008764:	fbb2 f2f3 	udiv	r2, r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	441a      	add	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	b29b      	uxth	r3, r3
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800877c:	e2aa      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800877e:	f7fc fac1 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8008782:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d044      	beq.n	8008816 <UART_SetConfig+0x1df6>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b01      	cmp	r3, #1
 8008792:	d03e      	beq.n	8008812 <UART_SetConfig+0x1df2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b02      	cmp	r3, #2
 800879a:	d038      	beq.n	800880e <UART_SetConfig+0x1dee>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d032      	beq.n	800880a <UART_SetConfig+0x1dea>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d02c      	beq.n	8008806 <UART_SetConfig+0x1de6>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	d026      	beq.n	8008802 <UART_SetConfig+0x1de2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b06      	cmp	r3, #6
 80087ba:	d020      	beq.n	80087fe <UART_SetConfig+0x1dde>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d01a      	beq.n	80087fa <UART_SetConfig+0x1dda>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d014      	beq.n	80087f6 <UART_SetConfig+0x1dd6>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	d00e      	beq.n	80087f2 <UART_SetConfig+0x1dd2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b0a      	cmp	r3, #10
 80087da:	d008      	beq.n	80087ee <UART_SetConfig+0x1dce>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b0b      	cmp	r3, #11
 80087e2:	d102      	bne.n	80087ea <UART_SetConfig+0x1dca>
 80087e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e8:	e016      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e014      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087ee:	2380      	movs	r3, #128	; 0x80
 80087f0:	e012      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	e010      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087f6:	2320      	movs	r3, #32
 80087f8:	e00e      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087fa:	2310      	movs	r3, #16
 80087fc:	e00c      	b.n	8008818 <UART_SetConfig+0x1df8>
 80087fe:	230c      	movs	r3, #12
 8008800:	e00a      	b.n	8008818 <UART_SetConfig+0x1df8>
 8008802:	230a      	movs	r3, #10
 8008804:	e008      	b.n	8008818 <UART_SetConfig+0x1df8>
 8008806:	2308      	movs	r3, #8
 8008808:	e006      	b.n	8008818 <UART_SetConfig+0x1df8>
 800880a:	2306      	movs	r3, #6
 800880c:	e004      	b.n	8008818 <UART_SetConfig+0x1df8>
 800880e:	2304      	movs	r3, #4
 8008810:	e002      	b.n	8008818 <UART_SetConfig+0x1df8>
 8008812:	2302      	movs	r3, #2
 8008814:	e000      	b.n	8008818 <UART_SetConfig+0x1df8>
 8008816:	2301      	movs	r3, #1
 8008818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881a:	fbb2 f2f3 	udiv	r2, r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	441a      	add	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	fbb2 f3f3 	udiv	r3, r2, r3
 800882e:	b29b      	uxth	r3, r3
 8008830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008832:	e24f      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008834:	f107 0318 	add.w	r3, r7, #24
 8008838:	4618      	mov	r0, r3
 800883a:	f7fd f9af 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d044      	beq.n	80088d2 <UART_SetConfig+0x1eb2>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2b01      	cmp	r3, #1
 800884e:	d03e      	beq.n	80088ce <UART_SetConfig+0x1eae>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	2b02      	cmp	r3, #2
 8008856:	d038      	beq.n	80088ca <UART_SetConfig+0x1eaa>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	2b03      	cmp	r3, #3
 800885e:	d032      	beq.n	80088c6 <UART_SetConfig+0x1ea6>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	2b04      	cmp	r3, #4
 8008866:	d02c      	beq.n	80088c2 <UART_SetConfig+0x1ea2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b05      	cmp	r3, #5
 800886e:	d026      	beq.n	80088be <UART_SetConfig+0x1e9e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b06      	cmp	r3, #6
 8008876:	d020      	beq.n	80088ba <UART_SetConfig+0x1e9a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b07      	cmp	r3, #7
 800887e:	d01a      	beq.n	80088b6 <UART_SetConfig+0x1e96>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b08      	cmp	r3, #8
 8008886:	d014      	beq.n	80088b2 <UART_SetConfig+0x1e92>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b09      	cmp	r3, #9
 800888e:	d00e      	beq.n	80088ae <UART_SetConfig+0x1e8e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b0a      	cmp	r3, #10
 8008896:	d008      	beq.n	80088aa <UART_SetConfig+0x1e8a>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b0b      	cmp	r3, #11
 800889e:	d102      	bne.n	80088a6 <UART_SetConfig+0x1e86>
 80088a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a4:	e016      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e014      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	e012      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	e010      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088b2:	2320      	movs	r3, #32
 80088b4:	e00e      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088b6:	2310      	movs	r3, #16
 80088b8:	e00c      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088ba:	230c      	movs	r3, #12
 80088bc:	e00a      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088be:	230a      	movs	r3, #10
 80088c0:	e008      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088c2:	2308      	movs	r3, #8
 80088c4:	e006      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088c6:	2306      	movs	r3, #6
 80088c8:	e004      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088ca:	2304      	movs	r3, #4
 80088cc:	e002      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e000      	b.n	80088d4 <UART_SetConfig+0x1eb4>
 80088d2:	2301      	movs	r3, #1
 80088d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	085b      	lsrs	r3, r3, #1
 80088de:	441a      	add	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ec:	e1f2      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ee:	f107 030c 	add.w	r3, r7, #12
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd fa9e 	bl	8005e34 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d044      	beq.n	800898c <UART_SetConfig+0x1f6c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b01      	cmp	r3, #1
 8008908:	d03e      	beq.n	8008988 <UART_SetConfig+0x1f68>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b02      	cmp	r3, #2
 8008910:	d038      	beq.n	8008984 <UART_SetConfig+0x1f64>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b03      	cmp	r3, #3
 8008918:	d032      	beq.n	8008980 <UART_SetConfig+0x1f60>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b04      	cmp	r3, #4
 8008920:	d02c      	beq.n	800897c <UART_SetConfig+0x1f5c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b05      	cmp	r3, #5
 8008928:	d026      	beq.n	8008978 <UART_SetConfig+0x1f58>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b06      	cmp	r3, #6
 8008930:	d020      	beq.n	8008974 <UART_SetConfig+0x1f54>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b07      	cmp	r3, #7
 8008938:	d01a      	beq.n	8008970 <UART_SetConfig+0x1f50>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b08      	cmp	r3, #8
 8008940:	d014      	beq.n	800896c <UART_SetConfig+0x1f4c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b09      	cmp	r3, #9
 8008948:	d00e      	beq.n	8008968 <UART_SetConfig+0x1f48>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b0a      	cmp	r3, #10
 8008950:	d008      	beq.n	8008964 <UART_SetConfig+0x1f44>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b0b      	cmp	r3, #11
 8008958:	d102      	bne.n	8008960 <UART_SetConfig+0x1f40>
 800895a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800895e:	e016      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008960:	2301      	movs	r3, #1
 8008962:	e014      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008964:	2380      	movs	r3, #128	; 0x80
 8008966:	e012      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008968:	2340      	movs	r3, #64	; 0x40
 800896a:	e010      	b.n	800898e <UART_SetConfig+0x1f6e>
 800896c:	2320      	movs	r3, #32
 800896e:	e00e      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008970:	2310      	movs	r3, #16
 8008972:	e00c      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008974:	230c      	movs	r3, #12
 8008976:	e00a      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008978:	230a      	movs	r3, #10
 800897a:	e008      	b.n	800898e <UART_SetConfig+0x1f6e>
 800897c:	2308      	movs	r3, #8
 800897e:	e006      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008980:	2306      	movs	r3, #6
 8008982:	e004      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008984:	2304      	movs	r3, #4
 8008986:	e002      	b.n	800898e <UART_SetConfig+0x1f6e>
 8008988:	2302      	movs	r3, #2
 800898a:	e000      	b.n	800898e <UART_SetConfig+0x1f6e>
 800898c:	2301      	movs	r3, #1
 800898e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089a6:	e195      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a8:	4b87      	ldr	r3, [pc, #540]	; (8008bc8 <UART_SetConfig+0x21a8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05d      	beq.n	8008a70 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b4:	4b84      	ldr	r3, [pc, #528]	; (8008bc8 <UART_SetConfig+0x21a8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	08db      	lsrs	r3, r3, #3
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	4a83      	ldr	r2, [pc, #524]	; (8008bcc <UART_SetConfig+0x21ac>)
 80089c0:	40da      	lsrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d044      	beq.n	8008a54 <UART_SetConfig+0x2034>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d03e      	beq.n	8008a50 <UART_SetConfig+0x2030>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d038      	beq.n	8008a4c <UART_SetConfig+0x202c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d032      	beq.n	8008a48 <UART_SetConfig+0x2028>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d02c      	beq.n	8008a44 <UART_SetConfig+0x2024>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d026      	beq.n	8008a40 <UART_SetConfig+0x2020>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b06      	cmp	r3, #6
 80089f8:	d020      	beq.n	8008a3c <UART_SetConfig+0x201c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b07      	cmp	r3, #7
 8008a00:	d01a      	beq.n	8008a38 <UART_SetConfig+0x2018>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d014      	beq.n	8008a34 <UART_SetConfig+0x2014>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d00e      	beq.n	8008a30 <UART_SetConfig+0x2010>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b0a      	cmp	r3, #10
 8008a18:	d008      	beq.n	8008a2c <UART_SetConfig+0x200c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b0b      	cmp	r3, #11
 8008a20:	d102      	bne.n	8008a28 <UART_SetConfig+0x2008>
 8008a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a26:	e016      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e014      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	e012      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	e010      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a34:	2320      	movs	r3, #32
 8008a36:	e00e      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	e00c      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a3c:	230c      	movs	r3, #12
 8008a3e:	e00a      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a40:	230a      	movs	r3, #10
 8008a42:	e008      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a44:	2308      	movs	r3, #8
 8008a46:	e006      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a48:	2306      	movs	r3, #6
 8008a4a:	e004      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	e002      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e000      	b.n	8008a56 <UART_SetConfig+0x2036>
 8008a54:	2301      	movs	r3, #1
 8008a56:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	441a      	add	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008a6e:	e131      	b.n	8008cd4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d043      	beq.n	8008b00 <UART_SetConfig+0x20e0>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d03d      	beq.n	8008afc <UART_SetConfig+0x20dc>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d037      	beq.n	8008af8 <UART_SetConfig+0x20d8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d031      	beq.n	8008af4 <UART_SetConfig+0x20d4>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d02b      	beq.n	8008af0 <UART_SetConfig+0x20d0>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d025      	beq.n	8008aec <UART_SetConfig+0x20cc>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	2b06      	cmp	r3, #6
 8008aa6:	d01f      	beq.n	8008ae8 <UART_SetConfig+0x20c8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	d019      	beq.n	8008ae4 <UART_SetConfig+0x20c4>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d013      	beq.n	8008ae0 <UART_SetConfig+0x20c0>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d00d      	beq.n	8008adc <UART_SetConfig+0x20bc>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b0a      	cmp	r3, #10
 8008ac6:	d007      	beq.n	8008ad8 <UART_SetConfig+0x20b8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b0b      	cmp	r3, #11
 8008ace:	d101      	bne.n	8008ad4 <UART_SetConfig+0x20b4>
 8008ad0:	4b3f      	ldr	r3, [pc, #252]	; (8008bd0 <UART_SetConfig+0x21b0>)
 8008ad2:	e016      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008ad4:	4b3d      	ldr	r3, [pc, #244]	; (8008bcc <UART_SetConfig+0x21ac>)
 8008ad6:	e014      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008ad8:	4b3e      	ldr	r3, [pc, #248]	; (8008bd4 <UART_SetConfig+0x21b4>)
 8008ada:	e012      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008adc:	4b3e      	ldr	r3, [pc, #248]	; (8008bd8 <UART_SetConfig+0x21b8>)
 8008ade:	e010      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008ae0:	4b3e      	ldr	r3, [pc, #248]	; (8008bdc <UART_SetConfig+0x21bc>)
 8008ae2:	e00e      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008ae4:	4b3e      	ldr	r3, [pc, #248]	; (8008be0 <UART_SetConfig+0x21c0>)
 8008ae6:	e00c      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008ae8:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <UART_SetConfig+0x21c4>)
 8008aea:	e00a      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008aec:	4b3e      	ldr	r3, [pc, #248]	; (8008be8 <UART_SetConfig+0x21c8>)
 8008aee:	e008      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008af0:	4b3e      	ldr	r3, [pc, #248]	; (8008bec <UART_SetConfig+0x21cc>)
 8008af2:	e006      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008af4:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <UART_SetConfig+0x21d0>)
 8008af6:	e004      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008af8:	4b3e      	ldr	r3, [pc, #248]	; (8008bf4 <UART_SetConfig+0x21d4>)
 8008afa:	e002      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008afc:	4b3e      	ldr	r3, [pc, #248]	; (8008bf8 <UART_SetConfig+0x21d8>)
 8008afe:	e000      	b.n	8008b02 <UART_SetConfig+0x20e2>
 8008b00:	4b32      	ldr	r3, [pc, #200]	; (8008bcc <UART_SetConfig+0x21ac>)
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6852      	ldr	r2, [r2, #4]
 8008b06:	0852      	lsrs	r2, r2, #1
 8008b08:	441a      	add	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b16:	e0dd      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d046      	beq.n	8008bae <UART_SetConfig+0x218e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d040      	beq.n	8008baa <UART_SetConfig+0x218a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d03a      	beq.n	8008ba6 <UART_SetConfig+0x2186>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d034      	beq.n	8008ba2 <UART_SetConfig+0x2182>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d02e      	beq.n	8008b9e <UART_SetConfig+0x217e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	d028      	beq.n	8008b9a <UART_SetConfig+0x217a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d022      	beq.n	8008b96 <UART_SetConfig+0x2176>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	d01c      	beq.n	8008b92 <UART_SetConfig+0x2172>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d016      	beq.n	8008b8e <UART_SetConfig+0x216e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d00f      	beq.n	8008b88 <UART_SetConfig+0x2168>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b0a      	cmp	r3, #10
 8008b6e:	d008      	beq.n	8008b82 <UART_SetConfig+0x2162>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b0b      	cmp	r3, #11
 8008b76:	d102      	bne.n	8008b7e <UART_SetConfig+0x215e>
 8008b78:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008b7c:	e018      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b7e:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <UART_SetConfig+0x21c0>)
 8008b80:	e016      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b82:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008b86:	e013      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b8c:	e010      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b8e:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <UART_SetConfig+0x21dc>)
 8008b90:	e00e      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <UART_SetConfig+0x21b0>)
 8008b94:	e00c      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b96:	4b1a      	ldr	r3, [pc, #104]	; (8008c00 <UART_SetConfig+0x21e0>)
 8008b98:	e00a      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b9a:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <UART_SetConfig+0x21e4>)
 8008b9c:	e008      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <UART_SetConfig+0x21b4>)
 8008ba0:	e006      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008ba2:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <UART_SetConfig+0x21e8>)
 8008ba4:	e004      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <UART_SetConfig+0x21b8>)
 8008ba8:	e002      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <UART_SetConfig+0x21bc>)
 8008bac:	e000      	b.n	8008bb0 <UART_SetConfig+0x2190>
 8008bae:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <UART_SetConfig+0x21c0>)
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6852      	ldr	r2, [r2, #4]
 8008bb4:	0852      	lsrs	r2, r2, #1
 8008bb6:	441a      	add	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bc4:	e086      	b.n	8008cd4 <UART_SetConfig+0x22b4>
 8008bc6:	bf00      	nop
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	03d09000 	.word	0x03d09000
 8008bd0:	0003d090 	.word	0x0003d090
 8008bd4:	0007a120 	.word	0x0007a120
 8008bd8:	000f4240 	.word	0x000f4240
 8008bdc:	001e8480 	.word	0x001e8480
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	00516155 	.word	0x00516155
 8008be8:	0061a800 	.word	0x0061a800
 8008bec:	007a1200 	.word	0x007a1200
 8008bf0:	00a2c2aa 	.word	0x00a2c2aa
 8008bf4:	00f42400 	.word	0x00f42400
 8008bf8:	01e84800 	.word	0x01e84800
 8008bfc:	0001e848 	.word	0x0001e848
 8008c00:	00051615 	.word	0x00051615
 8008c04:	00061a80 	.word	0x00061a80
 8008c08:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d04e      	beq.n	8008cb2 <UART_SetConfig+0x2292>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d047      	beq.n	8008cac <UART_SetConfig+0x228c>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d040      	beq.n	8008ca6 <UART_SetConfig+0x2286>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d039      	beq.n	8008ca0 <UART_SetConfig+0x2280>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d032      	beq.n	8008c9a <UART_SetConfig+0x227a>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b05      	cmp	r3, #5
 8008c3a:	d02b      	beq.n	8008c94 <UART_SetConfig+0x2274>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b06      	cmp	r3, #6
 8008c42:	d024      	beq.n	8008c8e <UART_SetConfig+0x226e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b07      	cmp	r3, #7
 8008c4a:	d01d      	beq.n	8008c88 <UART_SetConfig+0x2268>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d016      	beq.n	8008c82 <UART_SetConfig+0x2262>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d00f      	beq.n	8008c7c <UART_SetConfig+0x225c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b0a      	cmp	r3, #10
 8008c62:	d008      	beq.n	8008c76 <UART_SetConfig+0x2256>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	d101      	bne.n	8008c70 <UART_SetConfig+0x2250>
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	e022      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c74:	e01f      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c7a:	e01c      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c80:	e019      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c86:	e016      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c8c:	e013      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c8e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008c92:	e010      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c94:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008c98:	e00d      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9e:	e00a      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008ca0:	f241 5355 	movw	r3, #5461	; 0x1555
 8008ca4:	e007      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008caa:	e004      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cb0:	e001      	b.n	8008cb6 <UART_SetConfig+0x2296>
 8008cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6852      	ldr	r2, [r2, #4]
 8008cba:	0852      	lsrs	r2, r2, #1
 8008cbc:	441a      	add	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cca:	e003      	b.n	8008cd4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	d908      	bls.n	8008cec <UART_SetConfig+0x22cc>
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce0:	d204      	bcs.n	8008cec <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	e002      	b.n	8008cf2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3740      	adds	r7, #64	; 0x40
 8008d16:	46bd      	mov	sp, r7
 8008d18:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01a      	beq.n	8008e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1a:	d10a      	bne.n	8008e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00a      	beq.n	8008e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	605a      	str	r2, [r3, #4]
  }
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e70:	f7f8 fc6c 	bl	800174c <HAL_GetTick>
 8008e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d10e      	bne.n	8008ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f82c 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e022      	b.n	8008ee8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d10e      	bne.n	8008ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f816 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e00c      	b.n	8008ee8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f00:	e062      	b.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d05e      	beq.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0a:	f7f8 fc1f 	bl	800174c <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11d      	bne.n	8008f5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689a      	ldr	r2, [r3, #8]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0201 	bic.w	r2, r2, #1
 8008f3e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e045      	b.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d02e      	beq.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f78:	d126      	bne.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f82:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0201 	bic.w	r2, r2, #1
 8008fa2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e00f      	b.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69da      	ldr	r2, [r3, #28]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	461a      	mov	r2, r3
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d08d      	beq.n	8008f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_UARTEx_DisableFifoMode+0x16>
 8009002:	2302      	movs	r3, #2
 8009004:	e027      	b.n	8009056 <HAL_UARTEx_DisableFifoMode+0x66>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2224      	movs	r2, #36	; 0x24
 8009012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0201 	bic.w	r2, r2, #1
 800902c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009034:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009072:	2b01      	cmp	r3, #1
 8009074:	d101      	bne.n	800907a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009076:	2302      	movs	r3, #2
 8009078:	e02d      	b.n	80090d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2224      	movs	r2, #36	; 0x24
 8009086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0201 	bic.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f850 	bl	800915c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e02d      	b.n	8009152 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2224      	movs	r2, #36	; 0x24
 8009102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f812 	bl	800915c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800915c:	b480      	push	{r7}
 800915e:	b089      	sub	sp, #36	; 0x24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009164:	4a2f      	ldr	r2, [pc, #188]	; (8009224 <UARTEx_SetNbDataToProcess+0xc8>)
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800916e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009172:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <UARTEx_SetNbDataToProcess+0xcc>)
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800917c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009184:	2b00      	cmp	r3, #0
 8009186:	d108      	bne.n	800919a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009198:	e03d      	b.n	8009216 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800919a:	2308      	movs	r3, #8
 800919c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800919e:	2308      	movs	r3, #8
 80091a0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	0e5b      	lsrs	r3, r3, #25
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0307 	and.w	r3, r3, #7
 80091b0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	0f5b      	lsrs	r3, r3, #29
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f003 0307 	and.w	r3, r3, #7
 80091c0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80091c2:	7fbb      	ldrb	r3, [r7, #30]
 80091c4:	7f3a      	ldrb	r2, [r7, #28]
 80091c6:	f107 0120 	add.w	r1, r7, #32
 80091ca:	440a      	add	r2, r1
 80091cc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	7f3a      	ldrb	r2, [r7, #28]
 80091d6:	f107 0120 	add.w	r1, r7, #32
 80091da:	440a      	add	r2, r1
 80091dc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80091e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80091ec:	7ffb      	ldrb	r3, [r7, #31]
 80091ee:	7f7a      	ldrb	r2, [r7, #29]
 80091f0:	f107 0120 	add.w	r1, r7, #32
 80091f4:	440a      	add	r2, r1
 80091f6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
 80091fe:	7f7a      	ldrb	r2, [r7, #29]
 8009200:	f107 0120 	add.w	r1, r7, #32
 8009204:	440a      	add	r2, r1
 8009206:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800920a:	fb93 f3f2 	sdiv	r3, r3, r2
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009216:	bf00      	nop
 8009218:	3724      	adds	r7, #36	; 0x24
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	0801a450 	.word	0x0801a450
 8009228:	0801a458 	.word	0x0801a458

0800922c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800922c:	b084      	sub	sp, #16
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	f107 001c 	add.w	r0, r7, #28
 800923a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	2b01      	cmp	r3, #1
 8009242:	d120      	bne.n	8009286 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	4b25      	ldr	r3, [pc, #148]	; (80092ec <USB_CoreInit+0xc0>)
 8009256:	4013      	ands	r3, r2
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926a:	2b01      	cmp	r3, #1
 800926c:	d105      	bne.n	800927a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa4c 	bl	8009718 <USB_CoreReset>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e01a      	b.n	80092bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa40 	bl	8009718 <USB_CoreReset>
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
 80092ae:	e005      	b.n	80092bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d10b      	bne.n	80092da <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f043 0206 	orr.w	r2, r3, #6
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f043 0220 	orr.w	r2, r3, #32
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092e6:	b004      	add	sp, #16
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	ffbdffbf 	.word	0xffbdffbf

080092f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f023 0201 	bic.w	r2, r3, #1
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d106      	bne.n	800933e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	60da      	str	r2, [r3, #12]
 800933c:	e00b      	b.n	8009356 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60da      	str	r2, [r3, #12]
 8009350:	e001      	b.n	8009356 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e003      	b.n	800935e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009356:	2032      	movs	r0, #50	; 0x32
 8009358:	f7f8 fa04 	bl	8001764 <HAL_Delay>

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009368:	b084      	sub	sp, #16
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	e009      	b.n	800939c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3340      	adds	r3, #64	; 0x40
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	2200      	movs	r2, #0
 8009394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	3301      	adds	r3, #1
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b0e      	cmp	r3, #14
 80093a0:	d9f2      	bls.n	8009388 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11c      	bne.n	80093e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093b6:	f043 0302 	orr.w	r3, r3, #2
 80093ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e005      	b.n	80093ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093f4:	461a      	mov	r2, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009400:	4619      	mov	r1, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009408:	461a      	mov	r2, r3
 800940a:	680b      	ldr	r3, [r1, #0]
 800940c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	2b01      	cmp	r3, #1
 8009412:	d10c      	bne.n	800942e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d104      	bne.n	8009424 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f949 	bl	80096b4 <USB_SetDevSpeed>
 8009422:	e008      	b.n	8009436 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009424:	2101      	movs	r1, #1
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f944 	bl	80096b4 <USB_SetDevSpeed>
 800942c:	e003      	b.n	8009436 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800942e:	2103      	movs	r1, #3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f93f 	bl	80096b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009436:	2110      	movs	r1, #16
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8f3 	bl	8009624 <USB_FlushTxFifo>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f911 	bl	8009670 <USB_FlushRxFifo>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945e:	461a      	mov	r2, r3
 8009460:	2300      	movs	r3, #0
 8009462:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946a:	461a      	mov	r2, r3
 800946c:	2300      	movs	r3, #0
 800946e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	461a      	mov	r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	e043      	b.n	800950a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009498:	d118      	bne.n	80094cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	461a      	mov	r2, r3
 80094ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	e013      	b.n	80094de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c2:	461a      	mov	r2, r3
 80094c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	e008      	b.n	80094de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d8:	461a      	mov	r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ea:	461a      	mov	r2, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	461a      	mov	r2, r3
 80094fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009502:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	3301      	adds	r3, #1
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	429a      	cmp	r2, r3
 8009510:	d3b7      	bcc.n	8009482 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e043      	b.n	80095a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800952a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800952e:	d118      	bne.n	8009562 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009542:	461a      	mov	r2, r3
 8009544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e013      	b.n	8009574 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009558:	461a      	mov	r2, r3
 800955a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e008      	b.n	8009574 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956e:	461a      	mov	r2, r3
 8009570:	2300      	movs	r3, #0
 8009572:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	461a      	mov	r2, r3
 8009582:	2300      	movs	r3, #0
 8009584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009592:	461a      	mov	r2, r3
 8009594:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3301      	adds	r3, #1
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3b7      	bcc.n	8009518 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80095c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d105      	bne.n	80095dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f043 0210 	orr.w	r2, r3, #16
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <USB_DevInit+0x2b4>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	f043 0208 	orr.w	r2, r3, #8
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d105      	bne.n	800960c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699a      	ldr	r2, [r3, #24]
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <USB_DevInit+0x2b8>)
 8009606:	4313      	orrs	r3, r2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009618:	b004      	add	sp, #16
 800961a:	4770      	bx	lr
 800961c:	803c3800 	.word	0x803c3800
 8009620:	40000004 	.word	0x40000004

08009624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	019b      	lsls	r3, r3, #6
 8009636:	f043 0220 	orr.w	r2, r3, #32
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a09      	ldr	r2, [pc, #36]	; (800966c <USB_FlushTxFifo+0x48>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d901      	bls.n	8009650 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e006      	b.n	800965e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b20      	cmp	r3, #32
 800965a:	d0f0      	beq.n	800963e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	00030d40 	.word	0x00030d40

08009670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2210      	movs	r2, #16
 8009680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <USB_FlushRxFifo+0x40>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d901      	bls.n	8009694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e006      	b.n	80096a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b10      	cmp	r3, #16
 800969e:	d0f0      	beq.n	8009682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	00030d40 	.word	0x00030d40

080096b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d4:	4313      	orrs	r3, r2
 80096d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009706:	2003      	movs	r0, #3
 8009708:	f7f8 f82c 	bl	8001764 <HAL_Delay>

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4a13      	ldr	r2, [pc, #76]	; (800977c <USB_CoreReset+0x64>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d901      	bls.n	8009736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e01b      	b.n	800976e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	daf2      	bge.n	8009724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f043 0201 	orr.w	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4a09      	ldr	r2, [pc, #36]	; (800977c <USB_CoreReset+0x64>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d901      	bls.n	8009760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e006      	b.n	800976e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b01      	cmp	r3, #1
 800976a:	d0f0      	beq.n	800974e <USB_CoreReset+0x36>

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	00030d40 	.word	0x00030d40

08009780 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8009786:	4b8c      	ldr	r3, [pc, #560]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009788:	22a9      	movs	r2, #169	; 0xa9
 800978a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800978c:	4b8a      	ldr	r3, [pc, #552]	; (80099b8 <MX_LWIP_Init+0x238>)
 800978e:	22fe      	movs	r2, #254	; 0xfe
 8009790:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009792:	4b89      	ldr	r3, [pc, #548]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009794:	2200      	movs	r2, #0
 8009796:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8009798:	4b87      	ldr	r3, [pc, #540]	; (80099b8 <MX_LWIP_Init+0x238>)
 800979a:	2214      	movs	r2, #20
 800979c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800979e:	4b87      	ldr	r3, [pc, #540]	; (80099bc <MX_LWIP_Init+0x23c>)
 80097a0:	22ff      	movs	r2, #255	; 0xff
 80097a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80097a4:	4b85      	ldr	r3, [pc, #532]	; (80099bc <MX_LWIP_Init+0x23c>)
 80097a6:	22ff      	movs	r2, #255	; 0xff
 80097a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80097aa:	4b84      	ldr	r3, [pc, #528]	; (80099bc <MX_LWIP_Init+0x23c>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80097b0:	4b82      	ldr	r3, [pc, #520]	; (80099bc <MX_LWIP_Init+0x23c>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80097b6:	4b82      	ldr	r3, [pc, #520]	; (80099c0 <MX_LWIP_Init+0x240>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80097bc:	4b80      	ldr	r3, [pc, #512]	; (80099c0 <MX_LWIP_Init+0x240>)
 80097be:	2200      	movs	r2, #0
 80097c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80097c2:	4b7f      	ldr	r3, [pc, #508]	; (80099c0 <MX_LWIP_Init+0x240>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80097c8:	4b7d      	ldr	r3, [pc, #500]	; (80099c0 <MX_LWIP_Init+0x240>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80097ce:	2100      	movs	r1, #0
 80097d0:	2000      	movs	r0, #0
 80097d2:	f005 fe05 	bl	800f3e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80097d6:	4b78      	ldr	r3, [pc, #480]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	061a      	lsls	r2, r3, #24
 80097dc:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097de:	785b      	ldrb	r3, [r3, #1]
 80097e0:	041b      	lsls	r3, r3, #16
 80097e2:	431a      	orrs	r2, r3
 80097e4:	4b74      	ldr	r3, [pc, #464]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097e6:	789b      	ldrb	r3, [r3, #2]
 80097e8:	021b      	lsls	r3, r3, #8
 80097ea:	4313      	orrs	r3, r2
 80097ec:	4a72      	ldr	r2, [pc, #456]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097ee:	78d2      	ldrb	r2, [r2, #3]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	061a      	lsls	r2, r3, #24
 80097f4:	4b70      	ldr	r3, [pc, #448]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	0619      	lsls	r1, r3, #24
 80097fa:	4b6f      	ldr	r3, [pc, #444]	; (80099b8 <MX_LWIP_Init+0x238>)
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	4319      	orrs	r1, r3
 8009802:	4b6d      	ldr	r3, [pc, #436]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009804:	789b      	ldrb	r3, [r3, #2]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	430b      	orrs	r3, r1
 800980a:	496b      	ldr	r1, [pc, #428]	; (80099b8 <MX_LWIP_Init+0x238>)
 800980c:	78c9      	ldrb	r1, [r1, #3]
 800980e:	430b      	orrs	r3, r1
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009816:	431a      	orrs	r2, r3
 8009818:	4b67      	ldr	r3, [pc, #412]	; (80099b8 <MX_LWIP_Init+0x238>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	0619      	lsls	r1, r3, #24
 800981e:	4b66      	ldr	r3, [pc, #408]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	4319      	orrs	r1, r3
 8009826:	4b64      	ldr	r3, [pc, #400]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009828:	789b      	ldrb	r3, [r3, #2]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	430b      	orrs	r3, r1
 800982e:	4962      	ldr	r1, [pc, #392]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009830:	78c9      	ldrb	r1, [r1, #3]
 8009832:	430b      	orrs	r3, r1
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800983a:	431a      	orrs	r2, r3
 800983c:	4b5e      	ldr	r3, [pc, #376]	; (80099b8 <MX_LWIP_Init+0x238>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	0619      	lsls	r1, r3, #24
 8009842:	4b5d      	ldr	r3, [pc, #372]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	4319      	orrs	r1, r3
 800984a:	4b5b      	ldr	r3, [pc, #364]	; (80099b8 <MX_LWIP_Init+0x238>)
 800984c:	789b      	ldrb	r3, [r3, #2]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	430b      	orrs	r3, r1
 8009852:	4959      	ldr	r1, [pc, #356]	; (80099b8 <MX_LWIP_Init+0x238>)
 8009854:	78c9      	ldrb	r1, [r1, #3]
 8009856:	430b      	orrs	r3, r1
 8009858:	0e1b      	lsrs	r3, r3, #24
 800985a:	4313      	orrs	r3, r2
 800985c:	4a59      	ldr	r2, [pc, #356]	; (80099c4 <MX_LWIP_Init+0x244>)
 800985e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009860:	4b56      	ldr	r3, [pc, #344]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	061a      	lsls	r2, r3, #24
 8009866:	4b55      	ldr	r3, [pc, #340]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	041b      	lsls	r3, r3, #16
 800986c:	431a      	orrs	r2, r3
 800986e:	4b53      	ldr	r3, [pc, #332]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009870:	789b      	ldrb	r3, [r3, #2]
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	4313      	orrs	r3, r2
 8009876:	4a51      	ldr	r2, [pc, #324]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009878:	78d2      	ldrb	r2, [r2, #3]
 800987a:	4313      	orrs	r3, r2
 800987c:	061a      	lsls	r2, r3, #24
 800987e:	4b4f      	ldr	r3, [pc, #316]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	0619      	lsls	r1, r3, #24
 8009884:	4b4d      	ldr	r3, [pc, #308]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	4319      	orrs	r1, r3
 800988c:	4b4b      	ldr	r3, [pc, #300]	; (80099bc <MX_LWIP_Init+0x23c>)
 800988e:	789b      	ldrb	r3, [r3, #2]
 8009890:	021b      	lsls	r3, r3, #8
 8009892:	430b      	orrs	r3, r1
 8009894:	4949      	ldr	r1, [pc, #292]	; (80099bc <MX_LWIP_Init+0x23c>)
 8009896:	78c9      	ldrb	r1, [r1, #3]
 8009898:	430b      	orrs	r3, r1
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098a0:	431a      	orrs	r2, r3
 80098a2:	4b46      	ldr	r3, [pc, #280]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	0619      	lsls	r1, r3, #24
 80098a8:	4b44      	ldr	r3, [pc, #272]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	4319      	orrs	r1, r3
 80098b0:	4b42      	ldr	r3, [pc, #264]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098b2:	789b      	ldrb	r3, [r3, #2]
 80098b4:	021b      	lsls	r3, r3, #8
 80098b6:	430b      	orrs	r3, r1
 80098b8:	4940      	ldr	r1, [pc, #256]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098ba:	78c9      	ldrb	r1, [r1, #3]
 80098bc:	430b      	orrs	r3, r1
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098c4:	431a      	orrs	r2, r3
 80098c6:	4b3d      	ldr	r3, [pc, #244]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	0619      	lsls	r1, r3, #24
 80098cc:	4b3b      	ldr	r3, [pc, #236]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	041b      	lsls	r3, r3, #16
 80098d2:	4319      	orrs	r1, r3
 80098d4:	4b39      	ldr	r3, [pc, #228]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098d6:	789b      	ldrb	r3, [r3, #2]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	430b      	orrs	r3, r1
 80098dc:	4937      	ldr	r1, [pc, #220]	; (80099bc <MX_LWIP_Init+0x23c>)
 80098de:	78c9      	ldrb	r1, [r1, #3]
 80098e0:	430b      	orrs	r3, r1
 80098e2:	0e1b      	lsrs	r3, r3, #24
 80098e4:	4313      	orrs	r3, r2
 80098e6:	4a38      	ldr	r2, [pc, #224]	; (80099c8 <MX_LWIP_Init+0x248>)
 80098e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80098ea:	4b35      	ldr	r3, [pc, #212]	; (80099c0 <MX_LWIP_Init+0x240>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	061a      	lsls	r2, r3, #24
 80098f0:	4b33      	ldr	r3, [pc, #204]	; (80099c0 <MX_LWIP_Init+0x240>)
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	431a      	orrs	r2, r3
 80098f8:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <MX_LWIP_Init+0x240>)
 80098fa:	789b      	ldrb	r3, [r3, #2]
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	4313      	orrs	r3, r2
 8009900:	4a2f      	ldr	r2, [pc, #188]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009902:	78d2      	ldrb	r2, [r2, #3]
 8009904:	4313      	orrs	r3, r2
 8009906:	061a      	lsls	r2, r3, #24
 8009908:	4b2d      	ldr	r3, [pc, #180]	; (80099c0 <MX_LWIP_Init+0x240>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	0619      	lsls	r1, r3, #24
 800990e:	4b2c      	ldr	r3, [pc, #176]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009910:	785b      	ldrb	r3, [r3, #1]
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	4319      	orrs	r1, r3
 8009916:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009918:	789b      	ldrb	r3, [r3, #2]
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	430b      	orrs	r3, r1
 800991e:	4928      	ldr	r1, [pc, #160]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009920:	78c9      	ldrb	r1, [r1, #3]
 8009922:	430b      	orrs	r3, r1
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800992a:	431a      	orrs	r2, r3
 800992c:	4b24      	ldr	r3, [pc, #144]	; (80099c0 <MX_LWIP_Init+0x240>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	0619      	lsls	r1, r3, #24
 8009932:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	041b      	lsls	r3, r3, #16
 8009938:	4319      	orrs	r1, r3
 800993a:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <MX_LWIP_Init+0x240>)
 800993c:	789b      	ldrb	r3, [r3, #2]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	430b      	orrs	r3, r1
 8009942:	491f      	ldr	r1, [pc, #124]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009944:	78c9      	ldrb	r1, [r1, #3]
 8009946:	430b      	orrs	r3, r1
 8009948:	0a1b      	lsrs	r3, r3, #8
 800994a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800994e:	431a      	orrs	r2, r3
 8009950:	4b1b      	ldr	r3, [pc, #108]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	0619      	lsls	r1, r3, #24
 8009956:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	041b      	lsls	r3, r3, #16
 800995c:	4319      	orrs	r1, r3
 800995e:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009960:	789b      	ldrb	r3, [r3, #2]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	430b      	orrs	r3, r1
 8009966:	4916      	ldr	r1, [pc, #88]	; (80099c0 <MX_LWIP_Init+0x240>)
 8009968:	78c9      	ldrb	r1, [r1, #3]
 800996a:	430b      	orrs	r3, r1
 800996c:	0e1b      	lsrs	r3, r3, #24
 800996e:	4313      	orrs	r3, r2
 8009970:	4a16      	ldr	r2, [pc, #88]	; (80099cc <MX_LWIP_Init+0x24c>)
 8009972:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009974:	4b16      	ldr	r3, [pc, #88]	; (80099d0 <MX_LWIP_Init+0x250>)
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	4b16      	ldr	r3, [pc, #88]	; (80099d4 <MX_LWIP_Init+0x254>)
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	2300      	movs	r3, #0
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4b12      	ldr	r3, [pc, #72]	; (80099cc <MX_LWIP_Init+0x24c>)
 8009982:	4a11      	ldr	r2, [pc, #68]	; (80099c8 <MX_LWIP_Init+0x248>)
 8009984:	490f      	ldr	r1, [pc, #60]	; (80099c4 <MX_LWIP_Init+0x244>)
 8009986:	4814      	ldr	r0, [pc, #80]	; (80099d8 <MX_LWIP_Init+0x258>)
 8009988:	f006 fa28 	bl	800fddc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800998c:	4812      	ldr	r0, [pc, #72]	; (80099d8 <MX_LWIP_Init+0x258>)
 800998e:	f006 fb05 	bl	800ff9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009992:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <MX_LWIP_Init+0x258>)
 8009994:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80099a4:	480c      	ldr	r0, [pc, #48]	; (80099d8 <MX_LWIP_Init+0x258>)
 80099a6:	f006 fb09 	bl	800ffbc <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80099aa:	e002      	b.n	80099b2 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80099ac:	480a      	ldr	r0, [pc, #40]	; (80099d8 <MX_LWIP_Init+0x258>)
 80099ae:	f006 fb49 	bl	8010044 <netif_set_down>
}
 80099b2:	bf00      	nop
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	2000cf2c 	.word	0x2000cf2c
 80099bc:	2000cf28 	.word	0x2000cf28
 80099c0:	2000cef0 	.word	0x2000cef0
 80099c4:	2000cf24 	.word	0x2000cf24
 80099c8:	2000cf30 	.word	0x2000cf30
 80099cc:	2000cf34 	.word	0x2000cf34
 80099d0:	0800f2dd 	.word	0x0800f2dd
 80099d4:	0800a061 	.word	0x0800a061
 80099d8:	2000cef4 	.word	0x2000cef4

080099dc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80099ee:	2320      	movs	r3, #32
 80099f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80099f2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80099f6:	e00b      	b.n	8009a10 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80099f8:	4a0c      	ldr	r2, [pc, #48]	; (8009a2c <SCB_InvalidateDCache_by_Addr+0x50>)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4413      	add	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dcf0      	bgt.n	80099f8 <SCB_InvalidateDCache_by_Addr+0x1c>
 8009a16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009a1a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08e      	sub	sp, #56	; 0x38
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	605a      	str	r2, [r3, #4]
 8009a42:	609a      	str	r2, [r3, #8]
 8009a44:	60da      	str	r2, [r3, #12]
 8009a46:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a5d      	ldr	r2, [pc, #372]	; (8009bc4 <HAL_ETH_MspInit+0x194>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	f040 80b3 	bne.w	8009bba <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009a54:	4b5c      	ldr	r3, [pc, #368]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a5a:	4a5b      	ldr	r2, [pc, #364]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009a64:	4b58      	ldr	r3, [pc, #352]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6e:	623b      	str	r3, [r7, #32]
 8009a70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009a72:	4b55      	ldr	r3, [pc, #340]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a78:	4a53      	ldr	r2, [pc, #332]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009a82:	4b51      	ldr	r3, [pc, #324]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a8c:	61fb      	str	r3, [r7, #28]
 8009a8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009a90:	4b4d      	ldr	r3, [pc, #308]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a96:	4a4c      	ldr	r2, [pc, #304]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009aa0:	4b49      	ldr	r3, [pc, #292]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aae:	4b46      	ldr	r3, [pc, #280]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ab4:	4a44      	ldr	r2, [pc, #272]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ab6:	f043 0304 	orr.w	r3, r3, #4
 8009aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009abe:	4b42      	ldr	r3, [pc, #264]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009acc:	4b3e      	ldr	r3, [pc, #248]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ad2:	4a3d      	ldr	r2, [pc, #244]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ad4:	f043 0301 	orr.w	r3, r3, #1
 8009ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009adc:	4b3a      	ldr	r3, [pc, #232]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	613b      	str	r3, [r7, #16]
 8009ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aea:	4b37      	ldr	r3, [pc, #220]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009af0:	4a35      	ldr	r2, [pc, #212]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009af2:	f043 0302 	orr.w	r3, r3, #2
 8009af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009afa:	4b33      	ldr	r3, [pc, #204]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b08:	4b2f      	ldr	r3, [pc, #188]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b0e:	4a2e      	ldr	r2, [pc, #184]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b18:	4b2b      	ldr	r3, [pc, #172]	; (8009bc8 <HAL_ETH_MspInit+0x198>)
 8009b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	60bb      	str	r3, [r7, #8]
 8009b24:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009b26:	2332      	movs	r3, #50	; 0x32
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b32:	2300      	movs	r3, #0
 8009b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b36:	230b      	movs	r3, #11
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4822      	ldr	r0, [pc, #136]	; (8009bcc <HAL_ETH_MspInit+0x19c>)
 8009b42:	f7f9 fdd5 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009b46:	2386      	movs	r3, #134	; 0x86
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b52:	2300      	movs	r3, #0
 8009b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b56:	230b      	movs	r3, #11
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b5e:	4619      	mov	r1, r3
 8009b60:	481b      	ldr	r0, [pc, #108]	; (8009bd0 <HAL_ETH_MspInit+0x1a0>)
 8009b62:	f7f9 fdc5 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b74:	2300      	movs	r3, #0
 8009b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b78:	230b      	movs	r3, #11
 8009b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b80:	4619      	mov	r1, r3
 8009b82:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <HAL_ETH_MspInit+0x1a4>)
 8009b84:	f7f9 fdb4 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009b88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b96:	2300      	movs	r3, #0
 8009b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b9a:	230b      	movs	r3, #11
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	480c      	ldr	r0, [pc, #48]	; (8009bd8 <HAL_ETH_MspInit+0x1a8>)
 8009ba6:	f7f9 fda3 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009baa:	2200      	movs	r2, #0
 8009bac:	2105      	movs	r1, #5
 8009bae:	203d      	movs	r0, #61	; 0x3d
 8009bb0:	f7f7 fed2 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009bb4:	203d      	movs	r0, #61	; 0x3d
 8009bb6:	f7f7 fee9 	bl	800198c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3738      	adds	r7, #56	; 0x38
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40028000 	.word	0x40028000
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	58020800 	.word	0x58020800
 8009bd0:	58020000 	.word	0x58020000
 8009bd4:	58020400 	.word	0x58020400
 8009bd8:	58021800 	.word	0x58021800

08009bdc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <HAL_ETH_RxCpltCallback+0x1c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fc93 	bl	800a514 <osSemaphoreRelease>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	2000030c 	.word	0x2000030c

08009bfc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009bfc:	b5b0      	push	{r4, r5, r7, lr}
 8009bfe:	b0ac      	sub	sp, #176	; 0xb0
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c10:	4b90      	ldr	r3, [pc, #576]	; (8009e54 <low_level_init+0x258>)
 8009c12:	4a91      	ldr	r2, [pc, #580]	; (8009e58 <low_level_init+0x25c>)
 8009c14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009c22:	23e1      	movs	r3, #225	; 0xe1
 8009c24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009c3a:	4a86      	ldr	r2, [pc, #536]	; (8009e54 <low_level_init+0x258>)
 8009c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c40:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009c42:	4b84      	ldr	r3, [pc, #528]	; (8009e54 <low_level_init+0x258>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009c48:	4b82      	ldr	r3, [pc, #520]	; (8009e54 <low_level_init+0x258>)
 8009c4a:	4a84      	ldr	r2, [pc, #528]	; (8009e5c <low_level_init+0x260>)
 8009c4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009c4e:	4b81      	ldr	r3, [pc, #516]	; (8009e54 <low_level_init+0x258>)
 8009c50:	4a83      	ldr	r2, [pc, #524]	; (8009e60 <low_level_init+0x264>)
 8009c52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8009c54:	4b7f      	ldr	r3, [pc, #508]	; (8009e54 <low_level_init+0x258>)
 8009c56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009c5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009c5c:	487d      	ldr	r0, [pc, #500]	; (8009e54 <low_level_init+0x258>)
 8009c5e:	f7f7 ff2f 	bl	8001ac0 <HAL_ETH_Init>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009c68:	2234      	movs	r2, #52	; 0x34
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	487d      	ldr	r0, [pc, #500]	; (8009e64 <low_level_init+0x268>)
 8009c6e:	f00f faef 	bl	8019250 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009c72:	4b7c      	ldr	r3, [pc, #496]	; (8009e64 <low_level_init+0x268>)
 8009c74:	2221      	movs	r2, #33	; 0x21
 8009c76:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009c78:	4b7a      	ldr	r3, [pc, #488]	; (8009e64 <low_level_init+0x268>)
 8009c7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009c7e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009c80:	4b78      	ldr	r3, [pc, #480]	; (8009e64 <low_level_init+0x268>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009c86:	4878      	ldr	r0, [pc, #480]	; (8009e68 <low_level_init+0x26c>)
 8009c88:	f005 ff62 	bl	800fb50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2206      	movs	r2, #6
 8009c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009c94:	4b6f      	ldr	r3, [pc, #444]	; (8009e54 <low_level_init+0x258>)
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009ca0:	4b6c      	ldr	r3, [pc, #432]	; (8009e54 <low_level_init+0x258>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	785a      	ldrb	r2, [r3, #1]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009cac:	4b69      	ldr	r3, [pc, #420]	; (8009e54 <low_level_init+0x258>)
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	789a      	ldrb	r2, [r3, #2]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009cb8:	4b66      	ldr	r3, [pc, #408]	; (8009e54 <low_level_init+0x258>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	78da      	ldrb	r2, [r3, #3]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009cc4:	4b63      	ldr	r3, [pc, #396]	; (8009e54 <low_level_init+0x258>)
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	791a      	ldrb	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009cd0:	4b60      	ldr	r3, [pc, #384]	; (8009e54 <low_level_init+0x258>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	795a      	ldrb	r2, [r3, #5]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009ce2:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009cea:	f043 030a 	orr.w	r3, r3, #10
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cfc:	e012      	b.n	8009d24 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009cfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	025b      	lsls	r3, r3, #9
 8009d0a:	4a58      	ldr	r2, [pc, #352]	; (8009e6c <low_level_init+0x270>)
 8009d0c:	441a      	add	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009d14:	484f      	ldr	r0, [pc, #316]	; (8009e54 <low_level_init+0x258>)
 8009d16:	f7f7 ffad 	bl	8001c74 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d9e8      	bls.n	8009cfe <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d30:	2300      	movs	r3, #0
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fb68 	bl	800a410 <osSemaphoreCreate>
 8009d40:	4602      	mov	r2, r0
 8009d42:	4b4b      	ldr	r3, [pc, #300]	; (8009e70 <low_level_init+0x274>)
 8009d44:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009d46:	4b4b      	ldr	r3, [pc, #300]	; (8009e74 <low_level_init+0x278>)
 8009d48:	f107 040c 	add.w	r4, r7, #12
 8009d4c:	461d      	mov	r5, r3
 8009d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fa59 	bl	800a218 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d66:	4944      	ldr	r1, [pc, #272]	; (8009e78 <low_level_init+0x27c>)
 8009d68:	4844      	ldr	r0, [pc, #272]	; (8009e7c <low_level_init+0x280>)
 8009d6a:	f7f7 fb3e 	bl	80013ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009d6e:	4843      	ldr	r0, [pc, #268]	; (8009e7c <low_level_init+0x280>)
 8009d70:	f7f7 fb6d 	bl	800144e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009d74:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d164      	bne.n	8009e46 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009d7c:	483f      	ldr	r0, [pc, #252]	; (8009e7c <low_level_init+0x280>)
 8009d7e:	f7f7 fc0e 	bl	800159e <LAN8742_GetLinkState>
 8009d82:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	dc06      	bgt.n	8009d9c <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f006 f99d 	bl	80100ce <netif_set_link_down>
      netif_set_down(netif);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f006 f955 	bl	8010044 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009d9a:	e056      	b.n	8009e4a <low_level_init+0x24e>
      switch (PHYLinkState)
 8009d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009da0:	3b02      	subs	r3, #2
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d82a      	bhi.n	8009dfc <low_level_init+0x200>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <low_level_init+0x1b0>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dbd 	.word	0x08009dbd
 8009db0:	08009dcf 	.word	0x08009dcf
 8009db4:	08009ddf 	.word	0x08009ddf
 8009db8:	08009def 	.word	0x08009def
        duplex = ETH_FULLDUPLEX_MODE;
 8009dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009dcc:	e01f      	b.n	8009e0e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009dd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009ddc:	e017      	b.n	8009e0e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8009dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009de6:	2300      	movs	r3, #0
 8009de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009dec:	e00f      	b.n	8009e0e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009dfa:	e008      	b.n	8009e0e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8009dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009e04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 8009e0c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 8009e0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e12:	4619      	mov	r1, r3
 8009e14:	480f      	ldr	r0, [pc, #60]	; (8009e54 <low_level_init+0x258>)
 8009e16:	f7f8 fc95 	bl	8002744 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e1e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8009e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009e26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4809      	ldr	r0, [pc, #36]	; (8009e54 <low_level_init+0x258>)
 8009e2e:	f7f8 fe5d 	bl	8002aec <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <low_level_init+0x258>)
 8009e34:	f7f7 ff5f 	bl	8001cf6 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f006 f8bf 	bl	800ffbc <netif_set_up>
    netif_set_link_up(netif);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f006 f922 	bl	8010088 <netif_set_link_up>
}
 8009e44:	e001      	b.n	8009e4a <low_level_init+0x24e>
    Error_Handler();
 8009e46:	f7f7 f83b 	bl	8000ec0 <Error_Handler>
}
 8009e4a:	bf00      	nop
 8009e4c:	37b0      	adds	r7, #176	; 0xb0
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bdb0      	pop	{r4, r5, r7, pc}
 8009e52:	bf00      	nop
 8009e54:	2000d024 	.word	0x2000d024
 8009e58:	40028000 	.word	0x40028000
 8009e5c:	30040060 	.word	0x30040060
 8009e60:	30040000 	.word	0x30040000
 8009e64:	2000d094 	.word	0x2000d094
 8009e68:	0801ce08 	.word	0x0801ce08
 8009e6c:	30040200 	.word	0x30040200
 8009e70:	2000030c 	.word	0x2000030c
 8009e74:	0801a468 	.word	0x0801a468
 8009e78:	20000010 	.word	0x20000010
 8009e7c:	2000d004 	.word	0x2000d004

08009e80 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b092      	sub	sp, #72	; 0x48
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e8e:	2300      	movs	r3, #0
 8009e90:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	2230      	movs	r2, #48	; 0x30
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f00f f9d5 	bl	8019250 <memset>
  
  for(q = p; q != NULL; q = q->next)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eaa:	e04f      	b.n	8009f4c <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8009eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d902      	bls.n	8009eb8 <low_level_output+0x38>
      return ERR_IF;
 8009eb2:	f06f 030b 	mvn.w	r3, #11
 8009eb6:	e05a      	b.n	8009f6e <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009eca:	4413      	add	r3, r2
 8009ecc:	3b40      	subs	r3, #64	; 0x40
 8009ece:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	895b      	ldrh	r3, [r3, #10]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ed8:	4613      	mov	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ee4:	4413      	add	r3, r2
 8009ee6:	3b3c      	subs	r3, #60	; 0x3c
 8009ee8:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8009eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eec:	895b      	ldrh	r3, [r3, #10]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef2:	4413      	add	r3, r2
 8009ef4:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8009ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d012      	beq.n	8009f22 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efe:	1e5a      	subs	r2, r3, #1
 8009f00:	f107 0008 	add.w	r0, r7, #8
 8009f04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f06:	460b      	mov	r3, r1
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	440b      	add	r3, r1
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	18c1      	adds	r1, r0, r3
 8009f10:	4613      	mov	r3, r2
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f1c:	4413      	add	r3, r2
 8009f1e:	3b38      	subs	r3, #56	; 0x38
 8009f20:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 8009f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f38:	4413      	add	r3, r2
 8009f3a:	3b38      	subs	r3, #56	; 0x38
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f42:	3301      	adds	r3, #1
 8009f44:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ac      	bne.n	8009eac <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <low_level_output+0xf8>)
 8009f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f56:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009f58:	4a07      	ldr	r2, [pc, #28]	; (8009f78 <low_level_output+0xf8>)
 8009f5a:	f107 0308 	add.w	r3, r7, #8
 8009f5e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009f60:	2214      	movs	r2, #20
 8009f62:	4905      	ldr	r1, [pc, #20]	; (8009f78 <low_level_output+0xf8>)
 8009f64:	4805      	ldr	r0, [pc, #20]	; (8009f7c <low_level_output+0xfc>)
 8009f66:	f7f7 ff5c 	bl	8001e22 <HAL_ETH_Transmit>
  
  return errval;
 8009f6a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3748      	adds	r7, #72	; 0x48
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	2000d094 	.word	0x2000d094
 8009f7c:	2000d024 	.word	0x2000d024

08009f80 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08a      	sub	sp, #40	; 0x28
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009f90:	f107 030c 	add.w	r3, r7, #12
 8009f94:	4619      	mov	r1, r3
 8009f96:	4817      	ldr	r0, [pc, #92]	; (8009ff4 <low_level_input+0x74>)
 8009f98:	f7f8 f8ad 	bl	80020f6 <HAL_ETH_GetRxDataBuffer>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d122      	bne.n	8009fe8 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009fa2:	f107 0308 	add.w	r3, r7, #8
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4812      	ldr	r0, [pc, #72]	; (8009ff4 <low_level_input+0x74>)
 8009faa:	f7f8 f942 	bl	8002232 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009fae:	4811      	ldr	r0, [pc, #68]	; (8009ff4 <low_level_input+0x74>)
 8009fb0:	f7f8 f972 	bl	8002298 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fd0e 	bl	80099dc <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009fc0:	480d      	ldr	r0, [pc, #52]	; (8009ff8 <low_level_input+0x78>)
 8009fc2:	f005 fe41 	bl	800fc48 <memp_malloc_pool>
 8009fc6:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	4a0c      	ldr	r2, [pc, #48]	; (8009ffc <low_level_input+0x7c>)
 8009fcc:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	b299      	uxth	r1, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009fd8:	9201      	str	r2, [sp, #4]
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	2004      	movs	r0, #4
 8009fe2:	f006 fa83 	bl	80104ec <pbuf_alloced_custom>
 8009fe6:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2000d024 	.word	0x2000d024
 8009ff8:	0801ce08 	.word	0x0801ce08
 8009ffc:	0800a0bd 	.word	0x0800a0bd

0800a000 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a00c:	4b12      	ldr	r3, [pc, #72]	; (800a058 <ethernetif_input+0x58>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f04f 31ff 	mov.w	r1, #4294967295
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fa2f 	bl	800a478 <osSemaphoreWait>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f5      	bne.n	800a00c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a020:	480e      	ldr	r0, [pc, #56]	; (800a05c <ethernetif_input+0x5c>)
 800a022:	f00f f877 	bl	8019114 <sys_mutex_lock>
        p = low_level_input( netif );
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff ffaa 	bl	8009f80 <low_level_input>
 800a02c:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	68f9      	ldr	r1, [r7, #12]
 800a03a:	68b8      	ldr	r0, [r7, #8]
 800a03c:	4798      	blx	r3
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	f006 fc2f 	bl	80108a8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a04a:	4804      	ldr	r0, [pc, #16]	; (800a05c <ethernetif_input+0x5c>)
 800a04c:	f00f f871 	bl	8019132 <sys_mutex_unlock>
      } while(p!=NULL);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e4      	bne.n	800a020 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a056:	e7d9      	b.n	800a00c <ethernetif_input+0xc>
 800a058:	2000030c 	.word	0x2000030c
 800a05c:	2000d10c 	.word	0x2000d10c

0800a060 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <ethernetif_init+0x1c>
 800a06e:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <ethernetif_init+0x48>)
 800a070:	f240 2241 	movw	r2, #577	; 0x241
 800a074:	490d      	ldr	r1, [pc, #52]	; (800a0ac <ethernetif_init+0x4c>)
 800a076:	480e      	ldr	r0, [pc, #56]	; (800a0b0 <ethernetif_init+0x50>)
 800a078:	f00f f8f2 	bl	8019260 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2273      	movs	r2, #115	; 0x73
 800a080:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2274      	movs	r2, #116	; 0x74
 800a088:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <ethernetif_init+0x54>)
 800a090:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a08      	ldr	r2, [pc, #32]	; (800a0b8 <ethernetif_init+0x58>)
 800a096:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff fdaf 	bl	8009bfc <low_level_init>

  return ERR_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	0801a484 	.word	0x0801a484
 800a0ac:	0801a4a0 	.word	0x0801a4a0
 800a0b0:	0801a4b0 	.word	0x0801a4b0
 800a0b4:	08017211 	.word	0x08017211
 800a0b8:	08009e81 	.word	0x08009e81

0800a0bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	891b      	ldrh	r3, [r3, #8]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7ff fc82 	bl	80099dc <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	4803      	ldr	r0, [pc, #12]	; (800a0e8 <pbuf_free_custom+0x2c>)
 800a0dc:	f005 fe28 	bl	800fd30 <memp_free_pool>
}
 800a0e0:	bf00      	nop
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	0801ce08 	.word	0x0801ce08

0800a0ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a0f0:	f7f7 fb2c 	bl	800174c <HAL_GetTick>
 800a0f4:	4603      	mov	r3, r0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a100:	4802      	ldr	r0, [pc, #8]	; (800a10c <ETH_PHY_IO_Init+0x10>)
 800a102:	f7f8 fd0d 	bl	8002b20 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	2000d024 	.word	0x2000d024

0800a110 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
  return 0;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	68f9      	ldr	r1, [r7, #12]
 800a132:	4807      	ldr	r0, [pc, #28]	; (800a150 <ETH_PHY_IO_ReadReg+0x30>)
 800a134:	f7f8 fa5e 	bl	80025f4 <HAL_ETH_ReadPHYRegister>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295
 800a142:	e000      	b.n	800a146 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000d024 	.word	0x2000d024

0800a154 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	68f9      	ldr	r1, [r7, #12]
 800a166:	4807      	ldr	r0, [pc, #28]	; (800a184 <ETH_PHY_IO_WriteReg+0x30>)
 800a168:	f7f8 fa98 	bl	800269c <HAL_ETH_WritePHYRegister>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	e000      	b.n	800a17a <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000d024 	.word	0x2000d024

0800a188 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a18c:	f7f7 fade 	bl	800174c <HAL_GetTick>
 800a190:	4603      	mov	r3, r0
}
 800a192:	4618      	mov	r0, r3
 800a194:	bd80      	pop	{r7, pc}

0800a196 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	4603      	mov	r3, r0
 800a19e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a1a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1a8:	2b84      	cmp	r3, #132	; 0x84
 800a1aa:	d005      	beq.n	800a1b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a1ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3303      	adds	r3, #3
 800a1b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1cc:	f3ef 8305 	mrs	r3, IPSR
 800a1d0:	607b      	str	r3, [r7, #4]
  return(result);
 800a1d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a1ee:	f001 fd07 	bl	800bc00 <vTaskStartScheduler>
  
  return osOK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a1fc:	f7ff ffe3 	bl	800a1c6 <inHandlerMode>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a206:	f001 fe13 	bl	800be30 <xTaskGetTickCountFromISR>
 800a20a:	4603      	mov	r3, r0
 800a20c:	e002      	b.n	800a214 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a20e:	f001 fdff 	bl	800be10 <xTaskGetTickCount>
 800a212:	4603      	mov	r3, r0
  }
}
 800a214:	4618      	mov	r0, r3
 800a216:	bd80      	pop	{r7, pc}

0800a218 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af04      	add	r7, sp, #16
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d020      	beq.n	800a26c <osThreadCreate+0x54>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d01c      	beq.n	800a26c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685c      	ldr	r4, [r3, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691e      	ldr	r6, [r3, #16]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff ffa6 	bl	800a196 <makeFreeRtosPriority>
 800a24a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a254:	9202      	str	r2, [sp, #8]
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	9100      	str	r1, [sp, #0]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	4632      	mov	r2, r6
 800a25e:	4629      	mov	r1, r5
 800a260:	4620      	mov	r0, r4
 800a262:	f001 fb09 	bl	800b878 <xTaskCreateStatic>
 800a266:	4603      	mov	r3, r0
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e01c      	b.n	800a2a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685c      	ldr	r4, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a278:	b29e      	uxth	r6, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff ff88 	bl	800a196 <makeFreeRtosPriority>
 800a286:	4602      	mov	r2, r0
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	9200      	str	r2, [sp, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	4632      	mov	r2, r6
 800a294:	4629      	mov	r1, r5
 800a296:	4620      	mov	r0, r4
 800a298:	f001 fb48 	bl	800b92c <xTaskCreate>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d001      	beq.n	800a2a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e000      	b.n	800a2a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <osDelay+0x16>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	e000      	b.n	800a2c8 <osDelay+0x18>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 fc65 	bl	800bb98 <vTaskDelay>
  
  return osOK;
 800a2ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	f000 fc7f 	bl	800abf2 <xQueueCreateMutexStatic>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	e003      	b.n	800a300 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	f000 fc62 	bl	800abc2 <xQueueCreateMutex>
 800a2fe:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a312:	2300      	movs	r3, #0
 800a314:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <osMutexWait+0x18>
    return osErrorParameter;
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	e03a      	b.n	800a396 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d103      	bne.n	800a334 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a32c:	f04f 33ff 	mov.w	r3, #4294967295
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	e009      	b.n	800a348 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <osMutexWait+0x40>
      ticks = 1;
 800a344:	2301      	movs	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a348:	f7ff ff3d 	bl	800a1c6 <inHandlerMode>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d017      	beq.n	800a382 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a352:	f107 0308 	add.w	r3, r7, #8
 800a356:	461a      	mov	r2, r3
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f001 f860 	bl	800b420 <xQueueReceiveFromISR>
 800a360:	4603      	mov	r3, r0
 800a362:	2b01      	cmp	r3, #1
 800a364:	d001      	beq.n	800a36a <osMutexWait+0x62>
      return osErrorOS;
 800a366:	23ff      	movs	r3, #255	; 0xff
 800a368:	e015      	b.n	800a396 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d011      	beq.n	800a394 <osMutexWait+0x8c>
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <osMutexWait+0x98>)
 800a372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	e008      	b.n	800a394 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 ff43 	bl	800b210 <xQueueSemaphoreTake>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d001      	beq.n	800a394 <osMutexWait+0x8c>
    return osErrorOS;
 800a390:	23ff      	movs	r3, #255	; 0xff
 800a392:	e000      	b.n	800a396 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a3b4:	f7ff ff07 	bl	800a1c6 <inHandlerMode>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d016      	beq.n	800a3ec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fdbd 	bl	800af44 <xQueueGiveFromISR>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d001      	beq.n	800a3d4 <osMutexRelease+0x30>
      return osErrorOS;
 800a3d0:	23ff      	movs	r3, #255	; 0xff
 800a3d2:	e017      	b.n	800a404 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d013      	beq.n	800a402 <osMutexRelease+0x5e>
 800a3da:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <osMutexRelease+0x68>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	e00a      	b.n	800a402 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fc18 	bl	800ac28 <xQueueGenericSend>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d001      	beq.n	800a402 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a3fe:	23ff      	movs	r3, #255	; 0xff
 800a400:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a402:	68fb      	ldr	r3, [r7, #12]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af02      	add	r7, sp, #8
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d010      	beq.n	800a444 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d10b      	bne.n	800a440 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	2303      	movs	r3, #3
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	4613      	mov	r3, r2
 800a432:	2200      	movs	r2, #0
 800a434:	2100      	movs	r1, #0
 800a436:	2001      	movs	r0, #1
 800a438:	f000 fad8 	bl	800a9ec <xQueueGenericCreateStatic>
 800a43c:	4603      	mov	r3, r0
 800a43e:	e016      	b.n	800a46e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	e014      	b.n	800a46e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d110      	bne.n	800a46c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a44a:	2203      	movs	r2, #3
 800a44c:	2100      	movs	r1, #0
 800a44e:	2001      	movs	r0, #1
 800a450:	f000 fb3f 	bl	800aad2 <xQueueGenericCreate>
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <osSemaphoreCreate+0x58>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2200      	movs	r2, #0
 800a460:	2100      	movs	r1, #0
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fbe0 	bl	800ac28 <xQueueGenericSend>
      return sema;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e000      	b.n	800a46e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a46c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a482:	2300      	movs	r3, #0
 800a484:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a48c:	2380      	movs	r3, #128	; 0x80
 800a48e:	e03a      	b.n	800a506 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d103      	bne.n	800a4a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e009      	b.n	800a4b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d006      	beq.n	800a4b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <osSemaphoreWait+0x40>
      ticks = 1;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a4b8:	f7ff fe85 	bl	800a1c6 <inHandlerMode>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d017      	beq.n	800a4f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 ffa8 	bl	800b420 <xQueueReceiveFromISR>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d001      	beq.n	800a4da <osSemaphoreWait+0x62>
      return osErrorOS;
 800a4d6:	23ff      	movs	r3, #255	; 0xff
 800a4d8:	e015      	b.n	800a506 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <osSemaphoreWait+0x8c>
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <osSemaphoreWait+0x98>)
 800a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	e008      	b.n	800a504 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a4f2:	68f9      	ldr	r1, [r7, #12]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fe8b 	bl	800b210 <xQueueSemaphoreTake>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d001      	beq.n	800a504 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a500:	23ff      	movs	r3, #255	; 0xff
 800a502:	e000      	b.n	800a506 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a520:	2300      	movs	r3, #0
 800a522:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a524:	f7ff fe4f 	bl	800a1c6 <inHandlerMode>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fd05 	bl	800af44 <xQueueGiveFromISR>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d001      	beq.n	800a544 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a540:	23ff      	movs	r3, #255	; 0xff
 800a542:	e017      	b.n	800a574 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d013      	beq.n	800a572 <osSemaphoreRelease+0x5e>
 800a54a:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <osSemaphoreRelease+0x68>)
 800a54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	e00a      	b.n	800a572 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a55c:	2300      	movs	r3, #0
 800a55e:	2200      	movs	r2, #0
 800a560:	2100      	movs	r1, #0
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb60 	bl	800ac28 <xQueueGenericSend>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d001      	beq.n	800a572 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a56e:	23ff      	movs	r3, #255	; 0xff
 800a570:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a572:	68fb      	ldr	r3, [r7, #12]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a588:	f7ff fe1d 	bl	800a1c6 <inHandlerMode>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a592:	2382      	movs	r3, #130	; 0x82
 800a594:	e003      	b.n	800a59e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fff9 	bl	800b58e <vQueueDelete>

  return osOK; 
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a5a6:	b590      	push	{r4, r7, lr}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af02      	add	r7, sp, #8
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d012      	beq.n	800a5de <osMessageCreate+0x38>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00e      	beq.n	800a5de <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6859      	ldr	r1, [r3, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689a      	ldr	r2, [r3, #8]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68dc      	ldr	r4, [r3, #12]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4623      	mov	r3, r4
 800a5d6:	f000 fa09 	bl	800a9ec <xQueueGenericCreateStatic>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	e008      	b.n	800a5f0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f000 fa72 	bl	800aad2 <xQueueGenericCreate>
 800a5ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd90      	pop	{r4, r7, pc}

0800a5f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a604:	2300      	movs	r3, #0
 800a606:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <osMessagePut+0x1e>
    ticks = 1;
 800a612:	2301      	movs	r3, #1
 800a614:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a616:	f7ff fdd6 	bl	800a1c6 <inHandlerMode>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d018      	beq.n	800a652 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a620:	f107 0210 	add.w	r2, r7, #16
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	2300      	movs	r3, #0
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f000 fbf6 	bl	800ae1c <xQueueGenericSendFromISR>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	d001      	beq.n	800a63a <osMessagePut+0x42>
      return osErrorOS;
 800a636:	23ff      	movs	r3, #255	; 0xff
 800a638:	e018      	b.n	800a66c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d014      	beq.n	800a66a <osMessagePut+0x72>
 800a640:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <osMessagePut+0x7c>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	e00b      	b.n	800a66a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a652:	f107 0108 	add.w	r1, r7, #8
 800a656:	2300      	movs	r3, #0
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fae4 	bl	800ac28 <xQueueGenericSend>
 800a660:	4603      	mov	r3, r0
 800a662:	2b01      	cmp	r3, #1
 800a664:	d001      	beq.n	800a66a <osMessagePut+0x72>
      return osErrorOS;
 800a666:	23ff      	movs	r3, #255	; 0xff
 800a668:	e000      	b.n	800a66c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b08b      	sub	sp, #44	; 0x2c
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a692:	2380      	movs	r3, #128	; 0x80
 800a694:	617b      	str	r3, [r7, #20]
    return event;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	461c      	mov	r4, r3
 800a69a:	f107 0314 	add.w	r3, r7, #20
 800a69e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6a6:	e054      	b.n	800a752 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d103      	bne.n	800a6c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6be:	e009      	b.n	800a6d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d006      	beq.n	800a6d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <osMessageGet+0x5c>
      ticks = 1;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a6d4:	f7ff fd77 	bl	800a1c6 <inHandlerMode>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01c      	beq.n	800a718 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a6de:	f107 0220 	add.w	r2, r7, #32
 800a6e2:	f107 0314 	add.w	r3, r7, #20
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	68b8      	ldr	r0, [r7, #8]
 800a6ec:	f000 fe98 	bl	800b420 <xQueueReceiveFromISR>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d102      	bne.n	800a6fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a6f6:	2310      	movs	r3, #16
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	e001      	b.n	800a700 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d01d      	beq.n	800a742 <osMessageGet+0xca>
 800a706:	4b15      	ldr	r3, [pc, #84]	; (800a75c <osMessageGet+0xe4>)
 800a708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	e014      	b.n	800a742 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	3304      	adds	r3, #4
 800a71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a720:	4619      	mov	r1, r3
 800a722:	68b8      	ldr	r0, [r7, #8]
 800a724:	f000 fc98 	bl	800b058 <xQueueReceive>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d102      	bne.n	800a734 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a72e:	2310      	movs	r3, #16
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	e006      	b.n	800a742 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <osMessageGet+0xc6>
 800a73a:	2300      	movs	r3, #0
 800a73c:	e000      	b.n	800a740 <osMessageGet+0xc8>
 800a73e:	2340      	movs	r3, #64	; 0x40
 800a740:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	461c      	mov	r4, r3
 800a746:	f107 0314 	add.w	r3, r7, #20
 800a74a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a74e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	372c      	adds	r7, #44	; 0x2c
 800a756:	46bd      	mov	sp, r7
 800a758:	bd90      	pop	{r4, r7, pc}
 800a75a:	bf00      	nop
 800a75c:	e000ed04 	.word	0xe000ed04

0800a760 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a768:	f7ff fd2d 	bl	800a1c6 <inHandlerMode>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 feee 	bl	800b554 <uxQueueMessagesWaitingFromISR>
 800a778:	4603      	mov	r3, r0
 800a77a:	e003      	b.n	800a784 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fecc 	bl	800b51a <uxQueueMessagesWaiting>
 800a782:	4603      	mov	r3, r0
  }
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a794:	f7ff fd17 	bl	800a1c6 <inHandlerMode>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <osMessageDelete+0x16>
    return osErrorISR;
 800a79e:	2382      	movs	r3, #130	; 0x82
 800a7a0:	e003      	b.n	800a7aa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fef3 	bl	800b58e <vQueueDelete>

  return osOK; 
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f103 0208 	add.w	r2, r3, #8
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f103 0208 	add.w	r2, r3, #8
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f103 0208 	add.w	r2, r3, #8
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
}
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d103      	bne.n	800a874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e00c      	b.n	800a88e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3308      	adds	r3, #8
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e002      	b.n	800a882 <vListInsert+0x2e>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	60fb      	str	r3, [r7, #12]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d2f6      	bcs.n	800a87c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
}
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6892      	ldr	r2, [r2, #8]
 800a8dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6852      	ldr	r2, [r2, #4]
 800a8e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d103      	bne.n	800a8fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	1e5a      	subs	r2, r3, #1
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
	...

0800a91c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d109      	bne.n	800a944 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	e7fe      	b.n	800a942 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a944:	f002 f8ca 	bl	800cadc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a950:	68f9      	ldr	r1, [r7, #12]
 800a952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a954:	fb01 f303 	mul.w	r3, r1, r3
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a974:	3b01      	subs	r3, #1
 800a976:	68f9      	ldr	r1, [r7, #12]
 800a978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	441a      	add	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	22ff      	movs	r2, #255	; 0xff
 800a988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	22ff      	movs	r2, #255	; 0xff
 800a990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d114      	bne.n	800a9c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d01a      	beq.n	800a9d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3310      	adds	r3, #16
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fb8a 	bl	800c0c0 <xTaskRemoveFromEventList>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d012      	beq.n	800a9d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	; (800a9e8 <xQueueGenericReset+0xcc>)
 800a9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	e009      	b.n	800a9d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3310      	adds	r3, #16
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fef2 	bl	800a7b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3324      	adds	r3, #36	; 0x24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff feed 	bl	800a7b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9d8:	f002 f8ae 	bl	800cb38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9dc:	2301      	movs	r3, #1
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08e      	sub	sp, #56	; 0x38
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d109      	bne.n	800aa14 <xQueueGenericCreateStatic+0x28>
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa12:	e7fe      	b.n	800aa12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d109      	bne.n	800aa2e <xQueueGenericCreateStatic+0x42>
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa2c:	e7fe      	b.n	800aa2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <xQueueGenericCreateStatic+0x4e>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <xQueueGenericCreateStatic+0x52>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e000      	b.n	800aa40 <xQueueGenericCreateStatic+0x54>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <xQueueGenericCreateStatic+0x6c>
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	623b      	str	r3, [r7, #32]
 800aa56:	e7fe      	b.n	800aa56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <xQueueGenericCreateStatic+0x78>
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <xQueueGenericCreateStatic+0x7c>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <xQueueGenericCreateStatic+0x7e>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d109      	bne.n	800aa82 <xQueueGenericCreateStatic+0x96>
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa82:	2348      	movs	r3, #72	; 0x48
 800aa84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b48      	cmp	r3, #72	; 0x48
 800aa8a:	d009      	beq.n	800aaa0 <xQueueGenericCreateStatic+0xb4>
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	61bb      	str	r3, [r7, #24]
 800aa9e:	e7fe      	b.n	800aa9e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaa0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00d      	beq.n	800aac8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aab4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	4613      	mov	r3, r2
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	68b9      	ldr	r1, [r7, #8]
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 f844 	bl	800ab50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3730      	adds	r7, #48	; 0x30
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b08a      	sub	sp, #40	; 0x28
 800aad6:	af02      	add	r7, sp, #8
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	4613      	mov	r3, r2
 800aade:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <xQueueGenericCreate+0x28>
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	e7fe      	b.n	800aaf8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	e004      	b.n	800ab10 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	3348      	adds	r3, #72	; 0x48
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 f8fb 	bl	800cd10 <pvPortMalloc>
 800ab1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d011      	beq.n	800ab46 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3348      	adds	r3, #72	; 0x48
 800ab2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab34:	79fa      	ldrb	r2, [r7, #7]
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 f805 	bl	800ab50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab46:	69bb      	ldr	r3, [r7, #24]
	}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3720      	adds	r7, #32
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	e002      	b.n	800ab72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab7e:	2101      	movs	r1, #1
 800ab80:	69b8      	ldr	r0, [r7, #24]
 800ab82:	f7ff fecb 	bl	800a91c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00e      	beq.n	800abba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800abae:	2300      	movs	r3, #0
 800abb0:	2200      	movs	r2, #0
 800abb2:	2100      	movs	r1, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f837 	bl	800ac28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	4603      	mov	r3, r0
 800abca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abcc:	2301      	movs	r3, #1
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	2300      	movs	r3, #0
 800abd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800abd4:	79fb      	ldrb	r3, [r7, #7]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6939      	ldr	r1, [r7, #16]
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff ff79 	bl	800aad2 <xQueueGenericCreate>
 800abe0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff ffd3 	bl	800ab8e <prvInitialiseMutex>

		return xNewQueue;
 800abe8:	68fb      	ldr	r3, [r7, #12]
	}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b088      	sub	sp, #32
 800abf6:	af02      	add	r7, sp, #8
 800abf8:	4603      	mov	r3, r0
 800abfa:	6039      	str	r1, [r7, #0]
 800abfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abfe:	2301      	movs	r3, #1
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	2300      	movs	r3, #0
 800ac04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	6939      	ldr	r1, [r7, #16]
 800ac10:	6978      	ldr	r0, [r7, #20]
 800ac12:	f7ff feeb 	bl	800a9ec <xQueueGenericCreateStatic>
 800ac16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff ffb8 	bl	800ab8e <prvInitialiseMutex>

		return xNewQueue;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08e      	sub	sp, #56	; 0x38
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <xQueueGenericSend+0x30>
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac56:	e7fe      	b.n	800ac56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <xQueueGenericSend+0x3e>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <xQueueGenericSend+0x42>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <xQueueGenericSend+0x44>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <xQueueGenericSend+0x5c>
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
 800ac82:	e7fe      	b.n	800ac82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d103      	bne.n	800ac92 <xQueueGenericSend+0x6a>
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <xQueueGenericSend+0x6e>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <xQueueGenericSend+0x70>
 800ac96:	2300      	movs	r3, #0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <xQueueGenericSend+0x88>
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	623b      	str	r3, [r7, #32]
 800acae:	e7fe      	b.n	800acae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acb0:	f001 fbbc 	bl	800c42c <xTaskGetSchedulerState>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <xQueueGenericSend+0x98>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <xQueueGenericSend+0x9c>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <xQueueGenericSend+0x9e>
 800acc4:	2300      	movs	r3, #0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <xQueueGenericSend+0xb6>
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	e7fe      	b.n	800acdc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acde:	f001 fefd 	bl	800cadc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acea:	429a      	cmp	r2, r3
 800acec:	d302      	bcc.n	800acf4 <xQueueGenericSend+0xcc>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d129      	bne.n	800ad48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfa:	f000 fc82 	bl	800b602 <prvCopyDataToQueue>
 800acfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d010      	beq.n	800ad2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	3324      	adds	r3, #36	; 0x24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f001 f9d7 	bl	800c0c0 <xTaskRemoveFromEventList>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d013      	beq.n	800ad40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad18:	4b3f      	ldr	r3, [pc, #252]	; (800ae18 <xQueueGenericSend+0x1f0>)
 800ad1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	e00a      	b.n	800ad40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d007      	beq.n	800ad40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad30:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <xQueueGenericSend+0x1f0>)
 800ad32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad40:	f001 fefa 	bl	800cb38 <vPortExitCritical>
				return pdPASS;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e063      	b.n	800ae10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d103      	bne.n	800ad56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad4e:	f001 fef3 	bl	800cb38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e05c      	b.n	800ae10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad5c:	f107 0314 	add.w	r3, r7, #20
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 fa0f 	bl	800c184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad66:	2301      	movs	r3, #1
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad6a:	f001 fee5 	bl	800cb38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad6e:	f000 ffa5 	bl	800bcbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad72:	f001 feb3 	bl	800cadc <vPortEnterCritical>
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7c:	b25b      	sxtb	r3, r3
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d103      	bne.n	800ad8c <xQueueGenericSend+0x164>
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad92:	b25b      	sxtb	r3, r3
 800ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad98:	d103      	bne.n	800ada2 <xQueueGenericSend+0x17a>
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada2:	f001 fec9 	bl	800cb38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ada6:	1d3a      	adds	r2, r7, #4
 800ada8:	f107 0314 	add.w	r3, r7, #20
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 f9fe 	bl	800c1b0 <xTaskCheckForTimeOut>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d124      	bne.n	800ae04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800adba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adbc:	f000 fd19 	bl	800b7f2 <prvIsQueueFull>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d018      	beq.n	800adf8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	3310      	adds	r3, #16
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	4611      	mov	r1, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f001 f952 	bl	800c078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800add4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800add6:	f000 fca4 	bl	800b722 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800adda:	f000 ff7d 	bl	800bcd8 <xTaskResumeAll>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f47f af7c 	bne.w	800acde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ade6:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <xQueueGenericSend+0x1f0>)
 800ade8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	e772      	b.n	800acde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800adf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adfa:	f000 fc92 	bl	800b722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adfe:	f000 ff6b 	bl	800bcd8 <xTaskResumeAll>
 800ae02:	e76c      	b.n	800acde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae06:	f000 fc8c 	bl	800b722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae0a:	f000 ff65 	bl	800bcd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3738      	adds	r7, #56	; 0x38
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08e      	sub	sp, #56	; 0x38
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d109      	bne.n	800ae48 <xQueueGenericSendFromISR+0x2c>
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
 800ae46:	e7fe      	b.n	800ae46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <xQueueGenericSendFromISR+0x3a>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <xQueueGenericSendFromISR+0x3e>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <xQueueGenericSendFromISR+0x40>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d109      	bne.n	800ae74 <xQueueGenericSendFromISR+0x58>
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
 800ae72:	e7fe      	b.n	800ae72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d103      	bne.n	800ae82 <xQueueGenericSendFromISR+0x66>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <xQueueGenericSendFromISR+0x6a>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <xQueueGenericSendFromISR+0x6c>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <xQueueGenericSendFromISR+0x84>
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61fb      	str	r3, [r7, #28]
 800ae9e:	e7fe      	b.n	800ae9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aea0:	f001 fef8 	bl	800cc94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aea4:	f3ef 8211 	mrs	r2, BASEPRI
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	61ba      	str	r2, [r7, #24]
 800aeba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aebc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <xQueueGenericSendFromISR+0xb6>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d12c      	bne.n	800af2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee2:	f000 fb8e 	bl	800b602 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aee6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeee:	d112      	bne.n	800af16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d016      	beq.n	800af26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	3324      	adds	r3, #36	; 0x24
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 f8df 	bl	800c0c0 <xTaskRemoveFromEventList>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00e      	beq.n	800af26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e007      	b.n	800af26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af1a:	3301      	adds	r3, #1
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	b25a      	sxtb	r2, r3
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af26:	2301      	movs	r3, #1
 800af28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800af2a:	e001      	b.n	800af30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af2c:	2300      	movs	r3, #0
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3738      	adds	r7, #56	; 0x38
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <xQueueGiveFromISR+0x28>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	623b      	str	r3, [r7, #32]
 800af6a:	e7fe      	b.n	800af6a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	d009      	beq.n	800af88 <xQueueGiveFromISR+0x44>
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	e7fe      	b.n	800af86 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <xQueueGiveFromISR+0x54>
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <xQueueGiveFromISR+0x58>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <xQueueGiveFromISR+0x5a>
 800af9c:	2300      	movs	r3, #0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <xQueueGiveFromISR+0x72>
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	61bb      	str	r3, [r7, #24]
 800afb4:	e7fe      	b.n	800afb4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afb6:	f001 fe6d 	bl	800cc94 <vPortValidateInterruptPriority>
	__asm volatile
 800afba:	f3ef 8211 	mrs	r2, BASEPRI
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	617a      	str	r2, [r7, #20]
 800afd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800afd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d22b      	bcs.n	800b03e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800affc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b000:	d112      	bne.n	800b028 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d016      	beq.n	800b038 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	3324      	adds	r3, #36	; 0x24
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 f856 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00e      	beq.n	800b038 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2201      	movs	r2, #1
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	e007      	b.n	800b038 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b02c:	3301      	adds	r3, #1
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	b25a      	sxtb	r2, r3
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b038:	2301      	movs	r3, #1
 800b03a:	637b      	str	r3, [r7, #52]	; 0x34
 800b03c:	e001      	b.n	800b042 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3738      	adds	r7, #56	; 0x38
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08c      	sub	sp, #48	; 0x30
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b064:	2300      	movs	r3, #0
 800b066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d109      	bne.n	800b086 <xQueueReceive+0x2e>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	623b      	str	r3, [r7, #32]
 800b084:	e7fe      	b.n	800b084 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d103      	bne.n	800b094 <xQueueReceive+0x3c>
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <xQueueReceive+0x40>
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <xQueueReceive+0x42>
 800b098:	2300      	movs	r3, #0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d109      	bne.n	800b0b2 <xQueueReceive+0x5a>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b2:	f001 f9bb 	bl	800c42c <xTaskGetSchedulerState>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xQueueReceive+0x6a>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <xQueueReceive+0x6e>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <xQueueReceive+0x70>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d109      	bne.n	800b0e0 <xQueueReceive+0x88>
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	61bb      	str	r3, [r7, #24]
 800b0de:	e7fe      	b.n	800b0de <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e0:	f001 fcfc 	bl	800cadc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01f      	beq.n	800b130 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f4:	f000 faef 	bl	800b6d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	1e5a      	subs	r2, r3, #1
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00f      	beq.n	800b128 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	3310      	adds	r3, #16
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 ffd7 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d007      	beq.n	800b128 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b118:	4b3c      	ldr	r3, [pc, #240]	; (800b20c <xQueueReceive+0x1b4>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b128:	f001 fd06 	bl	800cb38 <vPortExitCritical>
				return pdPASS;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e069      	b.n	800b204 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d103      	bne.n	800b13e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b136:	f001 fcff 	bl	800cb38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b13a:	2300      	movs	r3, #0
 800b13c:	e062      	b.n	800b204 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b144:	f107 0310 	add.w	r3, r7, #16
 800b148:	4618      	mov	r0, r3
 800b14a:	f001 f81b 	bl	800c184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b14e:	2301      	movs	r3, #1
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b152:	f001 fcf1 	bl	800cb38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b156:	f000 fdb1 	bl	800bcbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15a:	f001 fcbf 	bl	800cadc <vPortEnterCritical>
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b164:	b25b      	sxtb	r3, r3
 800b166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16a:	d103      	bne.n	800b174 <xQueueReceive+0x11c>
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b17a:	b25b      	sxtb	r3, r3
 800b17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b180:	d103      	bne.n	800b18a <xQueueReceive+0x132>
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b18a:	f001 fcd5 	bl	800cb38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b18e:	1d3a      	adds	r2, r7, #4
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f001 f80a 	bl	800c1b0 <xTaskCheckForTimeOut>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d123      	bne.n	800b1ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a4:	f000 fb0f 	bl	800b7c6 <prvIsQueueEmpty>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d017      	beq.n	800b1de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	3324      	adds	r3, #36	; 0x24
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 ff5e 	bl	800c078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1be:	f000 fab0 	bl	800b722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1c2:	f000 fd89 	bl	800bcd8 <xTaskResumeAll>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d189      	bne.n	800b0e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <xQueueReceive+0x1b4>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	e780      	b.n	800b0e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e0:	f000 fa9f 	bl	800b722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1e4:	f000 fd78 	bl	800bcd8 <xTaskResumeAll>
 800b1e8:	e77a      	b.n	800b0e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ec:	f000 fa99 	bl	800b722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1f0:	f000 fd72 	bl	800bcd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f6:	f000 fae6 	bl	800b7c6 <prvIsQueueEmpty>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f43f af6f 	beq.w	800b0e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b202:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b204:	4618      	mov	r0, r3
 800b206:	3730      	adds	r7, #48	; 0x30
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08e      	sub	sp, #56	; 0x38
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b222:	2300      	movs	r3, #0
 800b224:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d109      	bne.n	800b240 <xQueueSemaphoreTake+0x30>
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	623b      	str	r3, [r7, #32]
 800b23e:	e7fe      	b.n	800b23e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d009      	beq.n	800b25c <xQueueSemaphoreTake+0x4c>
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	61fb      	str	r3, [r7, #28]
 800b25a:	e7fe      	b.n	800b25a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b25c:	f001 f8e6 	bl	800c42c <xTaskGetSchedulerState>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d102      	bne.n	800b26c <xQueueSemaphoreTake+0x5c>
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <xQueueSemaphoreTake+0x60>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e000      	b.n	800b272 <xQueueSemaphoreTake+0x62>
 800b270:	2300      	movs	r3, #0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <xQueueSemaphoreTake+0x7a>
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	61bb      	str	r3, [r7, #24]
 800b288:	e7fe      	b.n	800b288 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b28a:	f001 fc27 	bl	800cadc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d024      	beq.n	800b2e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29c:	1e5a      	subs	r2, r3, #1
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d104      	bne.n	800b2b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2aa:	f001 fa79 	bl	800c7a0 <pvTaskIncrementMutexHeldCount>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00f      	beq.n	800b2dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	3310      	adds	r3, #16
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fefd 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d007      	beq.n	800b2dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2cc:	4b53      	ldr	r3, [pc, #332]	; (800b41c <xQueueSemaphoreTake+0x20c>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2dc:	f001 fc2c 	bl	800cb38 <vPortExitCritical>
				return pdPASS;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e096      	b.n	800b412 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d110      	bne.n	800b30c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d009      	beq.n	800b304 <xQueueSemaphoreTake+0xf4>
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	e7fe      	b.n	800b302 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b304:	f001 fc18 	bl	800cb38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b308:	2300      	movs	r3, #0
 800b30a:	e082      	b.n	800b412 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b312:	f107 030c 	add.w	r3, r7, #12
 800b316:	4618      	mov	r0, r3
 800b318:	f000 ff34 	bl	800c184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b320:	f001 fc0a 	bl	800cb38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b324:	f000 fcca 	bl	800bcbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b328:	f001 fbd8 	bl	800cadc <vPortEnterCritical>
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b332:	b25b      	sxtb	r3, r3
 800b334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b338:	d103      	bne.n	800b342 <xQueueSemaphoreTake+0x132>
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b348:	b25b      	sxtb	r3, r3
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d103      	bne.n	800b358 <xQueueSemaphoreTake+0x148>
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b358:	f001 fbee 	bl	800cb38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b35c:	463a      	mov	r2, r7
 800b35e:	f107 030c 	add.w	r3, r7, #12
 800b362:	4611      	mov	r1, r2
 800b364:	4618      	mov	r0, r3
 800b366:	f000 ff23 	bl	800c1b0 <xTaskCheckForTimeOut>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d132      	bne.n	800b3d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b372:	f000 fa28 	bl	800b7c6 <prvIsQueueEmpty>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d026      	beq.n	800b3ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d109      	bne.n	800b398 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b384:	f001 fbaa 	bl	800cadc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 f86b 	bl	800c468 <xTaskPriorityInherit>
 800b392:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b394:	f001 fbd0 	bl	800cb38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	3324      	adds	r3, #36	; 0x24
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	4611      	mov	r1, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fe69 	bl	800c078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3a8:	f000 f9bb 	bl	800b722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3ac:	f000 fc94 	bl	800bcd8 <xTaskResumeAll>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f47f af69 	bne.w	800b28a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b3b8:	4b18      	ldr	r3, [pc, #96]	; (800b41c <xQueueSemaphoreTake+0x20c>)
 800b3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	e75f      	b.n	800b28a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3cc:	f000 f9a9 	bl	800b722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3d0:	f000 fc82 	bl	800bcd8 <xTaskResumeAll>
 800b3d4:	e759      	b.n	800b28a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3d8:	f000 f9a3 	bl	800b722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3dc:	f000 fc7c 	bl	800bcd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3e2:	f000 f9f0 	bl	800b7c6 <prvIsQueueEmpty>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f43f af4e 	beq.w	800b28a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00d      	beq.n	800b410 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b3f4:	f001 fb72 	bl	800cadc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3fa:	f000 f8ea 	bl	800b5d2 <prvGetDisinheritPriorityAfterTimeout>
 800b3fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b406:	4618      	mov	r0, r3
 800b408:	f001 f932 	bl	800c670 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b40c:	f001 fb94 	bl	800cb38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b412:	4618      	mov	r0, r3
 800b414:	3738      	adds	r7, #56	; 0x38
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08e      	sub	sp, #56	; 0x38
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <xQueueReceiveFromISR+0x2a>
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	623b      	str	r3, [r7, #32]
 800b448:	e7fe      	b.n	800b448 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d103      	bne.n	800b458 <xQueueReceiveFromISR+0x38>
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <xQueueReceiveFromISR+0x3c>
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <xQueueReceiveFromISR+0x3e>
 800b45c:	2300      	movs	r3, #0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d109      	bne.n	800b476 <xQueueReceiveFromISR+0x56>
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	e7fe      	b.n	800b474 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b476:	f001 fc0d 	bl	800cc94 <vPortValidateInterruptPriority>
	__asm volatile
 800b47a:	f3ef 8211 	mrs	r2, BASEPRI
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	61ba      	str	r2, [r7, #24]
 800b490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d02f      	beq.n	800b502 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4b0:	f000 f911 	bl	800b6d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b6:	1e5a      	subs	r2, r3, #1
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c4:	d112      	bne.n	800b4ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d016      	beq.n	800b4fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	3310      	adds	r3, #16
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fdf4 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00e      	beq.n	800b4fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00b      	beq.n	800b4fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	e007      	b.n	800b4fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	b25a      	sxtb	r2, r3
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b500:	e001      	b.n	800b506 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b502:	2300      	movs	r3, #0
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b512:	4618      	mov	r0, r3
 800b514:	3738      	adds	r7, #56	; 0x38
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d109      	bne.n	800b53c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60bb      	str	r3, [r7, #8]
 800b53a:	e7fe      	b.n	800b53a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b53c:	f001 face 	bl	800cadc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b544:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b546:	f001 faf7 	bl	800cb38 <vPortExitCritical>

	return uxReturn;
 800b54a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d109      	bne.n	800b57a <uxQueueMessagesWaitingFromISR+0x26>
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e7fe      	b.n	800b578 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b580:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b582:	4618      	mov	r0, r3
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d109      	bne.n	800b5b4 <vQueueDelete+0x26>
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60bb      	str	r3, [r7, #8]
 800b5b2:	e7fe      	b.n	800b5b2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 f935 	bl	800b824 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f001 fc65 	bl	800ce94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b5ca:	bf00      	nop
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b085      	sub	sp, #20
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d006      	beq.n	800b5f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f1c3 0307 	rsb	r3, r3, #7
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	e001      	b.n	800b5f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
	}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b086      	sub	sp, #24
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b60e:	2300      	movs	r3, #0
 800b610:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b616:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10d      	bne.n	800b63c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d14d      	bne.n	800b6c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 ff9b 	bl	800c568 <xTaskPriorityDisinherit>
 800b632:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	609a      	str	r2, [r3, #8]
 800b63a:	e043      	b.n	800b6c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d119      	bne.n	800b676 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6858      	ldr	r0, [r3, #4]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	461a      	mov	r2, r3
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	f00d fdf4 	bl	801923a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d32b      	bcc.n	800b6c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	605a      	str	r2, [r3, #4]
 800b674:	e026      	b.n	800b6c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68d8      	ldr	r0, [r3, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67e:	461a      	mov	r2, r3
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	f00d fdda 	bl	801923a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	68da      	ldr	r2, [r3, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68e:	425b      	negs	r3, r3
 800b690:	441a      	add	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d207      	bcs.n	800b6b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	689a      	ldr	r2, [r3, #8]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6aa:	425b      	negs	r3, r3
 800b6ac:	441a      	add	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d105      	bne.n	800b6c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6cc:	697b      	ldr	r3, [r7, #20]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d018      	beq.n	800b71a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	441a      	add	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d303      	bcc.n	800b70a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68d9      	ldr	r1, [r3, #12]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	461a      	mov	r2, r3
 800b714:	6838      	ldr	r0, [r7, #0]
 800b716:	f00d fd90 	bl	801923a <memcpy>
	}
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b72a:	f001 f9d7 	bl	800cadc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b734:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b736:	e011      	b.n	800b75c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d012      	beq.n	800b766 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	f000 fcbb 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b750:	f000 fd8e 	bl	800c270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	3b01      	subs	r3, #1
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	dce9      	bgt.n	800b738 <prvUnlockQueue+0x16>
 800b764:	e000      	b.n	800b768 <prvUnlockQueue+0x46>
					break;
 800b766:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	22ff      	movs	r2, #255	; 0xff
 800b76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b770:	f001 f9e2 	bl	800cb38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b774:	f001 f9b2 	bl	800cadc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b77e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b780:	e011      	b.n	800b7a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d012      	beq.n	800b7b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3310      	adds	r3, #16
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fc96 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b79a:	f000 fd69 	bl	800c270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	dce9      	bgt.n	800b782 <prvUnlockQueue+0x60>
 800b7ae:	e000      	b.n	800b7b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	22ff      	movs	r2, #255	; 0xff
 800b7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7ba:	f001 f9bd 	bl	800cb38 <vPortExitCritical>
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7ce:	f001 f985 	bl	800cadc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d102      	bne.n	800b7e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e001      	b.n	800b7e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7e4:	f001 f9a8 	bl	800cb38 <vPortExitCritical>

	return xReturn;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7fa:	f001 f96f 	bl	800cadc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b806:	429a      	cmp	r2, r3
 800b808:	d102      	bne.n	800b810 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b80a:	2301      	movs	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	e001      	b.n	800b814 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b814:	f001 f990 	bl	800cb38 <vPortExitCritical>

	return xReturn;
 800b818:	68fb      	ldr	r3, [r7, #12]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b82c:	2300      	movs	r3, #0
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	e016      	b.n	800b860 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b832:	4a10      	ldr	r2, [pc, #64]	; (800b874 <vQueueUnregisterQueue+0x50>)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4413      	add	r3, r2
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d10b      	bne.n	800b85a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b842:	4a0c      	ldr	r2, [pc, #48]	; (800b874 <vQueueUnregisterQueue+0x50>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2100      	movs	r1, #0
 800b848:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b84c:	4a09      	ldr	r2, [pc, #36]	; (800b874 <vQueueUnregisterQueue+0x50>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	4413      	add	r3, r2
 800b854:	2200      	movs	r2, #0
 800b856:	605a      	str	r2, [r3, #4]
				break;
 800b858:	e005      	b.n	800b866 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b07      	cmp	r3, #7
 800b864:	d9e5      	bls.n	800b832 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b866:	bf00      	nop
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2000d0c8 	.word	0x2000d0c8

0800b878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08e      	sub	sp, #56	; 0x38
 800b87c:	af04      	add	r7, sp, #16
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d109      	bne.n	800b8a0 <xTaskCreateStatic+0x28>
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	623b      	str	r3, [r7, #32]
 800b89e:	e7fe      	b.n	800b89e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <xTaskCreateStatic+0x42>
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	61fb      	str	r3, [r7, #28]
 800b8b8:	e7fe      	b.n	800b8b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8ba:	2354      	movs	r3, #84	; 0x54
 800b8bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b54      	cmp	r3, #84	; 0x54
 800b8c2:	d009      	beq.n	800b8d8 <xTaskCreateStatic+0x60>
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	61bb      	str	r3, [r7, #24]
 800b8d6:	e7fe      	b.n	800b8d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01e      	beq.n	800b91e <xTaskCreateStatic+0xa6>
 800b8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d01b      	beq.n	800b91e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9303      	str	r3, [sp, #12]
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	68b9      	ldr	r1, [r7, #8]
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f850 	bl	800b9b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b918:	f000 f8d4 	bl	800bac4 <prvAddNewTaskToReadyList>
 800b91c:	e001      	b.n	800b922 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b922:	697b      	ldr	r3, [r7, #20]
	}
 800b924:	4618      	mov	r0, r3
 800b926:	3728      	adds	r7, #40	; 0x28
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08c      	sub	sp, #48	; 0x30
 800b930:	af04      	add	r7, sp, #16
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	4613      	mov	r3, r2
 800b93a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4618      	mov	r0, r3
 800b942:	f001 f9e5 	bl	800cd10 <pvPortMalloc>
 800b946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00e      	beq.n	800b96c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b94e:	2054      	movs	r0, #84	; 0x54
 800b950:	f001 f9de 	bl	800cd10 <pvPortMalloc>
 800b954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	631a      	str	r2, [r3, #48]	; 0x30
 800b962:	e005      	b.n	800b970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b964:	6978      	ldr	r0, [r7, #20]
 800b966:	f001 fa95 	bl	800ce94 <vPortFree>
 800b96a:	e001      	b.n	800b970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d017      	beq.n	800b9a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	2300      	movs	r3, #0
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 f80e 	bl	800b9b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b99a:	69f8      	ldr	r0, [r7, #28]
 800b99c:	f000 f892 	bl	800bac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	e002      	b.n	800b9ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9ac:	69bb      	ldr	r3, [r7, #24]
	}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b088      	sub	sp, #32
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	60b9      	str	r1, [r7, #8]
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9ce:	440b      	add	r3, r1
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f023 0307 	bic.w	r3, r3, #7
 800b9dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <prvInitialiseNewTask+0x46>
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	e7fe      	b.n	800b9fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d01f      	beq.n	800ba42 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba02:	2300      	movs	r3, #0
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	e012      	b.n	800ba2e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	7819      	ldrb	r1, [r3, #0]
 800ba10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	3334      	adds	r3, #52	; 0x34
 800ba18:	460a      	mov	r2, r1
 800ba1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	4413      	add	r3, r2
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d006      	beq.n	800ba36 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	2b0f      	cmp	r3, #15
 800ba32:	d9e9      	bls.n	800ba08 <prvInitialiseNewTask+0x52>
 800ba34:	e000      	b.n	800ba38 <prvInitialiseNewTask+0x82>
			{
				break;
 800ba36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba40:	e003      	b.n	800ba4a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	2b06      	cmp	r3, #6
 800ba4e:	d901      	bls.n	800ba54 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba50:	2306      	movs	r3, #6
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	2200      	movs	r2, #0
 800ba64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	3304      	adds	r3, #4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fec1 	bl	800a7f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	3318      	adds	r3, #24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe febc 	bl	800a7f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	f1c3 0207 	rsb	r2, r3, #7
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	2200      	movs	r2, #0
 800ba94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	68f9      	ldr	r1, [r7, #12]
 800baa2:	69b8      	ldr	r0, [r7, #24]
 800baa4:	f000 fef6 	bl	800c894 <pxPortInitialiseStack>
 800baa8:	4602      	mov	r2, r0
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baba:	bf00      	nop
 800babc:	3720      	adds	r7, #32
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bacc:	f001 f806 	bl	800cadc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bad0:	4b2a      	ldr	r3, [pc, #168]	; (800bb7c <prvAddNewTaskToReadyList+0xb8>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	4a29      	ldr	r2, [pc, #164]	; (800bb7c <prvAddNewTaskToReadyList+0xb8>)
 800bad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bada:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <prvAddNewTaskToReadyList+0xbc>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bae2:	4a27      	ldr	r2, [pc, #156]	; (800bb80 <prvAddNewTaskToReadyList+0xbc>)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bae8:	4b24      	ldr	r3, [pc, #144]	; (800bb7c <prvAddNewTaskToReadyList+0xb8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d110      	bne.n	800bb12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800baf0:	f000 fbe2 	bl	800c2b8 <prvInitialiseTaskLists>
 800baf4:	e00d      	b.n	800bb12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baf6:	4b23      	ldr	r3, [pc, #140]	; (800bb84 <prvAddNewTaskToReadyList+0xc0>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d109      	bne.n	800bb12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bafe:	4b20      	ldr	r3, [pc, #128]	; (800bb80 <prvAddNewTaskToReadyList+0xbc>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d802      	bhi.n	800bb12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb0c:	4a1c      	ldr	r2, [pc, #112]	; (800bb80 <prvAddNewTaskToReadyList+0xbc>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb12:	4b1d      	ldr	r3, [pc, #116]	; (800bb88 <prvAddNewTaskToReadyList+0xc4>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	4a1b      	ldr	r2, [pc, #108]	; (800bb88 <prvAddNewTaskToReadyList+0xc4>)
 800bb1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	2201      	movs	r2, #1
 800bb22:	409a      	lsls	r2, r3
 800bb24:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <prvAddNewTaskToReadyList+0xc8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	4a18      	ldr	r2, [pc, #96]	; (800bb8c <prvAddNewTaskToReadyList+0xc8>)
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a15      	ldr	r2, [pc, #84]	; (800bb90 <prvAddNewTaskToReadyList+0xcc>)
 800bb3c:	441a      	add	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4619      	mov	r1, r3
 800bb44:	4610      	mov	r0, r2
 800bb46:	f7fe fe61 	bl	800a80c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb4a:	f000 fff5 	bl	800cb38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	; (800bb84 <prvAddNewTaskToReadyList+0xc0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00e      	beq.n	800bb74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb56:	4b0a      	ldr	r3, [pc, #40]	; (800bb80 <prvAddNewTaskToReadyList+0xbc>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d207      	bcs.n	800bb74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb64:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <prvAddNewTaskToReadyList+0xd0>)
 800bb66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20000414 	.word	0x20000414
 800bb80:	20000314 	.word	0x20000314
 800bb84:	20000420 	.word	0x20000420
 800bb88:	20000430 	.word	0x20000430
 800bb8c:	2000041c 	.word	0x2000041c
 800bb90:	20000318 	.word	0x20000318
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d016      	beq.n	800bbd8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbaa:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <vTaskDelay+0x60>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d009      	beq.n	800bbc6 <vTaskDelay+0x2e>
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60bb      	str	r3, [r7, #8]
 800bbc4:	e7fe      	b.n	800bbc4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bbc6:	f000 f879 	bl	800bcbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbca:	2100      	movs	r1, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fdfb 	bl	800c7c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbd2:	f000 f881 	bl	800bcd8 <xTaskResumeAll>
 800bbd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d107      	bne.n	800bbee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <vTaskDelay+0x64>)
 800bbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2000043c 	.word	0x2000043c
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08a      	sub	sp, #40	; 0x28
 800bc04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc0e:	463a      	mov	r2, r7
 800bc10:	1d39      	adds	r1, r7, #4
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f4 fdaa 	bl	8000770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	9202      	str	r2, [sp, #8]
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	2300      	movs	r3, #0
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	460a      	mov	r2, r1
 800bc2e:	491d      	ldr	r1, [pc, #116]	; (800bca4 <vTaskStartScheduler+0xa4>)
 800bc30:	481d      	ldr	r0, [pc, #116]	; (800bca8 <vTaskStartScheduler+0xa8>)
 800bc32:	f7ff fe21 	bl	800b878 <xTaskCreateStatic>
 800bc36:	4602      	mov	r2, r0
 800bc38:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <vTaskStartScheduler+0xac>)
 800bc3a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc3c:	4b1b      	ldr	r3, [pc, #108]	; (800bcac <vTaskStartScheduler+0xac>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc44:	2301      	movs	r3, #1
 800bc46:	617b      	str	r3, [r7, #20]
 800bc48:	e001      	b.n	800bc4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d115      	bne.n	800bc80 <vTaskStartScheduler+0x80>
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc66:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <vTaskStartScheduler+0xb0>)
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc6e:	4b11      	ldr	r3, [pc, #68]	; (800bcb4 <vTaskStartScheduler+0xb4>)
 800bc70:	2201      	movs	r2, #1
 800bc72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc74:	4b10      	ldr	r3, [pc, #64]	; (800bcb8 <vTaskStartScheduler+0xb8>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc7a:	f000 fe91 	bl	800c9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc7e:	e00d      	b.n	800bc9c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc86:	d109      	bne.n	800bc9c <vTaskStartScheduler+0x9c>
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	e7fe      	b.n	800bc9a <vTaskStartScheduler+0x9a>
}
 800bc9c:	bf00      	nop
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	0801a4d8 	.word	0x0801a4d8
 800bca8:	0800c289 	.word	0x0800c289
 800bcac:	20000438 	.word	0x20000438
 800bcb0:	20000434 	.word	0x20000434
 800bcb4:	20000420 	.word	0x20000420
 800bcb8:	20000418 	.word	0x20000418

0800bcbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bcc0:	4b04      	ldr	r3, [pc, #16]	; (800bcd4 <vTaskSuspendAll+0x18>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	4a03      	ldr	r2, [pc, #12]	; (800bcd4 <vTaskSuspendAll+0x18>)
 800bcc8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bcca:	bf00      	nop
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	2000043c 	.word	0x2000043c

0800bcd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bce6:	4b41      	ldr	r3, [pc, #260]	; (800bdec <xTaskResumeAll+0x114>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <xTaskResumeAll+0x2a>
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	e7fe      	b.n	800bd00 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd02:	f000 feeb 	bl	800cadc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd06:	4b39      	ldr	r3, [pc, #228]	; (800bdec <xTaskResumeAll+0x114>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	4a37      	ldr	r2, [pc, #220]	; (800bdec <xTaskResumeAll+0x114>)
 800bd0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd10:	4b36      	ldr	r3, [pc, #216]	; (800bdec <xTaskResumeAll+0x114>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d161      	bne.n	800bddc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd18:	4b35      	ldr	r3, [pc, #212]	; (800bdf0 <xTaskResumeAll+0x118>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d05d      	beq.n	800bddc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd20:	e02e      	b.n	800bd80 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd22:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <xTaskResumeAll+0x11c>)
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3318      	adds	r3, #24
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fdc9 	bl	800a8c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fdc4 	bl	800a8c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	2201      	movs	r2, #1
 800bd44:	409a      	lsls	r2, r3
 800bd46:	4b2c      	ldr	r3, [pc, #176]	; (800bdf8 <xTaskResumeAll+0x120>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	4a2a      	ldr	r2, [pc, #168]	; (800bdf8 <xTaskResumeAll+0x120>)
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4a27      	ldr	r2, [pc, #156]	; (800bdfc <xTaskResumeAll+0x124>)
 800bd5e:	441a      	add	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3304      	adds	r3, #4
 800bd64:	4619      	mov	r1, r3
 800bd66:	4610      	mov	r0, r2
 800bd68:	f7fe fd50 	bl	800a80c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4b23      	ldr	r3, [pc, #140]	; (800be00 <xTaskResumeAll+0x128>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <xTaskResumeAll+0x12c>)
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd80:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <xTaskResumeAll+0x11c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1cc      	bne.n	800bd22 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd8e:	f000 fb2d 	bl	800c3ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd92:	4b1d      	ldr	r3, [pc, #116]	; (800be08 <xTaskResumeAll+0x130>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd9e:	f000 f859 	bl	800be54 <xTaskIncrementTick>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800bda8:	4b16      	ldr	r3, [pc, #88]	; (800be04 <xTaskResumeAll+0x12c>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1f1      	bne.n	800bd9e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800bdba:	4b13      	ldr	r3, [pc, #76]	; (800be08 <xTaskResumeAll+0x130>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdc0:	4b10      	ldr	r3, [pc, #64]	; (800be04 <xTaskResumeAll+0x12c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdcc:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <xTaskResumeAll+0x134>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bddc:	f000 feac 	bl	800cb38 <vPortExitCritical>

	return xAlreadyYielded;
 800bde0:	68bb      	ldr	r3, [r7, #8]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	2000043c 	.word	0x2000043c
 800bdf0:	20000414 	.word	0x20000414
 800bdf4:	200003d4 	.word	0x200003d4
 800bdf8:	2000041c 	.word	0x2000041c
 800bdfc:	20000318 	.word	0x20000318
 800be00:	20000314 	.word	0x20000314
 800be04:	20000428 	.word	0x20000428
 800be08:	20000424 	.word	0x20000424
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be16:	4b05      	ldr	r3, [pc, #20]	; (800be2c <xTaskGetTickCount+0x1c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be1c:	687b      	ldr	r3, [r7, #4]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	20000418 	.word	0x20000418

0800be30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be36:	f000 ff2d 	bl	800cc94 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be3a:	2300      	movs	r3, #0
 800be3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be3e:	4b04      	ldr	r3, [pc, #16]	; (800be50 <xTaskGetTickCountFromISR+0x20>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be44:	683b      	ldr	r3, [r7, #0]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20000418 	.word	0x20000418

0800be54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be5e:	4b4e      	ldr	r3, [pc, #312]	; (800bf98 <xTaskIncrementTick+0x144>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f040 8087 	bne.w	800bf76 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be68:	4b4c      	ldr	r3, [pc, #304]	; (800bf9c <xTaskIncrementTick+0x148>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be70:	4a4a      	ldr	r2, [pc, #296]	; (800bf9c <xTaskIncrementTick+0x148>)
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d11f      	bne.n	800bebc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800be7c:	4b48      	ldr	r3, [pc, #288]	; (800bfa0 <xTaskIncrementTick+0x14c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d009      	beq.n	800be9a <xTaskIncrementTick+0x46>
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	e7fe      	b.n	800be98 <xTaskIncrementTick+0x44>
 800be9a:	4b41      	ldr	r3, [pc, #260]	; (800bfa0 <xTaskIncrementTick+0x14c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	4b40      	ldr	r3, [pc, #256]	; (800bfa4 <xTaskIncrementTick+0x150>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a3e      	ldr	r2, [pc, #248]	; (800bfa0 <xTaskIncrementTick+0x14c>)
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	4a3e      	ldr	r2, [pc, #248]	; (800bfa4 <xTaskIncrementTick+0x150>)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6013      	str	r3, [r2, #0]
 800beae:	4b3e      	ldr	r3, [pc, #248]	; (800bfa8 <xTaskIncrementTick+0x154>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a3c      	ldr	r2, [pc, #240]	; (800bfa8 <xTaskIncrementTick+0x154>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	f000 fa98 	bl	800c3ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bebc:	4b3b      	ldr	r3, [pc, #236]	; (800bfac <xTaskIncrementTick+0x158>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d348      	bcc.n	800bf58 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec6:	4b36      	ldr	r3, [pc, #216]	; (800bfa0 <xTaskIncrementTick+0x14c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d104      	bne.n	800beda <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bed0:	4b36      	ldr	r3, [pc, #216]	; (800bfac <xTaskIncrementTick+0x158>)
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295
 800bed6:	601a      	str	r2, [r3, #0]
					break;
 800bed8:	e03e      	b.n	800bf58 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beda:	4b31      	ldr	r3, [pc, #196]	; (800bfa0 <xTaskIncrementTick+0x14c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d203      	bcs.n	800befa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bef2:	4a2e      	ldr	r2, [pc, #184]	; (800bfac <xTaskIncrementTick+0x158>)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bef8:	e02e      	b.n	800bf58 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	3304      	adds	r3, #4
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe fce1 	bl	800a8c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d004      	beq.n	800bf16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3318      	adds	r3, #24
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe fcd8 	bl	800a8c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	409a      	lsls	r2, r3
 800bf1e:	4b24      	ldr	r3, [pc, #144]	; (800bfb0 <xTaskIncrementTick+0x15c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	4a22      	ldr	r2, [pc, #136]	; (800bfb0 <xTaskIncrementTick+0x15c>)
 800bf26:	6013      	str	r3, [r2, #0]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4a1f      	ldr	r2, [pc, #124]	; (800bfb4 <xTaskIncrementTick+0x160>)
 800bf36:	441a      	add	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	f7fe fc64 	bl	800a80c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf48:	4b1b      	ldr	r3, [pc, #108]	; (800bfb8 <xTaskIncrementTick+0x164>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d3b9      	bcc.n	800bec6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bf52:	2301      	movs	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf56:	e7b6      	b.n	800bec6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf58:	4b17      	ldr	r3, [pc, #92]	; (800bfb8 <xTaskIncrementTick+0x164>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	4915      	ldr	r1, [pc, #84]	; (800bfb4 <xTaskIncrementTick+0x160>)
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d907      	bls.n	800bf80 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	e004      	b.n	800bf80 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf76:	4b11      	ldr	r3, [pc, #68]	; (800bfbc <xTaskIncrementTick+0x168>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	4a0f      	ldr	r2, [pc, #60]	; (800bfbc <xTaskIncrementTick+0x168>)
 800bf7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <xTaskIncrementTick+0x16c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf8c:	697b      	ldr	r3, [r7, #20]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3718      	adds	r7, #24
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	2000043c 	.word	0x2000043c
 800bf9c:	20000418 	.word	0x20000418
 800bfa0:	200003cc 	.word	0x200003cc
 800bfa4:	200003d0 	.word	0x200003d0
 800bfa8:	2000042c 	.word	0x2000042c
 800bfac:	20000434 	.word	0x20000434
 800bfb0:	2000041c 	.word	0x2000041c
 800bfb4:	20000318 	.word	0x20000318
 800bfb8:	20000314 	.word	0x20000314
 800bfbc:	20000424 	.word	0x20000424
 800bfc0:	20000428 	.word	0x20000428

0800bfc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfca:	4b26      	ldr	r3, [pc, #152]	; (800c064 <vTaskSwitchContext+0xa0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfd2:	4b25      	ldr	r3, [pc, #148]	; (800c068 <vTaskSwitchContext+0xa4>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfd8:	e03e      	b.n	800c058 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bfda:	4b23      	ldr	r3, [pc, #140]	; (800c068 <vTaskSwitchContext+0xa4>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe0:	4b22      	ldr	r3, [pc, #136]	; (800c06c <vTaskSwitchContext+0xa8>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	fab3 f383 	clz	r3, r3
 800bfec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	f1c3 031f 	rsb	r3, r3, #31
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	491e      	ldr	r1, [pc, #120]	; (800c070 <vTaskSwitchContext+0xac>)
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <vTaskSwitchContext+0x5a>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	e7fe      	b.n	800c01c <vTaskSwitchContext+0x58>
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4a11      	ldr	r2, [pc, #68]	; (800c070 <vTaskSwitchContext+0xac>)
 800c02a:	4413      	add	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	605a      	str	r2, [r3, #4]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	3308      	adds	r3, #8
 800c040:	429a      	cmp	r2, r3
 800c042:	d104      	bne.n	800c04e <vTaskSwitchContext+0x8a>
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	605a      	str	r2, [r3, #4]
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	4a07      	ldr	r2, [pc, #28]	; (800c074 <vTaskSwitchContext+0xb0>)
 800c056:	6013      	str	r3, [r2, #0]
}
 800c058:	bf00      	nop
 800c05a:	371c      	adds	r7, #28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	2000043c 	.word	0x2000043c
 800c068:	20000428 	.word	0x20000428
 800c06c:	2000041c 	.word	0x2000041c
 800c070:	20000318 	.word	0x20000318
 800c074:	20000314 	.word	0x20000314

0800c078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d109      	bne.n	800c09c <vTaskPlaceOnEventList+0x24>
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	60fb      	str	r3, [r7, #12]
 800c09a:	e7fe      	b.n	800c09a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c09c:	4b07      	ldr	r3, [pc, #28]	; (800c0bc <vTaskPlaceOnEventList+0x44>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3318      	adds	r3, #24
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7fe fbd5 	bl	800a854 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	6838      	ldr	r0, [r7, #0]
 800c0ae:	f000 fb8b 	bl	800c7c8 <prvAddCurrentTaskToDelayedList>
}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000314 	.word	0x20000314

0800c0c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <xTaskRemoveFromEventList+0x2a>
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e7fe      	b.n	800c0e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	3318      	adds	r3, #24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fbe9 	bl	800a8c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f4:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <xTaskRemoveFromEventList+0xac>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d11c      	bne.n	800c136 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe fbe0 	bl	800a8c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	2201      	movs	r2, #1
 800c10c:	409a      	lsls	r2, r3
 800c10e:	4b18      	ldr	r3, [pc, #96]	; (800c170 <xTaskRemoveFromEventList+0xb0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4313      	orrs	r3, r2
 800c114:	4a16      	ldr	r2, [pc, #88]	; (800c170 <xTaskRemoveFromEventList+0xb0>)
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4613      	mov	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4a13      	ldr	r2, [pc, #76]	; (800c174 <xTaskRemoveFromEventList+0xb4>)
 800c126:	441a      	add	r2, r3
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4619      	mov	r1, r3
 800c12e:	4610      	mov	r0, r2
 800c130:	f7fe fb6c 	bl	800a80c <vListInsertEnd>
 800c134:	e005      	b.n	800c142 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3318      	adds	r3, #24
 800c13a:	4619      	mov	r1, r3
 800c13c:	480e      	ldr	r0, [pc, #56]	; (800c178 <xTaskRemoveFromEventList+0xb8>)
 800c13e:	f7fe fb65 	bl	800a80c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c146:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <xTaskRemoveFromEventList+0xbc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d905      	bls.n	800c15c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c150:	2301      	movs	r3, #1
 800c152:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c154:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <xTaskRemoveFromEventList+0xc0>)
 800c156:	2201      	movs	r2, #1
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	e001      	b.n	800c160 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c15c:	2300      	movs	r3, #0
 800c15e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c160:	697b      	ldr	r3, [r7, #20]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2000043c 	.word	0x2000043c
 800c170:	2000041c 	.word	0x2000041c
 800c174:	20000318 	.word	0x20000318
 800c178:	200003d4 	.word	0x200003d4
 800c17c:	20000314 	.word	0x20000314
 800c180:	20000428 	.word	0x20000428

0800c184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <vTaskInternalSetTimeOutState+0x24>)
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <vTaskInternalSetTimeOutState+0x28>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	2000042c 	.word	0x2000042c
 800c1ac:	20000418 	.word	0x20000418

0800c1b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d109      	bne.n	800c1d4 <xTaskCheckForTimeOut+0x24>
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	e7fe      	b.n	800c1d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <xTaskCheckForTimeOut+0x3e>
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	e7fe      	b.n	800c1ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c1ee:	f000 fc75 	bl	800cadc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1f2:	4b1d      	ldr	r3, [pc, #116]	; (800c268 <xTaskCheckForTimeOut+0xb8>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	69ba      	ldr	r2, [r7, #24]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d102      	bne.n	800c212 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
 800c210:	e023      	b.n	800c25a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b15      	ldr	r3, [pc, #84]	; (800c26c <xTaskCheckForTimeOut+0xbc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d007      	beq.n	800c22e <xTaskCheckForTimeOut+0x7e>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	69ba      	ldr	r2, [r7, #24]
 800c224:	429a      	cmp	r2, r3
 800c226:	d302      	bcc.n	800c22e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c228:	2301      	movs	r3, #1
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	e015      	b.n	800c25a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	429a      	cmp	r2, r3
 800c236:	d20b      	bcs.n	800c250 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff ff9d 	bl	800c184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	e004      	b.n	800c25a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c256:	2301      	movs	r3, #1
 800c258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c25a:	f000 fc6d 	bl	800cb38 <vPortExitCritical>

	return xReturn;
 800c25e:	69fb      	ldr	r3, [r7, #28]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3720      	adds	r7, #32
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20000418 	.word	0x20000418
 800c26c:	2000042c 	.word	0x2000042c

0800c270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c274:	4b03      	ldr	r3, [pc, #12]	; (800c284 <vTaskMissedYield+0x14>)
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
}
 800c27a:	bf00      	nop
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20000428 	.word	0x20000428

0800c288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c290:	f000 f852 	bl	800c338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c294:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <prvIdleTask+0x28>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d9f9      	bls.n	800c290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <prvIdleTask+0x2c>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2ac:	e7f0      	b.n	800c290 <prvIdleTask+0x8>
 800c2ae:	bf00      	nop
 800c2b0:	20000318 	.word	0x20000318
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2be:	2300      	movs	r3, #0
 800c2c0:	607b      	str	r3, [r7, #4]
 800c2c2:	e00c      	b.n	800c2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4a12      	ldr	r2, [pc, #72]	; (800c318 <prvInitialiseTaskLists+0x60>)
 800c2d0:	4413      	add	r3, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fa6d 	bl	800a7b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b06      	cmp	r3, #6
 800c2e2:	d9ef      	bls.n	800c2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2e4:	480d      	ldr	r0, [pc, #52]	; (800c31c <prvInitialiseTaskLists+0x64>)
 800c2e6:	f7fe fa64 	bl	800a7b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2ea:	480d      	ldr	r0, [pc, #52]	; (800c320 <prvInitialiseTaskLists+0x68>)
 800c2ec:	f7fe fa61 	bl	800a7b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2f0:	480c      	ldr	r0, [pc, #48]	; (800c324 <prvInitialiseTaskLists+0x6c>)
 800c2f2:	f7fe fa5e 	bl	800a7b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2f6:	480c      	ldr	r0, [pc, #48]	; (800c328 <prvInitialiseTaskLists+0x70>)
 800c2f8:	f7fe fa5b 	bl	800a7b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2fc:	480b      	ldr	r0, [pc, #44]	; (800c32c <prvInitialiseTaskLists+0x74>)
 800c2fe:	f7fe fa58 	bl	800a7b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c302:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <prvInitialiseTaskLists+0x78>)
 800c304:	4a05      	ldr	r2, [pc, #20]	; (800c31c <prvInitialiseTaskLists+0x64>)
 800c306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <prvInitialiseTaskLists+0x7c>)
 800c30a:	4a05      	ldr	r2, [pc, #20]	; (800c320 <prvInitialiseTaskLists+0x68>)
 800c30c:	601a      	str	r2, [r3, #0]
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20000318 	.word	0x20000318
 800c31c:	200003a4 	.word	0x200003a4
 800c320:	200003b8 	.word	0x200003b8
 800c324:	200003d4 	.word	0x200003d4
 800c328:	200003e8 	.word	0x200003e8
 800c32c:	20000400 	.word	0x20000400
 800c330:	200003cc 	.word	0x200003cc
 800c334:	200003d0 	.word	0x200003d0

0800c338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c33e:	e019      	b.n	800c374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c340:	f000 fbcc 	bl	800cadc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c344:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <prvCheckTasksWaitingTermination+0x4c>)
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3304      	adds	r3, #4
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fab8 	bl	800a8c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <prvCheckTasksWaitingTermination+0x50>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	4a0a      	ldr	r2, [pc, #40]	; (800c388 <prvCheckTasksWaitingTermination+0x50>)
 800c35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <prvCheckTasksWaitingTermination+0x54>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3b01      	subs	r3, #1
 800c366:	4a09      	ldr	r2, [pc, #36]	; (800c38c <prvCheckTasksWaitingTermination+0x54>)
 800c368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c36a:	f000 fbe5 	bl	800cb38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f80e 	bl	800c390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <prvCheckTasksWaitingTermination+0x54>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e1      	bne.n	800c340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	200003e8 	.word	0x200003e8
 800c388:	20000414 	.word	0x20000414
 800c38c:	200003fc 	.word	0x200003fc

0800c390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d108      	bne.n	800c3b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fd74 	bl	800ce94 <vPortFree>
				vPortFree( pxTCB );
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fd71 	bl	800ce94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3b2:	e017      	b.n	800c3e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d103      	bne.n	800c3c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fd68 	bl	800ce94 <vPortFree>
	}
 800c3c4:	e00e      	b.n	800c3e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d009      	beq.n	800c3e4 <prvDeleteTCB+0x54>
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	e7fe      	b.n	800c3e2 <prvDeleteTCB+0x52>
	}
 800c3e4:	bf00      	nop
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <prvResetNextTaskUnblockTime+0x38>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d104      	bne.n	800c406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <prvResetNextTaskUnblockTime+0x3c>)
 800c3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c404:	e008      	b.n	800c418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c406:	4b07      	ldr	r3, [pc, #28]	; (800c424 <prvResetNextTaskUnblockTime+0x38>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	4a04      	ldr	r2, [pc, #16]	; (800c428 <prvResetNextTaskUnblockTime+0x3c>)
 800c416:	6013      	str	r3, [r2, #0]
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	200003cc 	.word	0x200003cc
 800c428:	20000434 	.word	0x20000434

0800c42c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c432:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <xTaskGetSchedulerState+0x34>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c43a:	2301      	movs	r3, #1
 800c43c:	607b      	str	r3, [r7, #4]
 800c43e:	e008      	b.n	800c452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c440:	4b08      	ldr	r3, [pc, #32]	; (800c464 <xTaskGetSchedulerState+0x38>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d102      	bne.n	800c44e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c448:	2302      	movs	r3, #2
 800c44a:	607b      	str	r3, [r7, #4]
 800c44c:	e001      	b.n	800c452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c44e:	2300      	movs	r3, #0
 800c450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c452:	687b      	ldr	r3, [r7, #4]
	}
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	20000420 	.word	0x20000420
 800c464:	2000043c 	.word	0x2000043c

0800c468 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d069      	beq.n	800c552 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c482:	4b36      	ldr	r3, [pc, #216]	; (800c55c <xTaskPriorityInherit+0xf4>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	429a      	cmp	r2, r3
 800c48a:	d259      	bcs.n	800c540 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	db06      	blt.n	800c4a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c494:	4b31      	ldr	r3, [pc, #196]	; (800c55c <xTaskPriorityInherit+0xf4>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49a:	f1c3 0207 	rsb	r2, r3, #7
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6959      	ldr	r1, [r3, #20]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4a2b      	ldr	r2, [pc, #172]	; (800c560 <xTaskPriorityInherit+0xf8>)
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d13a      	bne.n	800c530 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fa01 	bl	800a8c6 <uxListRemove>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d115      	bne.n	800c4f6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	4924      	ldr	r1, [pc, #144]	; (800c560 <xTaskPriorityInherit+0xf8>)
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <xTaskPriorityInherit+0x8e>
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ea:	43da      	mvns	r2, r3
 800c4ec:	4b1d      	ldr	r3, [pc, #116]	; (800c564 <xTaskPriorityInherit+0xfc>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	4a1c      	ldr	r2, [pc, #112]	; (800c564 <xTaskPriorityInherit+0xfc>)
 800c4f4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4f6:	4b19      	ldr	r3, [pc, #100]	; (800c55c <xTaskPriorityInherit+0xf4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	2201      	movs	r2, #1
 800c506:	409a      	lsls	r2, r3
 800c508:	4b16      	ldr	r3, [pc, #88]	; (800c564 <xTaskPriorityInherit+0xfc>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	4a15      	ldr	r2, [pc, #84]	; (800c564 <xTaskPriorityInherit+0xfc>)
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c516:	4613      	mov	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4a10      	ldr	r2, [pc, #64]	; (800c560 <xTaskPriorityInherit+0xf8>)
 800c520:	441a      	add	r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	3304      	adds	r3, #4
 800c526:	4619      	mov	r1, r3
 800c528:	4610      	mov	r0, r2
 800c52a:	f7fe f96f 	bl	800a80c <vListInsertEnd>
 800c52e:	e004      	b.n	800c53a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <xTaskPriorityInherit+0xf4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c53a:	2301      	movs	r3, #1
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e008      	b.n	800c552 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c544:	4b05      	ldr	r3, [pc, #20]	; (800c55c <xTaskPriorityInherit+0xf4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d201      	bcs.n	800c552 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c54e:	2301      	movs	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c552:	68fb      	ldr	r3, [r7, #12]
	}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20000314 	.word	0x20000314
 800c560:	20000318 	.word	0x20000318
 800c564:	2000041c 	.word	0x2000041c

0800c568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d06c      	beq.n	800c658 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c57e:	4b39      	ldr	r3, [pc, #228]	; (800c664 <xTaskPriorityDisinherit+0xfc>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	429a      	cmp	r2, r3
 800c586:	d009      	beq.n	800c59c <xTaskPriorityDisinherit+0x34>
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e7fe      	b.n	800c59a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <xTaskPriorityDisinherit+0x50>
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	60bb      	str	r3, [r7, #8]
 800c5b6:	e7fe      	b.n	800c5b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5bc:	1e5a      	subs	r2, r3, #1
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d044      	beq.n	800c658 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d140      	bne.n	800c658 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe f973 	bl	800a8c6 <uxListRemove>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d115      	bne.n	800c612 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ea:	491f      	ldr	r1, [pc, #124]	; (800c668 <xTaskPriorityDisinherit+0x100>)
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	440b      	add	r3, r1
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <xTaskPriorityDisinherit+0xaa>
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	2201      	movs	r2, #1
 800c602:	fa02 f303 	lsl.w	r3, r2, r3
 800c606:	43da      	mvns	r2, r3
 800c608:	4b18      	ldr	r3, [pc, #96]	; (800c66c <xTaskPriorityDisinherit+0x104>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4013      	ands	r3, r2
 800c60e:	4a17      	ldr	r2, [pc, #92]	; (800c66c <xTaskPriorityDisinherit+0x104>)
 800c610:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61e:	f1c3 0207 	rsb	r2, r3, #7
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	2201      	movs	r2, #1
 800c62c:	409a      	lsls	r2, r3
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <xTaskPriorityDisinherit+0x104>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4313      	orrs	r3, r2
 800c634:	4a0d      	ldr	r2, [pc, #52]	; (800c66c <xTaskPriorityDisinherit+0x104>)
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	4613      	mov	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4a08      	ldr	r2, [pc, #32]	; (800c668 <xTaskPriorityDisinherit+0x100>)
 800c646:	441a      	add	r2, r3
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f7fe f8dc 	bl	800a80c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c654:	2301      	movs	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c658:	697b      	ldr	r3, [r7, #20]
	}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20000314 	.word	0x20000314
 800c668:	20000318 	.word	0x20000318
 800c66c:	2000041c 	.word	0x2000041c

0800c670 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c67e:	2301      	movs	r3, #1
 800c680:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8081 	beq.w	800c78c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d109      	bne.n	800c6a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e7fe      	b.n	800c6a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d902      	bls.n	800c6b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	e002      	b.n	800c6bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d062      	beq.n	800c78c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d15d      	bne.n	800c78c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6d0:	4b30      	ldr	r3, [pc, #192]	; (800c794 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d109      	bne.n	800c6ee <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	60bb      	str	r3, [r7, #8]
 800c6ec:	e7fe      	b.n	800c6ec <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	69fa      	ldr	r2, [r7, #28]
 800c6f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	db04      	blt.n	800c70c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	f1c3 0207 	rsb	r2, r3, #7
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	6959      	ldr	r1, [r3, #20]
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4a1f      	ldr	r2, [pc, #124]	; (800c798 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c71c:	4413      	add	r3, r2
 800c71e:	4299      	cmp	r1, r3
 800c720:	d134      	bne.n	800c78c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	3304      	adds	r3, #4
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe f8cd 	bl	800a8c6 <uxListRemove>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d115      	bne.n	800c75e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c736:	4918      	ldr	r1, [pc, #96]	; (800c798 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	2201      	movs	r2, #1
 800c74e:	fa02 f303 	lsl.w	r3, r2, r3
 800c752:	43da      	mvns	r2, r3
 800c754:	4b11      	ldr	r3, [pc, #68]	; (800c79c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4013      	ands	r3, r2
 800c75a:	4a10      	ldr	r2, [pc, #64]	; (800c79c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c75c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c762:	2201      	movs	r2, #1
 800c764:	409a      	lsls	r2, r3
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	4a0b      	ldr	r2, [pc, #44]	; (800c79c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4a06      	ldr	r2, [pc, #24]	; (800c798 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c77e:	441a      	add	r2, r3
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	3304      	adds	r3, #4
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7fe f840 	bl	800a80c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c78c:	bf00      	nop
 800c78e:	3720      	adds	r7, #32
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	20000314 	.word	0x20000314
 800c798:	20000318 	.word	0x20000318
 800c79c:	2000041c 	.word	0x2000041c

0800c7a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c7a0:	b480      	push	{r7}
 800c7a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7a4:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d004      	beq.n	800c7b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7ac:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c7b6:	4b03      	ldr	r3, [pc, #12]	; (800c7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
	}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	20000314 	.word	0x20000314

0800c7c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7d2:	4b29      	ldr	r3, [pc, #164]	; (800c878 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7d8:	4b28      	ldr	r3, [pc, #160]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fe f871 	bl	800a8c6 <uxListRemove>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10b      	bne.n	800c802 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7ea:	4b24      	ldr	r3, [pc, #144]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f6:	43da      	mvns	r2, r3
 800c7f8:	4b21      	ldr	r3, [pc, #132]	; (800c880 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	4a20      	ldr	r2, [pc, #128]	; (800c880 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c800:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d10a      	bne.n	800c820 <prvAddCurrentTaskToDelayedList+0x58>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d007      	beq.n	800c820 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c810:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3304      	adds	r3, #4
 800c816:	4619      	mov	r1, r3
 800c818:	481a      	ldr	r0, [pc, #104]	; (800c884 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c81a:	f7fd fff7 	bl	800a80c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c81e:	e026      	b.n	800c86e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4413      	add	r3, r2
 800c826:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c828:	4b14      	ldr	r3, [pc, #80]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	429a      	cmp	r2, r3
 800c836:	d209      	bcs.n	800c84c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c838:	4b13      	ldr	r3, [pc, #76]	; (800c888 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3304      	adds	r3, #4
 800c842:	4619      	mov	r1, r3
 800c844:	4610      	mov	r0, r2
 800c846:	f7fe f805 	bl	800a854 <vListInsert>
}
 800c84a:	e010      	b.n	800c86e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3304      	adds	r3, #4
 800c856:	4619      	mov	r1, r3
 800c858:	4610      	mov	r0, r2
 800c85a:	f7fd fffb 	bl	800a854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	429a      	cmp	r2, r3
 800c866:	d202      	bcs.n	800c86e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c868:	4a09      	ldr	r2, [pc, #36]	; (800c890 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6013      	str	r3, [r2, #0]
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20000418 	.word	0x20000418
 800c87c:	20000314 	.word	0x20000314
 800c880:	2000041c 	.word	0x2000041c
 800c884:	20000400 	.word	0x20000400
 800c888:	200003d0 	.word	0x200003d0
 800c88c:	200003cc 	.word	0x200003cc
 800c890:	20000434 	.word	0x20000434

0800c894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3b04      	subs	r3, #4
 800c8a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3b04      	subs	r3, #4
 800c8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f023 0201 	bic.w	r2, r3, #1
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3b04      	subs	r3, #4
 800c8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8c4:	4a0c      	ldr	r2, [pc, #48]	; (800c8f8 <pxPortInitialiseStack+0x64>)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3b14      	subs	r3, #20
 800c8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3b04      	subs	r3, #4
 800c8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f06f 0202 	mvn.w	r2, #2
 800c8e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	3b20      	subs	r3, #32
 800c8e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	0800c8fd 	.word	0x0800c8fd

0800c8fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <prvTaskExitError+0x50>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90e:	d009      	beq.n	800c924 <prvTaskExitError+0x28>
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	e7fe      	b.n	800c922 <prvTaskExitError+0x26>
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c936:	bf00      	nop
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0fc      	beq.n	800c938 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000024 	.word	0x20000024

0800c950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c950:	4b07      	ldr	r3, [pc, #28]	; (800c970 <pxCurrentTCBConst2>)
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	6808      	ldr	r0, [r1, #0]
 800c956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	f380 8809 	msr	PSP, r0
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8811 	msr	BASEPRI, r0
 800c96a:	4770      	bx	lr
 800c96c:	f3af 8000 	nop.w

0800c970 <pxCurrentTCBConst2>:
 800c970:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c978:	4808      	ldr	r0, [pc, #32]	; (800c99c <prvPortStartFirstTask+0x24>)
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	6800      	ldr	r0, [r0, #0]
 800c97e:	f380 8808 	msr	MSP, r0
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8814 	msr	CONTROL, r0
 800c98a:	b662      	cpsie	i
 800c98c:	b661      	cpsie	f
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	df00      	svc	0
 800c998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c99a:	bf00      	nop
 800c99c:	e000ed08 	.word	0xe000ed08

0800c9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9a6:	4b44      	ldr	r3, [pc, #272]	; (800cab8 <xPortStartScheduler+0x118>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a44      	ldr	r2, [pc, #272]	; (800cabc <xPortStartScheduler+0x11c>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d109      	bne.n	800c9c4 <xPortStartScheduler+0x24>
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	613b      	str	r3, [r7, #16]
 800c9c2:	e7fe      	b.n	800c9c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9c4:	4b3c      	ldr	r3, [pc, #240]	; (800cab8 <xPortStartScheduler+0x118>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a3d      	ldr	r2, [pc, #244]	; (800cac0 <xPortStartScheduler+0x120>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d109      	bne.n	800c9e2 <xPortStartScheduler+0x42>
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	e7fe      	b.n	800c9e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9e2:	4b38      	ldr	r3, [pc, #224]	; (800cac4 <xPortStartScheduler+0x124>)
 800c9e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	22ff      	movs	r2, #255	; 0xff
 800c9f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	4b30      	ldr	r3, [pc, #192]	; (800cac8 <xPortStartScheduler+0x128>)
 800ca08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca0a:	4b30      	ldr	r3, [pc, #192]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca0c:	2207      	movs	r2, #7
 800ca0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca10:	e009      	b.n	800ca26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ca12:	4b2e      	ldr	r3, [pc, #184]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	4a2c      	ldr	r2, [pc, #176]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2e:	2b80      	cmp	r3, #128	; 0x80
 800ca30:	d0ef      	beq.n	800ca12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca32:	4b26      	ldr	r3, [pc, #152]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f1c3 0307 	rsb	r3, r3, #7
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d009      	beq.n	800ca52 <xPortStartScheduler+0xb2>
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	60bb      	str	r3, [r7, #8]
 800ca50:	e7fe      	b.n	800ca50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca52:	4b1e      	ldr	r3, [pc, #120]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	4a1c      	ldr	r2, [pc, #112]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca5c:	4b1b      	ldr	r3, [pc, #108]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca64:	4a19      	ldr	r2, [pc, #100]	; (800cacc <xPortStartScheduler+0x12c>)
 800ca66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca70:	4b17      	ldr	r3, [pc, #92]	; (800cad0 <xPortStartScheduler+0x130>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a16      	ldr	r2, [pc, #88]	; (800cad0 <xPortStartScheduler+0x130>)
 800ca76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca7c:	4b14      	ldr	r3, [pc, #80]	; (800cad0 <xPortStartScheduler+0x130>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a13      	ldr	r2, [pc, #76]	; (800cad0 <xPortStartScheduler+0x130>)
 800ca82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca88:	f000 f8d6 	bl	800cc38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca8c:	4b11      	ldr	r3, [pc, #68]	; (800cad4 <xPortStartScheduler+0x134>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca92:	f000 f8f5 	bl	800cc80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca96:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <xPortStartScheduler+0x138>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a0f      	ldr	r2, [pc, #60]	; (800cad8 <xPortStartScheduler+0x138>)
 800ca9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800caa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800caa2:	f7ff ff69 	bl	800c978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caa6:	f7ff fa8d 	bl	800bfc4 <vTaskSwitchContext>
	prvTaskExitError();
 800caaa:	f7ff ff27 	bl	800c8fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	e000ed00 	.word	0xe000ed00
 800cabc:	410fc271 	.word	0x410fc271
 800cac0:	410fc270 	.word	0x410fc270
 800cac4:	e000e400 	.word	0xe000e400
 800cac8:	20000440 	.word	0x20000440
 800cacc:	20000444 	.word	0x20000444
 800cad0:	e000ed20 	.word	0xe000ed20
 800cad4:	20000024 	.word	0x20000024
 800cad8:	e000ef34 	.word	0xe000ef34

0800cadc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caf4:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <vPortEnterCritical+0x54>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3301      	adds	r3, #1
 800cafa:	4a0d      	ldr	r2, [pc, #52]	; (800cb30 <vPortEnterCritical+0x54>)
 800cafc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <vPortEnterCritical+0x54>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d10e      	bne.n	800cb24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb06:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <vPortEnterCritical+0x58>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d009      	beq.n	800cb24 <vPortEnterCritical+0x48>
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	603b      	str	r3, [r7, #0]
 800cb22:	e7fe      	b.n	800cb22 <vPortEnterCritical+0x46>
	}
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	20000024 	.word	0x20000024
 800cb34:	e000ed04 	.word	0xe000ed04

0800cb38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb3e:	4b11      	ldr	r3, [pc, #68]	; (800cb84 <vPortExitCritical+0x4c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d109      	bne.n	800cb5a <vPortExitCritical+0x22>
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	e7fe      	b.n	800cb58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <vPortExitCritical+0x4c>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	4a08      	ldr	r2, [pc, #32]	; (800cb84 <vPortExitCritical+0x4c>)
 800cb62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb64:	4b07      	ldr	r3, [pc, #28]	; (800cb84 <vPortExitCritical+0x4c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d104      	bne.n	800cb76 <vPortExitCritical+0x3e>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	20000024 	.word	0x20000024
	...

0800cb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb90:	f3ef 8009 	mrs	r0, PSP
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <pxCurrentTCBConst>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	f01e 0f10 	tst.w	lr, #16
 800cba0:	bf08      	it	eq
 800cba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	6010      	str	r0, [r2, #0]
 800cbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbb4:	f380 8811 	msr	BASEPRI, r0
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f7ff fa00 	bl	800bfc4 <vTaskSwitchContext>
 800cbc4:	f04f 0000 	mov.w	r0, #0
 800cbc8:	f380 8811 	msr	BASEPRI, r0
 800cbcc:	bc09      	pop	{r0, r3}
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	6808      	ldr	r0, [r1, #0]
 800cbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd6:	f01e 0f10 	tst.w	lr, #16
 800cbda:	bf08      	it	eq
 800cbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbe0:	f380 8809 	msr	PSP, r0
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc10:	f7ff f920 	bl	800be54 <xTaskIncrementTick>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc1a:	4b06      	ldr	r3, [pc, #24]	; (800cc34 <SysTick_Handler+0x3c>)
 800cc1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	2300      	movs	r3, #0
 800cc24:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc3c:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <vPortSetupTimerInterrupt+0x34>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <vPortSetupTimerInterrupt+0x38>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc48:	4b0a      	ldr	r3, [pc, #40]	; (800cc74 <vPortSetupTimerInterrupt+0x3c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a0a      	ldr	r2, [pc, #40]	; (800cc78 <vPortSetupTimerInterrupt+0x40>)
 800cc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc52:	099b      	lsrs	r3, r3, #6
 800cc54:	4a09      	ldr	r2, [pc, #36]	; (800cc7c <vPortSetupTimerInterrupt+0x44>)
 800cc56:	3b01      	subs	r3, #1
 800cc58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc5a:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <vPortSetupTimerInterrupt+0x34>)
 800cc5c:	2207      	movs	r2, #7
 800cc5e:	601a      	str	r2, [r3, #0]
}
 800cc60:	bf00      	nop
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	e000e010 	.word	0xe000e010
 800cc70:	e000e018 	.word	0xe000e018
 800cc74:	20000000 	.word	0x20000000
 800cc78:	10624dd3 	.word	0x10624dd3
 800cc7c:	e000e014 	.word	0xe000e014

0800cc80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc90 <vPortEnableVFP+0x10>
 800cc84:	6801      	ldr	r1, [r0, #0]
 800cc86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc8a:	6001      	str	r1, [r0, #0]
 800cc8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc8e:	bf00      	nop
 800cc90:	e000ed88 	.word	0xe000ed88

0800cc94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc9a:	f3ef 8305 	mrs	r3, IPSR
 800cc9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2b0f      	cmp	r3, #15
 800cca4:	d913      	bls.n	800ccce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cca6:	4a16      	ldr	r2, [pc, #88]	; (800cd00 <vPortValidateInterruptPriority+0x6c>)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccb0:	4b14      	ldr	r3, [pc, #80]	; (800cd04 <vPortValidateInterruptPriority+0x70>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	7afa      	ldrb	r2, [r7, #11]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d209      	bcs.n	800ccce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e7fe      	b.n	800cccc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccce:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <vPortValidateInterruptPriority+0x74>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <vPortValidateInterruptPriority+0x78>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d909      	bls.n	800ccf2 <vPortValidateInterruptPriority+0x5e>
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	e7fe      	b.n	800ccf0 <vPortValidateInterruptPriority+0x5c>
	}
 800ccf2:	bf00      	nop
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	e000e3f0 	.word	0xe000e3f0
 800cd04:	20000440 	.word	0x20000440
 800cd08:	e000ed0c 	.word	0xe000ed0c
 800cd0c:	20000444 	.word	0x20000444

0800cd10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08a      	sub	sp, #40	; 0x28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd1c:	f7fe ffce 	bl	800bcbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd20:	4b57      	ldr	r3, [pc, #348]	; (800ce80 <pvPortMalloc+0x170>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd28:	f000 f90c 	bl	800cf44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd2c:	4b55      	ldr	r3, [pc, #340]	; (800ce84 <pvPortMalloc+0x174>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4013      	ands	r3, r2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f040 808c 	bne.w	800ce52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01c      	beq.n	800cd7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cd40:	2208      	movs	r2, #8
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4413      	add	r3, r2
 800cd46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f003 0307 	and.w	r3, r3, #7
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d013      	beq.n	800cd7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f023 0307 	bic.w	r3, r3, #7
 800cd58:	3308      	adds	r3, #8
 800cd5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d009      	beq.n	800cd7a <pvPortMalloc+0x6a>
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e7fe      	b.n	800cd78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d068      	beq.n	800ce52 <pvPortMalloc+0x142>
 800cd80:	4b41      	ldr	r3, [pc, #260]	; (800ce88 <pvPortMalloc+0x178>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d863      	bhi.n	800ce52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd8a:	4b40      	ldr	r3, [pc, #256]	; (800ce8c <pvPortMalloc+0x17c>)
 800cd8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd8e:	4b3f      	ldr	r3, [pc, #252]	; (800ce8c <pvPortMalloc+0x17c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd94:	e004      	b.n	800cda0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d903      	bls.n	800cdb2 <pvPortMalloc+0xa2>
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1f1      	bne.n	800cd96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdb2:	4b33      	ldr	r3, [pc, #204]	; (800ce80 <pvPortMalloc+0x170>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d04a      	beq.n	800ce52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdbc:	6a3b      	ldr	r3, [r7, #32]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2208      	movs	r2, #8
 800cdc2:	4413      	add	r3, r2
 800cdc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	1ad2      	subs	r2, r2, r3
 800cdd6:	2308      	movs	r3, #8
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d91e      	bls.n	800ce1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4413      	add	r3, r2
 800cde4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	f003 0307 	and.w	r3, r3, #7
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <pvPortMalloc+0xf4>
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	613b      	str	r3, [r7, #16]
 800ce02:	e7fe      	b.n	800ce02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	685a      	ldr	r2, [r3, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	1ad2      	subs	r2, r2, r3
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce16:	69b8      	ldr	r0, [r7, #24]
 800ce18:	f000 f8f6 	bl	800d008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce1c:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <pvPortMalloc+0x178>)
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	4a18      	ldr	r2, [pc, #96]	; (800ce88 <pvPortMalloc+0x178>)
 800ce28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce2a:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <pvPortMalloc+0x178>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b18      	ldr	r3, [pc, #96]	; (800ce90 <pvPortMalloc+0x180>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d203      	bcs.n	800ce3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce36:	4b14      	ldr	r3, [pc, #80]	; (800ce88 <pvPortMalloc+0x178>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a15      	ldr	r2, [pc, #84]	; (800ce90 <pvPortMalloc+0x180>)
 800ce3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	4b10      	ldr	r3, [pc, #64]	; (800ce84 <pvPortMalloc+0x174>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	431a      	orrs	r2, r3
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce52:	f7fe ff41 	bl	800bcd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	f003 0307 	and.w	r3, r3, #7
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d009      	beq.n	800ce74 <pvPortMalloc+0x164>
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	e7fe      	b.n	800ce72 <pvPortMalloc+0x162>
	return pvReturn;
 800ce74:	69fb      	ldr	r3, [r7, #28]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3728      	adds	r7, #40	; 0x28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	2000c7a0 	.word	0x2000c7a0
 800ce84:	2000c7ac 	.word	0x2000c7ac
 800ce88:	2000c7a4 	.word	0x2000c7a4
 800ce8c:	2000c798 	.word	0x2000c798
 800ce90:	2000c7a8 	.word	0x2000c7a8

0800ce94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d046      	beq.n	800cf34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cea6:	2308      	movs	r3, #8
 800cea8:	425b      	negs	r3, r3
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	4413      	add	r3, r2
 800ceae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	4b20      	ldr	r3, [pc, #128]	; (800cf3c <vPortFree+0xa8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4013      	ands	r3, r2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d109      	bne.n	800ced6 <vPortFree+0x42>
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e7fe      	b.n	800ced4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d009      	beq.n	800cef2 <vPortFree+0x5e>
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	60bb      	str	r3, [r7, #8]
 800cef0:	e7fe      	b.n	800cef0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	4b11      	ldr	r3, [pc, #68]	; (800cf3c <vPortFree+0xa8>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4013      	ands	r3, r2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d019      	beq.n	800cf34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d115      	bne.n	800cf34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	685a      	ldr	r2, [r3, #4]
 800cf0c:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <vPortFree+0xa8>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	43db      	mvns	r3, r3
 800cf12:	401a      	ands	r2, r3
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf18:	f7fe fed0 	bl	800bcbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <vPortFree+0xac>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4413      	add	r3, r2
 800cf26:	4a06      	ldr	r2, [pc, #24]	; (800cf40 <vPortFree+0xac>)
 800cf28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf2a:	6938      	ldr	r0, [r7, #16]
 800cf2c:	f000 f86c 	bl	800d008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf30:	f7fe fed2 	bl	800bcd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf34:	bf00      	nop
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	2000c7ac 	.word	0x2000c7ac
 800cf40:	2000c7a4 	.word	0x2000c7a4

0800cf44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf50:	4b27      	ldr	r3, [pc, #156]	; (800cff0 <prvHeapInit+0xac>)
 800cf52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00c      	beq.n	800cf78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3307      	adds	r3, #7
 800cf62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	4a1f      	ldr	r2, [pc, #124]	; (800cff0 <prvHeapInit+0xac>)
 800cf74:	4413      	add	r3, r2
 800cf76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf7c:	4a1d      	ldr	r2, [pc, #116]	; (800cff4 <prvHeapInit+0xb0>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf82:	4b1c      	ldr	r3, [pc, #112]	; (800cff4 <prvHeapInit+0xb0>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf90:	2208      	movs	r2, #8
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f023 0307 	bic.w	r3, r3, #7
 800cf9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4a15      	ldr	r2, [pc, #84]	; (800cff8 <prvHeapInit+0xb4>)
 800cfa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfa6:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <prvHeapInit+0xb4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfae:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <prvHeapInit+0xb4>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <prvHeapInit+0xb4>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4a0a      	ldr	r2, [pc, #40]	; (800cffc <prvHeapInit+0xb8>)
 800cfd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	4a09      	ldr	r2, [pc, #36]	; (800d000 <prvHeapInit+0xbc>)
 800cfda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <prvHeapInit+0xc0>)
 800cfde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfe2:	601a      	str	r2, [r3, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	20000448 	.word	0x20000448
 800cff4:	2000c798 	.word	0x2000c798
 800cff8:	2000c7a0 	.word	0x2000c7a0
 800cffc:	2000c7a8 	.word	0x2000c7a8
 800d000:	2000c7a4 	.word	0x2000c7a4
 800d004:	2000c7ac 	.word	0x2000c7ac

0800d008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d010:	4b28      	ldr	r3, [pc, #160]	; (800d0b4 <prvInsertBlockIntoFreeList+0xac>)
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e002      	b.n	800d01c <prvInsertBlockIntoFreeList+0x14>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	429a      	cmp	r2, r3
 800d024:	d8f7      	bhi.n	800d016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	4413      	add	r3, r2
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	429a      	cmp	r2, r3
 800d036:	d108      	bne.n	800d04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	441a      	add	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	441a      	add	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d118      	bne.n	800d090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d00d      	beq.n	800d086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	441a      	add	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e008      	b.n	800d098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	e003      	b.n	800d098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d002      	beq.n	800d0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	2000c798 	.word	0x2000c798
 800d0b8:	2000c7a0 	.word	0x2000c7a0

0800d0bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	330c      	adds	r3, #12
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 f96f 	bl	800f3b4 <tcpip_send_msg_wait_sem>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d103      	bne.n	800d0ea <netconn_apimsg+0x2e>
    return apimsg->err;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d0e8:	e001      	b.n	800d0ee <netconn_apimsg+0x32>
  }
  return err;
 800d0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	603a      	str	r2, [r7, #0]
 800d102:	71fb      	strb	r3, [r7, #7]
 800d104:	460b      	mov	r3, r1
 800d106:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 ff83 	bl	800e018 <netconn_alloc>
 800d112:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	2b00      	cmp	r3, #0
 800d118:	d054      	beq.n	800d1c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d11a:	79bb      	ldrb	r3, [r7, #6]
 800d11c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d122:	f107 030c 	add.w	r3, r7, #12
 800d126:	4619      	mov	r1, r3
 800d128:	4829      	ldr	r0, [pc, #164]	; (800d1d0 <netconn_new_with_proto_and_callback+0xd8>)
 800d12a:	f7ff ffc7 	bl	800d0bc <netconn_apimsg>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800d134:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d043      	beq.n	800d1c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <netconn_new_with_proto_and_callback+0x58>
 800d144:	4b23      	ldr	r3, [pc, #140]	; (800d1d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d146:	2289      	movs	r2, #137	; 0x89
 800d148:	4923      	ldr	r1, [pc, #140]	; (800d1d8 <netconn_new_with_proto_and_callback+0xe0>)
 800d14a:	4824      	ldr	r0, [pc, #144]	; (800d1dc <netconn_new_with_proto_and_callback+0xe4>)
 800d14c:	f00c f888 	bl	8019260 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	3310      	adds	r3, #16
 800d154:	4618      	mov	r0, r3
 800d156:	f00b ff03 	bl	8018f60 <sys_mbox_valid>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d105      	bne.n	800d16c <netconn_new_with_proto_and_callback+0x74>
 800d160:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d162:	228a      	movs	r2, #138	; 0x8a
 800d164:	491e      	ldr	r1, [pc, #120]	; (800d1e0 <netconn_new_with_proto_and_callback+0xe8>)
 800d166:	481d      	ldr	r0, [pc, #116]	; (800d1dc <netconn_new_with_proto_and_callback+0xe4>)
 800d168:	f00c f87a 	bl	8019260 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	3314      	adds	r3, #20
 800d170:	4618      	mov	r0, r3
 800d172:	f00b fef5 	bl	8018f60 <sys_mbox_valid>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d005      	beq.n	800d188 <netconn_new_with_proto_and_callback+0x90>
 800d17c:	4b15      	ldr	r3, [pc, #84]	; (800d1d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d17e:	228c      	movs	r2, #140	; 0x8c
 800d180:	4918      	ldr	r1, [pc, #96]	; (800d1e4 <netconn_new_with_proto_and_callback+0xec>)
 800d182:	4816      	ldr	r0, [pc, #88]	; (800d1dc <netconn_new_with_proto_and_callback+0xe4>)
 800d184:	f00c f86c 	bl	8019260 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	330c      	adds	r3, #12
 800d18c:	4618      	mov	r0, r3
 800d18e:	f00b ff78 	bl	8019082 <sys_sem_valid>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d105      	bne.n	800d1a4 <netconn_new_with_proto_and_callback+0xac>
 800d198:	4b0e      	ldr	r3, [pc, #56]	; (800d1d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d19a:	228f      	movs	r2, #143	; 0x8f
 800d19c:	4912      	ldr	r1, [pc, #72]	; (800d1e8 <netconn_new_with_proto_and_callback+0xf0>)
 800d19e:	480f      	ldr	r0, [pc, #60]	; (800d1dc <netconn_new_with_proto_and_callback+0xe4>)
 800d1a0:	f00c f85e 	bl	8019260 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	330c      	adds	r3, #12
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f00b ff5d 	bl	8019068 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f00b fe38 	bl	8018e28 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d1b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ba:	2007      	movs	r0, #7
 800d1bc:	f002 fddc 	bl	800fd78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e000      	b.n	800d1c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3728      	adds	r7, #40	; 0x28
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	0800dfc1 	.word	0x0800dfc1
 800d1d4:	0801a4e0 	.word	0x0801a4e0
 800d1d8:	0801a538 	.word	0x0801a538
 800d1dc:	0801a55c 	.word	0x0801a55c
 800d1e0:	0801a584 	.word	0x0801a584
 800d1e4:	0801a59c 	.word	0x0801a59c
 800d1e8:	0801a5c0 	.word	0x0801a5c0

0800d1ec <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <netconn_delete+0x12>
    return ERR_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e016      	b.n	800d22c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d202:	2329      	movs	r3, #41	; 0x29
 800d204:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d206:	f107 0308 	add.w	r3, r7, #8
 800d20a:	4619      	mov	r1, r3
 800d20c:	4809      	ldr	r0, [pc, #36]	; (800d234 <netconn_delete+0x48>)
 800d20e:	f7ff ff55 	bl	800d0bc <netconn_apimsg>
 800d212:	4603      	mov	r3, r0
 800d214:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d216:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <netconn_delete+0x38>
    return err;
 800d21e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d222:	e003      	b.n	800d22c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 ff67 	bl	800e0f8 <netconn_free>

  return ERR_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3720      	adds	r7, #32
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	0800e57d 	.word	0x0800e57d

0800d238 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	4613      	mov	r3, r2
 800d244:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d108      	bne.n	800d25e <netconn_bind+0x26>
 800d24c:	4b11      	ldr	r3, [pc, #68]	; (800d294 <netconn_bind+0x5c>)
 800d24e:	22ff      	movs	r2, #255	; 0xff
 800d250:	4911      	ldr	r1, [pc, #68]	; (800d298 <netconn_bind+0x60>)
 800d252:	4812      	ldr	r0, [pc, #72]	; (800d29c <netconn_bind+0x64>)
 800d254:	f00c f804 	bl	8019260 <iprintf>
 800d258:	f06f 030f 	mvn.w	r3, #15
 800d25c:	e015      	b.n	800d28a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800d264:	4b0e      	ldr	r3, [pc, #56]	; (800d2a0 <netconn_bind+0x68>)
 800d266:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d270:	88fb      	ldrh	r3, [r7, #6]
 800d272:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d274:	f107 0310 	add.w	r3, r7, #16
 800d278:	4619      	mov	r1, r3
 800d27a:	480a      	ldr	r0, [pc, #40]	; (800d2a4 <netconn_bind+0x6c>)
 800d27c:	f7ff ff1e 	bl	800d0bc <netconn_apimsg>
 800d280:	4603      	mov	r3, r0
 800d282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800d286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3728      	adds	r7, #40	; 0x28
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	0801a4e0 	.word	0x0801a4e0
 800d298:	0801a63c 	.word	0x0801a63c
 800d29c:	0801a55c 	.word	0x0801a55c
 800d2a0:	0801cf24 	.word	0x0801cf24
 800d2a4:	0800e781 	.word	0x0800e781

0800d2a8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <netconn_listen_with_backlog+0x26>
 800d2ba:	4b0d      	ldr	r3, [pc, #52]	; (800d2f0 <netconn_listen_with_backlog+0x48>)
 800d2bc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d2c0:	490c      	ldr	r1, [pc, #48]	; (800d2f4 <netconn_listen_with_backlog+0x4c>)
 800d2c2:	480d      	ldr	r0, [pc, #52]	; (800d2f8 <netconn_listen_with_backlog+0x50>)
 800d2c4:	f00b ffcc 	bl	8019260 <iprintf>
 800d2c8:	f06f 030f 	mvn.w	r3, #15
 800d2cc:	e00b      	b.n	800d2e6 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d2d2:	f107 0308 	add.w	r3, r7, #8
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <netconn_listen_with_backlog+0x54>)
 800d2da:	f7ff feef 	bl	800d0bc <netconn_apimsg>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d2e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	0801a4e0 	.word	0x0801a4e0
 800d2f4:	0801a69c 	.word	0x0801a69c
 800d2f8:	0801a55c 	.word	0x0801a55c
 800d2fc:	0800e841 	.word	0x0800e841

0800d300 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d109      	bne.n	800d324 <netconn_accept+0x24>
 800d310:	4b34      	ldr	r3, [pc, #208]	; (800d3e4 <netconn_accept+0xe4>)
 800d312:	f240 128d 	movw	r2, #397	; 0x18d
 800d316:	4934      	ldr	r1, [pc, #208]	; (800d3e8 <netconn_accept+0xe8>)
 800d318:	4834      	ldr	r0, [pc, #208]	; (800d3ec <netconn_accept+0xec>)
 800d31a:	f00b ffa1 	bl	8019260 <iprintf>
 800d31e:	f06f 030f 	mvn.w	r3, #15
 800d322:	e05b      	b.n	800d3dc <netconn_accept+0xdc>
  *new_conn = NULL;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d109      	bne.n	800d344 <netconn_accept+0x44>
 800d330:	4b2c      	ldr	r3, [pc, #176]	; (800d3e4 <netconn_accept+0xe4>)
 800d332:	f240 128f 	movw	r2, #399	; 0x18f
 800d336:	492e      	ldr	r1, [pc, #184]	; (800d3f0 <netconn_accept+0xf0>)
 800d338:	482c      	ldr	r0, [pc, #176]	; (800d3ec <netconn_accept+0xec>)
 800d33a:	f00b ff91 	bl	8019260 <iprintf>
 800d33e:	f06f 030f 	mvn.w	r3, #15
 800d342:	e04b      	b.n	800d3dc <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d34a:	f113 0f0c 	cmn.w	r3, #12
 800d34e:	da03      	bge.n	800d358 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d356:	e041      	b.n	800d3dc <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3314      	adds	r3, #20
 800d35c:	4618      	mov	r0, r3
 800d35e:	f00b fdff 	bl	8018f60 <sys_mbox_valid>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d102      	bne.n	800d36e <netconn_accept+0x6e>
    return ERR_CLSD;
 800d368:	f06f 030e 	mvn.w	r3, #14
 800d36c:	e036      	b.n	800d3dc <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3314      	adds	r3, #20
 800d372:	f107 010c 	add.w	r1, r7, #12
 800d376:	2200      	movs	r2, #0
 800d378:	4618      	mov	r0, r3
 800d37a:	f00b fd96 	bl	8018eaa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <netconn_accept+0x96>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38e:	2200      	movs	r2, #0
 800d390:	2101      	movs	r1, #1
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4a16      	ldr	r2, [pc, #88]	; (800d3f4 <netconn_accept+0xf4>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d102      	bne.n	800d3a4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800d39e:	f06f 030c 	mvn.w	r3, #12
 800d3a2:	e01b      	b.n	800d3dc <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d114      	bne.n	800d3d4 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00e      	beq.n	800d3ce <netconn_accept+0xce>
 800d3b0:	f00b fef2 	bl	8019198 <sys_arch_protect>
 800d3b4:	6138      	str	r0, [r7, #16]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d3bc:	f113 0f0c 	cmn.w	r3, #12
 800d3c0:	db02      	blt.n	800d3c8 <netconn_accept+0xc8>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	22f1      	movs	r2, #241	; 0xf1
 800d3c6:	721a      	strb	r2, [r3, #8]
 800d3c8:	6938      	ldr	r0, [r7, #16]
 800d3ca:	f00b fef3 	bl	80191b4 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800d3ce:	f06f 030e 	mvn.w	r3, #14
 800d3d2:	e003      	b.n	800d3dc <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d3da:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	0801a4e0 	.word	0x0801a4e0
 800d3e8:	0801a6bc 	.word	0x0801a6bc
 800d3ec:	0801a55c 	.word	0x0801a55c
 800d3f0:	0801a6dc 	.word	0x0801a6dc
 800d3f4:	2000d108 	.word	0x2000d108

0800d3f8 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08a      	sub	sp, #40	; 0x28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d109      	bne.n	800d420 <netconn_recv_data+0x28>
 800d40c:	4b5c      	ldr	r3, [pc, #368]	; (800d580 <netconn_recv_data+0x188>)
 800d40e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d412:	495c      	ldr	r1, [pc, #368]	; (800d584 <netconn_recv_data+0x18c>)
 800d414:	485c      	ldr	r0, [pc, #368]	; (800d588 <netconn_recv_data+0x190>)
 800d416:	f00b ff23 	bl	8019260 <iprintf>
 800d41a:	f06f 030f 	mvn.w	r3, #15
 800d41e:	e0aa      	b.n	800d576 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d109      	bne.n	800d440 <netconn_recv_data+0x48>
 800d42c:	4b54      	ldr	r3, [pc, #336]	; (800d580 <netconn_recv_data+0x188>)
 800d42e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800d432:	4956      	ldr	r1, [pc, #344]	; (800d58c <netconn_recv_data+0x194>)
 800d434:	4854      	ldr	r0, [pc, #336]	; (800d588 <netconn_recv_data+0x190>)
 800d436:	f00b ff13 	bl	8019260 <iprintf>
 800d43a:	f06f 030f 	mvn.w	r3, #15
 800d43e:	e09a      	b.n	800d576 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d448:	2b10      	cmp	r3, #16
 800d44a:	d115      	bne.n	800d478 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3310      	adds	r3, #16
 800d450:	4618      	mov	r0, r3
 800d452:	f00b fd85 	bl	8018f60 <sys_mbox_valid>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10d      	bne.n	800d478 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3314      	adds	r3, #20
 800d460:	4618      	mov	r0, r3
 800d462:	f00b fd7d 	bl	8018f60 <sys_mbox_valid>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <netconn_recv_data+0x7a>
 800d46c:	f06f 030a 	mvn.w	r3, #10
 800d470:	e081      	b.n	800d576 <netconn_recv_data+0x17e>
 800d472:	f06f 030e 	mvn.w	r3, #14
 800d476:	e07e      	b.n	800d576 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3310      	adds	r3, #16
 800d47c:	4618      	mov	r0, r3
 800d47e:	f00b fd6f 	bl	8018f60 <sys_mbox_valid>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <netconn_recv_data+0xa4>
 800d488:	4b3d      	ldr	r3, [pc, #244]	; (800d580 <netconn_recv_data+0x188>)
 800d48a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d48e:	4940      	ldr	r1, [pc, #256]	; (800d590 <netconn_recv_data+0x198>)
 800d490:	483d      	ldr	r0, [pc, #244]	; (800d588 <netconn_recv_data+0x190>)
 800d492:	f00b fee5 	bl	8019260 <iprintf>
 800d496:	f06f 030a 	mvn.w	r3, #10
 800d49a:	e06c      	b.n	800d576 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4a2:	f113 0f0c 	cmn.w	r3, #12
 800d4a6:	da03      	bge.n	800d4b0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4ae:	e062      	b.n	800d576 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	f107 0120 	add.w	r1, r7, #32
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f00b fcf5 	bl	8018eaa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4c8:	2b10      	cmp	r3, #16
 800d4ca:	d138      	bne.n	800d53e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d003      	beq.n	800d4de <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	891b      	ldrh	r3, [r3, #8]
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e001      	b.n	800d4e2 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d4e2:	f107 030c 	add.w	r3, r7, #12
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	482a      	ldr	r0, [pc, #168]	; (800d594 <netconn_recv_data+0x19c>)
 800d4ea:	f7ff fde7 	bl	800d0bc <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d120      	bne.n	800d536 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <netconn_recv_data+0x110>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d500:	2200      	movs	r2, #0
 800d502:	2101      	movs	r1, #1
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10b      	bne.n	800d528 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <netconn_recv_data+0x12a>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d520:	e029      	b.n	800d576 <netconn_recv_data+0x17e>
 800d522:	f06f 030d 	mvn.w	r3, #13
 800d526:	e026      	b.n	800d576 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d528:	2101      	movs	r1, #1
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f926 	bl	800d77c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d530:	f06f 030e 	mvn.w	r3, #14
 800d534:	e01f      	b.n	800d576 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	891b      	ldrh	r3, [r3, #8]
 800d53a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d53c:	e00d      	b.n	800d55a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d106      	bne.n	800d552 <netconn_recv_data+0x15a>
 800d544:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <netconn_recv_data+0x188>)
 800d546:	f240 223e 	movw	r2, #574	; 0x23e
 800d54a:	4913      	ldr	r1, [pc, #76]	; (800d598 <netconn_recv_data+0x1a0>)
 800d54c:	480e      	ldr	r0, [pc, #56]	; (800d588 <netconn_recv_data+0x190>)
 800d54e:	f00b fe87 	bl	8019260 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	891b      	ldrh	r3, [r3, #8]
 800d558:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d005      	beq.n	800d56e <netconn_recv_data+0x176>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d566:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d568:	2101      	movs	r1, #1
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d56e:	6a3a      	ldr	r2, [r7, #32]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3728      	adds	r7, #40	; 0x28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	0801a4e0 	.word	0x0801a4e0
 800d584:	0801a6fc 	.word	0x0801a6fc
 800d588:	0801a55c 	.word	0x0801a55c
 800d58c:	0801a71c 	.word	0x0801a71c
 800d590:	0801a738 	.word	0x0801a738
 800d594:	0800e9c5 	.word	0x0800e9c5
 800d598:	0801a758 	.word	0x0801a758

0800d59c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d109      	bne.n	800d5c4 <netconn_recv+0x28>
 800d5b0:	4b31      	ldr	r3, [pc, #196]	; (800d678 <netconn_recv+0xdc>)
 800d5b2:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d5b6:	4931      	ldr	r1, [pc, #196]	; (800d67c <netconn_recv+0xe0>)
 800d5b8:	4831      	ldr	r0, [pc, #196]	; (800d680 <netconn_recv+0xe4>)
 800d5ba:	f00b fe51 	bl	8019260 <iprintf>
 800d5be:	f06f 030f 	mvn.w	r3, #15
 800d5c2:	e054      	b.n	800d66e <netconn_recv+0xd2>
  *new_buf = NULL;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d109      	bne.n	800d5e4 <netconn_recv+0x48>
 800d5d0:	4b29      	ldr	r3, [pc, #164]	; (800d678 <netconn_recv+0xdc>)
 800d5d2:	f240 2276 	movw	r2, #630	; 0x276
 800d5d6:	492b      	ldr	r1, [pc, #172]	; (800d684 <netconn_recv+0xe8>)
 800d5d8:	4829      	ldr	r0, [pc, #164]	; (800d680 <netconn_recv+0xe4>)
 800d5da:	f00b fe41 	bl	8019260 <iprintf>
 800d5de:	f06f 030f 	mvn.w	r3, #15
 800d5e2:	e044      	b.n	800d66e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5ec:	2b10      	cmp	r3, #16
 800d5ee:	d139      	bne.n	800d664 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d5f4:	2006      	movs	r0, #6
 800d5f6:	f002 fb49 	bl	800fc8c <memp_malloc>
 800d5fa:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d102      	bne.n	800d608 <netconn_recv+0x6c>
      return ERR_MEM;
 800d602:	f04f 33ff 	mov.w	r3, #4294967295
 800d606:	e032      	b.n	800d66e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d608:	f107 030c 	add.w	r3, r7, #12
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff fef2 	bl	800d3f8 <netconn_recv_data>
 800d614:	4603      	mov	r3, r0
 800d616:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d618:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d006      	beq.n	800d62e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d620:	6979      	ldr	r1, [r7, #20]
 800d622:	2006      	movs	r0, #6
 800d624:	f002 fba8 	bl	800fd78 <memp_free>
      return err;
 800d628:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d62c:	e01f      	b.n	800d66e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d106      	bne.n	800d642 <netconn_recv+0xa6>
 800d634:	4b10      	ldr	r3, [pc, #64]	; (800d678 <netconn_recv+0xdc>)
 800d636:	f240 228a 	movw	r2, #650	; 0x28a
 800d63a:	4913      	ldr	r1, [pc, #76]	; (800d688 <netconn_recv+0xec>)
 800d63c:	4810      	ldr	r0, [pc, #64]	; (800d680 <netconn_recv+0xe4>)
 800d63e:	f00b fe0f 	bl	8019260 <iprintf>

    buf->p = p;
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2200      	movs	r2, #0
 800d652:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	2200      	movs	r2, #0
 800d658:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	e004      	b.n	800d66e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7ff fec6 	bl	800d3f8 <netconn_recv_data>
 800d66c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	0801a4e0 	.word	0x0801a4e0
 800d67c:	0801a6fc 	.word	0x0801a6fc
 800d680:	0801a55c 	.word	0x0801a55c
 800d684:	0801a71c 	.word	0x0801a71c
 800d688:	0801a764 	.word	0x0801a764

0800d68c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08a      	sub	sp, #40	; 0x28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d109      	bne.n	800d6b4 <netconn_write_partly+0x28>
 800d6a0:	4b31      	ldr	r3, [pc, #196]	; (800d768 <netconn_write_partly+0xdc>)
 800d6a2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d6a6:	4931      	ldr	r1, [pc, #196]	; (800d76c <netconn_write_partly+0xe0>)
 800d6a8:	4831      	ldr	r0, [pc, #196]	; (800d770 <netconn_write_partly+0xe4>)
 800d6aa:	f00b fdd9 	bl	8019260 <iprintf>
 800d6ae:	f06f 030f 	mvn.w	r3, #15
 800d6b2:	e054      	b.n	800d75e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6bc:	2b10      	cmp	r3, #16
 800d6be:	d009      	beq.n	800d6d4 <netconn_write_partly+0x48>
 800d6c0:	4b29      	ldr	r3, [pc, #164]	; (800d768 <netconn_write_partly+0xdc>)
 800d6c2:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d6c6:	492b      	ldr	r1, [pc, #172]	; (800d774 <netconn_write_partly+0xe8>)
 800d6c8:	4829      	ldr	r0, [pc, #164]	; (800d770 <netconn_write_partly+0xe4>)
 800d6ca:	f00b fdc9 	bl	8019260 <iprintf>
 800d6ce:	f06f 0305 	mvn.w	r3, #5
 800d6d2:	e044      	b.n	800d75e <netconn_write_partly+0xd2>
  if (size == 0) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <netconn_write_partly+0x52>
    return ERR_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e03f      	b.n	800d75e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	7f1b      	ldrb	r3, [r3, #28]
 800d6e2:	f003 0302 	and.w	r3, r3, #2
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d104      	bne.n	800d6f4 <netconn_write_partly+0x68>
 800d6ea:	78fb      	ldrb	r3, [r7, #3]
 800d6ec:	f003 0304 	and.w	r3, r3, #4
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <netconn_write_partly+0x6c>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e000      	b.n	800d6fa <netconn_write_partly+0x6e>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d702:	2b00      	cmp	r3, #0
 800d704:	d005      	beq.n	800d712 <netconn_write_partly+0x86>
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d102      	bne.n	800d712 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d70c:	f06f 0305 	mvn.w	r3, #5
 800d710:	e025      	b.n	800d75e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d71a:	78fb      	ldrb	r3, [r7, #3]
 800d71c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d724:	f107 0310 	add.w	r3, r7, #16
 800d728:	4619      	mov	r1, r3
 800d72a:	4813      	ldr	r0, [pc, #76]	; (800d778 <netconn_write_partly+0xec>)
 800d72c:	f7ff fcc6 	bl	800d0bc <netconn_apimsg>
 800d730:	4603      	mov	r3, r0
 800d732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d736:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10d      	bne.n	800d75a <netconn_write_partly+0xce>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00a      	beq.n	800d75a <netconn_write_partly+0xce>
    if (dontblock) {
 800d744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d74c:	69fa      	ldr	r2, [r7, #28]
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	e002      	b.n	800d75a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d75a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3728      	adds	r7, #40	; 0x28
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	0801a4e0 	.word	0x0801a4e0
 800d76c:	0801a78c 	.word	0x0801a78c
 800d770:	0801a55c 	.word	0x0801a55c
 800d774:	0801a7a8 	.word	0x0801a7a8
 800d778:	0800eda5 	.word	0x0800eda5

0800d77c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d109      	bne.n	800d7a2 <netconn_close_shutdown+0x26>
 800d78e:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <netconn_close_shutdown+0x50>)
 800d790:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d794:	490e      	ldr	r1, [pc, #56]	; (800d7d0 <netconn_close_shutdown+0x54>)
 800d796:	480f      	ldr	r0, [pc, #60]	; (800d7d4 <netconn_close_shutdown+0x58>)
 800d798:	f00b fd62 	bl	8019260 <iprintf>
 800d79c:	f06f 030f 	mvn.w	r3, #15
 800d7a0:	e00f      	b.n	800d7c2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d7aa:	2329      	movs	r3, #41	; 0x29
 800d7ac:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d7ae:	f107 0308 	add.w	r3, r7, #8
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	4808      	ldr	r0, [pc, #32]	; (800d7d8 <netconn_close_shutdown+0x5c>)
 800d7b6:	f7ff fc81 	bl	800d0bc <netconn_apimsg>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d7be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	0801a4e0 	.word	0x0801a4e0
 800d7d0:	0801a7cc 	.word	0x0801a7cc
 800d7d4:	0801a55c 	.word	0x0801a55c
 800d7d8:	0800ef05 	.word	0x0800ef05

0800d7dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d7e4:	2103      	movs	r1, #3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff ffc8 	bl	800d77c <netconn_close_shutdown>
 800d7ec:	4603      	mov	r3, r0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d105      	bne.n	800d818 <recv_udp+0x20>
 800d80c:	4b34      	ldr	r3, [pc, #208]	; (800d8e0 <recv_udp+0xe8>)
 800d80e:	22b1      	movs	r2, #177	; 0xb1
 800d810:	4934      	ldr	r1, [pc, #208]	; (800d8e4 <recv_udp+0xec>)
 800d812:	4835      	ldr	r0, [pc, #212]	; (800d8e8 <recv_udp+0xf0>)
 800d814:	f00b fd24 	bl	8019260 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d105      	bne.n	800d82a <recv_udp+0x32>
 800d81e:	4b30      	ldr	r3, [pc, #192]	; (800d8e0 <recv_udp+0xe8>)
 800d820:	22b2      	movs	r2, #178	; 0xb2
 800d822:	4932      	ldr	r1, [pc, #200]	; (800d8ec <recv_udp+0xf4>)
 800d824:	4830      	ldr	r0, [pc, #192]	; (800d8e8 <recv_udp+0xf0>)
 800d826:	f00b fd1b 	bl	8019260 <iprintf>
  conn = (struct netconn *)arg;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <recv_udp+0x44>
    pbuf_free(p);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f003 f837 	bl	80108a8 <pbuf_free>
    return;
 800d83a:	e04d      	b.n	800d8d8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	429a      	cmp	r2, r3
 800d844:	d005      	beq.n	800d852 <recv_udp+0x5a>
 800d846:	4b26      	ldr	r3, [pc, #152]	; (800d8e0 <recv_udp+0xe8>)
 800d848:	22ba      	movs	r2, #186	; 0xba
 800d84a:	4929      	ldr	r1, [pc, #164]	; (800d8f0 <recv_udp+0xf8>)
 800d84c:	4826      	ldr	r0, [pc, #152]	; (800d8e8 <recv_udp+0xf0>)
 800d84e:	f00b fd07 	bl	8019260 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	3310      	adds	r3, #16
 800d856:	4618      	mov	r0, r3
 800d858:	f00b fb82 	bl	8018f60 <sys_mbox_valid>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d103      	bne.n	800d86a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f003 f820 	bl	80108a8 <pbuf_free>
    return;
 800d868:	e036      	b.n	800d8d8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d86a:	2006      	movs	r0, #6
 800d86c:	f002 fa0e 	bl	800fc8c <memp_malloc>
 800d870:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d103      	bne.n	800d880 <recv_udp+0x88>
    pbuf_free(p);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f003 f815 	bl	80108a8 <pbuf_free>
    return;
 800d87e:	e02b      	b.n	800d8d8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <recv_udp+0xa0>
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	e000      	b.n	800d89a <recv_udp+0xa2>
 800d898:	2300      	movs	r3, #0
 800d89a:	69ba      	ldr	r2, [r7, #24]
 800d89c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d8a2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	891b      	ldrh	r3, [r3, #8]
 800d8a8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	69b9      	ldr	r1, [r7, #24]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f00b fae0 	bl	8018e76 <sys_mbox_trypost>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d8bc:	69b8      	ldr	r0, [r7, #24]
 800d8be:	f001 fbc9 	bl	800f054 <netbuf_delete>
    return;
 800d8c2:	e009      	b.n	800d8d8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d005      	beq.n	800d8d8 <recv_udp+0xe0>
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d0:	8afa      	ldrh	r2, [r7, #22]
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	69f8      	ldr	r0, [r7, #28]
 800d8d6:	4798      	blx	r3
  }
}
 800d8d8:	3720      	adds	r7, #32
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	0801a7e8 	.word	0x0801a7e8
 800d8e4:	0801a840 	.word	0x0801a840
 800d8e8:	0801a864 	.word	0x0801a864
 800d8ec:	0801a88c 	.word	0x0801a88c
 800d8f0:	0801a8ac 	.word	0x0801a8ac

0800d8f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d105      	bne.n	800d914 <recv_tcp+0x20>
 800d908:	4b39      	ldr	r3, [pc, #228]	; (800d9f0 <recv_tcp+0xfc>)
 800d90a:	22f9      	movs	r2, #249	; 0xf9
 800d90c:	4939      	ldr	r1, [pc, #228]	; (800d9f4 <recv_tcp+0x100>)
 800d90e:	483a      	ldr	r0, [pc, #232]	; (800d9f8 <recv_tcp+0x104>)
 800d910:	f00b fca6 	bl	8019260 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d105      	bne.n	800d926 <recv_tcp+0x32>
 800d91a:	4b35      	ldr	r3, [pc, #212]	; (800d9f0 <recv_tcp+0xfc>)
 800d91c:	22fa      	movs	r2, #250	; 0xfa
 800d91e:	4937      	ldr	r1, [pc, #220]	; (800d9fc <recv_tcp+0x108>)
 800d920:	4835      	ldr	r0, [pc, #212]	; (800d9f8 <recv_tcp+0x104>)
 800d922:	f00b fc9d 	bl	8019260 <iprintf>
  conn = (struct netconn *)arg;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <recv_tcp+0x42>
    return ERR_VAL;
 800d930:	f06f 0305 	mvn.w	r3, #5
 800d934:	e057      	b.n	800d9e6 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d006      	beq.n	800d94e <recv_tcp+0x5a>
 800d940:	4b2b      	ldr	r3, [pc, #172]	; (800d9f0 <recv_tcp+0xfc>)
 800d942:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d946:	492e      	ldr	r1, [pc, #184]	; (800da00 <recv_tcp+0x10c>)
 800d948:	482b      	ldr	r0, [pc, #172]	; (800d9f8 <recv_tcp+0x104>)
 800d94a:	f00b fc89 	bl	8019260 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	3310      	adds	r3, #16
 800d952:	4618      	mov	r0, r3
 800d954:	f00b fb04 	bl	8018f60 <sys_mbox_valid>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10d      	bne.n	800d97a <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d008      	beq.n	800d976 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	891b      	ldrh	r3, [r3, #8]
 800d968:	4619      	mov	r1, r3
 800d96a:	68b8      	ldr	r0, [r7, #8]
 800d96c:	f003 fe76 	bl	801165c <tcp_recved>
      pbuf_free(p);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f002 ff99 	bl	80108a8 <pbuf_free>
    }
    return ERR_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	e035      	b.n	800d9e6 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800d97a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d011      	beq.n	800d9a6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00e      	beq.n	800d9a6 <recv_tcp+0xb2>
 800d988:	f00b fc06 	bl	8019198 <sys_arch_protect>
 800d98c:	6178      	str	r0, [r7, #20]
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d994:	f113 0f0c 	cmn.w	r3, #12
 800d998:	db02      	blt.n	800d9a0 <recv_tcp+0xac>
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	78fa      	ldrb	r2, [r7, #3]
 800d99e:	721a      	strb	r2, [r3, #8]
 800d9a0:	6978      	ldr	r0, [r7, #20]
 800d9a2:	f00b fc07 	bl	80191b4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <recv_tcp+0xc0>
    len = p->tot_len;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	891b      	ldrh	r3, [r3, #8]
 800d9b0:	83fb      	strh	r3, [r7, #30]
 800d9b2:	e001      	b.n	800d9b8 <recv_tcp+0xc4>
  } else {
    len = 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	3310      	adds	r3, #16
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f00b fa59 	bl	8018e76 <sys_mbox_trypost>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d002      	beq.n	800d9d0 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ce:	e00a      	b.n	800d9e6 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d005      	beq.n	800d9e4 <recv_tcp+0xf0>
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9dc:	8bfa      	ldrh	r2, [r7, #30]
 800d9de:	2100      	movs	r1, #0
 800d9e0:	69b8      	ldr	r0, [r7, #24]
 800d9e2:	4798      	blx	r3
  }

  return ERR_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3720      	adds	r7, #32
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	0801a7e8 	.word	0x0801a7e8
 800d9f4:	0801a8cc 	.word	0x0801a8cc
 800d9f8:	0801a864 	.word	0x0801a864
 800d9fc:	0801a8f0 	.word	0x0801a8f0
 800da00:	0801a910 	.word	0x0801a910

0800da04 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <poll_tcp+0x22>
 800da18:	4b29      	ldr	r3, [pc, #164]	; (800dac0 <poll_tcp+0xbc>)
 800da1a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800da1e:	4929      	ldr	r1, [pc, #164]	; (800dac4 <poll_tcp+0xc0>)
 800da20:	4829      	ldr	r0, [pc, #164]	; (800dac8 <poll_tcp+0xc4>)
 800da22:	f00b fc1d 	bl	8019260 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	785b      	ldrb	r3, [r3, #1]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d104      	bne.n	800da38 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800da2e:	2101      	movs	r1, #1
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f001 f813 	bl	800ea5c <lwip_netconn_do_writemore>
 800da36:	e016      	b.n	800da66 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d112      	bne.n	800da66 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <poll_tcp+0x5a>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	7a5b      	ldrb	r3, [r3, #9]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da56:	7a5a      	ldrb	r2, [r3, #9]
 800da58:	3a01      	subs	r2, #1
 800da5a:	b2d2      	uxtb	r2, r2
 800da5c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800da5e:	2101      	movs	r1, #1
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f000 fc13 	bl	800e28c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	7f1b      	ldrb	r3, [r3, #28]
 800da6a:	f003 0310 	and.w	r3, r3, #16
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d021      	beq.n	800dab6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d01d      	beq.n	800dab6 <poll_tcp+0xb2>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800da86:	d316      	bcc.n	800dab6 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800da90:	2b04      	cmp	r3, #4
 800da92:	d810      	bhi.n	800dab6 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	7f1b      	ldrb	r3, [r3, #28]
 800da98:	f023 0310 	bic.w	r3, r3, #16
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <poll_tcp+0xb2>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daae:	2200      	movs	r2, #0
 800dab0:	2102      	movs	r1, #2
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	0801a7e8 	.word	0x0801a7e8
 800dac4:	0801a930 	.word	0x0801a930
 800dac8:	0801a864 	.word	0x0801a864

0800dacc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	4613      	mov	r3, r2
 800dad8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d106      	bne.n	800daf2 <sent_tcp+0x26>
 800dae4:	4b20      	ldr	r3, [pc, #128]	; (800db68 <sent_tcp+0x9c>)
 800dae6:	f240 1261 	movw	r2, #353	; 0x161
 800daea:	4920      	ldr	r1, [pc, #128]	; (800db6c <sent_tcp+0xa0>)
 800daec:	4820      	ldr	r0, [pc, #128]	; (800db70 <sent_tcp+0xa4>)
 800daee:	f00b fbb7 	bl	8019260 <iprintf>

  if (conn) {
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d032      	beq.n	800db5e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d104      	bne.n	800db0a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800db00:	2101      	movs	r1, #1
 800db02:	6978      	ldr	r0, [r7, #20]
 800db04:	f000 ffaa 	bl	800ea5c <lwip_netconn_do_writemore>
 800db08:	e007      	b.n	800db1a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	785b      	ldrb	r3, [r3, #1]
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d103      	bne.n	800db1a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800db12:	2101      	movs	r1, #1
 800db14:	6978      	ldr	r0, [r7, #20]
 800db16:	f000 fbb9 	bl	800e28c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01d      	beq.n	800db5e <sent_tcp+0x92>
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db2a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800db2e:	d316      	bcc.n	800db5e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db38:	2b04      	cmp	r3, #4
 800db3a:	d810      	bhi.n	800db5e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	7f1b      	ldrb	r3, [r3, #28]
 800db40:	f023 0310 	bic.w	r3, r3, #16
 800db44:	b2da      	uxtb	r2, r3
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d005      	beq.n	800db5e <sent_tcp+0x92>
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db56:	88fa      	ldrh	r2, [r7, #6]
 800db58:	2102      	movs	r1, #2
 800db5a:	6978      	ldr	r0, [r7, #20]
 800db5c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	0801a7e8 	.word	0x0801a7e8
 800db6c:	0801a930 	.word	0x0801a930
 800db70:	0801a864 	.word	0x0801a864

0800db74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08a      	sub	sp, #40	; 0x28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <err_tcp+0x24>
 800db8a:	4b6c      	ldr	r3, [pc, #432]	; (800dd3c <err_tcp+0x1c8>)
 800db8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800db90:	496b      	ldr	r1, [pc, #428]	; (800dd40 <err_tcp+0x1cc>)
 800db92:	486c      	ldr	r0, [pc, #432]	; (800dd44 <err_tcp+0x1d0>)
 800db94:	f00b fb64 	bl	8019260 <iprintf>

  conn->pcb.tcp = NULL;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	2200      	movs	r2, #0
 800db9c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	785b      	ldrb	r3, [r3, #1]
 800dba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	2200      	movs	r2, #0
 800dbaa:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800dbac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbb0:	2b04      	cmp	r3, #4
 800dbb2:	d114      	bne.n	800dbde <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d018      	beq.n	800dbf0 <err_tcp+0x7c>
 800dbbe:	f00b faeb 	bl	8019198 <sys_arch_protect>
 800dbc2:	61b8      	str	r0, [r7, #24]
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dbca:	f113 0f0c 	cmn.w	r3, #12
 800dbce:	db02      	blt.n	800dbd6 <err_tcp+0x62>
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	721a      	strb	r2, [r3, #8]
 800dbd6:	69b8      	ldr	r0, [r7, #24]
 800dbd8:	f00b faec 	bl	80191b4 <sys_arch_unprotect>
 800dbdc:	e008      	b.n	800dbf0 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800dbde:	f00b fadb 	bl	8019198 <sys_arch_protect>
 800dbe2:	61f8      	str	r0, [r7, #28]
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	78fa      	ldrb	r2, [r7, #3]
 800dbe8:	721a      	strb	r2, [r3, #8]
 800dbea:	69f8      	ldr	r0, [r7, #28]
 800dbec:	f00b fae2 	bl	80191b4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d005      	beq.n	800dc04 <err_tcp+0x90>
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2104      	movs	r1, #4
 800dc00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc02:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d005      	beq.n	800dc18 <err_tcp+0xa4>
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc10:	2200      	movs	r2, #0
 800dc12:	2100      	movs	r1, #0
 800dc14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc16:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d005      	beq.n	800dc2c <err_tcp+0xb8>
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc24:	2200      	movs	r2, #0
 800dc26:	2102      	movs	r1, #2
 800dc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc2a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	3310      	adds	r3, #16
 800dc30:	4618      	mov	r0, r3
 800dc32:	f00b f995 	bl	8018f60 <sys_mbox_valid>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	3310      	adds	r3, #16
 800dc40:	2100      	movs	r1, #0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f00b f917 	bl	8018e76 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	3314      	adds	r3, #20
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f00b f987 	bl	8018f60 <sys_mbox_valid>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	3314      	adds	r3, #20
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f00b f909 	bl	8018e76 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800dc64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d007      	beq.n	800dc7c <err_tcp+0x108>
 800dc6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d003      	beq.n	800dc7c <err_tcp+0x108>
 800dc74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d14d      	bne.n	800dd18 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	7f1b      	ldrb	r3, [r3, #28]
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	bf14      	ite	ne
 800dc88:	2301      	movne	r3, #1
 800dc8a:	2300      	moveq	r3, #0
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	7f1b      	ldrb	r3, [r3, #28]
 800dc94:	f023 0304 	bic.w	r3, r3, #4
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d145      	bne.n	800dd30 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <err_tcp+0x146>
 800dcac:	4b23      	ldr	r3, [pc, #140]	; (800dd3c <err_tcp+0x1c8>)
 800dcae:	f240 12b3 	movw	r2, #435	; 0x1b3
 800dcb2:	4925      	ldr	r1, [pc, #148]	; (800dd48 <err_tcp+0x1d4>)
 800dcb4:	4823      	ldr	r0, [pc, #140]	; (800dd44 <err_tcp+0x1d0>)
 800dcb6:	f00b fad3 	bl	8019260 <iprintf>
      conn->current_msg->err = err;
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	78fa      	ldrb	r2, [r7, #3]
 800dcc0:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	330c      	adds	r3, #12
 800dcca:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800dccc:	6938      	ldr	r0, [r7, #16]
 800dcce:	f00b f9d8 	bl	8019082 <sys_sem_valid>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <err_tcp+0x172>
 800dcd8:	4b18      	ldr	r3, [pc, #96]	; (800dd3c <err_tcp+0x1c8>)
 800dcda:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dcde:	491b      	ldr	r1, [pc, #108]	; (800dd4c <err_tcp+0x1d8>)
 800dce0:	4818      	ldr	r0, [pc, #96]	; (800dd44 <err_tcp+0x1d0>)
 800dce2:	f00b fabd 	bl	8019260 <iprintf>
      conn->current_msg = NULL;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	2200      	movs	r2, #0
 800dcea:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00e      	beq.n	800dd10 <err_tcp+0x19c>
 800dcf2:	f00b fa51 	bl	8019198 <sys_arch_protect>
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dcfe:	f113 0f0c 	cmn.w	r3, #12
 800dd02:	db02      	blt.n	800dd0a <err_tcp+0x196>
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	78fa      	ldrb	r2, [r7, #3]
 800dd08:	721a      	strb	r2, [r3, #8]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f00b fa52 	bl	80191b4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800dd10:	6938      	ldr	r0, [r7, #16]
 800dd12:	f00b f99c 	bl	801904e <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800dd16:	e00b      	b.n	800dd30 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <err_tcp+0x1be>
 800dd20:	4b06      	ldr	r3, [pc, #24]	; (800dd3c <err_tcp+0x1c8>)
 800dd22:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dd26:	490a      	ldr	r1, [pc, #40]	; (800dd50 <err_tcp+0x1dc>)
 800dd28:	4806      	ldr	r0, [pc, #24]	; (800dd44 <err_tcp+0x1d0>)
 800dd2a:	f00b fa99 	bl	8019260 <iprintf>
  }
}
 800dd2e:	e000      	b.n	800dd32 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800dd30:	bf00      	nop
}
 800dd32:	bf00      	nop
 800dd34:	3728      	adds	r7, #40	; 0x28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	0801a7e8 	.word	0x0801a7e8
 800dd40:	0801a930 	.word	0x0801a930
 800dd44:	0801a864 	.word	0x0801a864
 800dd48:	0801a940 	.word	0x0801a940
 800dd4c:	0801a95c 	.word	0x0801a95c
 800dd50:	0801a978 	.word	0x0801a978

0800dd54 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f004 fa5b 	bl	8012220 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800dd6a:	490a      	ldr	r1, [pc, #40]	; (800dd94 <setup_tcp+0x40>)
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f004 fa69 	bl	8012244 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800dd72:	4909      	ldr	r1, [pc, #36]	; (800dd98 <setup_tcp+0x44>)
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f004 fa87 	bl	8012288 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	4907      	ldr	r1, [pc, #28]	; (800dd9c <setup_tcp+0x48>)
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f004 fadc 	bl	801233c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800dd84:	4906      	ldr	r1, [pc, #24]	; (800dda0 <setup_tcp+0x4c>)
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f004 fa9e 	bl	80122c8 <tcp_err>
}
 800dd8c:	bf00      	nop
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	0800d8f5 	.word	0x0800d8f5
 800dd98:	0800dacd 	.word	0x0800dacd
 800dd9c:	0800da05 	.word	0x0800da05
 800dda0:	0800db75 	.word	0x0800db75

0800dda4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <accept_function+0x1e>
    return ERR_VAL;
 800ddbc:	f06f 0305 	mvn.w	r3, #5
 800ddc0:	e08d      	b.n	800dede <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	3314      	adds	r3, #20
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f00b f8ca 	bl	8018f60 <sys_mbox_valid>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d102      	bne.n	800ddd8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ddd2:	f06f 0305 	mvn.w	r3, #5
 800ddd6:	e082      	b.n	800dede <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d115      	bne.n	800de0a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	3314      	adds	r3, #20
 800dde2:	4941      	ldr	r1, [pc, #260]	; (800dee8 <accept_function+0x144>)
 800dde4:	4618      	mov	r0, r3
 800dde6:	f00b f846 	bl	8018e76 <sys_mbox_trypost>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d109      	bne.n	800de04 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <accept_function+0x60>
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	2100      	movs	r1, #0
 800de00:	69f8      	ldr	r0, [r7, #28]
 800de02:	4798      	blx	r3
    }
    return ERR_VAL;
 800de04:	f06f 0305 	mvn.w	r3, #5
 800de08:	e069      	b.n	800dede <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	781a      	ldrb	r2, [r3, #0]
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de12:	4619      	mov	r1, r3
 800de14:	4610      	mov	r0, r2
 800de16:	f000 f8ff 	bl	800e018 <netconn_alloc>
 800de1a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d115      	bne.n	800de4e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	3314      	adds	r3, #20
 800de26:	4930      	ldr	r1, [pc, #192]	; (800dee8 <accept_function+0x144>)
 800de28:	4618      	mov	r0, r3
 800de2a:	f00b f824 	bl	8018e76 <sys_mbox_trypost>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d109      	bne.n	800de48 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <accept_function+0xa4>
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de40:	2200      	movs	r2, #0
 800de42:	2100      	movs	r1, #0
 800de44:	69f8      	ldr	r0, [r7, #28]
 800de46:	4798      	blx	r3
    }
    return ERR_MEM;
 800de48:	f04f 33ff 	mov.w	r3, #4294967295
 800de4c:	e047      	b.n	800dede <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800de54:	69b8      	ldr	r0, [r7, #24]
 800de56:	f7ff ff7d 	bl	800dd54 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	79fa      	ldrb	r2, [r7, #7]
 800de5e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	3314      	adds	r3, #20
 800de64:	69b9      	ldr	r1, [r7, #24]
 800de66:	4618      	mov	r0, r3
 800de68:	f00b f805 	bl	8018e76 <sys_mbox_trypost>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d02a      	beq.n	800dec8 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800de78:	2100      	movs	r1, #0
 800de7a:	6978      	ldr	r0, [r7, #20]
 800de7c:	f004 f9d0 	bl	8012220 <tcp_arg>
    tcp_recv(pcb, NULL);
 800de80:	2100      	movs	r1, #0
 800de82:	6978      	ldr	r0, [r7, #20]
 800de84:	f004 f9de 	bl	8012244 <tcp_recv>
    tcp_sent(pcb, NULL);
 800de88:	2100      	movs	r1, #0
 800de8a:	6978      	ldr	r0, [r7, #20]
 800de8c:	f004 f9fc 	bl	8012288 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800de90:	2200      	movs	r2, #0
 800de92:	2100      	movs	r1, #0
 800de94:	6978      	ldr	r0, [r7, #20]
 800de96:	f004 fa51 	bl	801233c <tcp_poll>
    tcp_err(pcb, NULL);
 800de9a:	2100      	movs	r1, #0
 800de9c:	6978      	ldr	r0, [r7, #20]
 800de9e:	f004 fa13 	bl	80122c8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	2200      	movs	r2, #0
 800dea6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	3310      	adds	r3, #16
 800deac:	4618      	mov	r0, r3
 800deae:	f00a ffbb 	bl	8018e28 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	3310      	adds	r3, #16
 800deb6:	4618      	mov	r0, r3
 800deb8:	f00b f863 	bl	8018f82 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800debc:	69b8      	ldr	r0, [r7, #24]
 800debe:	f000 f91b 	bl	800e0f8 <netconn_free>
    return ERR_MEM;
 800dec2:	f04f 33ff 	mov.w	r3, #4294967295
 800dec6:	e00a      	b.n	800dede <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800decc:	2b00      	cmp	r3, #0
 800dece:	d005      	beq.n	800dedc <accept_function+0x138>
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	69f8      	ldr	r0, [r7, #28]
 800deda:	4798      	blx	r3
  }

  return ERR_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	2000d108 	.word	0x2000d108

0800deec <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800deec:	b590      	push	{r4, r7, lr}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d006      	beq.n	800df10 <pcb_new+0x24>
 800df02:	4b2b      	ldr	r3, [pc, #172]	; (800dfb0 <pcb_new+0xc4>)
 800df04:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800df08:	492a      	ldr	r1, [pc, #168]	; (800dfb4 <pcb_new+0xc8>)
 800df0a:	482b      	ldr	r0, [pc, #172]	; (800dfb8 <pcb_new+0xcc>)
 800df0c:	f00b f9a8 	bl	8019260 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df1a:	2b10      	cmp	r3, #16
 800df1c:	d022      	beq.n	800df64 <pcb_new+0x78>
 800df1e:	2b20      	cmp	r3, #32
 800df20:	d133      	bne.n	800df8a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681c      	ldr	r4, [r3, #0]
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	4618      	mov	r0, r3
 800df2a:	f008 fd16 	bl	801695a <udp_new_ip_type>
 800df2e:	4603      	mov	r3, r0
 800df30:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d02a      	beq.n	800df92 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	2b22      	cmp	r3, #34	; 0x22
 800df44:	d104      	bne.n	800df50 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	2201      	movs	r2, #1
 800df4e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6858      	ldr	r0, [r3, #4]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	4917      	ldr	r1, [pc, #92]	; (800dfbc <pcb_new+0xd0>)
 800df5e:	f008 fca1 	bl	80168a4 <udp_recv>
    }
    break;
 800df62:	e016      	b.n	800df92 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681c      	ldr	r4, [r3, #0]
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f004 f94a 	bl	8012204 <tcp_new_ip_type>
 800df70:	4603      	mov	r3, r0
 800df72:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00b      	beq.n	800df96 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff fee6 	bl	800dd54 <setup_tcp>
    }
    break;
 800df88:	e005      	b.n	800df96 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	22fa      	movs	r2, #250	; 0xfa
 800df8e:	711a      	strb	r2, [r3, #4]
    return;
 800df90:	e00a      	b.n	800dfa8 <pcb_new+0xbc>
    break;
 800df92:	bf00      	nop
 800df94:	e000      	b.n	800df98 <pcb_new+0xac>
    break;
 800df96:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	22ff      	movs	r2, #255	; 0xff
 800dfa6:	711a      	strb	r2, [r3, #4]
  }
}
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd90      	pop	{r4, r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	0801a7e8 	.word	0x0801a7e8
 800dfb4:	0801a994 	.word	0x0801a994
 800dfb8:	0801a864 	.word	0x0801a864
 800dfbc:	0800d7f9 	.word	0x0800d7f9

0800dfc0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7ff ff85 	bl	800deec <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d012      	beq.n	800e010 <lwip_netconn_do_newconn+0x50>
 800dfea:	f00b f8d5 	bl	8019198 <sys_arch_protect>
 800dfee:	60b8      	str	r0, [r7, #8]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dff8:	f113 0f0c 	cmn.w	r3, #12
 800dffc:	db05      	blt.n	800e00a <lwip_netconn_do_newconn+0x4a>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e008:	721a      	strb	r2, [r3, #8]
 800e00a:	68b8      	ldr	r0, [r7, #8]
 800e00c:	f00b f8d2 	bl	80191b4 <sys_arch_unprotect>
}
 800e010:	bf00      	nop
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	6039      	str	r1, [r7, #0]
 800e022:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e024:	2007      	movs	r0, #7
 800e026:	f001 fe31 	bl	800fc8c <memp_malloc>
 800e02a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <netconn_alloc+0x1e>
    return NULL;
 800e032:	2300      	movs	r3, #0
 800e034:	e055      	b.n	800e0e2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2200      	movs	r2, #0
 800e03a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	79fa      	ldrb	r2, [r7, #7]
 800e040:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2200      	movs	r2, #0
 800e046:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e04e:	2b10      	cmp	r3, #16
 800e050:	d004      	beq.n	800e05c <netconn_alloc+0x44>
 800e052:	2b20      	cmp	r3, #32
 800e054:	d105      	bne.n	800e062 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e056:	2306      	movs	r3, #6
 800e058:	60fb      	str	r3, [r7, #12]
    break;
 800e05a:	e00a      	b.n	800e072 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e05c:	2306      	movs	r3, #6
 800e05e:	60fb      	str	r3, [r7, #12]
    break;
 800e060:	e007      	b.n	800e072 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e062:	4b22      	ldr	r3, [pc, #136]	; (800e0ec <netconn_alloc+0xd4>)
 800e064:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e068:	4921      	ldr	r1, [pc, #132]	; (800e0f0 <netconn_alloc+0xd8>)
 800e06a:	4822      	ldr	r0, [pc, #136]	; (800e0f4 <netconn_alloc+0xdc>)
 800e06c:	f00b f8f8 	bl	8019260 <iprintf>
    goto free_and_return;
 800e070:	e032      	b.n	800e0d8 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	3310      	adds	r3, #16
 800e076:	68f9      	ldr	r1, [r7, #12]
 800e078:	4618      	mov	r0, r3
 800e07a:	f00a feb3 	bl	8018de4 <sys_mbox_new>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d128      	bne.n	800e0d6 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	330c      	adds	r3, #12
 800e088:	2100      	movs	r1, #0
 800e08a:	4618      	mov	r0, r3
 800e08c:	f00a ff86 	bl	8018f9c <sys_sem_new>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d005      	beq.n	800e0a2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	3310      	adds	r3, #16
 800e09a:	4618      	mov	r0, r3
 800e09c:	f00a fec4 	bl	8018e28 <sys_mbox_free>
    goto free_and_return;
 800e0a0:	e01a      	b.n	800e0d8 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	3314      	adds	r3, #20
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f00a ff6b 	bl	8018f82 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	771a      	strb	r2, [r3, #28]
  return conn;
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	e005      	b.n	800e0e2 <netconn_alloc+0xca>
    goto free_and_return;
 800e0d6:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	2007      	movs	r0, #7
 800e0dc:	f001 fe4c 	bl	800fd78 <memp_free>
  return NULL;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	0801a7e8 	.word	0x0801a7e8
 800e0f0:	0801a9b4 	.word	0x0801a9b4
 800e0f4:	0801a864 	.word	0x0801a864

0800e0f8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d006      	beq.n	800e116 <netconn_free+0x1e>
 800e108:	4b1b      	ldr	r3, [pc, #108]	; (800e178 <netconn_free+0x80>)
 800e10a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e10e:	491b      	ldr	r1, [pc, #108]	; (800e17c <netconn_free+0x84>)
 800e110:	481b      	ldr	r0, [pc, #108]	; (800e180 <netconn_free+0x88>)
 800e112:	f00b f8a5 	bl	8019260 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3310      	adds	r3, #16
 800e11a:	4618      	mov	r0, r3
 800e11c:	f00a ff20 	bl	8018f60 <sys_mbox_valid>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d006      	beq.n	800e134 <netconn_free+0x3c>
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <netconn_free+0x80>)
 800e128:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e12c:	4915      	ldr	r1, [pc, #84]	; (800e184 <netconn_free+0x8c>)
 800e12e:	4814      	ldr	r0, [pc, #80]	; (800e180 <netconn_free+0x88>)
 800e130:	f00b f896 	bl	8019260 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	3314      	adds	r3, #20
 800e138:	4618      	mov	r0, r3
 800e13a:	f00a ff11 	bl	8018f60 <sys_mbox_valid>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <netconn_free+0x5a>
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <netconn_free+0x80>)
 800e146:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e14a:	490f      	ldr	r1, [pc, #60]	; (800e188 <netconn_free+0x90>)
 800e14c:	480c      	ldr	r0, [pc, #48]	; (800e180 <netconn_free+0x88>)
 800e14e:	f00b f887 	bl	8019260 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	330c      	adds	r3, #12
 800e156:	4618      	mov	r0, r3
 800e158:	f00a ff86 	bl	8019068 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	330c      	adds	r3, #12
 800e160:	4618      	mov	r0, r3
 800e162:	f00a ff9f 	bl	80190a4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	2007      	movs	r0, #7
 800e16a:	f001 fe05 	bl	800fd78 <memp_free>
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	0801a7e8 	.word	0x0801a7e8
 800e17c:	0801a9dc 	.word	0x0801a9dc
 800e180:	0801a864 	.word	0x0801a864
 800e184:	0801aa0c 	.word	0x0801aa0c
 800e188:	0801aa48 	.word	0x0801aa48

0800e18c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3310      	adds	r3, #16
 800e198:	4618      	mov	r0, r3
 800e19a:	f00a fee1 	bl	8018f60 <sys_mbox_valid>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d035      	beq.n	800e210 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e1a4:	e01e      	b.n	800e1e4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1ae:	2b10      	cmp	r3, #16
 800e1b0:	d114      	bne.n	800e1dc <netconn_drain+0x50>
        if (mem != NULL) {
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d015      	beq.n	800e1e4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685a      	ldr	r2, [r3, #4]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	891b      	ldrh	r3, [r3, #8]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	f003 fa44 	bl	801165c <tcp_recved>
          }
          pbuf_free(p);
 800e1d4:	6978      	ldr	r0, [r7, #20]
 800e1d6:	f002 fb67 	bl	80108a8 <pbuf_free>
 800e1da:	e003      	b.n	800e1e4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 ff38 	bl	800f054 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3310      	adds	r3, #16
 800e1e8:	f107 020c 	add.w	r2, r7, #12
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f00a fe9a 	bl	8018f28 <sys_arch_mbox_tryfetch>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fa:	d1d4      	bne.n	800e1a6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3310      	adds	r3, #16
 800e200:	4618      	mov	r0, r3
 800e202:	f00a fe11 	bl	8018e28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3310      	adds	r3, #16
 800e20a:	4618      	mov	r0, r3
 800e20c:	f00a feb9 	bl	8018f82 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3314      	adds	r3, #20
 800e214:	4618      	mov	r0, r3
 800e216:	f00a fea3 	bl	8018f60 <sys_mbox_valid>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d02e      	beq.n	800e27e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e220:	e017      	b.n	800e252 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	4a18      	ldr	r2, [pc, #96]	; (800e288 <netconn_drain+0xfc>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d013      	beq.n	800e252 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800e22e:	6938      	ldr	r0, [r7, #16]
 800e230:	f7ff ffac 	bl	800e18c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d007      	beq.n	800e24c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f003 f877 	bl	8011334 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	2200      	movs	r2, #0
 800e24a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800e24c:	6938      	ldr	r0, [r7, #16]
 800e24e:	f7ff ff53 	bl	800e0f8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3314      	adds	r3, #20
 800e256:	f107 020c 	add.w	r2, r7, #12
 800e25a:	4611      	mov	r1, r2
 800e25c:	4618      	mov	r0, r3
 800e25e:	f00a fe63 	bl	8018f28 <sys_arch_mbox_tryfetch>
 800e262:	4603      	mov	r3, r0
 800e264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e268:	d1db      	bne.n	800e222 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3314      	adds	r3, #20
 800e26e:	4618      	mov	r0, r3
 800e270:	f00a fdda 	bl	8018e28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	3314      	adds	r3, #20
 800e278:	4618      	mov	r0, r3
 800e27a:	f00a fe82 	bl	8018f82 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e27e:	bf00      	nop
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	2000d108 	.word	0x2000d108

0800e28c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b088      	sub	sp, #32
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800e298:	2300      	movs	r3, #0
 800e29a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d106      	bne.n	800e2b0 <lwip_netconn_do_close_internal+0x24>
 800e2a2:	4baa      	ldr	r3, [pc, #680]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e2a4:	f240 3243 	movw	r2, #835	; 0x343
 800e2a8:	49a9      	ldr	r1, [pc, #676]	; (800e550 <lwip_netconn_do_close_internal+0x2c4>)
 800e2aa:	48aa      	ldr	r0, [pc, #680]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e2ac:	f00a ffd8 	bl	8019260 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2b8:	2b10      	cmp	r3, #16
 800e2ba:	d006      	beq.n	800e2ca <lwip_netconn_do_close_internal+0x3e>
 800e2bc:	4ba3      	ldr	r3, [pc, #652]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e2be:	f44f 7251 	mov.w	r2, #836	; 0x344
 800e2c2:	49a5      	ldr	r1, [pc, #660]	; (800e558 <lwip_netconn_do_close_internal+0x2cc>)
 800e2c4:	48a3      	ldr	r0, [pc, #652]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e2c6:	f00a ffcb 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	785b      	ldrb	r3, [r3, #1]
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	d006      	beq.n	800e2e0 <lwip_netconn_do_close_internal+0x54>
 800e2d2:	4b9e      	ldr	r3, [pc, #632]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e2d4:	f240 3245 	movw	r2, #837	; 0x345
 800e2d8:	49a0      	ldr	r1, [pc, #640]	; (800e55c <lwip_netconn_do_close_internal+0x2d0>)
 800e2da:	489e      	ldr	r0, [pc, #632]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e2dc:	f00a ffc0 	bl	8019260 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d106      	bne.n	800e2f6 <lwip_netconn_do_close_internal+0x6a>
 800e2e8:	4b98      	ldr	r3, [pc, #608]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e2ea:	f240 3246 	movw	r2, #838	; 0x346
 800e2ee:	499c      	ldr	r1, [pc, #624]	; (800e560 <lwip_netconn_do_close_internal+0x2d4>)
 800e2f0:	4898      	ldr	r0, [pc, #608]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e2f2:	f00a ffb5 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <lwip_netconn_do_close_internal+0x80>
 800e2fe:	4b93      	ldr	r3, [pc, #588]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e300:	f240 3247 	movw	r2, #839	; 0x347
 800e304:	4997      	ldr	r1, [pc, #604]	; (800e564 <lwip_netconn_do_close_internal+0x2d8>)
 800e306:	4893      	ldr	r0, [pc, #588]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e308:	f00a ffaa 	bl	8019260 <iprintf>

  tpcb = conn->pcb.tcp;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e316:	7a1b      	ldrb	r3, [r3, #8]
 800e318:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	f003 0302 	and.w	r3, r3, #2
 800e328:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b03      	cmp	r3, #3
 800e32e:	d102      	bne.n	800e336 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800e330:	2301      	movs	r3, #1
 800e332:	77bb      	strb	r3, [r7, #30]
 800e334:	e01f      	b.n	800e376 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e336:	7dbb      	ldrb	r3, [r7, #22]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00e      	beq.n	800e35a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e340:	2b05      	cmp	r3, #5
 800e342:	d007      	beq.n	800e354 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e348:	2b06      	cmp	r3, #6
 800e34a:	d003      	beq.n	800e354 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e350:	2b08      	cmp	r3, #8
 800e352:	d102      	bne.n	800e35a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800e354:	2301      	movs	r3, #1
 800e356:	77bb      	strb	r3, [r7, #30]
 800e358:	e00d      	b.n	800e376 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e35a:	7d7b      	ldrb	r3, [r7, #21]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d008      	beq.n	800e372 <lwip_netconn_do_close_internal+0xe6>
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	7e9b      	ldrb	r3, [r3, #26]
 800e364:	f003 0310 	and.w	r3, r3, #16
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800e36c:	2301      	movs	r3, #1
 800e36e:	77bb      	strb	r3, [r7, #30]
 800e370:	e001      	b.n	800e376 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800e376:	7fbb      	ldrb	r3, [r7, #30]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e37c:	2100      	movs	r1, #0
 800e37e:	69b8      	ldr	r0, [r7, #24]
 800e380:	f003 ff4e 	bl	8012220 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	7d1b      	ldrb	r3, [r3, #20]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d104      	bne.n	800e396 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e38c:	2100      	movs	r1, #0
 800e38e:	69b8      	ldr	r0, [r7, #24]
 800e390:	f003 ffbc 	bl	801230c <tcp_accept>
 800e394:	e01d      	b.n	800e3d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e396:	7dbb      	ldrb	r3, [r7, #22]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d007      	beq.n	800e3ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e39c:	2100      	movs	r1, #0
 800e39e:	69b8      	ldr	r0, [r7, #24]
 800e3a0:	f003 ff50 	bl	8012244 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	69b8      	ldr	r0, [r7, #24]
 800e3a8:	f003 ffb0 	bl	801230c <tcp_accept>
    }
    if (shut_tx) {
 800e3ac:	7d7b      	ldrb	r3, [r7, #21]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	69b8      	ldr	r0, [r7, #24]
 800e3b6:	f003 ff67 	bl	8012288 <tcp_sent>
    }
    if (close) {
 800e3ba:	7fbb      	ldrb	r3, [r7, #30]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d008      	beq.n	800e3d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	69b8      	ldr	r0, [r7, #24]
 800e3c6:	f003 ffb9 	bl	801233c <tcp_poll>
      tcp_err(tpcb, NULL);
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	69b8      	ldr	r0, [r7, #24]
 800e3ce:	f003 ff7b 	bl	80122c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800e3d2:	7fbb      	ldrb	r3, [r7, #30]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d005      	beq.n	800e3e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e3d8:	69b8      	ldr	r0, [r7, #24]
 800e3da:	f002 fe99 	bl	8011110 <tcp_close>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	77fb      	strb	r3, [r7, #31]
 800e3e2:	e007      	b.n	800e3f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e3e4:	7dbb      	ldrb	r3, [r7, #22]
 800e3e6:	7d7a      	ldrb	r2, [r7, #21]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	69b8      	ldr	r0, [r7, #24]
 800e3ec:	f002 fea8 	bl	8011140 <tcp_shutdown>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800e3f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	777b      	strb	r3, [r7, #29]
 800e400:	e016      	b.n	800e430 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d10f      	bne.n	800e42c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e410:	7a5b      	ldrb	r3, [r3, #9]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10c      	bne.n	800e430 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e416:	2301      	movs	r3, #1
 800e418:	777b      	strb	r3, [r7, #29]
        if (close) {
 800e41a:	7fbb      	ldrb	r3, [r7, #30]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d007      	beq.n	800e430 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e420:	69b8      	ldr	r0, [r7, #24]
 800e422:	f002 ff87 	bl	8011334 <tcp_abort>
          err = ERR_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	77fb      	strb	r3, [r7, #31]
 800e42a:	e001      	b.n	800e430 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e42c:	2301      	movs	r3, #1
 800e42e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800e430:	7f7b      	ldrb	r3, [r7, #29]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d056      	beq.n	800e4e4 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	330c      	adds	r3, #12
 800e43e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	7ffa      	ldrb	r2, [r7, #31]
 800e446:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d129      	bne.n	800e4b0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800e45c:	7fbb      	ldrb	r3, [r7, #30]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00c      	beq.n	800e47c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <lwip_netconn_do_close_internal+0x1f0>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e474:	2200      	movs	r2, #0
 800e476:	2104      	movs	r1, #4
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	4798      	blx	r3
      }
      if (shut_rx) {
 800e47c:	7dbb      	ldrb	r3, [r7, #22]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e486:	2b00      	cmp	r3, #0
 800e488:	d005      	beq.n	800e496 <lwip_netconn_do_close_internal+0x20a>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48e:	2200      	movs	r2, #0
 800e490:	2100      	movs	r1, #0
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	4798      	blx	r3
      }
      if (shut_tx) {
 800e496:	7d7b      	ldrb	r3, [r7, #21]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d009      	beq.n	800e4b0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d005      	beq.n	800e4b0 <lwip_netconn_do_close_internal+0x224>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2102      	movs	r1, #2
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00e      	beq.n	800e4d4 <lwip_netconn_do_close_internal+0x248>
 800e4b6:	f00a fe6f 	bl	8019198 <sys_arch_protect>
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e4c2:	f113 0f0c 	cmn.w	r3, #12
 800e4c6:	db02      	blt.n	800e4ce <lwip_netconn_do_close_internal+0x242>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7ffa      	ldrb	r2, [r7, #31]
 800e4cc:	721a      	strb	r2, [r3, #8]
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f00a fe70 	bl	80191b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e4da:	6938      	ldr	r0, [r7, #16]
 800e4dc:	f00a fdb7 	bl	801904e <sys_sem_signal>
    }
    return ERR_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e02e      	b.n	800e542 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800e4e4:	7f7b      	ldrb	r3, [r7, #29]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d11e      	bne.n	800e528 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	7d1b      	ldrb	r3, [r3, #20]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d106      	bne.n	800e500 <lwip_netconn_do_close_internal+0x274>
 800e4f2:	4b16      	ldr	r3, [pc, #88]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e4f4:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e4f8:	491b      	ldr	r1, [pc, #108]	; (800e568 <lwip_netconn_do_close_internal+0x2dc>)
 800e4fa:	4816      	ldr	r0, [pc, #88]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e4fc:	f00a feb0 	bl	8019260 <iprintf>
    if (shut_tx) {
 800e500:	7d7b      	ldrb	r3, [r7, #21]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800e506:	4919      	ldr	r1, [pc, #100]	; (800e56c <lwip_netconn_do_close_internal+0x2e0>)
 800e508:	69b8      	ldr	r0, [r7, #24]
 800e50a:	f003 febd 	bl	8012288 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e50e:	2201      	movs	r2, #1
 800e510:	4917      	ldr	r1, [pc, #92]	; (800e570 <lwip_netconn_do_close_internal+0x2e4>)
 800e512:	69b8      	ldr	r0, [r7, #24]
 800e514:	f003 ff12 	bl	801233c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e518:	4916      	ldr	r1, [pc, #88]	; (800e574 <lwip_netconn_do_close_internal+0x2e8>)
 800e51a:	69b8      	ldr	r0, [r7, #24]
 800e51c:	f003 fed4 	bl	80122c8 <tcp_err>
    tcp_arg(tpcb, conn);
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	69b8      	ldr	r0, [r7, #24]
 800e524:	f003 fe7c 	bl	8012220 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e528:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <lwip_netconn_do_close_internal+0x2b2>
 800e530:	4b06      	ldr	r3, [pc, #24]	; (800e54c <lwip_netconn_do_close_internal+0x2c0>)
 800e532:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e536:	4910      	ldr	r1, [pc, #64]	; (800e578 <lwip_netconn_do_close_internal+0x2ec>)
 800e538:	4806      	ldr	r0, [pc, #24]	; (800e554 <lwip_netconn_do_close_internal+0x2c8>)
 800e53a:	f00a fe91 	bl	8019260 <iprintf>
  return err;
 800e53e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3720      	adds	r7, #32
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	0801a7e8 	.word	0x0801a7e8
 800e550:	0801aa84 	.word	0x0801aa84
 800e554:	0801a864 	.word	0x0801a864
 800e558:	0801aa94 	.word	0x0801aa94
 800e55c:	0801aab4 	.word	0x0801aab4
 800e560:	0801aad8 	.word	0x0801aad8
 800e564:	0801a940 	.word	0x0801a940
 800e568:	0801aaec 	.word	0x0801aaec
 800e56c:	0800dacd 	.word	0x0800dacd
 800e570:	0800da05 	.word	0x0800da05
 800e574:	0800db75 	.word	0x0800db75
 800e578:	0801ab10 	.word	0x0801ab10

0800e57c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e590:	7cfb      	ldrb	r3, [r7, #19]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00d      	beq.n	800e5b2 <lwip_netconn_do_delconn+0x36>
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5a0:	2b10      	cmp	r3, #16
 800e5a2:	d006      	beq.n	800e5b2 <lwip_netconn_do_delconn+0x36>
 800e5a4:	4b6f      	ldr	r3, [pc, #444]	; (800e764 <lwip_netconn_do_delconn+0x1e8>)
 800e5a6:	f240 4201 	movw	r2, #1025	; 0x401
 800e5aa:	496f      	ldr	r1, [pc, #444]	; (800e768 <lwip_netconn_do_delconn+0x1ec>)
 800e5ac:	486f      	ldr	r0, [pc, #444]	; (800e76c <lwip_netconn_do_delconn+0x1f0>)
 800e5ae:	f00a fe57 	bl	8019260 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e5b2:	7cfb      	ldrb	r3, [r7, #19]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d005      	beq.n	800e5c4 <lwip_netconn_do_delconn+0x48>
 800e5b8:	7cfb      	ldrb	r3, [r7, #19]
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d002      	beq.n	800e5c4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e5be:	7cfb      	ldrb	r3, [r7, #19]
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d109      	bne.n	800e5d8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e5c4:	7cfb      	ldrb	r3, [r7, #19]
 800e5c6:	2b03      	cmp	r3, #3
 800e5c8:	d10a      	bne.n	800e5e0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	7f1b      	ldrb	r3, [r3, #28]
 800e5d0:	f003 0304 	and.w	r3, r3, #4
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d103      	bne.n	800e5e0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	22fb      	movs	r2, #251	; 0xfb
 800e5dc:	711a      	strb	r2, [r3, #4]
 800e5de:	e09c      	b.n	800e71a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e5e0:	7cfb      	ldrb	r3, [r7, #19]
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	d10d      	bne.n	800e602 <lwip_netconn_do_delconn+0x86>
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	7f1b      	ldrb	r3, [r3, #28]
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d106      	bne.n	800e602 <lwip_netconn_do_delconn+0x86>
 800e5f4:	4b5b      	ldr	r3, [pc, #364]	; (800e764 <lwip_netconn_do_delconn+0x1e8>)
 800e5f6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e5fa:	495d      	ldr	r1, [pc, #372]	; (800e770 <lwip_netconn_do_delconn+0x1f4>)
 800e5fc:	485b      	ldr	r0, [pc, #364]	; (800e76c <lwip_netconn_do_delconn+0x1f0>)
 800e5fe:	f00a fe2f 	bl	8019260 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2200      	movs	r2, #0
 800e606:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7ff fdbd 	bl	800e18c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d064      	beq.n	800e6e6 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e626:	2b10      	cmp	r3, #16
 800e628:	d00e      	beq.n	800e648 <lwip_netconn_do_delconn+0xcc>
 800e62a:	2b20      	cmp	r3, #32
 800e62c:	d000      	beq.n	800e630 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800e62e:	e056      	b.n	800e6de <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	f008 f941 	bl	80168c8 <udp_remove>
        break;
 800e646:	e04a      	b.n	800e6de <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d104      	bne.n	800e65c <lwip_netconn_do_delconn+0xe0>
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6a1b      	ldr	r3, [r3, #32]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d006      	beq.n	800e66a <lwip_netconn_do_delconn+0xee>
 800e65c:	4b41      	ldr	r3, [pc, #260]	; (800e764 <lwip_netconn_do_delconn+0x1e8>)
 800e65e:	f240 4235 	movw	r2, #1077	; 0x435
 800e662:	4944      	ldr	r1, [pc, #272]	; (800e774 <lwip_netconn_do_delconn+0x1f8>)
 800e664:	4841      	ldr	r0, [pc, #260]	; (800e76c <lwip_netconn_do_delconn+0x1f0>)
 800e666:	f00a fdfb 	bl	8019260 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2204      	movs	r2, #4
 800e670:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2203      	movs	r2, #3
 800e676:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2100      	movs	r1, #0
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fe00 	bl	800e28c <lwip_netconn_do_close_internal>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d064      	beq.n	800e75c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	785b      	ldrb	r3, [r3, #1]
 800e698:	2b04      	cmp	r3, #4
 800e69a:	d006      	beq.n	800e6aa <lwip_netconn_do_delconn+0x12e>
 800e69c:	4b31      	ldr	r3, [pc, #196]	; (800e764 <lwip_netconn_do_delconn+0x1e8>)
 800e69e:	f240 423b 	movw	r2, #1083	; 0x43b
 800e6a2:	4935      	ldr	r1, [pc, #212]	; (800e778 <lwip_netconn_do_delconn+0x1fc>)
 800e6a4:	4831      	ldr	r0, [pc, #196]	; (800e76c <lwip_netconn_do_delconn+0x1f0>)
 800e6a6:	f00a fddb 	bl	8019260 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e6aa:	4834      	ldr	r0, [pc, #208]	; (800e77c <lwip_netconn_do_delconn+0x200>)
 800e6ac:	f00a fd41 	bl	8019132 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	330c      	adds	r3, #12
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f00a fc97 	bl	8018fec <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e6be:	482f      	ldr	r0, [pc, #188]	; (800e77c <lwip_netconn_do_delconn+0x200>)
 800e6c0:	f00a fd28 	bl	8019114 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	785b      	ldrb	r3, [r3, #1]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d046      	beq.n	800e75c <lwip_netconn_do_delconn+0x1e0>
 800e6ce:	4b25      	ldr	r3, [pc, #148]	; (800e764 <lwip_netconn_do_delconn+0x1e8>)
 800e6d0:	f240 423f 	movw	r2, #1087	; 0x43f
 800e6d4:	4928      	ldr	r1, [pc, #160]	; (800e778 <lwip_netconn_do_delconn+0x1fc>)
 800e6d6:	4825      	ldr	r0, [pc, #148]	; (800e76c <lwip_netconn_do_delconn+0x1f0>)
 800e6d8:	f00a fdc2 	bl	8019260 <iprintf>
        return;
 800e6dc:	e03e      	b.n	800e75c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d007      	beq.n	800e700 <lwip_netconn_do_delconn+0x184>
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	6810      	ldr	r0, [r2, #0]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e706:	2b00      	cmp	r3, #0
 800e708:	d007      	beq.n	800e71a <lwip_netconn_do_delconn+0x19e>
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e710:	697a      	ldr	r2, [r7, #20]
 800e712:	6810      	ldr	r0, [r2, #0]
 800e714:	2200      	movs	r2, #0
 800e716:	2102      	movs	r1, #2
 800e718:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	330c      	adds	r3, #12
 800e720:	4618      	mov	r0, r3
 800e722:	f00a fcae 	bl	8019082 <sys_sem_valid>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d018      	beq.n	800e75e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d014      	beq.n	800e75e <lwip_netconn_do_delconn+0x1e2>
 800e734:	f00a fd30 	bl	8019198 <sys_arch_protect>
 800e738:	60f8      	str	r0, [r7, #12]
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e742:	f113 0f0c 	cmn.w	r3, #12
 800e746:	db05      	blt.n	800e754 <lwip_netconn_do_delconn+0x1d8>
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e752:	721a      	strb	r2, [r3, #8]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f00a fd2d 	bl	80191b4 <sys_arch_unprotect>
 800e75a:	e000      	b.n	800e75e <lwip_netconn_do_delconn+0x1e2>
        return;
 800e75c:	bf00      	nop
  }
}
 800e75e:	3718      	adds	r7, #24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	0801a7e8 	.word	0x0801a7e8
 800e768:	0801ab20 	.word	0x0801ab20
 800e76c:	0801a864 	.word	0x0801a864
 800e770:	0801ab34 	.word	0x0801ab34
 800e774:	0801ab54 	.word	0x0801ab54
 800e778:	0801ab70 	.word	0x0801ab70
 800e77c:	2000d10c 	.word	0x2000d10c

0800e780 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e794:	f113 0f0c 	cmn.w	r3, #12
 800e798:	da06      	bge.n	800e7a8 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	711a      	strb	r2, [r3, #4]
 800e7a6:	e030      	b.n	800e80a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	22fa      	movs	r2, #250	; 0xfa
 800e7ac:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d027      	beq.n	800e808 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7c2:	2b10      	cmp	r3, #16
 800e7c4:	d011      	beq.n	800e7ea <lwip_netconn_do_bind+0x6a>
 800e7c6:	2b20      	cmp	r3, #32
 800e7c8:	d000      	beq.n	800e7cc <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800e7ca:	e01e      	b.n	800e80a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6858      	ldr	r0, [r3, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6899      	ldr	r1, [r3, #8]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	899b      	ldrh	r3, [r3, #12]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f007 fff2 	bl	80167c4 <udp_bind>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	711a      	strb	r2, [r3, #4]
        break;
 800e7e8:	e00f      	b.n	800e80a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6858      	ldr	r0, [r3, #4]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6899      	ldr	r1, [r3, #8]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	899b      	ldrh	r3, [r3, #12]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f002 fda7 	bl	801134c <tcp_bind>
 800e7fe:	4603      	mov	r3, r0
 800e800:	461a      	mov	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	711a      	strb	r2, [r3, #4]
        break;
 800e806:	e000      	b.n	800e80a <lwip_netconn_do_bind+0x8a>
      }
    }
 800e808:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d012      	beq.n	800e838 <lwip_netconn_do_bind+0xb8>
 800e812:	f00a fcc1 	bl	8019198 <sys_arch_protect>
 800e816:	60b8      	str	r0, [r7, #8]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e820:	f113 0f0c 	cmn.w	r3, #12
 800e824:	db05      	blt.n	800e832 <lwip_netconn_do_bind+0xb2>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e830:	721a      	strb	r2, [r3, #8]
 800e832:	68b8      	ldr	r0, [r7, #8]
 800e834:	f00a fcbe 	bl	80191b4 <sys_arch_unprotect>
}
 800e838:	bf00      	nop
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e854:	f113 0f0c 	cmn.w	r3, #12
 800e858:	da06      	bge.n	800e868 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	711a      	strb	r2, [r3, #4]
 800e866:	e090      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	22f5      	movs	r2, #245	; 0xf5
 800e86c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 8088 	beq.w	800e98a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e884:	2b10      	cmp	r3, #16
 800e886:	d17d      	bne.n	800e984 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d16f      	bne.n	800e972 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	7d1b      	ldrb	r3, [r3, #20]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	22fa      	movs	r2, #250	; 0xfa
 800e8a2:	711a      	strb	r2, [r3, #4]
 800e8a4:	e071      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e8a6:	23ff      	movs	r3, #255	; 0xff
 800e8a8:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	f107 020f 	add.w	r2, r7, #15
 800e8b4:	7ef9      	ldrb	r1, [r7, #27]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f002 fdea 	bl	8011490 <tcp_listen_with_backlog_and_err>
 800e8bc:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800e8c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	711a      	strb	r2, [r3, #4]
 800e8cc:	e05d      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3310      	adds	r3, #16
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f00a fb43 	bl	8018f60 <sys_mbox_valid>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00b      	beq.n	800e8f8 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3310      	adds	r3, #16
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f00a fa9e 	bl	8018e28 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3310      	adds	r3, #16
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f00a fb45 	bl	8018f82 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	3314      	adds	r3, #20
 800e904:	4618      	mov	r0, r3
 800e906:	f00a fb2b 	bl	8018f60 <sys_mbox_valid>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10a      	bne.n	800e926 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3314      	adds	r3, #20
 800e916:	2106      	movs	r1, #6
 800e918:	4618      	mov	r0, r3
 800e91a:	f00a fa63 	bl	8018de4 <sys_mbox_new>
 800e91e:	4603      	mov	r3, r0
 800e920:	461a      	mov	r2, r3
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d118      	bne.n	800e962 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2202      	movs	r2, #2
 800e936:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4619      	mov	r1, r3
 800e94c:	4610      	mov	r0, r2
 800e94e:	f003 fc67 	bl	8012220 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	4919      	ldr	r1, [pc, #100]	; (800e9c0 <lwip_netconn_do_listen+0x180>)
 800e95a:	4618      	mov	r0, r3
 800e95c:	f003 fcd6 	bl	801230c <tcp_accept>
 800e960:	e013      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800e962:	6978      	ldr	r0, [r7, #20]
 800e964:	f002 fbd4 	bl	8011110 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2200      	movs	r2, #0
 800e96e:	605a      	str	r2, [r3, #4]
 800e970:	e00b      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d106      	bne.n	800e98a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2200      	movs	r2, #0
 800e980:	711a      	strb	r2, [r3, #4]
 800e982:	e002      	b.n	800e98a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	22f0      	movs	r2, #240	; 0xf0
 800e988:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d012      	beq.n	800e9b8 <lwip_netconn_do_listen+0x178>
 800e992:	f00a fc01 	bl	8019198 <sys_arch_protect>
 800e996:	6138      	str	r0, [r7, #16]
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9a0:	f113 0f0c 	cmn.w	r3, #12
 800e9a4:	db05      	blt.n	800e9b2 <lwip_netconn_do_listen+0x172>
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e9b0:	721a      	strb	r2, [r3, #8]
 800e9b2:	6938      	ldr	r0, [r7, #16]
 800e9b4:	f00a fbfe 	bl	80191b4 <sys_arch_unprotect>
}
 800e9b8:	bf00      	nop
 800e9ba:	3720      	adds	r7, #32
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	0800dda5 	.word	0x0800dda5

0800e9c4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d022      	beq.n	800ea26 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9ea:	2b10      	cmp	r3, #16
 800e9ec:	d11b      	bne.n	800ea26 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9fa:	d202      	bcs.n	800ea02 <lwip_netconn_do_recv+0x3e>
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	e001      	b.n	800ea06 <lwip_netconn_do_recv+0x42>
 800ea02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea06:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	89fa      	ldrh	r2, [r7, #14]
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f002 fe22 	bl	801165c <tcp_recved>
        remaining -= recved;
 800ea18:	89fb      	ldrh	r3, [r7, #14]
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e6      	bne.n	800e9f4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d012      	beq.n	800ea54 <lwip_netconn_do_recv+0x90>
 800ea2e:	f00a fbb3 	bl	8019198 <sys_arch_protect>
 800ea32:	60b8      	str	r0, [r7, #8]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea3c:	f113 0f0c 	cmn.w	r3, #12
 800ea40:	db05      	blt.n	800ea4e <lwip_netconn_do_recv+0x8a>
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ea4c:	721a      	strb	r2, [r3, #8]
 800ea4e:	68b8      	ldr	r0, [r7, #8]
 800ea50:	f00a fbb0 	bl	80191b4 <sys_arch_unprotect>
}
 800ea54:	bf00      	nop
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08a      	sub	sp, #40	; 0x28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	460b      	mov	r3, r1
 800ea66:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d106      	bne.n	800ea82 <lwip_netconn_do_writemore+0x26>
 800ea74:	4ba3      	ldr	r3, [pc, #652]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800ea76:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800ea7a:	49a3      	ldr	r1, [pc, #652]	; (800ed08 <lwip_netconn_do_writemore+0x2ac>)
 800ea7c:	48a3      	ldr	r0, [pc, #652]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800ea7e:	f00a fbef 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	785b      	ldrb	r3, [r3, #1]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d006      	beq.n	800ea98 <lwip_netconn_do_writemore+0x3c>
 800ea8a:	4b9e      	ldr	r3, [pc, #632]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800ea8c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800ea90:	499f      	ldr	r1, [pc, #636]	; (800ed10 <lwip_netconn_do_writemore+0x2b4>)
 800ea92:	489e      	ldr	r0, [pc, #632]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800ea94:	f00a fbe4 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <lwip_netconn_do_writemore+0x52>
 800eaa0:	4b98      	ldr	r3, [pc, #608]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800eaa2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800eaa6:	499b      	ldr	r1, [pc, #620]	; (800ed14 <lwip_netconn_do_writemore+0x2b8>)
 800eaa8:	4898      	ldr	r0, [pc, #608]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800eaaa:	f00a fbd9 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <lwip_netconn_do_writemore+0x68>
 800eab6:	4b93      	ldr	r3, [pc, #588]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800eab8:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800eabc:	4996      	ldr	r1, [pc, #600]	; (800ed18 <lwip_netconn_do_writemore+0x2bc>)
 800eabe:	4893      	ldr	r0, [pc, #588]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800eac0:	f00a fbce 	bl	8019260 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a1a      	ldr	r2, [r3, #32]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d306      	bcc.n	800eae0 <lwip_netconn_do_writemore+0x84>
 800ead2:	4b8c      	ldr	r3, [pc, #560]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800ead4:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800ead8:	4990      	ldr	r1, [pc, #576]	; (800ed1c <lwip_netconn_do_writemore+0x2c0>)
 800eada:	488c      	ldr	r0, [pc, #560]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800eadc:	f00a fbc0 	bl	8019260 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae4:	7c1b      	ldrb	r3, [r3, #16]
 800eae6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f1b      	ldrb	r3, [r3, #28]
 800eaee:	f003 0302 	and.w	r3, r3, #2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d105      	bne.n	800eb02 <lwip_netconn_do_writemore+0xa6>
 800eaf6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eafa:	f003 0304 	and.w	r3, r3, #4
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <lwip_netconn_do_writemore+0xaa>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <lwip_netconn_do_writemore+0xac>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb10:	689a      	ldr	r2, [r3, #8]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	4413      	add	r3, r2
 800eb18:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1e:	68da      	ldr	r2, [r3, #12]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6a1b      	ldr	r3, [r3, #32]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb2e:	d309      	bcc.n	800eb44 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800eb30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb34:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800eb36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eb3a:	f043 0302 	orr.w	r3, r3, #2
 800eb3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb42:	e001      	b.n	800eb48 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb50:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800eb52:	8afa      	ldrh	r2, [r7, #22]
 800eb54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d212      	bcs.n	800eb80 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800eb5a:	8afb      	ldrh	r3, [r7, #22]
 800eb5c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800eb5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d006      	beq.n	800eb74 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800eb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d109      	bne.n	800eb80 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800eb6c:	23f9      	movs	r3, #249	; 0xf9
 800eb6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800eb72:	e02a      	b.n	800ebca <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800eb74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eb78:	f043 0302 	orr.w	r3, r3, #2
 800eb7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a1a      	ldr	r2, [r3, #32]
 800eb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb86:	441a      	add	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d906      	bls.n	800eba0 <lwip_netconn_do_writemore+0x144>
 800eb92:	4b5c      	ldr	r3, [pc, #368]	; (800ed04 <lwip_netconn_do_writemore+0x2a8>)
 800eb94:	f240 6213 	movw	r2, #1555	; 0x613
 800eb98:	4961      	ldr	r1, [pc, #388]	; (800ed20 <lwip_netconn_do_writemore+0x2c4>)
 800eb9a:	485c      	ldr	r0, [pc, #368]	; (800ed0c <lwip_netconn_do_writemore+0x2b0>)
 800eb9c:	f00a fb60 	bl	8019260 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6858      	ldr	r0, [r3, #4]
 800eba4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eba8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebaa:	69f9      	ldr	r1, [r7, #28]
 800ebac:	f006 f97a 	bl	8014ea4 <tcp_write>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ebb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d004      	beq.n	800ebc8 <lwip_netconn_do_writemore+0x16c>
 800ebbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d133      	bne.n	800ec30 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800ebc8:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800ebca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d017      	beq.n	800ec02 <lwip_netconn_do_writemore+0x1a6>
 800ebd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d211      	bcs.n	800ec02 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <lwip_netconn_do_writemore+0x196>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebec:	2103      	movs	r1, #3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	7f1b      	ldrb	r3, [r3, #28]
 800ebf6:	f043 0310 	orr.w	r3, r3, #16
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	771a      	strb	r2, [r3, #28]
 800ec00:	e016      	b.n	800ec30 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec0a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ec0e:	d305      	bcc.n	800ec1c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ec18:	2b04      	cmp	r3, #4
 800ec1a:	d909      	bls.n	800ec30 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d005      	beq.n	800ec30 <lwip_netconn_do_writemore+0x1d4>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec2a:	2103      	movs	r1, #3
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ec30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d134      	bne.n	800eca2 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6a1a      	ldr	r2, [r3, #32]
 800ec3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec3e:	441a      	add	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a1a      	ldr	r2, [r3, #32]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d003      	beq.n	800ec5a <lwip_netconn_do_writemore+0x1fe>
 800ec52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d007      	beq.n	800ec6a <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	6a12      	ldr	r2, [r2, #32]
 800ec62:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800ec64:	2301      	movs	r3, #1
 800ec66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f006 fdca 	bl	8015808 <tcp_output>
 800ec74:	4603      	mov	r3, r0
 800ec76:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ec78:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ec7c:	f113 0f0c 	cmn.w	r3, #12
 800ec80:	db04      	blt.n	800ec8c <lwip_netconn_do_writemore+0x230>
 800ec82:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ec86:	f113 0f04 	cmn.w	r3, #4
 800ec8a:	d152      	bne.n	800ed32 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ec8c:	7d3b      	ldrb	r3, [r7, #20]
 800ec8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ec92:	2301      	movs	r3, #1
 800ec94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	60da      	str	r2, [r3, #12]
 800eca0:	e047      	b.n	800ed32 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800eca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecaa:	d13b      	bne.n	800ed24 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f006 fda9 	bl	8015808 <tcp_output>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ecba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ecbe:	f113 0f0c 	cmn.w	r3, #12
 800ecc2:	db04      	blt.n	800ecce <lwip_netconn_do_writemore+0x272>
 800ecc4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ecc8:	f113 0f04 	cmn.w	r3, #4
 800eccc:	d10a      	bne.n	800ece4 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ecce:	7d7b      	ldrb	r3, [r7, #21]
 800ecd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	2200      	movs	r2, #0
 800ece0:	60da      	str	r2, [r3, #12]
 800ece2:	e026      	b.n	800ed32 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800ece4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d022      	beq.n	800ed32 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800ecec:	23f9      	movs	r3, #249	; 0xf9
 800ecee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	60da      	str	r2, [r3, #12]
 800ed00:	e017      	b.n	800ed32 <lwip_netconn_do_writemore+0x2d6>
 800ed02:	bf00      	nop
 800ed04:	0801a7e8 	.word	0x0801a7e8
 800ed08:	0801a930 	.word	0x0801a930
 800ed0c:	0801a864 	.word	0x0801a864
 800ed10:	0801ac10 	.word	0x0801ac10
 800ed14:	0801a940 	.word	0x0801a940
 800ed18:	0801ac30 	.word	0x0801ac30
 800ed1c:	0801ac48 	.word	0x0801ac48
 800ed20:	0801ac7c 	.word	0x0801ac7c
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ed24:	2301      	movs	r3, #1
 800ed26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2e:	2200      	movs	r2, #0
 800ed30:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800ed32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d02c      	beq.n	800ed94 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	330c      	adds	r3, #12
 800ed42:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed4c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00f      	beq.n	800ed86 <lwip_netconn_do_writemore+0x32a>
 800ed66:	f00a fa17 	bl	8019198 <sys_arch_protect>
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ed72:	f113 0f0c 	cmn.w	r3, #12
 800ed76:	db03      	blt.n	800ed80 <lwip_netconn_do_writemore+0x324>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed7e:	721a      	strb	r2, [r3, #8]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f00a fa17 	bl	80191b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ed86:	78fb      	ldrb	r3, [r7, #3]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ed8c:	6938      	ldr	r0, [r7, #16]
 800ed8e:	f00a f95e 	bl	801904e <sys_sem_signal>
 800ed92:	e002      	b.n	800ed9a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ed94:	f04f 33ff 	mov.w	r3, #4294967295
 800ed98:	e000      	b.n	800ed9c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3728      	adds	r7, #40	; 0x28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800edb8:	f113 0f0c 	cmn.w	r3, #12
 800edbc:	da06      	bge.n	800edcc <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	711a      	strb	r2, [r3, #4]
 800edca:	e072      	b.n	800eeb2 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800edd6:	2b10      	cmp	r3, #16
 800edd8:	d168      	bne.n	800eeac <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	785b      	ldrb	r3, [r3, #1]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d003      	beq.n	800edec <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	22fb      	movs	r2, #251	; 0xfb
 800ede8:	711a      	strb	r2, [r3, #4]
 800edea:	e062      	b.n	800eeb2 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d056      	beq.n	800eea4 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2201      	movs	r2, #1
 800edfc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <lwip_netconn_do_write+0x6e>
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d006      	beq.n	800ee20 <lwip_netconn_do_write+0x7c>
 800ee12:	4b36      	ldr	r3, [pc, #216]	; (800eeec <lwip_netconn_do_write+0x148>)
 800ee14:	f240 6283 	movw	r2, #1667	; 0x683
 800ee18:	4935      	ldr	r1, [pc, #212]	; (800eef0 <lwip_netconn_do_write+0x14c>)
 800ee1a:	4836      	ldr	r0, [pc, #216]	; (800eef4 <lwip_netconn_do_write+0x150>)
 800ee1c:	f00a fa20 	bl	8019260 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d106      	bne.n	800ee36 <lwip_netconn_do_write+0x92>
 800ee28:	4b30      	ldr	r3, [pc, #192]	; (800eeec <lwip_netconn_do_write+0x148>)
 800ee2a:	f240 6284 	movw	r2, #1668	; 0x684
 800ee2e:	4932      	ldr	r1, [pc, #200]	; (800eef8 <lwip_netconn_do_write+0x154>)
 800ee30:	4830      	ldr	r0, [pc, #192]	; (800eef4 <lwip_netconn_do_write+0x150>)
 800ee32:	f00a fa15 	bl	8019260 <iprintf>
        msg->conn->current_msg = msg;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2200      	movs	r2, #0
 800ee44:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff fe05 	bl	800ea5c <lwip_netconn_do_writemore>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d044      	beq.n	800eee2 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	785b      	ldrb	r3, [r3, #1]
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d006      	beq.n	800ee70 <lwip_netconn_do_write+0xcc>
 800ee62:	4b22      	ldr	r3, [pc, #136]	; (800eeec <lwip_netconn_do_write+0x148>)
 800ee64:	f240 6289 	movw	r2, #1673	; 0x689
 800ee68:	4924      	ldr	r1, [pc, #144]	; (800eefc <lwip_netconn_do_write+0x158>)
 800ee6a:	4822      	ldr	r0, [pc, #136]	; (800eef4 <lwip_netconn_do_write+0x150>)
 800ee6c:	f00a f9f8 	bl	8019260 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ee70:	4823      	ldr	r0, [pc, #140]	; (800ef00 <lwip_netconn_do_write+0x15c>)
 800ee72:	f00a f95e 	bl	8019132 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	330c      	adds	r3, #12
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f00a f8b4 	bl	8018fec <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ee84:	481e      	ldr	r0, [pc, #120]	; (800ef00 <lwip_netconn_do_write+0x15c>)
 800ee86:	f00a f945 	bl	8019114 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	785b      	ldrb	r3, [r3, #1]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d126      	bne.n	800eee2 <lwip_netconn_do_write+0x13e>
 800ee94:	4b15      	ldr	r3, [pc, #84]	; (800eeec <lwip_netconn_do_write+0x148>)
 800ee96:	f240 628d 	movw	r2, #1677	; 0x68d
 800ee9a:	4918      	ldr	r1, [pc, #96]	; (800eefc <lwip_netconn_do_write+0x158>)
 800ee9c:	4815      	ldr	r0, [pc, #84]	; (800eef4 <lwip_netconn_do_write+0x150>)
 800ee9e:	f00a f9df 	bl	8019260 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800eea2:	e01e      	b.n	800eee2 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	22f5      	movs	r2, #245	; 0xf5
 800eea8:	711a      	strb	r2, [r3, #4]
 800eeaa:	e002      	b.n	800eeb2 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	22fa      	movs	r2, #250	; 0xfa
 800eeb0:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d014      	beq.n	800eee4 <lwip_netconn_do_write+0x140>
 800eeba:	f00a f96d 	bl	8019198 <sys_arch_protect>
 800eebe:	60b8      	str	r0, [r7, #8]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eec8:	f113 0f0c 	cmn.w	r3, #12
 800eecc:	db05      	blt.n	800eeda <lwip_netconn_do_write+0x136>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800eed8:	721a      	strb	r2, [r3, #8]
 800eeda:	68b8      	ldr	r0, [r7, #8]
 800eedc:	f00a f96a 	bl	80191b4 <sys_arch_unprotect>
 800eee0:	e000      	b.n	800eee4 <lwip_netconn_do_write+0x140>
        return;
 800eee2:	bf00      	nop
}
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	0801a7e8 	.word	0x0801a7e8
 800eef0:	0801ab54 	.word	0x0801ab54
 800eef4:	0801a864 	.word	0x0801a864
 800eef8:	0801aca8 	.word	0x0801aca8
 800eefc:	0801ab70 	.word	0x0801ab70
 800ef00:	2000d10c 	.word	0x2000d10c

0800ef04 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	785b      	ldrb	r3, [r3, #1]
 800ef16:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d06e      	beq.n	800f000 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef2c:	2b10      	cmp	r3, #16
 800ef2e:	d167      	bne.n	800f000 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d002      	beq.n	800ef3e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef38:	7cfb      	ldrb	r3, [r7, #19]
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d060      	beq.n	800f000 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ef3e:	7cfb      	ldrb	r3, [r7, #19]
 800ef40:	2b03      	cmp	r3, #3
 800ef42:	d103      	bne.n	800ef4c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	22f5      	movs	r2, #245	; 0xf5
 800ef48:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef4a:	e05c      	b.n	800f006 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800ef4c:	7cfb      	ldrb	r3, [r7, #19]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d103      	bne.n	800ef5a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	22fb      	movs	r2, #251	; 0xfb
 800ef56:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef58:	e055      	b.n	800f006 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	7a1b      	ldrb	r3, [r3, #8]
 800ef5e:	f003 0301 	and.w	r3, r3, #1
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d004      	beq.n	800ef70 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff f90e 	bl	800e18c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d104      	bne.n	800ef84 <lwip_netconn_do_close+0x80>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6a1b      	ldr	r3, [r3, #32]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d006      	beq.n	800ef92 <lwip_netconn_do_close+0x8e>
 800ef84:	4b2e      	ldr	r3, [pc, #184]	; (800f040 <lwip_netconn_do_close+0x13c>)
 800ef86:	f240 721c 	movw	r2, #1820	; 0x71c
 800ef8a:	492e      	ldr	r1, [pc, #184]	; (800f044 <lwip_netconn_do_close+0x140>)
 800ef8c:	482e      	ldr	r0, [pc, #184]	; (800f048 <lwip_netconn_do_close+0x144>)
 800ef8e:	f00a f967 	bl	8019260 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2204      	movs	r2, #4
 800ef98:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2100      	movs	r1, #0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff f96f 	bl	800e28c <lwip_netconn_do_close_internal>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d040      	beq.n	800f036 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	785b      	ldrb	r3, [r3, #1]
 800efba:	2b04      	cmp	r3, #4
 800efbc:	d006      	beq.n	800efcc <lwip_netconn_do_close+0xc8>
 800efbe:	4b20      	ldr	r3, [pc, #128]	; (800f040 <lwip_netconn_do_close+0x13c>)
 800efc0:	f240 7221 	movw	r2, #1825	; 0x721
 800efc4:	4921      	ldr	r1, [pc, #132]	; (800f04c <lwip_netconn_do_close+0x148>)
 800efc6:	4820      	ldr	r0, [pc, #128]	; (800f048 <lwip_netconn_do_close+0x144>)
 800efc8:	f00a f94a 	bl	8019260 <iprintf>
        UNLOCK_TCPIP_CORE();
 800efcc:	4820      	ldr	r0, [pc, #128]	; (800f050 <lwip_netconn_do_close+0x14c>)
 800efce:	f00a f8b0 	bl	8019132 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	330c      	adds	r3, #12
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f00a f806 	bl	8018fec <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800efe0:	481b      	ldr	r0, [pc, #108]	; (800f050 <lwip_netconn_do_close+0x14c>)
 800efe2:	f00a f897 	bl	8019114 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	785b      	ldrb	r3, [r3, #1]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d022      	beq.n	800f036 <lwip_netconn_do_close+0x132>
 800eff0:	4b13      	ldr	r3, [pc, #76]	; (800f040 <lwip_netconn_do_close+0x13c>)
 800eff2:	f240 7225 	movw	r2, #1829	; 0x725
 800eff6:	4915      	ldr	r1, [pc, #84]	; (800f04c <lwip_netconn_do_close+0x148>)
 800eff8:	4813      	ldr	r0, [pc, #76]	; (800f048 <lwip_netconn_do_close+0x144>)
 800effa:	f00a f931 	bl	8019260 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800effe:	e01a      	b.n	800f036 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	22f5      	movs	r2, #245	; 0xf5
 800f004:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d014      	beq.n	800f038 <lwip_netconn_do_close+0x134>
 800f00e:	f00a f8c3 	bl	8019198 <sys_arch_protect>
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f01c:	f113 0f0c 	cmn.w	r3, #12
 800f020:	db05      	blt.n	800f02e <lwip_netconn_do_close+0x12a>
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f02c:	721a      	strb	r2, [r3, #8]
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f00a f8c0 	bl	80191b4 <sys_arch_unprotect>
 800f034:	e000      	b.n	800f038 <lwip_netconn_do_close+0x134>
      return;
 800f036:	bf00      	nop
}
 800f038:	3718      	adds	r7, #24
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	0801a7e8 	.word	0x0801a7e8
 800f044:	0801ab54 	.word	0x0801ab54
 800f048:	0801a864 	.word	0x0801a864
 800f04c:	0801ab70 	.word	0x0801ab70
 800f050:	2000d10c 	.word	0x2000d10c

0800f054 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d013      	beq.n	800f08a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00b      	beq.n	800f082 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4618      	mov	r0, r3
 800f070:	f001 fc1a 	bl	80108a8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	605a      	str	r2, [r3, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	685a      	ldr	r2, [r3, #4]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f082:	6879      	ldr	r1, [r7, #4]
 800f084:	2006      	movs	r0, #6
 800f086:	f000 fe77 	bl	800fd78 <memp_free>
  }
}
 800f08a:	bf00      	nop
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
	...

0800f094 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d108      	bne.n	800f0b8 <netbuf_data+0x24>
 800f0a6:	4b1b      	ldr	r3, [pc, #108]	; (800f114 <netbuf_data+0x80>)
 800f0a8:	22c2      	movs	r2, #194	; 0xc2
 800f0aa:	491b      	ldr	r1, [pc, #108]	; (800f118 <netbuf_data+0x84>)
 800f0ac:	481b      	ldr	r0, [pc, #108]	; (800f11c <netbuf_data+0x88>)
 800f0ae:	f00a f8d7 	bl	8019260 <iprintf>
 800f0b2:	f06f 030f 	mvn.w	r3, #15
 800f0b6:	e029      	b.n	800f10c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d108      	bne.n	800f0d0 <netbuf_data+0x3c>
 800f0be:	4b15      	ldr	r3, [pc, #84]	; (800f114 <netbuf_data+0x80>)
 800f0c0:	22c3      	movs	r2, #195	; 0xc3
 800f0c2:	4917      	ldr	r1, [pc, #92]	; (800f120 <netbuf_data+0x8c>)
 800f0c4:	4815      	ldr	r0, [pc, #84]	; (800f11c <netbuf_data+0x88>)
 800f0c6:	f00a f8cb 	bl	8019260 <iprintf>
 800f0ca:	f06f 030f 	mvn.w	r3, #15
 800f0ce:	e01d      	b.n	800f10c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d108      	bne.n	800f0e8 <netbuf_data+0x54>
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <netbuf_data+0x80>)
 800f0d8:	22c4      	movs	r2, #196	; 0xc4
 800f0da:	4912      	ldr	r1, [pc, #72]	; (800f124 <netbuf_data+0x90>)
 800f0dc:	480f      	ldr	r0, [pc, #60]	; (800f11c <netbuf_data+0x88>)
 800f0de:	f00a f8bf 	bl	8019260 <iprintf>
 800f0e2:	f06f 030f 	mvn.w	r3, #15
 800f0e6:	e011      	b.n	800f10c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <netbuf_data+0x62>
    return ERR_BUF;
 800f0f0:	f06f 0301 	mvn.w	r3, #1
 800f0f4:	e00a      	b.n	800f10c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	895a      	ldrh	r2, [r3, #10]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	0801acd4 	.word	0x0801acd4
 800f118:	0801adfc 	.word	0x0801adfc
 800f11c:	0801ad44 	.word	0x0801ad44
 800f120:	0801ae18 	.word	0x0801ae18
 800f124:	0801ae38 	.word	0x0801ae38

0800f128 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d108      	bne.n	800f148 <netbuf_next+0x20>
 800f136:	4b11      	ldr	r3, [pc, #68]	; (800f17c <netbuf_next+0x54>)
 800f138:	22dc      	movs	r2, #220	; 0xdc
 800f13a:	4911      	ldr	r1, [pc, #68]	; (800f180 <netbuf_next+0x58>)
 800f13c:	4811      	ldr	r0, [pc, #68]	; (800f184 <netbuf_next+0x5c>)
 800f13e:	f00a f88f 	bl	8019260 <iprintf>
 800f142:	f04f 33ff 	mov.w	r3, #4294967295
 800f146:	e014      	b.n	800f172 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <netbuf_next+0x30>
    return -1;
 800f152:	f04f 33ff 	mov.w	r3, #4294967295
 800f156:	e00c      	b.n	800f172 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <netbuf_next+0x48>
    return 1;
 800f16c:	2301      	movs	r3, #1
 800f16e:	e000      	b.n	800f172 <netbuf_next+0x4a>
  }
  return 0;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	0801acd4 	.word	0x0801acd4
 800f180:	0801ae54 	.word	0x0801ae54
 800f184:	0801ad44 	.word	0x0801ad44

0800f188 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800f190:	4b29      	ldr	r3, [pc, #164]	; (800f238 <tcpip_thread+0xb0>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800f198:	4b27      	ldr	r3, [pc, #156]	; (800f238 <tcpip_thread+0xb0>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a27      	ldr	r2, [pc, #156]	; (800f23c <tcpip_thread+0xb4>)
 800f19e:	6812      	ldr	r2, [r2, #0]
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800f1a4:	4826      	ldr	r0, [pc, #152]	; (800f240 <tcpip_thread+0xb8>)
 800f1a6:	f009 ffb5 	bl	8019114 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800f1aa:	4825      	ldr	r0, [pc, #148]	; (800f240 <tcpip_thread+0xb8>)
 800f1ac:	f009 ffc1 	bl	8019132 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800f1b0:	f107 030c 	add.w	r3, r7, #12
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4823      	ldr	r0, [pc, #140]	; (800f244 <tcpip_thread+0xbc>)
 800f1b8:	f007 f97c 	bl	80164b4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f1bc:	4820      	ldr	r0, [pc, #128]	; (800f240 <tcpip_thread+0xb8>)
 800f1be:	f009 ffa9 	bl	8019114 <sys_mutex_lock>
    if (msg == NULL) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f1c8:	4b1f      	ldr	r3, [pc, #124]	; (800f248 <tcpip_thread+0xc0>)
 800f1ca:	2269      	movs	r2, #105	; 0x69
 800f1cc:	491f      	ldr	r1, [pc, #124]	; (800f24c <tcpip_thread+0xc4>)
 800f1ce:	4820      	ldr	r0, [pc, #128]	; (800f250 <tcpip_thread+0xc8>)
 800f1d0:	f00a f846 	bl	8019260 <iprintf>
      continue;
 800f1d4:	e02f      	b.n	800f236 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	d011      	beq.n	800f202 <tcpip_thread+0x7a>
 800f1de:	2b04      	cmp	r3, #4
 800f1e0:	d01b      	beq.n	800f21a <tcpip_thread+0x92>
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d120      	bne.n	800f228 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	6850      	ldr	r0, [r2, #4]
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	6892      	ldr	r2, [r2, #8]
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	2009      	movs	r0, #9
 800f1fc:	f000 fdbc 	bl	800fd78 <memp_free>
      break;
 800f200:	e019      	b.n	800f236 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	6892      	ldr	r2, [r2, #8]
 800f20a:	4610      	mov	r0, r2
 800f20c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	4619      	mov	r1, r3
 800f212:	2008      	movs	r0, #8
 800f214:	f000 fdb0 	bl	800fd78 <memp_free>
      break;
 800f218:	e00d      	b.n	800f236 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	6892      	ldr	r2, [r2, #8]
 800f222:	4610      	mov	r0, r2
 800f224:	4798      	blx	r3
      break;
 800f226:	e006      	b.n	800f236 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f228:	4b07      	ldr	r3, [pc, #28]	; (800f248 <tcpip_thread+0xc0>)
 800f22a:	229b      	movs	r2, #155	; 0x9b
 800f22c:	4907      	ldr	r1, [pc, #28]	; (800f24c <tcpip_thread+0xc4>)
 800f22e:	4808      	ldr	r0, [pc, #32]	; (800f250 <tcpip_thread+0xc8>)
 800f230:	f00a f816 	bl	8019260 <iprintf>
      break;
 800f234:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800f236:	e7b8      	b.n	800f1aa <tcpip_thread+0x22>
 800f238:	2000c7b0 	.word	0x2000c7b0
 800f23c:	2000c7b4 	.word	0x2000c7b4
 800f240:	2000d10c 	.word	0x2000d10c
 800f244:	2000c7b8 	.word	0x2000c7b8
 800f248:	0801ae8c 	.word	0x0801ae8c
 800f24c:	0801aee0 	.word	0x0801aee0
 800f250:	0801af00 	.word	0x0801af00

0800f254 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f260:	481a      	ldr	r0, [pc, #104]	; (800f2cc <tcpip_inpkt+0x78>)
 800f262:	f009 fe7d 	bl	8018f60 <sys_mbox_valid>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d105      	bne.n	800f278 <tcpip_inpkt+0x24>
 800f26c:	4b18      	ldr	r3, [pc, #96]	; (800f2d0 <tcpip_inpkt+0x7c>)
 800f26e:	22b5      	movs	r2, #181	; 0xb5
 800f270:	4918      	ldr	r1, [pc, #96]	; (800f2d4 <tcpip_inpkt+0x80>)
 800f272:	4819      	ldr	r0, [pc, #100]	; (800f2d8 <tcpip_inpkt+0x84>)
 800f274:	f009 fff4 	bl	8019260 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f278:	2009      	movs	r0, #9
 800f27a:	f000 fd07 	bl	800fc8c <memp_malloc>
 800f27e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d102      	bne.n	800f28c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f286:	f04f 33ff 	mov.w	r3, #4294967295
 800f28a:	e01a      	b.n	800f2c2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	2202      	movs	r2, #2
 800f290:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f2a4:	6979      	ldr	r1, [r7, #20]
 800f2a6:	4809      	ldr	r0, [pc, #36]	; (800f2cc <tcpip_inpkt+0x78>)
 800f2a8:	f009 fde5 	bl	8018e76 <sys_mbox_trypost>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d006      	beq.n	800f2c0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f2b2:	6979      	ldr	r1, [r7, #20]
 800f2b4:	2009      	movs	r0, #9
 800f2b6:	f000 fd5f 	bl	800fd78 <memp_free>
    return ERR_MEM;
 800f2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f2be:	e000      	b.n	800f2c2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f2c0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3718      	adds	r7, #24
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	2000c7b8 	.word	0x2000c7b8
 800f2d0:	0801ae8c 	.word	0x0801ae8c
 800f2d4:	0801af28 	.word	0x0801af28
 800f2d8:	0801af00 	.word	0x0801af00

0800f2dc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f2ec:	f003 0318 	and.w	r3, r3, #24
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d006      	beq.n	800f302 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f2f4:	4a08      	ldr	r2, [pc, #32]	; (800f318 <tcpip_input+0x3c>)
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff ffab 	bl	800f254 <tcpip_inpkt>
 800f2fe:	4603      	mov	r3, r0
 800f300:	e005      	b.n	800f30e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800f302:	4a06      	ldr	r2, [pc, #24]	; (800f31c <tcpip_input+0x40>)
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7ff ffa4 	bl	800f254 <tcpip_inpkt>
 800f30c:	4603      	mov	r3, r0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	08018c2d 	.word	0x08018c2d
 800f31c:	08017bf1 	.word	0x08017bf1

0800f320 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	4613      	mov	r3, r2
 800f32c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f32e:	481d      	ldr	r0, [pc, #116]	; (800f3a4 <tcpip_callback_with_block+0x84>)
 800f330:	f009 fe16 	bl	8018f60 <sys_mbox_valid>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d105      	bne.n	800f346 <tcpip_callback_with_block+0x26>
 800f33a:	4b1b      	ldr	r3, [pc, #108]	; (800f3a8 <tcpip_callback_with_block+0x88>)
 800f33c:	22ee      	movs	r2, #238	; 0xee
 800f33e:	491b      	ldr	r1, [pc, #108]	; (800f3ac <tcpip_callback_with_block+0x8c>)
 800f340:	481b      	ldr	r0, [pc, #108]	; (800f3b0 <tcpip_callback_with_block+0x90>)
 800f342:	f009 ff8d 	bl	8019260 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f346:	2008      	movs	r0, #8
 800f348:	f000 fca0 	bl	800fc8c <memp_malloc>
 800f34c:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800f354:	f04f 33ff 	mov.w	r3, #4294967295
 800f358:	e01f      	b.n	800f39a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	2203      	movs	r2, #3
 800f35e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	68ba      	ldr	r2, [r7, #8]
 800f36a:	609a      	str	r2, [r3, #8]
  if (block) {
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d004      	beq.n	800f37c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800f372:	6979      	ldr	r1, [r7, #20]
 800f374:	480b      	ldr	r0, [pc, #44]	; (800f3a4 <tcpip_callback_with_block+0x84>)
 800f376:	f009 fd69 	bl	8018e4c <sys_mbox_post>
 800f37a:	e00d      	b.n	800f398 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f37c:	6979      	ldr	r1, [r7, #20]
 800f37e:	4809      	ldr	r0, [pc, #36]	; (800f3a4 <tcpip_callback_with_block+0x84>)
 800f380:	f009 fd79 	bl	8018e76 <sys_mbox_trypost>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d006      	beq.n	800f398 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f38a:	6979      	ldr	r1, [r7, #20]
 800f38c:	2008      	movs	r0, #8
 800f38e:	f000 fcf3 	bl	800fd78 <memp_free>
      return ERR_MEM;
 800f392:	f04f 33ff 	mov.w	r3, #4294967295
 800f396:	e000      	b.n	800f39a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3718      	adds	r7, #24
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000c7b8 	.word	0x2000c7b8
 800f3a8:	0801ae8c 	.word	0x0801ae8c
 800f3ac:	0801af28 	.word	0x0801af28
 800f3b0:	0801af00 	.word	0x0801af00

0800f3b4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f3c0:	4806      	ldr	r0, [pc, #24]	; (800f3dc <tcpip_send_msg_wait_sem+0x28>)
 800f3c2:	f009 fea7 	bl	8019114 <sys_mutex_lock>
  fn(apimsg);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68b8      	ldr	r0, [r7, #8]
 800f3ca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f3cc:	4803      	ldr	r0, [pc, #12]	; (800f3dc <tcpip_send_msg_wait_sem+0x28>)
 800f3ce:	f009 feb0 	bl	8019132 <sys_mutex_unlock>
  return ERR_OK;
 800f3d2:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	2000d10c 	.word	0x2000d10c

0800f3e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af02      	add	r7, sp, #8
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f3ea:	f000 f86a 	bl	800f4c2 <lwip_init>

  tcpip_init_done = initfunc;
 800f3ee:	4a17      	ldr	r2, [pc, #92]	; (800f44c <tcpip_init+0x6c>)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f3f4:	4a16      	ldr	r2, [pc, #88]	; (800f450 <tcpip_init+0x70>)
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f3fa:	2106      	movs	r1, #6
 800f3fc:	4815      	ldr	r0, [pc, #84]	; (800f454 <tcpip_init+0x74>)
 800f3fe:	f009 fcf1 	bl	8018de4 <sys_mbox_new>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d006      	beq.n	800f416 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f408:	4b13      	ldr	r3, [pc, #76]	; (800f458 <tcpip_init+0x78>)
 800f40a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f40e:	4913      	ldr	r1, [pc, #76]	; (800f45c <tcpip_init+0x7c>)
 800f410:	4813      	ldr	r0, [pc, #76]	; (800f460 <tcpip_init+0x80>)
 800f412:	f009 ff25 	bl	8019260 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f416:	4813      	ldr	r0, [pc, #76]	; (800f464 <tcpip_init+0x84>)
 800f418:	f009 fe60 	bl	80190dc <sys_mutex_new>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d006      	beq.n	800f430 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f422:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <tcpip_init+0x78>)
 800f424:	f240 12d9 	movw	r2, #473	; 0x1d9
 800f428:	490f      	ldr	r1, [pc, #60]	; (800f468 <tcpip_init+0x88>)
 800f42a:	480d      	ldr	r0, [pc, #52]	; (800f460 <tcpip_init+0x80>)
 800f42c:	f009 ff18 	bl	8019260 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f430:	2300      	movs	r3, #0
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f438:	2200      	movs	r2, #0
 800f43a:	490c      	ldr	r1, [pc, #48]	; (800f46c <tcpip_init+0x8c>)
 800f43c:	480c      	ldr	r0, [pc, #48]	; (800f470 <tcpip_init+0x90>)
 800f43e:	f009 fe85 	bl	801914c <sys_thread_new>
}
 800f442:	bf00      	nop
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	2000c7b0 	.word	0x2000c7b0
 800f450:	2000c7b4 	.word	0x2000c7b4
 800f454:	2000c7b8 	.word	0x2000c7b8
 800f458:	0801ae8c 	.word	0x0801ae8c
 800f45c:	0801af38 	.word	0x0801af38
 800f460:	0801af00 	.word	0x0801af00
 800f464:	2000d10c 	.word	0x2000d10c
 800f468:	0801af5c 	.word	0x0801af5c
 800f46c:	0800f189 	.word	0x0800f189
 800f470:	0801af80 	.word	0x0801af80

0800f474 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800f47e:	88fb      	ldrh	r3, [r7, #6]
 800f480:	ba5b      	rev16	r3, r3
 800f482:	b29b      	uxth	r3, r3
}
 800f484:	4618      	mov	r0, r3
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	061a      	lsls	r2, r3, #24
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	021b      	lsls	r3, r3, #8
 800f4a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4a4:	431a      	orrs	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	0a1b      	lsrs	r3, r3, #8
 800f4aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	0e1b      	lsrs	r3, r3, #24
 800f4b4:	4313      	orrs	r3, r2
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f4cc:	f009 fdf8 	bl	80190c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f4d0:	f000 f8a6 	bl	800f620 <mem_init>
  memp_init();
 800f4d4:	f000 fb6c 	bl	800fbb0 <memp_init>
  pbuf_init();
  netif_init();
 800f4d8:	f000 fc78 	bl	800fdcc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f4dc:	f007 f810 	bl	8016500 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f4e0:	f001 fc58 	bl	8010d94 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f4e4:	f006 fea2 	bl	801622c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f4f8:	4b40      	ldr	r3, [pc, #256]	; (800f5fc <plug_holes+0x10c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d206      	bcs.n	800f510 <plug_holes+0x20>
 800f502:	4b3f      	ldr	r3, [pc, #252]	; (800f600 <plug_holes+0x110>)
 800f504:	f240 125d 	movw	r2, #349	; 0x15d
 800f508:	493e      	ldr	r1, [pc, #248]	; (800f604 <plug_holes+0x114>)
 800f50a:	483f      	ldr	r0, [pc, #252]	; (800f608 <plug_holes+0x118>)
 800f50c:	f009 fea8 	bl	8019260 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f510:	4b3e      	ldr	r3, [pc, #248]	; (800f60c <plug_holes+0x11c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	429a      	cmp	r2, r3
 800f518:	d306      	bcc.n	800f528 <plug_holes+0x38>
 800f51a:	4b39      	ldr	r3, [pc, #228]	; (800f600 <plug_holes+0x110>)
 800f51c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f520:	493b      	ldr	r1, [pc, #236]	; (800f610 <plug_holes+0x120>)
 800f522:	4839      	ldr	r0, [pc, #228]	; (800f608 <plug_holes+0x118>)
 800f524:	f009 fe9c 	bl	8019260 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	791b      	ldrb	r3, [r3, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d006      	beq.n	800f53e <plug_holes+0x4e>
 800f530:	4b33      	ldr	r3, [pc, #204]	; (800f600 <plug_holes+0x110>)
 800f532:	f240 125f 	movw	r2, #351	; 0x15f
 800f536:	4937      	ldr	r1, [pc, #220]	; (800f614 <plug_holes+0x124>)
 800f538:	4833      	ldr	r0, [pc, #204]	; (800f608 <plug_holes+0x118>)
 800f53a:	f009 fe91 	bl	8019260 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f546:	d906      	bls.n	800f556 <plug_holes+0x66>
 800f548:	4b2d      	ldr	r3, [pc, #180]	; (800f600 <plug_holes+0x110>)
 800f54a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f54e:	4932      	ldr	r1, [pc, #200]	; (800f618 <plug_holes+0x128>)
 800f550:	482d      	ldr	r0, [pc, #180]	; (800f608 <plug_holes+0x118>)
 800f552:	f009 fe85 	bl	8019260 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f556:	4b29      	ldr	r3, [pc, #164]	; (800f5fc <plug_holes+0x10c>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	8812      	ldrh	r2, [r2, #0]
 800f55e:	4413      	add	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	429a      	cmp	r2, r3
 800f568:	d01f      	beq.n	800f5aa <plug_holes+0xba>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	791b      	ldrb	r3, [r3, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d11b      	bne.n	800f5aa <plug_holes+0xba>
 800f572:	4b26      	ldr	r3, [pc, #152]	; (800f60c <plug_holes+0x11c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d016      	beq.n	800f5aa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f57c:	4b27      	ldr	r3, [pc, #156]	; (800f61c <plug_holes+0x12c>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	429a      	cmp	r2, r3
 800f584:	d102      	bne.n	800f58c <plug_holes+0x9c>
      lfree = mem;
 800f586:	4a25      	ldr	r2, [pc, #148]	; (800f61c <plug_holes+0x12c>)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	881a      	ldrh	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a19      	ldr	r2, [pc, #100]	; (800f5fc <plug_holes+0x10c>)
 800f598:	6812      	ldr	r2, [r2, #0]
 800f59a:	1a99      	subs	r1, r3, r2
 800f59c:	4b17      	ldr	r3, [pc, #92]	; (800f5fc <plug_holes+0x10c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	8812      	ldrh	r2, [r2, #0]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	b28a      	uxth	r2, r1
 800f5a8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f5aa:	4b14      	ldr	r3, [pc, #80]	; (800f5fc <plug_holes+0x10c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	8852      	ldrh	r2, [r2, #2]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d01a      	beq.n	800f5f4 <plug_holes+0x104>
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	791b      	ldrb	r3, [r3, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d116      	bne.n	800f5f4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f5c6:	4b15      	ldr	r3, [pc, #84]	; (800f61c <plug_holes+0x12c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d102      	bne.n	800f5d6 <plug_holes+0xe6>
      lfree = pmem;
 800f5d0:	4a12      	ldr	r2, [pc, #72]	; (800f61c <plug_holes+0x12c>)
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	881a      	ldrh	r2, [r3, #0]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	4a06      	ldr	r2, [pc, #24]	; (800f5fc <plug_holes+0x10c>)
 800f5e2:	6812      	ldr	r2, [r2, #0]
 800f5e4:	1a99      	subs	r1, r3, r2
 800f5e6:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <plug_holes+0x10c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	8812      	ldrh	r2, [r2, #0]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	b28a      	uxth	r2, r1
 800f5f2:	805a      	strh	r2, [r3, #2]
  }
}
 800f5f4:	bf00      	nop
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	2000c7bc 	.word	0x2000c7bc
 800f600:	0801af90 	.word	0x0801af90
 800f604:	0801afe4 	.word	0x0801afe4
 800f608:	0801affc 	.word	0x0801affc
 800f60c:	2000c7c0 	.word	0x2000c7c0
 800f610:	0801b024 	.word	0x0801b024
 800f614:	0801b040 	.word	0x0801b040
 800f618:	0801b05c 	.word	0x0801b05c
 800f61c:	2000c7c4 	.word	0x2000c7c4

0800f620 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f626:	4b1c      	ldr	r3, [pc, #112]	; (800f698 <mem_init+0x78>)
 800f628:	4a1c      	ldr	r2, [pc, #112]	; (800f69c <mem_init+0x7c>)
 800f62a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f62c:	4b1a      	ldr	r3, [pc, #104]	; (800f698 <mem_init+0x78>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f638:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f646:	4b14      	ldr	r3, [pc, #80]	; (800f698 <mem_init+0x78>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f64e:	4a14      	ldr	r2, [pc, #80]	; (800f6a0 <mem_init+0x80>)
 800f650:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f652:	4b13      	ldr	r3, [pc, #76]	; (800f6a0 <mem_init+0x80>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2201      	movs	r2, #1
 800f658:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f65a:	4b11      	ldr	r3, [pc, #68]	; (800f6a0 <mem_init+0x80>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f662:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f664:	4b0e      	ldr	r3, [pc, #56]	; (800f6a0 <mem_init+0x80>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f66c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f66e:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <mem_init+0x78>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4a0c      	ldr	r2, [pc, #48]	; (800f6a4 <mem_init+0x84>)
 800f674:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f676:	480c      	ldr	r0, [pc, #48]	; (800f6a8 <mem_init+0x88>)
 800f678:	f009 fd30 	bl	80190dc <sys_mutex_new>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d006      	beq.n	800f690 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f682:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <mem_init+0x8c>)
 800f684:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f688:	4909      	ldr	r1, [pc, #36]	; (800f6b0 <mem_init+0x90>)
 800f68a:	480a      	ldr	r0, [pc, #40]	; (800f6b4 <mem_init+0x94>)
 800f68c:	f009 fde8 	bl	8019260 <iprintf>
  }
}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	2000c7bc 	.word	0x2000c7bc
 800f69c:	30044000 	.word	0x30044000
 800f6a0:	2000c7c0 	.word	0x2000c7c0
 800f6a4:	2000c7c4 	.word	0x2000c7c4
 800f6a8:	2000c7c8 	.word	0x2000c7c8
 800f6ac:	0801af90 	.word	0x0801af90
 800f6b0:	0801b088 	.word	0x0801b088
 800f6b4:	0801affc 	.word	0x0801affc

0800f6b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d050      	beq.n	800f768 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f003 0303 	and.w	r3, r3, #3
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d006      	beq.n	800f6de <mem_free+0x26>
 800f6d0:	4b27      	ldr	r3, [pc, #156]	; (800f770 <mem_free+0xb8>)
 800f6d2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f6d6:	4927      	ldr	r1, [pc, #156]	; (800f774 <mem_free+0xbc>)
 800f6d8:	4827      	ldr	r0, [pc, #156]	; (800f778 <mem_free+0xc0>)
 800f6da:	f009 fdc1 	bl	8019260 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f6de:	4b27      	ldr	r3, [pc, #156]	; (800f77c <mem_free+0xc4>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d304      	bcc.n	800f6f2 <mem_free+0x3a>
 800f6e8:	4b25      	ldr	r3, [pc, #148]	; (800f780 <mem_free+0xc8>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d306      	bcc.n	800f700 <mem_free+0x48>
 800f6f2:	4b1f      	ldr	r3, [pc, #124]	; (800f770 <mem_free+0xb8>)
 800f6f4:	f240 12af 	movw	r2, #431	; 0x1af
 800f6f8:	4922      	ldr	r1, [pc, #136]	; (800f784 <mem_free+0xcc>)
 800f6fa:	481f      	ldr	r0, [pc, #124]	; (800f778 <mem_free+0xc0>)
 800f6fc:	f009 fdb0 	bl	8019260 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f700:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <mem_free+0xc4>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	429a      	cmp	r2, r3
 800f708:	d304      	bcc.n	800f714 <mem_free+0x5c>
 800f70a:	4b1d      	ldr	r3, [pc, #116]	; (800f780 <mem_free+0xc8>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	429a      	cmp	r2, r3
 800f712:	d306      	bcc.n	800f722 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f714:	f009 fd40 	bl	8019198 <sys_arch_protect>
 800f718:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f71a:	68b8      	ldr	r0, [r7, #8]
 800f71c:	f009 fd4a 	bl	80191b4 <sys_arch_unprotect>
    return;
 800f720:	e023      	b.n	800f76a <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f722:	4819      	ldr	r0, [pc, #100]	; (800f788 <mem_free+0xd0>)
 800f724:	f009 fcf6 	bl	8019114 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	3b08      	subs	r3, #8
 800f72c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	791b      	ldrb	r3, [r3, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <mem_free+0x8c>
 800f736:	4b0e      	ldr	r3, [pc, #56]	; (800f770 <mem_free+0xb8>)
 800f738:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f73c:	4913      	ldr	r1, [pc, #76]	; (800f78c <mem_free+0xd4>)
 800f73e:	480e      	ldr	r0, [pc, #56]	; (800f778 <mem_free+0xc0>)
 800f740:	f009 fd8e 	bl	8019260 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f74a:	4b11      	ldr	r3, [pc, #68]	; (800f790 <mem_free+0xd8>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	429a      	cmp	r2, r3
 800f752:	d202      	bcs.n	800f75a <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f754:	4a0e      	ldr	r2, [pc, #56]	; (800f790 <mem_free+0xd8>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f7ff fec8 	bl	800f4f0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f760:	4809      	ldr	r0, [pc, #36]	; (800f788 <mem_free+0xd0>)
 800f762:	f009 fce6 	bl	8019132 <sys_mutex_unlock>
 800f766:	e000      	b.n	800f76a <mem_free+0xb2>
    return;
 800f768:	bf00      	nop
}
 800f76a:	3710      	adds	r7, #16
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	0801af90 	.word	0x0801af90
 800f774:	0801b0a4 	.word	0x0801b0a4
 800f778:	0801affc 	.word	0x0801affc
 800f77c:	2000c7bc 	.word	0x2000c7bc
 800f780:	2000c7c0 	.word	0x2000c7c0
 800f784:	0801b0c8 	.word	0x0801b0c8
 800f788:	2000c7c8 	.word	0x2000c7c8
 800f78c:	0801b0e0 	.word	0x0801b0e0
 800f790:	2000c7c4 	.word	0x2000c7c4

0800f794 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f7a0:	887b      	ldrh	r3, [r7, #2]
 800f7a2:	3303      	adds	r3, #3
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	f023 0303 	bic.w	r3, r3, #3
 800f7aa:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f7ac:	887b      	ldrh	r3, [r7, #2]
 800f7ae:	2b0b      	cmp	r3, #11
 800f7b0:	d801      	bhi.n	800f7b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f7b2:	230c      	movs	r3, #12
 800f7b4:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f7b6:	887b      	ldrh	r3, [r7, #2]
 800f7b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7bc:	d901      	bls.n	800f7c2 <mem_trim+0x2e>
    return NULL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e0bd      	b.n	800f93e <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f7c2:	4b61      	ldr	r3, [pc, #388]	; (800f948 <mem_trim+0x1b4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d304      	bcc.n	800f7d6 <mem_trim+0x42>
 800f7cc:	4b5f      	ldr	r3, [pc, #380]	; (800f94c <mem_trim+0x1b8>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d306      	bcc.n	800f7e4 <mem_trim+0x50>
 800f7d6:	4b5e      	ldr	r3, [pc, #376]	; (800f950 <mem_trim+0x1bc>)
 800f7d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f7dc:	495d      	ldr	r1, [pc, #372]	; (800f954 <mem_trim+0x1c0>)
 800f7de:	485e      	ldr	r0, [pc, #376]	; (800f958 <mem_trim+0x1c4>)
 800f7e0:	f009 fd3e 	bl	8019260 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f7e4:	4b58      	ldr	r3, [pc, #352]	; (800f948 <mem_trim+0x1b4>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d304      	bcc.n	800f7f8 <mem_trim+0x64>
 800f7ee:	4b57      	ldr	r3, [pc, #348]	; (800f94c <mem_trim+0x1b8>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d307      	bcc.n	800f808 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f7f8:	f009 fcce 	bl	8019198 <sys_arch_protect>
 800f7fc:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	f009 fcd8 	bl	80191b4 <sys_arch_unprotect>
    return rmem;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	e09a      	b.n	800f93e <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3b08      	subs	r3, #8
 800f80c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	4a4d      	ldr	r2, [pc, #308]	; (800f948 <mem_trim+0x1b4>)
 800f812:	6812      	ldr	r2, [r2, #0]
 800f814:	1a9b      	subs	r3, r3, r2
 800f816:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	881a      	ldrh	r2, [r3, #0]
 800f81c:	8b7b      	ldrh	r3, [r7, #26]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	b29b      	uxth	r3, r3
 800f822:	3b08      	subs	r3, #8
 800f824:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f826:	887a      	ldrh	r2, [r7, #2]
 800f828:	8b3b      	ldrh	r3, [r7, #24]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d906      	bls.n	800f83c <mem_trim+0xa8>
 800f82e:	4b48      	ldr	r3, [pc, #288]	; (800f950 <mem_trim+0x1bc>)
 800f830:	f240 2206 	movw	r2, #518	; 0x206
 800f834:	4949      	ldr	r1, [pc, #292]	; (800f95c <mem_trim+0x1c8>)
 800f836:	4848      	ldr	r0, [pc, #288]	; (800f958 <mem_trim+0x1c4>)
 800f838:	f009 fd12 	bl	8019260 <iprintf>
  if (newsize > size) {
 800f83c:	887a      	ldrh	r2, [r7, #2]
 800f83e:	8b3b      	ldrh	r3, [r7, #24]
 800f840:	429a      	cmp	r2, r3
 800f842:	d901      	bls.n	800f848 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f844:	2300      	movs	r3, #0
 800f846:	e07a      	b.n	800f93e <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800f848:	887a      	ldrh	r2, [r7, #2]
 800f84a:	8b3b      	ldrh	r3, [r7, #24]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d101      	bne.n	800f854 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	e074      	b.n	800f93e <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f854:	4842      	ldr	r0, [pc, #264]	; (800f960 <mem_trim+0x1cc>)
 800f856:	f009 fc5d 	bl	8019114 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800f85a:	4b3b      	ldr	r3, [pc, #236]	; (800f948 <mem_trim+0x1b4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	69fa      	ldr	r2, [r7, #28]
 800f860:	8812      	ldrh	r2, [r2, #0]
 800f862:	4413      	add	r3, r2
 800f864:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	791b      	ldrb	r3, [r3, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d131      	bne.n	800f8d2 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	881b      	ldrh	r3, [r3, #0]
 800f872:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f874:	8b7a      	ldrh	r2, [r7, #26]
 800f876:	887b      	ldrh	r3, [r7, #2]
 800f878:	4413      	add	r3, r2
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	3308      	adds	r3, #8
 800f87e:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800f880:	4b38      	ldr	r3, [pc, #224]	; (800f964 <mem_trim+0x1d0>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	429a      	cmp	r2, r3
 800f888:	d105      	bne.n	800f896 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800f88a:	4b2f      	ldr	r3, [pc, #188]	; (800f948 <mem_trim+0x1b4>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	8a7b      	ldrh	r3, [r7, #18]
 800f890:	4413      	add	r3, r2
 800f892:	4a34      	ldr	r2, [pc, #208]	; (800f964 <mem_trim+0x1d0>)
 800f894:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f896:	4b2c      	ldr	r3, [pc, #176]	; (800f948 <mem_trim+0x1b4>)
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	8a7b      	ldrh	r3, [r7, #18]
 800f89c:	4413      	add	r3, r2
 800f89e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	8a3a      	ldrh	r2, [r7, #16]
 800f8aa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	8b7a      	ldrh	r2, [r7, #26]
 800f8b0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	8a7a      	ldrh	r2, [r7, #18]
 800f8b6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8c0:	d039      	beq.n	800f936 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f8c2:	4b21      	ldr	r3, [pc, #132]	; (800f948 <mem_trim+0x1b4>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	8812      	ldrh	r2, [r2, #0]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	8a7a      	ldrh	r2, [r7, #18]
 800f8ce:	805a      	strh	r2, [r3, #2]
 800f8d0:	e031      	b.n	800f936 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f8d2:	887b      	ldrh	r3, [r7, #2]
 800f8d4:	f103 0214 	add.w	r2, r3, #20
 800f8d8:	8b3b      	ldrh	r3, [r7, #24]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d82b      	bhi.n	800f936 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f8de:	8b7a      	ldrh	r2, [r7, #26]
 800f8e0:	887b      	ldrh	r3, [r7, #2]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	3308      	adds	r3, #8
 800f8e8:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f8ea:	4b17      	ldr	r3, [pc, #92]	; (800f948 <mem_trim+0x1b4>)
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	8a7b      	ldrh	r3, [r7, #18]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800f8f4:	4b1b      	ldr	r3, [pc, #108]	; (800f964 <mem_trim+0x1d0>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	697a      	ldr	r2, [r7, #20]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d202      	bcs.n	800f904 <mem_trim+0x170>
      lfree = mem2;
 800f8fe:	4a19      	ldr	r2, [pc, #100]	; (800f964 <mem_trim+0x1d0>)
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	2200      	movs	r2, #0
 800f908:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	881a      	ldrh	r2, [r3, #0]
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	8b7a      	ldrh	r2, [r7, #26]
 800f916:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	8a7a      	ldrh	r2, [r7, #18]
 800f91c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f926:	d006      	beq.n	800f936 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f928:	4b07      	ldr	r3, [pc, #28]	; (800f948 <mem_trim+0x1b4>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	8812      	ldrh	r2, [r2, #0]
 800f930:	4413      	add	r3, r2
 800f932:	8a7a      	ldrh	r2, [r7, #18]
 800f934:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f936:	480a      	ldr	r0, [pc, #40]	; (800f960 <mem_trim+0x1cc>)
 800f938:	f009 fbfb 	bl	8019132 <sys_mutex_unlock>
  return rmem;
 800f93c:	687b      	ldr	r3, [r7, #4]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3720      	adds	r7, #32
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	2000c7bc 	.word	0x2000c7bc
 800f94c:	2000c7c0 	.word	0x2000c7c0
 800f950:	0801af90 	.word	0x0801af90
 800f954:	0801b0f4 	.word	0x0801b0f4
 800f958:	0801affc 	.word	0x0801affc
 800f95c:	0801b10c 	.word	0x0801b10c
 800f960:	2000c7c8 	.word	0x2000c7c8
 800f964:	2000c7c4 	.word	0x2000c7c4

0800f968 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f972:	88fb      	ldrh	r3, [r7, #6]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <mem_malloc+0x14>
    return NULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	e0d1      	b.n	800fb20 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f97c:	88fb      	ldrh	r3, [r7, #6]
 800f97e:	3303      	adds	r3, #3
 800f980:	b29b      	uxth	r3, r3
 800f982:	f023 0303 	bic.w	r3, r3, #3
 800f986:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800f988:	88fb      	ldrh	r3, [r7, #6]
 800f98a:	2b0b      	cmp	r3, #11
 800f98c:	d801      	bhi.n	800f992 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f98e:	230c      	movs	r3, #12
 800f990:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f992:	88fb      	ldrh	r3, [r7, #6]
 800f994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f998:	d901      	bls.n	800f99e <mem_malloc+0x36>
    return NULL;
 800f99a:	2300      	movs	r3, #0
 800f99c:	e0c0      	b.n	800fb20 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f99e:	4862      	ldr	r0, [pc, #392]	; (800fb28 <mem_malloc+0x1c0>)
 800f9a0:	f009 fbb8 	bl	8019114 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f9a4:	4b61      	ldr	r3, [pc, #388]	; (800fb2c <mem_malloc+0x1c4>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4b61      	ldr	r3, [pc, #388]	; (800fb30 <mem_malloc+0x1c8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	83fb      	strh	r3, [r7, #30]
 800f9b2:	e0aa      	b.n	800fb0a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800f9b4:	4b5e      	ldr	r3, [pc, #376]	; (800fb30 <mem_malloc+0x1c8>)
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	8bfb      	ldrh	r3, [r7, #30]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	791b      	ldrb	r3, [r3, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f040 809b 	bne.w	800fafe <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	8bfb      	ldrh	r3, [r7, #30]
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	f1a3 0208 	sub.w	r2, r3, #8
 800f9d6:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	f0c0 8090 	bcc.w	800fafe <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	8bfb      	ldrh	r3, [r7, #30]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	f1a3 0208 	sub.w	r2, r3, #8
 800f9ec:	88fb      	ldrh	r3, [r7, #6]
 800f9ee:	3314      	adds	r3, #20
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d327      	bcc.n	800fa44 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f9f4:	8bfa      	ldrh	r2, [r7, #30]
 800f9f6:	88fb      	ldrh	r3, [r7, #6]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	3308      	adds	r3, #8
 800f9fe:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800fa00:	4b4b      	ldr	r3, [pc, #300]	; (800fb30 <mem_malloc+0x1c8>)
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	8a7b      	ldrh	r3, [r7, #18]
 800fa06:	4413      	add	r3, r2
 800fa08:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	881a      	ldrh	r2, [r3, #0]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	8bfa      	ldrh	r2, [r7, #30]
 800fa1c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	8a7a      	ldrh	r2, [r7, #18]
 800fa22:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2201      	movs	r2, #1
 800fa28:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa32:	d00a      	beq.n	800fa4a <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fa34:	4b3e      	ldr	r3, [pc, #248]	; (800fb30 <mem_malloc+0x1c8>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	8812      	ldrh	r2, [r2, #0]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	8a7a      	ldrh	r2, [r7, #18]
 800fa40:	805a      	strh	r2, [r3, #2]
 800fa42:	e002      	b.n	800fa4a <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2201      	movs	r2, #1
 800fa48:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fa4a:	4b38      	ldr	r3, [pc, #224]	; (800fb2c <mem_malloc+0x1c4>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	697a      	ldr	r2, [r7, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d127      	bne.n	800faa4 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800fa54:	4b35      	ldr	r3, [pc, #212]	; (800fb2c <mem_malloc+0x1c4>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fa5a:	e005      	b.n	800fa68 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800fa5c:	4b34      	ldr	r3, [pc, #208]	; (800fb30 <mem_malloc+0x1c8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	8812      	ldrh	r2, [r2, #0]
 800fa64:	4413      	add	r3, r2
 800fa66:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	791b      	ldrb	r3, [r3, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d004      	beq.n	800fa7a <mem_malloc+0x112>
 800fa70:	4b30      	ldr	r3, [pc, #192]	; (800fb34 <mem_malloc+0x1cc>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	69ba      	ldr	r2, [r7, #24]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d1f0      	bne.n	800fa5c <mem_malloc+0xf4>
          }
          lfree = cur;
 800fa7a:	4a2c      	ldr	r2, [pc, #176]	; (800fb2c <mem_malloc+0x1c4>)
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fa80:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <mem_malloc+0x1c4>)
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	4b2b      	ldr	r3, [pc, #172]	; (800fb34 <mem_malloc+0x1cc>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d00b      	beq.n	800faa4 <mem_malloc+0x13c>
 800fa8c:	4b27      	ldr	r3, [pc, #156]	; (800fb2c <mem_malloc+0x1c4>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	791b      	ldrb	r3, [r3, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d006      	beq.n	800faa4 <mem_malloc+0x13c>
 800fa96:	4b28      	ldr	r3, [pc, #160]	; (800fb38 <mem_malloc+0x1d0>)
 800fa98:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fa9c:	4927      	ldr	r1, [pc, #156]	; (800fb3c <mem_malloc+0x1d4>)
 800fa9e:	4828      	ldr	r0, [pc, #160]	; (800fb40 <mem_malloc+0x1d8>)
 800faa0:	f009 fbde 	bl	8019260 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800faa4:	4820      	ldr	r0, [pc, #128]	; (800fb28 <mem_malloc+0x1c0>)
 800faa6:	f009 fb44 	bl	8019132 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800faaa:	88fa      	ldrh	r2, [r7, #6]
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	4413      	add	r3, r2
 800fab0:	3308      	adds	r3, #8
 800fab2:	4a20      	ldr	r2, [pc, #128]	; (800fb34 <mem_malloc+0x1cc>)
 800fab4:	6812      	ldr	r2, [r2, #0]
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d906      	bls.n	800fac8 <mem_malloc+0x160>
 800faba:	4b1f      	ldr	r3, [pc, #124]	; (800fb38 <mem_malloc+0x1d0>)
 800fabc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800fac0:	4920      	ldr	r1, [pc, #128]	; (800fb44 <mem_malloc+0x1dc>)
 800fac2:	481f      	ldr	r0, [pc, #124]	; (800fb40 <mem_malloc+0x1d8>)
 800fac4:	f009 fbcc 	bl	8019260 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f003 0303 	and.w	r3, r3, #3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d006      	beq.n	800fae0 <mem_malloc+0x178>
 800fad2:	4b19      	ldr	r3, [pc, #100]	; (800fb38 <mem_malloc+0x1d0>)
 800fad4:	f240 22d6 	movw	r2, #726	; 0x2d6
 800fad8:	491b      	ldr	r1, [pc, #108]	; (800fb48 <mem_malloc+0x1e0>)
 800fada:	4819      	ldr	r0, [pc, #100]	; (800fb40 <mem_malloc+0x1d8>)
 800fadc:	f009 fbc0 	bl	8019260 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f003 0303 	and.w	r3, r3, #3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d006      	beq.n	800faf8 <mem_malloc+0x190>
 800faea:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <mem_malloc+0x1d0>)
 800faec:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800faf0:	4916      	ldr	r1, [pc, #88]	; (800fb4c <mem_malloc+0x1e4>)
 800faf2:	4813      	ldr	r0, [pc, #76]	; (800fb40 <mem_malloc+0x1d8>)
 800faf4:	f009 fbb4 	bl	8019260 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	3308      	adds	r3, #8
 800fafc:	e010      	b.n	800fb20 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800fafe:	4b0c      	ldr	r3, [pc, #48]	; (800fb30 <mem_malloc+0x1c8>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	8bfb      	ldrh	r3, [r7, #30]
 800fb04:	4413      	add	r3, r2
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fb0a:	8bfa      	ldrh	r2, [r7, #30]
 800fb0c:	88fb      	ldrh	r3, [r7, #6]
 800fb0e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fb12:	429a      	cmp	r2, r3
 800fb14:	f4ff af4e 	bcc.w	800f9b4 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fb18:	4803      	ldr	r0, [pc, #12]	; (800fb28 <mem_malloc+0x1c0>)
 800fb1a:	f009 fb0a 	bl	8019132 <sys_mutex_unlock>
  return NULL;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3720      	adds	r7, #32
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	2000c7c8 	.word	0x2000c7c8
 800fb2c:	2000c7c4 	.word	0x2000c7c4
 800fb30:	2000c7bc 	.word	0x2000c7bc
 800fb34:	2000c7c0 	.word	0x2000c7c0
 800fb38:	0801af90 	.word	0x0801af90
 800fb3c:	0801b12c 	.word	0x0801b12c
 800fb40:	0801affc 	.word	0x0801affc
 800fb44:	0801b148 	.word	0x0801b148
 800fb48:	0801b178 	.word	0x0801b178
 800fb4c:	0801b1a8 	.word	0x0801b1a8

0800fb50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	3303      	adds	r3, #3
 800fb66:	f023 0303 	bic.w	r3, r3, #3
 800fb6a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	e011      	b.n	800fb96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	881b      	ldrh	r3, [r3, #0]
 800fb88:	461a      	mov	r2, r3
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	3301      	adds	r3, #1
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	885b      	ldrh	r3, [r3, #2]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	dbe7      	blt.n	800fb72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fba2:	bf00      	nop
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
	...

0800fbb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	80fb      	strh	r3, [r7, #6]
 800fbba:	e009      	b.n	800fbd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fbbc:	88fb      	ldrh	r3, [r7, #6]
 800fbbe:	4a08      	ldr	r2, [pc, #32]	; (800fbe0 <memp_init+0x30>)
 800fbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff ffc3 	bl	800fb50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fbca:	88fb      	ldrh	r3, [r7, #6]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	80fb      	strh	r3, [r7, #6]
 800fbd0:	88fb      	ldrh	r3, [r7, #6]
 800fbd2:	2b0c      	cmp	r3, #12
 800fbd4:	d9f2      	bls.n	800fbbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fbd6:	bf00      	nop
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	0801ceb0 	.word	0x0801ceb0

0800fbe4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fbec:	f009 fad4 	bl	8019198 <sys_arch_protect>
 800fbf0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d015      	beq.n	800fc2c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	6812      	ldr	r2, [r2, #0]
 800fc08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	f003 0303 	and.w	r3, r3, #3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d006      	beq.n	800fc22 <do_memp_malloc_pool+0x3e>
 800fc14:	4b09      	ldr	r3, [pc, #36]	; (800fc3c <do_memp_malloc_pool+0x58>)
 800fc16:	f240 1249 	movw	r2, #329	; 0x149
 800fc1a:	4909      	ldr	r1, [pc, #36]	; (800fc40 <do_memp_malloc_pool+0x5c>)
 800fc1c:	4809      	ldr	r0, [pc, #36]	; (800fc44 <do_memp_malloc_pool+0x60>)
 800fc1e:	f009 fb1f 	bl	8019260 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f009 fac6 	bl	80191b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	e003      	b.n	800fc34 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f009 fac1 	bl	80191b4 <sys_arch_unprotect>
  return NULL;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	0801b1cc 	.word	0x0801b1cc
 800fc40:	0801b220 	.word	0x0801b220
 800fc44:	0801b244 	.word	0x0801b244

0800fc48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <memp_malloc_pool+0x1c>
 800fc56:	4b0a      	ldr	r3, [pc, #40]	; (800fc80 <memp_malloc_pool+0x38>)
 800fc58:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fc5c:	4909      	ldr	r1, [pc, #36]	; (800fc84 <memp_malloc_pool+0x3c>)
 800fc5e:	480a      	ldr	r0, [pc, #40]	; (800fc88 <memp_malloc_pool+0x40>)
 800fc60:	f009 fafe 	bl	8019260 <iprintf>
  if (desc == NULL) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <memp_malloc_pool+0x26>
    return NULL;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	e003      	b.n	800fc76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7ff ffb8 	bl	800fbe4 <do_memp_malloc_pool>
 800fc74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	0801b1cc 	.word	0x0801b1cc
 800fc84:	0801b26c 	.word	0x0801b26c
 800fc88:	0801b244 	.word	0x0801b244

0800fc8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	2b0c      	cmp	r3, #12
 800fc9a:	d908      	bls.n	800fcae <memp_malloc+0x22>
 800fc9c:	4b0a      	ldr	r3, [pc, #40]	; (800fcc8 <memp_malloc+0x3c>)
 800fc9e:	f240 1287 	movw	r2, #391	; 0x187
 800fca2:	490a      	ldr	r1, [pc, #40]	; (800fccc <memp_malloc+0x40>)
 800fca4:	480a      	ldr	r0, [pc, #40]	; (800fcd0 <memp_malloc+0x44>)
 800fca6:	f009 fadb 	bl	8019260 <iprintf>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e008      	b.n	800fcc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	4a08      	ldr	r2, [pc, #32]	; (800fcd4 <memp_malloc+0x48>)
 800fcb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff ff94 	bl	800fbe4 <do_memp_malloc_pool>
 800fcbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3710      	adds	r7, #16
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	0801b1cc 	.word	0x0801b1cc
 800fccc:	0801b280 	.word	0x0801b280
 800fcd0:	0801b244 	.word	0x0801b244
 800fcd4:	0801ceb0 	.word	0x0801ceb0

0800fcd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	f003 0303 	and.w	r3, r3, #3
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <do_memp_free_pool+0x22>
 800fcec:	4b0d      	ldr	r3, [pc, #52]	; (800fd24 <do_memp_free_pool+0x4c>)
 800fcee:	f240 129d 	movw	r2, #413	; 0x19d
 800fcf2:	490d      	ldr	r1, [pc, #52]	; (800fd28 <do_memp_free_pool+0x50>)
 800fcf4:	480d      	ldr	r0, [pc, #52]	; (800fd2c <do_memp_free_pool+0x54>)
 800fcf6:	f009 fab3 	bl	8019260 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fcfe:	f009 fa4b 	bl	8019198 <sys_arch_protect>
 800fd02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	68fa      	ldr	r2, [r7, #12]
 800fd14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fd16:	68b8      	ldr	r0, [r7, #8]
 800fd18:	f009 fa4c 	bl	80191b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fd1c:	bf00      	nop
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	0801b1cc 	.word	0x0801b1cc
 800fd28:	0801b2a0 	.word	0x0801b2a0
 800fd2c:	0801b244 	.word	0x0801b244

0800fd30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d106      	bne.n	800fd4e <memp_free_pool+0x1e>
 800fd40:	4b0a      	ldr	r3, [pc, #40]	; (800fd6c <memp_free_pool+0x3c>)
 800fd42:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800fd46:	490a      	ldr	r1, [pc, #40]	; (800fd70 <memp_free_pool+0x40>)
 800fd48:	480a      	ldr	r0, [pc, #40]	; (800fd74 <memp_free_pool+0x44>)
 800fd4a:	f009 fa89 	bl	8019260 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d007      	beq.n	800fd64 <memp_free_pool+0x34>
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d004      	beq.n	800fd64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7ff ffbb 	bl	800fcd8 <do_memp_free_pool>
 800fd62:	e000      	b.n	800fd66 <memp_free_pool+0x36>
    return;
 800fd64:	bf00      	nop
}
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	0801b1cc 	.word	0x0801b1cc
 800fd70:	0801b26c 	.word	0x0801b26c
 800fd74:	0801b244 	.word	0x0801b244

0800fd78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	4603      	mov	r3, r0
 800fd80:	6039      	str	r1, [r7, #0]
 800fd82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2b0c      	cmp	r3, #12
 800fd88:	d907      	bls.n	800fd9a <memp_free+0x22>
 800fd8a:	4b0c      	ldr	r3, [pc, #48]	; (800fdbc <memp_free+0x44>)
 800fd8c:	f240 12db 	movw	r2, #475	; 0x1db
 800fd90:	490b      	ldr	r1, [pc, #44]	; (800fdc0 <memp_free+0x48>)
 800fd92:	480c      	ldr	r0, [pc, #48]	; (800fdc4 <memp_free+0x4c>)
 800fd94:	f009 fa64 	bl	8019260 <iprintf>
 800fd98:	e00c      	b.n	800fdb4 <memp_free+0x3c>

  if (mem == NULL) {
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d008      	beq.n	800fdb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fda0:	79fb      	ldrb	r3, [r7, #7]
 800fda2:	4a09      	ldr	r2, [pc, #36]	; (800fdc8 <memp_free+0x50>)
 800fda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7ff ff94 	bl	800fcd8 <do_memp_free_pool>
 800fdb0:	e000      	b.n	800fdb4 <memp_free+0x3c>
    return;
 800fdb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	0801b1cc 	.word	0x0801b1cc
 800fdc0:	0801b2c0 	.word	0x0801b2c0
 800fdc4:	0801b244 	.word	0x0801b244
 800fdc8:	0801ceb0 	.word	0x0801ceb0

0800fdcc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fdd0:	bf00      	nop
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
	...

0800fddc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
 800fde8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d105      	bne.n	800fdfc <netif_add+0x20>
 800fdf0:	4b1f      	ldr	r3, [pc, #124]	; (800fe70 <netif_add+0x94>)
 800fdf2:	22fb      	movs	r2, #251	; 0xfb
 800fdf4:	491f      	ldr	r1, [pc, #124]	; (800fe74 <netif_add+0x98>)
 800fdf6:	4820      	ldr	r0, [pc, #128]	; (800fe78 <netif_add+0x9c>)
 800fdf8:	f009 fa32 	bl	8019260 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2200      	movs	r2, #0
 800fe06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2203      	movs	r2, #3
 800fe1a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800fe24:	4b15      	ldr	r3, [pc, #84]	; (800fe7c <netif_add+0xa0>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	b2d1      	uxtb	r1, r2
 800fe2c:	4a13      	ldr	r2, [pc, #76]	; (800fe7c <netif_add+0xa0>)
 800fe2e:	7011      	strb	r1, [r2, #0]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6a3a      	ldr	r2, [r7, #32]
 800fe3a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	68b9      	ldr	r1, [r7, #8]
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f000 f81e 	bl	800fe84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	4798      	blx	r3
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d001      	beq.n	800fe58 <netif_add+0x7c>
    return NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	e007      	b.n	800fe68 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fe58:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <netif_add+0xa4>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fe60:	4a07      	ldr	r2, [pc, #28]	; (800fe80 <netif_add+0xa4>)
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800fe66:	68fb      	ldr	r3, [r7, #12]
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	0801b2dc 	.word	0x0801b2dc
 800fe74:	0801b330 	.word	0x0801b330
 800fe78:	0801b348 	.word	0x0801b348
 800fe7c:	2000c800 	.word	0x2000c800
 800fe80:	200101bc 	.word	0x200101bc

0800fe84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d003      	beq.n	800fea0 <netif_set_addr+0x1c>
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10c      	bne.n	800feba <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800fea0:	68b9      	ldr	r1, [r7, #8]
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f000 f81a 	bl	800fedc <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800fea8:	6879      	ldr	r1, [r7, #4]
 800feaa:	68f8      	ldr	r0, [r7, #12]
 800feac:	f000 f862 	bl	800ff74 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800feb0:	6839      	ldr	r1, [r7, #0]
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f000 f84a 	bl	800ff4c <netif_set_gw>
 800feb8:	e00b      	b.n	800fed2 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f000 f859 	bl	800ff74 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f000 f841 	bl	800ff4c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800feca:	68b9      	ldr	r1, [r7, #8]
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f000 f805 	bl	800fedc <netif_set_ipaddr>
  }
}
 800fed2:	bf00      	nop
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <netif_set_ipaddr+0x18>
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	60fb      	str	r3, [r7, #12]
 800fef2:	e002      	b.n	800fefa <netif_set_ipaddr+0x1e>
 800fef4:	4b14      	ldr	r3, [pc, #80]	; (800ff48 <netif_set_ipaddr+0x6c>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3304      	adds	r3, #4
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d01c      	beq.n	800ff40 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	3304      	adds	r3, #4
 800ff0a:	f107 020c 	add.w	r2, r7, #12
 800ff0e:	4611      	mov	r1, r2
 800ff10:	4618      	mov	r0, r3
 800ff12:	f002 fb53 	bl	80125bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3304      	adds	r3, #4
 800ff1a:	f107 020c 	add.w	r2, r7, #12
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4618      	mov	r0, r3
 800ff22:	f006 fd27 	bl	8016974 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <netif_set_ipaddr+0x56>
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	e000      	b.n	800ff34 <netif_set_ipaddr+0x58>
 800ff32:	2300      	movs	r3, #0
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ff38:	2101      	movs	r1, #1
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f861 	bl	8010002 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ff40:	bf00      	nop
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	0801cf24 	.word	0x0801cf24

0800ff4c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d002      	beq.n	800ff62 <netif_set_gw+0x16>
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	e000      	b.n	800ff64 <netif_set_gw+0x18>
 800ff62:	2300      	movs	r3, #0
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800ff68:	bf00      	nop
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d002      	beq.n	800ff8a <netif_set_netmask+0x16>
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	e000      	b.n	800ff8c <netif_set_netmask+0x18>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ffa4:	4a04      	ldr	r2, [pc, #16]	; (800ffb8 <netif_set_default+0x1c>)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ffaa:	bf00      	nop
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	200101c0 	.word	0x200101c0

0800ffbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d113      	bne.n	800fffa <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffd8:	f043 0301 	orr.w	r3, r3, #1
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffea:	f003 0304 	and.w	r3, r3, #4
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d003      	beq.n	800fffa <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fff2:	2103      	movs	r1, #3
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f804 	bl	8010002 <netif_issue_reports>
    }
  }
}
 800fffa:	bf00      	nop
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b082      	sub	sp, #8
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
 801000a:	460b      	mov	r3, r1
 801000c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801000e:	78fb      	ldrb	r3, [r7, #3]
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	2b00      	cmp	r3, #0
 8010016:	d011      	beq.n	801003c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3304      	adds	r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00c      	beq.n	801003c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010028:	f003 0308 	and.w	r3, r3, #8
 801002c:	2b00      	cmp	r3, #0
 801002e:	d005      	beq.n	801003c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	3304      	adds	r3, #4
 8010034:	4619      	mov	r1, r3
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f007 fbd0 	bl	80177dc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801003c:	bf00      	nop
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010052:	f003 0301 	and.w	r3, r3, #1
 8010056:	2b00      	cmp	r3, #0
 8010058:	d012      	beq.n	8010080 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010060:	f023 0301 	bic.w	r3, r3, #1
 8010064:	b2da      	uxtb	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010072:	f003 0308 	and.w	r3, r3, #8
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f006 ff74 	bl	8016f68 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010080:	bf00      	nop
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010096:	f003 0304 	and.w	r3, r3, #4
 801009a:	2b00      	cmp	r3, #0
 801009c:	d113      	bne.n	80100c6 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80100a4:	f043 0304 	orr.w	r3, r3, #4
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80100b6:	f003 0301 	and.w	r3, r3, #1
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80100be:	2103      	movs	r1, #3
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff ff9e 	bl	8010002 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80100dc:	f003 0304 	and.w	r3, r3, #4
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d008      	beq.n	80100f6 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80100ea:	f023 0304 	bic.w	r3, r3, #4
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 80100f6:	bf00      	nop
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr
	...

08010104 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801010a:	f009 f845 	bl	8019198 <sys_arch_protect>
 801010e:	6038      	str	r0, [r7, #0]
 8010110:	4b0f      	ldr	r3, [pc, #60]	; (8010150 <pbuf_free_ooseq+0x4c>)
 8010112:	2200      	movs	r2, #0
 8010114:	701a      	strb	r2, [r3, #0]
 8010116:	6838      	ldr	r0, [r7, #0]
 8010118:	f009 f84c 	bl	80191b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801011c:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <pbuf_free_ooseq+0x50>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	607b      	str	r3, [r7, #4]
 8010122:	e00f      	b.n	8010144 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010128:	2b00      	cmp	r3, #0
 801012a:	d008      	beq.n	801013e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010130:	4618      	mov	r0, r3
 8010132:	f001 febe 	bl	8011eb2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801013c:	e005      	b.n	801014a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	607b      	str	r3, [r7, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1ec      	bne.n	8010124 <pbuf_free_ooseq+0x20>
    }
  }
}
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	200101c4 	.word	0x200101c4
 8010154:	200101cc 	.word	0x200101cc

08010158 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010160:	f7ff ffd0 	bl	8010104 <pbuf_free_ooseq>
}
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010172:	f009 f811 	bl	8019198 <sys_arch_protect>
 8010176:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010178:	4b10      	ldr	r3, [pc, #64]	; (80101bc <pbuf_pool_is_empty+0x50>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801017e:	4b0f      	ldr	r3, [pc, #60]	; (80101bc <pbuf_pool_is_empty+0x50>)
 8010180:	2201      	movs	r2, #1
 8010182:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f009 f815 	bl	80191b4 <sys_arch_unprotect>

  if (!queued) {
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d110      	bne.n	80101b2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010190:	2200      	movs	r2, #0
 8010192:	2100      	movs	r1, #0
 8010194:	480a      	ldr	r0, [pc, #40]	; (80101c0 <pbuf_pool_is_empty+0x54>)
 8010196:	f7ff f8c3 	bl	800f320 <tcpip_callback_with_block>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d008      	beq.n	80101b2 <pbuf_pool_is_empty+0x46>
 80101a0:	f008 fffa 	bl	8019198 <sys_arch_protect>
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	4b05      	ldr	r3, [pc, #20]	; (80101bc <pbuf_pool_is_empty+0x50>)
 80101a8:	2200      	movs	r2, #0
 80101aa:	701a      	strb	r2, [r3, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f009 f801 	bl	80191b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	200101c4 	.word	0x200101c4
 80101c0:	08010159 	.word	0x08010159

080101c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b088      	sub	sp, #32
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	71fb      	strb	r3, [r7, #7]
 80101ce:	460b      	mov	r3, r1
 80101d0:	80bb      	strh	r3, [r7, #4]
 80101d2:	4613      	mov	r3, r2
 80101d4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	2b04      	cmp	r3, #4
 80101da:	d81c      	bhi.n	8010216 <pbuf_alloc+0x52>
 80101dc:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <pbuf_alloc+0x20>)
 80101de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e2:	bf00      	nop
 80101e4:	080101f9 	.word	0x080101f9
 80101e8:	080101ff 	.word	0x080101ff
 80101ec:	08010205 	.word	0x08010205
 80101f0:	0801020b 	.word	0x0801020b
 80101f4:	08010211 	.word	0x08010211
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80101f8:	2336      	movs	r3, #54	; 0x36
 80101fa:	82fb      	strh	r3, [r7, #22]
    break;
 80101fc:	e014      	b.n	8010228 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80101fe:	2322      	movs	r3, #34	; 0x22
 8010200:	82fb      	strh	r3, [r7, #22]
    break;
 8010202:	e011      	b.n	8010228 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010204:	230e      	movs	r3, #14
 8010206:	82fb      	strh	r3, [r7, #22]
    break;
 8010208:	e00e      	b.n	8010228 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801020a:	2300      	movs	r3, #0
 801020c:	82fb      	strh	r3, [r7, #22]
    break;
 801020e:	e00b      	b.n	8010228 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	82fb      	strh	r3, [r7, #22]
    break;
 8010214:	e008      	b.n	8010228 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8010216:	4ba5      	ldr	r3, [pc, #660]	; (80104ac <pbuf_alloc+0x2e8>)
 8010218:	f44f 728b 	mov.w	r2, #278	; 0x116
 801021c:	49a4      	ldr	r1, [pc, #656]	; (80104b0 <pbuf_alloc+0x2ec>)
 801021e:	48a5      	ldr	r0, [pc, #660]	; (80104b4 <pbuf_alloc+0x2f0>)
 8010220:	f009 f81e 	bl	8019260 <iprintf>
    return NULL;
 8010224:	2300      	movs	r3, #0
 8010226:	e15d      	b.n	80104e4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8010228:	79bb      	ldrb	r3, [r7, #6]
 801022a:	2b03      	cmp	r3, #3
 801022c:	f200 8134 	bhi.w	8010498 <pbuf_alloc+0x2d4>
 8010230:	a201      	add	r2, pc, #4	; (adr r2, 8010238 <pbuf_alloc+0x74>)
 8010232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010236:	bf00      	nop
 8010238:	080103d9 	.word	0x080103d9
 801023c:	08010465 	.word	0x08010465
 8010240:	08010465 	.word	0x08010465
 8010244:	08010249 	.word	0x08010249
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010248:	200c      	movs	r0, #12
 801024a:	f7ff fd1f 	bl	800fc8c <memp_malloc>
 801024e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d103      	bne.n	801025e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8010256:	f7ff ff89 	bl	801016c <pbuf_pool_is_empty>
      return NULL;
 801025a:	2300      	movs	r3, #0
 801025c:	e142      	b.n	80104e4 <pbuf_alloc+0x320>
    }
    p->type = type;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	79ba      	ldrb	r2, [r7, #6]
 8010262:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	2200      	movs	r2, #0
 8010268:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801026a:	8afb      	ldrh	r3, [r7, #22]
 801026c:	3310      	adds	r3, #16
 801026e:	69fa      	ldr	r2, [r7, #28]
 8010270:	4413      	add	r3, r2
 8010272:	3303      	adds	r3, #3
 8010274:	f023 0303 	bic.w	r3, r3, #3
 8010278:	461a      	mov	r2, r3
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	f003 0303 	and.w	r3, r3, #3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d006      	beq.n	8010298 <pbuf_alloc+0xd4>
 801028a:	4b88      	ldr	r3, [pc, #544]	; (80104ac <pbuf_alloc+0x2e8>)
 801028c:	f240 1229 	movw	r2, #297	; 0x129
 8010290:	4989      	ldr	r1, [pc, #548]	; (80104b8 <pbuf_alloc+0x2f4>)
 8010292:	4888      	ldr	r0, [pc, #544]	; (80104b4 <pbuf_alloc+0x2f0>)
 8010294:	f008 ffe4 	bl	8019260 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	88ba      	ldrh	r2, [r7, #4]
 801029c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801029e:	8afb      	ldrh	r3, [r7, #22]
 80102a0:	3303      	adds	r3, #3
 80102a2:	f023 0303 	bic.w	r3, r3, #3
 80102a6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80102aa:	88bb      	ldrh	r3, [r7, #4]
 80102ac:	4293      	cmp	r3, r2
 80102ae:	bf28      	it	cs
 80102b0:	4613      	movcs	r3, r2
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	69fa      	ldr	r2, [r7, #28]
 80102be:	8952      	ldrh	r2, [r2, #10]
 80102c0:	441a      	add	r2, r3
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d906      	bls.n	80102da <pbuf_alloc+0x116>
 80102cc:	4b77      	ldr	r3, [pc, #476]	; (80104ac <pbuf_alloc+0x2e8>)
 80102ce:	f44f 7298 	mov.w	r2, #304	; 0x130
 80102d2:	497a      	ldr	r1, [pc, #488]	; (80104bc <pbuf_alloc+0x2f8>)
 80102d4:	4877      	ldr	r0, [pc, #476]	; (80104b4 <pbuf_alloc+0x2f0>)
 80102d6:	f008 ffc3 	bl	8019260 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80102da:	8afb      	ldrh	r3, [r7, #22]
 80102dc:	3303      	adds	r3, #3
 80102de:	f023 0303 	bic.w	r3, r3, #3
 80102e2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80102e6:	d106      	bne.n	80102f6 <pbuf_alloc+0x132>
 80102e8:	4b70      	ldr	r3, [pc, #448]	; (80104ac <pbuf_alloc+0x2e8>)
 80102ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80102ee:	4974      	ldr	r1, [pc, #464]	; (80104c0 <pbuf_alloc+0x2fc>)
 80102f0:	4870      	ldr	r0, [pc, #448]	; (80104b4 <pbuf_alloc+0x2f0>)
 80102f2:	f008 ffb5 	bl	8019260 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	2201      	movs	r2, #1
 80102fa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8010300:	88bb      	ldrh	r3, [r7, #4]
 8010302:	69fa      	ldr	r2, [r7, #28]
 8010304:	8952      	ldrh	r2, [r2, #10]
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801030a:	e061      	b.n	80103d0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801030c:	200c      	movs	r0, #12
 801030e:	f7ff fcbd 	bl	800fc8c <memp_malloc>
 8010312:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801031a:	f7ff ff27 	bl	801016c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801031e:	69f8      	ldr	r0, [r7, #28]
 8010320:	f000 fac2 	bl	80108a8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8010324:	2300      	movs	r3, #0
 8010326:	e0dd      	b.n	80104e4 <pbuf_alloc+0x320>
      }
      q->type = type;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	79ba      	ldrb	r2, [r7, #6]
 801032c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2200      	movs	r2, #0
 8010332:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2200      	movs	r2, #0
 8010338:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010346:	4293      	cmp	r3, r2
 8010348:	dd06      	ble.n	8010358 <pbuf_alloc+0x194>
 801034a:	4b58      	ldr	r3, [pc, #352]	; (80104ac <pbuf_alloc+0x2e8>)
 801034c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8010350:	495c      	ldr	r1, [pc, #368]	; (80104c4 <pbuf_alloc+0x300>)
 8010352:	4858      	ldr	r0, [pc, #352]	; (80104b4 <pbuf_alloc+0x2f0>)
 8010354:	f008 ff84 	bl	8019260 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	b29a      	uxth	r2, r3
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	b29b      	uxth	r3, r3
 8010364:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010368:	bf28      	it	cs
 801036a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 801036e:	b29a      	uxth	r2, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f103 0210 	add.w	r2, r3, #16
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	f003 0303 	and.w	r3, r3, #3
 8010386:	2b00      	cmp	r3, #0
 8010388:	d006      	beq.n	8010398 <pbuf_alloc+0x1d4>
 801038a:	4b48      	ldr	r3, [pc, #288]	; (80104ac <pbuf_alloc+0x2e8>)
 801038c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8010390:	494d      	ldr	r1, [pc, #308]	; (80104c8 <pbuf_alloc+0x304>)
 8010392:	4848      	ldr	r0, [pc, #288]	; (80104b4 <pbuf_alloc+0x2f0>)
 8010394:	f008 ff64 	bl	8019260 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	69fa      	ldr	r2, [r7, #28]
 801039e:	8952      	ldrh	r2, [r2, #10]
 80103a0:	441a      	add	r2, r3
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d906      	bls.n	80103ba <pbuf_alloc+0x1f6>
 80103ac:	4b3f      	ldr	r3, [pc, #252]	; (80104ac <pbuf_alloc+0x2e8>)
 80103ae:	f240 1255 	movw	r2, #341	; 0x155
 80103b2:	4942      	ldr	r1, [pc, #264]	; (80104bc <pbuf_alloc+0x2f8>)
 80103b4:	483f      	ldr	r0, [pc, #252]	; (80104b4 <pbuf_alloc+0x2f0>)
 80103b6:	f008 ff53 	bl	8019260 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2201      	movs	r2, #1
 80103be:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	895b      	ldrh	r3, [r3, #10]
 80103c4:	461a      	mov	r2, r3
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	1a9b      	subs	r3, r3, r2
 80103ca:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dc9a      	bgt.n	801030c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80103d6:	e07e      	b.n	80104d6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80103d8:	8afb      	ldrh	r3, [r7, #22]
 80103da:	3313      	adds	r3, #19
 80103dc:	b29b      	uxth	r3, r3
 80103de:	f023 0303 	bic.w	r3, r3, #3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	88bb      	ldrh	r3, [r7, #4]
 80103e6:	3303      	adds	r3, #3
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	4413      	add	r3, r2
 80103f2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80103f4:	897a      	ldrh	r2, [r7, #10]
 80103f6:	88bb      	ldrh	r3, [r7, #4]
 80103f8:	3303      	adds	r3, #3
 80103fa:	f023 0303 	bic.w	r3, r3, #3
 80103fe:	429a      	cmp	r2, r3
 8010400:	d201      	bcs.n	8010406 <pbuf_alloc+0x242>
        return NULL;
 8010402:	2300      	movs	r3, #0
 8010404:	e06e      	b.n	80104e4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8010406:	897b      	ldrh	r3, [r7, #10]
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff faad 	bl	800f968 <mem_malloc>
 801040e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d101      	bne.n	801041a <pbuf_alloc+0x256>
      return NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	e064      	b.n	80104e4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801041a:	8afb      	ldrh	r3, [r7, #22]
 801041c:	3310      	adds	r3, #16
 801041e:	69fa      	ldr	r2, [r7, #28]
 8010420:	4413      	add	r3, r2
 8010422:	3303      	adds	r3, #3
 8010424:	f023 0303 	bic.w	r3, r3, #3
 8010428:	461a      	mov	r2, r3
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	88ba      	ldrh	r2, [r7, #4]
 8010432:	811a      	strh	r2, [r3, #8]
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	891a      	ldrh	r2, [r3, #8]
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	2200      	movs	r2, #0
 8010440:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	79ba      	ldrb	r2, [r7, #6]
 8010446:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	f003 0303 	and.w	r3, r3, #3
 8010450:	2b00      	cmp	r3, #0
 8010452:	d03f      	beq.n	80104d4 <pbuf_alloc+0x310>
 8010454:	4b15      	ldr	r3, [pc, #84]	; (80104ac <pbuf_alloc+0x2e8>)
 8010456:	f240 1277 	movw	r2, #375	; 0x177
 801045a:	491c      	ldr	r1, [pc, #112]	; (80104cc <pbuf_alloc+0x308>)
 801045c:	4815      	ldr	r0, [pc, #84]	; (80104b4 <pbuf_alloc+0x2f0>)
 801045e:	f008 feff 	bl	8019260 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8010462:	e037      	b.n	80104d4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010464:	200b      	movs	r0, #11
 8010466:	f7ff fc11 	bl	800fc8c <memp_malloc>
 801046a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d101      	bne.n	8010476 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8010472:	2300      	movs	r3, #0
 8010474:	e036      	b.n	80104e4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	2200      	movs	r2, #0
 801047a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	88ba      	ldrh	r2, [r7, #4]
 8010480:	811a      	strh	r2, [r3, #8]
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	891a      	ldrh	r2, [r3, #8]
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	2200      	movs	r2, #0
 801048e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	79ba      	ldrb	r2, [r7, #6]
 8010494:	731a      	strb	r2, [r3, #12]
    break;
 8010496:	e01e      	b.n	80104d6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010498:	4b04      	ldr	r3, [pc, #16]	; (80104ac <pbuf_alloc+0x2e8>)
 801049a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801049e:	490c      	ldr	r1, [pc, #48]	; (80104d0 <pbuf_alloc+0x30c>)
 80104a0:	4804      	ldr	r0, [pc, #16]	; (80104b4 <pbuf_alloc+0x2f0>)
 80104a2:	f008 fedd 	bl	8019260 <iprintf>
    return NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	e01c      	b.n	80104e4 <pbuf_alloc+0x320>
 80104aa:	bf00      	nop
 80104ac:	0801b370 	.word	0x0801b370
 80104b0:	0801b3c4 	.word	0x0801b3c4
 80104b4:	0801b3e0 	.word	0x0801b3e0
 80104b8:	0801b408 	.word	0x0801b408
 80104bc:	0801b438 	.word	0x0801b438
 80104c0:	0801b46c 	.word	0x0801b46c
 80104c4:	0801b4a0 	.word	0x0801b4a0
 80104c8:	0801b4b4 	.word	0x0801b4b4
 80104cc:	0801b4e4 	.word	0x0801b4e4
 80104d0:	0801b510 	.word	0x0801b510
    break;
 80104d4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	2201      	movs	r2, #1
 80104da:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	2200      	movs	r2, #0
 80104e0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80104e2:	69fb      	ldr	r3, [r7, #28]
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3720      	adds	r7, #32
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	603b      	str	r3, [r7, #0]
 80104f4:	4603      	mov	r3, r0
 80104f6:	71fb      	strb	r3, [r7, #7]
 80104f8:	460b      	mov	r3, r1
 80104fa:	80bb      	strh	r3, [r7, #4]
 80104fc:	4613      	mov	r3, r2
 80104fe:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010500:	79fb      	ldrb	r3, [r7, #7]
 8010502:	2b04      	cmp	r3, #4
 8010504:	d81b      	bhi.n	801053e <pbuf_alloced_custom+0x52>
 8010506:	a201      	add	r2, pc, #4	; (adr r2, 801050c <pbuf_alloced_custom+0x20>)
 8010508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801050c:	08010521 	.word	0x08010521
 8010510:	08010527 	.word	0x08010527
 8010514:	0801052d 	.word	0x0801052d
 8010518:	08010533 	.word	0x08010533
 801051c:	08010539 	.word	0x08010539
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010520:	2336      	movs	r3, #54	; 0x36
 8010522:	81fb      	strh	r3, [r7, #14]
    break;
 8010524:	e014      	b.n	8010550 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010526:	2322      	movs	r3, #34	; 0x22
 8010528:	81fb      	strh	r3, [r7, #14]
    break;
 801052a:	e011      	b.n	8010550 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801052c:	230e      	movs	r3, #14
 801052e:	81fb      	strh	r3, [r7, #14]
    break;
 8010530:	e00e      	b.n	8010550 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010532:	2300      	movs	r3, #0
 8010534:	81fb      	strh	r3, [r7, #14]
    break;
 8010536:	e00b      	b.n	8010550 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	81fb      	strh	r3, [r7, #14]
    break;
 801053c:	e008      	b.n	8010550 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801053e:	4b1d      	ldr	r3, [pc, #116]	; (80105b4 <pbuf_alloced_custom+0xc8>)
 8010540:	f240 12c5 	movw	r2, #453	; 0x1c5
 8010544:	491c      	ldr	r1, [pc, #112]	; (80105b8 <pbuf_alloced_custom+0xcc>)
 8010546:	481d      	ldr	r0, [pc, #116]	; (80105bc <pbuf_alloced_custom+0xd0>)
 8010548:	f008 fe8a 	bl	8019260 <iprintf>
    return NULL;
 801054c:	2300      	movs	r3, #0
 801054e:	e02d      	b.n	80105ac <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010550:	89fb      	ldrh	r3, [r7, #14]
 8010552:	3303      	adds	r3, #3
 8010554:	f023 0203 	bic.w	r2, r3, #3
 8010558:	88bb      	ldrh	r3, [r7, #4]
 801055a:	441a      	add	r2, r3
 801055c:	8bbb      	ldrh	r3, [r7, #28]
 801055e:	429a      	cmp	r2, r3
 8010560:	d901      	bls.n	8010566 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010562:	2300      	movs	r3, #0
 8010564:	e022      	b.n	80105ac <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2200      	movs	r2, #0
 801056a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d008      	beq.n	8010584 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010572:	89fb      	ldrh	r3, [r7, #14]
 8010574:	3303      	adds	r3, #3
 8010576:	f023 0303 	bic.w	r3, r3, #3
 801057a:	69ba      	ldr	r2, [r7, #24]
 801057c:	441a      	add	r2, r3
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	605a      	str	r2, [r3, #4]
 8010582:	e002      	b.n	801058a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	2200      	movs	r2, #0
 8010588:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2202      	movs	r2, #2
 801058e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	88ba      	ldrh	r2, [r7, #4]
 8010594:	811a      	strh	r2, [r3, #8]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	891a      	ldrh	r2, [r3, #8]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	79ba      	ldrb	r2, [r7, #6]
 80105a2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	2201      	movs	r2, #1
 80105a8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80105aa:	683b      	ldr	r3, [r7, #0]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	0801b370 	.word	0x0801b370
 80105b8:	0801b52c 	.word	0x0801b52c
 80105bc:	0801b3e0 	.word	0x0801b3e0

080105c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	460b      	mov	r3, r1
 80105ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <pbuf_realloc+0x20>
 80105d2:	4b4b      	ldr	r3, [pc, #300]	; (8010700 <pbuf_realloc+0x140>)
 80105d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80105d8:	494a      	ldr	r1, [pc, #296]	; (8010704 <pbuf_realloc+0x144>)
 80105da:	484b      	ldr	r0, [pc, #300]	; (8010708 <pbuf_realloc+0x148>)
 80105dc:	f008 fe40 	bl	8019260 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	7b1b      	ldrb	r3, [r3, #12]
 80105e4:	2b03      	cmp	r3, #3
 80105e6:	d012      	beq.n	801060e <pbuf_realloc+0x4e>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	7b1b      	ldrb	r3, [r3, #12]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d00e      	beq.n	801060e <pbuf_realloc+0x4e>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	7b1b      	ldrb	r3, [r3, #12]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00a      	beq.n	801060e <pbuf_realloc+0x4e>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	7b1b      	ldrb	r3, [r3, #12]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d006      	beq.n	801060e <pbuf_realloc+0x4e>
 8010600:	4b3f      	ldr	r3, [pc, #252]	; (8010700 <pbuf_realloc+0x140>)
 8010602:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010606:	4941      	ldr	r1, [pc, #260]	; (801070c <pbuf_realloc+0x14c>)
 8010608:	483f      	ldr	r0, [pc, #252]	; (8010708 <pbuf_realloc+0x148>)
 801060a:	f008 fe29 	bl	8019260 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	891b      	ldrh	r3, [r3, #8]
 8010612:	887a      	ldrh	r2, [r7, #2]
 8010614:	429a      	cmp	r2, r3
 8010616:	d26f      	bcs.n	80106f8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010618:	887b      	ldrh	r3, [r7, #2]
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	8912      	ldrh	r2, [r2, #8]
 801061e:	1a9b      	subs	r3, r3, r2
 8010620:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010622:	887b      	ldrh	r3, [r7, #2]
 8010624:	827b      	strh	r3, [r7, #18]
  q = p;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801062a:	e025      	b.n	8010678 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	895b      	ldrh	r3, [r3, #10]
 8010630:	8a7a      	ldrh	r2, [r7, #18]
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801063c:	4293      	cmp	r3, r2
 801063e:	dd06      	ble.n	801064e <pbuf_realloc+0x8e>
 8010640:	4b2f      	ldr	r3, [pc, #188]	; (8010700 <pbuf_realloc+0x140>)
 8010642:	f240 220b 	movw	r2, #523	; 0x20b
 8010646:	4932      	ldr	r1, [pc, #200]	; (8010710 <pbuf_realloc+0x150>)
 8010648:	482f      	ldr	r0, [pc, #188]	; (8010708 <pbuf_realloc+0x148>)
 801064a:	f008 fe09 	bl	8019260 <iprintf>
    q->tot_len += (u16_t)grow;
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	891a      	ldrh	r2, [r3, #8]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	b29b      	uxth	r3, r3
 8010656:	4413      	add	r3, r2
 8010658:	b29a      	uxth	r2, r3
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <pbuf_realloc+0xb8>
 801066a:	4b25      	ldr	r3, [pc, #148]	; (8010700 <pbuf_realloc+0x140>)
 801066c:	f240 220f 	movw	r2, #527	; 0x20f
 8010670:	4928      	ldr	r1, [pc, #160]	; (8010714 <pbuf_realloc+0x154>)
 8010672:	4825      	ldr	r0, [pc, #148]	; (8010708 <pbuf_realloc+0x148>)
 8010674:	f008 fdf4 	bl	8019260 <iprintf>
  while (rem_len > q->len) {
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	895b      	ldrh	r3, [r3, #10]
 801067c:	8a7a      	ldrh	r2, [r7, #18]
 801067e:	429a      	cmp	r2, r3
 8010680:	d8d4      	bhi.n	801062c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	7b1b      	ldrb	r3, [r3, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d122      	bne.n	80106d0 <pbuf_realloc+0x110>
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	895b      	ldrh	r3, [r3, #10]
 801068e:	8a7a      	ldrh	r2, [r7, #18]
 8010690:	429a      	cmp	r2, r3
 8010692:	d01d      	beq.n	80106d0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	7b5b      	ldrb	r3, [r3, #13]
 8010698:	f003 0302 	and.w	r3, r3, #2
 801069c:	2b00      	cmp	r3, #0
 801069e:	d117      	bne.n	80106d0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	461a      	mov	r2, r3
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	8a7b      	ldrh	r3, [r7, #18]
 80106ae:	4413      	add	r3, r2
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	4619      	mov	r1, r3
 80106b4:	6978      	ldr	r0, [r7, #20]
 80106b6:	f7ff f86d 	bl	800f794 <mem_trim>
 80106ba:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d106      	bne.n	80106d0 <pbuf_realloc+0x110>
 80106c2:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <pbuf_realloc+0x140>)
 80106c4:	f240 221d 	movw	r2, #541	; 0x21d
 80106c8:	4913      	ldr	r1, [pc, #76]	; (8010718 <pbuf_realloc+0x158>)
 80106ca:	480f      	ldr	r0, [pc, #60]	; (8010708 <pbuf_realloc+0x148>)
 80106cc:	f008 fdc8 	bl	8019260 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	8a7a      	ldrh	r2, [r7, #18]
 80106d4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	895a      	ldrh	r2, [r3, #10]
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d004      	beq.n	80106f0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 f8dc 	bl	80108a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	2200      	movs	r2, #0
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	e000      	b.n	80106fa <pbuf_realloc+0x13a>
    return;
 80106f8:	bf00      	nop

}
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	0801b370 	.word	0x0801b370
 8010704:	0801b550 	.word	0x0801b550
 8010708:	0801b3e0 	.word	0x0801b3e0
 801070c:	0801b568 	.word	0x0801b568
 8010710:	0801b584 	.word	0x0801b584
 8010714:	0801b598 	.word	0x0801b598
 8010718:	0801b5b0 	.word	0x0801b5b0

0801071c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	807b      	strh	r3, [r7, #2]
 8010728:	4613      	mov	r3, r2
 801072a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d106      	bne.n	8010740 <pbuf_header_impl+0x24>
 8010732:	4b46      	ldr	r3, [pc, #280]	; (801084c <pbuf_header_impl+0x130>)
 8010734:	f240 223f 	movw	r2, #575	; 0x23f
 8010738:	4945      	ldr	r1, [pc, #276]	; (8010850 <pbuf_header_impl+0x134>)
 801073a:	4846      	ldr	r0, [pc, #280]	; (8010854 <pbuf_header_impl+0x138>)
 801073c:	f008 fd90 	bl	8019260 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8010740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <pbuf_header_impl+0x32>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d101      	bne.n	8010752 <pbuf_header_impl+0x36>
    return 0;
 801074e:	2300      	movs	r3, #0
 8010750:	e078      	b.n	8010844 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8010752:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010756:	2b00      	cmp	r3, #0
 8010758:	da10      	bge.n	801077c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801075a:	887b      	ldrh	r3, [r7, #2]
 801075c:	425b      	negs	r3, r3
 801075e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	895b      	ldrh	r3, [r3, #10]
 8010764:	89fa      	ldrh	r2, [r7, #14]
 8010766:	429a      	cmp	r2, r3
 8010768:	d90a      	bls.n	8010780 <pbuf_header_impl+0x64>
 801076a:	4b38      	ldr	r3, [pc, #224]	; (801084c <pbuf_header_impl+0x130>)
 801076c:	f240 2247 	movw	r2, #583	; 0x247
 8010770:	4939      	ldr	r1, [pc, #228]	; (8010858 <pbuf_header_impl+0x13c>)
 8010772:	4838      	ldr	r0, [pc, #224]	; (8010854 <pbuf_header_impl+0x138>)
 8010774:	f008 fd74 	bl	8019260 <iprintf>
 8010778:	2301      	movs	r3, #1
 801077a:	e063      	b.n	8010844 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801077c:	887b      	ldrh	r3, [r7, #2]
 801077e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	7b1b      	ldrb	r3, [r3, #12]
 8010784:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801078c:	89bb      	ldrh	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d002      	beq.n	8010798 <pbuf_header_impl+0x7c>
 8010792:	89bb      	ldrh	r3, [r7, #12]
 8010794:	2b03      	cmp	r3, #3
 8010796:	d112      	bne.n	80107be <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107a0:	425b      	negs	r3, r3
 80107a2:	441a      	add	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3310      	adds	r3, #16
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d238      	bcs.n	8010826 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e042      	b.n	8010844 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80107be:	89bb      	ldrh	r3, [r7, #12]
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d002      	beq.n	80107ca <pbuf_header_impl+0xae>
 80107c4:	89bb      	ldrh	r3, [r7, #12]
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d124      	bne.n	8010814 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80107ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	da0d      	bge.n	80107ee <pbuf_header_impl+0xd2>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	895b      	ldrh	r3, [r3, #10]
 80107d6:	89fa      	ldrh	r2, [r7, #14]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d808      	bhi.n	80107ee <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685a      	ldr	r2, [r3, #4]
 80107e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107e4:	425b      	negs	r3, r3
 80107e6:	441a      	add	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	605a      	str	r2, [r3, #4]
 80107ec:	e011      	b.n	8010812 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80107ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	dd0b      	ble.n	801080e <pbuf_header_impl+0xf2>
 80107f6:	787b      	ldrb	r3, [r7, #1]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d008      	beq.n	801080e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010804:	425b      	negs	r3, r3
 8010806:	441a      	add	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	605a      	str	r2, [r3, #4]
 801080c:	e001      	b.n	8010812 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801080e:	2301      	movs	r3, #1
 8010810:	e018      	b.n	8010844 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010812:	e008      	b.n	8010826 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010814:	4b0d      	ldr	r3, [pc, #52]	; (801084c <pbuf_header_impl+0x130>)
 8010816:	f240 2277 	movw	r2, #631	; 0x277
 801081a:	4910      	ldr	r1, [pc, #64]	; (801085c <pbuf_header_impl+0x140>)
 801081c:	480d      	ldr	r0, [pc, #52]	; (8010854 <pbuf_header_impl+0x138>)
 801081e:	f008 fd1f 	bl	8019260 <iprintf>
    return 1;
 8010822:	2301      	movs	r3, #1
 8010824:	e00e      	b.n	8010844 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	895a      	ldrh	r2, [r3, #10]
 801082a:	887b      	ldrh	r3, [r7, #2]
 801082c:	4413      	add	r3, r2
 801082e:	b29a      	uxth	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	891a      	ldrh	r2, [r3, #8]
 8010838:	887b      	ldrh	r3, [r7, #2]
 801083a:	4413      	add	r3, r2
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	0801b370 	.word	0x0801b370
 8010850:	0801b5cc 	.word	0x0801b5cc
 8010854:	0801b3e0 	.word	0x0801b3e0
 8010858:	0801b5d8 	.word	0x0801b5d8
 801085c:	0801b5f8 	.word	0x0801b5f8

08010860 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801086c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010870:	2200      	movs	r2, #0
 8010872:	4619      	mov	r1, r3
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f7ff ff51 	bl	801071c <pbuf_header_impl>
 801087a:	4603      	mov	r3, r0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	460b      	mov	r3, r1
 801088e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010894:	2201      	movs	r2, #1
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff ff3f 	bl	801071c <pbuf_header_impl>
 801089e:	4603      	mov	r3, r0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b088      	sub	sp, #32
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10b      	bne.n	80108ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d106      	bne.n	80108ca <pbuf_free+0x22>
 80108bc:	4b41      	ldr	r3, [pc, #260]	; (80109c4 <pbuf_free+0x11c>)
 80108be:	f240 22d2 	movw	r2, #722	; 0x2d2
 80108c2:	4941      	ldr	r1, [pc, #260]	; (80109c8 <pbuf_free+0x120>)
 80108c4:	4841      	ldr	r0, [pc, #260]	; (80109cc <pbuf_free+0x124>)
 80108c6:	f008 fccb 	bl	8019260 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	e076      	b.n	80109bc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7b1b      	ldrb	r3, [r3, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d012      	beq.n	80108fc <pbuf_free+0x54>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	7b1b      	ldrb	r3, [r3, #12]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d00e      	beq.n	80108fc <pbuf_free+0x54>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	7b1b      	ldrb	r3, [r3, #12]
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	d00a      	beq.n	80108fc <pbuf_free+0x54>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	7b1b      	ldrb	r3, [r3, #12]
 80108ea:	2b03      	cmp	r3, #3
 80108ec:	d006      	beq.n	80108fc <pbuf_free+0x54>
 80108ee:	4b35      	ldr	r3, [pc, #212]	; (80109c4 <pbuf_free+0x11c>)
 80108f0:	f240 22de 	movw	r2, #734	; 0x2de
 80108f4:	4936      	ldr	r1, [pc, #216]	; (80109d0 <pbuf_free+0x128>)
 80108f6:	4835      	ldr	r0, [pc, #212]	; (80109cc <pbuf_free+0x124>)
 80108f8:	f008 fcb2 	bl	8019260 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80108fc:	2300      	movs	r3, #0
 80108fe:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010900:	e058      	b.n	80109b4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010902:	f008 fc49 	bl	8019198 <sys_arch_protect>
 8010906:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	89db      	ldrh	r3, [r3, #14]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d106      	bne.n	801091e <pbuf_free+0x76>
 8010910:	4b2c      	ldr	r3, [pc, #176]	; (80109c4 <pbuf_free+0x11c>)
 8010912:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010916:	492f      	ldr	r1, [pc, #188]	; (80109d4 <pbuf_free+0x12c>)
 8010918:	482c      	ldr	r0, [pc, #176]	; (80109cc <pbuf_free+0x124>)
 801091a:	f008 fca1 	bl	8019260 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	89db      	ldrh	r3, [r3, #14]
 8010922:	3b01      	subs	r3, #1
 8010924:	b29a      	uxth	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	81da      	strh	r2, [r3, #14]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	89db      	ldrh	r3, [r3, #14]
 801092e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010930:	69b8      	ldr	r0, [r7, #24]
 8010932:	f008 fc3f 	bl	80191b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010936:	8afb      	ldrh	r3, [r7, #22]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d139      	bne.n	80109b0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	7b1b      	ldrb	r3, [r3, #12]
 8010946:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	7b5b      	ldrb	r3, [r3, #13]
 801094c:	f003 0302 	and.w	r3, r3, #2
 8010950:	2b00      	cmp	r3, #0
 8010952:	d011      	beq.n	8010978 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <pbuf_free+0xc6>
 8010960:	4b18      	ldr	r3, [pc, #96]	; (80109c4 <pbuf_free+0x11c>)
 8010962:	f240 22f9 	movw	r2, #761	; 0x2f9
 8010966:	491c      	ldr	r1, [pc, #112]	; (80109d8 <pbuf_free+0x130>)
 8010968:	4818      	ldr	r0, [pc, #96]	; (80109cc <pbuf_free+0x124>)
 801096a:	f008 fc79 	bl	8019260 <iprintf>
        pc->custom_free_function(p);
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	691b      	ldr	r3, [r3, #16]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	4798      	blx	r3
 8010976:	e015      	b.n	80109a4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010978:	89fb      	ldrh	r3, [r7, #14]
 801097a:	2b03      	cmp	r3, #3
 801097c:	d104      	bne.n	8010988 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801097e:	6879      	ldr	r1, [r7, #4]
 8010980:	200c      	movs	r0, #12
 8010982:	f7ff f9f9 	bl	800fd78 <memp_free>
 8010986:	e00d      	b.n	80109a4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010988:	89fb      	ldrh	r3, [r7, #14]
 801098a:	2b01      	cmp	r3, #1
 801098c:	d002      	beq.n	8010994 <pbuf_free+0xec>
 801098e:	89fb      	ldrh	r3, [r7, #14]
 8010990:	2b02      	cmp	r3, #2
 8010992:	d104      	bne.n	801099e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010994:	6879      	ldr	r1, [r7, #4]
 8010996:	200b      	movs	r0, #11
 8010998:	f7ff f9ee 	bl	800fd78 <memp_free>
 801099c:	e002      	b.n	80109a4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7fe fe8a 	bl	800f6b8 <mem_free>
        }
      }
      count++;
 80109a4:	7ffb      	ldrb	r3, [r7, #31]
 80109a6:	3301      	adds	r3, #1
 80109a8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	e001      	b.n	80109b4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1a3      	bne.n	8010902 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80109ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3720      	adds	r7, #32
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	0801b370 	.word	0x0801b370
 80109c8:	0801b5cc 	.word	0x0801b5cc
 80109cc:	0801b3e0 	.word	0x0801b3e0
 80109d0:	0801b608 	.word	0x0801b608
 80109d4:	0801b620 	.word	0x0801b620
 80109d8:	0801b638 	.word	0x0801b638

080109dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80109e8:	e005      	b.n	80109f6 <pbuf_clen+0x1a>
    ++len;
 80109ea:	89fb      	ldrh	r3, [r7, #14]
 80109ec:	3301      	adds	r3, #1
 80109ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1f6      	bne.n	80109ea <pbuf_clen+0xe>
  }
  return len;
 80109fc:	89fb      	ldrh	r3, [r7, #14]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
	...

08010a0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d016      	beq.n	8010a48 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010a1a:	f008 fbbd 	bl	8019198 <sys_arch_protect>
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	89db      	ldrh	r3, [r3, #14]
 8010a24:	3301      	adds	r3, #1
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	81da      	strh	r2, [r3, #14]
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f008 fbc1 	bl	80191b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	89db      	ldrh	r3, [r3, #14]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <pbuf_ref+0x3c>
 8010a3a:	4b05      	ldr	r3, [pc, #20]	; (8010a50 <pbuf_ref+0x44>)
 8010a3c:	f240 3239 	movw	r2, #825	; 0x339
 8010a40:	4904      	ldr	r1, [pc, #16]	; (8010a54 <pbuf_ref+0x48>)
 8010a42:	4805      	ldr	r0, [pc, #20]	; (8010a58 <pbuf_ref+0x4c>)
 8010a44:	f008 fc0c 	bl	8019260 <iprintf>
  }
}
 8010a48:	bf00      	nop
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	0801b370 	.word	0x0801b370
 8010a54:	0801b65c 	.word	0x0801b65c
 8010a58:	0801b3e0 	.word	0x0801b3e0

08010a5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d002      	beq.n	8010a72 <pbuf_cat+0x16>
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d107      	bne.n	8010a82 <pbuf_cat+0x26>
 8010a72:	4b20      	ldr	r3, [pc, #128]	; (8010af4 <pbuf_cat+0x98>)
 8010a74:	f240 324d 	movw	r2, #845	; 0x34d
 8010a78:	491f      	ldr	r1, [pc, #124]	; (8010af8 <pbuf_cat+0x9c>)
 8010a7a:	4820      	ldr	r0, [pc, #128]	; (8010afc <pbuf_cat+0xa0>)
 8010a7c:	f008 fbf0 	bl	8019260 <iprintf>
 8010a80:	e034      	b.n	8010aec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	60fb      	str	r3, [r7, #12]
 8010a86:	e00a      	b.n	8010a9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	891a      	ldrh	r2, [r3, #8]
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	891b      	ldrh	r3, [r3, #8]
 8010a90:	4413      	add	r3, r2
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	60fb      	str	r3, [r7, #12]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1f0      	bne.n	8010a88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	891a      	ldrh	r2, [r3, #8]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	895b      	ldrh	r3, [r3, #10]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d006      	beq.n	8010ac0 <pbuf_cat+0x64>
 8010ab2:	4b10      	ldr	r3, [pc, #64]	; (8010af4 <pbuf_cat+0x98>)
 8010ab4:	f240 3255 	movw	r2, #853	; 0x355
 8010ab8:	4911      	ldr	r1, [pc, #68]	; (8010b00 <pbuf_cat+0xa4>)
 8010aba:	4810      	ldr	r0, [pc, #64]	; (8010afc <pbuf_cat+0xa0>)
 8010abc:	f008 fbd0 	bl	8019260 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d006      	beq.n	8010ad6 <pbuf_cat+0x7a>
 8010ac8:	4b0a      	ldr	r3, [pc, #40]	; (8010af4 <pbuf_cat+0x98>)
 8010aca:	f240 3256 	movw	r2, #854	; 0x356
 8010ace:	490d      	ldr	r1, [pc, #52]	; (8010b04 <pbuf_cat+0xa8>)
 8010ad0:	480a      	ldr	r0, [pc, #40]	; (8010afc <pbuf_cat+0xa0>)
 8010ad2:	f008 fbc5 	bl	8019260 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	891a      	ldrh	r2, [r3, #8]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	891b      	ldrh	r3, [r3, #8]
 8010ade:	4413      	add	r3, r2
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	0801b370 	.word	0x0801b370
 8010af8:	0801b670 	.word	0x0801b670
 8010afc:	0801b3e0 	.word	0x0801b3e0
 8010b00:	0801b6a8 	.word	0x0801b6a8
 8010b04:	0801b6d8 	.word	0x0801b6d8

08010b08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010b12:	2300      	movs	r3, #0
 8010b14:	81fb      	strh	r3, [r7, #14]
 8010b16:	2300      	movs	r3, #0
 8010b18:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d008      	beq.n	8010b32 <pbuf_copy+0x2a>
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d005      	beq.n	8010b32 <pbuf_copy+0x2a>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	891a      	ldrh	r2, [r3, #8]
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	891b      	ldrh	r3, [r3, #8]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d209      	bcs.n	8010b46 <pbuf_copy+0x3e>
 8010b32:	4b54      	ldr	r3, [pc, #336]	; (8010c84 <pbuf_copy+0x17c>)
 8010b34:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010b38:	4953      	ldr	r1, [pc, #332]	; (8010c88 <pbuf_copy+0x180>)
 8010b3a:	4854      	ldr	r0, [pc, #336]	; (8010c8c <pbuf_copy+0x184>)
 8010b3c:	f008 fb90 	bl	8019260 <iprintf>
 8010b40:	f06f 030f 	mvn.w	r3, #15
 8010b44:	e099      	b.n	8010c7a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	895b      	ldrh	r3, [r3, #10]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	89fb      	ldrh	r3, [r7, #14]
 8010b4e:	1ad2      	subs	r2, r2, r3
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	895b      	ldrh	r3, [r3, #10]
 8010b54:	4619      	mov	r1, r3
 8010b56:	89bb      	ldrh	r3, [r7, #12]
 8010b58:	1acb      	subs	r3, r1, r3
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	db05      	blt.n	8010b6a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	895a      	ldrh	r2, [r3, #10]
 8010b62:	89bb      	ldrh	r3, [r7, #12]
 8010b64:	1ad3      	subs	r3, r2, r3
 8010b66:	817b      	strh	r3, [r7, #10]
 8010b68:	e004      	b.n	8010b74 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	895a      	ldrh	r2, [r3, #10]
 8010b6e:	89fb      	ldrh	r3, [r7, #14]
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	89fb      	ldrh	r3, [r7, #14]
 8010b7a:	18d0      	adds	r0, r2, r3
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	685a      	ldr	r2, [r3, #4]
 8010b80:	89bb      	ldrh	r3, [r7, #12]
 8010b82:	4413      	add	r3, r2
 8010b84:	897a      	ldrh	r2, [r7, #10]
 8010b86:	4619      	mov	r1, r3
 8010b88:	f008 fb57 	bl	801923a <memcpy>
    offset_to += len;
 8010b8c:	89fa      	ldrh	r2, [r7, #14]
 8010b8e:	897b      	ldrh	r3, [r7, #10]
 8010b90:	4413      	add	r3, r2
 8010b92:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010b94:	89ba      	ldrh	r2, [r7, #12]
 8010b96:	897b      	ldrh	r3, [r7, #10]
 8010b98:	4413      	add	r3, r2
 8010b9a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	895b      	ldrh	r3, [r3, #10]
 8010ba0:	89fa      	ldrh	r2, [r7, #14]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d906      	bls.n	8010bb4 <pbuf_copy+0xac>
 8010ba6:	4b37      	ldr	r3, [pc, #220]	; (8010c84 <pbuf_copy+0x17c>)
 8010ba8:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010bac:	4938      	ldr	r1, [pc, #224]	; (8010c90 <pbuf_copy+0x188>)
 8010bae:	4837      	ldr	r0, [pc, #220]	; (8010c8c <pbuf_copy+0x184>)
 8010bb0:	f008 fb56 	bl	8019260 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	895b      	ldrh	r3, [r3, #10]
 8010bb8:	89ba      	ldrh	r2, [r7, #12]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d906      	bls.n	8010bcc <pbuf_copy+0xc4>
 8010bbe:	4b31      	ldr	r3, [pc, #196]	; (8010c84 <pbuf_copy+0x17c>)
 8010bc0:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010bc4:	4933      	ldr	r1, [pc, #204]	; (8010c94 <pbuf_copy+0x18c>)
 8010bc6:	4831      	ldr	r0, [pc, #196]	; (8010c8c <pbuf_copy+0x184>)
 8010bc8:	f008 fb4a 	bl	8019260 <iprintf>
    if (offset_from >= p_from->len) {
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	895b      	ldrh	r3, [r3, #10]
 8010bd0:	89ba      	ldrh	r2, [r7, #12]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d304      	bcc.n	8010be0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	895b      	ldrh	r3, [r3, #10]
 8010be4:	89fa      	ldrh	r2, [r7, #14]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d114      	bne.n	8010c14 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10c      	bne.n	8010c14 <pbuf_copy+0x10c>
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d009      	beq.n	8010c14 <pbuf_copy+0x10c>
 8010c00:	4b20      	ldr	r3, [pc, #128]	; (8010c84 <pbuf_copy+0x17c>)
 8010c02:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010c06:	4924      	ldr	r1, [pc, #144]	; (8010c98 <pbuf_copy+0x190>)
 8010c08:	4820      	ldr	r0, [pc, #128]	; (8010c8c <pbuf_copy+0x184>)
 8010c0a:	f008 fb29 	bl	8019260 <iprintf>
 8010c0e:	f06f 030f 	mvn.w	r3, #15
 8010c12:	e032      	b.n	8010c7a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d013      	beq.n	8010c42 <pbuf_copy+0x13a>
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	895a      	ldrh	r2, [r3, #10]
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	891b      	ldrh	r3, [r3, #8]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d10d      	bne.n	8010c42 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d009      	beq.n	8010c42 <pbuf_copy+0x13a>
 8010c2e:	4b15      	ldr	r3, [pc, #84]	; (8010c84 <pbuf_copy+0x17c>)
 8010c30:	f240 32de 	movw	r2, #990	; 0x3de
 8010c34:	4919      	ldr	r1, [pc, #100]	; (8010c9c <pbuf_copy+0x194>)
 8010c36:	4815      	ldr	r0, [pc, #84]	; (8010c8c <pbuf_copy+0x184>)
 8010c38:	f008 fb12 	bl	8019260 <iprintf>
 8010c3c:	f06f 0305 	mvn.w	r3, #5
 8010c40:	e01b      	b.n	8010c7a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d013      	beq.n	8010c70 <pbuf_copy+0x168>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	895a      	ldrh	r2, [r3, #10]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	891b      	ldrh	r3, [r3, #8]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d10d      	bne.n	8010c70 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d009      	beq.n	8010c70 <pbuf_copy+0x168>
 8010c5c:	4b09      	ldr	r3, [pc, #36]	; (8010c84 <pbuf_copy+0x17c>)
 8010c5e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010c62:	490e      	ldr	r1, [pc, #56]	; (8010c9c <pbuf_copy+0x194>)
 8010c64:	4809      	ldr	r0, [pc, #36]	; (8010c8c <pbuf_copy+0x184>)
 8010c66:	f008 fafb 	bl	8019260 <iprintf>
 8010c6a:	f06f 0305 	mvn.w	r3, #5
 8010c6e:	e004      	b.n	8010c7a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f47f af67 	bne.w	8010b46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	0801b370 	.word	0x0801b370
 8010c88:	0801b724 	.word	0x0801b724
 8010c8c:	0801b3e0 	.word	0x0801b3e0
 8010c90:	0801b754 	.word	0x0801b754
 8010c94:	0801b76c 	.word	0x0801b76c
 8010c98:	0801b788 	.word	0x0801b788
 8010c9c:	0801b798 	.word	0x0801b798

08010ca0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	4611      	mov	r1, r2
 8010cac:	461a      	mov	r2, r3
 8010cae:	460b      	mov	r3, r1
 8010cb0:	80fb      	strh	r3, [r7, #6]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d108      	bne.n	8010cd2 <pbuf_copy_partial+0x32>
 8010cc0:	4b30      	ldr	r3, [pc, #192]	; (8010d84 <pbuf_copy_partial+0xe4>)
 8010cc2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010cc6:	4930      	ldr	r1, [pc, #192]	; (8010d88 <pbuf_copy_partial+0xe8>)
 8010cc8:	4830      	ldr	r0, [pc, #192]	; (8010d8c <pbuf_copy_partial+0xec>)
 8010cca:	f008 fac9 	bl	8019260 <iprintf>
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e054      	b.n	8010d7c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d108      	bne.n	8010cea <pbuf_copy_partial+0x4a>
 8010cd8:	4b2a      	ldr	r3, [pc, #168]	; (8010d84 <pbuf_copy_partial+0xe4>)
 8010cda:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010cde:	492c      	ldr	r1, [pc, #176]	; (8010d90 <pbuf_copy_partial+0xf0>)
 8010ce0:	482a      	ldr	r0, [pc, #168]	; (8010d8c <pbuf_copy_partial+0xec>)
 8010ce2:	f008 fabd 	bl	8019260 <iprintf>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e048      	b.n	8010d7c <pbuf_copy_partial+0xdc>

  left = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <pbuf_copy_partial+0x5a>
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d101      	bne.n	8010cfe <pbuf_copy_partial+0x5e>
    return 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	e03e      	b.n	8010d7c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	61fb      	str	r3, [r7, #28]
 8010d02:	e034      	b.n	8010d6e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010d04:	88bb      	ldrh	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00a      	beq.n	8010d20 <pbuf_copy_partial+0x80>
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	895b      	ldrh	r3, [r3, #10]
 8010d0e:	88ba      	ldrh	r2, [r7, #4]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d305      	bcc.n	8010d20 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	895b      	ldrh	r3, [r3, #10]
 8010d18:	88ba      	ldrh	r2, [r7, #4]
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	80bb      	strh	r3, [r7, #4]
 8010d1e:	e023      	b.n	8010d68 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	895a      	ldrh	r2, [r3, #10]
 8010d24:	88bb      	ldrh	r3, [r7, #4]
 8010d26:	1ad3      	subs	r3, r2, r3
 8010d28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010d2a:	8b3a      	ldrh	r2, [r7, #24]
 8010d2c:	88fb      	ldrh	r3, [r7, #6]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d901      	bls.n	8010d36 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010d32:	88fb      	ldrh	r3, [r7, #6]
 8010d34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8010d36:	8b7b      	ldrh	r3, [r7, #26]
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	18d0      	adds	r0, r2, r3
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	88bb      	ldrh	r3, [r7, #4]
 8010d42:	4413      	add	r3, r2
 8010d44:	8b3a      	ldrh	r2, [r7, #24]
 8010d46:	4619      	mov	r1, r3
 8010d48:	f008 fa77 	bl	801923a <memcpy>
      copied_total += buf_copy_len;
 8010d4c:	8afa      	ldrh	r2, [r7, #22]
 8010d4e:	8b3b      	ldrh	r3, [r7, #24]
 8010d50:	4413      	add	r3, r2
 8010d52:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010d54:	8b7a      	ldrh	r2, [r7, #26]
 8010d56:	8b3b      	ldrh	r3, [r7, #24]
 8010d58:	4413      	add	r3, r2
 8010d5a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010d5c:	88fa      	ldrh	r2, [r7, #6]
 8010d5e:	8b3b      	ldrh	r3, [r7, #24]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	61fb      	str	r3, [r7, #28]
 8010d6e:	88fb      	ldrh	r3, [r7, #6]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d002      	beq.n	8010d7a <pbuf_copy_partial+0xda>
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1c4      	bne.n	8010d04 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8010d7a:	8afb      	ldrh	r3, [r7, #22]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3720      	adds	r7, #32
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	0801b370 	.word	0x0801b370
 8010d88:	0801b7c4 	.word	0x0801b7c4
 8010d8c:	0801b3e0 	.word	0x0801b3e0
 8010d90:	0801b7e4 	.word	0x0801b7e4

08010d94 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010d94:	b480      	push	{r7}
 8010d96:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010d98:	bf00      	nop
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
	...

08010da4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010da8:	f000 ffb6 	bl	8011d18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010dac:	4b07      	ldr	r3, [pc, #28]	; (8010dcc <tcp_tmr+0x28>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	3301      	adds	r3, #1
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <tcp_tmr+0x28>)
 8010db6:	701a      	strb	r2, [r3, #0]
 8010db8:	4b04      	ldr	r3, [pc, #16]	; (8010dcc <tcp_tmr+0x28>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010dc4:	f000 fce8 	bl	8011798 <tcp_slowtmr>
  }
}
 8010dc8:	bf00      	nop
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	2000c801 	.word	0x2000c801

08010dd0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	60fb      	str	r3, [r7, #12]
 8010dde:	e00a      	b.n	8010df6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d102      	bne.n	8010df0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2200      	movs	r2, #0
 8010dee:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	60fb      	str	r3, [r7, #12]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1f1      	bne.n	8010de0 <tcp_remove_listener+0x10>
      }
   }
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d105      	bne.n	8010e22 <tcp_listen_closed+0x1a>
 8010e16:	4b13      	ldr	r3, [pc, #76]	; (8010e64 <tcp_listen_closed+0x5c>)
 8010e18:	22c0      	movs	r2, #192	; 0xc0
 8010e1a:	4913      	ldr	r1, [pc, #76]	; (8010e68 <tcp_listen_closed+0x60>)
 8010e1c:	4813      	ldr	r0, [pc, #76]	; (8010e6c <tcp_listen_closed+0x64>)
 8010e1e:	f008 fa1f 	bl	8019260 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7d1b      	ldrb	r3, [r3, #20]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d005      	beq.n	8010e36 <tcp_listen_closed+0x2e>
 8010e2a:	4b0e      	ldr	r3, [pc, #56]	; (8010e64 <tcp_listen_closed+0x5c>)
 8010e2c:	22c1      	movs	r2, #193	; 0xc1
 8010e2e:	4910      	ldr	r1, [pc, #64]	; (8010e70 <tcp_listen_closed+0x68>)
 8010e30:	480e      	ldr	r0, [pc, #56]	; (8010e6c <tcp_listen_closed+0x64>)
 8010e32:	f008 fa15 	bl	8019260 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e36:	2301      	movs	r3, #1
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	e00b      	b.n	8010e54 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8010e3c:	4a0d      	ldr	r2, [pc, #52]	; (8010e74 <tcp_listen_closed+0x6c>)
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7ff ffc1 	bl	8010dd0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	3301      	adds	r3, #1
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d9f0      	bls.n	8010e3c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010e5a:	bf00      	nop
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	0801b918 	.word	0x0801b918
 8010e68:	0801b96c 	.word	0x0801b96c
 8010e6c:	0801b978 	.word	0x0801b978
 8010e70:	0801b9a0 	.word	0x0801b9a0
 8010e74:	0801cefc 	.word	0x0801cefc

08010e78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010e78:	b5b0      	push	{r4, r5, r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010e84:	78fb      	ldrb	r3, [r7, #3]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d075      	beq.n	8010f76 <tcp_close_shutdown+0xfe>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	7d1b      	ldrb	r3, [r3, #20]
 8010e8e:	2b04      	cmp	r3, #4
 8010e90:	d003      	beq.n	8010e9a <tcp_close_shutdown+0x22>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	7d1b      	ldrb	r3, [r3, #20]
 8010e96:	2b07      	cmp	r3, #7
 8010e98:	d16d      	bne.n	8010f76 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d104      	bne.n	8010eac <tcp_close_shutdown+0x34>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ea6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010eaa:	d064      	beq.n	8010f76 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7e9b      	ldrb	r3, [r3, #26]
 8010eb0:	f003 0310 	and.w	r3, r3, #16
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d106      	bne.n	8010ec6 <tcp_close_shutdown+0x4e>
 8010eb8:	4b59      	ldr	r3, [pc, #356]	; (8011020 <tcp_close_shutdown+0x1a8>)
 8010eba:	f240 120f 	movw	r2, #271	; 0x10f
 8010ebe:	4959      	ldr	r1, [pc, #356]	; (8011024 <tcp_close_shutdown+0x1ac>)
 8010ec0:	4859      	ldr	r0, [pc, #356]	; (8011028 <tcp_close_shutdown+0x1b0>)
 8010ec2:	f008 f9cd 	bl	8019260 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010ece:	687c      	ldr	r4, [r7, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	1d1d      	adds	r5, r3, #4
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8adb      	ldrh	r3, [r3, #22]
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	8b12      	ldrh	r2, [r2, #24]
 8010edc:	9201      	str	r2, [sp, #4]
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	462b      	mov	r3, r5
 8010ee2:	4622      	mov	r2, r4
 8010ee4:	f004 ff1a 	bl	8015d1c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f001 fa4b 	bl	8012384 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010eee:	4b4f      	ldr	r3, [pc, #316]	; (801102c <tcp_close_shutdown+0x1b4>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d105      	bne.n	8010f04 <tcp_close_shutdown+0x8c>
 8010ef8:	4b4c      	ldr	r3, [pc, #304]	; (801102c <tcp_close_shutdown+0x1b4>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	4a4b      	ldr	r2, [pc, #300]	; (801102c <tcp_close_shutdown+0x1b4>)
 8010f00:	6013      	str	r3, [r2, #0]
 8010f02:	e013      	b.n	8010f2c <tcp_close_shutdown+0xb4>
 8010f04:	4b49      	ldr	r3, [pc, #292]	; (801102c <tcp_close_shutdown+0x1b4>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	e00c      	b.n	8010f26 <tcp_close_shutdown+0xae>
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d104      	bne.n	8010f20 <tcp_close_shutdown+0xa8>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	68da      	ldr	r2, [r3, #12]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	60da      	str	r2, [r3, #12]
 8010f1e:	e005      	b.n	8010f2c <tcp_close_shutdown+0xb4>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	60fb      	str	r3, [r7, #12]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1ef      	bne.n	8010f0c <tcp_close_shutdown+0x94>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	60da      	str	r2, [r3, #12]
 8010f32:	4b3f      	ldr	r3, [pc, #252]	; (8011030 <tcp_close_shutdown+0x1b8>)
 8010f34:	2201      	movs	r2, #1
 8010f36:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	7d1b      	ldrb	r3, [r3, #20]
 8010f3c:	2b04      	cmp	r3, #4
 8010f3e:	d10c      	bne.n	8010f5a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	220a      	movs	r2, #10
 8010f44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f46:	4b3b      	ldr	r3, [pc, #236]	; (8011034 <tcp_close_shutdown+0x1bc>)
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	4a39      	ldr	r2, [pc, #228]	; (8011034 <tcp_close_shutdown+0x1bc>)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6013      	str	r3, [r2, #0]
 8010f54:	f005 f934 	bl	80161c0 <tcp_timer_needed>
 8010f58:	e00b      	b.n	8010f72 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8010f5a:	4b37      	ldr	r3, [pc, #220]	; (8011038 <tcp_close_shutdown+0x1c0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d102      	bne.n	8010f6a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010f64:	f003 fd72 	bl	8014a4c <tcp_trigger_input_pcb_close>
 8010f68:	e003      	b.n	8010f72 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8010f6a:	6879      	ldr	r1, [r7, #4]
 8010f6c:	2001      	movs	r0, #1
 8010f6e:	f7fe ff03 	bl	800fd78 <memp_free>
        }
      }
      return ERR_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	e050      	b.n	8011018 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	7d1b      	ldrb	r3, [r3, #20]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d02e      	beq.n	8010fdc <tcp_close_shutdown+0x164>
 8010f7e:	2b02      	cmp	r3, #2
 8010f80:	d038      	beq.n	8010ff4 <tcp_close_shutdown+0x17c>
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d142      	bne.n	801100c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	8adb      	ldrh	r3, [r3, #22]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d021      	beq.n	8010fd2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f8e:	4b2b      	ldr	r3, [pc, #172]	; (801103c <tcp_close_shutdown+0x1c4>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d105      	bne.n	8010fa4 <tcp_close_shutdown+0x12c>
 8010f98:	4b28      	ldr	r3, [pc, #160]	; (801103c <tcp_close_shutdown+0x1c4>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	4a27      	ldr	r2, [pc, #156]	; (801103c <tcp_close_shutdown+0x1c4>)
 8010fa0:	6013      	str	r3, [r2, #0]
 8010fa2:	e013      	b.n	8010fcc <tcp_close_shutdown+0x154>
 8010fa4:	4b25      	ldr	r3, [pc, #148]	; (801103c <tcp_close_shutdown+0x1c4>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	60bb      	str	r3, [r7, #8]
 8010faa:	e00c      	b.n	8010fc6 <tcp_close_shutdown+0x14e>
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d104      	bne.n	8010fc0 <tcp_close_shutdown+0x148>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68da      	ldr	r2, [r3, #12]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	60da      	str	r2, [r3, #12]
 8010fbe:	e005      	b.n	8010fcc <tcp_close_shutdown+0x154>
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	60bb      	str	r3, [r7, #8]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1ef      	bne.n	8010fac <tcp_close_shutdown+0x134>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010fd2:	6879      	ldr	r1, [r7, #4]
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	f7fe fecf 	bl	800fd78 <memp_free>
    break;
 8010fda:	e01c      	b.n	8011016 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7ff ff13 	bl	8010e08 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010fe2:	6879      	ldr	r1, [r7, #4]
 8010fe4:	4816      	ldr	r0, [pc, #88]	; (8011040 <tcp_close_shutdown+0x1c8>)
 8010fe6:	f001 fa0f 	bl	8012408 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010fea:	6879      	ldr	r1, [r7, #4]
 8010fec:	2002      	movs	r0, #2
 8010fee:	f7fe fec3 	bl	800fd78 <memp_free>
    break;
 8010ff2:	e010      	b.n	8011016 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	480d      	ldr	r0, [pc, #52]	; (801102c <tcp_close_shutdown+0x1b4>)
 8010ff8:	f001 fa06 	bl	8012408 <tcp_pcb_remove>
 8010ffc:	4b0c      	ldr	r3, [pc, #48]	; (8011030 <tcp_close_shutdown+0x1b8>)
 8010ffe:	2201      	movs	r2, #1
 8011000:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8011002:	6879      	ldr	r1, [r7, #4]
 8011004:	2001      	movs	r0, #1
 8011006:	f7fe feb7 	bl	800fd78 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801100a:	e004      	b.n	8011016 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 f819 	bl	8011044 <tcp_close_shutdown_fin>
 8011012:	4603      	mov	r3, r0
 8011014:	e000      	b.n	8011018 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8011016:	2300      	movs	r3, #0
}
 8011018:	4618      	mov	r0, r3
 801101a:	3710      	adds	r7, #16
 801101c:	46bd      	mov	sp, r7
 801101e:	bdb0      	pop	{r4, r5, r7, pc}
 8011020:	0801b918 	.word	0x0801b918
 8011024:	0801b9b8 	.word	0x0801b9b8
 8011028:	0801b978 	.word	0x0801b978
 801102c:	200101cc 	.word	0x200101cc
 8011030:	200101c8 	.word	0x200101c8
 8011034:	200101dc 	.word	0x200101dc
 8011038:	200101e0 	.word	0x200101e0
 801103c:	200101d8 	.word	0x200101d8
 8011040:	200101d4 	.word	0x200101d4

08011044 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <tcp_close_shutdown_fin+0x1c>
 8011052:	4b2c      	ldr	r3, [pc, #176]	; (8011104 <tcp_close_shutdown_fin+0xc0>)
 8011054:	f240 124d 	movw	r2, #333	; 0x14d
 8011058:	492b      	ldr	r1, [pc, #172]	; (8011108 <tcp_close_shutdown_fin+0xc4>)
 801105a:	482c      	ldr	r0, [pc, #176]	; (801110c <tcp_close_shutdown_fin+0xc8>)
 801105c:	f008 f900 	bl	8019260 <iprintf>

  switch (pcb->state) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	7d1b      	ldrb	r3, [r3, #20]
 8011064:	2b04      	cmp	r3, #4
 8011066:	d010      	beq.n	801108a <tcp_close_shutdown_fin+0x46>
 8011068:	2b07      	cmp	r3, #7
 801106a:	d01b      	beq.n	80110a4 <tcp_close_shutdown_fin+0x60>
 801106c:	2b03      	cmp	r3, #3
 801106e:	d126      	bne.n	80110be <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f003 fd77 	bl	8014b64 <tcp_send_fin>
 8011076:	4603      	mov	r3, r0
 8011078:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d11f      	bne.n	80110c2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2205      	movs	r2, #5
 8011086:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011088:	e01b      	b.n	80110c2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f003 fd6a 	bl	8014b64 <tcp_send_fin>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d114      	bne.n	80110c6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2205      	movs	r2, #5
 80110a0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80110a2:	e010      	b.n	80110c6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f003 fd5d 	bl	8014b64 <tcp_send_fin>
 80110aa:	4603      	mov	r3, r0
 80110ac:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80110ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d109      	bne.n	80110ca <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2209      	movs	r2, #9
 80110ba:	751a      	strb	r2, [r3, #20]
    }
    break;
 80110bc:	e005      	b.n	80110ca <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80110be:	2300      	movs	r3, #0
 80110c0:	e01c      	b.n	80110fc <tcp_close_shutdown_fin+0xb8>
    break;
 80110c2:	bf00      	nop
 80110c4:	e002      	b.n	80110cc <tcp_close_shutdown_fin+0x88>
    break;
 80110c6:	bf00      	nop
 80110c8:	e000      	b.n	80110cc <tcp_close_shutdown_fin+0x88>
    break;
 80110ca:	bf00      	nop
  }

  if (err == ERR_OK) {
 80110cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d103      	bne.n	80110dc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f004 fb97 	bl	8015808 <tcp_output>
 80110da:	e00d      	b.n	80110f8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80110dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e4:	d108      	bne.n	80110f8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	7e9b      	ldrb	r3, [r3, #26]
 80110ea:	f043 0308 	orr.w	r3, r3, #8
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	e001      	b.n	80110fc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80110f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	0801b918 	.word	0x0801b918
 8011108:	0801b96c 	.word	0x0801b96c
 801110c:	0801b978 	.word	0x0801b978

08011110 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d006      	beq.n	801112e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7e9b      	ldrb	r3, [r3, #26]
 8011124:	f043 0310 	orr.w	r3, r3, #16
 8011128:	b2da      	uxtb	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801112e:	2101      	movs	r1, #1
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7ff fea1 	bl	8010e78 <tcp_close_shutdown>
 8011136:	4603      	mov	r3, r0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d102      	bne.n	801115a <tcp_shutdown+0x1a>
    return ERR_CONN;
 8011154:	f06f 030a 	mvn.w	r3, #10
 8011158:	e035      	b.n	80111c6 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d01b      	beq.n	8011198 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	7e9b      	ldrb	r3, [r3, #26]
 8011164:	f043 0310 	orr.w	r3, r3, #16
 8011168:	b2da      	uxtb	r2, r3
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d005      	beq.n	8011180 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011174:	2101      	movs	r1, #1
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f7ff fe7e 	bl	8010e78 <tcp_close_shutdown>
 801117c:	4603      	mov	r3, r0
 801117e:	e022      	b.n	80111c6 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011184:	2b00      	cmp	r3, #0
 8011186:	d007      	beq.n	8011198 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118c:	4618      	mov	r0, r3
 801118e:	f7ff fb8b 	bl	80108a8 <pbuf_free>
      pcb->refused_data = NULL;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2200      	movs	r2, #0
 8011196:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d012      	beq.n	80111c4 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	7d1b      	ldrb	r3, [r3, #20]
 80111a2:	2b03      	cmp	r3, #3
 80111a4:	db0b      	blt.n	80111be <tcp_shutdown+0x7e>
 80111a6:	2b04      	cmp	r3, #4
 80111a8:	dd01      	ble.n	80111ae <tcp_shutdown+0x6e>
 80111aa:	2b07      	cmp	r3, #7
 80111ac:	d107      	bne.n	80111be <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	4619      	mov	r1, r3
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7ff fe5f 	bl	8010e78 <tcp_close_shutdown>
 80111ba:	4603      	mov	r3, r0
 80111bc:	e003      	b.n	80111c6 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 80111be:	f06f 030a 	mvn.w	r3, #10
 80111c2:	e000      	b.n	80111c6 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08c      	sub	sp, #48	; 0x30
 80111d4:	af02      	add	r7, sp, #8
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	7d1b      	ldrb	r3, [r3, #20]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d106      	bne.n	80111f0 <tcp_abandon+0x20>
 80111e2:	4b4d      	ldr	r3, [pc, #308]	; (8011318 <tcp_abandon+0x148>)
 80111e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80111e8:	494c      	ldr	r1, [pc, #304]	; (801131c <tcp_abandon+0x14c>)
 80111ea:	484d      	ldr	r0, [pc, #308]	; (8011320 <tcp_abandon+0x150>)
 80111ec:	f008 f838 	bl	8019260 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7d1b      	ldrb	r3, [r3, #20]
 80111f4:	2b0a      	cmp	r3, #10
 80111f6:	d108      	bne.n	801120a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	484a      	ldr	r0, [pc, #296]	; (8011324 <tcp_abandon+0x154>)
 80111fc:	f001 f904 	bl	8012408 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011200:	6879      	ldr	r1, [r7, #4]
 8011202:	2001      	movs	r0, #1
 8011204:	f7fe fdb8 	bl	800fd78 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8011208:	e081      	b.n	801130e <tcp_abandon+0x13e>
    int send_rst = 0;
 801120a:	2300      	movs	r3, #0
 801120c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011216:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011224:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7d1b      	ldrb	r3, [r3, #20]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d126      	bne.n	8011282 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8adb      	ldrh	r3, [r3, #22]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d02e      	beq.n	801129a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801123c:	4b3a      	ldr	r3, [pc, #232]	; (8011328 <tcp_abandon+0x158>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	429a      	cmp	r2, r3
 8011244:	d105      	bne.n	8011252 <tcp_abandon+0x82>
 8011246:	4b38      	ldr	r3, [pc, #224]	; (8011328 <tcp_abandon+0x158>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	4a36      	ldr	r2, [pc, #216]	; (8011328 <tcp_abandon+0x158>)
 801124e:	6013      	str	r3, [r2, #0]
 8011250:	e013      	b.n	801127a <tcp_abandon+0xaa>
 8011252:	4b35      	ldr	r3, [pc, #212]	; (8011328 <tcp_abandon+0x158>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	61fb      	str	r3, [r7, #28]
 8011258:	e00c      	b.n	8011274 <tcp_abandon+0xa4>
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	d104      	bne.n	801126e <tcp_abandon+0x9e>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	60da      	str	r2, [r3, #12]
 801126c:	e005      	b.n	801127a <tcp_abandon+0xaa>
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	61fb      	str	r3, [r7, #28]
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1ef      	bne.n	801125a <tcp_abandon+0x8a>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	60da      	str	r2, [r3, #12]
 8011280:	e00b      	b.n	801129a <tcp_abandon+0xca>
      send_rst = reset;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	8adb      	ldrh	r3, [r3, #22]
 801128a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	4827      	ldr	r0, [pc, #156]	; (801132c <tcp_abandon+0x15c>)
 8011290:	f001 f8ba 	bl	8012408 <tcp_pcb_remove>
 8011294:	4b26      	ldr	r3, [pc, #152]	; (8011330 <tcp_abandon+0x160>)
 8011296:	2201      	movs	r2, #1
 8011298:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d004      	beq.n	80112ac <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 fe03 	bl	8011eb2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d004      	beq.n	80112be <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 fdfa 	bl	8011eb2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d004      	beq.n	80112d0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 fdf1 	bl	8011eb2 <tcp_segs_free>
    if (send_rst) {
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00c      	beq.n	80112f0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	1d19      	adds	r1, r3, #4
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	8b1b      	ldrh	r3, [r3, #24]
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	460b      	mov	r3, r1
 80112e8:	6979      	ldr	r1, [r7, #20]
 80112ea:	69b8      	ldr	r0, [r7, #24]
 80112ec:	f004 fd16 	bl	8015d1c <tcp_rst>
    last_state = pcb->state;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	7d1b      	ldrb	r3, [r3, #20]
 80112f4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	2001      	movs	r0, #1
 80112fa:	f7fe fd3d 	bl	800fd78 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d004      	beq.n	801130e <tcp_abandon+0x13e>
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	f06f 010c 	mvn.w	r1, #12
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	4798      	blx	r3
}
 801130e:	bf00      	nop
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	0801b918 	.word	0x0801b918
 801131c:	0801b9d4 	.word	0x0801b9d4
 8011320:	0801b978 	.word	0x0801b978
 8011324:	200101dc 	.word	0x200101dc
 8011328:	200101d8 	.word	0x200101d8
 801132c:	200101cc 	.word	0x200101cc
 8011330:	200101c8 	.word	0x200101c8

08011334 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801133c:	2101      	movs	r1, #1
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ff ff46 	bl	80111d0 <tcp_abandon>
}
 8011344:	bf00      	nop
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b088      	sub	sp, #32
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	4613      	mov	r3, r2
 8011358:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801135a:	2304      	movs	r3, #4
 801135c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d101      	bne.n	8011368 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011364:	4b3c      	ldr	r3, [pc, #240]	; (8011458 <tcp_bind+0x10c>)
 8011366:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d002      	beq.n	8011374 <tcp_bind+0x28>
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d102      	bne.n	801137a <tcp_bind+0x2e>
    return ERR_VAL;
 8011374:	f06f 0305 	mvn.w	r3, #5
 8011378:	e06a      	b.n	8011450 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	7d1b      	ldrb	r3, [r3, #20]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d009      	beq.n	8011396 <tcp_bind+0x4a>
 8011382:	4b36      	ldr	r3, [pc, #216]	; (801145c <tcp_bind+0x110>)
 8011384:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011388:	4935      	ldr	r1, [pc, #212]	; (8011460 <tcp_bind+0x114>)
 801138a:	4836      	ldr	r0, [pc, #216]	; (8011464 <tcp_bind+0x118>)
 801138c:	f007 ff68 	bl	8019260 <iprintf>
 8011390:	f06f 0305 	mvn.w	r3, #5
 8011394:	e05c      	b.n	8011450 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8011396:	88fb      	ldrh	r3, [r7, #6]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <tcp_bind+0x64>
    port = tcp_new_port();
 801139c:	f000 f9b8 	bl	8011710 <tcp_new_port>
 80113a0:	4603      	mov	r3, r0
 80113a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d135      	bne.n	8011416 <tcp_bind+0xca>
      return ERR_BUF;
 80113aa:	f06f 0301 	mvn.w	r3, #1
 80113ae:	e04f      	b.n	8011450 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80113b0:	2300      	movs	r3, #0
 80113b2:	61fb      	str	r3, [r7, #28]
 80113b4:	e02b      	b.n	801140e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80113b6:	4a2c      	ldr	r2, [pc, #176]	; (8011468 <tcp_bind+0x11c>)
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	61bb      	str	r3, [r7, #24]
 80113c2:	e01e      	b.n	8011402 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	8adb      	ldrh	r3, [r3, #22]
 80113c8:	88fa      	ldrh	r2, [r7, #6]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d116      	bne.n	80113fc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80113ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d010      	beq.n	80113f6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00c      	beq.n	80113f6 <tcp_bind+0xaa>
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d009      	beq.n	80113f6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d005      	beq.n	80113f6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80113ea:	69bb      	ldr	r3, [r7, #24]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d102      	bne.n	80113fc <tcp_bind+0xb0>
              return ERR_USE;
 80113f6:	f06f 0307 	mvn.w	r3, #7
 80113fa:	e029      	b.n	8011450 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	61bb      	str	r3, [r7, #24]
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1dd      	bne.n	80113c4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	3301      	adds	r3, #1
 801140c:	61fb      	str	r3, [r7, #28]
 801140e:	69fa      	ldr	r2, [r7, #28]
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	429a      	cmp	r2, r3
 8011414:	dbcf      	blt.n	80113b6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00c      	beq.n	8011436 <tcp_bind+0xea>
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d008      	beq.n	8011436 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <tcp_bind+0xe4>
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	e000      	b.n	8011432 <tcp_bind+0xe6>
 8011430:	2300      	movs	r3, #0
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	88fa      	ldrh	r2, [r7, #6]
 801143a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801143c:	4b0b      	ldr	r3, [pc, #44]	; (801146c <tcp_bind+0x120>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	60da      	str	r2, [r3, #12]
 8011444:	4a09      	ldr	r2, [pc, #36]	; (801146c <tcp_bind+0x120>)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6013      	str	r3, [r2, #0]
 801144a:	f004 feb9 	bl	80161c0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3720      	adds	r7, #32
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	0801cf24 	.word	0x0801cf24
 801145c:	0801b918 	.word	0x0801b918
 8011460:	0801ba08 	.word	0x0801ba08
 8011464:	0801b978 	.word	0x0801b978
 8011468:	0801cefc 	.word	0x0801cefc
 801146c:	200101d8 	.word	0x200101d8

08011470 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	4613      	mov	r3, r2
 801147c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801147e:	68b8      	ldr	r0, [r7, #8]
 8011480:	f7ff ff58 	bl	8011334 <tcp_abort>

  return ERR_ABRT;
 8011484:	f06f 030c 	mvn.w	r3, #12
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b088      	sub	sp, #32
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	460b      	mov	r3, r1
 801149a:	607a      	str	r2, [r7, #4]
 801149c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801149e:	2300      	movs	r3, #0
 80114a0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	7d1b      	ldrb	r3, [r3, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d009      	beq.n	80114be <tcp_listen_with_backlog_and_err+0x2e>
 80114aa:	4b3f      	ldr	r3, [pc, #252]	; (80115a8 <tcp_listen_with_backlog_and_err+0x118>)
 80114ac:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80114b0:	493e      	ldr	r1, [pc, #248]	; (80115ac <tcp_listen_with_backlog_and_err+0x11c>)
 80114b2:	483f      	ldr	r0, [pc, #252]	; (80115b0 <tcp_listen_with_backlog_and_err+0x120>)
 80114b4:	f007 fed4 	bl	8019260 <iprintf>
 80114b8:	23f1      	movs	r3, #241	; 0xf1
 80114ba:	76fb      	strb	r3, [r7, #27]
 80114bc:	e069      	b.n	8011592 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	7d1b      	ldrb	r3, [r3, #20]
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d104      	bne.n	80114d0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80114ca:	23f7      	movs	r3, #247	; 0xf7
 80114cc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80114ce:	e060      	b.n	8011592 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80114d0:	2002      	movs	r0, #2
 80114d2:	f7fe fbdb 	bl	800fc8c <memp_malloc>
 80114d6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d102      	bne.n	80114e4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80114de:	23ff      	movs	r3, #255	; 0xff
 80114e0:	76fb      	strb	r3, [r7, #27]
    goto done;
 80114e2:	e056      	b.n	8011592 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	691a      	ldr	r2, [r3, #16]
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	8ada      	ldrh	r2, [r3, #22]
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	2201      	movs	r2, #1
 80114f8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	7d5a      	ldrb	r2, [r3, #21]
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	7a1a      	ldrb	r2, [r3, #8]
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	7a9a      	ldrb	r2, [r3, #10]
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	7a5a      	ldrb	r2, [r3, #9]
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	8adb      	ldrh	r3, [r3, #22]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d021      	beq.n	801156e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801152a:	4b22      	ldr	r3, [pc, #136]	; (80115b4 <tcp_listen_with_backlog_and_err+0x124>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	429a      	cmp	r2, r3
 8011532:	d105      	bne.n	8011540 <tcp_listen_with_backlog_and_err+0xb0>
 8011534:	4b1f      	ldr	r3, [pc, #124]	; (80115b4 <tcp_listen_with_backlog_and_err+0x124>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	4a1e      	ldr	r2, [pc, #120]	; (80115b4 <tcp_listen_with_backlog_and_err+0x124>)
 801153c:	6013      	str	r3, [r2, #0]
 801153e:	e013      	b.n	8011568 <tcp_listen_with_backlog_and_err+0xd8>
 8011540:	4b1c      	ldr	r3, [pc, #112]	; (80115b4 <tcp_listen_with_backlog_and_err+0x124>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	617b      	str	r3, [r7, #20]
 8011546:	e00c      	b.n	8011562 <tcp_listen_with_backlog_and_err+0xd2>
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	429a      	cmp	r2, r3
 8011550:	d104      	bne.n	801155c <tcp_listen_with_backlog_and_err+0xcc>
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	68da      	ldr	r2, [r3, #12]
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	60da      	str	r2, [r3, #12]
 801155a:	e005      	b.n	8011568 <tcp_listen_with_backlog_and_err+0xd8>
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	617b      	str	r3, [r7, #20]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1ef      	bne.n	8011548 <tcp_listen_with_backlog_and_err+0xb8>
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801156e:	68f9      	ldr	r1, [r7, #12]
 8011570:	2001      	movs	r0, #1
 8011572:	f7fe fc01 	bl	800fd78 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	4a0f      	ldr	r2, [pc, #60]	; (80115b8 <tcp_listen_with_backlog_and_err+0x128>)
 801157a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801157c:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <tcp_listen_with_backlog_and_err+0x12c>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	60da      	str	r2, [r3, #12]
 8011584:	4a0d      	ldr	r2, [pc, #52]	; (80115bc <tcp_listen_with_backlog_and_err+0x12c>)
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	6013      	str	r3, [r2, #0]
 801158a:	f004 fe19 	bl	80161c0 <tcp_timer_needed>
  res = ERR_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d002      	beq.n	801159e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7efa      	ldrb	r2, [r7, #27]
 801159c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801159e:	69fb      	ldr	r3, [r7, #28]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	0801b918 	.word	0x0801b918
 80115ac:	0801ba30 	.word	0x0801ba30
 80115b0:	0801b978 	.word	0x0801b978
 80115b4:	200101d8 	.word	0x200101d8
 80115b8:	08011471 	.word	0x08011471
 80115bc:	200101d4 	.word	0x200101d4

080115c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80115d0:	4413      	add	r3, r2
 80115d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80115dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80115e0:	bf28      	it	cs
 80115e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80115e6:	b292      	uxth	r2, r2
 80115e8:	4413      	add	r3, r2
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	db08      	blt.n	8011604 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115fe:	68fa      	ldr	r2, [r7, #12]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	e020      	b.n	8011646 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801160c:	1ad3      	subs	r3, r2, r3
 801160e:	2b00      	cmp	r3, #0
 8011610:	dd03      	ble.n	801161a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011618:	e014      	b.n	8011644 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801162c:	d306      	bcc.n	801163c <tcp_update_rcv_ann_wnd+0x7c>
 801162e:	4b08      	ldr	r3, [pc, #32]	; (8011650 <tcp_update_rcv_ann_wnd+0x90>)
 8011630:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011634:	4907      	ldr	r1, [pc, #28]	; (8011654 <tcp_update_rcv_ann_wnd+0x94>)
 8011636:	4808      	ldr	r0, [pc, #32]	; (8011658 <tcp_update_rcv_ann_wnd+0x98>)
 8011638:	f007 fe12 	bl	8019260 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011644:	2300      	movs	r3, #0
  }
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	0801b918 	.word	0x0801b918
 8011654:	0801ba54 	.word	0x0801ba54
 8011658:	0801b978 	.word	0x0801b978

0801165c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	460b      	mov	r3, r1
 8011666:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	7d1b      	ldrb	r3, [r3, #20]
 801166c:	2b01      	cmp	r3, #1
 801166e:	d106      	bne.n	801167e <tcp_recved+0x22>
 8011670:	4b23      	ldr	r3, [pc, #140]	; (8011700 <tcp_recved+0xa4>)
 8011672:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011676:	4923      	ldr	r1, [pc, #140]	; (8011704 <tcp_recved+0xa8>)
 8011678:	4823      	ldr	r0, [pc, #140]	; (8011708 <tcp_recved+0xac>)
 801167a:	f007 fdf1 	bl	8019260 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011682:	887b      	ldrh	r3, [r7, #2]
 8011684:	4413      	add	r3, r2
 8011686:	b29a      	uxth	r2, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011690:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011694:	d904      	bls.n	80116a0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801169c:	851a      	strh	r2, [r3, #40]	; 0x28
 801169e:	e017      	b.n	80116d0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d113      	bne.n	80116d0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	7d1b      	ldrb	r3, [r3, #20]
 80116ac:	2b07      	cmp	r3, #7
 80116ae:	d003      	beq.n	80116b8 <tcp_recved+0x5c>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	7d1b      	ldrb	r3, [r3, #20]
 80116b4:	2b09      	cmp	r3, #9
 80116b6:	d104      	bne.n	80116c2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80116be:	851a      	strh	r2, [r3, #40]	; 0x28
 80116c0:	e006      	b.n	80116d0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80116c2:	4b0f      	ldr	r3, [pc, #60]	; (8011700 <tcp_recved+0xa4>)
 80116c4:	f240 322d 	movw	r2, #813	; 0x32d
 80116c8:	4910      	ldr	r1, [pc, #64]	; (801170c <tcp_recved+0xb0>)
 80116ca:	480f      	ldr	r0, [pc, #60]	; (8011708 <tcp_recved+0xac>)
 80116cc:	f007 fdc8 	bl	8019260 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7ff ff75 	bl	80115c0 <tcp_update_rcv_ann_wnd>
 80116d6:	4603      	mov	r3, r0
 80116d8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80116e0:	db09      	blt.n	80116f6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7e9b      	ldrb	r3, [r3, #26]
 80116e6:	f043 0302 	orr.w	r3, r3, #2
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f004 f889 	bl	8015808 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80116f6:	bf00      	nop
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	0801b918 	.word	0x0801b918
 8011704:	0801ba70 	.word	0x0801ba70
 8011708:	0801b978 	.word	0x0801b978
 801170c:	0801ba98 	.word	0x0801ba98

08011710 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801171a:	4b1d      	ldr	r3, [pc, #116]	; (8011790 <tcp_new_port+0x80>)
 801171c:	881b      	ldrh	r3, [r3, #0]
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	b291      	uxth	r1, r2
 8011722:	4a1b      	ldr	r2, [pc, #108]	; (8011790 <tcp_new_port+0x80>)
 8011724:	8011      	strh	r1, [r2, #0]
 8011726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801172a:	4293      	cmp	r3, r2
 801172c:	d103      	bne.n	8011736 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801172e:	4b18      	ldr	r3, [pc, #96]	; (8011790 <tcp_new_port+0x80>)
 8011730:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011734:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011736:	2300      	movs	r3, #0
 8011738:	71fb      	strb	r3, [r7, #7]
 801173a:	e01e      	b.n	801177a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801173c:	79fb      	ldrb	r3, [r7, #7]
 801173e:	4a15      	ldr	r2, [pc, #84]	; (8011794 <tcp_new_port+0x84>)
 8011740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	e011      	b.n	801176e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	8ada      	ldrh	r2, [r3, #22]
 801174e:	4b10      	ldr	r3, [pc, #64]	; (8011790 <tcp_new_port+0x80>)
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	429a      	cmp	r2, r3
 8011754:	d108      	bne.n	8011768 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011756:	88bb      	ldrh	r3, [r7, #4]
 8011758:	3301      	adds	r3, #1
 801175a:	80bb      	strh	r3, [r7, #4]
 801175c:	88bb      	ldrh	r3, [r7, #4]
 801175e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011762:	d3da      	bcc.n	801171a <tcp_new_port+0xa>
          return 0;
 8011764:	2300      	movs	r3, #0
 8011766:	e00d      	b.n	8011784 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	603b      	str	r3, [r7, #0]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1ea      	bne.n	801174a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	3301      	adds	r3, #1
 8011778:	71fb      	strb	r3, [r7, #7]
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	2b03      	cmp	r3, #3
 801177e:	d9dd      	bls.n	801173c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011780:	4b03      	ldr	r3, [pc, #12]	; (8011790 <tcp_new_port+0x80>)
 8011782:	881b      	ldrh	r3, [r3, #0]
}
 8011784:	4618      	mov	r0, r3
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	20000028 	.word	0x20000028
 8011794:	0801cefc 	.word	0x0801cefc

08011798 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011798:	b5b0      	push	{r4, r5, r7, lr}
 801179a:	b08c      	sub	sp, #48	; 0x30
 801179c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80117a2:	4b96      	ldr	r3, [pc, #600]	; (80119fc <tcp_slowtmr+0x264>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	3301      	adds	r3, #1
 80117a8:	4a94      	ldr	r2, [pc, #592]	; (80119fc <tcp_slowtmr+0x264>)
 80117aa:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80117ac:	4b94      	ldr	r3, [pc, #592]	; (8011a00 <tcp_slowtmr+0x268>)
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	3301      	adds	r3, #1
 80117b2:	b2da      	uxtb	r2, r3
 80117b4:	4b92      	ldr	r3, [pc, #584]	; (8011a00 <tcp_slowtmr+0x268>)
 80117b6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80117b8:	2300      	movs	r3, #0
 80117ba:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80117bc:	4b91      	ldr	r3, [pc, #580]	; (8011a04 <tcp_slowtmr+0x26c>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80117c2:	e227      	b.n	8011c14 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	7d1b      	ldrb	r3, [r3, #20]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d106      	bne.n	80117da <tcp_slowtmr+0x42>
 80117cc:	4b8e      	ldr	r3, [pc, #568]	; (8011a08 <tcp_slowtmr+0x270>)
 80117ce:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80117d2:	498e      	ldr	r1, [pc, #568]	; (8011a0c <tcp_slowtmr+0x274>)
 80117d4:	488e      	ldr	r0, [pc, #568]	; (8011a10 <tcp_slowtmr+0x278>)
 80117d6:	f007 fd43 	bl	8019260 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80117da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117dc:	7d1b      	ldrb	r3, [r3, #20]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d106      	bne.n	80117f0 <tcp_slowtmr+0x58>
 80117e2:	4b89      	ldr	r3, [pc, #548]	; (8011a08 <tcp_slowtmr+0x270>)
 80117e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80117e8:	498a      	ldr	r1, [pc, #552]	; (8011a14 <tcp_slowtmr+0x27c>)
 80117ea:	4889      	ldr	r0, [pc, #548]	; (8011a10 <tcp_slowtmr+0x278>)
 80117ec:	f007 fd38 	bl	8019260 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	2b0a      	cmp	r3, #10
 80117f6:	d106      	bne.n	8011806 <tcp_slowtmr+0x6e>
 80117f8:	4b83      	ldr	r3, [pc, #524]	; (8011a08 <tcp_slowtmr+0x270>)
 80117fa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80117fe:	4986      	ldr	r1, [pc, #536]	; (8011a18 <tcp_slowtmr+0x280>)
 8011800:	4883      	ldr	r0, [pc, #524]	; (8011a10 <tcp_slowtmr+0x278>)
 8011802:	f007 fd2d 	bl	8019260 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011808:	7f5a      	ldrb	r2, [r3, #29]
 801180a:	4b7d      	ldr	r3, [pc, #500]	; (8011a00 <tcp_slowtmr+0x268>)
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	429a      	cmp	r2, r3
 8011810:	d103      	bne.n	801181a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8011818:	e1fc      	b.n	8011c14 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801181a:	4b79      	ldr	r3, [pc, #484]	; (8011a00 <tcp_slowtmr+0x268>)
 801181c:	781a      	ldrb	r2, [r3, #0]
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8011822:	2300      	movs	r3, #0
 8011824:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	7d1b      	ldrb	r3, [r3, #20]
 801182e:	2b02      	cmp	r3, #2
 8011830:	d108      	bne.n	8011844 <tcp_slowtmr+0xac>
 8011832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011838:	2b05      	cmp	r3, #5
 801183a:	d903      	bls.n	8011844 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801183c:	7ffb      	ldrb	r3, [r7, #31]
 801183e:	3301      	adds	r3, #1
 8011840:	77fb      	strb	r3, [r7, #31]
 8011842:	e0a2      	b.n	801198a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801184a:	2b0b      	cmp	r3, #11
 801184c:	d903      	bls.n	8011856 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801184e:	7ffb      	ldrb	r3, [r7, #31]
 8011850:	3301      	adds	r3, #1
 8011852:	77fb      	strb	r3, [r7, #31]
 8011854:	e099      	b.n	801198a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801185c:	2b00      	cmp	r3, #0
 801185e:	d032      	beq.n	80118c6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011866:	3b01      	subs	r3, #1
 8011868:	4a6c      	ldr	r2, [pc, #432]	; (8011a1c <tcp_slowtmr+0x284>)
 801186a:	5cd3      	ldrb	r3, [r2, r3]
 801186c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 801186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011870:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011874:	7cfa      	ldrb	r2, [r7, #19]
 8011876:	429a      	cmp	r2, r3
 8011878:	d907      	bls.n	801188a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011880:	3301      	adds	r3, #1
 8011882:	b2da      	uxtb	r2, r3
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011890:	7cfa      	ldrb	r2, [r7, #19]
 8011892:	429a      	cmp	r2, r3
 8011894:	d879      	bhi.n	801198a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011898:	f004 fbd2 	bl	8016040 <tcp_zero_window_probe>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d173      	bne.n	801198a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80118a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a4:	2200      	movs	r2, #0
 80118a6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80118b0:	2b06      	cmp	r3, #6
 80118b2:	d86a      	bhi.n	801198a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80118b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80118ba:	3301      	adds	r3, #1
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80118c4:	e061      	b.n	801198a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80118c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	db08      	blt.n	80118e2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80118d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	3301      	adds	r3, #1
 80118da:	b29b      	uxth	r3, r3
 80118dc:	b21a      	sxth	r2, r3
 80118de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80118e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d04f      	beq.n	801198a <tcp_slowtmr+0x1f2>
 80118ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ec:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80118f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80118f6:	429a      	cmp	r2, r3
 80118f8:	db47      	blt.n	801198a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	7d1b      	ldrb	r3, [r3, #20]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d018      	beq.n	8011934 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011908:	2b0c      	cmp	r3, #12
 801190a:	bf28      	it	cs
 801190c:	230c      	movcs	r3, #12
 801190e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011916:	10db      	asrs	r3, r3, #3
 8011918:	b21b      	sxth	r3, r3
 801191a:	461a      	mov	r2, r3
 801191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011922:	4413      	add	r3, r2
 8011924:	7dfa      	ldrb	r2, [r7, #23]
 8011926:	493e      	ldr	r1, [pc, #248]	; (8011a20 <tcp_slowtmr+0x288>)
 8011928:	5c8a      	ldrb	r2, [r1, r2]
 801192a:	4093      	lsls	r3, r2
 801192c:	b21a      	sxth	r2, r3
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	2200      	movs	r2, #0
 8011938:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011942:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011946:	4293      	cmp	r3, r2
 8011948:	bf28      	it	cs
 801194a:	4613      	movcs	r3, r2
 801194c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 801194e:	8abb      	ldrh	r3, [r7, #20]
 8011950:	085b      	lsrs	r3, r3, #1
 8011952:	b29a      	uxth	r2, r3
 8011954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011956:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011964:	005b      	lsls	r3, r3, #1
 8011966:	b29b      	uxth	r3, r3
 8011968:	429a      	cmp	r2, r3
 801196a:	d206      	bcs.n	801197a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011970:	005b      	lsls	r3, r3, #1
 8011972:	b29a      	uxth	r2, r3
 8011974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011976:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8011984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011986:	f004 fa3f 	bl	8015e08 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	7d1b      	ldrb	r3, [r3, #20]
 801198e:	2b06      	cmp	r3, #6
 8011990:	d10f      	bne.n	80119b2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011994:	7e9b      	ldrb	r3, [r3, #26]
 8011996:	f003 0310 	and.w	r3, r3, #16
 801199a:	2b00      	cmp	r3, #0
 801199c:	d009      	beq.n	80119b2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801199e:	4b17      	ldr	r3, [pc, #92]	; (80119fc <tcp_slowtmr+0x264>)
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a4:	6a1b      	ldr	r3, [r3, #32]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	2b28      	cmp	r3, #40	; 0x28
 80119aa:	d902      	bls.n	80119b2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80119ac:	7ffb      	ldrb	r3, [r7, #31]
 80119ae:	3301      	adds	r3, #1
 80119b0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	7a1b      	ldrb	r3, [r3, #8]
 80119b6:	f003 0308 	and.w	r3, r3, #8
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d05d      	beq.n	8011a7a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80119be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80119c2:	2b04      	cmp	r3, #4
 80119c4:	d003      	beq.n	80119ce <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80119c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80119ca:	2b07      	cmp	r3, #7
 80119cc:	d155      	bne.n	8011a7a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119ce:	4b0b      	ldr	r3, [pc, #44]	; (80119fc <tcp_slowtmr+0x264>)
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d4:	6a1b      	ldr	r3, [r3, #32]
 80119d6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80119de:	4b11      	ldr	r3, [pc, #68]	; (8011a24 <tcp_slowtmr+0x28c>)
 80119e0:	440b      	add	r3, r1
 80119e2:	4911      	ldr	r1, [pc, #68]	; (8011a28 <tcp_slowtmr+0x290>)
 80119e4:	fba1 1303 	umull	r1, r3, r1, r3
 80119e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d91e      	bls.n	8011a2c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80119ee:	7ffb      	ldrb	r3, [r7, #31]
 80119f0:	3301      	adds	r3, #1
 80119f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80119f4:	7fbb      	ldrb	r3, [r7, #30]
 80119f6:	3301      	adds	r3, #1
 80119f8:	77bb      	strb	r3, [r7, #30]
 80119fa:	e03e      	b.n	8011a7a <tcp_slowtmr+0x2e2>
 80119fc:	200101d0 	.word	0x200101d0
 8011a00:	2000c802 	.word	0x2000c802
 8011a04:	200101cc 	.word	0x200101cc
 8011a08:	0801b918 	.word	0x0801b918
 8011a0c:	0801baec 	.word	0x0801baec
 8011a10:	0801b978 	.word	0x0801b978
 8011a14:	0801bb18 	.word	0x0801bb18
 8011a18:	0801bb44 	.word	0x0801bb44
 8011a1c:	0801cef4 	.word	0x0801cef4
 8011a20:	0801cee4 	.word	0x0801cee4
 8011a24:	000a4cb8 	.word	0x000a4cb8
 8011a28:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a2c:	4b97      	ldr	r3, [pc, #604]	; (8011c8c <tcp_slowtmr+0x4f4>)
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	6a1b      	ldr	r3, [r3, #32]
 8011a34:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011a42:	4618      	mov	r0, r3
 8011a44:	4b92      	ldr	r3, [pc, #584]	; (8011c90 <tcp_slowtmr+0x4f8>)
 8011a46:	fb03 f300 	mul.w	r3, r3, r0
 8011a4a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011a4c:	4991      	ldr	r1, [pc, #580]	; (8011c94 <tcp_slowtmr+0x4fc>)
 8011a4e:	fba1 1303 	umull	r1, r3, r1, r3
 8011a52:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d910      	bls.n	8011a7a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8011a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a5a:	f004 fab4 	bl	8015fc6 <tcp_keepalive>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011a62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d107      	bne.n	8011a7a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011a70:	3301      	adds	r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d016      	beq.n	8011ab0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011a82:	4b82      	ldr	r3, [pc, #520]	; (8011c8c <tcp_slowtmr+0x4f4>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	6a1b      	ldr	r3, [r3, #32]
 8011a8a:	1ad2      	subs	r2, r2, r3
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011a92:	4619      	mov	r1, r3
 8011a94:	460b      	mov	r3, r1
 8011a96:	005b      	lsls	r3, r3, #1
 8011a98:	440b      	add	r3, r1
 8011a9a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d307      	bcc.n	8011ab0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f000 fa04 	bl	8011eb2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	2200      	movs	r2, #0
 8011aae:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab2:	7d1b      	ldrb	r3, [r3, #20]
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d109      	bne.n	8011acc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ab8:	4b74      	ldr	r3, [pc, #464]	; (8011c8c <tcp_slowtmr+0x4f4>)
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	6a1b      	ldr	r3, [r3, #32]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	2b28      	cmp	r3, #40	; 0x28
 8011ac4:	d902      	bls.n	8011acc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011ac6:	7ffb      	ldrb	r3, [r7, #31]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	7d1b      	ldrb	r3, [r3, #20]
 8011ad0:	2b09      	cmp	r3, #9
 8011ad2:	d109      	bne.n	8011ae8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011ad4:	4b6d      	ldr	r3, [pc, #436]	; (8011c8c <tcp_slowtmr+0x4f4>)
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ada:	6a1b      	ldr	r3, [r3, #32]
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	2bf0      	cmp	r3, #240	; 0xf0
 8011ae0:	d902      	bls.n	8011ae8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011ae2:	7ffb      	ldrb	r3, [r7, #31]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011ae8:	7ffb      	ldrb	r3, [r7, #31]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d05d      	beq.n	8011baa <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011af4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011af8:	f000 fc44 	bl	8012384 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d010      	beq.n	8011b24 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011b02:	4b65      	ldr	r3, [pc, #404]	; (8011c98 <tcp_slowtmr+0x500>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d106      	bne.n	8011b1a <tcp_slowtmr+0x382>
 8011b0c:	4b63      	ldr	r3, [pc, #396]	; (8011c9c <tcp_slowtmr+0x504>)
 8011b0e:	f240 4289 	movw	r2, #1161	; 0x489
 8011b12:	4963      	ldr	r1, [pc, #396]	; (8011ca0 <tcp_slowtmr+0x508>)
 8011b14:	4863      	ldr	r0, [pc, #396]	; (8011ca4 <tcp_slowtmr+0x50c>)
 8011b16:	f007 fba3 	bl	8019260 <iprintf>
        prev->next = pcb->next;
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	68da      	ldr	r2, [r3, #12]
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	60da      	str	r2, [r3, #12]
 8011b22:	e00f      	b.n	8011b44 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011b24:	4b5c      	ldr	r3, [pc, #368]	; (8011c98 <tcp_slowtmr+0x500>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d006      	beq.n	8011b3c <tcp_slowtmr+0x3a4>
 8011b2e:	4b5b      	ldr	r3, [pc, #364]	; (8011c9c <tcp_slowtmr+0x504>)
 8011b30:	f240 428d 	movw	r2, #1165	; 0x48d
 8011b34:	495c      	ldr	r1, [pc, #368]	; (8011ca8 <tcp_slowtmr+0x510>)
 8011b36:	485b      	ldr	r0, [pc, #364]	; (8011ca4 <tcp_slowtmr+0x50c>)
 8011b38:	f007 fb92 	bl	8019260 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	4a55      	ldr	r2, [pc, #340]	; (8011c98 <tcp_slowtmr+0x500>)
 8011b42:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011b44:	7fbb      	ldrb	r3, [r7, #30]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d010      	beq.n	8011b6c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011b52:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b56:	1d1d      	adds	r5, r3, #4
 8011b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5a:	8adb      	ldrh	r3, [r3, #22]
 8011b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b5e:	8b12      	ldrh	r2, [r2, #24]
 8011b60:	9201      	str	r2, [sp, #4]
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	462b      	mov	r3, r5
 8011b66:	4622      	mov	r2, r4
 8011b68:	f004 f8d8 	bl	8015d1c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	7d1b      	ldrb	r3, [r3, #20]
 8011b76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011b82:	6839      	ldr	r1, [r7, #0]
 8011b84:	2001      	movs	r0, #1
 8011b86:	f7fe f8f7 	bl	800fd78 <memp_free>

      tcp_active_pcbs_changed = 0;
 8011b8a:	4b48      	ldr	r3, [pc, #288]	; (8011cac <tcp_slowtmr+0x514>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d004      	beq.n	8011ba0 <tcp_slowtmr+0x408>
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f06f 010c 	mvn.w	r1, #12
 8011b9c:	68b8      	ldr	r0, [r7, #8]
 8011b9e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011ba0:	4b42      	ldr	r3, [pc, #264]	; (8011cac <tcp_slowtmr+0x514>)
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d035      	beq.n	8011c14 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011ba8:	e606      	b.n	80117b8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	7edb      	ldrb	r3, [r3, #27]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011bc0:	6a3b      	ldr	r3, [r7, #32]
 8011bc2:	7eda      	ldrb	r2, [r3, #27]
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	7f1b      	ldrb	r3, [r3, #28]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d323      	bcc.n	8011c14 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8011bcc:	6a3b      	ldr	r3, [r7, #32]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011bd2:	4b36      	ldr	r3, [pc, #216]	; (8011cac <tcp_slowtmr+0x514>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00a      	beq.n	8011bf8 <tcp_slowtmr+0x460>
 8011be2:	6a3b      	ldr	r3, [r7, #32]
 8011be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011be8:	6a3a      	ldr	r2, [r7, #32]
 8011bea:	6912      	ldr	r2, [r2, #16]
 8011bec:	6a39      	ldr	r1, [r7, #32]
 8011bee:	4610      	mov	r0, r2
 8011bf0:	4798      	blx	r3
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	777b      	strb	r3, [r7, #29]
 8011bf6:	e001      	b.n	8011bfc <tcp_slowtmr+0x464>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011bfc:	4b2b      	ldr	r3, [pc, #172]	; (8011cac <tcp_slowtmr+0x514>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d000      	beq.n	8011c06 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011c04:	e5d8      	b.n	80117b8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011c06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d102      	bne.n	8011c14 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8011c0e:	6a38      	ldr	r0, [r7, #32]
 8011c10:	f003 fdfa 	bl	8015808 <tcp_output>
  while (pcb != NULL) {
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f47f add4 	bne.w	80117c4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011c20:	4b23      	ldr	r3, [pc, #140]	; (8011cb0 <tcp_slowtmr+0x518>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011c26:	e068      	b.n	8011cfa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2a:	7d1b      	ldrb	r3, [r3, #20]
 8011c2c:	2b0a      	cmp	r3, #10
 8011c2e:	d006      	beq.n	8011c3e <tcp_slowtmr+0x4a6>
 8011c30:	4b1a      	ldr	r3, [pc, #104]	; (8011c9c <tcp_slowtmr+0x504>)
 8011c32:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011c36:	491f      	ldr	r1, [pc, #124]	; (8011cb4 <tcp_slowtmr+0x51c>)
 8011c38:	481a      	ldr	r0, [pc, #104]	; (8011ca4 <tcp_slowtmr+0x50c>)
 8011c3a:	f007 fb11 	bl	8019260 <iprintf>
    pcb_remove = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c42:	4b12      	ldr	r3, [pc, #72]	; (8011c8c <tcp_slowtmr+0x4f4>)
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c48:	6a1b      	ldr	r3, [r3, #32]
 8011c4a:	1ad3      	subs	r3, r2, r3
 8011c4c:	2bf0      	cmp	r3, #240	; 0xf0
 8011c4e:	d902      	bls.n	8011c56 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8011c50:	7ffb      	ldrb	r3, [r7, #31]
 8011c52:	3301      	adds	r3, #1
 8011c54:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011c56:	7ffb      	ldrb	r3, [r7, #31]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d049      	beq.n	8011cf0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c5e:	f000 fb91 	bl	8012384 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011c62:	6a3b      	ldr	r3, [r7, #32]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d029      	beq.n	8011cbc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011c68:	4b11      	ldr	r3, [pc, #68]	; (8011cb0 <tcp_slowtmr+0x518>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d106      	bne.n	8011c80 <tcp_slowtmr+0x4e8>
 8011c72:	4b0a      	ldr	r3, [pc, #40]	; (8011c9c <tcp_slowtmr+0x504>)
 8011c74:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8011c78:	490f      	ldr	r1, [pc, #60]	; (8011cb8 <tcp_slowtmr+0x520>)
 8011c7a:	480a      	ldr	r0, [pc, #40]	; (8011ca4 <tcp_slowtmr+0x50c>)
 8011c7c:	f007 faf0 	bl	8019260 <iprintf>
        prev->next = pcb->next;
 8011c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c82:	68da      	ldr	r2, [r3, #12]
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	60da      	str	r2, [r3, #12]
 8011c88:	e028      	b.n	8011cdc <tcp_slowtmr+0x544>
 8011c8a:	bf00      	nop
 8011c8c:	200101d0 	.word	0x200101d0
 8011c90:	000124f8 	.word	0x000124f8
 8011c94:	10624dd3 	.word	0x10624dd3
 8011c98:	200101cc 	.word	0x200101cc
 8011c9c:	0801b918 	.word	0x0801b918
 8011ca0:	0801bb74 	.word	0x0801bb74
 8011ca4:	0801b978 	.word	0x0801b978
 8011ca8:	0801bba0 	.word	0x0801bba0
 8011cac:	200101c8 	.word	0x200101c8
 8011cb0:	200101dc 	.word	0x200101dc
 8011cb4:	0801bbcc 	.word	0x0801bbcc
 8011cb8:	0801bbfc 	.word	0x0801bbfc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011cbc:	4b12      	ldr	r3, [pc, #72]	; (8011d08 <tcp_slowtmr+0x570>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d006      	beq.n	8011cd4 <tcp_slowtmr+0x53c>
 8011cc6:	4b11      	ldr	r3, [pc, #68]	; (8011d0c <tcp_slowtmr+0x574>)
 8011cc8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8011ccc:	4910      	ldr	r1, [pc, #64]	; (8011d10 <tcp_slowtmr+0x578>)
 8011cce:	4811      	ldr	r0, [pc, #68]	; (8011d14 <tcp_slowtmr+0x57c>)
 8011cd0:	f007 fac6 	bl	8019260 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	4a0b      	ldr	r2, [pc, #44]	; (8011d08 <tcp_slowtmr+0x570>)
 8011cda:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011ce6:	69b9      	ldr	r1, [r7, #24]
 8011ce8:	2001      	movs	r0, #1
 8011cea:	f7fe f845 	bl	800fd78 <memp_free>
 8011cee:	e004      	b.n	8011cfa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d193      	bne.n	8011c28 <tcp_slowtmr+0x490>
    }
  }
}
 8011d00:	bf00      	nop
 8011d02:	3728      	adds	r7, #40	; 0x28
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bdb0      	pop	{r4, r5, r7, pc}
 8011d08:	200101dc 	.word	0x200101dc
 8011d0c:	0801b918 	.word	0x0801b918
 8011d10:	0801bc24 	.word	0x0801bc24
 8011d14:	0801b978 	.word	0x0801b978

08011d18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011d1e:	4b2d      	ldr	r3, [pc, #180]	; (8011dd4 <tcp_fasttmr+0xbc>)
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	3301      	adds	r3, #1
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4b2b      	ldr	r3, [pc, #172]	; (8011dd4 <tcp_fasttmr+0xbc>)
 8011d28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011d2a:	4b2b      	ldr	r3, [pc, #172]	; (8011dd8 <tcp_fasttmr+0xc0>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011d30:	e048      	b.n	8011dc4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	7f5a      	ldrb	r2, [r3, #29]
 8011d36:	4b27      	ldr	r3, [pc, #156]	; (8011dd4 <tcp_fasttmr+0xbc>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d03f      	beq.n	8011dbe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011d3e:	4b25      	ldr	r3, [pc, #148]	; (8011dd4 <tcp_fasttmr+0xbc>)
 8011d40:	781a      	ldrb	r2, [r3, #0]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	7e9b      	ldrb	r3, [r3, #26]
 8011d4a:	f003 0301 	and.w	r3, r3, #1
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d010      	beq.n	8011d74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	7e9b      	ldrb	r3, [r3, #26]
 8011d56:	f043 0302 	orr.w	r3, r3, #2
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f003 fd51 	bl	8015808 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	7e9b      	ldrb	r3, [r3, #26]
 8011d6a:	f023 0303 	bic.w	r3, r3, #3
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	7e9b      	ldrb	r3, [r3, #26]
 8011d78:	f003 0308 	and.w	r3, r3, #8
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d009      	beq.n	8011d94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	7e9b      	ldrb	r3, [r3, #26]
 8011d84:	f023 0308 	bic.w	r3, r3, #8
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7ff f958 	bl	8011044 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00a      	beq.n	8011db8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011da2:	4b0e      	ldr	r3, [pc, #56]	; (8011ddc <tcp_fasttmr+0xc4>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 f819 	bl	8011de0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011dae:	4b0b      	ldr	r3, [pc, #44]	; (8011ddc <tcp_fasttmr+0xc4>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d000      	beq.n	8011db8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011db6:	e7b8      	b.n	8011d2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	607b      	str	r3, [r7, #4]
 8011dbc:	e002      	b.n	8011dc4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d1b3      	bne.n	8011d32 <tcp_fasttmr+0x1a>
    }
  }
}
 8011dca:	bf00      	nop
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	2000c802 	.word	0x2000c802
 8011dd8:	200101cc 	.word	0x200101cc
 8011ddc:	200101c8 	.word	0x200101c8

08011de0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011de0:	b590      	push	{r4, r7, lr}
 8011de2:	b085      	sub	sp, #20
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dec:	7b5b      	ldrb	r3, [r3, #13]
 8011dee:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011df4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00b      	beq.n	8011e1e <tcp_process_refused_data+0x3e>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6918      	ldr	r0, [r3, #16]
 8011e10:	2300      	movs	r3, #0
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	6879      	ldr	r1, [r7, #4]
 8011e16:	47a0      	blx	r4
 8011e18:	4603      	mov	r3, r0
 8011e1a:	73fb      	strb	r3, [r7, #15]
 8011e1c:	e007      	b.n	8011e2e <tcp_process_refused_data+0x4e>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	6879      	ldr	r1, [r7, #4]
 8011e24:	2000      	movs	r0, #0
 8011e26:	f000 f88c 	bl	8011f42 <tcp_recv_null>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d12a      	bne.n	8011e8c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8011e36:	7bbb      	ldrb	r3, [r7, #14]
 8011e38:	f003 0320 	and.w	r3, r3, #32
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d033      	beq.n	8011ea8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011e48:	d005      	beq.n	8011e56 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e4e:	3301      	adds	r3, #1
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00b      	beq.n	8011e78 <tcp_process_refused_data+0x98>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6918      	ldr	r0, [r3, #16]
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	6879      	ldr	r1, [r7, #4]
 8011e70:	47a0      	blx	r4
 8011e72:	4603      	mov	r3, r0
 8011e74:	73fb      	strb	r3, [r7, #15]
 8011e76:	e001      	b.n	8011e7c <tcp_process_refused_data+0x9c>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e80:	f113 0f0d 	cmn.w	r3, #13
 8011e84:	d110      	bne.n	8011ea8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8011e86:	f06f 030c 	mvn.w	r3, #12
 8011e8a:	e00e      	b.n	8011eaa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8011e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e90:	f113 0f0d 	cmn.w	r3, #13
 8011e94:	d102      	bne.n	8011e9c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011e96:	f06f 030c 	mvn.w	r3, #12
 8011e9a:	e006      	b.n	8011eaa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8011ea2:	f06f 0304 	mvn.w	r3, #4
 8011ea6:	e000      	b.n	8011eaa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3714      	adds	r7, #20
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd90      	pop	{r4, r7, pc}

08011eb2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011eba:	e007      	b.n	8011ecc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f809 	bl	8011eda <tcp_seg_free>
    seg = next;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1f4      	bne.n	8011ebc <tcp_segs_free+0xa>
  }
}
 8011ed2:	bf00      	nop
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011eda:	b580      	push	{r7, lr}
 8011edc:	b082      	sub	sp, #8
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00c      	beq.n	8011f02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fcd7 	bl	80108a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011efa:	6879      	ldr	r1, [r7, #4]
 8011efc:	2003      	movs	r0, #3
 8011efe:	f7fd ff3b 	bl	800fd78 <memp_free>
  }
}
 8011f02:	bf00      	nop
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b084      	sub	sp, #16
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011f12:	2003      	movs	r0, #3
 8011f14:	f7fd feba 	bl	800fc8c <memp_malloc>
 8011f18:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d101      	bne.n	8011f24 <tcp_seg_copy+0x1a>
    return NULL;
 8011f20:	2300      	movs	r3, #0
 8011f22:	e00a      	b.n	8011f3a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011f24:	2210      	movs	r2, #16
 8011f26:	6879      	ldr	r1, [r7, #4]
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f007 f986 	bl	801923a <memcpy>
  pbuf_ref(cseg->p);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe fd6a 	bl	8010a0c <pbuf_ref>
  return cseg;
 8011f38:	68fb      	ldr	r3, [r7, #12]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b084      	sub	sp, #16
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	60b9      	str	r1, [r7, #8]
 8011f4c:	607a      	str	r2, [r7, #4]
 8011f4e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d009      	beq.n	8011f6a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	891b      	ldrh	r3, [r3, #8]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	68b8      	ldr	r0, [r7, #8]
 8011f5e:	f7ff fb7d 	bl	801165c <tcp_recved>
    pbuf_free(p);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7fe fca0 	bl	80108a8 <pbuf_free>
 8011f68:	e008      	b.n	8011f7c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8011f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d104      	bne.n	8011f7c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8011f72:	68b8      	ldr	r0, [r7, #8]
 8011f74:	f7ff f8cc 	bl	8011110 <tcp_close>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	e000      	b.n	8011f7e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3710      	adds	r7, #16
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	db01      	blt.n	8011f9e <tcp_kill_prio+0x16>
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	e000      	b.n	8011fa0 <tcp_kill_prio+0x18>
 8011f9e:	237f      	movs	r3, #127	; 0x7f
 8011fa0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011faa:	4b16      	ldr	r3, [pc, #88]	; (8012004 <tcp_kill_prio+0x7c>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	617b      	str	r3, [r7, #20]
 8011fb0:	e01a      	b.n	8011fe8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	7d5b      	ldrb	r3, [r3, #21]
 8011fb6:	7afa      	ldrb	r2, [r7, #11]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d312      	bcc.n	8011fe2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011fbc:	4b12      	ldr	r3, [pc, #72]	; (8012008 <tcp_kill_prio+0x80>)
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	6a1b      	ldr	r3, [r3, #32]
 8011fc4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d80a      	bhi.n	8011fe2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8011fcc:	4b0e      	ldr	r3, [pc, #56]	; (8012008 <tcp_kill_prio+0x80>)
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	6a1b      	ldr	r3, [r3, #32]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	7d5b      	ldrb	r3, [r3, #21]
 8011fe0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	617b      	str	r3, [r7, #20]
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1e1      	bne.n	8011fb2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011ff4:	6938      	ldr	r0, [r7, #16]
 8011ff6:	f7ff f99d 	bl	8011334 <tcp_abort>
  }
}
 8011ffa:	bf00      	nop
 8011ffc:	3718      	adds	r7, #24
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	200101cc 	.word	0x200101cc
 8012008:	200101d0 	.word	0x200101d0

0801200c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012016:	79fb      	ldrb	r3, [r7, #7]
 8012018:	2b08      	cmp	r3, #8
 801201a:	d009      	beq.n	8012030 <tcp_kill_state+0x24>
 801201c:	79fb      	ldrb	r3, [r7, #7]
 801201e:	2b09      	cmp	r3, #9
 8012020:	d006      	beq.n	8012030 <tcp_kill_state+0x24>
 8012022:	4b1a      	ldr	r3, [pc, #104]	; (801208c <tcp_kill_state+0x80>)
 8012024:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012028:	4919      	ldr	r1, [pc, #100]	; (8012090 <tcp_kill_state+0x84>)
 801202a:	481a      	ldr	r0, [pc, #104]	; (8012094 <tcp_kill_state+0x88>)
 801202c:	f007 f918 	bl	8019260 <iprintf>

  inactivity = 0;
 8012030:	2300      	movs	r3, #0
 8012032:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012034:	2300      	movs	r3, #0
 8012036:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012038:	4b17      	ldr	r3, [pc, #92]	; (8012098 <tcp_kill_state+0x8c>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	617b      	str	r3, [r7, #20]
 801203e:	e017      	b.n	8012070 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	7d1b      	ldrb	r3, [r3, #20]
 8012044:	79fa      	ldrb	r2, [r7, #7]
 8012046:	429a      	cmp	r2, r3
 8012048:	d10f      	bne.n	801206a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801204a:	4b14      	ldr	r3, [pc, #80]	; (801209c <tcp_kill_state+0x90>)
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	6a1b      	ldr	r3, [r3, #32]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	68fa      	ldr	r2, [r7, #12]
 8012056:	429a      	cmp	r2, r3
 8012058:	d807      	bhi.n	801206a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801205a:	4b10      	ldr	r3, [pc, #64]	; (801209c <tcp_kill_state+0x90>)
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	6a1b      	ldr	r3, [r3, #32]
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	617b      	str	r3, [r7, #20]
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1e4      	bne.n	8012040 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801207c:	2100      	movs	r1, #0
 801207e:	6938      	ldr	r0, [r7, #16]
 8012080:	f7ff f8a6 	bl	80111d0 <tcp_abandon>
  }
}
 8012084:	bf00      	nop
 8012086:	3718      	adds	r7, #24
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	0801b918 	.word	0x0801b918
 8012090:	0801bc4c 	.word	0x0801bc4c
 8012094:	0801b978 	.word	0x0801b978
 8012098:	200101cc 	.word	0x200101cc
 801209c:	200101d0 	.word	0x200101d0

080120a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80120a6:	2300      	movs	r3, #0
 80120a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80120aa:	2300      	movs	r3, #0
 80120ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80120ae:	4b12      	ldr	r3, [pc, #72]	; (80120f8 <tcp_kill_timewait+0x58>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	e012      	b.n	80120dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80120b6:	4b11      	ldr	r3, [pc, #68]	; (80120fc <tcp_kill_timewait+0x5c>)
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	6a1b      	ldr	r3, [r3, #32]
 80120be:	1ad3      	subs	r3, r2, r3
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d807      	bhi.n	80120d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80120c6:	4b0d      	ldr	r3, [pc, #52]	; (80120fc <tcp_kill_timewait+0x5c>)
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	60fb      	str	r3, [r7, #12]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d1e9      	bne.n	80120b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d002      	beq.n	80120ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80120e8:	68b8      	ldr	r0, [r7, #8]
 80120ea:	f7ff f923 	bl	8011334 <tcp_abort>
  }
}
 80120ee:	bf00      	nop
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	200101dc 	.word	0x200101dc
 80120fc:	200101d0 	.word	0x200101d0

08012100 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	4603      	mov	r3, r0
 8012108:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801210a:	2001      	movs	r0, #1
 801210c:	f7fd fdbe 	bl	800fc8c <memp_malloc>
 8012110:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d124      	bne.n	8012162 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012118:	f7ff ffc2 	bl	80120a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801211c:	2001      	movs	r0, #1
 801211e:	f7fd fdb5 	bl	800fc8c <memp_malloc>
 8012122:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d11b      	bne.n	8012162 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801212a:	2009      	movs	r0, #9
 801212c:	f7ff ff6e 	bl	801200c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012130:	2001      	movs	r0, #1
 8012132:	f7fd fdab 	bl	800fc8c <memp_malloc>
 8012136:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d111      	bne.n	8012162 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801213e:	2008      	movs	r0, #8
 8012140:	f7ff ff64 	bl	801200c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012144:	2001      	movs	r0, #1
 8012146:	f7fd fda1 	bl	800fc8c <memp_malloc>
 801214a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d107      	bne.n	8012162 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	4618      	mov	r0, r3
 8012156:	f7ff ff17 	bl	8011f88 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801215a:	2001      	movs	r0, #1
 801215c:	f7fd fd96 	bl	800fc8c <memp_malloc>
 8012160:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d03f      	beq.n	80121e8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012168:	2298      	movs	r2, #152	; 0x98
 801216a:	2100      	movs	r1, #0
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f007 f86f 	bl	8019250 <memset>
    pcb->prio = prio;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	79fa      	ldrb	r2, [r7, #7]
 8012176:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801217e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012188:	855a      	strh	r2, [r3, #42]	; 0x2a
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	22ff      	movs	r2, #255	; 0xff
 8012196:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801219e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2206      	movs	r2, #6
 80121a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2206      	movs	r2, #6
 80121ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121b4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2201      	movs	r2, #1
 80121ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80121be:	4b0d      	ldr	r3, [pc, #52]	; (80121f4 <tcp_alloc+0xf4>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80121c6:	4b0c      	ldr	r3, [pc, #48]	; (80121f8 <tcp_alloc+0xf8>)
 80121c8:	781a      	ldrb	r2, [r3, #0]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80121d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	4a08      	ldr	r2, [pc, #32]	; (80121fc <tcp_alloc+0xfc>)
 80121dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	4a07      	ldr	r2, [pc, #28]	; (8012200 <tcp_alloc+0x100>)
 80121e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80121e8:	68fb      	ldr	r3, [r7, #12]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	200101d0 	.word	0x200101d0
 80121f8:	2000c802 	.word	0x2000c802
 80121fc:	08011f43 	.word	0x08011f43
 8012200:	006ddd00 	.word	0x006ddd00

08012204 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801220e:	2040      	movs	r0, #64	; 0x40
 8012210:	f7ff ff76 	bl	8012100 <tcp_alloc>
 8012214:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012216:	68fb      	ldr	r3, [r7, #12]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d002      	beq.n	8012236 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	683a      	ldr	r2, [r7, #0]
 8012234:	611a      	str	r2, [r3, #16]
  }
}
 8012236:	bf00      	nop
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr
	...

08012244 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00e      	beq.n	8012272 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d106      	bne.n	801226a <tcp_recv+0x26>
 801225c:	4b07      	ldr	r3, [pc, #28]	; (801227c <tcp_recv+0x38>)
 801225e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8012262:	4907      	ldr	r1, [pc, #28]	; (8012280 <tcp_recv+0x3c>)
 8012264:	4807      	ldr	r0, [pc, #28]	; (8012284 <tcp_recv+0x40>)
 8012266:	f006 fffb 	bl	8019260 <iprintf>
    pcb->recv = recv;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012272:	bf00      	nop
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	0801b918 	.word	0x0801b918
 8012280:	0801bc5c 	.word	0x0801bc5c
 8012284:	0801b978 	.word	0x0801b978

08012288 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00d      	beq.n	80122b4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7d1b      	ldrb	r3, [r3, #20]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d106      	bne.n	80122ae <tcp_sent+0x26>
 80122a0:	4b06      	ldr	r3, [pc, #24]	; (80122bc <tcp_sent+0x34>)
 80122a2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80122a6:	4906      	ldr	r1, [pc, #24]	; (80122c0 <tcp_sent+0x38>)
 80122a8:	4806      	ldr	r0, [pc, #24]	; (80122c4 <tcp_sent+0x3c>)
 80122aa:	f006 ffd9 	bl	8019260 <iprintf>
    pcb->sent = sent;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	683a      	ldr	r2, [r7, #0]
 80122b2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 80122b4:	bf00      	nop
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	0801b918 	.word	0x0801b918
 80122c0:	0801bc84 	.word	0x0801bc84
 80122c4:	0801b978 	.word	0x0801b978

080122c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00e      	beq.n	80122f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	7d1b      	ldrb	r3, [r3, #20]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d106      	bne.n	80122ee <tcp_err+0x26>
 80122e0:	4b07      	ldr	r3, [pc, #28]	; (8012300 <tcp_err+0x38>)
 80122e2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80122e6:	4907      	ldr	r1, [pc, #28]	; (8012304 <tcp_err+0x3c>)
 80122e8:	4807      	ldr	r0, [pc, #28]	; (8012308 <tcp_err+0x40>)
 80122ea:	f006 ffb9 	bl	8019260 <iprintf>
    pcb->errf = err;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	683a      	ldr	r2, [r7, #0]
 80122f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80122f6:	bf00      	nop
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop
 8012300:	0801b918 	.word	0x0801b918
 8012304:	0801bcac 	.word	0x0801bcac
 8012308:	0801b978 	.word	0x0801b978

0801230c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801230c:	b480      	push	{r7}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d008      	beq.n	801232e <tcp_accept+0x22>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	7d1b      	ldrb	r3, [r3, #20]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d104      	bne.n	801232e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	683a      	ldr	r2, [r7, #0]
 801232c:	619a      	str	r2, [r3, #24]
  }
}
 801232e:	bf00      	nop
 8012330:	3714      	adds	r7, #20
 8012332:	46bd      	mov	sp, r7
 8012334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012338:	4770      	bx	lr
	...

0801233c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	4613      	mov	r3, r2
 8012348:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	7d1b      	ldrb	r3, [r3, #20]
 801234e:	2b01      	cmp	r3, #1
 8012350:	d106      	bne.n	8012360 <tcp_poll+0x24>
 8012352:	4b09      	ldr	r3, [pc, #36]	; (8012378 <tcp_poll+0x3c>)
 8012354:	f240 7203 	movw	r2, #1795	; 0x703
 8012358:	4908      	ldr	r1, [pc, #32]	; (801237c <tcp_poll+0x40>)
 801235a:	4809      	ldr	r0, [pc, #36]	; (8012380 <tcp_poll+0x44>)
 801235c:	f006 ff80 	bl	8019260 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	79fa      	ldrb	r2, [r7, #7]
 801236c:	771a      	strb	r2, [r3, #28]
}
 801236e:	bf00      	nop
 8012370:	3710      	adds	r7, #16
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	0801b918 	.word	0x0801b918
 801237c:	0801bcd4 	.word	0x0801bcd4
 8012380:	0801b978 	.word	0x0801b978

08012384 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	7d1b      	ldrb	r3, [r3, #20]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d034      	beq.n	80123fe <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012398:	2b0a      	cmp	r3, #10
 801239a:	d030      	beq.n	80123fe <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d02c      	beq.n	80123fe <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d007      	beq.n	80123bc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe fa79 	bl	80108a8 <pbuf_free>
      pcb->refused_data = NULL;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7ff fd76 	bl	8011eb2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2200      	movs	r2, #0
 80123ca:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff fd6a 	bl	8011eb2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fd65 	bl	8011eb2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	669a      	str	r2, [r3, #104]	; 0x68
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80123fe:	bf00      	nop
 8012400:	3708      	adds	r7, #8
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
	...

08012408 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	683a      	ldr	r2, [r7, #0]
 8012418:	429a      	cmp	r2, r3
 801241a:	d105      	bne.n	8012428 <tcp_pcb_remove+0x20>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	68da      	ldr	r2, [r3, #12]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	601a      	str	r2, [r3, #0]
 8012426:	e013      	b.n	8012450 <tcp_pcb_remove+0x48>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	60fb      	str	r3, [r7, #12]
 801242e:	e00c      	b.n	801244a <tcp_pcb_remove+0x42>
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	683a      	ldr	r2, [r7, #0]
 8012436:	429a      	cmp	r2, r3
 8012438:	d104      	bne.n	8012444 <tcp_pcb_remove+0x3c>
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	68da      	ldr	r2, [r3, #12]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	60da      	str	r2, [r3, #12]
 8012442:	e005      	b.n	8012450 <tcp_pcb_remove+0x48>
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	60fb      	str	r3, [r7, #12]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d1ef      	bne.n	8012430 <tcp_pcb_remove+0x28>
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2200      	movs	r2, #0
 8012454:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012456:	6838      	ldr	r0, [r7, #0]
 8012458:	f7ff ff94 	bl	8012384 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	7d1b      	ldrb	r3, [r3, #20]
 8012460:	2b0a      	cmp	r3, #10
 8012462:	d013      	beq.n	801248c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012468:	2b01      	cmp	r3, #1
 801246a:	d00f      	beq.n	801248c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	7e9b      	ldrb	r3, [r3, #26]
 8012470:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8012474:	2b00      	cmp	r3, #0
 8012476:	d009      	beq.n	801248c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	7e9b      	ldrb	r3, [r3, #26]
 801247c:	f043 0302 	orr.w	r3, r3, #2
 8012480:	b2da      	uxtb	r2, r3
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012486:	6838      	ldr	r0, [r7, #0]
 8012488:	f003 f9be 	bl	8015808 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	7d1b      	ldrb	r3, [r3, #20]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d020      	beq.n	80124d6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012498:	2b00      	cmp	r3, #0
 801249a:	d006      	beq.n	80124aa <tcp_pcb_remove+0xa2>
 801249c:	4b13      	ldr	r3, [pc, #76]	; (80124ec <tcp_pcb_remove+0xe4>)
 801249e:	f240 7253 	movw	r2, #1875	; 0x753
 80124a2:	4913      	ldr	r1, [pc, #76]	; (80124f0 <tcp_pcb_remove+0xe8>)
 80124a4:	4813      	ldr	r0, [pc, #76]	; (80124f4 <tcp_pcb_remove+0xec>)
 80124a6:	f006 fedb 	bl	8019260 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d006      	beq.n	80124c0 <tcp_pcb_remove+0xb8>
 80124b2:	4b0e      	ldr	r3, [pc, #56]	; (80124ec <tcp_pcb_remove+0xe4>)
 80124b4:	f240 7254 	movw	r2, #1876	; 0x754
 80124b8:	490f      	ldr	r1, [pc, #60]	; (80124f8 <tcp_pcb_remove+0xf0>)
 80124ba:	480e      	ldr	r0, [pc, #56]	; (80124f4 <tcp_pcb_remove+0xec>)
 80124bc:	f006 fed0 	bl	8019260 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d006      	beq.n	80124d6 <tcp_pcb_remove+0xce>
 80124c8:	4b08      	ldr	r3, [pc, #32]	; (80124ec <tcp_pcb_remove+0xe4>)
 80124ca:	f240 7256 	movw	r2, #1878	; 0x756
 80124ce:	490b      	ldr	r1, [pc, #44]	; (80124fc <tcp_pcb_remove+0xf4>)
 80124d0:	4808      	ldr	r0, [pc, #32]	; (80124f4 <tcp_pcb_remove+0xec>)
 80124d2:	f006 fec5 	bl	8019260 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2200      	movs	r2, #0
 80124da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	2200      	movs	r2, #0
 80124e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80124e2:	bf00      	nop
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	0801b918 	.word	0x0801b918
 80124f0:	0801bcf4 	.word	0x0801bcf4
 80124f4:	0801b978 	.word	0x0801b978
 80124f8:	0801bd0c 	.word	0x0801bd0c
 80124fc:	0801bd28 	.word	0x0801bd28

08012500 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012508:	4b07      	ldr	r3, [pc, #28]	; (8012528 <tcp_next_iss+0x28>)
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	4b07      	ldr	r3, [pc, #28]	; (801252c <tcp_next_iss+0x2c>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4413      	add	r3, r2
 8012512:	4a05      	ldr	r2, [pc, #20]	; (8012528 <tcp_next_iss+0x28>)
 8012514:	6013      	str	r3, [r2, #0]
  return iss;
 8012516:	4b04      	ldr	r3, [pc, #16]	; (8012528 <tcp_next_iss+0x28>)
 8012518:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	2000002c 	.word	0x2000002c
 801252c:	200101d0 	.word	0x200101d0

08012530 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	4603      	mov	r3, r0
 8012538:	6039      	str	r1, [r7, #0]
 801253a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801253c:	6838      	ldr	r0, [r7, #0]
 801253e:	f005 faed 	bl	8017b1c <ip4_route>
 8012542:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d101      	bne.n	801254e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801254a:	88fb      	ldrh	r3, [r7, #6]
 801254c:	e010      	b.n	8012570 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012552:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012554:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801255c:	897b      	ldrh	r3, [r7, #10]
 801255e:	3b28      	subs	r3, #40	; 0x28
 8012560:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012562:	893a      	ldrh	r2, [r7, #8]
 8012564:	88fb      	ldrh	r3, [r7, #6]
 8012566:	4293      	cmp	r3, r2
 8012568:	bf28      	it	cs
 801256a:	4613      	movcs	r3, r2
 801256c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801256e:	88fb      	ldrh	r3, [r7, #6]
}
 8012570:	4618      	mov	r0, r3
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012586:	e011      	b.n	80125ac <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	429a      	cmp	r2, r3
 8012592:	d108      	bne.n	80125a6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7fe feca 	bl	8011334 <tcp_abort>
      pcb = next;
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	60fb      	str	r3, [r7, #12]
 80125a4:	e002      	b.n	80125ac <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1ea      	bne.n	8012588 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80125b2:	bf00      	nop
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
	...

080125bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d02c      	beq.n	8012626 <tcp_netif_ip_addr_changed+0x6a>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d028      	beq.n	8012626 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80125d4:	4b16      	ldr	r3, [pc, #88]	; (8012630 <tcp_netif_ip_addr_changed+0x74>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4619      	mov	r1, r3
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7ff ffcc 	bl	8012578 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80125e0:	4b14      	ldr	r3, [pc, #80]	; (8012634 <tcp_netif_ip_addr_changed+0x78>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4619      	mov	r1, r3
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ff ffc6 	bl	8012578 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d019      	beq.n	8012626 <tcp_netif_ip_addr_changed+0x6a>
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d015      	beq.n	8012626 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80125fa:	4b0f      	ldr	r3, [pc, #60]	; (8012638 <tcp_netif_ip_addr_changed+0x7c>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	60fb      	str	r3, [r7, #12]
 8012600:	e00e      	b.n	8012620 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	429a      	cmp	r2, r3
 8012612:	d103      	bne.n	801261c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	60fb      	str	r3, [r7, #12]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d1ed      	bne.n	8012602 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012626:	bf00      	nop
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	200101cc 	.word	0x200101cc
 8012634:	200101d8 	.word	0x200101d8
 8012638:	200101d4 	.word	0x200101d4

0801263c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801263c:	b590      	push	{r4, r7, lr}
 801263e:	b08b      	sub	sp, #44	; 0x2c
 8012640:	af02      	add	r7, sp, #8
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	4a82      	ldr	r2, [pc, #520]	; (8012854 <tcp_input+0x218>)
 801264c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	895b      	ldrh	r3, [r3, #10]
 8012652:	2b13      	cmp	r3, #19
 8012654:	f240 838a 	bls.w	8012d6c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012658:	4b7f      	ldr	r3, [pc, #508]	; (8012858 <tcp_input+0x21c>)
 801265a:	695a      	ldr	r2, [r3, #20]
 801265c:	4b7e      	ldr	r3, [pc, #504]	; (8012858 <tcp_input+0x21c>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4619      	mov	r1, r3
 8012662:	4610      	mov	r0, r2
 8012664:	f005 fcd4 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	f040 8380 	bne.w	8012d70 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012670:	4b79      	ldr	r3, [pc, #484]	; (8012858 <tcp_input+0x21c>)
 8012672:	695b      	ldr	r3, [r3, #20]
 8012674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012678:	2be0      	cmp	r3, #224	; 0xe0
 801267a:	f000 8379 	beq.w	8012d70 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801267e:	4b75      	ldr	r3, [pc, #468]	; (8012854 <tcp_input+0x218>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	899b      	ldrh	r3, [r3, #12]
 8012684:	b29b      	uxth	r3, r3
 8012686:	4618      	mov	r0, r3
 8012688:	f7fc fef4 	bl	800f474 <lwip_htons>
 801268c:	4603      	mov	r3, r0
 801268e:	0b1b      	lsrs	r3, r3, #12
 8012690:	b29b      	uxth	r3, r3
 8012692:	b2db      	uxtb	r3, r3
 8012694:	009b      	lsls	r3, r3, #2
 8012696:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012698:	7cbb      	ldrb	r3, [r7, #18]
 801269a:	2b13      	cmp	r3, #19
 801269c:	f240 8368 	bls.w	8012d70 <tcp_input+0x734>
 80126a0:	7cbb      	ldrb	r3, [r7, #18]
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	891b      	ldrh	r3, [r3, #8]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	f200 8361 	bhi.w	8012d70 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80126ae:	7cbb      	ldrb	r3, [r7, #18]
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	3b14      	subs	r3, #20
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	4b69      	ldr	r3, [pc, #420]	; (801285c <tcp_input+0x220>)
 80126b8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80126ba:	4b69      	ldr	r3, [pc, #420]	; (8012860 <tcp_input+0x224>)
 80126bc:	2200      	movs	r2, #0
 80126be:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	895a      	ldrh	r2, [r3, #10]
 80126c4:	7cbb      	ldrb	r3, [r7, #18]
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d30d      	bcc.n	80126e8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80126cc:	4b63      	ldr	r3, [pc, #396]	; (801285c <tcp_input+0x220>)
 80126ce:	881a      	ldrh	r2, [r3, #0]
 80126d0:	4b64      	ldr	r3, [pc, #400]	; (8012864 <tcp_input+0x228>)
 80126d2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80126d4:	7cbb      	ldrb	r3, [r7, #18]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	425b      	negs	r3, r3
 80126da:	b29b      	uxth	r3, r3
 80126dc:	b21b      	sxth	r3, r3
 80126de:	4619      	mov	r1, r3
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7fe f8bd 	bl	8010860 <pbuf_header>
 80126e6:	e055      	b.n	8012794 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d105      	bne.n	80126fc <tcp_input+0xc0>
 80126f0:	4b5d      	ldr	r3, [pc, #372]	; (8012868 <tcp_input+0x22c>)
 80126f2:	22b2      	movs	r2, #178	; 0xb2
 80126f4:	495d      	ldr	r1, [pc, #372]	; (801286c <tcp_input+0x230>)
 80126f6:	485e      	ldr	r0, [pc, #376]	; (8012870 <tcp_input+0x234>)
 80126f8:	f006 fdb2 	bl	8019260 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80126fc:	f06f 0113 	mvn.w	r1, #19
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7fe f8ad 	bl	8010860 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	895a      	ldrh	r2, [r3, #10]
 801270a:	4b56      	ldr	r3, [pc, #344]	; (8012864 <tcp_input+0x228>)
 801270c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801270e:	4b53      	ldr	r3, [pc, #332]	; (801285c <tcp_input+0x220>)
 8012710:	881a      	ldrh	r2, [r3, #0]
 8012712:	4b54      	ldr	r3, [pc, #336]	; (8012864 <tcp_input+0x228>)
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801271a:	4b52      	ldr	r3, [pc, #328]	; (8012864 <tcp_input+0x228>)
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	425b      	negs	r3, r3
 8012720:	b29b      	uxth	r3, r3
 8012722:	b21b      	sxth	r3, r3
 8012724:	4619      	mov	r1, r3
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7fe f89a 	bl	8010860 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	895b      	ldrh	r3, [r3, #10]
 8012732:	8a3a      	ldrh	r2, [r7, #16]
 8012734:	429a      	cmp	r2, r3
 8012736:	f200 831d 	bhi.w	8012d74 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	4a47      	ldr	r2, [pc, #284]	; (8012860 <tcp_input+0x224>)
 8012742:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	8a3b      	ldrh	r3, [r7, #16]
 801274a:	425b      	negs	r3, r3
 801274c:	b29b      	uxth	r3, r3
 801274e:	b21b      	sxth	r3, r3
 8012750:	4619      	mov	r1, r3
 8012752:	4610      	mov	r0, r2
 8012754:	f7fe f884 	bl	8010860 <pbuf_header>
    p->tot_len -= opt2len;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	891a      	ldrh	r2, [r3, #8]
 801275c:	8a3b      	ldrh	r3, [r7, #16]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	b29a      	uxth	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	895b      	ldrh	r3, [r3, #10]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d005      	beq.n	801277a <tcp_input+0x13e>
 801276e:	4b3e      	ldr	r3, [pc, #248]	; (8012868 <tcp_input+0x22c>)
 8012770:	22cf      	movs	r2, #207	; 0xcf
 8012772:	4940      	ldr	r1, [pc, #256]	; (8012874 <tcp_input+0x238>)
 8012774:	483e      	ldr	r0, [pc, #248]	; (8012870 <tcp_input+0x234>)
 8012776:	f006 fd73 	bl	8019260 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	891a      	ldrh	r2, [r3, #8]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	891b      	ldrh	r3, [r3, #8]
 8012784:	429a      	cmp	r2, r3
 8012786:	d005      	beq.n	8012794 <tcp_input+0x158>
 8012788:	4b37      	ldr	r3, [pc, #220]	; (8012868 <tcp_input+0x22c>)
 801278a:	22d0      	movs	r2, #208	; 0xd0
 801278c:	493a      	ldr	r1, [pc, #232]	; (8012878 <tcp_input+0x23c>)
 801278e:	4838      	ldr	r0, [pc, #224]	; (8012870 <tcp_input+0x234>)
 8012790:	f006 fd66 	bl	8019260 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012794:	4b2f      	ldr	r3, [pc, #188]	; (8012854 <tcp_input+0x218>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	b29a      	uxth	r2, r3
 801279c:	4b2d      	ldr	r3, [pc, #180]	; (8012854 <tcp_input+0x218>)
 801279e:	681c      	ldr	r4, [r3, #0]
 80127a0:	4610      	mov	r0, r2
 80127a2:	f7fc fe67 	bl	800f474 <lwip_htons>
 80127a6:	4603      	mov	r3, r0
 80127a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80127aa:	4b2a      	ldr	r3, [pc, #168]	; (8012854 <tcp_input+0x218>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	885b      	ldrh	r3, [r3, #2]
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	4b28      	ldr	r3, [pc, #160]	; (8012854 <tcp_input+0x218>)
 80127b4:	681c      	ldr	r4, [r3, #0]
 80127b6:	4610      	mov	r0, r2
 80127b8:	f7fc fe5c 	bl	800f474 <lwip_htons>
 80127bc:	4603      	mov	r3, r0
 80127be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80127c0:	4b24      	ldr	r3, [pc, #144]	; (8012854 <tcp_input+0x218>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	685a      	ldr	r2, [r3, #4]
 80127c6:	4b23      	ldr	r3, [pc, #140]	; (8012854 <tcp_input+0x218>)
 80127c8:	681c      	ldr	r4, [r3, #0]
 80127ca:	4610      	mov	r0, r2
 80127cc:	f7fc fe60 	bl	800f490 <lwip_htonl>
 80127d0:	4603      	mov	r3, r0
 80127d2:	6063      	str	r3, [r4, #4]
 80127d4:	6863      	ldr	r3, [r4, #4]
 80127d6:	4a29      	ldr	r2, [pc, #164]	; (801287c <tcp_input+0x240>)
 80127d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80127da:	4b1e      	ldr	r3, [pc, #120]	; (8012854 <tcp_input+0x218>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	689a      	ldr	r2, [r3, #8]
 80127e0:	4b1c      	ldr	r3, [pc, #112]	; (8012854 <tcp_input+0x218>)
 80127e2:	681c      	ldr	r4, [r3, #0]
 80127e4:	4610      	mov	r0, r2
 80127e6:	f7fc fe53 	bl	800f490 <lwip_htonl>
 80127ea:	4603      	mov	r3, r0
 80127ec:	60a3      	str	r3, [r4, #8]
 80127ee:	68a3      	ldr	r3, [r4, #8]
 80127f0:	4a23      	ldr	r2, [pc, #140]	; (8012880 <tcp_input+0x244>)
 80127f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80127f4:	4b17      	ldr	r3, [pc, #92]	; (8012854 <tcp_input+0x218>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	89db      	ldrh	r3, [r3, #14]
 80127fa:	b29a      	uxth	r2, r3
 80127fc:	4b15      	ldr	r3, [pc, #84]	; (8012854 <tcp_input+0x218>)
 80127fe:	681c      	ldr	r4, [r3, #0]
 8012800:	4610      	mov	r0, r2
 8012802:	f7fc fe37 	bl	800f474 <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801280a:	4b12      	ldr	r3, [pc, #72]	; (8012854 <tcp_input+0x218>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	899b      	ldrh	r3, [r3, #12]
 8012810:	b29b      	uxth	r3, r3
 8012812:	4618      	mov	r0, r3
 8012814:	f7fc fe2e 	bl	800f474 <lwip_htons>
 8012818:	4603      	mov	r3, r0
 801281a:	b2db      	uxtb	r3, r3
 801281c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012820:	b2da      	uxtb	r2, r3
 8012822:	4b18      	ldr	r3, [pc, #96]	; (8012884 <tcp_input+0x248>)
 8012824:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	891a      	ldrh	r2, [r3, #8]
 801282a:	4b16      	ldr	r3, [pc, #88]	; (8012884 <tcp_input+0x248>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	f003 0303 	and.w	r3, r3, #3
 8012832:	2b00      	cmp	r3, #0
 8012834:	bf14      	ite	ne
 8012836:	2301      	movne	r3, #1
 8012838:	2300      	moveq	r3, #0
 801283a:	b2db      	uxtb	r3, r3
 801283c:	b29b      	uxth	r3, r3
 801283e:	4413      	add	r3, r2
 8012840:	b29a      	uxth	r2, r3
 8012842:	4b11      	ldr	r3, [pc, #68]	; (8012888 <tcp_input+0x24c>)
 8012844:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012846:	2300      	movs	r3, #0
 8012848:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801284a:	4b10      	ldr	r3, [pc, #64]	; (801288c <tcp_input+0x250>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	61fb      	str	r3, [r7, #28]
 8012850:	e082      	b.n	8012958 <tcp_input+0x31c>
 8012852:	bf00      	nop
 8012854:	2000c814 	.word	0x2000c814
 8012858:	2000d110 	.word	0x2000d110
 801285c:	2000c818 	.word	0x2000c818
 8012860:	2000c81c 	.word	0x2000c81c
 8012864:	2000c81a 	.word	0x2000c81a
 8012868:	0801bd40 	.word	0x0801bd40
 801286c:	0801bd98 	.word	0x0801bd98
 8012870:	0801bda8 	.word	0x0801bda8
 8012874:	0801bdd0 	.word	0x0801bdd0
 8012878:	0801bddc 	.word	0x0801bddc
 801287c:	2000c824 	.word	0x2000c824
 8012880:	2000c828 	.word	0x2000c828
 8012884:	2000c830 	.word	0x2000c830
 8012888:	2000c82e 	.word	0x2000c82e
 801288c:	200101cc 	.word	0x200101cc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d105      	bne.n	80128a4 <tcp_input+0x268>
 8012898:	4b8f      	ldr	r3, [pc, #572]	; (8012ad8 <tcp_input+0x49c>)
 801289a:	22e2      	movs	r2, #226	; 0xe2
 801289c:	498f      	ldr	r1, [pc, #572]	; (8012adc <tcp_input+0x4a0>)
 801289e:	4890      	ldr	r0, [pc, #576]	; (8012ae0 <tcp_input+0x4a4>)
 80128a0:	f006 fcde 	bl	8019260 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	7d1b      	ldrb	r3, [r3, #20]
 80128a8:	2b0a      	cmp	r3, #10
 80128aa:	d105      	bne.n	80128b8 <tcp_input+0x27c>
 80128ac:	4b8a      	ldr	r3, [pc, #552]	; (8012ad8 <tcp_input+0x49c>)
 80128ae:	22e3      	movs	r2, #227	; 0xe3
 80128b0:	498c      	ldr	r1, [pc, #560]	; (8012ae4 <tcp_input+0x4a8>)
 80128b2:	488b      	ldr	r0, [pc, #556]	; (8012ae0 <tcp_input+0x4a4>)
 80128b4:	f006 fcd4 	bl	8019260 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	7d1b      	ldrb	r3, [r3, #20]
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d105      	bne.n	80128cc <tcp_input+0x290>
 80128c0:	4b85      	ldr	r3, [pc, #532]	; (8012ad8 <tcp_input+0x49c>)
 80128c2:	22e4      	movs	r2, #228	; 0xe4
 80128c4:	4988      	ldr	r1, [pc, #544]	; (8012ae8 <tcp_input+0x4ac>)
 80128c6:	4886      	ldr	r0, [pc, #536]	; (8012ae0 <tcp_input+0x4a4>)
 80128c8:	f006 fcca 	bl	8019260 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	8b1a      	ldrh	r2, [r3, #24]
 80128d0:	4b86      	ldr	r3, [pc, #536]	; (8012aec <tcp_input+0x4b0>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	429a      	cmp	r2, r3
 80128da:	d138      	bne.n	801294e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	8ada      	ldrh	r2, [r3, #22]
 80128e0:	4b82      	ldr	r3, [pc, #520]	; (8012aec <tcp_input+0x4b0>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	885b      	ldrh	r3, [r3, #2]
 80128e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d130      	bne.n	801294e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	685a      	ldr	r2, [r3, #4]
 80128f0:	4b7f      	ldr	r3, [pc, #508]	; (8012af0 <tcp_input+0x4b4>)
 80128f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d12a      	bne.n	801294e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	4b7c      	ldr	r3, [pc, #496]	; (8012af0 <tcp_input+0x4b4>)
 80128fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012900:	429a      	cmp	r2, r3
 8012902:	d124      	bne.n	801294e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	69fa      	ldr	r2, [r7, #28]
 801290a:	429a      	cmp	r2, r3
 801290c:	d105      	bne.n	801291a <tcp_input+0x2de>
 801290e:	4b72      	ldr	r3, [pc, #456]	; (8012ad8 <tcp_input+0x49c>)
 8012910:	22ec      	movs	r2, #236	; 0xec
 8012912:	4978      	ldr	r1, [pc, #480]	; (8012af4 <tcp_input+0x4b8>)
 8012914:	4872      	ldr	r0, [pc, #456]	; (8012ae0 <tcp_input+0x4a4>)
 8012916:	f006 fca3 	bl	8019260 <iprintf>
      if (prev != NULL) {
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d00a      	beq.n	8012936 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	68da      	ldr	r2, [r3, #12]
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012928:	4b73      	ldr	r3, [pc, #460]	; (8012af8 <tcp_input+0x4bc>)
 801292a:	681a      	ldr	r2, [r3, #0]
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012930:	4a71      	ldr	r2, [pc, #452]	; (8012af8 <tcp_input+0x4bc>)
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	69fa      	ldr	r2, [r7, #28]
 801293c:	429a      	cmp	r2, r3
 801293e:	d10f      	bne.n	8012960 <tcp_input+0x324>
 8012940:	4b65      	ldr	r3, [pc, #404]	; (8012ad8 <tcp_input+0x49c>)
 8012942:	22f4      	movs	r2, #244	; 0xf4
 8012944:	496d      	ldr	r1, [pc, #436]	; (8012afc <tcp_input+0x4c0>)
 8012946:	4866      	ldr	r0, [pc, #408]	; (8012ae0 <tcp_input+0x4a4>)
 8012948:	f006 fc8a 	bl	8019260 <iprintf>
      break;
 801294c:	e008      	b.n	8012960 <tcp_input+0x324>
    }
    prev = pcb;
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	61fb      	str	r3, [r7, #28]
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d198      	bne.n	8012890 <tcp_input+0x254>
 801295e:	e000      	b.n	8012962 <tcp_input+0x326>
      break;
 8012960:	bf00      	nop
  }

  if (pcb == NULL) {
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d173      	bne.n	8012a50 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012968:	4b65      	ldr	r3, [pc, #404]	; (8012b00 <tcp_input+0x4c4>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	61fb      	str	r3, [r7, #28]
 801296e:	e02f      	b.n	80129d0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	7d1b      	ldrb	r3, [r3, #20]
 8012974:	2b0a      	cmp	r3, #10
 8012976:	d005      	beq.n	8012984 <tcp_input+0x348>
 8012978:	4b57      	ldr	r3, [pc, #348]	; (8012ad8 <tcp_input+0x49c>)
 801297a:	22fe      	movs	r2, #254	; 0xfe
 801297c:	4961      	ldr	r1, [pc, #388]	; (8012b04 <tcp_input+0x4c8>)
 801297e:	4858      	ldr	r0, [pc, #352]	; (8012ae0 <tcp_input+0x4a4>)
 8012980:	f006 fc6e 	bl	8019260 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	8b1a      	ldrh	r2, [r3, #24]
 8012988:	4b58      	ldr	r3, [pc, #352]	; (8012aec <tcp_input+0x4b0>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	881b      	ldrh	r3, [r3, #0]
 801298e:	b29b      	uxth	r3, r3
 8012990:	429a      	cmp	r2, r3
 8012992:	d11a      	bne.n	80129ca <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	8ada      	ldrh	r2, [r3, #22]
 8012998:	4b54      	ldr	r3, [pc, #336]	; (8012aec <tcp_input+0x4b0>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	885b      	ldrh	r3, [r3, #2]
 801299e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d112      	bne.n	80129ca <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	685a      	ldr	r2, [r3, #4]
 80129a8:	4b51      	ldr	r3, [pc, #324]	; (8012af0 <tcp_input+0x4b4>)
 80129aa:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d10c      	bne.n	80129ca <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	4b4e      	ldr	r3, [pc, #312]	; (8012af0 <tcp_input+0x4b4>)
 80129b6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d106      	bne.n	80129ca <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80129bc:	69f8      	ldr	r0, [r7, #28]
 80129be:	f000 fb15 	bl	8012fec <tcp_timewait_input>
        pbuf_free(p);
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7fd ff70 	bl	80108a8 <pbuf_free>
        return;
 80129c8:	e1da      	b.n	8012d80 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	61fb      	str	r3, [r7, #28]
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d1cc      	bne.n	8012970 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80129d6:	2300      	movs	r3, #0
 80129d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129da:	4b4b      	ldr	r3, [pc, #300]	; (8012b08 <tcp_input+0x4cc>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	e019      	b.n	8012a16 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	8ada      	ldrh	r2, [r3, #22]
 80129e6:	4b41      	ldr	r3, [pc, #260]	; (8012aec <tcp_input+0x4b0>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	885b      	ldrh	r3, [r3, #2]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d10c      	bne.n	8012a0c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	4b3e      	ldr	r3, [pc, #248]	; (8012af0 <tcp_input+0x4b4>)
 80129f8:	695b      	ldr	r3, [r3, #20]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d00f      	beq.n	8012a1e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00d      	beq.n	8012a20 <tcp_input+0x3e4>
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d009      	beq.n	8012a20 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	617b      	str	r3, [r7, #20]
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d1e2      	bne.n	80129e2 <tcp_input+0x3a6>
 8012a1c:	e000      	b.n	8012a20 <tcp_input+0x3e4>
            break;
 8012a1e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d014      	beq.n	8012a50 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00a      	beq.n	8012a42 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	68da      	ldr	r2, [r3, #12]
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012a34:	4b34      	ldr	r3, [pc, #208]	; (8012b08 <tcp_input+0x4cc>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012a3c:	4a32      	ldr	r2, [pc, #200]	; (8012b08 <tcp_input+0x4cc>)
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012a42:	6978      	ldr	r0, [r7, #20]
 8012a44:	f000 f9f0 	bl	8012e28 <tcp_listen_input>
      pbuf_free(p);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7fd ff2d 	bl	80108a8 <pbuf_free>
      return;
 8012a4e:	e197      	b.n	8012d80 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 8164 	beq.w	8012d20 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012a58:	4b2c      	ldr	r3, [pc, #176]	; (8012b0c <tcp_input+0x4d0>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	891a      	ldrh	r2, [r3, #8]
 8012a62:	4b2a      	ldr	r3, [pc, #168]	; (8012b0c <tcp_input+0x4d0>)
 8012a64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012a66:	4a29      	ldr	r2, [pc, #164]	; (8012b0c <tcp_input+0x4d0>)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012a6c:	4b1f      	ldr	r3, [pc, #124]	; (8012aec <tcp_input+0x4b0>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a26      	ldr	r2, [pc, #152]	; (8012b0c <tcp_input+0x4d0>)
 8012a72:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012a74:	4b26      	ldr	r3, [pc, #152]	; (8012b10 <tcp_input+0x4d4>)
 8012a76:	2200      	movs	r2, #0
 8012a78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012a7a:	4b26      	ldr	r3, [pc, #152]	; (8012b14 <tcp_input+0x4d8>)
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012a80:	4b25      	ldr	r3, [pc, #148]	; (8012b18 <tcp_input+0x4dc>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012a86:	4b25      	ldr	r3, [pc, #148]	; (8012b1c <tcp_input+0x4e0>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0308 	and.w	r3, r3, #8
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d006      	beq.n	8012aa0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	7b5b      	ldrb	r3, [r3, #13]
 8012a96:	f043 0301 	orr.w	r3, r3, #1
 8012a9a:	b2da      	uxtb	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d03d      	beq.n	8012b24 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012aa8:	69f8      	ldr	r0, [r7, #28]
 8012aaa:	f7ff f999 	bl	8011de0 <tcp_process_refused_data>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f113 0f0d 	cmn.w	r3, #13
 8012ab4:	d007      	beq.n	8012ac6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d032      	beq.n	8012b24 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012abe:	4b18      	ldr	r3, [pc, #96]	; (8012b20 <tcp_input+0x4e4>)
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d02e      	beq.n	8012b24 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f040 8108 	bne.w	8012ce0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ad0:	69f8      	ldr	r0, [r7, #28]
 8012ad2:	f002 fe3d 	bl	8015750 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ad6:	e103      	b.n	8012ce0 <tcp_input+0x6a4>
 8012ad8:	0801bd40 	.word	0x0801bd40
 8012adc:	0801bdfc 	.word	0x0801bdfc
 8012ae0:	0801bda8 	.word	0x0801bda8
 8012ae4:	0801be24 	.word	0x0801be24
 8012ae8:	0801be50 	.word	0x0801be50
 8012aec:	2000c814 	.word	0x2000c814
 8012af0:	2000d110 	.word	0x2000d110
 8012af4:	0801be78 	.word	0x0801be78
 8012af8:	200101cc 	.word	0x200101cc
 8012afc:	0801bea4 	.word	0x0801bea4
 8012b00:	200101dc 	.word	0x200101dc
 8012b04:	0801bed0 	.word	0x0801bed0
 8012b08:	200101d4 	.word	0x200101d4
 8012b0c:	2000c804 	.word	0x2000c804
 8012b10:	2000c834 	.word	0x2000c834
 8012b14:	2000c831 	.word	0x2000c831
 8012b18:	2000c82c 	.word	0x2000c82c
 8012b1c:	2000c830 	.word	0x2000c830
 8012b20:	2000c82e 	.word	0x2000c82e
      }
    }
    tcp_input_pcb = pcb;
 8012b24:	4a98      	ldr	r2, [pc, #608]	; (8012d88 <tcp_input+0x74c>)
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012b2a:	69f8      	ldr	r0, [r7, #28]
 8012b2c:	f000 fac6 	bl	80130bc <tcp_process>
 8012b30:	4603      	mov	r3, r0
 8012b32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012b34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b38:	f113 0f0d 	cmn.w	r3, #13
 8012b3c:	f000 80d2 	beq.w	8012ce4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8012b40:	4b92      	ldr	r3, [pc, #584]	; (8012d8c <tcp_input+0x750>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 0308 	and.w	r3, r3, #8
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d016      	beq.n	8012b7a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d008      	beq.n	8012b68 <tcp_input+0x52c>
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b5c:	69fa      	ldr	r2, [r7, #28]
 8012b5e:	6912      	ldr	r2, [r2, #16]
 8012b60:	f06f 010d 	mvn.w	r1, #13
 8012b64:	4610      	mov	r0, r2
 8012b66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012b68:	69f9      	ldr	r1, [r7, #28]
 8012b6a:	4889      	ldr	r0, [pc, #548]	; (8012d90 <tcp_input+0x754>)
 8012b6c:	f7ff fc4c 	bl	8012408 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012b70:	69f9      	ldr	r1, [r7, #28]
 8012b72:	2001      	movs	r0, #1
 8012b74:	f7fd f900 	bl	800fd78 <memp_free>
 8012b78:	e0bf      	b.n	8012cfa <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012b7e:	4b85      	ldr	r3, [pc, #532]	; (8012d94 <tcp_input+0x758>)
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d01b      	beq.n	8012bbe <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012b86:	4b83      	ldr	r3, [pc, #524]	; (8012d94 <tcp_input+0x758>)
 8012b88:	881b      	ldrh	r3, [r3, #0]
 8012b8a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d009      	beq.n	8012ba8 <tcp_input+0x56c>
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b98:	69fa      	ldr	r2, [r7, #28]
 8012b9a:	6910      	ldr	r0, [r2, #16]
 8012b9c:	89fa      	ldrh	r2, [r7, #14]
 8012b9e:	69f9      	ldr	r1, [r7, #28]
 8012ba0:	4798      	blx	r3
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	74fb      	strb	r3, [r7, #19]
 8012ba6:	e001      	b.n	8012bac <tcp_input+0x570>
 8012ba8:	2300      	movs	r3, #0
 8012baa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012bac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bb0:	f113 0f0d 	cmn.w	r3, #13
 8012bb4:	f000 8098 	beq.w	8012ce8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012bb8:	4b76      	ldr	r3, [pc, #472]	; (8012d94 <tcp_input+0x758>)
 8012bba:	2200      	movs	r2, #0
 8012bbc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012bbe:	69f8      	ldr	r0, [r7, #28]
 8012bc0:	f000 f900 	bl	8012dc4 <tcp_input_delayed_close>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f040 8090 	bne.w	8012cec <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012bcc:	4b72      	ldr	r3, [pc, #456]	; (8012d98 <tcp_input+0x75c>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d041      	beq.n	8012c58 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <tcp_input+0x5ae>
 8012bdc:	4b6f      	ldr	r3, [pc, #444]	; (8012d9c <tcp_input+0x760>)
 8012bde:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012be2:	496f      	ldr	r1, [pc, #444]	; (8012da0 <tcp_input+0x764>)
 8012be4:	486f      	ldr	r0, [pc, #444]	; (8012da4 <tcp_input+0x768>)
 8012be6:	f006 fb3b 	bl	8019260 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	7e9b      	ldrb	r3, [r3, #26]
 8012bee:	f003 0310 	and.w	r3, r3, #16
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d008      	beq.n	8012c08 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012bf6:	4b68      	ldr	r3, [pc, #416]	; (8012d98 <tcp_input+0x75c>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fd fe54 	bl	80108a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012c00:	69f8      	ldr	r0, [r7, #28]
 8012c02:	f7fe fb97 	bl	8011334 <tcp_abort>
            goto aborted;
 8012c06:	e078      	b.n	8012cfa <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00c      	beq.n	8012c2c <tcp_input+0x5f0>
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	6918      	ldr	r0, [r3, #16]
 8012c1c:	4b5e      	ldr	r3, [pc, #376]	; (8012d98 <tcp_input+0x75c>)
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	2300      	movs	r3, #0
 8012c22:	69f9      	ldr	r1, [r7, #28]
 8012c24:	47a0      	blx	r4
 8012c26:	4603      	mov	r3, r0
 8012c28:	74fb      	strb	r3, [r7, #19]
 8012c2a:	e008      	b.n	8012c3e <tcp_input+0x602>
 8012c2c:	4b5a      	ldr	r3, [pc, #360]	; (8012d98 <tcp_input+0x75c>)
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	2300      	movs	r3, #0
 8012c32:	69f9      	ldr	r1, [r7, #28]
 8012c34:	2000      	movs	r0, #0
 8012c36:	f7ff f984 	bl	8011f42 <tcp_recv_null>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012c3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c42:	f113 0f0d 	cmn.w	r3, #13
 8012c46:	d053      	beq.n	8012cf0 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012c48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d003      	beq.n	8012c58 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012c50:	4b51      	ldr	r3, [pc, #324]	; (8012d98 <tcp_input+0x75c>)
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012c58:	4b4c      	ldr	r3, [pc, #304]	; (8012d8c <tcp_input+0x750>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	f003 0320 	and.w	r3, r3, #32
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d030      	beq.n	8012cc6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d009      	beq.n	8012c80 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c70:	7b5a      	ldrb	r2, [r3, #13]
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c76:	f042 0220 	orr.w	r2, r2, #32
 8012c7a:	b2d2      	uxtb	r2, r2
 8012c7c:	735a      	strb	r2, [r3, #13]
 8012c7e:	e022      	b.n	8012cc6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012c88:	d005      	beq.n	8012c96 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c8e:	3301      	adds	r3, #1
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d00b      	beq.n	8012cb8 <tcp_input+0x67c>
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	6918      	ldr	r0, [r3, #16]
 8012caa:	2300      	movs	r3, #0
 8012cac:	2200      	movs	r2, #0
 8012cae:	69f9      	ldr	r1, [r7, #28]
 8012cb0:	47a0      	blx	r4
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	74fb      	strb	r3, [r7, #19]
 8012cb6:	e001      	b.n	8012cbc <tcp_input+0x680>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012cbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cc0:	f113 0f0d 	cmn.w	r3, #13
 8012cc4:	d016      	beq.n	8012cf4 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012cc6:	4b30      	ldr	r3, [pc, #192]	; (8012d88 <tcp_input+0x74c>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012ccc:	69f8      	ldr	r0, [r7, #28]
 8012cce:	f000 f879 	bl	8012dc4 <tcp_input_delayed_close>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10f      	bne.n	8012cf8 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012cd8:	69f8      	ldr	r0, [r7, #28]
 8012cda:	f002 fd95 	bl	8015808 <tcp_output>
 8012cde:	e00c      	b.n	8012cfa <tcp_input+0x6be>
        goto aborted;
 8012ce0:	bf00      	nop
 8012ce2:	e00a      	b.n	8012cfa <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012ce4:	bf00      	nop
 8012ce6:	e008      	b.n	8012cfa <tcp_input+0x6be>
              goto aborted;
 8012ce8:	bf00      	nop
 8012cea:	e006      	b.n	8012cfa <tcp_input+0x6be>
          goto aborted;
 8012cec:	bf00      	nop
 8012cee:	e004      	b.n	8012cfa <tcp_input+0x6be>
            goto aborted;
 8012cf0:	bf00      	nop
 8012cf2:	e002      	b.n	8012cfa <tcp_input+0x6be>
              goto aborted;
 8012cf4:	bf00      	nop
 8012cf6:	e000      	b.n	8012cfa <tcp_input+0x6be>
          goto aborted;
 8012cf8:	bf00      	nop
    tcp_input_pcb = NULL;
 8012cfa:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <tcp_input+0x74c>)
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012d00:	4b25      	ldr	r3, [pc, #148]	; (8012d98 <tcp_input+0x75c>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012d06:	4b28      	ldr	r3, [pc, #160]	; (8012da8 <tcp_input+0x76c>)
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d037      	beq.n	8012d7e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8012d0e:	4b26      	ldr	r3, [pc, #152]	; (8012da8 <tcp_input+0x76c>)
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fd fdc8 	bl	80108a8 <pbuf_free>
      inseg.p = NULL;
 8012d18:	4b23      	ldr	r3, [pc, #140]	; (8012da8 <tcp_input+0x76c>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012d1e:	e02e      	b.n	8012d7e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012d20:	4b22      	ldr	r3, [pc, #136]	; (8012dac <tcp_input+0x770>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	899b      	ldrh	r3, [r3, #12]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fc fba3 	bl	800f474 <lwip_htons>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	f003 0304 	and.w	r3, r3, #4
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d115      	bne.n	8012d64 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d38:	4b1d      	ldr	r3, [pc, #116]	; (8012db0 <tcp_input+0x774>)
 8012d3a:	6818      	ldr	r0, [r3, #0]
 8012d3c:	4b1d      	ldr	r3, [pc, #116]	; (8012db4 <tcp_input+0x778>)
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	461a      	mov	r2, r3
 8012d42:	4b1d      	ldr	r3, [pc, #116]	; (8012db8 <tcp_input+0x77c>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d48:	4b18      	ldr	r3, [pc, #96]	; (8012dac <tcp_input+0x770>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d4c:	885b      	ldrh	r3, [r3, #2]
 8012d4e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d50:	4a16      	ldr	r2, [pc, #88]	; (8012dac <tcp_input+0x770>)
 8012d52:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d54:	8812      	ldrh	r2, [r2, #0]
 8012d56:	b292      	uxth	r2, r2
 8012d58:	9201      	str	r2, [sp, #4]
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	4b17      	ldr	r3, [pc, #92]	; (8012dbc <tcp_input+0x780>)
 8012d5e:	4a18      	ldr	r2, [pc, #96]	; (8012dc0 <tcp_input+0x784>)
 8012d60:	f002 ffdc 	bl	8015d1c <tcp_rst>
    pbuf_free(p);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7fd fd9f 	bl	80108a8 <pbuf_free>
  return;
 8012d6a:	e008      	b.n	8012d7e <tcp_input+0x742>
    goto dropped;
 8012d6c:	bf00      	nop
 8012d6e:	e002      	b.n	8012d76 <tcp_input+0x73a>
dropped:
 8012d70:	bf00      	nop
 8012d72:	e000      	b.n	8012d76 <tcp_input+0x73a>
      goto dropped;
 8012d74:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7fd fd96 	bl	80108a8 <pbuf_free>
 8012d7c:	e000      	b.n	8012d80 <tcp_input+0x744>
  return;
 8012d7e:	bf00      	nop
}
 8012d80:	3724      	adds	r7, #36	; 0x24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd90      	pop	{r4, r7, pc}
 8012d86:	bf00      	nop
 8012d88:	200101e0 	.word	0x200101e0
 8012d8c:	2000c831 	.word	0x2000c831
 8012d90:	200101cc 	.word	0x200101cc
 8012d94:	2000c82c 	.word	0x2000c82c
 8012d98:	2000c834 	.word	0x2000c834
 8012d9c:	0801bd40 	.word	0x0801bd40
 8012da0:	0801bf00 	.word	0x0801bf00
 8012da4:	0801bda8 	.word	0x0801bda8
 8012da8:	2000c804 	.word	0x2000c804
 8012dac:	2000c814 	.word	0x2000c814
 8012db0:	2000c828 	.word	0x2000c828
 8012db4:	2000c82e 	.word	0x2000c82e
 8012db8:	2000c824 	.word	0x2000c824
 8012dbc:	2000d120 	.word	0x2000d120
 8012dc0:	2000d124 	.word	0x2000d124

08012dc4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8012dcc:	4b14      	ldr	r3, [pc, #80]	; (8012e20 <tcp_input_delayed_close+0x5c>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f003 0310 	and.w	r3, r3, #16
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d01d      	beq.n	8012e14 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	7e9b      	ldrb	r3, [r3, #26]
 8012ddc:	f003 0310 	and.w	r3, r3, #16
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d10d      	bne.n	8012e00 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d008      	beq.n	8012e00 <tcp_input_delayed_close+0x3c>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	6912      	ldr	r2, [r2, #16]
 8012df8:	f06f 010e 	mvn.w	r1, #14
 8012dfc:	4610      	mov	r0, r2
 8012dfe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e00:	6879      	ldr	r1, [r7, #4]
 8012e02:	4808      	ldr	r0, [pc, #32]	; (8012e24 <tcp_input_delayed_close+0x60>)
 8012e04:	f7ff fb00 	bl	8012408 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8012e08:	6879      	ldr	r1, [r7, #4]
 8012e0a:	2001      	movs	r0, #1
 8012e0c:	f7fc ffb4 	bl	800fd78 <memp_free>
    return 1;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e000      	b.n	8012e16 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8012e14:	2300      	movs	r3, #0
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3708      	adds	r7, #8
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	2000c831 	.word	0x2000c831
 8012e24:	200101cc 	.word	0x200101cc

08012e28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b088      	sub	sp, #32
 8012e2c:	af02      	add	r7, sp, #8
 8012e2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012e30:	4b64      	ldr	r3, [pc, #400]	; (8012fc4 <tcp_listen_input+0x19c>)
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	f003 0304 	and.w	r3, r3, #4
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f040 80bc 	bne.w	8012fb6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012e3e:	4b61      	ldr	r3, [pc, #388]	; (8012fc4 <tcp_listen_input+0x19c>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	f003 0310 	and.w	r3, r3, #16
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d016      	beq.n	8012e78 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e4a:	4b5f      	ldr	r3, [pc, #380]	; (8012fc8 <tcp_listen_input+0x1a0>)
 8012e4c:	6818      	ldr	r0, [r3, #0]
 8012e4e:	4b5f      	ldr	r3, [pc, #380]	; (8012fcc <tcp_listen_input+0x1a4>)
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	461a      	mov	r2, r3
 8012e54:	4b5e      	ldr	r3, [pc, #376]	; (8012fd0 <tcp_listen_input+0x1a8>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e5a:	4b5e      	ldr	r3, [pc, #376]	; (8012fd4 <tcp_listen_input+0x1ac>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e5e:	885b      	ldrh	r3, [r3, #2]
 8012e60:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e62:	4a5c      	ldr	r2, [pc, #368]	; (8012fd4 <tcp_listen_input+0x1ac>)
 8012e64:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e66:	8812      	ldrh	r2, [r2, #0]
 8012e68:	b292      	uxth	r2, r2
 8012e6a:	9201      	str	r2, [sp, #4]
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	4b5a      	ldr	r3, [pc, #360]	; (8012fd8 <tcp_listen_input+0x1b0>)
 8012e70:	4a5a      	ldr	r2, [pc, #360]	; (8012fdc <tcp_listen_input+0x1b4>)
 8012e72:	f002 ff53 	bl	8015d1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012e76:	e0a0      	b.n	8012fba <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8012e78:	4b52      	ldr	r3, [pc, #328]	; (8012fc4 <tcp_listen_input+0x19c>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f003 0302 	and.w	r3, r3, #2
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 809a 	beq.w	8012fba <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	7d5b      	ldrb	r3, [r3, #21]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ff f938 	bl	8012100 <tcp_alloc>
 8012e90:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d111      	bne.n	8012ebc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d00a      	beq.n	8012eb6 <tcp_listen_input+0x8e>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	6910      	ldr	r0, [r2, #16]
 8012ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8012eac:	2100      	movs	r1, #0
 8012eae:	4798      	blx	r3
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	73bb      	strb	r3, [r7, #14]
      return;
 8012eb4:	e082      	b.n	8012fbc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012eb6:	23f0      	movs	r3, #240	; 0xf0
 8012eb8:	73bb      	strb	r3, [r7, #14]
      return;
 8012eba:	e07f      	b.n	8012fbc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012ebc:	4b48      	ldr	r3, [pc, #288]	; (8012fe0 <tcp_listen_input+0x1b8>)
 8012ebe:	695a      	ldr	r2, [r3, #20]
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012ec4:	4b46      	ldr	r3, [pc, #280]	; (8012fe0 <tcp_listen_input+0x1b8>)
 8012ec6:	691a      	ldr	r2, [r3, #16]
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	8ada      	ldrh	r2, [r3, #22]
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012ed4:	4b3f      	ldr	r3, [pc, #252]	; (8012fd4 <tcp_listen_input+0x1ac>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	2203      	movs	r2, #3
 8012ee4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012ee6:	4b3a      	ldr	r3, [pc, #232]	; (8012fd0 <tcp_listen_input+0x1a8>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	1c5a      	adds	r2, r3, #1
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012ef8:	6978      	ldr	r0, [r7, #20]
 8012efa:	f7ff fb01 	bl	8012500 <tcp_next_iss>
 8012efe:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	693a      	ldr	r2, [r7, #16]
 8012f04:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	693a      	ldr	r2, [r7, #16]
 8012f0a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	693a      	ldr	r2, [r7, #16]
 8012f10:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	693a      	ldr	r2, [r7, #16]
 8012f16:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012f18:	4b2d      	ldr	r3, [pc, #180]	; (8012fd0 <tcp_listen_input+0x1a8>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	1e5a      	subs	r2, r3, #1
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	691a      	ldr	r2, [r3, #16]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	7a1b      	ldrb	r3, [r3, #8]
 8012f34:	f003 030c 	and.w	r3, r3, #12
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012f3e:	4b29      	ldr	r3, [pc, #164]	; (8012fe4 <tcp_listen_input+0x1bc>)
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	60da      	str	r2, [r3, #12]
 8012f46:	4a27      	ldr	r2, [pc, #156]	; (8012fe4 <tcp_listen_input+0x1bc>)
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	f003 f938 	bl	80161c0 <tcp_timer_needed>
 8012f50:	4b25      	ldr	r3, [pc, #148]	; (8012fe8 <tcp_listen_input+0x1c0>)
 8012f52:	2201      	movs	r2, #1
 8012f54:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012f56:	6978      	ldr	r0, [r7, #20]
 8012f58:	f001 fd14 	bl	8014984 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012f5c:	4b1d      	ldr	r3, [pc, #116]	; (8012fd4 <tcp_listen_input+0x1ac>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	89db      	ldrh	r3, [r3, #14]
 8012f62:	b29a      	uxth	r2, r3
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	3304      	adds	r3, #4
 8012f7e:	4619      	mov	r1, r3
 8012f80:	4610      	mov	r0, r2
 8012f82:	f7ff fad5 	bl	8012530 <tcp_eff_send_mss_impl>
 8012f86:	4603      	mov	r3, r0
 8012f88:	461a      	mov	r2, r3
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012f8e:	2112      	movs	r1, #18
 8012f90:	6978      	ldr	r0, [r7, #20]
 8012f92:	f002 fae1 	bl	8015558 <tcp_enqueue_flags>
 8012f96:	4603      	mov	r3, r0
 8012f98:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d004      	beq.n	8012fac <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	6978      	ldr	r0, [r7, #20]
 8012fa6:	f7fe f913 	bl	80111d0 <tcp_abandon>
      return;
 8012faa:	e007      	b.n	8012fbc <tcp_listen_input+0x194>
    tcp_output(npcb);
 8012fac:	6978      	ldr	r0, [r7, #20]
 8012fae:	f002 fc2b 	bl	8015808 <tcp_output>
  return;
 8012fb2:	bf00      	nop
 8012fb4:	e001      	b.n	8012fba <tcp_listen_input+0x192>
    return;
 8012fb6:	bf00      	nop
 8012fb8:	e000      	b.n	8012fbc <tcp_listen_input+0x194>
  return;
 8012fba:	bf00      	nop
}
 8012fbc:	3718      	adds	r7, #24
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	2000c830 	.word	0x2000c830
 8012fc8:	2000c828 	.word	0x2000c828
 8012fcc:	2000c82e 	.word	0x2000c82e
 8012fd0:	2000c824 	.word	0x2000c824
 8012fd4:	2000c814 	.word	0x2000c814
 8012fd8:	2000d120 	.word	0x2000d120
 8012fdc:	2000d124 	.word	0x2000d124
 8012fe0:	2000d110 	.word	0x2000d110
 8012fe4:	200101cc 	.word	0x200101cc
 8012fe8:	200101c8 	.word	0x200101c8

08012fec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af02      	add	r7, sp, #8
 8012ff2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012ff4:	4b29      	ldr	r3, [pc, #164]	; (801309c <tcp_timewait_input+0xb0>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 0304 	and.w	r3, r3, #4
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d147      	bne.n	8013090 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013000:	4b26      	ldr	r3, [pc, #152]	; (801309c <tcp_timewait_input+0xb0>)
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	f003 0302 	and.w	r3, r3, #2
 8013008:	2b00      	cmp	r3, #0
 801300a:	d027      	beq.n	801305c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801300c:	4b24      	ldr	r3, [pc, #144]	; (80130a0 <tcp_timewait_input+0xb4>)
 801300e:	681a      	ldr	r2, [r3, #0]
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013014:	1ad3      	subs	r3, r2, r3
 8013016:	2b00      	cmp	r3, #0
 8013018:	db2a      	blt.n	8013070 <tcp_timewait_input+0x84>
 801301a:	4b21      	ldr	r3, [pc, #132]	; (80130a0 <tcp_timewait_input+0xb4>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013022:	6879      	ldr	r1, [r7, #4]
 8013024:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013026:	440b      	add	r3, r1
 8013028:	1ad3      	subs	r3, r2, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	dc20      	bgt.n	8013070 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801302e:	4b1d      	ldr	r3, [pc, #116]	; (80130a4 <tcp_timewait_input+0xb8>)
 8013030:	6818      	ldr	r0, [r3, #0]
 8013032:	4b1d      	ldr	r3, [pc, #116]	; (80130a8 <tcp_timewait_input+0xbc>)
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <tcp_timewait_input+0xb4>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801303e:	4b1b      	ldr	r3, [pc, #108]	; (80130ac <tcp_timewait_input+0xc0>)
 8013040:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013042:	885b      	ldrh	r3, [r3, #2]
 8013044:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013046:	4a19      	ldr	r2, [pc, #100]	; (80130ac <tcp_timewait_input+0xc0>)
 8013048:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801304a:	8812      	ldrh	r2, [r2, #0]
 801304c:	b292      	uxth	r2, r2
 801304e:	9201      	str	r2, [sp, #4]
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	4b17      	ldr	r3, [pc, #92]	; (80130b0 <tcp_timewait_input+0xc4>)
 8013054:	4a17      	ldr	r2, [pc, #92]	; (80130b4 <tcp_timewait_input+0xc8>)
 8013056:	f002 fe61 	bl	8015d1c <tcp_rst>
      return;
 801305a:	e01c      	b.n	8013096 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801305c:	4b0f      	ldr	r3, [pc, #60]	; (801309c <tcp_timewait_input+0xb0>)
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	f003 0301 	and.w	r3, r3, #1
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013068:	4b13      	ldr	r3, [pc, #76]	; (80130b8 <tcp_timewait_input+0xcc>)
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013070:	4b0d      	ldr	r3, [pc, #52]	; (80130a8 <tcp_timewait_input+0xbc>)
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d00d      	beq.n	8013094 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7e9b      	ldrb	r3, [r3, #26]
 801307c:	f043 0302 	orr.w	r3, r3, #2
 8013080:	b2da      	uxtb	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f002 fbbe 	bl	8015808 <tcp_output>
  }
  return;
 801308c:	bf00      	nop
 801308e:	e001      	b.n	8013094 <tcp_timewait_input+0xa8>
    return;
 8013090:	bf00      	nop
 8013092:	e000      	b.n	8013096 <tcp_timewait_input+0xaa>
  return;
 8013094:	bf00      	nop
}
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	2000c830 	.word	0x2000c830
 80130a0:	2000c824 	.word	0x2000c824
 80130a4:	2000c828 	.word	0x2000c828
 80130a8:	2000c82e 	.word	0x2000c82e
 80130ac:	2000c814 	.word	0x2000c814
 80130b0:	2000d120 	.word	0x2000d120
 80130b4:	2000d124 	.word	0x2000d124
 80130b8:	200101d0 	.word	0x200101d0

080130bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08a      	sub	sp, #40	; 0x28
 80130c0:	af02      	add	r7, sp, #8
 80130c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80130c8:	2300      	movs	r3, #0
 80130ca:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80130cc:	4ba4      	ldr	r3, [pc, #656]	; (8013360 <tcp_process+0x2a4>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 0304 	and.w	r3, r3, #4
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d04e      	beq.n	8013176 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	7d1b      	ldrb	r3, [r3, #20]
 80130dc:	2b02      	cmp	r3, #2
 80130de:	d108      	bne.n	80130f2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130e4:	4b9f      	ldr	r3, [pc, #636]	; (8013364 <tcp_process+0x2a8>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d123      	bne.n	8013134 <tcp_process+0x78>
        acceptable = 1;
 80130ec:	2301      	movs	r3, #1
 80130ee:	76fb      	strb	r3, [r7, #27]
 80130f0:	e020      	b.n	8013134 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130f6:	4b9c      	ldr	r3, [pc, #624]	; (8013368 <tcp_process+0x2ac>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d102      	bne.n	8013104 <tcp_process+0x48>
        acceptable = 1;
 80130fe:	2301      	movs	r3, #1
 8013100:	76fb      	strb	r3, [r7, #27]
 8013102:	e017      	b.n	8013134 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013104:	4b98      	ldr	r3, [pc, #608]	; (8013368 <tcp_process+0x2ac>)
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801310c:	1ad3      	subs	r3, r2, r3
 801310e:	2b00      	cmp	r3, #0
 8013110:	db10      	blt.n	8013134 <tcp_process+0x78>
 8013112:	4b95      	ldr	r3, [pc, #596]	; (8013368 <tcp_process+0x2ac>)
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311a:	6879      	ldr	r1, [r7, #4]
 801311c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801311e:	440b      	add	r3, r1
 8013120:	1ad3      	subs	r3, r2, r3
 8013122:	2b00      	cmp	r3, #0
 8013124:	dc06      	bgt.n	8013134 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	7e9b      	ldrb	r3, [r3, #26]
 801312a:	f043 0302 	orr.w	r3, r3, #2
 801312e:	b2da      	uxtb	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013134:	7efb      	ldrb	r3, [r7, #27]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d01b      	beq.n	8013172 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	7d1b      	ldrb	r3, [r3, #20]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <tcp_process+0x94>
 8013142:	4b8a      	ldr	r3, [pc, #552]	; (801336c <tcp_process+0x2b0>)
 8013144:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013148:	4989      	ldr	r1, [pc, #548]	; (8013370 <tcp_process+0x2b4>)
 801314a:	488a      	ldr	r0, [pc, #552]	; (8013374 <tcp_process+0x2b8>)
 801314c:	f006 f888 	bl	8019260 <iprintf>
      recv_flags |= TF_RESET;
 8013150:	4b89      	ldr	r3, [pc, #548]	; (8013378 <tcp_process+0x2bc>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f043 0308 	orr.w	r3, r3, #8
 8013158:	b2da      	uxtb	r2, r3
 801315a:	4b87      	ldr	r3, [pc, #540]	; (8013378 <tcp_process+0x2bc>)
 801315c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	7e9b      	ldrb	r3, [r3, #26]
 8013162:	f023 0301 	bic.w	r3, r3, #1
 8013166:	b2da      	uxtb	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801316c:	f06f 030d 	mvn.w	r3, #13
 8013170:	e34d      	b.n	801380e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	e34b      	b.n	801380e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013176:	4b7a      	ldr	r3, [pc, #488]	; (8013360 <tcp_process+0x2a4>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	f003 0302 	and.w	r3, r3, #2
 801317e:	2b00      	cmp	r3, #0
 8013180:	d010      	beq.n	80131a4 <tcp_process+0xe8>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	7d1b      	ldrb	r3, [r3, #20]
 8013186:	2b02      	cmp	r3, #2
 8013188:	d00c      	beq.n	80131a4 <tcp_process+0xe8>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	2b03      	cmp	r3, #3
 8013190:	d008      	beq.n	80131a4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	7e9b      	ldrb	r3, [r3, #26]
 8013196:	f043 0302 	orr.w	r3, r3, #2
 801319a:	b2da      	uxtb	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e334      	b.n	801380e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	7e9b      	ldrb	r3, [r3, #26]
 80131a8:	f003 0310 	and.w	r3, r3, #16
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d103      	bne.n	80131b8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80131b0:	4b72      	ldr	r3, [pc, #456]	; (801337c <tcp_process+0x2c0>)
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2200      	movs	r2, #0
 80131bc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f001 fbdf 	bl	8014984 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	7d1b      	ldrb	r3, [r3, #20]
 80131ca:	3b02      	subs	r3, #2
 80131cc:	2b07      	cmp	r3, #7
 80131ce:	f200 830e 	bhi.w	80137ee <tcp_process+0x732>
 80131d2:	a201      	add	r2, pc, #4	; (adr r2, 80131d8 <tcp_process+0x11c>)
 80131d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d8:	080131f9 	.word	0x080131f9
 80131dc:	080133f1 	.word	0x080133f1
 80131e0:	08013549 	.word	0x08013549
 80131e4:	08013573 	.word	0x08013573
 80131e8:	0801369d 	.word	0x0801369d
 80131ec:	08013549 	.word	0x08013549
 80131f0:	08013729 	.word	0x08013729
 80131f4:	080137b9 	.word	0x080137b9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80131f8:	4b59      	ldr	r3, [pc, #356]	; (8013360 <tcp_process+0x2a4>)
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	f003 0310 	and.w	r3, r3, #16
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 80cb 	beq.w	801339c <tcp_process+0x2e0>
 8013206:	4b56      	ldr	r3, [pc, #344]	; (8013360 <tcp_process+0x2a4>)
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	f003 0302 	and.w	r3, r3, #2
 801320e:	2b00      	cmp	r3, #0
 8013210:	f000 80c4 	beq.w	801339c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	4b52      	ldr	r3, [pc, #328]	; (8013364 <tcp_process+0x2a8>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	429a      	cmp	r2, r3
 8013220:	f040 80bc 	bne.w	801339c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8013224:	4b50      	ldr	r3, [pc, #320]	; (8013368 <tcp_process+0x2ac>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	1c5a      	adds	r2, r3, #1
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8013236:	4b4b      	ldr	r3, [pc, #300]	; (8013364 <tcp_process+0x2a8>)
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801323e:	4b50      	ldr	r3, [pc, #320]	; (8013380 <tcp_process+0x2c4>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	89db      	ldrh	r3, [r3, #14]
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013258:	4b43      	ldr	r3, [pc, #268]	; (8013368 <tcp_process+0x2ac>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	1e5a      	subs	r2, r3, #1
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2204      	movs	r2, #4
 8013266:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	3304      	adds	r3, #4
 8013270:	4619      	mov	r1, r3
 8013272:	4610      	mov	r0, r2
 8013274:	f7ff f95c 	bl	8012530 <tcp_eff_send_mss_impl>
 8013278:	4603      	mov	r3, r0
 801327a:	461a      	mov	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013284:	005b      	lsls	r3, r3, #1
 8013286:	f241 121c 	movw	r2, #4380	; 0x111c
 801328a:	429a      	cmp	r2, r3
 801328c:	bf38      	it	cc
 801328e:	461a      	movcc	r2, r3
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	4293      	cmp	r3, r2
 8013298:	bf28      	it	cs
 801329a:	4613      	movcs	r3, r2
 801329c:	b29a      	uxth	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <tcp_process+0x200>
 80132ae:	4b2f      	ldr	r3, [pc, #188]	; (801336c <tcp_process+0x2b0>)
 80132b0:	f240 321a 	movw	r2, #794	; 0x31a
 80132b4:	4933      	ldr	r1, [pc, #204]	; (8013384 <tcp_process+0x2c8>)
 80132b6:	482f      	ldr	r0, [pc, #188]	; (8013374 <tcp_process+0x2b8>)
 80132b8:	f005 ffd2 	bl	8019260 <iprintf>
      --pcb->snd_queuelen;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80132c2:	3b01      	subs	r3, #1
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132d0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d111      	bne.n	80132fc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132dc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d106      	bne.n	80132f2 <tcp_process+0x236>
 80132e4:	4b21      	ldr	r3, [pc, #132]	; (801336c <tcp_process+0x2b0>)
 80132e6:	f240 3222 	movw	r2, #802	; 0x322
 80132ea:	4927      	ldr	r1, [pc, #156]	; (8013388 <tcp_process+0x2cc>)
 80132ec:	4821      	ldr	r0, [pc, #132]	; (8013374 <tcp_process+0x2b8>)
 80132ee:	f005 ffb7 	bl	8019260 <iprintf>
        pcb->unsent = rseg->next;
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	669a      	str	r2, [r3, #104]	; 0x68
 80132fa:	e003      	b.n	8013304 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8013304:	69f8      	ldr	r0, [r7, #28]
 8013306:	f7fe fde8 	bl	8011eda <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801330e:	2b00      	cmp	r3, #0
 8013310:	d104      	bne.n	801331c <tcp_process+0x260>
        pcb->rtime = -1;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013318:	861a      	strh	r2, [r3, #48]	; 0x30
 801331a:	e006      	b.n	801332a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2200      	movs	r2, #0
 8013320:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2200      	movs	r2, #0
 8013326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00a      	beq.n	801334a <tcp_process+0x28e>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	6910      	ldr	r0, [r2, #16]
 801333e:	2200      	movs	r2, #0
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	4798      	blx	r3
 8013344:	4603      	mov	r3, r0
 8013346:	76bb      	strb	r3, [r7, #26]
 8013348:	e001      	b.n	801334e <tcp_process+0x292>
 801334a:	2300      	movs	r3, #0
 801334c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801334e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013352:	f113 0f0d 	cmn.w	r3, #13
 8013356:	d119      	bne.n	801338c <tcp_process+0x2d0>
        return ERR_ABRT;
 8013358:	f06f 030c 	mvn.w	r3, #12
 801335c:	e257      	b.n	801380e <tcp_process+0x752>
 801335e:	bf00      	nop
 8013360:	2000c830 	.word	0x2000c830
 8013364:	2000c828 	.word	0x2000c828
 8013368:	2000c824 	.word	0x2000c824
 801336c:	0801bd40 	.word	0x0801bd40
 8013370:	0801bf1c 	.word	0x0801bf1c
 8013374:	0801bda8 	.word	0x0801bda8
 8013378:	2000c831 	.word	0x2000c831
 801337c:	200101d0 	.word	0x200101d0
 8013380:	2000c814 	.word	0x2000c814
 8013384:	0801bf3c 	.word	0x0801bf3c
 8013388:	0801bf54 	.word	0x0801bf54
      }
      tcp_ack_now(pcb);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7e9b      	ldrb	r3, [r3, #26]
 8013390:	f043 0302 	orr.w	r3, r3, #2
 8013394:	b2da      	uxtb	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801339a:	e22a      	b.n	80137f2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801339c:	4b9f      	ldr	r3, [pc, #636]	; (801361c <tcp_process+0x560>)
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	f003 0310 	and.w	r3, r3, #16
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f000 8224 	beq.w	80137f2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80133aa:	4b9d      	ldr	r3, [pc, #628]	; (8013620 <tcp_process+0x564>)
 80133ac:	6818      	ldr	r0, [r3, #0]
 80133ae:	4b9d      	ldr	r3, [pc, #628]	; (8013624 <tcp_process+0x568>)
 80133b0:	881b      	ldrh	r3, [r3, #0]
 80133b2:	461a      	mov	r2, r3
 80133b4:	4b9c      	ldr	r3, [pc, #624]	; (8013628 <tcp_process+0x56c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133ba:	4b9c      	ldr	r3, [pc, #624]	; (801362c <tcp_process+0x570>)
 80133bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80133be:	885b      	ldrh	r3, [r3, #2]
 80133c0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133c2:	4a9a      	ldr	r2, [pc, #616]	; (801362c <tcp_process+0x570>)
 80133c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80133c6:	8812      	ldrh	r2, [r2, #0]
 80133c8:	b292      	uxth	r2, r2
 80133ca:	9201      	str	r2, [sp, #4]
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	4b98      	ldr	r3, [pc, #608]	; (8013630 <tcp_process+0x574>)
 80133d0:	4a98      	ldr	r2, [pc, #608]	; (8013634 <tcp_process+0x578>)
 80133d2:	f002 fca3 	bl	8015d1c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133dc:	2b05      	cmp	r3, #5
 80133de:	f200 8208 	bhi.w	80137f2 <tcp_process+0x736>
        pcb->rtime = 0;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2200      	movs	r2, #0
 80133e6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f002 fd0d 	bl	8015e08 <tcp_rexmit_rto>
    break;
 80133ee:	e200      	b.n	80137f2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80133f0:	4b8a      	ldr	r3, [pc, #552]	; (801361c <tcp_process+0x560>)
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	f003 0310 	and.w	r3, r3, #16
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 8091 	beq.w	8013520 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80133fe:	4b88      	ldr	r3, [pc, #544]	; (8013620 <tcp_process+0x564>)
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	3b01      	subs	r3, #1
 801340a:	2b00      	cmp	r3, #0
 801340c:	db71      	blt.n	80134f2 <tcp_process+0x436>
 801340e:	4b84      	ldr	r3, [pc, #528]	; (8013620 <tcp_process+0x564>)
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	2b00      	cmp	r3, #0
 801341a:	dc6a      	bgt.n	80134f2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2204      	movs	r2, #4
 8013420:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013426:	2b00      	cmp	r3, #0
 8013428:	d00b      	beq.n	8013442 <tcp_process+0x386>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801342e:	699b      	ldr	r3, [r3, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d106      	bne.n	8013442 <tcp_process+0x386>
 8013434:	4b80      	ldr	r3, [pc, #512]	; (8013638 <tcp_process+0x57c>)
 8013436:	f240 3251 	movw	r2, #849	; 0x351
 801343a:	4980      	ldr	r1, [pc, #512]	; (801363c <tcp_process+0x580>)
 801343c:	4880      	ldr	r0, [pc, #512]	; (8013640 <tcp_process+0x584>)
 801343e:	f005 ff0f 	bl	8019260 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013446:	2b00      	cmp	r3, #0
 8013448:	d102      	bne.n	8013450 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801344a:	23fa      	movs	r3, #250	; 0xfa
 801344c:	76bb      	strb	r3, [r7, #26]
 801344e:	e011      	b.n	8013474 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013454:	699b      	ldr	r3, [r3, #24]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d00a      	beq.n	8013470 <tcp_process+0x3b4>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801345e:	699b      	ldr	r3, [r3, #24]
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	6910      	ldr	r0, [r2, #16]
 8013464:	2200      	movs	r2, #0
 8013466:	6879      	ldr	r1, [r7, #4]
 8013468:	4798      	blx	r3
 801346a:	4603      	mov	r3, r0
 801346c:	76bb      	strb	r3, [r7, #26]
 801346e:	e001      	b.n	8013474 <tcp_process+0x3b8>
 8013470:	23f0      	movs	r3, #240	; 0xf0
 8013472:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8013474:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d00a      	beq.n	8013492 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801347c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013480:	f113 0f0d 	cmn.w	r3, #13
 8013484:	d002      	beq.n	801348c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7fd ff54 	bl	8011334 <tcp_abort>
          }
          return ERR_ABRT;
 801348c:	f06f 030c 	mvn.w	r3, #12
 8013490:	e1bd      	b.n	801380e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 fa42 	bl	801391c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013498:	4b6a      	ldr	r3, [pc, #424]	; (8013644 <tcp_process+0x588>)
 801349a:	881b      	ldrh	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d005      	beq.n	80134ac <tcp_process+0x3f0>
          recv_acked--;
 80134a0:	4b68      	ldr	r3, [pc, #416]	; (8013644 <tcp_process+0x588>)
 80134a2:	881b      	ldrh	r3, [r3, #0]
 80134a4:	3b01      	subs	r3, #1
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	4b66      	ldr	r3, [pc, #408]	; (8013644 <tcp_process+0x588>)
 80134aa:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134b0:	005b      	lsls	r3, r3, #1
 80134b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80134b6:	429a      	cmp	r2, r3
 80134b8:	bf38      	it	cc
 80134ba:	461a      	movcc	r2, r3
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	4293      	cmp	r3, r2
 80134c4:	bf28      	it	cs
 80134c6:	4613      	movcs	r3, r2
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80134d0:	4b5d      	ldr	r3, [pc, #372]	; (8013648 <tcp_process+0x58c>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	f003 0320 	and.w	r3, r3, #32
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d034      	beq.n	8013546 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	7e9b      	ldrb	r3, [r3, #26]
 80134e0:	f043 0302 	orr.w	r3, r3, #2
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2207      	movs	r2, #7
 80134ee:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80134f0:	e029      	b.n	8013546 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80134f2:	4b4b      	ldr	r3, [pc, #300]	; (8013620 <tcp_process+0x564>)
 80134f4:	6818      	ldr	r0, [r3, #0]
 80134f6:	4b4b      	ldr	r3, [pc, #300]	; (8013624 <tcp_process+0x568>)
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	461a      	mov	r2, r3
 80134fc:	4b4a      	ldr	r3, [pc, #296]	; (8013628 <tcp_process+0x56c>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013502:	4b4a      	ldr	r3, [pc, #296]	; (801362c <tcp_process+0x570>)
 8013504:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013506:	885b      	ldrh	r3, [r3, #2]
 8013508:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801350a:	4a48      	ldr	r2, [pc, #288]	; (801362c <tcp_process+0x570>)
 801350c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801350e:	8812      	ldrh	r2, [r2, #0]
 8013510:	b292      	uxth	r2, r2
 8013512:	9201      	str	r2, [sp, #4]
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	4b46      	ldr	r3, [pc, #280]	; (8013630 <tcp_process+0x574>)
 8013518:	4a46      	ldr	r2, [pc, #280]	; (8013634 <tcp_process+0x578>)
 801351a:	f002 fbff 	bl	8015d1c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801351e:	e16a      	b.n	80137f6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013520:	4b3e      	ldr	r3, [pc, #248]	; (801361c <tcp_process+0x560>)
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	f003 0302 	and.w	r3, r3, #2
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 8164 	beq.w	80137f6 <tcp_process+0x73a>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013532:	1e5a      	subs	r2, r3, #1
 8013534:	4b3c      	ldr	r3, [pc, #240]	; (8013628 <tcp_process+0x56c>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	429a      	cmp	r2, r3
 801353a:	f040 815c 	bne.w	80137f6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f002 fc98 	bl	8015e74 <tcp_rexmit>
    break;
 8013544:	e157      	b.n	80137f6 <tcp_process+0x73a>
 8013546:	e156      	b.n	80137f6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 f9e7 	bl	801391c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801354e:	4b3e      	ldr	r3, [pc, #248]	; (8013648 <tcp_process+0x58c>)
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	f003 0320 	and.w	r3, r3, #32
 8013556:	2b00      	cmp	r3, #0
 8013558:	f000 814f 	beq.w	80137fa <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	7e9b      	ldrb	r3, [r3, #26]
 8013560:	f043 0302 	orr.w	r3, r3, #2
 8013564:	b2da      	uxtb	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2207      	movs	r2, #7
 801356e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8013570:	e143      	b.n	80137fa <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f000 f9d2 	bl	801391c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013578:	4b33      	ldr	r3, [pc, #204]	; (8013648 <tcp_process+0x58c>)
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	f003 0320 	and.w	r3, r3, #32
 8013580:	2b00      	cmp	r3, #0
 8013582:	d074      	beq.n	801366e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013584:	4b25      	ldr	r3, [pc, #148]	; (801361c <tcp_process+0x560>)
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	f003 0310 	and.w	r3, r3, #16
 801358c:	2b00      	cmp	r3, #0
 801358e:	d063      	beq.n	8013658 <tcp_process+0x59c>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013594:	4b22      	ldr	r3, [pc, #136]	; (8013620 <tcp_process+0x564>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	429a      	cmp	r2, r3
 801359a:	d15d      	bne.n	8013658 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d159      	bne.n	8013658 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	7e9b      	ldrb	r3, [r3, #26]
 80135a8:	f043 0302 	orr.w	r3, r3, #2
 80135ac:	b2da      	uxtb	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f7fe fee6 	bl	8012384 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80135b8:	4b24      	ldr	r3, [pc, #144]	; (801364c <tcp_process+0x590>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d105      	bne.n	80135ce <tcp_process+0x512>
 80135c2:	4b22      	ldr	r3, [pc, #136]	; (801364c <tcp_process+0x590>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	4a20      	ldr	r2, [pc, #128]	; (801364c <tcp_process+0x590>)
 80135ca:	6013      	str	r3, [r2, #0]
 80135cc:	e013      	b.n	80135f6 <tcp_process+0x53a>
 80135ce:	4b1f      	ldr	r3, [pc, #124]	; (801364c <tcp_process+0x590>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	e00c      	b.n	80135f0 <tcp_process+0x534>
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d104      	bne.n	80135ea <tcp_process+0x52e>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	68da      	ldr	r2, [r3, #12]
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	60da      	str	r2, [r3, #12]
 80135e8:	e005      	b.n	80135f6 <tcp_process+0x53a>
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	68db      	ldr	r3, [r3, #12]
 80135ee:	617b      	str	r3, [r7, #20]
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1ef      	bne.n	80135d6 <tcp_process+0x51a>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2200      	movs	r2, #0
 80135fa:	60da      	str	r2, [r3, #12]
 80135fc:	4b14      	ldr	r3, [pc, #80]	; (8013650 <tcp_process+0x594>)
 80135fe:	2201      	movs	r2, #1
 8013600:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	220a      	movs	r2, #10
 8013606:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013608:	4b12      	ldr	r3, [pc, #72]	; (8013654 <tcp_process+0x598>)
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	60da      	str	r2, [r3, #12]
 8013610:	4a10      	ldr	r2, [pc, #64]	; (8013654 <tcp_process+0x598>)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6013      	str	r3, [r2, #0]
 8013616:	f002 fdd3 	bl	80161c0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801361a:	e0f0      	b.n	80137fe <tcp_process+0x742>
 801361c:	2000c830 	.word	0x2000c830
 8013620:	2000c828 	.word	0x2000c828
 8013624:	2000c82e 	.word	0x2000c82e
 8013628:	2000c824 	.word	0x2000c824
 801362c:	2000c814 	.word	0x2000c814
 8013630:	2000d120 	.word	0x2000d120
 8013634:	2000d124 	.word	0x2000d124
 8013638:	0801bd40 	.word	0x0801bd40
 801363c:	0801bf68 	.word	0x0801bf68
 8013640:	0801bda8 	.word	0x0801bda8
 8013644:	2000c82c 	.word	0x2000c82c
 8013648:	2000c831 	.word	0x2000c831
 801364c:	200101cc 	.word	0x200101cc
 8013650:	200101c8 	.word	0x200101c8
 8013654:	200101dc 	.word	0x200101dc
        tcp_ack_now(pcb);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	7e9b      	ldrb	r3, [r3, #26]
 801365c:	f043 0302 	orr.w	r3, r3, #2
 8013660:	b2da      	uxtb	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2208      	movs	r2, #8
 801366a:	751a      	strb	r2, [r3, #20]
    break;
 801366c:	e0c7      	b.n	80137fe <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801366e:	4b6a      	ldr	r3, [pc, #424]	; (8013818 <tcp_process+0x75c>)
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	f003 0310 	and.w	r3, r3, #16
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 80c1 	beq.w	80137fe <tcp_process+0x742>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013680:	4b66      	ldr	r3, [pc, #408]	; (801381c <tcp_process+0x760>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	429a      	cmp	r2, r3
 8013686:	f040 80ba 	bne.w	80137fe <tcp_process+0x742>
               pcb->unsent == NULL) {
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801368e:	2b00      	cmp	r3, #0
 8013690:	f040 80b5 	bne.w	80137fe <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2206      	movs	r2, #6
 8013698:	751a      	strb	r2, [r3, #20]
    break;
 801369a:	e0b0      	b.n	80137fe <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 f93d 	bl	801391c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80136a2:	4b5f      	ldr	r3, [pc, #380]	; (8013820 <tcp_process+0x764>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	f003 0320 	and.w	r3, r3, #32
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f000 80a9 	beq.w	8013802 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	7e9b      	ldrb	r3, [r3, #26]
 80136b4:	f043 0302 	orr.w	r3, r3, #2
 80136b8:	b2da      	uxtb	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7fe fe60 	bl	8012384 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80136c4:	4b57      	ldr	r3, [pc, #348]	; (8013824 <tcp_process+0x768>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d105      	bne.n	80136da <tcp_process+0x61e>
 80136ce:	4b55      	ldr	r3, [pc, #340]	; (8013824 <tcp_process+0x768>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	4a53      	ldr	r2, [pc, #332]	; (8013824 <tcp_process+0x768>)
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	e013      	b.n	8013702 <tcp_process+0x646>
 80136da:	4b52      	ldr	r3, [pc, #328]	; (8013824 <tcp_process+0x768>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	613b      	str	r3, [r7, #16]
 80136e0:	e00c      	b.n	80136fc <tcp_process+0x640>
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d104      	bne.n	80136f6 <tcp_process+0x63a>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	68da      	ldr	r2, [r3, #12]
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	60da      	str	r2, [r3, #12]
 80136f4:	e005      	b.n	8013702 <tcp_process+0x646>
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	613b      	str	r3, [r7, #16]
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1ef      	bne.n	80136e2 <tcp_process+0x626>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2200      	movs	r2, #0
 8013706:	60da      	str	r2, [r3, #12]
 8013708:	4b47      	ldr	r3, [pc, #284]	; (8013828 <tcp_process+0x76c>)
 801370a:	2201      	movs	r2, #1
 801370c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	220a      	movs	r2, #10
 8013712:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013714:	4b45      	ldr	r3, [pc, #276]	; (801382c <tcp_process+0x770>)
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	60da      	str	r2, [r3, #12]
 801371c:	4a43      	ldr	r2, [pc, #268]	; (801382c <tcp_process+0x770>)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6013      	str	r3, [r2, #0]
 8013722:	f002 fd4d 	bl	80161c0 <tcp_timer_needed>
    }
    break;
 8013726:	e06c      	b.n	8013802 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 f8f7 	bl	801391c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801372e:	4b3a      	ldr	r3, [pc, #232]	; (8013818 <tcp_process+0x75c>)
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f003 0310 	and.w	r3, r3, #16
 8013736:	2b00      	cmp	r3, #0
 8013738:	d065      	beq.n	8013806 <tcp_process+0x74a>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801373e:	4b37      	ldr	r3, [pc, #220]	; (801381c <tcp_process+0x760>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	429a      	cmp	r2, r3
 8013744:	d15f      	bne.n	8013806 <tcp_process+0x74a>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801374a:	2b00      	cmp	r3, #0
 801374c:	d15b      	bne.n	8013806 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7fe fe18 	bl	8012384 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013754:	4b33      	ldr	r3, [pc, #204]	; (8013824 <tcp_process+0x768>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	429a      	cmp	r2, r3
 801375c:	d105      	bne.n	801376a <tcp_process+0x6ae>
 801375e:	4b31      	ldr	r3, [pc, #196]	; (8013824 <tcp_process+0x768>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	4a2f      	ldr	r2, [pc, #188]	; (8013824 <tcp_process+0x768>)
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	e013      	b.n	8013792 <tcp_process+0x6d6>
 801376a:	4b2e      	ldr	r3, [pc, #184]	; (8013824 <tcp_process+0x768>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	e00c      	b.n	801378c <tcp_process+0x6d0>
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	68db      	ldr	r3, [r3, #12]
 8013776:	687a      	ldr	r2, [r7, #4]
 8013778:	429a      	cmp	r2, r3
 801377a:	d104      	bne.n	8013786 <tcp_process+0x6ca>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	68da      	ldr	r2, [r3, #12]
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	60da      	str	r2, [r3, #12]
 8013784:	e005      	b.n	8013792 <tcp_process+0x6d6>
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	60fb      	str	r3, [r7, #12]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1ef      	bne.n	8013772 <tcp_process+0x6b6>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	60da      	str	r2, [r3, #12]
 8013798:	4b23      	ldr	r3, [pc, #140]	; (8013828 <tcp_process+0x76c>)
 801379a:	2201      	movs	r2, #1
 801379c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	220a      	movs	r2, #10
 80137a2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80137a4:	4b21      	ldr	r3, [pc, #132]	; (801382c <tcp_process+0x770>)
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	60da      	str	r2, [r3, #12]
 80137ac:	4a1f      	ldr	r2, [pc, #124]	; (801382c <tcp_process+0x770>)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6013      	str	r3, [r2, #0]
 80137b2:	f002 fd05 	bl	80161c0 <tcp_timer_needed>
    }
    break;
 80137b6:	e026      	b.n	8013806 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 f8af 	bl	801391c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80137be:	4b16      	ldr	r3, [pc, #88]	; (8013818 <tcp_process+0x75c>)
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	f003 0310 	and.w	r3, r3, #16
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d01f      	beq.n	801380a <tcp_process+0x74e>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137ce:	4b13      	ldr	r3, [pc, #76]	; (801381c <tcp_process+0x760>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d119      	bne.n	801380a <tcp_process+0x74e>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d115      	bne.n	801380a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80137de:	4b10      	ldr	r3, [pc, #64]	; (8013820 <tcp_process+0x764>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	f043 0310 	orr.w	r3, r3, #16
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	4b0d      	ldr	r3, [pc, #52]	; (8013820 <tcp_process+0x764>)
 80137ea:	701a      	strb	r2, [r3, #0]
    }
    break;
 80137ec:	e00d      	b.n	801380a <tcp_process+0x74e>
  default:
    break;
 80137ee:	bf00      	nop
 80137f0:	e00c      	b.n	801380c <tcp_process+0x750>
    break;
 80137f2:	bf00      	nop
 80137f4:	e00a      	b.n	801380c <tcp_process+0x750>
    break;
 80137f6:	bf00      	nop
 80137f8:	e008      	b.n	801380c <tcp_process+0x750>
    break;
 80137fa:	bf00      	nop
 80137fc:	e006      	b.n	801380c <tcp_process+0x750>
    break;
 80137fe:	bf00      	nop
 8013800:	e004      	b.n	801380c <tcp_process+0x750>
    break;
 8013802:	bf00      	nop
 8013804:	e002      	b.n	801380c <tcp_process+0x750>
    break;
 8013806:	bf00      	nop
 8013808:	e000      	b.n	801380c <tcp_process+0x750>
    break;
 801380a:	bf00      	nop
  }
  return ERR_OK;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3720      	adds	r7, #32
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	2000c830 	.word	0x2000c830
 801381c:	2000c828 	.word	0x2000c828
 8013820:	2000c831 	.word	0x2000c831
 8013824:	200101cc 	.word	0x200101cc
 8013828:	200101c8 	.word	0x200101c8
 801382c:	200101dc 	.word	0x200101dc

08013830 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013830:	b590      	push	{r4, r7, lr}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	899b      	ldrh	r3, [r3, #12]
 8013840:	b29b      	uxth	r3, r3
 8013842:	4618      	mov	r0, r3
 8013844:	f7fb fe16 	bl	800f474 <lwip_htons>
 8013848:	4603      	mov	r3, r0
 801384a:	f003 0301 	and.w	r3, r3, #1
 801384e:	2b00      	cmp	r3, #0
 8013850:	d027      	beq.n	80138a2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013852:	6838      	ldr	r0, [r7, #0]
 8013854:	f7fe fb2d 	bl	8011eb2 <tcp_segs_free>
    next = NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	603b      	str	r3, [r7, #0]
 801385c:	e055      	b.n	801390a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	899b      	ldrh	r3, [r3, #12]
 8013864:	b29b      	uxth	r3, r3
 8013866:	4618      	mov	r0, r3
 8013868:	f7fb fe04 	bl	800f474 <lwip_htons>
 801386c:	4603      	mov	r3, r0
 801386e:	f003 0301 	and.w	r3, r3, #1
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00d      	beq.n	8013892 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	899b      	ldrh	r3, [r3, #12]
 801387c:	b29c      	uxth	r4, r3
 801387e:	2001      	movs	r0, #1
 8013880:	f7fb fdf8 	bl	800f474 <lwip_htons>
 8013884:	4603      	mov	r3, r0
 8013886:	461a      	mov	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	4322      	orrs	r2, r4
 801388e:	b292      	uxth	r2, r2
 8013890:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7fe fb1c 	bl	8011eda <tcp_seg_free>
    while (next &&
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00e      	beq.n	80138c6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	891b      	ldrh	r3, [r3, #8]
 80138ac:	461a      	mov	r2, r3
 80138ae:	4b1a      	ldr	r3, [pc, #104]	; (8013918 <tcp_oos_insert_segment+0xe8>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	441a      	add	r2, r3
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	6839      	ldr	r1, [r7, #0]
 80138bc:	8909      	ldrh	r1, [r1, #8]
 80138be:	440b      	add	r3, r1
 80138c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	dacb      	bge.n	801385e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d01e      	beq.n	801390a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	891b      	ldrh	r3, [r3, #8]
 80138d0:	461a      	mov	r2, r3
 80138d2:	4b11      	ldr	r3, [pc, #68]	; (8013918 <tcp_oos_insert_segment+0xe8>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	441a      	add	r2, r3
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	dd12      	ble.n	801390a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	4b0a      	ldr	r3, [pc, #40]	; (8013918 <tcp_oos_insert_segment+0xe8>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	685a      	ldr	r2, [r3, #4]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	891b      	ldrh	r3, [r3, #8]
 8013902:	4619      	mov	r1, r3
 8013904:	4610      	mov	r0, r2
 8013906:	f7fc fe5b 	bl	80105c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	683a      	ldr	r2, [r7, #0]
 801390e:	601a      	str	r2, [r3, #0]
}
 8013910:	bf00      	nop
 8013912:	3714      	adds	r7, #20
 8013914:	46bd      	mov	sp, r7
 8013916:	bd90      	pop	{r4, r7, pc}
 8013918:	2000c824 	.word	0x2000c824

0801391c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391e:	b08d      	sub	sp, #52	; 0x34
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013924:	2300      	movs	r3, #0
 8013926:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	7d1b      	ldrb	r3, [r3, #20]
 801392c:	2b03      	cmp	r3, #3
 801392e:	d806      	bhi.n	801393e <tcp_receive+0x22>
 8013930:	4ba6      	ldr	r3, [pc, #664]	; (8013bcc <tcp_receive+0x2b0>)
 8013932:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8013936:	49a6      	ldr	r1, [pc, #664]	; (8013bd0 <tcp_receive+0x2b4>)
 8013938:	48a6      	ldr	r0, [pc, #664]	; (8013bd4 <tcp_receive+0x2b8>)
 801393a:	f005 fc91 	bl	8019260 <iprintf>

  if (flags & TCP_ACK) {
 801393e:	4ba6      	ldr	r3, [pc, #664]	; (8013bd8 <tcp_receive+0x2bc>)
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	f003 0310 	and.w	r3, r3, #16
 8013946:	2b00      	cmp	r3, #0
 8013948:	f000 82bf 	beq.w	8013eca <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013952:	461a      	mov	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013958:	4413      	add	r3, r2
 801395a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013960:	4b9e      	ldr	r3, [pc, #632]	; (8013bdc <tcp_receive+0x2c0>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	db1b      	blt.n	80139a2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801396e:	4b9b      	ldr	r3, [pc, #620]	; (8013bdc <tcp_receive+0x2c0>)
 8013970:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013972:	429a      	cmp	r2, r3
 8013974:	d106      	bne.n	8013984 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801397a:	4b99      	ldr	r3, [pc, #612]	; (8013be0 <tcp_receive+0x2c4>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	1ad3      	subs	r3, r2, r3
 8013980:	2b00      	cmp	r3, #0
 8013982:	db0e      	blt.n	80139a2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013988:	4b95      	ldr	r3, [pc, #596]	; (8013be0 <tcp_receive+0x2c4>)
 801398a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801398c:	429a      	cmp	r2, r3
 801398e:	d141      	bne.n	8013a14 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013990:	4b94      	ldr	r3, [pc, #592]	; (8013be4 <tcp_receive+0x2c8>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	89db      	ldrh	r3, [r3, #14]
 8013996:	b29a      	uxth	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801399e:	429a      	cmp	r2, r3
 80139a0:	d938      	bls.n	8013a14 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80139a2:	4b90      	ldr	r3, [pc, #576]	; (8013be4 <tcp_receive+0x2c8>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	89db      	ldrh	r3, [r3, #14]
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80139bc:	429a      	cmp	r2, r3
 80139be:	d205      	bcs.n	80139cc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80139cc:	4b83      	ldr	r3, [pc, #524]	; (8013bdc <tcp_receive+0x2c0>)
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80139d4:	4b82      	ldr	r3, [pc, #520]	; (8013be0 <tcp_receive+0x2c4>)
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10d      	bne.n	8013a02 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d111      	bne.n	8013a14 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2200      	movs	r2, #0
 80139f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2201      	movs	r2, #1
 80139fc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013a00:	e008      	b.n	8013a14 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d003      	beq.n	8013a14 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013a14:	4b72      	ldr	r3, [pc, #456]	; (8013be0 <tcp_receive+0x2c4>)
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	dc53      	bgt.n	8013aca <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013a22:	4b71      	ldr	r3, [pc, #452]	; (8013be8 <tcp_receive+0x2cc>)
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d146      	bne.n	8013ab8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8013a34:	4413      	add	r3, r2
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d13d      	bne.n	8013ab8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	db38      	blt.n	8013ab8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a4a:	4b65      	ldr	r3, [pc, #404]	; (8013be0 <tcp_receive+0x2c4>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d132      	bne.n	8013ab8 <tcp_receive+0x19c>
              found_dupack = 1;
 8013a52:	2301      	movs	r3, #1
 8013a54:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a5c:	2bff      	cmp	r3, #255	; 0xff
 8013a5e:	d007      	beq.n	8013a70 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a66:	3301      	adds	r3, #1
 8013a68:	b2da      	uxtb	r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a76:	2b03      	cmp	r3, #3
 8013a78:	d916      	bls.n	8013aa8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a84:	4413      	add	r3, r2
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d912      	bls.n	8013ab8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a9c:	4413      	add	r3, r2
 8013a9e:	b29a      	uxth	r2, r3
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013aa6:	e007      	b.n	8013ab8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013aae:	2b03      	cmp	r3, #3
 8013ab0:	d102      	bne.n	8013ab8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f002 fa2e 	bl	8015f14 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f040 8169 	bne.w	8013d92 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ac8:	e163      	b.n	8013d92 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013aca:	4b45      	ldr	r3, [pc, #276]	; (8013be0 <tcp_receive+0x2c4>)
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f2c0 8107 	blt.w	8013cea <tcp_receive+0x3ce>
 8013adc:	4b40      	ldr	r3, [pc, #256]	; (8013be0 <tcp_receive+0x2c4>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f300 80ff 	bgt.w	8013cea <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	7e9b      	ldrb	r3, [r3, #26]
 8013af0:	f003 0304 	and.w	r3, r3, #4
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d00c      	beq.n	8013b12 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	7e9b      	ldrb	r3, [r3, #26]
 8013afc:	f023 0304 	bic.w	r3, r3, #4
 8013b00:	b2da      	uxtb	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2200      	movs	r2, #0
 8013b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013b20:	10db      	asrs	r3, r3, #3
 8013b22:	b21b      	sxth	r3, r3
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	4413      	add	r3, r2
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	b21a      	sxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013b42:	4b27      	ldr	r3, [pc, #156]	; (8013be0 <tcp_receive+0x2c4>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	7d1b      	ldrb	r3, [r3, #20]
 8013b4e:	2b03      	cmp	r3, #3
 8013b50:	f240 8094 	bls.w	8013c7c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d216      	bcs.n	8013b92 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b6e:	4413      	add	r3, r2
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d97f      	bls.n	8013c7c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b86:	4413      	add	r3, r2
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b90:	e074      	b.n	8013c7c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ba2:	fb03 f301 	mul.w	r3, r3, r1
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8013bac:	fb93 f3f1 	sdiv	r3, r3, r1
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	4413      	add	r3, r2
 8013bb4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013bbc:	8a7a      	ldrh	r2, [r7, #18]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d95c      	bls.n	8013c7c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	8a7a      	ldrh	r2, [r7, #18]
 8013bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8013bca:	e057      	b.n	8013c7c <tcp_receive+0x360>
 8013bcc:	0801bd40 	.word	0x0801bd40
 8013bd0:	0801bf88 	.word	0x0801bf88
 8013bd4:	0801bda8 	.word	0x0801bda8
 8013bd8:	2000c830 	.word	0x2000c830
 8013bdc:	2000c824 	.word	0x2000c824
 8013be0:	2000c828 	.word	0x2000c828
 8013be4:	2000c814 	.word	0x2000c814
 8013be8:	2000c82e 	.word	0x2000c82e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bf6:	681a      	ldr	r2, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fc fee8 	bl	80109dc <pbuf_clen>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	429c      	cmp	r4, r3
 8013c10:	d206      	bcs.n	8013c20 <tcp_receive+0x304>
 8013c12:	4b70      	ldr	r3, [pc, #448]	; (8013dd4 <tcp_receive+0x4b8>)
 8013c14:	f240 429e 	movw	r2, #1182	; 0x49e
 8013c18:	496f      	ldr	r1, [pc, #444]	; (8013dd8 <tcp_receive+0x4bc>)
 8013c1a:	4870      	ldr	r0, [pc, #448]	; (8013ddc <tcp_receive+0x4c0>)
 8013c1c:	f005 fb20 	bl	8019260 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fc fed9 	bl	80109dc <pbuf_clen>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c34:	1a9b      	subs	r3, r3, r2
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8013c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c40:	891a      	ldrh	r2, [r3, #8]
 8013c42:	4b67      	ldr	r3, [pc, #412]	; (8013de0 <tcp_receive+0x4c4>)
 8013c44:	881b      	ldrh	r3, [r3, #0]
 8013c46:	4413      	add	r3, r2
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	4b65      	ldr	r3, [pc, #404]	; (8013de0 <tcp_receive+0x4c4>)
 8013c4c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c50:	f7fe f943 	bl	8011eda <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00e      	beq.n	8013c7c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d10a      	bne.n	8013c7c <tcp_receive+0x360>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d106      	bne.n	8013c7c <tcp_receive+0x360>
 8013c6e:	4b59      	ldr	r3, [pc, #356]	; (8013dd4 <tcp_receive+0x4b8>)
 8013c70:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8013c74:	495b      	ldr	r1, [pc, #364]	; (8013de4 <tcp_receive+0x4c8>)
 8013c76:	4859      	ldr	r0, [pc, #356]	; (8013ddc <tcp_receive+0x4c0>)
 8013c78:	f005 faf2 	bl	8019260 <iprintf>
      while (pcb->unacked != NULL &&
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d022      	beq.n	8013cca <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7fb fbff 	bl	800f490 <lwip_htonl>
 8013c92:	4604      	mov	r4, r0
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c98:	891b      	ldrh	r3, [r3, #8]
 8013c9a:	461d      	mov	r5, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	899b      	ldrh	r3, [r3, #12]
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fb fbe4 	bl	800f474 <lwip_htons>
 8013cac:	4603      	mov	r3, r0
 8013cae:	f003 0303 	and.w	r3, r3, #3
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d001      	beq.n	8013cba <tcp_receive+0x39e>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e000      	b.n	8013cbc <tcp_receive+0x3a0>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	442b      	add	r3, r5
 8013cbe:	18e2      	adds	r2, r4, r3
 8013cc0:	4b49      	ldr	r3, [pc, #292]	; (8013de8 <tcp_receive+0x4cc>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	dd90      	ble.n	8013bec <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d104      	bne.n	8013cdc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cd8:	861a      	strh	r2, [r3, #48]	; 0x30
 8013cda:	e002      	b.n	8013ce2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	76da      	strb	r2, [r3, #27]
 8013ce8:	e002      	b.n	8013cf0 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f001 fd30 	bl	8015750 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013cf0:	e04f      	b.n	8013d92 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d103      	bne.n	8013d12 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1a:	685b      	ldr	r3, [r3, #4]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fc fe5d 	bl	80109dc <pbuf_clen>
 8013d22:	4603      	mov	r3, r0
 8013d24:	429c      	cmp	r4, r3
 8013d26:	d206      	bcs.n	8013d36 <tcp_receive+0x41a>
 8013d28:	4b2a      	ldr	r3, [pc, #168]	; (8013dd4 <tcp_receive+0x4b8>)
 8013d2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013d2e:	492a      	ldr	r1, [pc, #168]	; (8013dd8 <tcp_receive+0x4bc>)
 8013d30:	482a      	ldr	r0, [pc, #168]	; (8013ddc <tcp_receive+0x4c0>)
 8013d32:	f005 fa95 	bl	8019260 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8013d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fc fe4e 	bl	80109dc <pbuf_clen>
 8013d40:	4603      	mov	r3, r0
 8013d42:	461a      	mov	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013d4a:	1a9b      	subs	r3, r3, r2
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	891a      	ldrh	r2, [r3, #8]
 8013d58:	4b21      	ldr	r3, [pc, #132]	; (8013de0 <tcp_receive+0x4c4>)
 8013d5a:	881b      	ldrh	r3, [r3, #0]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	4b1f      	ldr	r3, [pc, #124]	; (8013de0 <tcp_receive+0x4c4>)
 8013d62:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8013d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d66:	f7fe f8b8 	bl	8011eda <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d00e      	beq.n	8013d92 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10a      	bne.n	8013d92 <tcp_receive+0x476>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d106      	bne.n	8013d92 <tcp_receive+0x476>
 8013d84:	4b13      	ldr	r3, [pc, #76]	; (8013dd4 <tcp_receive+0x4b8>)
 8013d86:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8013d8a:	4916      	ldr	r1, [pc, #88]	; (8013de4 <tcp_receive+0x4c8>)
 8013d8c:	4813      	ldr	r0, [pc, #76]	; (8013ddc <tcp_receive+0x4c0>)
 8013d8e:	f005 fa67 	bl	8019260 <iprintf>
    while (pcb->unsent != NULL &&
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d036      	beq.n	8013e08 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013d9a:	4b13      	ldr	r3, [pc, #76]	; (8013de8 <tcp_receive+0x4cc>)
 8013d9c:	681c      	ldr	r4, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fb fb72 	bl	800f490 <lwip_htonl>
 8013dac:	4605      	mov	r5, r0
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013db2:	891b      	ldrh	r3, [r3, #8]
 8013db4:	461e      	mov	r6, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	899b      	ldrh	r3, [r3, #12]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fb fb57 	bl	800f474 <lwip_htons>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	f003 0303 	and.w	r3, r3, #3
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00d      	beq.n	8013dec <tcp_receive+0x4d0>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	e00c      	b.n	8013dee <tcp_receive+0x4d2>
 8013dd4:	0801bd40 	.word	0x0801bd40
 8013dd8:	0801bfa4 	.word	0x0801bfa4
 8013ddc:	0801bda8 	.word	0x0801bda8
 8013de0:	2000c82c 	.word	0x2000c82c
 8013de4:	0801bfcc 	.word	0x0801bfcc
 8013de8:	2000c828 	.word	0x2000c828
 8013dec:	2300      	movs	r3, #0
 8013dee:	4433      	add	r3, r6
 8013df0:	442b      	add	r3, r5
 8013df2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	db07      	blt.n	8013e08 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013df8:	4b8d      	ldr	r3, [pc, #564]	; (8014030 <tcp_receive+0x714>)
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f77f af75 	ble.w	8013cf2 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e0e:	4b89      	ldr	r3, [pc, #548]	; (8014034 <tcp_receive+0x718>)
 8013e10:	881b      	ldrh	r3, [r3, #0]
 8013e12:	4413      	add	r3, r2
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d052      	beq.n	8013eca <tcp_receive+0x5ae>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e28:	4b81      	ldr	r3, [pc, #516]	; (8014030 <tcp_receive+0x714>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	da4b      	bge.n	8013eca <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013e32:	4b81      	ldr	r3, [pc, #516]	; (8014038 <tcp_receive+0x71c>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	b29a      	uxth	r2, r3
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8013e44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e4c:	10db      	asrs	r3, r3, #3
 8013e4e:	b21b      	sxth	r3, r3
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e62:	4413      	add	r3, r2
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	b21a      	sxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013e6c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	da03      	bge.n	8013e7c <tcp_receive+0x560>
        m = -m;
 8013e74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e76:	425b      	negs	r3, r3
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8013e7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e84:	109b      	asrs	r3, r3, #2
 8013e86:	b21b      	sxth	r3, r3
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e9a:	4413      	add	r3, r2
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	b21a      	sxth	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013eaa:	10db      	asrs	r3, r3, #3
 8013eac:	b21b      	sxth	r3, r3
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4413      	add	r3, r2
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	b21a      	sxth	r2, r3
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013eca:	4b5c      	ldr	r3, [pc, #368]	; (801403c <tcp_receive+0x720>)
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	f000 84f1 	beq.w	80148b6 <tcp_receive+0xf9a>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	7d1b      	ldrb	r3, [r3, #20]
 8013ed8:	2b06      	cmp	r3, #6
 8013eda:	f200 84ec 	bhi.w	80148b6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ee2:	4b57      	ldr	r3, [pc, #348]	; (8014040 <tcp_receive+0x724>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	3b01      	subs	r3, #1
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f2c0 80b8 	blt.w	8014060 <tcp_receive+0x744>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ef4:	4b51      	ldr	r3, [pc, #324]	; (801403c <tcp_receive+0x720>)
 8013ef6:	881b      	ldrh	r3, [r3, #0]
 8013ef8:	4619      	mov	r1, r3
 8013efa:	4b51      	ldr	r3, [pc, #324]	; (8014040 <tcp_receive+0x724>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	440b      	add	r3, r1
 8013f00:	1ad3      	subs	r3, r2, r3
 8013f02:	3301      	adds	r3, #1
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f300 80ab 	bgt.w	8014060 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013f0a:	4b4e      	ldr	r3, [pc, #312]	; (8014044 <tcp_receive+0x728>)
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f14:	4b4a      	ldr	r3, [pc, #296]	; (8014040 <tcp_receive+0x724>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013f1c:	4b49      	ldr	r3, [pc, #292]	; (8014044 <tcp_receive+0x728>)
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <tcp_receive+0x616>
 8013f24:	4b48      	ldr	r3, [pc, #288]	; (8014048 <tcp_receive+0x72c>)
 8013f26:	f240 523c 	movw	r2, #1340	; 0x53c
 8013f2a:	4948      	ldr	r1, [pc, #288]	; (801404c <tcp_receive+0x730>)
 8013f2c:	4848      	ldr	r0, [pc, #288]	; (8014050 <tcp_receive+0x734>)
 8013f2e:	f005 f997 	bl	8019260 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	dd06      	ble.n	8013f4a <tcp_receive+0x62e>
 8013f3c:	4b42      	ldr	r3, [pc, #264]	; (8014048 <tcp_receive+0x72c>)
 8013f3e:	f240 523d 	movw	r2, #1341	; 0x53d
 8013f42:	4944      	ldr	r1, [pc, #272]	; (8014054 <tcp_receive+0x738>)
 8013f44:	4842      	ldr	r0, [pc, #264]	; (8014050 <tcp_receive+0x734>)
 8013f46:	f005 f98b 	bl	8019260 <iprintf>
      if (inseg.p->len < off) {
 8013f4a:	4b3e      	ldr	r3, [pc, #248]	; (8014044 <tcp_receive+0x728>)
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	895b      	ldrh	r3, [r3, #10]
 8013f50:	461a      	mov	r2, r3
 8013f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f54:	4293      	cmp	r3, r2
 8013f56:	dd3e      	ble.n	8013fd6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013f58:	4b3a      	ldr	r3, [pc, #232]	; (8014044 <tcp_receive+0x728>)
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	891b      	ldrh	r3, [r3, #8]
 8013f5e:	461a      	mov	r2, r3
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	4293      	cmp	r3, r2
 8013f64:	dd06      	ble.n	8013f74 <tcp_receive+0x658>
 8013f66:	4b38      	ldr	r3, [pc, #224]	; (8014048 <tcp_receive+0x72c>)
 8013f68:	f240 523f 	movw	r2, #1343	; 0x53f
 8013f6c:	493a      	ldr	r1, [pc, #232]	; (8014058 <tcp_receive+0x73c>)
 8013f6e:	4838      	ldr	r0, [pc, #224]	; (8014050 <tcp_receive+0x734>)
 8013f70:	f005 f976 	bl	8019260 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013f74:	4b33      	ldr	r3, [pc, #204]	; (8014044 <tcp_receive+0x728>)
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	891a      	ldrh	r2, [r3, #8]
 8013f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8013f82:	e00e      	b.n	8013fa2 <tcp_receive+0x686>
          off -= p->len;
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	895b      	ldrh	r3, [r3, #10]
 8013f88:	461a      	mov	r2, r3
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8c:	1a9b      	subs	r3, r3, r2
 8013f8e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	8a3a      	ldrh	r2, [r7, #16]
 8013f94:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	895b      	ldrh	r3, [r3, #10]
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013faa:	4293      	cmp	r3, r2
 8013fac:	dcea      	bgt.n	8013f84 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8013fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	425b      	negs	r3, r3
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	b21b      	sxth	r3, r3
 8013fb8:	4619      	mov	r1, r3
 8013fba:	69b8      	ldr	r0, [r7, #24]
 8013fbc:	f7fc fc50 	bl	8010860 <pbuf_header>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d01c      	beq.n	8014000 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013fc6:	4b20      	ldr	r3, [pc, #128]	; (8014048 <tcp_receive+0x72c>)
 8013fc8:	f240 524c 	movw	r2, #1356	; 0x54c
 8013fcc:	4923      	ldr	r1, [pc, #140]	; (801405c <tcp_receive+0x740>)
 8013fce:	4820      	ldr	r0, [pc, #128]	; (8014050 <tcp_receive+0x734>)
 8013fd0:	f005 f946 	bl	8019260 <iprintf>
 8013fd4:	e014      	b.n	8014000 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8013fd6:	4b1b      	ldr	r3, [pc, #108]	; (8014044 <tcp_receive+0x728>)
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fdc:	b292      	uxth	r2, r2
 8013fde:	4252      	negs	r2, r2
 8013fe0:	b292      	uxth	r2, r2
 8013fe2:	b212      	sxth	r2, r2
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fc fc3a 	bl	8010860 <pbuf_header>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d006      	beq.n	8014000 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013ff2:	4b15      	ldr	r3, [pc, #84]	; (8014048 <tcp_receive+0x72c>)
 8013ff4:	f240 5251 	movw	r2, #1361	; 0x551
 8013ff8:	4918      	ldr	r1, [pc, #96]	; (801405c <tcp_receive+0x740>)
 8013ffa:	4815      	ldr	r0, [pc, #84]	; (8014050 <tcp_receive+0x734>)
 8013ffc:	f005 f930 	bl	8019260 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8014000:	4b10      	ldr	r3, [pc, #64]	; (8014044 <tcp_receive+0x728>)
 8014002:	891a      	ldrh	r2, [r3, #8]
 8014004:	4b0e      	ldr	r3, [pc, #56]	; (8014040 <tcp_receive+0x724>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	b299      	uxth	r1, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801400e:	b29b      	uxth	r3, r3
 8014010:	1acb      	subs	r3, r1, r3
 8014012:	b29b      	uxth	r3, r3
 8014014:	4413      	add	r3, r2
 8014016:	b29a      	uxth	r2, r3
 8014018:	4b0a      	ldr	r3, [pc, #40]	; (8014044 <tcp_receive+0x728>)
 801401a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014020:	4a07      	ldr	r2, [pc, #28]	; (8014040 <tcp_receive+0x724>)
 8014022:	6013      	str	r3, [r2, #0]
 8014024:	4b07      	ldr	r3, [pc, #28]	; (8014044 <tcp_receive+0x728>)
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	4a05      	ldr	r2, [pc, #20]	; (8014040 <tcp_receive+0x724>)
 801402a:	6812      	ldr	r2, [r2, #0]
 801402c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801402e:	e025      	b.n	801407c <tcp_receive+0x760>
 8014030:	2000c828 	.word	0x2000c828
 8014034:	2000c82c 	.word	0x2000c82c
 8014038:	200101d0 	.word	0x200101d0
 801403c:	2000c82e 	.word	0x2000c82e
 8014040:	2000c824 	.word	0x2000c824
 8014044:	2000c804 	.word	0x2000c804
 8014048:	0801bd40 	.word	0x0801bd40
 801404c:	0801bfec 	.word	0x0801bfec
 8014050:	0801bda8 	.word	0x0801bda8
 8014054:	0801bffc 	.word	0x0801bffc
 8014058:	0801c00c 	.word	0x0801c00c
 801405c:	0801c01c 	.word	0x0801c01c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014060:	4b87      	ldr	r3, [pc, #540]	; (8014280 <tcp_receive+0x964>)
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	2b00      	cmp	r3, #0
 801406c:	da06      	bge.n	801407c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	7e9b      	ldrb	r3, [r3, #26]
 8014072:	f043 0302 	orr.w	r3, r3, #2
 8014076:	b2da      	uxtb	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801407c:	4b80      	ldr	r3, [pc, #512]	; (8014280 <tcp_receive+0x964>)
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014084:	1ad3      	subs	r3, r2, r3
 8014086:	2b00      	cmp	r3, #0
 8014088:	f2c0 8410 	blt.w	80148ac <tcp_receive+0xf90>
 801408c:	4b7c      	ldr	r3, [pc, #496]	; (8014280 <tcp_receive+0x964>)
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014094:	6879      	ldr	r1, [r7, #4]
 8014096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014098:	440b      	add	r3, r1
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	3301      	adds	r3, #1
 801409e:	2b00      	cmp	r3, #0
 80140a0:	f300 8404 	bgt.w	80148ac <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140a8:	4b75      	ldr	r3, [pc, #468]	; (8014280 <tcp_receive+0x964>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	f040 8287 	bne.w	80145c0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80140b2:	4b74      	ldr	r3, [pc, #464]	; (8014284 <tcp_receive+0x968>)
 80140b4:	891c      	ldrh	r4, [r3, #8]
 80140b6:	4b73      	ldr	r3, [pc, #460]	; (8014284 <tcp_receive+0x968>)
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	899b      	ldrh	r3, [r3, #12]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fb f9d8 	bl	800f474 <lwip_htons>
 80140c4:	4603      	mov	r3, r0
 80140c6:	f003 0303 	and.w	r3, r3, #3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d001      	beq.n	80140d2 <tcp_receive+0x7b6>
 80140ce:	2301      	movs	r3, #1
 80140d0:	e000      	b.n	80140d4 <tcp_receive+0x7b8>
 80140d2:	2300      	movs	r3, #0
 80140d4:	4423      	add	r3, r4
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	4b6b      	ldr	r3, [pc, #428]	; (8014288 <tcp_receive+0x96c>)
 80140da:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140e0:	4b69      	ldr	r3, [pc, #420]	; (8014288 <tcp_receive+0x96c>)
 80140e2:	881b      	ldrh	r3, [r3, #0]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d26e      	bcs.n	80141c6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80140e8:	4b66      	ldr	r3, [pc, #408]	; (8014284 <tcp_receive+0x968>)
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	899b      	ldrh	r3, [r3, #12]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7fb f9bf 	bl	800f474 <lwip_htons>
 80140f6:	4603      	mov	r3, r0
 80140f8:	f003 0301 	and.w	r3, r3, #1
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d01b      	beq.n	8014138 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014100:	4b60      	ldr	r3, [pc, #384]	; (8014284 <tcp_receive+0x968>)
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	899b      	ldrh	r3, [r3, #12]
 8014106:	b29b      	uxth	r3, r3
 8014108:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801410c:	b29c      	uxth	r4, r3
 801410e:	4b5d      	ldr	r3, [pc, #372]	; (8014284 <tcp_receive+0x968>)
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	899b      	ldrh	r3, [r3, #12]
 8014114:	b29b      	uxth	r3, r3
 8014116:	4618      	mov	r0, r3
 8014118:	f7fb f9ac 	bl	800f474 <lwip_htons>
 801411c:	4603      	mov	r3, r0
 801411e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014122:	b29b      	uxth	r3, r3
 8014124:	4618      	mov	r0, r3
 8014126:	f7fb f9a5 	bl	800f474 <lwip_htons>
 801412a:	4603      	mov	r3, r0
 801412c:	461a      	mov	r2, r3
 801412e:	4b55      	ldr	r3, [pc, #340]	; (8014284 <tcp_receive+0x968>)
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	4322      	orrs	r2, r4
 8014134:	b292      	uxth	r2, r2
 8014136:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801413c:	4b51      	ldr	r3, [pc, #324]	; (8014284 <tcp_receive+0x968>)
 801413e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014140:	4b50      	ldr	r3, [pc, #320]	; (8014284 <tcp_receive+0x968>)
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	899b      	ldrh	r3, [r3, #12]
 8014146:	b29b      	uxth	r3, r3
 8014148:	4618      	mov	r0, r3
 801414a:	f7fb f993 	bl	800f474 <lwip_htons>
 801414e:	4603      	mov	r3, r0
 8014150:	f003 0302 	and.w	r3, r3, #2
 8014154:	2b00      	cmp	r3, #0
 8014156:	d005      	beq.n	8014164 <tcp_receive+0x848>
            inseg.len -= 1;
 8014158:	4b4a      	ldr	r3, [pc, #296]	; (8014284 <tcp_receive+0x968>)
 801415a:	891b      	ldrh	r3, [r3, #8]
 801415c:	3b01      	subs	r3, #1
 801415e:	b29a      	uxth	r2, r3
 8014160:	4b48      	ldr	r3, [pc, #288]	; (8014284 <tcp_receive+0x968>)
 8014162:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014164:	4b47      	ldr	r3, [pc, #284]	; (8014284 <tcp_receive+0x968>)
 8014166:	685a      	ldr	r2, [r3, #4]
 8014168:	4b46      	ldr	r3, [pc, #280]	; (8014284 <tcp_receive+0x968>)
 801416a:	891b      	ldrh	r3, [r3, #8]
 801416c:	4619      	mov	r1, r3
 801416e:	4610      	mov	r0, r2
 8014170:	f7fc fa26 	bl	80105c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014174:	4b43      	ldr	r3, [pc, #268]	; (8014284 <tcp_receive+0x968>)
 8014176:	891c      	ldrh	r4, [r3, #8]
 8014178:	4b42      	ldr	r3, [pc, #264]	; (8014284 <tcp_receive+0x968>)
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	899b      	ldrh	r3, [r3, #12]
 801417e:	b29b      	uxth	r3, r3
 8014180:	4618      	mov	r0, r3
 8014182:	f7fb f977 	bl	800f474 <lwip_htons>
 8014186:	4603      	mov	r3, r0
 8014188:	f003 0303 	and.w	r3, r3, #3
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <tcp_receive+0x878>
 8014190:	2301      	movs	r3, #1
 8014192:	e000      	b.n	8014196 <tcp_receive+0x87a>
 8014194:	2300      	movs	r3, #0
 8014196:	4423      	add	r3, r4
 8014198:	b29a      	uxth	r2, r3
 801419a:	4b3b      	ldr	r3, [pc, #236]	; (8014288 <tcp_receive+0x96c>)
 801419c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801419e:	4b3a      	ldr	r3, [pc, #232]	; (8014288 <tcp_receive+0x96c>)
 80141a0:	881b      	ldrh	r3, [r3, #0]
 80141a2:	461a      	mov	r2, r3
 80141a4:	4b36      	ldr	r3, [pc, #216]	; (8014280 <tcp_receive+0x964>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	441a      	add	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ae:	6879      	ldr	r1, [r7, #4]
 80141b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141b2:	440b      	add	r3, r1
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d006      	beq.n	80141c6 <tcp_receive+0x8aa>
 80141b8:	4b34      	ldr	r3, [pc, #208]	; (801428c <tcp_receive+0x970>)
 80141ba:	f240 527f 	movw	r2, #1407	; 0x57f
 80141be:	4934      	ldr	r1, [pc, #208]	; (8014290 <tcp_receive+0x974>)
 80141c0:	4834      	ldr	r0, [pc, #208]	; (8014294 <tcp_receive+0x978>)
 80141c2:	f005 f84d 	bl	8019260 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f000 80e1 	beq.w	8014392 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80141d0:	4b2c      	ldr	r3, [pc, #176]	; (8014284 <tcp_receive+0x968>)
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	899b      	ldrh	r3, [r3, #12]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fb f94b 	bl	800f474 <lwip_htons>
 80141de:	4603      	mov	r3, r0
 80141e0:	f003 0301 	and.w	r3, r3, #1
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d010      	beq.n	801420a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80141e8:	e00a      	b.n	8014200 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ee:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80141fa:	68b8      	ldr	r0, [r7, #8]
 80141fc:	f7fd fe6d 	bl	8011eda <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014204:	2b00      	cmp	r3, #0
 8014206:	d1f0      	bne.n	80141ea <tcp_receive+0x8ce>
 8014208:	e0c3      	b.n	8014392 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801420e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014210:	e04f      	b.n	80142b2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014214:	68db      	ldr	r3, [r3, #12]
 8014216:	899b      	ldrh	r3, [r3, #12]
 8014218:	b29b      	uxth	r3, r3
 801421a:	4618      	mov	r0, r3
 801421c:	f7fb f92a 	bl	800f474 <lwip_htons>
 8014220:	4603      	mov	r3, r0
 8014222:	f003 0301 	and.w	r3, r3, #1
 8014226:	2b00      	cmp	r3, #0
 8014228:	d03b      	beq.n	80142a2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801422a:	4b16      	ldr	r3, [pc, #88]	; (8014284 <tcp_receive+0x968>)
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	899b      	ldrh	r3, [r3, #12]
 8014230:	b29b      	uxth	r3, r3
 8014232:	4618      	mov	r0, r3
 8014234:	f7fb f91e 	bl	800f474 <lwip_htons>
 8014238:	4603      	mov	r3, r0
 801423a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801423e:	2b00      	cmp	r3, #0
 8014240:	d12f      	bne.n	80142a2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014242:	4b10      	ldr	r3, [pc, #64]	; (8014284 <tcp_receive+0x968>)
 8014244:	68db      	ldr	r3, [r3, #12]
 8014246:	899b      	ldrh	r3, [r3, #12]
 8014248:	b29c      	uxth	r4, r3
 801424a:	2001      	movs	r0, #1
 801424c:	f7fb f912 	bl	800f474 <lwip_htons>
 8014250:	4603      	mov	r3, r0
 8014252:	461a      	mov	r2, r3
 8014254:	4b0b      	ldr	r3, [pc, #44]	; (8014284 <tcp_receive+0x968>)
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	4322      	orrs	r2, r4
 801425a:	b292      	uxth	r2, r2
 801425c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801425e:	4b09      	ldr	r3, [pc, #36]	; (8014284 <tcp_receive+0x968>)
 8014260:	891c      	ldrh	r4, [r3, #8]
 8014262:	4b08      	ldr	r3, [pc, #32]	; (8014284 <tcp_receive+0x968>)
 8014264:	68db      	ldr	r3, [r3, #12]
 8014266:	899b      	ldrh	r3, [r3, #12]
 8014268:	b29b      	uxth	r3, r3
 801426a:	4618      	mov	r0, r3
 801426c:	f7fb f902 	bl	800f474 <lwip_htons>
 8014270:	4603      	mov	r3, r0
 8014272:	f003 0303 	and.w	r3, r3, #3
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00e      	beq.n	8014298 <tcp_receive+0x97c>
 801427a:	2301      	movs	r3, #1
 801427c:	e00d      	b.n	801429a <tcp_receive+0x97e>
 801427e:	bf00      	nop
 8014280:	2000c824 	.word	0x2000c824
 8014284:	2000c804 	.word	0x2000c804
 8014288:	2000c82e 	.word	0x2000c82e
 801428c:	0801bd40 	.word	0x0801bd40
 8014290:	0801c030 	.word	0x0801c030
 8014294:	0801bda8 	.word	0x0801bda8
 8014298:	2300      	movs	r3, #0
 801429a:	4423      	add	r3, r4
 801429c:	b29a      	uxth	r2, r3
 801429e:	4b95      	ldr	r3, [pc, #596]	; (80144f4 <tcp_receive+0xbd8>)
 80142a0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80142a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80142ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142ae:	f7fd fe14 	bl	8011eda <tcp_seg_free>
            while (next &&
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00e      	beq.n	80142d6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80142b8:	4b8e      	ldr	r3, [pc, #568]	; (80144f4 <tcp_receive+0xbd8>)
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	461a      	mov	r2, r3
 80142be:	4b8e      	ldr	r3, [pc, #568]	; (80144f8 <tcp_receive+0xbdc>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	441a      	add	r2, r3
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142cc:	8909      	ldrh	r1, [r1, #8]
 80142ce:	440b      	add	r3, r1
 80142d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	da9d      	bge.n	8014212 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d057      	beq.n	801438c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80142dc:	4b85      	ldr	r3, [pc, #532]	; (80144f4 <tcp_receive+0xbd8>)
 80142de:	881b      	ldrh	r3, [r3, #0]
 80142e0:	461a      	mov	r2, r3
 80142e2:	4b85      	ldr	r3, [pc, #532]	; (80144f8 <tcp_receive+0xbdc>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	441a      	add	r2, r3
 80142e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dd4b      	ble.n	801438c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80142f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	4b7e      	ldr	r3, [pc, #504]	; (80144f8 <tcp_receive+0xbdc>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	b29b      	uxth	r3, r3
 8014302:	1ad3      	subs	r3, r2, r3
 8014304:	b29a      	uxth	r2, r3
 8014306:	4b7d      	ldr	r3, [pc, #500]	; (80144fc <tcp_receive+0xbe0>)
 8014308:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801430a:	4b7c      	ldr	r3, [pc, #496]	; (80144fc <tcp_receive+0xbe0>)
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	899b      	ldrh	r3, [r3, #12]
 8014310:	b29b      	uxth	r3, r3
 8014312:	4618      	mov	r0, r3
 8014314:	f7fb f8ae 	bl	800f474 <lwip_htons>
 8014318:	4603      	mov	r3, r0
 801431a:	f003 0302 	and.w	r3, r3, #2
 801431e:	2b00      	cmp	r3, #0
 8014320:	d005      	beq.n	801432e <tcp_receive+0xa12>
                inseg.len -= 1;
 8014322:	4b76      	ldr	r3, [pc, #472]	; (80144fc <tcp_receive+0xbe0>)
 8014324:	891b      	ldrh	r3, [r3, #8]
 8014326:	3b01      	subs	r3, #1
 8014328:	b29a      	uxth	r2, r3
 801432a:	4b74      	ldr	r3, [pc, #464]	; (80144fc <tcp_receive+0xbe0>)
 801432c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801432e:	4b73      	ldr	r3, [pc, #460]	; (80144fc <tcp_receive+0xbe0>)
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	4b72      	ldr	r3, [pc, #456]	; (80144fc <tcp_receive+0xbe0>)
 8014334:	891b      	ldrh	r3, [r3, #8]
 8014336:	4619      	mov	r1, r3
 8014338:	4610      	mov	r0, r2
 801433a:	f7fc f941 	bl	80105c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801433e:	4b6f      	ldr	r3, [pc, #444]	; (80144fc <tcp_receive+0xbe0>)
 8014340:	891c      	ldrh	r4, [r3, #8]
 8014342:	4b6e      	ldr	r3, [pc, #440]	; (80144fc <tcp_receive+0xbe0>)
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	899b      	ldrh	r3, [r3, #12]
 8014348:	b29b      	uxth	r3, r3
 801434a:	4618      	mov	r0, r3
 801434c:	f7fb f892 	bl	800f474 <lwip_htons>
 8014350:	4603      	mov	r3, r0
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <tcp_receive+0xa42>
 801435a:	2301      	movs	r3, #1
 801435c:	e000      	b.n	8014360 <tcp_receive+0xa44>
 801435e:	2300      	movs	r3, #0
 8014360:	4423      	add	r3, r4
 8014362:	b29a      	uxth	r2, r3
 8014364:	4b63      	ldr	r3, [pc, #396]	; (80144f4 <tcp_receive+0xbd8>)
 8014366:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014368:	4b62      	ldr	r3, [pc, #392]	; (80144f4 <tcp_receive+0xbd8>)
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	461a      	mov	r2, r3
 801436e:	4b62      	ldr	r3, [pc, #392]	; (80144f8 <tcp_receive+0xbdc>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	441a      	add	r2, r3
 8014374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	429a      	cmp	r2, r3
 801437c:	d006      	beq.n	801438c <tcp_receive+0xa70>
 801437e:	4b60      	ldr	r3, [pc, #384]	; (8014500 <tcp_receive+0xbe4>)
 8014380:	f240 52af 	movw	r2, #1455	; 0x5af
 8014384:	495f      	ldr	r1, [pc, #380]	; (8014504 <tcp_receive+0xbe8>)
 8014386:	4860      	ldr	r0, [pc, #384]	; (8014508 <tcp_receive+0xbec>)
 8014388:	f004 ff6a 	bl	8019260 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014390:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014392:	4b58      	ldr	r3, [pc, #352]	; (80144f4 <tcp_receive+0xbd8>)
 8014394:	881b      	ldrh	r3, [r3, #0]
 8014396:	461a      	mov	r2, r3
 8014398:	4b57      	ldr	r3, [pc, #348]	; (80144f8 <tcp_receive+0xbdc>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	441a      	add	r2, r3
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80143a6:	4b53      	ldr	r3, [pc, #332]	; (80144f4 <tcp_receive+0xbd8>)
 80143a8:	881b      	ldrh	r3, [r3, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d206      	bcs.n	80143bc <tcp_receive+0xaa0>
 80143ae:	4b54      	ldr	r3, [pc, #336]	; (8014500 <tcp_receive+0xbe4>)
 80143b0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80143b4:	4955      	ldr	r1, [pc, #340]	; (801450c <tcp_receive+0xbf0>)
 80143b6:	4854      	ldr	r0, [pc, #336]	; (8014508 <tcp_receive+0xbec>)
 80143b8:	f004 ff52 	bl	8019260 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80143c0:	4b4c      	ldr	r3, [pc, #304]	; (80144f4 <tcp_receive+0xbd8>)
 80143c2:	881b      	ldrh	r3, [r3, #0]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7fd f8f7 	bl	80115c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80143d2:	4b4a      	ldr	r3, [pc, #296]	; (80144fc <tcp_receive+0xbe0>)
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	891b      	ldrh	r3, [r3, #8]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d006      	beq.n	80143ea <tcp_receive+0xace>
          recv_data = inseg.p;
 80143dc:	4b47      	ldr	r3, [pc, #284]	; (80144fc <tcp_receive+0xbe0>)
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	4a4b      	ldr	r2, [pc, #300]	; (8014510 <tcp_receive+0xbf4>)
 80143e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80143e4:	4b45      	ldr	r3, [pc, #276]	; (80144fc <tcp_receive+0xbe0>)
 80143e6:	2200      	movs	r2, #0
 80143e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80143ea:	4b44      	ldr	r3, [pc, #272]	; (80144fc <tcp_receive+0xbe0>)
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	899b      	ldrh	r3, [r3, #12]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fb f83e 	bl	800f474 <lwip_htons>
 80143f8:	4603      	mov	r3, r0
 80143fa:	f003 0301 	and.w	r3, r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	f000 80b4 	beq.w	801456c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014404:	4b43      	ldr	r3, [pc, #268]	; (8014514 <tcp_receive+0xbf8>)
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	f043 0320 	orr.w	r3, r3, #32
 801440c:	b2da      	uxtb	r2, r3
 801440e:	4b41      	ldr	r3, [pc, #260]	; (8014514 <tcp_receive+0xbf8>)
 8014410:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014412:	e0ab      	b.n	801456c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014418:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4a35      	ldr	r2, [pc, #212]	; (80144f8 <tcp_receive+0xbdc>)
 8014424:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	891b      	ldrh	r3, [r3, #8]
 801442a:	461c      	mov	r4, r3
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	899b      	ldrh	r3, [r3, #12]
 8014432:	b29b      	uxth	r3, r3
 8014434:	4618      	mov	r0, r3
 8014436:	f7fb f81d 	bl	800f474 <lwip_htons>
 801443a:	4603      	mov	r3, r0
 801443c:	f003 0303 	and.w	r3, r3, #3
 8014440:	2b00      	cmp	r3, #0
 8014442:	d001      	beq.n	8014448 <tcp_receive+0xb2c>
 8014444:	2301      	movs	r3, #1
 8014446:	e000      	b.n	801444a <tcp_receive+0xb2e>
 8014448:	2300      	movs	r3, #0
 801444a:	191a      	adds	r2, r3, r4
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014450:	441a      	add	r2, r3
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801445a:	461c      	mov	r4, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	891b      	ldrh	r3, [r3, #8]
 8014460:	461d      	mov	r5, r3
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	899b      	ldrh	r3, [r3, #12]
 8014468:	b29b      	uxth	r3, r3
 801446a:	4618      	mov	r0, r3
 801446c:	f7fb f802 	bl	800f474 <lwip_htons>
 8014470:	4603      	mov	r3, r0
 8014472:	f003 0303 	and.w	r3, r3, #3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <tcp_receive+0xb62>
 801447a:	2301      	movs	r3, #1
 801447c:	e000      	b.n	8014480 <tcp_receive+0xb64>
 801447e:	2300      	movs	r3, #0
 8014480:	442b      	add	r3, r5
 8014482:	429c      	cmp	r4, r3
 8014484:	d206      	bcs.n	8014494 <tcp_receive+0xb78>
 8014486:	4b1e      	ldr	r3, [pc, #120]	; (8014500 <tcp_receive+0xbe4>)
 8014488:	f240 52de 	movw	r2, #1502	; 0x5de
 801448c:	4922      	ldr	r1, [pc, #136]	; (8014518 <tcp_receive+0xbfc>)
 801448e:	481e      	ldr	r0, [pc, #120]	; (8014508 <tcp_receive+0xbec>)
 8014490:	f004 fee6 	bl	8019260 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	891b      	ldrh	r3, [r3, #8]
 8014498:	461c      	mov	r4, r3
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	68db      	ldr	r3, [r3, #12]
 801449e:	899b      	ldrh	r3, [r3, #12]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7fa ffe6 	bl	800f474 <lwip_htons>
 80144a8:	4603      	mov	r3, r0
 80144aa:	f003 0303 	and.w	r3, r3, #3
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d001      	beq.n	80144b6 <tcp_receive+0xb9a>
 80144b2:	2301      	movs	r3, #1
 80144b4:	e000      	b.n	80144b8 <tcp_receive+0xb9c>
 80144b6:	2300      	movs	r3, #0
 80144b8:	1919      	adds	r1, r3, r4
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80144be:	b28b      	uxth	r3, r1
 80144c0:	1ad3      	subs	r3, r2, r3
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f7fd f879 	bl	80115c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	891b      	ldrh	r3, [r3, #8]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d028      	beq.n	801452a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80144d8:	4b0d      	ldr	r3, [pc, #52]	; (8014510 <tcp_receive+0xbf4>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01d      	beq.n	801451c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80144e0:	4b0b      	ldr	r3, [pc, #44]	; (8014510 <tcp_receive+0xbf4>)
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	4619      	mov	r1, r3
 80144ea:	4610      	mov	r0, r2
 80144ec:	f7fc fab6 	bl	8010a5c <pbuf_cat>
 80144f0:	e018      	b.n	8014524 <tcp_receive+0xc08>
 80144f2:	bf00      	nop
 80144f4:	2000c82e 	.word	0x2000c82e
 80144f8:	2000c824 	.word	0x2000c824
 80144fc:	2000c804 	.word	0x2000c804
 8014500:	0801bd40 	.word	0x0801bd40
 8014504:	0801c068 	.word	0x0801c068
 8014508:	0801bda8 	.word	0x0801bda8
 801450c:	0801c0a4 	.word	0x0801c0a4
 8014510:	2000c834 	.word	0x2000c834
 8014514:	2000c831 	.word	0x2000c831
 8014518:	0801c0c4 	.word	0x0801c0c4
            } else {
              recv_data = cseg->p;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4a71      	ldr	r2, [pc, #452]	; (80146e8 <tcp_receive+0xdcc>)
 8014522:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2200      	movs	r2, #0
 8014528:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	899b      	ldrh	r3, [r3, #12]
 8014530:	b29b      	uxth	r3, r3
 8014532:	4618      	mov	r0, r3
 8014534:	f7fa ff9e 	bl	800f474 <lwip_htons>
 8014538:	4603      	mov	r3, r0
 801453a:	f003 0301 	and.w	r3, r3, #1
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00d      	beq.n	801455e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014542:	4b6a      	ldr	r3, [pc, #424]	; (80146ec <tcp_receive+0xdd0>)
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	f043 0320 	orr.w	r3, r3, #32
 801454a:	b2da      	uxtb	r2, r3
 801454c:	4b67      	ldr	r3, [pc, #412]	; (80146ec <tcp_receive+0xdd0>)
 801454e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	7d1b      	ldrb	r3, [r3, #20]
 8014554:	2b04      	cmp	r3, #4
 8014556:	d102      	bne.n	801455e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2207      	movs	r2, #7
 801455c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f7fd fcb7 	bl	8011eda <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014570:	2b00      	cmp	r3, #0
 8014572:	d008      	beq.n	8014586 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014580:	429a      	cmp	r2, r3
 8014582:	f43f af47 	beq.w	8014414 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	7e9b      	ldrb	r3, [r3, #26]
 801458a:	f003 0301 	and.w	r3, r3, #1
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00e      	beq.n	80145b0 <tcp_receive+0xc94>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	7e9b      	ldrb	r3, [r3, #26]
 8014596:	f023 0301 	bic.w	r3, r3, #1
 801459a:	b2da      	uxtb	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	769a      	strb	r2, [r3, #26]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	7e9b      	ldrb	r3, [r3, #26]
 80145a4:	f043 0302 	orr.w	r3, r3, #2
 80145a8:	b2da      	uxtb	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80145ae:	e181      	b.n	80148b4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	7e9b      	ldrb	r3, [r3, #26]
 80145b4:	f043 0301 	orr.w	r3, r3, #1
 80145b8:	b2da      	uxtb	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80145be:	e179      	b.n	80148b4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f001 f8c5 	bl	8015750 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d106      	bne.n	80145dc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80145ce:	4848      	ldr	r0, [pc, #288]	; (80146f0 <tcp_receive+0xdd4>)
 80145d0:	f7fd fc9b 	bl	8011f0a <tcp_seg_copy>
 80145d4:	4602      	mov	r2, r0
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80145da:	e16b      	b.n	80148b4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80145e6:	e150      	b.n	801488a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80145e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	685a      	ldr	r2, [r3, #4]
 80145ee:	4b41      	ldr	r3, [pc, #260]	; (80146f4 <tcp_receive+0xdd8>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d11d      	bne.n	8014632 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80145f6:	4b3e      	ldr	r3, [pc, #248]	; (80146f0 <tcp_receive+0xdd4>)
 80145f8:	891a      	ldrh	r2, [r3, #8]
 80145fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fc:	891b      	ldrh	r3, [r3, #8]
 80145fe:	429a      	cmp	r2, r3
 8014600:	f240 8148 	bls.w	8014894 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014604:	483a      	ldr	r0, [pc, #232]	; (80146f0 <tcp_receive+0xdd4>)
 8014606:	f7fd fc80 	bl	8011f0a <tcp_seg_copy>
 801460a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	f000 8142 	beq.w	8014898 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8014614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014616:	2b00      	cmp	r3, #0
 8014618:	d003      	beq.n	8014622 <tcp_receive+0xd06>
                    prev->next = cseg;
 801461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461c:	68fa      	ldr	r2, [r7, #12]
 801461e:	601a      	str	r2, [r3, #0]
 8014620:	e002      	b.n	8014628 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	68fa      	ldr	r2, [r7, #12]
 8014626:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f7ff f900 	bl	8013830 <tcp_oos_insert_segment>
                }
                break;
 8014630:	e132      	b.n	8014898 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014634:	2b00      	cmp	r3, #0
 8014636:	d117      	bne.n	8014668 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014638:	4b2e      	ldr	r3, [pc, #184]	; (80146f4 <tcp_receive+0xdd8>)
 801463a:	681a      	ldr	r2, [r3, #0]
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	2b00      	cmp	r3, #0
 8014646:	da57      	bge.n	80146f8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8014648:	4829      	ldr	r0, [pc, #164]	; (80146f0 <tcp_receive+0xdd4>)
 801464a:	f7fd fc5e 	bl	8011f0a <tcp_seg_copy>
 801464e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2b00      	cmp	r3, #0
 8014654:	f000 8122 	beq.w	801489c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801465e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f7ff f8e5 	bl	8013830 <tcp_oos_insert_segment>
                  }
                  break;
 8014666:	e119      	b.n	801489c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8014668:	4b22      	ldr	r3, [pc, #136]	; (80146f4 <tcp_receive+0xdd8>)
 801466a:	681a      	ldr	r2, [r3, #0]
 801466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	3b01      	subs	r3, #1
 8014676:	2b00      	cmp	r3, #0
 8014678:	db3e      	blt.n	80146f8 <tcp_receive+0xddc>
 801467a:	4b1e      	ldr	r3, [pc, #120]	; (80146f4 <tcp_receive+0xdd8>)
 801467c:	681a      	ldr	r2, [r3, #0]
 801467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	3301      	adds	r3, #1
 8014688:	2b00      	cmp	r3, #0
 801468a:	dc35      	bgt.n	80146f8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801468c:	4818      	ldr	r0, [pc, #96]	; (80146f0 <tcp_receive+0xdd4>)
 801468e:	f7fd fc3c 	bl	8011f0a <tcp_seg_copy>
 8014692:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	f000 8102 	beq.w	80148a0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146a4:	8912      	ldrh	r2, [r2, #8]
 80146a6:	441a      	add	r2, r3
 80146a8:	4b12      	ldr	r3, [pc, #72]	; (80146f4 <tcp_receive+0xdd8>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	dd12      	ble.n	80146d8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80146b2:	4b10      	ldr	r3, [pc, #64]	; (80146f4 <tcp_receive+0xdd8>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	b29a      	uxth	r2, r3
 80146b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	b29b      	uxth	r3, r3
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80146c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ca:	685a      	ldr	r2, [r3, #4]
 80146cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ce:	891b      	ldrh	r3, [r3, #8]
 80146d0:	4619      	mov	r1, r3
 80146d2:	4610      	mov	r0, r2
 80146d4:	f7fb ff74 	bl	80105c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80146d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146da:	68fa      	ldr	r2, [r7, #12]
 80146dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80146de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80146e0:	68f8      	ldr	r0, [r7, #12]
 80146e2:	f7ff f8a5 	bl	8013830 <tcp_oos_insert_segment>
                  }
                  break;
 80146e6:	e0db      	b.n	80148a0 <tcp_receive+0xf84>
 80146e8:	2000c834 	.word	0x2000c834
 80146ec:	2000c831 	.word	0x2000c831
 80146f0:	2000c804 	.word	0x2000c804
 80146f4:	2000c824 	.word	0x2000c824
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80146f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f040 80bf 	bne.w	8014880 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014702:	4b7c      	ldr	r3, [pc, #496]	; (80148f4 <tcp_receive+0xfd8>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	685b      	ldr	r3, [r3, #4]
 801470c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801470e:	2b00      	cmp	r3, #0
 8014710:	f340 80b6 	ble.w	8014880 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	899b      	ldrh	r3, [r3, #12]
 801471a:	b29b      	uxth	r3, r3
 801471c:	4618      	mov	r0, r3
 801471e:	f7fa fea9 	bl	800f474 <lwip_htons>
 8014722:	4603      	mov	r3, r0
 8014724:	f003 0301 	and.w	r3, r3, #1
 8014728:	2b00      	cmp	r3, #0
 801472a:	f040 80bb 	bne.w	80148a4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801472e:	4872      	ldr	r0, [pc, #456]	; (80148f8 <tcp_receive+0xfdc>)
 8014730:	f7fd fbeb 	bl	8011f0a <tcp_seg_copy>
 8014734:	4602      	mov	r2, r0
 8014736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014738:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	f000 80b2 	beq.w	80148a8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801474c:	8912      	ldrh	r2, [r2, #8]
 801474e:	441a      	add	r2, r3
 8014750:	4b68      	ldr	r3, [pc, #416]	; (80148f4 <tcp_receive+0xfd8>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	2b00      	cmp	r3, #0
 8014758:	dd12      	ble.n	8014780 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801475a:	4b66      	ldr	r3, [pc, #408]	; (80148f4 <tcp_receive+0xfd8>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	b29a      	uxth	r2, r3
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	b29b      	uxth	r3, r3
 8014768:	1ad3      	subs	r3, r2, r3
 801476a:	b29a      	uxth	r2, r3
 801476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014772:	685a      	ldr	r2, [r3, #4]
 8014774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014776:	891b      	ldrh	r3, [r3, #8]
 8014778:	4619      	mov	r1, r3
 801477a:	4610      	mov	r0, r2
 801477c:	f7fb ff20 	bl	80105c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014780:	4b5e      	ldr	r3, [pc, #376]	; (80148fc <tcp_receive+0xfe0>)
 8014782:	881b      	ldrh	r3, [r3, #0]
 8014784:	461a      	mov	r2, r3
 8014786:	4b5b      	ldr	r3, [pc, #364]	; (80148f4 <tcp_receive+0xfd8>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	441a      	add	r2, r3
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014790:	6879      	ldr	r1, [r7, #4]
 8014792:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014794:	440b      	add	r3, r1
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	2b00      	cmp	r3, #0
 801479a:	f340 8085 	ble.w	80148a8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	899b      	ldrh	r3, [r3, #12]
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fa fe63 	bl	800f474 <lwip_htons>
 80147ae:	4603      	mov	r3, r0
 80147b0:	f003 0301 	and.w	r3, r3, #1
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d01e      	beq.n	80147f6 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80147b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	899b      	ldrh	r3, [r3, #12]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80147c6:	b29c      	uxth	r4, r3
 80147c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	899b      	ldrh	r3, [r3, #12]
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fa fe4e 	bl	800f474 <lwip_htons>
 80147d8:	4603      	mov	r3, r0
 80147da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80147de:	b29b      	uxth	r3, r3
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fa fe47 	bl	800f474 <lwip_htons>
 80147e6:	4603      	mov	r3, r0
 80147e8:	461a      	mov	r2, r3
 80147ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	4322      	orrs	r2, r4
 80147f2:	b292      	uxth	r2, r2
 80147f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014800:	4413      	add	r3, r2
 8014802:	b299      	uxth	r1, r3
 8014804:	4b3b      	ldr	r3, [pc, #236]	; (80148f4 <tcp_receive+0xfd8>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	b29a      	uxth	r2, r3
 801480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	1a8a      	subs	r2, r1, r2
 8014810:	b292      	uxth	r2, r2
 8014812:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	685a      	ldr	r2, [r3, #4]
 801481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	891b      	ldrh	r3, [r3, #8]
 8014820:	4619      	mov	r1, r3
 8014822:	4610      	mov	r0, r2
 8014824:	f7fb fecc 	bl	80105c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	891c      	ldrh	r4, [r3, #8]
 801482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	899b      	ldrh	r3, [r3, #12]
 8014836:	b29b      	uxth	r3, r3
 8014838:	4618      	mov	r0, r3
 801483a:	f7fa fe1b 	bl	800f474 <lwip_htons>
 801483e:	4603      	mov	r3, r0
 8014840:	f003 0303 	and.w	r3, r3, #3
 8014844:	2b00      	cmp	r3, #0
 8014846:	d001      	beq.n	801484c <tcp_receive+0xf30>
 8014848:	2301      	movs	r3, #1
 801484a:	e000      	b.n	801484e <tcp_receive+0xf32>
 801484c:	2300      	movs	r3, #0
 801484e:	4423      	add	r3, r4
 8014850:	b29a      	uxth	r2, r3
 8014852:	4b2a      	ldr	r3, [pc, #168]	; (80148fc <tcp_receive+0xfe0>)
 8014854:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014856:	4b29      	ldr	r3, [pc, #164]	; (80148fc <tcp_receive+0xfe0>)
 8014858:	881b      	ldrh	r3, [r3, #0]
 801485a:	461a      	mov	r2, r3
 801485c:	4b25      	ldr	r3, [pc, #148]	; (80148f4 <tcp_receive+0xfd8>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	441a      	add	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801486a:	440b      	add	r3, r1
 801486c:	429a      	cmp	r2, r3
 801486e:	d01b      	beq.n	80148a8 <tcp_receive+0xf8c>
 8014870:	4b23      	ldr	r3, [pc, #140]	; (8014900 <tcp_receive+0xfe4>)
 8014872:	f240 627b 	movw	r2, #1659	; 0x67b
 8014876:	4923      	ldr	r1, [pc, #140]	; (8014904 <tcp_receive+0xfe8>)
 8014878:	4823      	ldr	r0, [pc, #140]	; (8014908 <tcp_receive+0xfec>)
 801487a:	f004 fcf1 	bl	8019260 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801487e:	e013      	b.n	80148a8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8014880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014882:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	62fb      	str	r3, [r7, #44]	; 0x2c
 801488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488c:	2b00      	cmp	r3, #0
 801488e:	f47f aeab 	bne.w	80145e8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8014892:	e00f      	b.n	80148b4 <tcp_receive+0xf98>
                break;
 8014894:	bf00      	nop
 8014896:	e00d      	b.n	80148b4 <tcp_receive+0xf98>
                break;
 8014898:	bf00      	nop
 801489a:	e00b      	b.n	80148b4 <tcp_receive+0xf98>
                  break;
 801489c:	bf00      	nop
 801489e:	e009      	b.n	80148b4 <tcp_receive+0xf98>
                  break;
 80148a0:	bf00      	nop
 80148a2:	e007      	b.n	80148b4 <tcp_receive+0xf98>
                  break;
 80148a4:	bf00      	nop
 80148a6:	e005      	b.n	80148b4 <tcp_receive+0xf98>
                break;
 80148a8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80148aa:	e003      	b.n	80148b4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 ff4f 	bl	8015750 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80148b2:	e01a      	b.n	80148ea <tcp_receive+0xfce>
 80148b4:	e019      	b.n	80148ea <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80148b6:	4b0f      	ldr	r3, [pc, #60]	; (80148f4 <tcp_receive+0xfd8>)
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148be:	1ad3      	subs	r3, r2, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	db0a      	blt.n	80148da <tcp_receive+0xfbe>
 80148c4:	4b0b      	ldr	r3, [pc, #44]	; (80148f4 <tcp_receive+0xfd8>)
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148cc:	6879      	ldr	r1, [r7, #4]
 80148ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148d0:	440b      	add	r3, r1
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	3301      	adds	r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	dd07      	ble.n	80148ea <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	7e9b      	ldrb	r3, [r3, #26]
 80148de:	f043 0302 	orr.w	r3, r3, #2
 80148e2:	b2da      	uxtb	r2, r3
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80148e8:	e7ff      	b.n	80148ea <tcp_receive+0xfce>
 80148ea:	bf00      	nop
 80148ec:	3734      	adds	r7, #52	; 0x34
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f2:	bf00      	nop
 80148f4:	2000c824 	.word	0x2000c824
 80148f8:	2000c804 	.word	0x2000c804
 80148fc:	2000c82e 	.word	0x2000c82e
 8014900:	0801bd40 	.word	0x0801bd40
 8014904:	0801c030 	.word	0x0801c030
 8014908:	0801bda8 	.word	0x0801bda8

0801490c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801490c:	b480      	push	{r7}
 801490e:	b083      	sub	sp, #12
 8014910:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014912:	4b18      	ldr	r3, [pc, #96]	; (8014974 <tcp_getoptbyte+0x68>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d005      	beq.n	8014926 <tcp_getoptbyte+0x1a>
 801491a:	4b17      	ldr	r3, [pc, #92]	; (8014978 <tcp_getoptbyte+0x6c>)
 801491c:	881a      	ldrh	r2, [r3, #0]
 801491e:	4b17      	ldr	r3, [pc, #92]	; (801497c <tcp_getoptbyte+0x70>)
 8014920:	881b      	ldrh	r3, [r3, #0]
 8014922:	429a      	cmp	r2, r3
 8014924:	d20e      	bcs.n	8014944 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014926:	4b16      	ldr	r3, [pc, #88]	; (8014980 <tcp_getoptbyte+0x74>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	3314      	adds	r3, #20
 801492c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801492e:	4b12      	ldr	r3, [pc, #72]	; (8014978 <tcp_getoptbyte+0x6c>)
 8014930:	881b      	ldrh	r3, [r3, #0]
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	b291      	uxth	r1, r2
 8014936:	4a10      	ldr	r2, [pc, #64]	; (8014978 <tcp_getoptbyte+0x6c>)
 8014938:	8011      	strh	r1, [r2, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	4413      	add	r3, r2
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	e010      	b.n	8014966 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014944:	4b0c      	ldr	r3, [pc, #48]	; (8014978 <tcp_getoptbyte+0x6c>)
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	1c5a      	adds	r2, r3, #1
 801494a:	b291      	uxth	r1, r2
 801494c:	4a0a      	ldr	r2, [pc, #40]	; (8014978 <tcp_getoptbyte+0x6c>)
 801494e:	8011      	strh	r1, [r2, #0]
 8014950:	b2da      	uxtb	r2, r3
 8014952:	4b0a      	ldr	r3, [pc, #40]	; (801497c <tcp_getoptbyte+0x70>)
 8014954:	881b      	ldrh	r3, [r3, #0]
 8014956:	b2db      	uxtb	r3, r3
 8014958:	1ad3      	subs	r3, r2, r3
 801495a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801495c:	4b05      	ldr	r3, [pc, #20]	; (8014974 <tcp_getoptbyte+0x68>)
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	79fb      	ldrb	r3, [r7, #7]
 8014962:	4413      	add	r3, r2
 8014964:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014966:	4618      	mov	r0, r3
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop
 8014974:	2000c81c 	.word	0x2000c81c
 8014978:	2000c820 	.word	0x2000c820
 801497c:	2000c81a 	.word	0x2000c81a
 8014980:	2000c814 	.word	0x2000c814

08014984 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801498c:	4b2d      	ldr	r3, [pc, #180]	; (8014a44 <tcp_parseopt+0xc0>)
 801498e:	881b      	ldrh	r3, [r3, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d053      	beq.n	8014a3c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014994:	4b2c      	ldr	r3, [pc, #176]	; (8014a48 <tcp_parseopt+0xc4>)
 8014996:	2200      	movs	r2, #0
 8014998:	801a      	strh	r2, [r3, #0]
 801499a:	e043      	b.n	8014a24 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801499c:	f7ff ffb6 	bl	801490c <tcp_getoptbyte>
 80149a0:	4603      	mov	r3, r0
 80149a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d03c      	beq.n	8014a24 <tcp_parseopt+0xa0>
 80149aa:	2b02      	cmp	r3, #2
 80149ac:	d002      	beq.n	80149b4 <tcp_parseopt+0x30>
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d03f      	beq.n	8014a32 <tcp_parseopt+0xae>
 80149b2:	e026      	b.n	8014a02 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80149b4:	f7ff ffaa 	bl	801490c <tcp_getoptbyte>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b04      	cmp	r3, #4
 80149bc:	d13b      	bne.n	8014a36 <tcp_parseopt+0xb2>
 80149be:	4b22      	ldr	r3, [pc, #136]	; (8014a48 <tcp_parseopt+0xc4>)
 80149c0:	881b      	ldrh	r3, [r3, #0]
 80149c2:	3302      	adds	r3, #2
 80149c4:	4a1f      	ldr	r2, [pc, #124]	; (8014a44 <tcp_parseopt+0xc0>)
 80149c6:	8812      	ldrh	r2, [r2, #0]
 80149c8:	4293      	cmp	r3, r2
 80149ca:	dc34      	bgt.n	8014a36 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80149cc:	f7ff ff9e 	bl	801490c <tcp_getoptbyte>
 80149d0:	4603      	mov	r3, r0
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	021b      	lsls	r3, r3, #8
 80149d6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80149d8:	f7ff ff98 	bl	801490c <tcp_getoptbyte>
 80149dc:	4603      	mov	r3, r0
 80149de:	b29a      	uxth	r2, r3
 80149e0:	89bb      	ldrh	r3, [r7, #12]
 80149e2:	4313      	orrs	r3, r2
 80149e4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80149e6:	89bb      	ldrh	r3, [r7, #12]
 80149e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80149ec:	d804      	bhi.n	80149f8 <tcp_parseopt+0x74>
 80149ee:	89bb      	ldrh	r3, [r7, #12]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d001      	beq.n	80149f8 <tcp_parseopt+0x74>
 80149f4:	89ba      	ldrh	r2, [r7, #12]
 80149f6:	e001      	b.n	80149fc <tcp_parseopt+0x78>
 80149f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014a00:	e010      	b.n	8014a24 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014a02:	f7ff ff83 	bl	801490c <tcp_getoptbyte>
 8014a06:	4603      	mov	r3, r0
 8014a08:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8014a0a:	7afb      	ldrb	r3, [r7, #11]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d914      	bls.n	8014a3a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014a10:	7afb      	ldrb	r3, [r7, #11]
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	4b0c      	ldr	r3, [pc, #48]	; (8014a48 <tcp_parseopt+0xc4>)
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	4413      	add	r3, r2
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	3b02      	subs	r3, #2
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	4b09      	ldr	r3, [pc, #36]	; (8014a48 <tcp_parseopt+0xc4>)
 8014a22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014a24:	4b08      	ldr	r3, [pc, #32]	; (8014a48 <tcp_parseopt+0xc4>)
 8014a26:	881a      	ldrh	r2, [r3, #0]
 8014a28:	4b06      	ldr	r3, [pc, #24]	; (8014a44 <tcp_parseopt+0xc0>)
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d3b5      	bcc.n	801499c <tcp_parseopt+0x18>
 8014a30:	e004      	b.n	8014a3c <tcp_parseopt+0xb8>
        return;
 8014a32:	bf00      	nop
 8014a34:	e002      	b.n	8014a3c <tcp_parseopt+0xb8>
          return;
 8014a36:	bf00      	nop
 8014a38:	e000      	b.n	8014a3c <tcp_parseopt+0xb8>
          return;
 8014a3a:	bf00      	nop
      }
    }
  }
}
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	2000c818 	.word	0x2000c818
 8014a48:	2000c820 	.word	0x2000c820

08014a4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014a50:	4b05      	ldr	r3, [pc, #20]	; (8014a68 <tcp_trigger_input_pcb_close+0x1c>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	f043 0310 	orr.w	r3, r3, #16
 8014a58:	b2da      	uxtb	r2, r3
 8014a5a:	4b03      	ldr	r3, [pc, #12]	; (8014a68 <tcp_trigger_input_pcb_close+0x1c>)
 8014a5c:	701a      	strb	r2, [r3, #0]
}
 8014a5e:	bf00      	nop
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr
 8014a68:	2000c831 	.word	0x2000c831

08014a6c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b086      	sub	sp, #24
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	607b      	str	r3, [r7, #4]
 8014a76:	460b      	mov	r3, r1
 8014a78:	817b      	strh	r3, [r7, #10]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014a7e:	897a      	ldrh	r2, [r7, #10]
 8014a80:	893b      	ldrh	r3, [r7, #8]
 8014a82:	4413      	add	r3, r2
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	3314      	adds	r3, #20
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	2001      	movs	r0, #1
 8014a90:	f7fb fb98 	bl	80101c4 <pbuf_alloc>
 8014a94:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d057      	beq.n	8014b4c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	895b      	ldrh	r3, [r3, #10]
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	897b      	ldrh	r3, [r7, #10]
 8014aa4:	3314      	adds	r3, #20
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	da05      	bge.n	8014ab6 <tcp_output_alloc_header+0x4a>
 8014aaa:	4b2b      	ldr	r3, [pc, #172]	; (8014b58 <tcp_output_alloc_header+0xec>)
 8014aac:	2273      	movs	r2, #115	; 0x73
 8014aae:	492b      	ldr	r1, [pc, #172]	; (8014b5c <tcp_output_alloc_header+0xf0>)
 8014ab0:	482b      	ldr	r0, [pc, #172]	; (8014b60 <tcp_output_alloc_header+0xf4>)
 8014ab2:	f004 fbd5 	bl	8019260 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	8adb      	ldrh	r3, [r3, #22]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fa fcd7 	bl	800f474 <lwip_htons>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	461a      	mov	r2, r3
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	8b1b      	ldrh	r3, [r3, #24]
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fa fcce 	bl	800f474 <lwip_htons>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	461a      	mov	r2, r3
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fa fcd0 	bl	800f490 <lwip_htonl>
 8014af0:	4602      	mov	r2, r0
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014af6:	897b      	ldrh	r3, [r7, #10]
 8014af8:	089b      	lsrs	r3, r3, #2
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	3305      	adds	r3, #5
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	031b      	lsls	r3, r3, #12
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	f043 0310 	orr.w	r3, r3, #16
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fa fcb2 	bl	800f474 <lwip_htons>
 8014b10:	4603      	mov	r3, r0
 8014b12:	461a      	mov	r2, r3
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7fa fca9 	bl	800f474 <lwip_htons>
 8014b22:	4603      	mov	r3, r0
 8014b24:	461a      	mov	r2, r3
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	741a      	strb	r2, [r3, #16]
 8014b30:	2200      	movs	r2, #0
 8014b32:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	2200      	movs	r2, #0
 8014b38:	749a      	strb	r2, [r3, #18]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014b46:	441a      	add	r2, r3
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014b4c:	697b      	ldr	r3, [r7, #20]
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3718      	adds	r7, #24
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	0801c0ec 	.word	0x0801c0ec
 8014b5c:	0801c144 	.word	0x0801c144
 8014b60:	0801c174 	.word	0x0801c174

08014b64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014b64:	b590      	push	{r4, r7, lr}
 8014b66:	b085      	sub	sp, #20
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d02d      	beq.n	8014bd0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014b78:	60fb      	str	r3, [r7, #12]
 8014b7a:	e002      	b.n	8014b82 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d1f8      	bne.n	8014b7c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	899b      	ldrh	r3, [r3, #12]
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fa fc6e 	bl	800f474 <lwip_htons>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	f003 0307 	and.w	r3, r3, #7
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d116      	bne.n	8014bd0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	899b      	ldrh	r3, [r3, #12]
 8014ba8:	b29c      	uxth	r4, r3
 8014baa:	2001      	movs	r0, #1
 8014bac:	f7fa fc62 	bl	800f474 <lwip_htons>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	4322      	orrs	r2, r4
 8014bba:	b292      	uxth	r2, r2
 8014bbc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7e9b      	ldrb	r3, [r3, #26]
 8014bc2:	f043 0320 	orr.w	r3, r3, #32
 8014bc6:	b2da      	uxtb	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	e004      	b.n	8014bda <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014bd0:	2101      	movs	r1, #1
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f000 fcc0 	bl	8015558 <tcp_enqueue_flags>
 8014bd8:	4603      	mov	r3, r0
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3714      	adds	r7, #20
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd90      	pop	{r4, r7, pc}
	...

08014be4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014be4:	b590      	push	{r4, r7, lr}
 8014be6:	b087      	sub	sp, #28
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	603b      	str	r3, [r7, #0]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014bf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	f003 0304 	and.w	r3, r3, #4
 8014c00:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014c02:	2003      	movs	r0, #3
 8014c04:	f7fb f842 	bl	800fc8c <memp_malloc>
 8014c08:	6138      	str	r0, [r7, #16]
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d104      	bne.n	8014c1a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014c10:	68b8      	ldr	r0, [r7, #8]
 8014c12:	f7fb fe49 	bl	80108a8 <pbuf_free>
    return NULL;
 8014c16:	2300      	movs	r3, #0
 8014c18:	e061      	b.n	8014cde <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014c20:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	2200      	movs	r2, #0
 8014c26:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	68ba      	ldr	r2, [r7, #8]
 8014c2c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	891a      	ldrh	r2, [r3, #8]
 8014c32:	7dfb      	ldrb	r3, [r7, #23]
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d205      	bcs.n	8014c46 <tcp_create_segment+0x62>
 8014c3a:	4b2b      	ldr	r3, [pc, #172]	; (8014ce8 <tcp_create_segment+0x104>)
 8014c3c:	22ba      	movs	r2, #186	; 0xba
 8014c3e:	492b      	ldr	r1, [pc, #172]	; (8014cec <tcp_create_segment+0x108>)
 8014c40:	482b      	ldr	r0, [pc, #172]	; (8014cf0 <tcp_create_segment+0x10c>)
 8014c42:	f004 fb0d 	bl	8019260 <iprintf>
  seg->len = p->tot_len - optlen;
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	891a      	ldrh	r2, [r3, #8]
 8014c4a:	7dfb      	ldrb	r3, [r7, #23]
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	1ad3      	subs	r3, r2, r3
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014c56:	2114      	movs	r1, #20
 8014c58:	68b8      	ldr	r0, [r7, #8]
 8014c5a:	f7fb fe01 	bl	8010860 <pbuf_header>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d004      	beq.n	8014c6e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014c64:	6938      	ldr	r0, [r7, #16]
 8014c66:	f7fd f938 	bl	8011eda <tcp_seg_free>
    return NULL;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	e037      	b.n	8014cde <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	8ada      	ldrh	r2, [r3, #22]
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	68dc      	ldr	r4, [r3, #12]
 8014c80:	4610      	mov	r0, r2
 8014c82:	f7fa fbf7 	bl	800f474 <lwip_htons>
 8014c86:	4603      	mov	r3, r0
 8014c88:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	8b1a      	ldrh	r2, [r3, #24]
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	68dc      	ldr	r4, [r3, #12]
 8014c92:	4610      	mov	r0, r2
 8014c94:	f7fa fbee 	bl	800f474 <lwip_htons>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	68dc      	ldr	r4, [r3, #12]
 8014ca0:	6838      	ldr	r0, [r7, #0]
 8014ca2:	f7fa fbf5 	bl	800f490 <lwip_htonl>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014caa:	7dfb      	ldrb	r3, [r7, #23]
 8014cac:	089b      	lsrs	r3, r3, #2
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	3305      	adds	r3, #5
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	031b      	lsls	r3, r3, #12
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	79fb      	ldrb	r3, [r7, #7]
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	68dc      	ldr	r4, [r3, #12]
 8014cc6:	4610      	mov	r0, r2
 8014cc8:	f7fa fbd4 	bl	800f474 <lwip_htons>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	68db      	ldr	r3, [r3, #12]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	749a      	strb	r2, [r3, #18]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	74da      	strb	r2, [r3, #19]
  return seg;
 8014cdc:	693b      	ldr	r3, [r7, #16]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	371c      	adds	r7, #28
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd90      	pop	{r4, r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801c0ec 	.word	0x0801c0ec
 8014cec:	0801c19c 	.word	0x0801c19c
 8014cf0:	0801c174 	.word	0x0801c174

08014cf4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	607b      	str	r3, [r7, #4]
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	73fb      	strb	r3, [r7, #15]
 8014d00:	460b      	mov	r3, r1
 8014d02:	81bb      	strh	r3, [r7, #12]
 8014d04:	4613      	mov	r3, r2
 8014d06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014d08:	89bb      	ldrh	r3, [r7, #12]
 8014d0a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014d0c:	89ba      	ldrh	r2, [r7, #12]
 8014d0e:	897b      	ldrh	r3, [r7, #10]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d221      	bcs.n	8014d58 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d18:	f003 0302 	and.w	r3, r3, #2
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d111      	bne.n	8014d44 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	7e9b      	ldrb	r3, [r3, #26]
 8014d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d115      	bne.n	8014d58 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8014d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d007      	beq.n	8014d44 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014d34:	6a3b      	ldr	r3, [r7, #32]
 8014d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d103      	bne.n	8014d44 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8014d3c:	6a3b      	ldr	r3, [r7, #32]
 8014d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d009      	beq.n	8014d58 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014d44:	89bb      	ldrh	r3, [r7, #12]
 8014d46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014d4a:	f023 0203 	bic.w	r2, r3, #3
 8014d4e:	897b      	ldrh	r3, [r7, #10]
 8014d50:	4293      	cmp	r3, r2
 8014d52:	bf28      	it	cs
 8014d54:	4613      	movcs	r3, r2
 8014d56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014d58:	8af9      	ldrh	r1, [r7, #22]
 8014d5a:	7bfb      	ldrb	r3, [r7, #15]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fb fa30 	bl	80101c4 <pbuf_alloc>
 8014d64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	e019      	b.n	8014da4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014d70:	693b      	ldr	r3, [r7, #16]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d006      	beq.n	8014d86 <tcp_pbuf_prealloc+0x92>
 8014d78:	4b0c      	ldr	r3, [pc, #48]	; (8014dac <tcp_pbuf_prealloc+0xb8>)
 8014d7a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014d7e:	490c      	ldr	r1, [pc, #48]	; (8014db0 <tcp_pbuf_prealloc+0xbc>)
 8014d80:	480c      	ldr	r0, [pc, #48]	; (8014db4 <tcp_pbuf_prealloc+0xc0>)
 8014d82:	f004 fa6d 	bl	8019260 <iprintf>
  *oversize = p->len - length;
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	895a      	ldrh	r2, [r3, #10]
 8014d8a:	89bb      	ldrh	r3, [r7, #12]
 8014d8c:	1ad3      	subs	r3, r2, r3
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	89ba      	ldrh	r2, [r7, #12]
 8014d98:	811a      	strh	r2, [r3, #8]
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	891a      	ldrh	r2, [r3, #8]
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	815a      	strh	r2, [r3, #10]
  return p;
 8014da2:	693b      	ldr	r3, [r7, #16]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3718      	adds	r7, #24
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	0801c0ec 	.word	0x0801c0ec
 8014db0:	0801c1b4 	.word	0x0801c1b4
 8014db4:	0801c174 	.word	0x0801c174

08014db8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7d1b      	ldrb	r3, [r3, #20]
 8014dc8:	2b04      	cmp	r3, #4
 8014dca:	d00e      	beq.n	8014dea <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014dd0:	2b07      	cmp	r3, #7
 8014dd2:	d00a      	beq.n	8014dea <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014dd8:	2b02      	cmp	r3, #2
 8014dda:	d006      	beq.n	8014dea <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014de0:	2b03      	cmp	r3, #3
 8014de2:	d002      	beq.n	8014dea <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014de4:	f06f 030a 	mvn.w	r3, #10
 8014de8:	e04f      	b.n	8014e8a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8014dea:	887b      	ldrh	r3, [r7, #2]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d101      	bne.n	8014df4 <tcp_write_checks+0x3c>
    return ERR_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	e04a      	b.n	8014e8a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014dfa:	887a      	ldrh	r2, [r7, #2]
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d909      	bls.n	8014e14 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	7e9b      	ldrb	r3, [r3, #26]
 8014e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e08:	b2da      	uxtb	r2, r3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e12:	e03a      	b.n	8014e8a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e1a:	2b08      	cmp	r3, #8
 8014e1c:	d806      	bhi.n	8014e2c <tcp_write_checks+0x74>
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e24:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014e28:	4293      	cmp	r3, r2
 8014e2a:	d909      	bls.n	8014e40 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	7e9b      	ldrb	r3, [r3, #26]
 8014e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e34:	b2da      	uxtb	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e3e:	e024      	b.n	8014e8a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d00f      	beq.n	8014e6a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d11a      	bne.n	8014e88 <tcp_write_checks+0xd0>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d116      	bne.n	8014e88 <tcp_write_checks+0xd0>
 8014e5a:	4b0e      	ldr	r3, [pc, #56]	; (8014e94 <tcp_write_checks+0xdc>)
 8014e5c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8014e60:	490d      	ldr	r1, [pc, #52]	; (8014e98 <tcp_write_checks+0xe0>)
 8014e62:	480e      	ldr	r0, [pc, #56]	; (8014e9c <tcp_write_checks+0xe4>)
 8014e64:	f004 f9fc 	bl	8019260 <iprintf>
 8014e68:	e00e      	b.n	8014e88 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d103      	bne.n	8014e7a <tcp_write_checks+0xc2>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d006      	beq.n	8014e88 <tcp_write_checks+0xd0>
 8014e7a:	4b06      	ldr	r3, [pc, #24]	; (8014e94 <tcp_write_checks+0xdc>)
 8014e7c:	f240 1259 	movw	r2, #345	; 0x159
 8014e80:	4907      	ldr	r1, [pc, #28]	; (8014ea0 <tcp_write_checks+0xe8>)
 8014e82:	4806      	ldr	r0, [pc, #24]	; (8014e9c <tcp_write_checks+0xe4>)
 8014e84:	f004 f9ec 	bl	8019260 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014e88:	2300      	movs	r3, #0
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	0801c0ec 	.word	0x0801c0ec
 8014e98:	0801c1c8 	.word	0x0801c1c8
 8014e9c:	0801c174 	.word	0x0801c174
 8014ea0:	0801c204 	.word	0x0801c204

08014ea4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014ea4:	b590      	push	{r4, r7, lr}
 8014ea6:	b09b      	sub	sp, #108	; 0x6c
 8014ea8:	af04      	add	r7, sp, #16
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	4611      	mov	r1, r2
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	80fb      	strh	r3, [r7, #6]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014eca:	2300      	movs	r3, #0
 8014ecc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014ece:	2300      	movs	r3, #0
 8014ed0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8014eda:	2300      	movs	r3, #0
 8014edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ef2:	085b      	lsrs	r3, r3, #1
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014efa:	4293      	cmp	r3, r2
 8014efc:	bf28      	it	cs
 8014efe:	4613      	movcs	r3, r2
 8014f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d102      	bne.n	8014f0e <tcp_write+0x6a>
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f0c:	e000      	b.n	8014f10 <tcp_write+0x6c>
 8014f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f10:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d109      	bne.n	8014f2c <tcp_write+0x88>
 8014f18:	4b92      	ldr	r3, [pc, #584]	; (8015164 <tcp_write+0x2c0>)
 8014f1a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8014f1e:	4992      	ldr	r1, [pc, #584]	; (8015168 <tcp_write+0x2c4>)
 8014f20:	4892      	ldr	r0, [pc, #584]	; (801516c <tcp_write+0x2c8>)
 8014f22:	f004 f99d 	bl	8019260 <iprintf>
 8014f26:	f06f 030f 	mvn.w	r3, #15
 8014f2a:	e30a      	b.n	8015542 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014f2c:	88fb      	ldrh	r3, [r7, #6]
 8014f2e:	4619      	mov	r1, r3
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f7ff ff41 	bl	8014db8 <tcp_write_checks>
 8014f36:	4603      	mov	r3, r0
 8014f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014f3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d002      	beq.n	8014f4a <tcp_write+0xa6>
    return err;
 8014f44:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014f48:	e2fb      	b.n	8015542 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014f50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f000 80f5 	beq.w	8015148 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f62:	653b      	str	r3, [r7, #80]	; 0x50
 8014f64:	e002      	b.n	8014f6c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8014f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d1f8      	bne.n	8014f66 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8014f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f76:	7a9b      	ldrb	r3, [r3, #10]
 8014f78:	009b      	lsls	r3, r3, #2
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	f003 0304 	and.w	r3, r3, #4
 8014f80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014f82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f86:	891b      	ldrh	r3, [r3, #8]
 8014f88:	4619      	mov	r1, r3
 8014f8a:	8c3b      	ldrh	r3, [r7, #32]
 8014f8c:	440b      	add	r3, r1
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	da06      	bge.n	8014fa0 <tcp_write+0xfc>
 8014f92:	4b74      	ldr	r3, [pc, #464]	; (8015164 <tcp_write+0x2c0>)
 8014f94:	f240 12c7 	movw	r2, #455	; 0x1c7
 8014f98:	4975      	ldr	r1, [pc, #468]	; (8015170 <tcp_write+0x2cc>)
 8014f9a:	4874      	ldr	r0, [pc, #464]	; (801516c <tcp_write+0x2c8>)
 8014f9c:	f004 f960 	bl	8019260 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fa2:	891a      	ldrh	r2, [r3, #8]
 8014fa4:	8c3b      	ldrh	r3, [r7, #32]
 8014fa6:	4413      	add	r3, r2
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fac:	1ad3      	subs	r3, r2, r3
 8014fae:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014fb6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014fb8:	8a7b      	ldrh	r3, [r7, #18]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d027      	beq.n	801500e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014fbe:	8a7b      	ldrh	r3, [r7, #18]
 8014fc0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d206      	bcs.n	8014fd4 <tcp_write+0x130>
 8014fc6:	4b67      	ldr	r3, [pc, #412]	; (8015164 <tcp_write+0x2c0>)
 8014fc8:	f240 12d9 	movw	r2, #473	; 0x1d9
 8014fcc:	4969      	ldr	r1, [pc, #420]	; (8015174 <tcp_write+0x2d0>)
 8014fce:	4867      	ldr	r0, [pc, #412]	; (801516c <tcp_write+0x2c8>)
 8014fd0:	f004 f946 	bl	8019260 <iprintf>
      seg = last_unsent;
 8014fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014fd8:	8a7b      	ldrh	r3, [r7, #18]
 8014fda:	88fa      	ldrh	r2, [r7, #6]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d901      	bls.n	8014fe4 <tcp_write+0x140>
 8014fe0:	8a7b      	ldrh	r3, [r7, #18]
 8014fe2:	e000      	b.n	8014fe6 <tcp_write+0x142>
 8014fe4:	88fb      	ldrh	r3, [r7, #6]
 8014fe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	bfa8      	it	ge
 8014fec:	4613      	movge	r3, r2
 8014fee:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014ff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ff6:	4413      	add	r3, r2
 8014ff8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014ffc:	8a7a      	ldrh	r2, [r7, #18]
 8014ffe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	b29b      	uxth	r3, r3
 8015004:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015006:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801500e:	8a7b      	ldrh	r3, [r7, #18]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00b      	beq.n	801502c <tcp_write+0x188>
 8015014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015018:	88fb      	ldrh	r3, [r7, #6]
 801501a:	429a      	cmp	r2, r3
 801501c:	d006      	beq.n	801502c <tcp_write+0x188>
 801501e:	4b51      	ldr	r3, [pc, #324]	; (8015164 <tcp_write+0x2c0>)
 8015020:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015024:	4954      	ldr	r1, [pc, #336]	; (8015178 <tcp_write+0x2d4>)
 8015026:	4851      	ldr	r0, [pc, #324]	; (801516c <tcp_write+0x2c8>)
 8015028:	f004 f91a 	bl	8019260 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801502c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015030:	88fb      	ldrh	r3, [r7, #6]
 8015032:	429a      	cmp	r2, r3
 8015034:	f080 8168 	bcs.w	8015308 <tcp_write+0x464>
 8015038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801503a:	2b00      	cmp	r3, #0
 801503c:	f000 8164 	beq.w	8015308 <tcp_write+0x464>
 8015040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015042:	891b      	ldrh	r3, [r3, #8]
 8015044:	2b00      	cmp	r3, #0
 8015046:	f000 815f 	beq.w	8015308 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801504a:	88fa      	ldrh	r2, [r7, #6]
 801504c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015050:	1ad2      	subs	r2, r2, r3
 8015052:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015054:	4293      	cmp	r3, r2
 8015056:	bfa8      	it	ge
 8015058:	4613      	movge	r3, r2
 801505a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801505c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801505e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015060:	797b      	ldrb	r3, [r7, #5]
 8015062:	f003 0301 	and.w	r3, r3, #1
 8015066:	2b00      	cmp	r3, #0
 8015068:	d027      	beq.n	80150ba <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801506a:	f107 0012 	add.w	r0, r7, #18
 801506e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015070:	8bf9      	ldrh	r1, [r7, #30]
 8015072:	2301      	movs	r3, #1
 8015074:	9302      	str	r3, [sp, #8]
 8015076:	797b      	ldrb	r3, [r7, #5]
 8015078:	9301      	str	r3, [sp, #4]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	9300      	str	r3, [sp, #0]
 801507e:	4603      	mov	r3, r0
 8015080:	2004      	movs	r0, #4
 8015082:	f7ff fe37 	bl	8014cf4 <tcp_pbuf_prealloc>
 8015086:	6578      	str	r0, [r7, #84]	; 0x54
 8015088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801508a:	2b00      	cmp	r3, #0
 801508c:	f000 8227 	beq.w	80154de <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015092:	6858      	ldr	r0, [r3, #4]
 8015094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015098:	68ba      	ldr	r2, [r7, #8]
 801509a:	4413      	add	r3, r2
 801509c:	8bfa      	ldrh	r2, [r7, #30]
 801509e:	4619      	mov	r1, r3
 80150a0:	f004 f8cb 	bl	801923a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80150a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80150a6:	f7fb fc99 	bl	80109dc <pbuf_clen>
 80150aa:	4603      	mov	r3, r0
 80150ac:	461a      	mov	r2, r3
 80150ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80150b2:	4413      	add	r3, r2
 80150b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80150b8:	e03f      	b.n	801513a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80150ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	637b      	str	r3, [r7, #52]	; 0x34
 80150c0:	e002      	b.n	80150c8 <tcp_write+0x224>
 80150c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	637b      	str	r3, [r7, #52]	; 0x34
 80150c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d1f8      	bne.n	80150c2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80150d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150d2:	7b1b      	ldrb	r3, [r3, #12]
 80150d4:	2b01      	cmp	r3, #1
 80150d6:	d115      	bne.n	8015104 <tcp_write+0x260>
 80150d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150de:	8952      	ldrh	r2, [r2, #10]
 80150e0:	4413      	add	r3, r2
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d10d      	bne.n	8015104 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80150e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d006      	beq.n	80150fe <tcp_write+0x25a>
 80150f0:	4b1c      	ldr	r3, [pc, #112]	; (8015164 <tcp_write+0x2c0>)
 80150f2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80150f6:	4921      	ldr	r1, [pc, #132]	; (801517c <tcp_write+0x2d8>)
 80150f8:	481c      	ldr	r0, [pc, #112]	; (801516c <tcp_write+0x2c8>)
 80150fa:	f004 f8b1 	bl	8019260 <iprintf>
          extendlen = seglen;
 80150fe:	8bfb      	ldrh	r3, [r7, #30]
 8015100:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015102:	e01a      	b.n	801513a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015104:	8bfb      	ldrh	r3, [r7, #30]
 8015106:	2201      	movs	r2, #1
 8015108:	4619      	mov	r1, r3
 801510a:	2004      	movs	r0, #4
 801510c:	f7fb f85a 	bl	80101c4 <pbuf_alloc>
 8015110:	6578      	str	r0, [r7, #84]	; 0x54
 8015112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 81e4 	beq.w	80154e2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801511a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801511e:	68ba      	ldr	r2, [r7, #8]
 8015120:	441a      	add	r2, r3
 8015122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015124:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015126:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015128:	f7fb fc58 	bl	80109dc <pbuf_clen>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015134:	4413      	add	r3, r2
 8015136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801513a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801513e:	8bfb      	ldrh	r3, [r7, #30]
 8015140:	4413      	add	r3, r2
 8015142:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015146:	e0df      	b.n	8015308 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801514e:	2b00      	cmp	r3, #0
 8015150:	f000 80da 	beq.w	8015308 <tcp_write+0x464>
 8015154:	4b03      	ldr	r3, [pc, #12]	; (8015164 <tcp_write+0x2c0>)
 8015156:	f240 2225 	movw	r2, #549	; 0x225
 801515a:	4909      	ldr	r1, [pc, #36]	; (8015180 <tcp_write+0x2dc>)
 801515c:	4803      	ldr	r0, [pc, #12]	; (801516c <tcp_write+0x2c8>)
 801515e:	f004 f87f 	bl	8019260 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015162:	e0d1      	b.n	8015308 <tcp_write+0x464>
 8015164:	0801c0ec 	.word	0x0801c0ec
 8015168:	0801c238 	.word	0x0801c238
 801516c:	0801c174 	.word	0x0801c174
 8015170:	0801c26c 	.word	0x0801c26c
 8015174:	0801c284 	.word	0x0801c284
 8015178:	0801c2a4 	.word	0x0801c2a4
 801517c:	0801c2c4 	.word	0x0801c2c4
 8015180:	0801c2f0 	.word	0x0801c2f0
    struct pbuf *p;
    u16_t left = len - pos;
 8015184:	88fa      	ldrh	r2, [r7, #6]
 8015186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801518e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015192:	b29b      	uxth	r3, r3
 8015194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801519a:	8b7a      	ldrh	r2, [r7, #26]
 801519c:	8bbb      	ldrh	r3, [r7, #28]
 801519e:	4293      	cmp	r3, r2
 80151a0:	bf28      	it	cs
 80151a2:	4613      	movcs	r3, r2
 80151a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80151a6:	797b      	ldrb	r3, [r7, #5]
 80151a8:	f003 0301 	and.w	r3, r3, #1
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d036      	beq.n	801521e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80151b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	8b3b      	ldrh	r3, [r7, #24]
 80151b8:	4413      	add	r3, r2
 80151ba:	b299      	uxth	r1, r3
 80151bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151be:	2b00      	cmp	r3, #0
 80151c0:	bf0c      	ite	eq
 80151c2:	2301      	moveq	r3, #1
 80151c4:	2300      	movne	r3, #0
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	f107 0012 	add.w	r0, r7, #18
 80151cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80151ce:	9302      	str	r3, [sp, #8]
 80151d0:	797b      	ldrb	r3, [r7, #5]
 80151d2:	9301      	str	r3, [sp, #4]
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	4603      	mov	r3, r0
 80151da:	2000      	movs	r0, #0
 80151dc:	f7ff fd8a 	bl	8014cf4 <tcp_pbuf_prealloc>
 80151e0:	6338      	str	r0, [r7, #48]	; 0x30
 80151e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 817e 	beq.w	80154e6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80151ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ec:	895b      	ldrh	r3, [r3, #10]
 80151ee:	8b3a      	ldrh	r2, [r7, #24]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d906      	bls.n	8015202 <tcp_write+0x35e>
 80151f4:	4b8f      	ldr	r3, [pc, #572]	; (8015434 <tcp_write+0x590>)
 80151f6:	f240 2241 	movw	r2, #577	; 0x241
 80151fa:	498f      	ldr	r1, [pc, #572]	; (8015438 <tcp_write+0x594>)
 80151fc:	488f      	ldr	r0, [pc, #572]	; (801543c <tcp_write+0x598>)
 80151fe:	f004 f82f 	bl	8019260 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8015202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015204:	685a      	ldr	r2, [r3, #4]
 8015206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801520a:	18d0      	adds	r0, r2, r3
 801520c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015210:	68ba      	ldr	r2, [r7, #8]
 8015212:	4413      	add	r3, r2
 8015214:	8b3a      	ldrh	r2, [r7, #24]
 8015216:	4619      	mov	r1, r3
 8015218:	f004 f80f 	bl	801923a <memcpy>
 801521c:	e02e      	b.n	801527c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801521e:	8a7b      	ldrh	r3, [r7, #18]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d006      	beq.n	8015232 <tcp_write+0x38e>
 8015224:	4b83      	ldr	r3, [pc, #524]	; (8015434 <tcp_write+0x590>)
 8015226:	f240 224b 	movw	r2, #587	; 0x24b
 801522a:	4985      	ldr	r1, [pc, #532]	; (8015440 <tcp_write+0x59c>)
 801522c:	4883      	ldr	r0, [pc, #524]	; (801543c <tcp_write+0x598>)
 801522e:	f004 f817 	bl	8019260 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015232:	8b3b      	ldrh	r3, [r7, #24]
 8015234:	2201      	movs	r2, #1
 8015236:	4619      	mov	r1, r3
 8015238:	2000      	movs	r0, #0
 801523a:	f7fa ffc3 	bl	80101c4 <pbuf_alloc>
 801523e:	6178      	str	r0, [r7, #20]
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	2b00      	cmp	r3, #0
 8015244:	f000 8151 	beq.w	80154ea <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8015248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	441a      	add	r2, r3
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015258:	b29b      	uxth	r3, r3
 801525a:	2200      	movs	r2, #0
 801525c:	4619      	mov	r1, r3
 801525e:	2000      	movs	r0, #0
 8015260:	f7fa ffb0 	bl	80101c4 <pbuf_alloc>
 8015264:	6338      	str	r0, [r7, #48]	; 0x30
 8015266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015268:	2b00      	cmp	r3, #0
 801526a:	d103      	bne.n	8015274 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801526c:	6978      	ldr	r0, [r7, #20]
 801526e:	f7fb fb1b 	bl	80108a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015272:	e13d      	b.n	80154f0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015274:	6979      	ldr	r1, [r7, #20]
 8015276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015278:	f7fb fbf0 	bl	8010a5c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801527c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801527e:	f7fb fbad 	bl	80109dc <pbuf_clen>
 8015282:	4603      	mov	r3, r0
 8015284:	461a      	mov	r2, r3
 8015286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801528a:	4413      	add	r3, r2
 801528c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015294:	2b09      	cmp	r3, #9
 8015296:	d805      	bhi.n	80152a4 <tcp_write+0x400>
 8015298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801529c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d903      	bls.n	80152ac <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80152a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a6:	f7fb faff 	bl	80108a8 <pbuf_free>
      goto memerr;
 80152aa:	e121      	b.n	80154f0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80152b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152b4:	441a      	add	r2, r3
 80152b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	4613      	mov	r3, r2
 80152be:	2200      	movs	r2, #0
 80152c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f7ff fc8e 	bl	8014be4 <tcp_create_segment>
 80152c8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80152ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	f000 810e 	beq.w	80154ee <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80152d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <tcp_write+0x43a>
      queue = seg;
 80152d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152da:	647b      	str	r3, [r7, #68]	; 0x44
 80152dc:	e00c      	b.n	80152f8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80152de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d106      	bne.n	80152f2 <tcp_write+0x44e>
 80152e4:	4b53      	ldr	r3, [pc, #332]	; (8015434 <tcp_write+0x590>)
 80152e6:	f240 2285 	movw	r2, #645	; 0x285
 80152ea:	4956      	ldr	r1, [pc, #344]	; (8015444 <tcp_write+0x5a0>)
 80152ec:	4853      	ldr	r0, [pc, #332]	; (801543c <tcp_write+0x598>)
 80152ee:	f003 ffb7 	bl	8019260 <iprintf>
      prev_seg->next = seg;
 80152f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152f6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80152f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152fa:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80152fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015300:	8b3b      	ldrh	r3, [r7, #24]
 8015302:	4413      	add	r3, r2
 8015304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801530c:	88fb      	ldrh	r3, [r7, #6]
 801530e:	429a      	cmp	r2, r3
 8015310:	f4ff af38 	bcc.w	8015184 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015316:	2b00      	cmp	r3, #0
 8015318:	d02c      	beq.n	8015374 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015320:	e01e      	b.n	8015360 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8015322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015324:	891a      	ldrh	r2, [r3, #8]
 8015326:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015328:	4413      	add	r3, r2
 801532a:	b29a      	uxth	r2, r3
 801532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801532e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d110      	bne.n	801535a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801533e:	8952      	ldrh	r2, [r2, #10]
 8015340:	4413      	add	r3, r2
 8015342:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015344:	68b9      	ldr	r1, [r7, #8]
 8015346:	4618      	mov	r0, r3
 8015348:	f003 ff77 	bl	801923a <memcpy>
        p->len += oversize_used;
 801534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801534e:	895a      	ldrh	r2, [r3, #10]
 8015350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015352:	4413      	add	r3, r2
 8015354:	b29a      	uxth	r2, r3
 8015356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015358:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015362:	2b00      	cmp	r3, #0
 8015364:	d1dd      	bne.n	8015322 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8015366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015368:	891a      	ldrh	r2, [r3, #8]
 801536a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801536c:	4413      	add	r3, r2
 801536e:	b29a      	uxth	r2, r3
 8015370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015372:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015374:	8a7a      	ldrh	r2, [r7, #18]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801537c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801537e:	2b00      	cmp	r3, #0
 8015380:	d018      	beq.n	80153b4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015384:	2b00      	cmp	r3, #0
 8015386:	d106      	bne.n	8015396 <tcp_write+0x4f2>
 8015388:	4b2a      	ldr	r3, [pc, #168]	; (8015434 <tcp_write+0x590>)
 801538a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801538e:	492e      	ldr	r1, [pc, #184]	; (8015448 <tcp_write+0x5a4>)
 8015390:	482a      	ldr	r0, [pc, #168]	; (801543c <tcp_write+0x598>)
 8015392:	f003 ff65 	bl	8019260 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801539c:	4618      	mov	r0, r3
 801539e:	f7fb fb5d 	bl	8010a5c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80153a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153a4:	891a      	ldrh	r2, [r3, #8]
 80153a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153a8:	891b      	ldrh	r3, [r3, #8]
 80153aa:	4413      	add	r3, r2
 80153ac:	b29a      	uxth	r2, r3
 80153ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153b0:	811a      	strh	r2, [r3, #8]
 80153b2:	e037      	b.n	8015424 <tcp_write+0x580>
  } else if (extendlen > 0) {
 80153b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d034      	beq.n	8015424 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80153ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d003      	beq.n	80153c8 <tcp_write+0x524>
 80153c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d106      	bne.n	80153d6 <tcp_write+0x532>
 80153c8:	4b1a      	ldr	r3, [pc, #104]	; (8015434 <tcp_write+0x590>)
 80153ca:	f240 22c1 	movw	r2, #705	; 0x2c1
 80153ce:	491f      	ldr	r1, [pc, #124]	; (801544c <tcp_write+0x5a8>)
 80153d0:	481a      	ldr	r0, [pc, #104]	; (801543c <tcp_write+0x598>)
 80153d2:	f003 ff45 	bl	8019260 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80153d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	62bb      	str	r3, [r7, #40]	; 0x28
 80153dc:	e009      	b.n	80153f2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 80153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e0:	891a      	ldrh	r2, [r3, #8]
 80153e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153e4:	4413      	add	r3, r2
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ea:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80153ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80153f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1f1      	bne.n	80153de <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80153fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fc:	891a      	ldrh	r2, [r3, #8]
 80153fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015400:	4413      	add	r3, r2
 8015402:	b29a      	uxth	r2, r3
 8015404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015406:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540a:	895a      	ldrh	r2, [r3, #10]
 801540c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801540e:	4413      	add	r3, r2
 8015410:	b29a      	uxth	r2, r3
 8015412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015414:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015418:	891a      	ldrh	r2, [r3, #8]
 801541a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801541c:	4413      	add	r3, r2
 801541e:	b29a      	uxth	r2, r3
 8015420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015422:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015426:	2b00      	cmp	r3, #0
 8015428:	d112      	bne.n	8015450 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801542e:	669a      	str	r2, [r3, #104]	; 0x68
 8015430:	e011      	b.n	8015456 <tcp_write+0x5b2>
 8015432:	bf00      	nop
 8015434:	0801c0ec 	.word	0x0801c0ec
 8015438:	0801c320 	.word	0x0801c320
 801543c:	0801c174 	.word	0x0801c174
 8015440:	0801c360 	.word	0x0801c360
 8015444:	0801c370 	.word	0x0801c370
 8015448:	0801c384 	.word	0x0801c384
 801544c:	0801c3bc 	.word	0x0801c3bc
  } else {
    last_unsent->next = queue;
 8015450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015454:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801545a:	88fb      	ldrh	r3, [r7, #6]
 801545c:	441a      	add	r2, r3
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015468:	88fb      	ldrh	r3, [r7, #6]
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	b29a      	uxth	r2, r3
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801547a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015484:	2b00      	cmp	r3, #0
 8015486:	d00e      	beq.n	80154a6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801548c:	2b00      	cmp	r3, #0
 801548e:	d10a      	bne.n	80154a6 <tcp_write+0x602>
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015494:	2b00      	cmp	r3, #0
 8015496:	d106      	bne.n	80154a6 <tcp_write+0x602>
 8015498:	4b2c      	ldr	r3, [pc, #176]	; (801554c <tcp_write+0x6a8>)
 801549a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801549e:	492c      	ldr	r1, [pc, #176]	; (8015550 <tcp_write+0x6ac>)
 80154a0:	482c      	ldr	r0, [pc, #176]	; (8015554 <tcp_write+0x6b0>)
 80154a2:	f003 fedd 	bl	8019260 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80154a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d016      	beq.n	80154da <tcp_write+0x636>
 80154ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d012      	beq.n	80154da <tcp_write+0x636>
 80154b4:	797b      	ldrb	r3, [r7, #5]
 80154b6:	f003 0302 	and.w	r3, r3, #2
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d10d      	bne.n	80154da <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80154be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154c0:	68db      	ldr	r3, [r3, #12]
 80154c2:	899b      	ldrh	r3, [r3, #12]
 80154c4:	b29c      	uxth	r4, r3
 80154c6:	2008      	movs	r0, #8
 80154c8:	f7f9 ffd4 	bl	800f474 <lwip_htons>
 80154cc:	4603      	mov	r3, r0
 80154ce:	461a      	mov	r2, r3
 80154d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	4322      	orrs	r2, r4
 80154d6:	b292      	uxth	r2, r2
 80154d8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80154da:	2300      	movs	r3, #0
 80154dc:	e031      	b.n	8015542 <tcp_write+0x69e>
          goto memerr;
 80154de:	bf00      	nop
 80154e0:	e006      	b.n	80154f0 <tcp_write+0x64c>
            goto memerr;
 80154e2:	bf00      	nop
 80154e4:	e004      	b.n	80154f0 <tcp_write+0x64c>
        goto memerr;
 80154e6:	bf00      	nop
 80154e8:	e002      	b.n	80154f0 <tcp_write+0x64c>
        goto memerr;
 80154ea:	bf00      	nop
 80154ec:	e000      	b.n	80154f0 <tcp_write+0x64c>
      goto memerr;
 80154ee:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	7e9b      	ldrb	r3, [r3, #26]
 80154f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80154f8:	b2da      	uxtb	r2, r3
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80154fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015500:	2b00      	cmp	r3, #0
 8015502:	d002      	beq.n	801550a <tcp_write+0x666>
    pbuf_free(concat_p);
 8015504:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015506:	f7fb f9cf 	bl	80108a8 <pbuf_free>
  }
  if (queue != NULL) {
 801550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801550c:	2b00      	cmp	r3, #0
 801550e:	d002      	beq.n	8015516 <tcp_write+0x672>
    tcp_segs_free(queue);
 8015510:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015512:	f7fc fcce 	bl	8011eb2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801551c:	2b00      	cmp	r3, #0
 801551e:	d00e      	beq.n	801553e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015524:	2b00      	cmp	r3, #0
 8015526:	d10a      	bne.n	801553e <tcp_write+0x69a>
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801552c:	2b00      	cmp	r3, #0
 801552e:	d106      	bne.n	801553e <tcp_write+0x69a>
 8015530:	4b06      	ldr	r3, [pc, #24]	; (801554c <tcp_write+0x6a8>)
 8015532:	f240 3202 	movw	r2, #770	; 0x302
 8015536:	4906      	ldr	r1, [pc, #24]	; (8015550 <tcp_write+0x6ac>)
 8015538:	4806      	ldr	r0, [pc, #24]	; (8015554 <tcp_write+0x6b0>)
 801553a:	f003 fe91 	bl	8019260 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801553e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015542:	4618      	mov	r0, r3
 8015544:	375c      	adds	r7, #92	; 0x5c
 8015546:	46bd      	mov	sp, r7
 8015548:	bd90      	pop	{r4, r7, pc}
 801554a:	bf00      	nop
 801554c:	0801c0ec 	.word	0x0801c0ec
 8015550:	0801c3f4 	.word	0x0801c3f4
 8015554:	0801c174 	.word	0x0801c174

08015558 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b08a      	sub	sp, #40	; 0x28
 801555c:	af02      	add	r7, sp, #8
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	460b      	mov	r3, r1
 8015562:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015564:	2300      	movs	r3, #0
 8015566:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801556c:	78fb      	ldrb	r3, [r7, #3]
 801556e:	f003 0303 	and.w	r3, r3, #3
 8015572:	2b00      	cmp	r3, #0
 8015574:	d106      	bne.n	8015584 <tcp_enqueue_flags+0x2c>
 8015576:	4b6f      	ldr	r3, [pc, #444]	; (8015734 <tcp_enqueue_flags+0x1dc>)
 8015578:	f240 321b 	movw	r2, #795	; 0x31b
 801557c:	496e      	ldr	r1, [pc, #440]	; (8015738 <tcp_enqueue_flags+0x1e0>)
 801557e:	486f      	ldr	r0, [pc, #444]	; (801573c <tcp_enqueue_flags+0x1e4>)
 8015580:	f003 fe6e 	bl	8019260 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801558a:	2b08      	cmp	r3, #8
 801558c:	d806      	bhi.n	801559c <tcp_enqueue_flags+0x44>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015594:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015598:	4293      	cmp	r3, r2
 801559a:	d90e      	bls.n	80155ba <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 801559c:	78fb      	ldrb	r3, [r7, #3]
 801559e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d109      	bne.n	80155ba <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	7e9b      	ldrb	r3, [r3, #26]
 80155aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80155ae:	b2da      	uxtb	r2, r3
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80155b4:	f04f 33ff 	mov.w	r3, #4294967295
 80155b8:	e0b7      	b.n	801572a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80155ba:	78fb      	ldrb	r3, [r7, #3]
 80155bc:	f003 0302 	and.w	r3, r3, #2
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d001      	beq.n	80155c8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80155c4:	2301      	movs	r3, #1
 80155c6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80155c8:	7ffb      	ldrb	r3, [r7, #31]
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	f003 0304 	and.w	r3, r3, #4
 80155d2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80155d4:	7dfb      	ldrb	r3, [r7, #23]
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	2200      	movs	r2, #0
 80155da:	4619      	mov	r1, r3
 80155dc:	2000      	movs	r0, #0
 80155de:	f7fa fdf1 	bl	80101c4 <pbuf_alloc>
 80155e2:	6138      	str	r0, [r7, #16]
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d109      	bne.n	80155fe <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7e9b      	ldrb	r3, [r3, #26]
 80155ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80155f2:	b2da      	uxtb	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295
 80155fc:	e095      	b.n	801572a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	895a      	ldrh	r2, [r3, #10]
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	b29b      	uxth	r3, r3
 8015606:	429a      	cmp	r2, r3
 8015608:	d206      	bcs.n	8015618 <tcp_enqueue_flags+0xc0>
 801560a:	4b4a      	ldr	r3, [pc, #296]	; (8015734 <tcp_enqueue_flags+0x1dc>)
 801560c:	f240 3241 	movw	r2, #833	; 0x341
 8015610:	494b      	ldr	r1, [pc, #300]	; (8015740 <tcp_enqueue_flags+0x1e8>)
 8015612:	484a      	ldr	r0, [pc, #296]	; (801573c <tcp_enqueue_flags+0x1e4>)
 8015614:	f003 fe24 	bl	8019260 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801561c:	78fa      	ldrb	r2, [r7, #3]
 801561e:	7ffb      	ldrb	r3, [r7, #31]
 8015620:	9300      	str	r3, [sp, #0]
 8015622:	460b      	mov	r3, r1
 8015624:	6939      	ldr	r1, [r7, #16]
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f7ff fadc 	bl	8014be4 <tcp_create_segment>
 801562c:	60f8      	str	r0, [r7, #12]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d109      	bne.n	8015648 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	7e9b      	ldrb	r3, [r3, #26]
 8015638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801563c:	b2da      	uxtb	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015642:	f04f 33ff 	mov.w	r3, #4294967295
 8015646:	e070      	b.n	801572a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	f003 0303 	and.w	r3, r3, #3
 8015650:	2b00      	cmp	r3, #0
 8015652:	d006      	beq.n	8015662 <tcp_enqueue_flags+0x10a>
 8015654:	4b37      	ldr	r3, [pc, #220]	; (8015734 <tcp_enqueue_flags+0x1dc>)
 8015656:	f240 3249 	movw	r2, #841	; 0x349
 801565a:	493a      	ldr	r1, [pc, #232]	; (8015744 <tcp_enqueue_flags+0x1ec>)
 801565c:	4837      	ldr	r0, [pc, #220]	; (801573c <tcp_enqueue_flags+0x1e4>)
 801565e:	f003 fdff 	bl	8019260 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	891b      	ldrh	r3, [r3, #8]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d006      	beq.n	8015678 <tcp_enqueue_flags+0x120>
 801566a:	4b32      	ldr	r3, [pc, #200]	; (8015734 <tcp_enqueue_flags+0x1dc>)
 801566c:	f240 324a 	movw	r2, #842	; 0x34a
 8015670:	4935      	ldr	r1, [pc, #212]	; (8015748 <tcp_enqueue_flags+0x1f0>)
 8015672:	4832      	ldr	r0, [pc, #200]	; (801573c <tcp_enqueue_flags+0x1e4>)
 8015674:	f003 fdf4 	bl	8019260 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801567c:	2b00      	cmp	r3, #0
 801567e:	d103      	bne.n	8015688 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	669a      	str	r2, [r3, #104]	; 0x68
 8015686:	e00d      	b.n	80156a4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801568c:	61bb      	str	r3, [r7, #24]
 801568e:	e002      	b.n	8015696 <tcp_enqueue_flags+0x13e>
 8015690:	69bb      	ldr	r3, [r7, #24]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	61bb      	str	r3, [r7, #24]
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d1f8      	bne.n	8015690 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80156ac:	78fb      	ldrb	r3, [r7, #3]
 80156ae:	f003 0302 	and.w	r3, r3, #2
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d104      	bne.n	80156c0 <tcp_enqueue_flags+0x168>
 80156b6:	78fb      	ldrb	r3, [r7, #3]
 80156b8:	f003 0301 	and.w	r3, r3, #1
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d004      	beq.n	80156ca <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156c4:	1c5a      	adds	r2, r3, #1
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80156ca:	78fb      	ldrb	r3, [r7, #3]
 80156cc:	f003 0301 	and.w	r3, r3, #1
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d006      	beq.n	80156e2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7e9b      	ldrb	r3, [r3, #26]
 80156d8:	f043 0320 	orr.w	r3, r3, #32
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fb f978 	bl	80109dc <pbuf_clen>
 80156ec:	4603      	mov	r3, r0
 80156ee:	461a      	mov	r2, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80156f6:	4413      	add	r3, r2
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015706:	2b00      	cmp	r3, #0
 8015708:	d00e      	beq.n	8015728 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801570e:	2b00      	cmp	r3, #0
 8015710:	d10a      	bne.n	8015728 <tcp_enqueue_flags+0x1d0>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015716:	2b00      	cmp	r3, #0
 8015718:	d106      	bne.n	8015728 <tcp_enqueue_flags+0x1d0>
 801571a:	4b06      	ldr	r3, [pc, #24]	; (8015734 <tcp_enqueue_flags+0x1dc>)
 801571c:	f240 326d 	movw	r2, #877	; 0x36d
 8015720:	490a      	ldr	r1, [pc, #40]	; (801574c <tcp_enqueue_flags+0x1f4>)
 8015722:	4806      	ldr	r0, [pc, #24]	; (801573c <tcp_enqueue_flags+0x1e4>)
 8015724:	f003 fd9c 	bl	8019260 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015728:	2300      	movs	r3, #0
}
 801572a:	4618      	mov	r0, r3
 801572c:	3720      	adds	r7, #32
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	0801c0ec 	.word	0x0801c0ec
 8015738:	0801c414 	.word	0x0801c414
 801573c:	0801c174 	.word	0x0801c174
 8015740:	0801c46c 	.word	0x0801c46c
 8015744:	0801c4a8 	.word	0x0801c4a8
 8015748:	0801c4c0 	.word	0x0801c4c0
 801574c:	0801c4ec 	.word	0x0801c4ec

08015750 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015750:	b590      	push	{r4, r7, lr}
 8015752:	b08b      	sub	sp, #44	; 0x2c
 8015754:	af04      	add	r7, sp, #16
 8015756:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8015758:	2300      	movs	r3, #0
 801575a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801575c:	7dbb      	ldrb	r3, [r7, #22]
 801575e:	b29c      	uxth	r4, r3
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015764:	4618      	mov	r0, r3
 8015766:	f7f9 fe93 	bl	800f490 <lwip_htonl>
 801576a:	4603      	mov	r3, r0
 801576c:	2200      	movs	r2, #0
 801576e:	4621      	mov	r1, r4
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f7ff f97b 	bl	8014a6c <tcp_output_alloc_header>
 8015776:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d109      	bne.n	8015792 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	7e9b      	ldrb	r3, [r3, #26]
 8015782:	f043 0303 	orr.w	r3, r3, #3
 8015786:	b2da      	uxtb	r2, r3
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801578c:	f06f 0301 	mvn.w	r3, #1
 8015790:	e036      	b.n	8015800 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	3304      	adds	r3, #4
 8015796:	4618      	mov	r0, r3
 8015798:	f002 f9c0 	bl	8017b1c <ip4_route>
 801579c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d102      	bne.n	80157aa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80157a4:	23fc      	movs	r3, #252	; 0xfc
 80157a6:	75fb      	strb	r3, [r7, #23]
 80157a8:	e012      	b.n	80157d0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80157aa:	6879      	ldr	r1, [r7, #4]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	1d18      	adds	r0, r3, #4
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	7a9c      	ldrb	r4, [r3, #10]
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	7a5b      	ldrb	r3, [r3, #9]
 80157b8:	68fa      	ldr	r2, [r7, #12]
 80157ba:	9202      	str	r2, [sp, #8]
 80157bc:	2206      	movs	r2, #6
 80157be:	9201      	str	r2, [sp, #4]
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	4623      	mov	r3, r4
 80157c4:	4602      	mov	r2, r0
 80157c6:	6938      	ldr	r0, [r7, #16]
 80157c8:	f002 fb50 	bl	8017e6c <ip4_output_if>
 80157cc:	4603      	mov	r3, r0
 80157ce:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80157d0:	6938      	ldr	r0, [r7, #16]
 80157d2:	f7fb f869 	bl	80108a8 <pbuf_free>

  if (err != ERR_OK) {
 80157d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d007      	beq.n	80157ee <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	7e9b      	ldrb	r3, [r3, #26]
 80157e2:	f043 0303 	orr.w	r3, r3, #3
 80157e6:	b2da      	uxtb	r2, r3
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	769a      	strb	r2, [r3, #26]
 80157ec:	e006      	b.n	80157fc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	7e9b      	ldrb	r3, [r3, #26]
 80157f2:	f023 0303 	bic.w	r3, r3, #3
 80157f6:	b2da      	uxtb	r2, r3
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80157fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015800:	4618      	mov	r0, r3
 8015802:	371c      	adds	r7, #28
 8015804:	46bd      	mov	sp, r7
 8015806:	bd90      	pop	{r4, r7, pc}

08015808 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015808:	b5b0      	push	{r4, r5, r7, lr}
 801580a:	b08a      	sub	sp, #40	; 0x28
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	7d1b      	ldrb	r3, [r3, #20]
 8015814:	2b01      	cmp	r3, #1
 8015816:	d106      	bne.n	8015826 <tcp_output+0x1e>
 8015818:	4b9b      	ldr	r3, [pc, #620]	; (8015a88 <tcp_output+0x280>)
 801581a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801581e:	499b      	ldr	r1, [pc, #620]	; (8015a8c <tcp_output+0x284>)
 8015820:	489b      	ldr	r0, [pc, #620]	; (8015a90 <tcp_output+0x288>)
 8015822:	f003 fd1d 	bl	8019260 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015826:	4b9b      	ldr	r3, [pc, #620]	; (8015a94 <tcp_output+0x28c>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	429a      	cmp	r2, r3
 801582e:	d101      	bne.n	8015834 <tcp_output+0x2c>
    return ERR_OK;
 8015830:	2300      	movs	r3, #0
 8015832:	e1cf      	b.n	8015bd4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015840:	429a      	cmp	r2, r3
 8015842:	d203      	bcs.n	801584c <tcp_output+0x44>
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801584a:	e002      	b.n	8015852 <tcp_output+0x4a>
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015852:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015858:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	7e9b      	ldrb	r3, [r3, #26]
 801585e:	f003 0302 	and.w	r3, r3, #2
 8015862:	2b00      	cmp	r3, #0
 8015864:	d017      	beq.n	8015896 <tcp_output+0x8e>
 8015866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015868:	2b00      	cmp	r3, #0
 801586a:	d00f      	beq.n	801588c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	4618      	mov	r0, r3
 8015874:	f7f9 fe0c 	bl	800f490 <lwip_htonl>
 8015878:	4602      	mov	r2, r0
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801587e:	1ad3      	subs	r3, r2, r3
 8015880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015882:	8912      	ldrh	r2, [r2, #8]
 8015884:	4413      	add	r3, r2
     (seg == NULL ||
 8015886:	69ba      	ldr	r2, [r7, #24]
 8015888:	429a      	cmp	r2, r3
 801588a:	d204      	bcs.n	8015896 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f7ff ff5f 	bl	8015750 <tcp_send_empty_ack>
 8015892:	4603      	mov	r3, r0
 8015894:	e19e      	b.n	8015bd4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801589a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d007      	beq.n	80158b2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80158a2:	e002      	b.n	80158aa <tcp_output+0xa2>
 80158a4:	6a3b      	ldr	r3, [r7, #32]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	623b      	str	r3, [r7, #32]
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1f8      	bne.n	80158a4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	3304      	adds	r3, #4
 80158b6:	4618      	mov	r0, r3
 80158b8:	f002 f930 	bl	8017b1c <ip4_route>
 80158bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d102      	bne.n	80158ca <tcp_output+0xc2>
    return ERR_RTE;
 80158c4:	f06f 0303 	mvn.w	r3, #3
 80158c8:	e184      	b.n	8015bd4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d003      	beq.n	80158d8 <tcp_output+0xd0>
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d111      	bne.n	80158fc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d002      	beq.n	80158e4 <tcp_output+0xdc>
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	3304      	adds	r3, #4
 80158e2:	e000      	b.n	80158e6 <tcp_output+0xde>
 80158e4:	2300      	movs	r3, #0
 80158e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d102      	bne.n	80158f4 <tcp_output+0xec>
      return ERR_RTE;
 80158ee:	f06f 0303 	mvn.w	r3, #3
 80158f2:	e16f      	b.n	8015bd4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80158fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 813e 	beq.w	8015b80 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	4618      	mov	r0, r3
 801590c:	f7f9 fdc0 	bl	800f490 <lwip_htonl>
 8015910:	4602      	mov	r2, r0
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015916:	1ad3      	subs	r3, r2, r3
 8015918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801591a:	8912      	ldrh	r2, [r2, #8]
 801591c:	4413      	add	r3, r2
  if (seg != NULL &&
 801591e:	69ba      	ldr	r2, [r7, #24]
 8015920:	429a      	cmp	r2, r3
 8015922:	f080 812d 	bcs.w	8015b80 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015926:	69bb      	ldr	r3, [r7, #24]
 8015928:	2b00      	cmp	r3, #0
 801592a:	f000 8129 	beq.w	8015b80 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015934:	461a      	mov	r2, r3
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	4293      	cmp	r3, r2
 801593a:	f040 8121 	bne.w	8015b80 <tcp_output+0x378>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015942:	2b00      	cmp	r3, #0
 8015944:	f040 811c 	bne.w	8015b80 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801594e:	2b00      	cmp	r3, #0
 8015950:	f040 812b 	bne.w	8015baa <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2200      	movs	r2, #0
 8015958:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2201      	movs	r2, #1
 8015960:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8015964:	e121      	b.n	8015baa <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	899b      	ldrh	r3, [r3, #12]
 801596c:	b29b      	uxth	r3, r3
 801596e:	4618      	mov	r0, r3
 8015970:	f7f9 fd80 	bl	800f474 <lwip_htons>
 8015974:	4603      	mov	r3, r0
 8015976:	f003 0304 	and.w	r3, r3, #4
 801597a:	2b00      	cmp	r3, #0
 801597c:	d006      	beq.n	801598c <tcp_output+0x184>
 801597e:	4b42      	ldr	r3, [pc, #264]	; (8015a88 <tcp_output+0x280>)
 8015980:	f240 4246 	movw	r2, #1094	; 0x446
 8015984:	4944      	ldr	r1, [pc, #272]	; (8015a98 <tcp_output+0x290>)
 8015986:	4842      	ldr	r0, [pc, #264]	; (8015a90 <tcp_output+0x288>)
 8015988:	f003 fc6a 	bl	8019260 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015990:	2b00      	cmp	r3, #0
 8015992:	d01f      	beq.n	80159d4 <tcp_output+0x1cc>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	7e9b      	ldrb	r3, [r3, #26]
 8015998:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801599c:	2b00      	cmp	r3, #0
 801599e:	d119      	bne.n	80159d4 <tcp_output+0x1cc>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00b      	beq.n	80159c0 <tcp_output+0x1b8>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d110      	bne.n	80159d4 <tcp_output+0x1cc>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80159b6:	891a      	ldrh	r2, [r3, #8]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159bc:	429a      	cmp	r2, r3
 80159be:	d209      	bcs.n	80159d4 <tcp_output+0x1cc>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d004      	beq.n	80159d4 <tcp_output+0x1cc>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80159d0:	2b08      	cmp	r3, #8
 80159d2:	d901      	bls.n	80159d8 <tcp_output+0x1d0>
 80159d4:	2301      	movs	r3, #1
 80159d6:	e000      	b.n	80159da <tcp_output+0x1d2>
 80159d8:	2300      	movs	r3, #0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d106      	bne.n	80159ec <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	7e9b      	ldrb	r3, [r3, #26]
 80159e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	f000 80e1 	beq.w	8015bae <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	7d1b      	ldrb	r3, [r3, #20]
 80159f0:	2b02      	cmp	r3, #2
 80159f2:	d00d      	beq.n	8015a10 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	899b      	ldrh	r3, [r3, #12]
 80159fa:	b29c      	uxth	r4, r3
 80159fc:	2010      	movs	r0, #16
 80159fe:	f7f9 fd39 	bl	800f474 <lwip_htons>
 8015a02:	4603      	mov	r3, r0
 8015a04:	461a      	mov	r2, r3
 8015a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	4322      	orrs	r2, r4
 8015a0c:	b292      	uxth	r2, r2
 8015a0e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015a10:	697a      	ldr	r2, [r7, #20]
 8015a12:	6879      	ldr	r1, [r7, #4]
 8015a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a16:	f000 f8e1 	bl	8015bdc <tcp_output_segment>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d009      	beq.n	8015a3a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	7e9b      	ldrb	r3, [r3, #26]
 8015a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a2e:	b2da      	uxtb	r2, r3
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	769a      	strb	r2, [r3, #26]
      return err;
 8015a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a38:	e0cc      	b.n	8015bd4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	7d1b      	ldrb	r3, [r3, #20]
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	d006      	beq.n	8015a58 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	7e9b      	ldrb	r3, [r3, #26]
 8015a4e:	f023 0303 	bic.w	r3, r3, #3
 8015a52:	b2da      	uxtb	r2, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5a:	68db      	ldr	r3, [r3, #12]
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7f9 fd16 	bl	800f490 <lwip_htonl>
 8015a64:	4604      	mov	r4, r0
 8015a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a68:	891b      	ldrh	r3, [r3, #8]
 8015a6a:	461d      	mov	r5, r3
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	899b      	ldrh	r3, [r3, #12]
 8015a72:	b29b      	uxth	r3, r3
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7f9 fcfd 	bl	800f474 <lwip_htons>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	f003 0303 	and.w	r3, r3, #3
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00b      	beq.n	8015a9c <tcp_output+0x294>
 8015a84:	2301      	movs	r3, #1
 8015a86:	e00a      	b.n	8015a9e <tcp_output+0x296>
 8015a88:	0801c0ec 	.word	0x0801c0ec
 8015a8c:	0801c514 	.word	0x0801c514
 8015a90:	0801c174 	.word	0x0801c174
 8015a94:	200101e0 	.word	0x200101e0
 8015a98:	0801c53c 	.word	0x0801c53c
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	442b      	add	r3, r5
 8015aa0:	4423      	add	r3, r4
 8015aa2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	1ad3      	subs	r3, r2, r3
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	da02      	bge.n	8015ab6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab8:	891b      	ldrh	r3, [r3, #8]
 8015aba:	461c      	mov	r4, r3
 8015abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015abe:	68db      	ldr	r3, [r3, #12]
 8015ac0:	899b      	ldrh	r3, [r3, #12]
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7f9 fcd5 	bl	800f474 <lwip_htons>
 8015aca:	4603      	mov	r3, r0
 8015acc:	f003 0303 	and.w	r3, r3, #3
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d001      	beq.n	8015ad8 <tcp_output+0x2d0>
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e000      	b.n	8015ada <tcp_output+0x2d2>
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4423      	add	r3, r4
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d049      	beq.n	8015b74 <tcp_output+0x36c>
      seg->next = NULL;
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d105      	bne.n	8015afa <tcp_output+0x2f2>
        pcb->unacked = seg;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015af2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af6:	623b      	str	r3, [r7, #32]
 8015af8:	e03f      	b.n	8015b7a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7f9 fcc5 	bl	800f490 <lwip_htonl>
 8015b06:	4604      	mov	r4, r0
 8015b08:	6a3b      	ldr	r3, [r7, #32]
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7f9 fcbe 	bl	800f490 <lwip_htonl>
 8015b14:	4603      	mov	r3, r0
 8015b16:	1ae3      	subs	r3, r4, r3
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	da24      	bge.n	8015b66 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	336c      	adds	r3, #108	; 0x6c
 8015b20:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b22:	e002      	b.n	8015b2a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b2a:	69fb      	ldr	r3, [r7, #28]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d011      	beq.n	8015b56 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	68db      	ldr	r3, [r3, #12]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f9 fca8 	bl	800f490 <lwip_htonl>
 8015b40:	4604      	mov	r4, r0
 8015b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7f9 fca1 	bl	800f490 <lwip_htonl>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	dbe6      	blt.n	8015b24 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8015b56:	69fb      	ldr	r3, [r7, #28]
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b62:	601a      	str	r2, [r3, #0]
 8015b64:	e009      	b.n	8015b7a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b66:	6a3b      	ldr	r3, [r7, #32]
 8015b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b6a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015b6c:	6a3b      	ldr	r3, [r7, #32]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	623b      	str	r3, [r7, #32]
 8015b72:	e002      	b.n	8015b7a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b76:	f7fc f9b0 	bl	8011eda <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d015      	beq.n	8015bb2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7f9 fc7f 	bl	800f490 <lwip_htonl>
 8015b92:	4602      	mov	r2, r0
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b9c:	8912      	ldrh	r2, [r2, #8]
 8015b9e:	4413      	add	r3, r2
  while (seg != NULL &&
 8015ba0:	69ba      	ldr	r2, [r7, #24]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	f4bf aedf 	bcs.w	8015966 <tcp_output+0x15e>
  }
output_done:
 8015ba8:	e003      	b.n	8015bb2 <tcp_output+0x3aa>
    goto output_done;
 8015baa:	bf00      	nop
 8015bac:	e002      	b.n	8015bb4 <tcp_output+0x3ac>
      break;
 8015bae:	bf00      	nop
 8015bb0:	e000      	b.n	8015bb4 <tcp_output+0x3ac>
output_done:
 8015bb2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d103      	bne.n	8015bc4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	7e9b      	ldrb	r3, [r3, #26]
 8015bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bcc:	b2da      	uxtb	r2, r3
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3728      	adds	r7, #40	; 0x28
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bdb0      	pop	{r4, r5, r7, pc}

08015bdc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015bdc:	b5b0      	push	{r4, r5, r7, lr}
 8015bde:	b08c      	sub	sp, #48	; 0x30
 8015be0:	af04      	add	r7, sp, #16
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	685b      	ldr	r3, [r3, #4]
 8015bec:	89db      	ldrh	r3, [r3, #14]
 8015bee:	2b01      	cmp	r3, #1
 8015bf0:	d001      	beq.n	8015bf6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	e08b      	b.n	8015d0e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	68dc      	ldr	r4, [r3, #12]
 8015bfe:	4610      	mov	r0, r2
 8015c00:	f7f9 fc46 	bl	800f490 <lwip_htonl>
 8015c04:	4603      	mov	r3, r0
 8015c06:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	68dc      	ldr	r4, [r3, #12]
 8015c10:	4610      	mov	r0, r2
 8015c12:	f7f9 fc2f 	bl	800f474 <lwip_htons>
 8015c16:	4603      	mov	r3, r0
 8015c18:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c1e:	68ba      	ldr	r2, [r7, #8]
 8015c20:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015c22:	441a      	add	r2, r3
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	3314      	adds	r3, #20
 8015c2e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	7a9b      	ldrb	r3, [r3, #10]
 8015c34:	f003 0301 	and.w	r3, r3, #1
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d014      	beq.n	8015c66 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	3304      	adds	r3, #4
 8015c40:	4619      	mov	r1, r3
 8015c42:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015c46:	f7fc fc73 	bl	8012530 <tcp_eff_send_mss_impl>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015c4e:	8b7b      	ldrh	r3, [r7, #26]
 8015c50:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7f9 fc1b 	bl	800f490 <lwip_htonl>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	69fb      	ldr	r3, [r7, #28]
 8015c5e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	3304      	adds	r3, #4
 8015c64:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	da02      	bge.n	8015c76 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	2200      	movs	r2, #0
 8015c74:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d10c      	bne.n	8015c98 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8015c7e:	4b26      	ldr	r3, [pc, #152]	; (8015d18 <tcp_output_segment+0x13c>)
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	68db      	ldr	r3, [r3, #12]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7f9 fbff 	bl	800f490 <lwip_htonl>
 8015c92:	4602      	mov	r2, r0
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	1ad3      	subs	r3, r2, r3
 8015ca6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	8959      	ldrh	r1, [r3, #10]
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	8b3a      	ldrh	r2, [r7, #24]
 8015cb4:	1a8a      	subs	r2, r1, r2
 8015cb6:	b292      	uxth	r2, r2
 8015cb8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	8919      	ldrh	r1, [r3, #8]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	8b3a      	ldrh	r2, [r7, #24]
 8015cc6:	1a8a      	subs	r2, r1, r2
 8015cc8:	b292      	uxth	r2, r2
 8015cca:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	68fa      	ldr	r2, [r7, #12]
 8015cd2:	68d2      	ldr	r2, [r2, #12]
 8015cd4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	68db      	ldr	r3, [r3, #12]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	741a      	strb	r2, [r3, #16]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	6858      	ldr	r0, [r3, #4]
 8015ce6:	68b9      	ldr	r1, [r7, #8]
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	1d1c      	adds	r4, r3, #4
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	7a9d      	ldrb	r5, [r3, #10]
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	7a5b      	ldrb	r3, [r3, #9]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	9202      	str	r2, [sp, #8]
 8015cf8:	2206      	movs	r2, #6
 8015cfa:	9201      	str	r2, [sp, #4]
 8015cfc:	9300      	str	r3, [sp, #0]
 8015cfe:	462b      	mov	r3, r5
 8015d00:	4622      	mov	r2, r4
 8015d02:	f002 f8b3 	bl	8017e6c <ip4_output_if>
 8015d06:	4603      	mov	r3, r0
 8015d08:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8015d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3720      	adds	r7, #32
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bdb0      	pop	{r4, r5, r7, pc}
 8015d16:	bf00      	nop
 8015d18:	200101d0 	.word	0x200101d0

08015d1c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b08c      	sub	sp, #48	; 0x30
 8015d20:	af04      	add	r7, sp, #16
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
 8015d28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	2114      	movs	r1, #20
 8015d2e:	2001      	movs	r0, #1
 8015d30:	f7fa fa48 	bl	80101c4 <pbuf_alloc>
 8015d34:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d05b      	beq.n	8015df4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	895b      	ldrh	r3, [r3, #10]
 8015d40:	2b13      	cmp	r3, #19
 8015d42:	d806      	bhi.n	8015d52 <tcp_rst+0x36>
 8015d44:	4b2d      	ldr	r3, [pc, #180]	; (8015dfc <tcp_rst+0xe0>)
 8015d46:	f240 524d 	movw	r2, #1357	; 0x54d
 8015d4a:	492d      	ldr	r1, [pc, #180]	; (8015e00 <tcp_rst+0xe4>)
 8015d4c:	482d      	ldr	r0, [pc, #180]	; (8015e04 <tcp_rst+0xe8>)
 8015d4e:	f003 fa87 	bl	8019260 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8015d58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f9 fb8a 	bl	800f474 <lwip_htons>
 8015d60:	4603      	mov	r3, r0
 8015d62:	461a      	mov	r2, r3
 8015d64:	69bb      	ldr	r3, [r7, #24]
 8015d66:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8015d68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7f9 fb82 	bl	800f474 <lwip_htons>
 8015d70:	4603      	mov	r3, r0
 8015d72:	461a      	mov	r2, r3
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7f9 fb89 	bl	800f490 <lwip_htonl>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	69bb      	ldr	r3, [r7, #24]
 8015d82:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8015d84:	68b8      	ldr	r0, [r7, #8]
 8015d86:	f7f9 fb83 	bl	800f490 <lwip_htonl>
 8015d8a:	4602      	mov	r2, r0
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8015d90:	f245 0014 	movw	r0, #20500	; 0x5014
 8015d94:	f7f9 fb6e 	bl	800f474 <lwip_htons>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8015da0:	69bb      	ldr	r3, [r7, #24]
 8015da2:	2200      	movs	r2, #0
 8015da4:	f042 0208 	orr.w	r2, r2, #8
 8015da8:	739a      	strb	r2, [r3, #14]
 8015daa:	2200      	movs	r2, #0
 8015dac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8015db0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	2200      	movs	r2, #0
 8015db6:	741a      	strb	r2, [r3, #16]
 8015db8:	2200      	movs	r2, #0
 8015dba:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	749a      	strb	r2, [r3, #18]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8015dc6:	6838      	ldr	r0, [r7, #0]
 8015dc8:	f001 fea8 	bl	8017b1c <ip4_route>
 8015dcc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d00b      	beq.n	8015dec <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	9302      	str	r3, [sp, #8]
 8015dd8:	2306      	movs	r3, #6
 8015dda:	9301      	str	r3, [sp, #4]
 8015ddc:	2300      	movs	r3, #0
 8015dde:	9300      	str	r3, [sp, #0]
 8015de0:	23ff      	movs	r3, #255	; 0xff
 8015de2:	683a      	ldr	r2, [r7, #0]
 8015de4:	6879      	ldr	r1, [r7, #4]
 8015de6:	69f8      	ldr	r0, [r7, #28]
 8015de8:	f002 f840 	bl	8017e6c <ip4_output_if>
  }
  pbuf_free(p);
 8015dec:	69f8      	ldr	r0, [r7, #28]
 8015dee:	f7fa fd5b 	bl	80108a8 <pbuf_free>
 8015df2:	e000      	b.n	8015df6 <tcp_rst+0xda>
    return;
 8015df4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015df6:	3720      	adds	r7, #32
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}
 8015dfc:	0801c0ec 	.word	0x0801c0ec
 8015e00:	0801c144 	.word	0x0801c144
 8015e04:	0801c174 	.word	0x0801c174

08015e08 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d029      	beq.n	8015e6c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e1c:	60fb      	str	r3, [r7, #12]
 8015e1e:	e002      	b.n	8015e26 <tcp_rexmit_rto+0x1e>
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	60fb      	str	r3, [r7, #12]
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1f8      	bne.n	8015e20 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2200      	movs	r2, #0
 8015e42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e4a:	2bff      	cmp	r3, #255	; 0xff
 8015e4c:	d007      	beq.n	8015e5e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e54:	3301      	adds	r3, #1
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2200      	movs	r2, #0
 8015e62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f7ff fccf 	bl	8015808 <tcp_output>
 8015e6a:	e000      	b.n	8015e6e <tcp_rexmit_rto+0x66>
    return;
 8015e6c:	bf00      	nop
}
 8015e6e:	3710      	adds	r7, #16
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015e74:	b590      	push	{r4, r7, lr}
 8015e76:	b085      	sub	sp, #20
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d043      	beq.n	8015f0c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e88:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	3368      	adds	r3, #104	; 0x68
 8015e96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e98:	e002      	b.n	8015ea0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d011      	beq.n	8015ecc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7f9 faed 	bl	800f490 <lwip_htonl>
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7f9 fae6 	bl	800f490 <lwip_htonl>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	dbe6      	blt.n	8015e9a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	68ba      	ldr	r2, [r7, #8]
 8015ed8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d103      	bne.n	8015eea <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ef0:	2bff      	cmp	r3, #255	; 0xff
 8015ef2:	d007      	beq.n	8015f04 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015efa:	3301      	adds	r3, #1
 8015efc:	b2da      	uxtb	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2200      	movs	r2, #0
 8015f08:	635a      	str	r2, [r3, #52]	; 0x34
 8015f0a:	e000      	b.n	8015f0e <tcp_rexmit+0x9a>
    return;
 8015f0c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8015f0e:	3714      	adds	r7, #20
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd90      	pop	{r4, r7, pc}

08015f14 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d04c      	beq.n	8015fbe <tcp_rexmit_fast+0xaa>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	7e9b      	ldrb	r3, [r3, #26]
 8015f28:	f003 0304 	and.w	r3, r3, #4
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d146      	bne.n	8015fbe <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7ff ff9f 	bl	8015e74 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d208      	bcs.n	8015f58 <tcp_rexmit_fast+0x44>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	da00      	bge.n	8015f52 <tcp_rexmit_fast+0x3e>
 8015f50:	3301      	adds	r3, #1
 8015f52:	105b      	asrs	r3, r3, #1
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	e007      	b.n	8015f68 <tcp_rexmit_fast+0x54>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	da00      	bge.n	8015f64 <tcp_rexmit_fast+0x50>
 8015f62:	3301      	adds	r3, #1
 8015f64:	105b      	asrs	r3, r3, #1
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015f74:	461a      	mov	r2, r3
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d206      	bcs.n	8015f8e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f98:	4619      	mov	r1, r3
 8015f9a:	0049      	lsls	r1, r1, #1
 8015f9c:	440b      	add	r3, r1
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	4413      	add	r3, r2
 8015fa2:	b29a      	uxth	r2, r3
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	7e9b      	ldrb	r3, [r3, #26]
 8015fae:	f043 0304 	orr.w	r3, r3, #4
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8015fbe:	bf00      	nop
 8015fc0:	3708      	adds	r7, #8
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b08a      	sub	sp, #40	; 0x28
 8015fca:	af04      	add	r7, sp, #16
 8015fcc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015fd2:	3b01      	subs	r3, #1
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7f9 fa5b 	bl	800f490 <lwip_htonl>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2200      	movs	r2, #0
 8015fde:	2100      	movs	r1, #0
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f7fe fd43 	bl	8014a6c <tcp_output_alloc_header>
 8015fe6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d102      	bne.n	8015ff4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015fee:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff2:	e021      	b.n	8016038 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f001 fd8f 	bl	8017b1c <ip4_route>
 8015ffe:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d102      	bne.n	801600c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8016006:	23fc      	movs	r3, #252	; 0xfc
 8016008:	75fb      	strb	r3, [r7, #23]
 801600a:	e010      	b.n	801602e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801600c:	6879      	ldr	r1, [r7, #4]
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	1d1a      	adds	r2, r3, #4
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	7a98      	ldrb	r0, [r3, #10]
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	9302      	str	r3, [sp, #8]
 801601a:	2306      	movs	r3, #6
 801601c:	9301      	str	r3, [sp, #4]
 801601e:	2300      	movs	r3, #0
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	4603      	mov	r3, r0
 8016024:	6938      	ldr	r0, [r7, #16]
 8016026:	f001 ff21 	bl	8017e6c <ip4_output_if>
 801602a:	4603      	mov	r3, r0
 801602c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801602e:	6938      	ldr	r0, [r7, #16]
 8016030:	f7fa fc3a 	bl	80108a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016038:	4618      	mov	r0, r3
 801603a:	3718      	adds	r7, #24
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}

08016040 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016040:	b590      	push	{r4, r7, lr}
 8016042:	b08f      	sub	sp, #60	; 0x3c
 8016044:	af04      	add	r7, sp, #16
 8016046:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801604c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801604e:	6a3b      	ldr	r3, [r7, #32]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d102      	bne.n	801605a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016058:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801605a:	6a3b      	ldr	r3, [r7, #32]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d101      	bne.n	8016064 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016060:	2300      	movs	r3, #0
 8016062:	e085      	b.n	8016170 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016064:	6a3b      	ldr	r3, [r7, #32]
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	899b      	ldrh	r3, [r3, #12]
 801606a:	b29b      	uxth	r3, r3
 801606c:	4618      	mov	r0, r3
 801606e:	f7f9 fa01 	bl	800f474 <lwip_htons>
 8016072:	4603      	mov	r3, r0
 8016074:	f003 0301 	and.w	r3, r3, #1
 8016078:	2b00      	cmp	r3, #0
 801607a:	d005      	beq.n	8016088 <tcp_zero_window_probe+0x48>
 801607c:	6a3b      	ldr	r3, [r7, #32]
 801607e:	891b      	ldrh	r3, [r3, #8]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d101      	bne.n	8016088 <tcp_zero_window_probe+0x48>
 8016084:	2301      	movs	r3, #1
 8016086:	e000      	b.n	801608a <tcp_zero_window_probe+0x4a>
 8016088:	2300      	movs	r3, #0
 801608a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801608c:	7ffb      	ldrb	r3, [r7, #31]
 801608e:	2b00      	cmp	r3, #0
 8016090:	bf0c      	ite	eq
 8016092:	2301      	moveq	r3, #1
 8016094:	2300      	movne	r3, #0
 8016096:	b2db      	uxtb	r3, r3
 8016098:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	8bba      	ldrh	r2, [r7, #28]
 80160a2:	2100      	movs	r1, #0
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f7fe fce1 	bl	8014a6c <tcp_output_alloc_header>
 80160aa:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d102      	bne.n	80160b8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80160b2:	f04f 33ff 	mov.w	r3, #4294967295
 80160b6:	e05b      	b.n	8016170 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80160b8:	69bb      	ldr	r3, [r7, #24]
 80160ba:	685b      	ldr	r3, [r3, #4]
 80160bc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80160be:	7ffb      	ldrb	r3, [r7, #31]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d00e      	beq.n	80160e2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	899b      	ldrh	r3, [r3, #12]
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80160ce:	b29c      	uxth	r4, r3
 80160d0:	2011      	movs	r0, #17
 80160d2:	f7f9 f9cf 	bl	800f474 <lwip_htons>
 80160d6:	4603      	mov	r3, r0
 80160d8:	4323      	orrs	r3, r4
 80160da:	b29a      	uxth	r2, r3
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	819a      	strh	r2, [r3, #12]
 80160e0:	e010      	b.n	8016104 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80160e2:	69bb      	ldr	r3, [r7, #24]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	3314      	adds	r3, #20
 80160e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80160ea:	6a3b      	ldr	r3, [r7, #32]
 80160ec:	6858      	ldr	r0, [r3, #4]
 80160ee:	6a3b      	ldr	r3, [r7, #32]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	891a      	ldrh	r2, [r3, #8]
 80160f4:	6a3b      	ldr	r3, [r7, #32]
 80160f6:	891b      	ldrh	r3, [r3, #8]
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	2201      	movs	r2, #1
 80160fe:	6939      	ldr	r1, [r7, #16]
 8016100:	f7fa fdce 	bl	8010ca0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016104:	6a3b      	ldr	r3, [r7, #32]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	4618      	mov	r0, r3
 801610c:	f7f9 f9c0 	bl	800f490 <lwip_htonl>
 8016110:	4603      	mov	r3, r0
 8016112:	3301      	adds	r3, #1
 8016114:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	2b00      	cmp	r3, #0
 8016120:	da02      	bge.n	8016128 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	68fa      	ldr	r2, [r7, #12]
 8016126:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	3304      	adds	r3, #4
 801612c:	4618      	mov	r0, r3
 801612e:	f001 fcf5 	bl	8017b1c <ip4_route>
 8016132:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d103      	bne.n	8016142 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801613a:	23fc      	movs	r3, #252	; 0xfc
 801613c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016140:	e011      	b.n	8016166 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016142:	6879      	ldr	r1, [r7, #4]
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	1d1a      	adds	r2, r3, #4
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	7a98      	ldrb	r0, [r3, #10]
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	9302      	str	r3, [sp, #8]
 8016150:	2306      	movs	r3, #6
 8016152:	9301      	str	r3, [sp, #4]
 8016154:	2300      	movs	r3, #0
 8016156:	9300      	str	r3, [sp, #0]
 8016158:	4603      	mov	r3, r0
 801615a:	69b8      	ldr	r0, [r7, #24]
 801615c:	f001 fe86 	bl	8017e6c <ip4_output_if>
 8016160:	4603      	mov	r3, r0
 8016162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8016166:	69b8      	ldr	r0, [r7, #24]
 8016168:	f7fa fb9e 	bl	80108a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801616c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016170:	4618      	mov	r0, r3
 8016172:	372c      	adds	r7, #44	; 0x2c
 8016174:	46bd      	mov	sp, r7
 8016176:	bd90      	pop	{r4, r7, pc}

08016178 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016180:	f7fa fe10 	bl	8010da4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016184:	4b0a      	ldr	r3, [pc, #40]	; (80161b0 <tcpip_tcp_timer+0x38>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d103      	bne.n	8016194 <tcpip_tcp_timer+0x1c>
 801618c:	4b09      	ldr	r3, [pc, #36]	; (80161b4 <tcpip_tcp_timer+0x3c>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d005      	beq.n	80161a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016194:	2200      	movs	r2, #0
 8016196:	4908      	ldr	r1, [pc, #32]	; (80161b8 <tcpip_tcp_timer+0x40>)
 8016198:	20fa      	movs	r0, #250	; 0xfa
 801619a:	f000 f86f 	bl	801627c <sys_timeout>
 801619e:	e002      	b.n	80161a6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80161a0:	4b06      	ldr	r3, [pc, #24]	; (80161bc <tcpip_tcp_timer+0x44>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	601a      	str	r2, [r3, #0]
  }
}
 80161a6:	bf00      	nop
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	200101cc 	.word	0x200101cc
 80161b4:	200101dc 	.word	0x200101dc
 80161b8:	08016179 	.word	0x08016179
 80161bc:	2000c840 	.word	0x2000c840

080161c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80161c4:	4b0a      	ldr	r3, [pc, #40]	; (80161f0 <tcp_timer_needed+0x30>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d10f      	bne.n	80161ec <tcp_timer_needed+0x2c>
 80161cc:	4b09      	ldr	r3, [pc, #36]	; (80161f4 <tcp_timer_needed+0x34>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d103      	bne.n	80161dc <tcp_timer_needed+0x1c>
 80161d4:	4b08      	ldr	r3, [pc, #32]	; (80161f8 <tcp_timer_needed+0x38>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d007      	beq.n	80161ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80161dc:	4b04      	ldr	r3, [pc, #16]	; (80161f0 <tcp_timer_needed+0x30>)
 80161de:	2201      	movs	r2, #1
 80161e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80161e2:	2200      	movs	r2, #0
 80161e4:	4905      	ldr	r1, [pc, #20]	; (80161fc <tcp_timer_needed+0x3c>)
 80161e6:	20fa      	movs	r0, #250	; 0xfa
 80161e8:	f000 f848 	bl	801627c <sys_timeout>
  }
}
 80161ec:	bf00      	nop
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	2000c840 	.word	0x2000c840
 80161f4:	200101cc 	.word	0x200101cc
 80161f8:	200101dc 	.word	0x200101dc
 80161fc:	08016179 	.word	0x08016179

08016200 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	4903      	ldr	r1, [pc, #12]	; (8016228 <cyclic_timer+0x28>)
 801621a:	4618      	mov	r0, r3
 801621c:	f000 f82e 	bl	801627c <sys_timeout>
}
 8016220:	bf00      	nop
 8016222:	3710      	adds	r7, #16
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}
 8016228:	08016201 	.word	0x08016201

0801622c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016232:	2301      	movs	r3, #1
 8016234:	607b      	str	r3, [r7, #4]
 8016236:	e00e      	b.n	8016256 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8016238:	4a0d      	ldr	r2, [pc, #52]	; (8016270 <sys_timeouts_init+0x44>)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	4a0a      	ldr	r2, [pc, #40]	; (8016270 <sys_timeouts_init+0x44>)
 8016246:	4413      	add	r3, r2
 8016248:	461a      	mov	r2, r3
 801624a:	490a      	ldr	r1, [pc, #40]	; (8016274 <sys_timeouts_init+0x48>)
 801624c:	f000 f816 	bl	801627c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	3301      	adds	r3, #1
 8016254:	607b      	str	r3, [r7, #4]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2b02      	cmp	r3, #2
 801625a:	d9ed      	bls.n	8016238 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801625c:	f7f3 ff46 	bl	800a0ec <sys_now>
 8016260:	4602      	mov	r2, r0
 8016262:	4b05      	ldr	r3, [pc, #20]	; (8016278 <sys_timeouts_init+0x4c>)
 8016264:	601a      	str	r2, [r3, #0]
}
 8016266:	bf00      	nop
 8016268:	3708      	adds	r7, #8
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
 801626e:	bf00      	nop
 8016270:	0801cf0c 	.word	0x0801cf0c
 8016274:	08016201 	.word	0x08016201
 8016278:	2000c83c 	.word	0x2000c83c

0801627c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b088      	sub	sp, #32
 8016280:	af00      	add	r7, sp, #0
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	60b9      	str	r1, [r7, #8]
 8016286:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016288:	200a      	movs	r0, #10
 801628a:	f7f9 fcff 	bl	800fc8c <memp_malloc>
 801628e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10a      	bne.n	80162ac <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	2b00      	cmp	r3, #0
 801629a:	f040 8084 	bne.w	80163a6 <sys_timeout+0x12a>
 801629e:	4b44      	ldr	r3, [pc, #272]	; (80163b0 <sys_timeout+0x134>)
 80162a0:	22d4      	movs	r2, #212	; 0xd4
 80162a2:	4944      	ldr	r1, [pc, #272]	; (80163b4 <sys_timeout+0x138>)
 80162a4:	4844      	ldr	r0, [pc, #272]	; (80163b8 <sys_timeout+0x13c>)
 80162a6:	f002 ffdb 	bl	8019260 <iprintf>
    return;
 80162aa:	e07c      	b.n	80163a6 <sys_timeout+0x12a>
  }

  now = sys_now();
 80162ac:	f7f3 ff1e 	bl	800a0ec <sys_now>
 80162b0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80162b2:	4b42      	ldr	r3, [pc, #264]	; (80163bc <sys_timeout+0x140>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d105      	bne.n	80162c6 <sys_timeout+0x4a>
    diff = 0;
 80162ba:	2300      	movs	r3, #0
 80162bc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80162be:	4a40      	ldr	r2, [pc, #256]	; (80163c0 <sys_timeout+0x144>)
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	6013      	str	r3, [r2, #0]
 80162c4:	e004      	b.n	80162d0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80162c6:	4b3e      	ldr	r3, [pc, #248]	; (80163c0 <sys_timeout+0x144>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	693a      	ldr	r2, [r7, #16]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	2200      	movs	r2, #0
 80162d4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	68ba      	ldr	r2, [r7, #8]
 80162da:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80162e2:	68fa      	ldr	r2, [r7, #12]
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	441a      	add	r2, r3
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80162ec:	4b33      	ldr	r3, [pc, #204]	; (80163bc <sys_timeout+0x140>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d103      	bne.n	80162fc <sys_timeout+0x80>
    next_timeout = timeout;
 80162f4:	4a31      	ldr	r2, [pc, #196]	; (80163bc <sys_timeout+0x140>)
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	6013      	str	r3, [r2, #0]
    return;
 80162fa:	e055      	b.n	80163a8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80162fc:	4b2f      	ldr	r3, [pc, #188]	; (80163bc <sys_timeout+0x140>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	429a      	cmp	r2, r3
 8016306:	d20f      	bcs.n	8016328 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8016308:	4b2c      	ldr	r3, [pc, #176]	; (80163bc <sys_timeout+0x140>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	6859      	ldr	r1, [r3, #4]
 801630e:	4b2b      	ldr	r3, [pc, #172]	; (80163bc <sys_timeout+0x140>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	1a8a      	subs	r2, r1, r2
 8016316:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8016318:	4b28      	ldr	r3, [pc, #160]	; (80163bc <sys_timeout+0x140>)
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016320:	4a26      	ldr	r2, [pc, #152]	; (80163bc <sys_timeout+0x140>)
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	6013      	str	r3, [r2, #0]
 8016326:	e03f      	b.n	80163a8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016328:	4b24      	ldr	r3, [pc, #144]	; (80163bc <sys_timeout+0x140>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	61fb      	str	r3, [r7, #28]
 801632e:	e036      	b.n	801639e <sys_timeout+0x122>
      timeout->time -= t->time;
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	685a      	ldr	r2, [r3, #4]
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	1ad2      	subs	r2, r2, r3
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d006      	beq.n	8016354 <sys_timeout+0xd8>
 8016346:	69fb      	ldr	r3, [r7, #28]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	685a      	ldr	r2, [r3, #4]
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	429a      	cmp	r2, r3
 8016352:	d921      	bls.n	8016398 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d009      	beq.n	8016370 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	6859      	ldr	r1, [r3, #4]
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	685a      	ldr	r2, [r3, #4]
 8016366:	69fb      	ldr	r3, [r7, #28]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	1a8a      	subs	r2, r1, r2
 801636c:	605a      	str	r2, [r3, #4]
 801636e:	e00b      	b.n	8016388 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	68fa      	ldr	r2, [r7, #12]
 8016376:	429a      	cmp	r2, r3
 8016378:	d206      	bcs.n	8016388 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801637a:	4b10      	ldr	r3, [pc, #64]	; (80163bc <sys_timeout+0x140>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	685a      	ldr	r2, [r3, #4]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	441a      	add	r2, r3
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	697a      	ldr	r2, [r7, #20]
 8016394:	601a      	str	r2, [r3, #0]
        break;
 8016396:	e007      	b.n	80163a8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	61fb      	str	r3, [r7, #28]
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d1c5      	bne.n	8016330 <sys_timeout+0xb4>
 80163a4:	e000      	b.n	80163a8 <sys_timeout+0x12c>
    return;
 80163a6:	bf00      	nop
      }
    }
  }
}
 80163a8:	3720      	adds	r7, #32
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	0801c554 	.word	0x0801c554
 80163b4:	0801c5ac 	.word	0x0801c5ac
 80163b8:	0801c5ec 	.word	0x0801c5ec
 80163bc:	2000c838 	.word	0x2000c838
 80163c0:	2000c83c 	.word	0x2000c83c

080163c4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80163ca:	4b24      	ldr	r3, [pc, #144]	; (801645c <sys_check_timeouts+0x98>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d03f      	beq.n	8016452 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80163d2:	f7f3 fe8b 	bl	800a0ec <sys_now>
 80163d6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80163d8:	4b21      	ldr	r3, [pc, #132]	; (8016460 <sys_check_timeouts+0x9c>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	68fa      	ldr	r2, [r7, #12]
 80163de:	1ad3      	subs	r3, r2, r3
 80163e0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80163e2:	2300      	movs	r3, #0
 80163e4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80163e6:	4b1d      	ldr	r3, [pc, #116]	; (801645c <sys_check_timeouts+0x98>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d02c      	beq.n	801644c <sys_check_timeouts+0x88>
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	685b      	ldr	r3, [r3, #4]
 80163f6:	697a      	ldr	r2, [r7, #20]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d327      	bcc.n	801644c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80163fc:	2301      	movs	r3, #1
 80163fe:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	685a      	ldr	r2, [r3, #4]
 8016404:	4b16      	ldr	r3, [pc, #88]	; (8016460 <sys_check_timeouts+0x9c>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4413      	add	r3, r2
 801640a:	4a15      	ldr	r2, [pc, #84]	; (8016460 <sys_check_timeouts+0x9c>)
 801640c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	697a      	ldr	r2, [r7, #20]
 8016414:	1ad3      	subs	r3, r2, r3
 8016416:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4a0f      	ldr	r2, [pc, #60]	; (801645c <sys_check_timeouts+0x98>)
 801641e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	689b      	ldr	r3, [r3, #8]
 8016424:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	68db      	ldr	r3, [r3, #12]
 801642a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801642c:	68b9      	ldr	r1, [r7, #8]
 801642e:	200a      	movs	r0, #10
 8016430:	f7f9 fca2 	bl	800fd78 <memp_free>
        if (handler != NULL) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d008      	beq.n	801644c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801643a:	480a      	ldr	r0, [pc, #40]	; (8016464 <sys_check_timeouts+0xa0>)
 801643c:	f002 fe6a 	bl	8019114 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6838      	ldr	r0, [r7, #0]
 8016444:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8016446:	4807      	ldr	r0, [pc, #28]	; (8016464 <sys_check_timeouts+0xa0>)
 8016448:	f002 fe73 	bl	8019132 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801644c:	7cfb      	ldrb	r3, [r7, #19]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d1c7      	bne.n	80163e2 <sys_check_timeouts+0x1e>
  }
}
 8016452:	bf00      	nop
 8016454:	3718      	adds	r7, #24
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	2000c838 	.word	0x2000c838
 8016460:	2000c83c 	.word	0x2000c83c
 8016464:	2000d10c 	.word	0x2000d10c

08016468 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801646e:	4b0f      	ldr	r3, [pc, #60]	; (80164ac <sys_timeouts_sleeptime+0x44>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d102      	bne.n	801647c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8016476:	f04f 33ff 	mov.w	r3, #4294967295
 801647a:	e013      	b.n	80164a4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 801647c:	f7f3 fe36 	bl	800a0ec <sys_now>
 8016480:	4602      	mov	r2, r0
 8016482:	4b0b      	ldr	r3, [pc, #44]	; (80164b0 <sys_timeouts_sleeptime+0x48>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801648a:	4b08      	ldr	r3, [pc, #32]	; (80164ac <sys_timeouts_sleeptime+0x44>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	429a      	cmp	r2, r3
 8016494:	d901      	bls.n	801649a <sys_timeouts_sleeptime+0x32>
    return 0;
 8016496:	2300      	movs	r3, #0
 8016498:	e004      	b.n	80164a4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801649a:	4b04      	ldr	r3, [pc, #16]	; (80164ac <sys_timeouts_sleeptime+0x44>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	685a      	ldr	r2, [r3, #4]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	1ad3      	subs	r3, r2, r3
  }
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	2000c838 	.word	0x2000c838
 80164b0:	2000c83c 	.word	0x2000c83c

080164b4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80164be:	4b0f      	ldr	r3, [pc, #60]	; (80164fc <sys_timeouts_mbox_fetch+0x48>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d105      	bne.n	80164d2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80164c6:	2200      	movs	r2, #0
 80164c8:	6839      	ldr	r1, [r7, #0]
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f002 fced 	bl	8018eaa <sys_arch_mbox_fetch>
    return;
 80164d0:	e011      	b.n	80164f6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80164d2:	f7ff ffc9 	bl	8016468 <sys_timeouts_sleeptime>
 80164d6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d008      	beq.n	80164f0 <sys_timeouts_mbox_fetch+0x3c>
 80164de:	68fa      	ldr	r2, [r7, #12]
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f002 fce1 	bl	8018eaa <sys_arch_mbox_fetch>
 80164e8:	4603      	mov	r3, r0
 80164ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ee:	d102      	bne.n	80164f6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80164f0:	f7ff ff68 	bl	80163c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80164f4:	e7e3      	b.n	80164be <sys_timeouts_mbox_fetch+0xa>
  }
}
 80164f6:	3710      	adds	r7, #16
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	2000c838 	.word	0x2000c838

08016500 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016500:	b480      	push	{r7}
 8016502:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016504:	bf00      	nop
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr
	...

08016510 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016510:	b480      	push	{r7}
 8016512:	b083      	sub	sp, #12
 8016514:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016516:	2300      	movs	r3, #0
 8016518:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801651a:	4b17      	ldr	r3, [pc, #92]	; (8016578 <udp_new_port+0x68>)
 801651c:	881b      	ldrh	r3, [r3, #0]
 801651e:	1c5a      	adds	r2, r3, #1
 8016520:	b291      	uxth	r1, r2
 8016522:	4a15      	ldr	r2, [pc, #84]	; (8016578 <udp_new_port+0x68>)
 8016524:	8011      	strh	r1, [r2, #0]
 8016526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801652a:	4293      	cmp	r3, r2
 801652c:	d103      	bne.n	8016536 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801652e:	4b12      	ldr	r3, [pc, #72]	; (8016578 <udp_new_port+0x68>)
 8016530:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016534:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016536:	4b11      	ldr	r3, [pc, #68]	; (801657c <udp_new_port+0x6c>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	603b      	str	r3, [r7, #0]
 801653c:	e011      	b.n	8016562 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	8a5a      	ldrh	r2, [r3, #18]
 8016542:	4b0d      	ldr	r3, [pc, #52]	; (8016578 <udp_new_port+0x68>)
 8016544:	881b      	ldrh	r3, [r3, #0]
 8016546:	429a      	cmp	r2, r3
 8016548:	d108      	bne.n	801655c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801654a:	88fb      	ldrh	r3, [r7, #6]
 801654c:	3301      	adds	r3, #1
 801654e:	80fb      	strh	r3, [r7, #6]
 8016550:	88fb      	ldrh	r3, [r7, #6]
 8016552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016556:	d3e0      	bcc.n	801651a <udp_new_port+0xa>
        return 0;
 8016558:	2300      	movs	r3, #0
 801655a:	e007      	b.n	801656c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	603b      	str	r3, [r7, #0]
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d1ea      	bne.n	801653e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016568:	4b03      	ldr	r3, [pc, #12]	; (8016578 <udp_new_port+0x68>)
 801656a:	881b      	ldrh	r3, [r3, #0]
}
 801656c:	4618      	mov	r0, r3
 801656e:	370c      	adds	r7, #12
 8016570:	46bd      	mov	sp, r7
 8016572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016576:	4770      	bx	lr
 8016578:	20000030 	.word	0x20000030
 801657c:	200101e4 	.word	0x200101e4

08016580 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016580:	b480      	push	{r7}
 8016582:	b085      	sub	sp, #20
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	4613      	mov	r3, r2
 801658c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801658e:	79fb      	ldrb	r3, [r7, #7]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d018      	beq.n	80165c6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d013      	beq.n	80165c2 <udp_input_local_match+0x42>
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00f      	beq.n	80165c2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80165a2:	4b14      	ldr	r3, [pc, #80]	; (80165f4 <udp_input_local_match+0x74>)
 80165a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80165a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165aa:	d00a      	beq.n	80165c2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	4b10      	ldr	r3, [pc, #64]	; (80165f4 <udp_input_local_match+0x74>)
 80165b2:	695b      	ldr	r3, [r3, #20]
 80165b4:	405a      	eors	r2, r3
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	3308      	adds	r3, #8
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d110      	bne.n	80165e4 <udp_input_local_match+0x64>
          return 1;
 80165c2:	2301      	movs	r3, #1
 80165c4:	e00f      	b.n	80165e6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d009      	beq.n	80165e0 <udp_input_local_match+0x60>
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d005      	beq.n	80165e0 <udp_input_local_match+0x60>
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	4b06      	ldr	r3, [pc, #24]	; (80165f4 <udp_input_local_match+0x74>)
 80165da:	695b      	ldr	r3, [r3, #20]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d101      	bne.n	80165e4 <udp_input_local_match+0x64>
      return 1;
 80165e0:	2301      	movs	r3, #1
 80165e2:	e000      	b.n	80165e6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80165e4:	2300      	movs	r3, #0
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3714      	adds	r7, #20
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr
 80165f2:	bf00      	nop
 80165f4:	2000d110 	.word	0x2000d110

080165f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80165f8:	b590      	push	{r4, r7, lr}
 80165fa:	b08d      	sub	sp, #52	; 0x34
 80165fc:	af02      	add	r7, sp, #8
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016602:	2300      	movs	r3, #0
 8016604:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	895b      	ldrh	r3, [r3, #10]
 801660a:	2b07      	cmp	r3, #7
 801660c:	d803      	bhi.n	8016616 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f7fa f94a 	bl	80108a8 <pbuf_free>
    goto end;
 8016614:	e0c6      	b.n	80167a4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801661c:	4b63      	ldr	r3, [pc, #396]	; (80167ac <udp_input+0x1b4>)
 801661e:	695a      	ldr	r2, [r3, #20]
 8016620:	4b62      	ldr	r3, [pc, #392]	; (80167ac <udp_input+0x1b4>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4619      	mov	r1, r3
 8016626:	4610      	mov	r0, r2
 8016628:	f001 fcf2 	bl	8018010 <ip4_addr_isbroadcast_u32>
 801662c:	4603      	mov	r3, r0
 801662e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	881b      	ldrh	r3, [r3, #0]
 8016634:	b29b      	uxth	r3, r3
 8016636:	4618      	mov	r0, r3
 8016638:	f7f8 ff1c 	bl	800f474 <lwip_htons>
 801663c:	4603      	mov	r3, r0
 801663e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	885b      	ldrh	r3, [r3, #2]
 8016644:	b29b      	uxth	r3, r3
 8016646:	4618      	mov	r0, r3
 8016648:	f7f8 ff14 	bl	800f474 <lwip_htons>
 801664c:	4603      	mov	r3, r0
 801664e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016650:	2300      	movs	r3, #0
 8016652:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016654:	2300      	movs	r3, #0
 8016656:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016658:	2300      	movs	r3, #0
 801665a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801665c:	4b54      	ldr	r3, [pc, #336]	; (80167b0 <udp_input+0x1b8>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	627b      	str	r3, [r7, #36]	; 0x24
 8016662:	e03b      	b.n	80166dc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016666:	8a5b      	ldrh	r3, [r3, #18]
 8016668:	89fa      	ldrh	r2, [r7, #14]
 801666a:	429a      	cmp	r2, r3
 801666c:	d131      	bne.n	80166d2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801666e:	7cfb      	ldrb	r3, [r7, #19]
 8016670:	461a      	mov	r2, r3
 8016672:	6839      	ldr	r1, [r7, #0]
 8016674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016676:	f7ff ff83 	bl	8016580 <udp_input_local_match>
 801667a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801667c:	2b00      	cmp	r3, #0
 801667e:	d028      	beq.n	80166d2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	7c1b      	ldrb	r3, [r3, #16]
 8016684:	f003 0304 	and.w	r3, r3, #4
 8016688:	2b00      	cmp	r3, #0
 801668a:	d104      	bne.n	8016696 <udp_input+0x9e>
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d101      	bne.n	8016696 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016694:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016698:	8a9b      	ldrh	r3, [r3, #20]
 801669a:	8a3a      	ldrh	r2, [r7, #16]
 801669c:	429a      	cmp	r2, r3
 801669e:	d118      	bne.n	80166d2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d005      	beq.n	80166b4 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80166a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166aa:	685a      	ldr	r2, [r3, #4]
 80166ac:	4b3f      	ldr	r3, [pc, #252]	; (80167ac <udp_input+0x1b4>)
 80166ae:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d10e      	bne.n	80166d2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80166b4:	6a3b      	ldr	r3, [r7, #32]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d014      	beq.n	80166e4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80166ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166bc:	68da      	ldr	r2, [r3, #12]
 80166be:	6a3b      	ldr	r3, [r7, #32]
 80166c0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80166c2:	4b3b      	ldr	r3, [pc, #236]	; (80167b0 <udp_input+0x1b8>)
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80166ca:	4a39      	ldr	r2, [pc, #228]	; (80167b0 <udp_input+0x1b8>)
 80166cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ce:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80166d0:	e008      	b.n	80166e4 <udp_input+0xec>
      }
    }

    prev = pcb;
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80166d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d8:	68db      	ldr	r3, [r3, #12]
 80166da:	627b      	str	r3, [r7, #36]	; 0x24
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d1c0      	bne.n	8016664 <udp_input+0x6c>
 80166e2:	e000      	b.n	80166e6 <udp_input+0xee>
        break;
 80166e4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80166e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d101      	bne.n	80166f0 <udp_input+0xf8>
    pcb = uncon_pcb;
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80166f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d002      	beq.n	80166fc <udp_input+0x104>
    for_us = 1;
 80166f6:	2301      	movs	r3, #1
 80166f8:	76fb      	strb	r3, [r7, #27]
 80166fa:	e00a      	b.n	8016712 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	3304      	adds	r3, #4
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	4b2a      	ldr	r3, [pc, #168]	; (80167ac <udp_input+0x1b4>)
 8016704:	695b      	ldr	r3, [r3, #20]
 8016706:	429a      	cmp	r2, r3
 8016708:	bf0c      	ite	eq
 801670a:	2301      	moveq	r3, #1
 801670c:	2300      	movne	r3, #0
 801670e:	b2db      	uxtb	r3, r3
 8016710:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016712:	7efb      	ldrb	r3, [r7, #27]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d042      	beq.n	801679e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8016718:	f06f 0107 	mvn.w	r1, #7
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f7fa f89f 	bl	8010860 <pbuf_header>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d00a      	beq.n	801673e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8016728:	4b22      	ldr	r3, [pc, #136]	; (80167b4 <udp_input+0x1bc>)
 801672a:	f240 1255 	movw	r2, #341	; 0x155
 801672e:	4922      	ldr	r1, [pc, #136]	; (80167b8 <udp_input+0x1c0>)
 8016730:	4822      	ldr	r0, [pc, #136]	; (80167bc <udp_input+0x1c4>)
 8016732:	f002 fd95 	bl	8019260 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f7fa f8b6 	bl	80108a8 <pbuf_free>
      goto end;
 801673c:	e032      	b.n	80167a4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016740:	2b00      	cmp	r3, #0
 8016742:	d012      	beq.n	801676a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016746:	699b      	ldr	r3, [r3, #24]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d00a      	beq.n	8016762 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674e:	699c      	ldr	r4, [r3, #24]
 8016750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016752:	69d8      	ldr	r0, [r3, #28]
 8016754:	8a3b      	ldrh	r3, [r7, #16]
 8016756:	9300      	str	r3, [sp, #0]
 8016758:	4b19      	ldr	r3, [pc, #100]	; (80167c0 <udp_input+0x1c8>)
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801675e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016760:	e021      	b.n	80167a6 <udp_input+0x1ae>
        pbuf_free(p);
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f7fa f8a0 	bl	80108a8 <pbuf_free>
        goto end;
 8016768:	e01c      	b.n	80167a4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801676a:	7cfb      	ldrb	r3, [r7, #19]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d112      	bne.n	8016796 <udp_input+0x19e>
 8016770:	4b0e      	ldr	r3, [pc, #56]	; (80167ac <udp_input+0x1b4>)
 8016772:	695b      	ldr	r3, [r3, #20]
 8016774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016778:	2be0      	cmp	r3, #224	; 0xe0
 801677a:	d00c      	beq.n	8016796 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801677c:	4b0b      	ldr	r3, [pc, #44]	; (80167ac <udp_input+0x1b4>)
 801677e:	899b      	ldrh	r3, [r3, #12]
 8016780:	3308      	adds	r3, #8
 8016782:	b29b      	uxth	r3, r3
 8016784:	b21b      	sxth	r3, r3
 8016786:	4619      	mov	r1, r3
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7fa f87b 	bl	8010884 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801678e:	2103      	movs	r1, #3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f001 f93b 	bl	8017a0c <icmp_dest_unreach>
      pbuf_free(p);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7fa f886 	bl	80108a8 <pbuf_free>
  return;
 801679c:	e003      	b.n	80167a6 <udp_input+0x1ae>
    pbuf_free(p);
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7fa f882 	bl	80108a8 <pbuf_free>
  return;
 80167a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80167a6:	372c      	adds	r7, #44	; 0x2c
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd90      	pop	{r4, r7, pc}
 80167ac:	2000d110 	.word	0x2000d110
 80167b0:	200101e4 	.word	0x200101e4
 80167b4:	0801c614 	.word	0x0801c614
 80167b8:	0801c668 	.word	0x0801c668
 80167bc:	0801c67c 	.word	0x0801c67c
 80167c0:	2000d120 	.word	0x2000d120

080167c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b086      	sub	sp, #24
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	60b9      	str	r1, [r7, #8]
 80167ce:	4613      	mov	r3, r2
 80167d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d101      	bne.n	80167dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80167d8:	4b30      	ldr	r3, [pc, #192]	; (801689c <udp_bind+0xd8>)
 80167da:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d002      	beq.n	80167e8 <udp_bind+0x24>
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d102      	bne.n	80167ee <udp_bind+0x2a>
    return ERR_VAL;
 80167e8:	f06f 0305 	mvn.w	r3, #5
 80167ec:	e052      	b.n	8016894 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80167ee:	2300      	movs	r3, #0
 80167f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167f2:	4b2b      	ldr	r3, [pc, #172]	; (80168a0 <udp_bind+0xdc>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	617b      	str	r3, [r7, #20]
 80167f8:	e009      	b.n	801680e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80167fa:	68fa      	ldr	r2, [r7, #12]
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d102      	bne.n	8016808 <udp_bind+0x44>
      rebind = 1;
 8016802:	2301      	movs	r3, #1
 8016804:	74fb      	strb	r3, [r7, #19]
      break;
 8016806:	e005      	b.n	8016814 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	617b      	str	r3, [r7, #20]
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d1f2      	bne.n	80167fa <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016814:	88fb      	ldrh	r3, [r7, #6]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d109      	bne.n	801682e <udp_bind+0x6a>
    port = udp_new_port();
 801681a:	f7ff fe79 	bl	8016510 <udp_new_port>
 801681e:	4603      	mov	r3, r0
 8016820:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016822:	88fb      	ldrh	r3, [r7, #6]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d11e      	bne.n	8016866 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016828:	f06f 0307 	mvn.w	r3, #7
 801682c:	e032      	b.n	8016894 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801682e:	4b1c      	ldr	r3, [pc, #112]	; (80168a0 <udp_bind+0xdc>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	617b      	str	r3, [r7, #20]
 8016834:	e014      	b.n	8016860 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	429a      	cmp	r2, r3
 801683c:	d00d      	beq.n	801685a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	8a5b      	ldrh	r3, [r3, #18]
 8016842:	88fa      	ldrh	r2, [r7, #6]
 8016844:	429a      	cmp	r2, r3
 8016846:	d108      	bne.n	801685a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	681a      	ldr	r2, [r3, #0]
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016850:	429a      	cmp	r2, r3
 8016852:	d102      	bne.n	801685a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016854:	f06f 0307 	mvn.w	r3, #7
 8016858:	e01c      	b.n	8016894 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	697b      	ldr	r3, [r7, #20]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d1e7      	bne.n	8016836 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <udp_bind+0xae>
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	e000      	b.n	8016874 <udp_bind+0xb0>
 8016872:	2300      	movs	r3, #0
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	88fa      	ldrh	r2, [r7, #6]
 801687c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801687e:	7cfb      	ldrb	r3, [r7, #19]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d106      	bne.n	8016892 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016884:	4b06      	ldr	r3, [pc, #24]	; (80168a0 <udp_bind+0xdc>)
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801688c:	4a04      	ldr	r2, [pc, #16]	; (80168a0 <udp_bind+0xdc>)
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016892:	2300      	movs	r3, #0
}
 8016894:	4618      	mov	r0, r3
 8016896:	3718      	adds	r7, #24
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}
 801689c:	0801cf24 	.word	0x0801cf24
 80168a0:	200101e4 	.word	0x200101e4

080168a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	687a      	ldr	r2, [r7, #4]
 80168ba:	61da      	str	r2, [r3, #28]
}
 80168bc:	bf00      	nop
 80168be:	3714      	adds	r7, #20
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80168d0:	4b15      	ldr	r3, [pc, #84]	; (8016928 <udp_remove+0x60>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	687a      	ldr	r2, [r7, #4]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d105      	bne.n	80168e6 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80168da:	4b13      	ldr	r3, [pc, #76]	; (8016928 <udp_remove+0x60>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	4a11      	ldr	r2, [pc, #68]	; (8016928 <udp_remove+0x60>)
 80168e2:	6013      	str	r3, [r2, #0]
 80168e4:	e017      	b.n	8016916 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80168e6:	4b10      	ldr	r3, [pc, #64]	; (8016928 <udp_remove+0x60>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	60fb      	str	r3, [r7, #12]
 80168ec:	e010      	b.n	8016910 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	68db      	ldr	r3, [r3, #12]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d009      	beq.n	801690a <udp_remove+0x42>
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d104      	bne.n	801690a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	68da      	ldr	r2, [r3, #12]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	60da      	str	r2, [r3, #12]
        break;
 8016908:	e005      	b.n	8016916 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	60fb      	str	r3, [r7, #12]
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d1eb      	bne.n	80168ee <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016916:	6879      	ldr	r1, [r7, #4]
 8016918:	2000      	movs	r0, #0
 801691a:	f7f9 fa2d 	bl	800fd78 <memp_free>
}
 801691e:	bf00      	nop
 8016920:	3710      	adds	r7, #16
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	200101e4 	.word	0x200101e4

0801692c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016932:	2000      	movs	r0, #0
 8016934:	f7f9 f9aa 	bl	800fc8c <memp_malloc>
 8016938:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d007      	beq.n	8016950 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016940:	2220      	movs	r2, #32
 8016942:	2100      	movs	r1, #0
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f002 fc83 	bl	8019250 <memset>
    pcb->ttl = UDP_TTL;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	22ff      	movs	r2, #255	; 0xff
 801694e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016950:	687b      	ldr	r3, [r7, #4]
}
 8016952:	4618      	mov	r0, r3
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b084      	sub	sp, #16
 801695e:	af00      	add	r7, sp, #0
 8016960:	4603      	mov	r3, r0
 8016962:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8016964:	f7ff ffe2 	bl	801692c <udp_new>
 8016968:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801696a:	68fb      	ldr	r3, [r7, #12]
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
 801697c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d01e      	beq.n	80169c2 <udp_netif_ip_addr_changed+0x4e>
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d01a      	beq.n	80169c2 <udp_netif_ip_addr_changed+0x4e>
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d017      	beq.n	80169c2 <udp_netif_ip_addr_changed+0x4e>
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d013      	beq.n	80169c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801699a:	4b0d      	ldr	r3, [pc, #52]	; (80169d0 <udp_netif_ip_addr_changed+0x5c>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	60fb      	str	r3, [r7, #12]
 80169a0:	e00c      	b.n	80169bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681a      	ldr	r2, [r3, #0]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d103      	bne.n	80169b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	68db      	ldr	r3, [r3, #12]
 80169ba:	60fb      	str	r3, [r7, #12]
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1ef      	bne.n	80169a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80169c2:	bf00      	nop
 80169c4:	3714      	adds	r7, #20
 80169c6:	46bd      	mov	sp, r7
 80169c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169cc:	4770      	bx	lr
 80169ce:	bf00      	nop
 80169d0:	200101e4 	.word	0x200101e4

080169d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80169dc:	4915      	ldr	r1, [pc, #84]	; (8016a34 <etharp_free_entry+0x60>)
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	4613      	mov	r3, r2
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	4413      	add	r3, r2
 80169e6:	00db      	lsls	r3, r3, #3
 80169e8:	440b      	add	r3, r1
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d013      	beq.n	8016a18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80169f0:	4910      	ldr	r1, [pc, #64]	; (8016a34 <etharp_free_entry+0x60>)
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	4613      	mov	r3, r2
 80169f6:	005b      	lsls	r3, r3, #1
 80169f8:	4413      	add	r3, r2
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	440b      	add	r3, r1
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7f9 ff51 	bl	80108a8 <pbuf_free>
    arp_table[i].q = NULL;
 8016a06:	490b      	ldr	r1, [pc, #44]	; (8016a34 <etharp_free_entry+0x60>)
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	4613      	mov	r3, r2
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	4413      	add	r3, r2
 8016a10:	00db      	lsls	r3, r3, #3
 8016a12:	440b      	add	r3, r1
 8016a14:	2200      	movs	r2, #0
 8016a16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016a18:	4906      	ldr	r1, [pc, #24]	; (8016a34 <etharp_free_entry+0x60>)
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	4413      	add	r3, r2
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	440b      	add	r3, r1
 8016a26:	3314      	adds	r3, #20
 8016a28:	2200      	movs	r2, #0
 8016a2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	2000c844 	.word	0x2000c844

08016a38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a3e:	2300      	movs	r3, #0
 8016a40:	71fb      	strb	r3, [r7, #7]
 8016a42:	e096      	b.n	8016b72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016a44:	79fa      	ldrb	r2, [r7, #7]
 8016a46:	494f      	ldr	r1, [pc, #316]	; (8016b84 <etharp_tmr+0x14c>)
 8016a48:	4613      	mov	r3, r2
 8016a4a:	005b      	lsls	r3, r3, #1
 8016a4c:	4413      	add	r3, r2
 8016a4e:	00db      	lsls	r3, r3, #3
 8016a50:	440b      	add	r3, r1
 8016a52:	3314      	adds	r3, #20
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8016a58:	79bb      	ldrb	r3, [r7, #6]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 8086 	beq.w	8016b6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8016a60:	79fa      	ldrb	r2, [r7, #7]
 8016a62:	4948      	ldr	r1, [pc, #288]	; (8016b84 <etharp_tmr+0x14c>)
 8016a64:	4613      	mov	r3, r2
 8016a66:	005b      	lsls	r3, r3, #1
 8016a68:	4413      	add	r3, r2
 8016a6a:	00db      	lsls	r3, r3, #3
 8016a6c:	440b      	add	r3, r1
 8016a6e:	3312      	adds	r3, #18
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	3301      	adds	r3, #1
 8016a74:	b298      	uxth	r0, r3
 8016a76:	4943      	ldr	r1, [pc, #268]	; (8016b84 <etharp_tmr+0x14c>)
 8016a78:	4613      	mov	r3, r2
 8016a7a:	005b      	lsls	r3, r3, #1
 8016a7c:	4413      	add	r3, r2
 8016a7e:	00db      	lsls	r3, r3, #3
 8016a80:	440b      	add	r3, r1
 8016a82:	3312      	adds	r3, #18
 8016a84:	4602      	mov	r2, r0
 8016a86:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016a88:	79fa      	ldrb	r2, [r7, #7]
 8016a8a:	493e      	ldr	r1, [pc, #248]	; (8016b84 <etharp_tmr+0x14c>)
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	4413      	add	r3, r2
 8016a92:	00db      	lsls	r3, r3, #3
 8016a94:	440b      	add	r3, r1
 8016a96:	3312      	adds	r3, #18
 8016a98:	881b      	ldrh	r3, [r3, #0]
 8016a9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016a9e:	d215      	bcs.n	8016acc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016aa0:	79fa      	ldrb	r2, [r7, #7]
 8016aa2:	4938      	ldr	r1, [pc, #224]	; (8016b84 <etharp_tmr+0x14c>)
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	005b      	lsls	r3, r3, #1
 8016aa8:	4413      	add	r3, r2
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	440b      	add	r3, r1
 8016aae:	3314      	adds	r3, #20
 8016ab0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ab2:	2b01      	cmp	r3, #1
 8016ab4:	d10f      	bne.n	8016ad6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ab6:	79fa      	ldrb	r2, [r7, #7]
 8016ab8:	4932      	ldr	r1, [pc, #200]	; (8016b84 <etharp_tmr+0x14c>)
 8016aba:	4613      	mov	r3, r2
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	4413      	add	r3, r2
 8016ac0:	00db      	lsls	r3, r3, #3
 8016ac2:	440b      	add	r3, r1
 8016ac4:	3312      	adds	r3, #18
 8016ac6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ac8:	2b04      	cmp	r3, #4
 8016aca:	d904      	bls.n	8016ad6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016acc:	79fb      	ldrb	r3, [r7, #7]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7ff ff80 	bl	80169d4 <etharp_free_entry>
 8016ad4:	e04a      	b.n	8016b6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ad6:	79fa      	ldrb	r2, [r7, #7]
 8016ad8:	492a      	ldr	r1, [pc, #168]	; (8016b84 <etharp_tmr+0x14c>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3314      	adds	r3, #20
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d10a      	bne.n	8016b02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016aec:	79fa      	ldrb	r2, [r7, #7]
 8016aee:	4925      	ldr	r1, [pc, #148]	; (8016b84 <etharp_tmr+0x14c>)
 8016af0:	4613      	mov	r3, r2
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	4413      	add	r3, r2
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	440b      	add	r3, r1
 8016afa:	3314      	adds	r3, #20
 8016afc:	2204      	movs	r2, #4
 8016afe:	701a      	strb	r2, [r3, #0]
 8016b00:	e034      	b.n	8016b6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016b02:	79fa      	ldrb	r2, [r7, #7]
 8016b04:	491f      	ldr	r1, [pc, #124]	; (8016b84 <etharp_tmr+0x14c>)
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	440b      	add	r3, r1
 8016b10:	3314      	adds	r3, #20
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b04      	cmp	r3, #4
 8016b16:	d10a      	bne.n	8016b2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016b18:	79fa      	ldrb	r2, [r7, #7]
 8016b1a:	491a      	ldr	r1, [pc, #104]	; (8016b84 <etharp_tmr+0x14c>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	3314      	adds	r3, #20
 8016b28:	2202      	movs	r2, #2
 8016b2a:	701a      	strb	r2, [r3, #0]
 8016b2c:	e01e      	b.n	8016b6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016b2e:	79fa      	ldrb	r2, [r7, #7]
 8016b30:	4914      	ldr	r1, [pc, #80]	; (8016b84 <etharp_tmr+0x14c>)
 8016b32:	4613      	mov	r3, r2
 8016b34:	005b      	lsls	r3, r3, #1
 8016b36:	4413      	add	r3, r2
 8016b38:	00db      	lsls	r3, r3, #3
 8016b3a:	440b      	add	r3, r1
 8016b3c:	3314      	adds	r3, #20
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d113      	bne.n	8016b6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016b44:	79fa      	ldrb	r2, [r7, #7]
 8016b46:	490f      	ldr	r1, [pc, #60]	; (8016b84 <etharp_tmr+0x14c>)
 8016b48:	4613      	mov	r3, r2
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	4413      	add	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	440b      	add	r3, r1
 8016b52:	3308      	adds	r3, #8
 8016b54:	6818      	ldr	r0, [r3, #0]
 8016b56:	79fa      	ldrb	r2, [r7, #7]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	005b      	lsls	r3, r3, #1
 8016b5c:	4413      	add	r3, r2
 8016b5e:	00db      	lsls	r3, r3, #3
 8016b60:	4a08      	ldr	r2, [pc, #32]	; (8016b84 <etharp_tmr+0x14c>)
 8016b62:	4413      	add	r3, r2
 8016b64:	3304      	adds	r3, #4
 8016b66:	4619      	mov	r1, r3
 8016b68:	f000 fe38 	bl	80177dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b6c:	79fb      	ldrb	r3, [r7, #7]
 8016b6e:	3301      	adds	r3, #1
 8016b70:	71fb      	strb	r3, [r7, #7]
 8016b72:	79fb      	ldrb	r3, [r7, #7]
 8016b74:	2b09      	cmp	r3, #9
 8016b76:	f67f af65 	bls.w	8016a44 <etharp_tmr+0xc>
      }
    }
  }
}
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	2000c844 	.word	0x2000c844

08016b88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b088      	sub	sp, #32
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	460b      	mov	r3, r1
 8016b92:	607a      	str	r2, [r7, #4]
 8016b94:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016b96:	230a      	movs	r3, #10
 8016b98:	77fb      	strb	r3, [r7, #31]
 8016b9a:	230a      	movs	r3, #10
 8016b9c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8016b9e:	230a      	movs	r3, #10
 8016ba0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8016ba6:	230a      	movs	r3, #10
 8016ba8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016baa:	2300      	movs	r3, #0
 8016bac:	833b      	strh	r3, [r7, #24]
 8016bae:	2300      	movs	r3, #0
 8016bb0:	82fb      	strh	r3, [r7, #22]
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	773b      	strb	r3, [r7, #28]
 8016bba:	e093      	b.n	8016ce4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8016bbc:	7f3a      	ldrb	r2, [r7, #28]
 8016bbe:	4990      	ldr	r1, [pc, #576]	; (8016e00 <etharp_find_entry+0x278>)
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	005b      	lsls	r3, r3, #1
 8016bc4:	4413      	add	r3, r2
 8016bc6:	00db      	lsls	r3, r3, #3
 8016bc8:	440b      	add	r3, r1
 8016bca:	3314      	adds	r3, #20
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016bd0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016bd4:	2b0a      	cmp	r3, #10
 8016bd6:	d105      	bne.n	8016be4 <etharp_find_entry+0x5c>
 8016bd8:	7cfb      	ldrb	r3, [r7, #19]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d102      	bne.n	8016be4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016bde:	7f3b      	ldrb	r3, [r7, #28]
 8016be0:	777b      	strb	r3, [r7, #29]
 8016be2:	e07c      	b.n	8016cde <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016be4:	7cfb      	ldrb	r3, [r7, #19]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d079      	beq.n	8016cde <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016bea:	7cfb      	ldrb	r3, [r7, #19]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	d009      	beq.n	8016c04 <etharp_find_entry+0x7c>
 8016bf0:	7cfb      	ldrb	r3, [r7, #19]
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d806      	bhi.n	8016c04 <etharp_find_entry+0x7c>
 8016bf6:	4b83      	ldr	r3, [pc, #524]	; (8016e04 <etharp_find_entry+0x27c>)
 8016bf8:	f44f 7293 	mov.w	r2, #294	; 0x126
 8016bfc:	4982      	ldr	r1, [pc, #520]	; (8016e08 <etharp_find_entry+0x280>)
 8016bfe:	4883      	ldr	r0, [pc, #524]	; (8016e0c <etharp_find_entry+0x284>)
 8016c00:	f002 fb2e 	bl	8019260 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d00f      	beq.n	8016c2a <etharp_find_entry+0xa2>
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	6819      	ldr	r1, [r3, #0]
 8016c0e:	7f3a      	ldrb	r2, [r7, #28]
 8016c10:	487b      	ldr	r0, [pc, #492]	; (8016e00 <etharp_find_entry+0x278>)
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	4403      	add	r3, r0
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4299      	cmp	r1, r3
 8016c22:	d102      	bne.n	8016c2a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016c24:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016c28:	e0e5      	b.n	8016df6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016c2a:	7cfb      	ldrb	r3, [r7, #19]
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	d13b      	bne.n	8016ca8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016c30:	7f3a      	ldrb	r2, [r7, #28]
 8016c32:	4973      	ldr	r1, [pc, #460]	; (8016e00 <etharp_find_entry+0x278>)
 8016c34:	4613      	mov	r3, r2
 8016c36:	005b      	lsls	r3, r3, #1
 8016c38:	4413      	add	r3, r2
 8016c3a:	00db      	lsls	r3, r3, #3
 8016c3c:	440b      	add	r3, r1
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d018      	beq.n	8016c76 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8016c44:	7f3a      	ldrb	r2, [r7, #28]
 8016c46:	496e      	ldr	r1, [pc, #440]	; (8016e00 <etharp_find_entry+0x278>)
 8016c48:	4613      	mov	r3, r2
 8016c4a:	005b      	lsls	r3, r3, #1
 8016c4c:	4413      	add	r3, r2
 8016c4e:	00db      	lsls	r3, r3, #3
 8016c50:	440b      	add	r3, r1
 8016c52:	3312      	adds	r3, #18
 8016c54:	881b      	ldrh	r3, [r3, #0]
 8016c56:	8b3a      	ldrh	r2, [r7, #24]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d840      	bhi.n	8016cde <etharp_find_entry+0x156>
            old_queue = i;
 8016c5c:	7f3b      	ldrb	r3, [r7, #28]
 8016c5e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8016c60:	7f3a      	ldrb	r2, [r7, #28]
 8016c62:	4967      	ldr	r1, [pc, #412]	; (8016e00 <etharp_find_entry+0x278>)
 8016c64:	4613      	mov	r3, r2
 8016c66:	005b      	lsls	r3, r3, #1
 8016c68:	4413      	add	r3, r2
 8016c6a:	00db      	lsls	r3, r3, #3
 8016c6c:	440b      	add	r3, r1
 8016c6e:	3312      	adds	r3, #18
 8016c70:	881b      	ldrh	r3, [r3, #0]
 8016c72:	833b      	strh	r3, [r7, #24]
 8016c74:	e033      	b.n	8016cde <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016c76:	7f3a      	ldrb	r2, [r7, #28]
 8016c78:	4961      	ldr	r1, [pc, #388]	; (8016e00 <etharp_find_entry+0x278>)
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	005b      	lsls	r3, r3, #1
 8016c7e:	4413      	add	r3, r2
 8016c80:	00db      	lsls	r3, r3, #3
 8016c82:	440b      	add	r3, r1
 8016c84:	3312      	adds	r3, #18
 8016c86:	881b      	ldrh	r3, [r3, #0]
 8016c88:	8afa      	ldrh	r2, [r7, #22]
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d827      	bhi.n	8016cde <etharp_find_entry+0x156>
            old_pending = i;
 8016c8e:	7f3b      	ldrb	r3, [r7, #28]
 8016c90:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016c92:	7f3a      	ldrb	r2, [r7, #28]
 8016c94:	495a      	ldr	r1, [pc, #360]	; (8016e00 <etharp_find_entry+0x278>)
 8016c96:	4613      	mov	r3, r2
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	4413      	add	r3, r2
 8016c9c:	00db      	lsls	r3, r3, #3
 8016c9e:	440b      	add	r3, r1
 8016ca0:	3312      	adds	r3, #18
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	82fb      	strh	r3, [r7, #22]
 8016ca6:	e01a      	b.n	8016cde <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016ca8:	7cfb      	ldrb	r3, [r7, #19]
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d917      	bls.n	8016cde <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016cae:	7f3a      	ldrb	r2, [r7, #28]
 8016cb0:	4953      	ldr	r1, [pc, #332]	; (8016e00 <etharp_find_entry+0x278>)
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	4413      	add	r3, r2
 8016cb8:	00db      	lsls	r3, r3, #3
 8016cba:	440b      	add	r3, r1
 8016cbc:	3312      	adds	r3, #18
 8016cbe:	881b      	ldrh	r3, [r3, #0]
 8016cc0:	8aba      	ldrh	r2, [r7, #20]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d80b      	bhi.n	8016cde <etharp_find_entry+0x156>
            old_stable = i;
 8016cc6:	7f3b      	ldrb	r3, [r7, #28]
 8016cc8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8016cca:	7f3a      	ldrb	r2, [r7, #28]
 8016ccc:	494c      	ldr	r1, [pc, #304]	; (8016e00 <etharp_find_entry+0x278>)
 8016cce:	4613      	mov	r3, r2
 8016cd0:	005b      	lsls	r3, r3, #1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	00db      	lsls	r3, r3, #3
 8016cd6:	440b      	add	r3, r1
 8016cd8:	3312      	adds	r3, #18
 8016cda:	881b      	ldrh	r3, [r3, #0]
 8016cdc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cde:	7f3b      	ldrb	r3, [r7, #28]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	773b      	strb	r3, [r7, #28]
 8016ce4:	7f3b      	ldrb	r3, [r7, #28]
 8016ce6:	2b09      	cmp	r3, #9
 8016ce8:	f67f af68 	bls.w	8016bbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016cec:	7afb      	ldrb	r3, [r7, #11]
 8016cee:	f003 0302 	and.w	r3, r3, #2
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d108      	bne.n	8016d08 <etharp_find_entry+0x180>
 8016cf6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016cfa:	2b0a      	cmp	r3, #10
 8016cfc:	d107      	bne.n	8016d0e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016cfe:	7afb      	ldrb	r3, [r7, #11]
 8016d00:	f003 0301 	and.w	r3, r3, #1
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d102      	bne.n	8016d0e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8016d08:	f04f 33ff 	mov.w	r3, #4294967295
 8016d0c:	e073      	b.n	8016df6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016d0e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016d12:	2b09      	cmp	r3, #9
 8016d14:	dc02      	bgt.n	8016d1c <etharp_find_entry+0x194>
    i = empty;
 8016d16:	7f7b      	ldrb	r3, [r7, #29]
 8016d18:	773b      	strb	r3, [r7, #28]
 8016d1a:	e036      	b.n	8016d8a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016d1c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016d20:	2b09      	cmp	r3, #9
 8016d22:	dc13      	bgt.n	8016d4c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8016d24:	7fbb      	ldrb	r3, [r7, #30]
 8016d26:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016d28:	7f3a      	ldrb	r2, [r7, #28]
 8016d2a:	4935      	ldr	r1, [pc, #212]	; (8016e00 <etharp_find_entry+0x278>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d018      	beq.n	8016d6e <etharp_find_entry+0x1e6>
 8016d3c:	4b31      	ldr	r3, [pc, #196]	; (8016e04 <etharp_find_entry+0x27c>)
 8016d3e:	f240 126f 	movw	r2, #367	; 0x16f
 8016d42:	4933      	ldr	r1, [pc, #204]	; (8016e10 <etharp_find_entry+0x288>)
 8016d44:	4831      	ldr	r0, [pc, #196]	; (8016e0c <etharp_find_entry+0x284>)
 8016d46:	f002 fa8b 	bl	8019260 <iprintf>
 8016d4a:	e010      	b.n	8016d6e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016d50:	2b09      	cmp	r3, #9
 8016d52:	dc02      	bgt.n	8016d5a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8016d54:	7ffb      	ldrb	r3, [r7, #31]
 8016d56:	773b      	strb	r3, [r7, #28]
 8016d58:	e009      	b.n	8016d6e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016d5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016d5e:	2b09      	cmp	r3, #9
 8016d60:	dc02      	bgt.n	8016d68 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016d62:	7efb      	ldrb	r3, [r7, #27]
 8016d64:	773b      	strb	r3, [r7, #28]
 8016d66:	e002      	b.n	8016d6e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8016d68:	f04f 33ff 	mov.w	r3, #4294967295
 8016d6c:	e043      	b.n	8016df6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d6e:	7f3b      	ldrb	r3, [r7, #28]
 8016d70:	2b09      	cmp	r3, #9
 8016d72:	d906      	bls.n	8016d82 <etharp_find_entry+0x1fa>
 8016d74:	4b23      	ldr	r3, [pc, #140]	; (8016e04 <etharp_find_entry+0x27c>)
 8016d76:	f240 1281 	movw	r2, #385	; 0x181
 8016d7a:	4926      	ldr	r1, [pc, #152]	; (8016e14 <etharp_find_entry+0x28c>)
 8016d7c:	4823      	ldr	r0, [pc, #140]	; (8016e0c <etharp_find_entry+0x284>)
 8016d7e:	f002 fa6f 	bl	8019260 <iprintf>
    etharp_free_entry(i);
 8016d82:	7f3b      	ldrb	r3, [r7, #28]
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7ff fe25 	bl	80169d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d8a:	7f3b      	ldrb	r3, [r7, #28]
 8016d8c:	2b09      	cmp	r3, #9
 8016d8e:	d906      	bls.n	8016d9e <etharp_find_entry+0x216>
 8016d90:	4b1c      	ldr	r3, [pc, #112]	; (8016e04 <etharp_find_entry+0x27c>)
 8016d92:	f240 1285 	movw	r2, #389	; 0x185
 8016d96:	491f      	ldr	r1, [pc, #124]	; (8016e14 <etharp_find_entry+0x28c>)
 8016d98:	481c      	ldr	r0, [pc, #112]	; (8016e0c <etharp_find_entry+0x284>)
 8016d9a:	f002 fa61 	bl	8019260 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016d9e:	7f3a      	ldrb	r2, [r7, #28]
 8016da0:	4917      	ldr	r1, [pc, #92]	; (8016e00 <etharp_find_entry+0x278>)
 8016da2:	4613      	mov	r3, r2
 8016da4:	005b      	lsls	r3, r3, #1
 8016da6:	4413      	add	r3, r2
 8016da8:	00db      	lsls	r3, r3, #3
 8016daa:	440b      	add	r3, r1
 8016dac:	3314      	adds	r3, #20
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d006      	beq.n	8016dc2 <etharp_find_entry+0x23a>
 8016db4:	4b13      	ldr	r3, [pc, #76]	; (8016e04 <etharp_find_entry+0x27c>)
 8016db6:	f240 1287 	movw	r2, #391	; 0x187
 8016dba:	4917      	ldr	r1, [pc, #92]	; (8016e18 <etharp_find_entry+0x290>)
 8016dbc:	4813      	ldr	r0, [pc, #76]	; (8016e0c <etharp_find_entry+0x284>)
 8016dbe:	f002 fa4f 	bl	8019260 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00a      	beq.n	8016dde <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016dc8:	7f3a      	ldrb	r2, [r7, #28]
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	6819      	ldr	r1, [r3, #0]
 8016dce:	480c      	ldr	r0, [pc, #48]	; (8016e00 <etharp_find_entry+0x278>)
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	005b      	lsls	r3, r3, #1
 8016dd4:	4413      	add	r3, r2
 8016dd6:	00db      	lsls	r3, r3, #3
 8016dd8:	4403      	add	r3, r0
 8016dda:	3304      	adds	r3, #4
 8016ddc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016dde:	7f3a      	ldrb	r2, [r7, #28]
 8016de0:	4907      	ldr	r1, [pc, #28]	; (8016e00 <etharp_find_entry+0x278>)
 8016de2:	4613      	mov	r3, r2
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	4413      	add	r3, r2
 8016de8:	00db      	lsls	r3, r3, #3
 8016dea:	440b      	add	r3, r1
 8016dec:	3312      	adds	r3, #18
 8016dee:	2200      	movs	r2, #0
 8016df0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016df2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3720      	adds	r7, #32
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	2000c844 	.word	0x2000c844
 8016e04:	0801c6d4 	.word	0x0801c6d4
 8016e08:	0801c730 	.word	0x0801c730
 8016e0c:	0801c770 	.word	0x0801c770
 8016e10:	0801c798 	.word	0x0801c798
 8016e14:	0801c7b0 	.word	0x0801c7b0
 8016e18:	0801c7c4 	.word	0x0801c7c4

08016e1c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b088      	sub	sp, #32
 8016e20:	af02      	add	r7, sp, #8
 8016e22:	60f8      	str	r0, [r7, #12]
 8016e24:	60b9      	str	r1, [r7, #8]
 8016e26:	607a      	str	r2, [r7, #4]
 8016e28:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016e30:	2b06      	cmp	r3, #6
 8016e32:	d006      	beq.n	8016e42 <etharp_update_arp_entry+0x26>
 8016e34:	4b48      	ldr	r3, [pc, #288]	; (8016f58 <etharp_update_arp_entry+0x13c>)
 8016e36:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016e3a:	4948      	ldr	r1, [pc, #288]	; (8016f5c <etharp_update_arp_entry+0x140>)
 8016e3c:	4848      	ldr	r0, [pc, #288]	; (8016f60 <etharp_update_arp_entry+0x144>)
 8016e3e:	f002 fa0f 	bl	8019260 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d012      	beq.n	8016e6e <etharp_update_arp_entry+0x52>
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d00e      	beq.n	8016e6e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	68f9      	ldr	r1, [r7, #12]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f001 f8da 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8016e5c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d105      	bne.n	8016e6e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e6a:	2be0      	cmp	r3, #224	; 0xe0
 8016e6c:	d102      	bne.n	8016e74 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e6e:	f06f 030f 	mvn.w	r3, #15
 8016e72:	e06c      	b.n	8016f4e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016e74:	78fb      	ldrb	r3, [r7, #3]
 8016e76:	68fa      	ldr	r2, [r7, #12]
 8016e78:	4619      	mov	r1, r3
 8016e7a:	68b8      	ldr	r0, [r7, #8]
 8016e7c:	f7ff fe84 	bl	8016b88 <etharp_find_entry>
 8016e80:	4603      	mov	r3, r0
 8016e82:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	da02      	bge.n	8016e92 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016e90:	e05d      	b.n	8016f4e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016e92:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016e96:	4933      	ldr	r1, [pc, #204]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016e98:	4613      	mov	r3, r2
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	4413      	add	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	440b      	add	r3, r1
 8016ea2:	3314      	adds	r3, #20
 8016ea4:	2202      	movs	r2, #2
 8016ea6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016ea8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016eac:	492d      	ldr	r1, [pc, #180]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016eae:	4613      	mov	r3, r2
 8016eb0:	005b      	lsls	r3, r3, #1
 8016eb2:	4413      	add	r3, r2
 8016eb4:	00db      	lsls	r3, r3, #3
 8016eb6:	440b      	add	r3, r1
 8016eb8:	3308      	adds	r3, #8
 8016eba:	68fa      	ldr	r2, [r7, #12]
 8016ebc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8016ebe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	005b      	lsls	r3, r3, #1
 8016ec6:	4413      	add	r3, r2
 8016ec8:	00db      	lsls	r3, r3, #3
 8016eca:	3308      	adds	r3, #8
 8016ecc:	4a25      	ldr	r2, [pc, #148]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016ece:	4413      	add	r3, r2
 8016ed0:	3304      	adds	r3, #4
 8016ed2:	2206      	movs	r2, #6
 8016ed4:	6879      	ldr	r1, [r7, #4]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f002 f9af 	bl	801923a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016edc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016ee0:	4920      	ldr	r1, [pc, #128]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	4413      	add	r3, r2
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	440b      	add	r3, r1
 8016eec:	3312      	adds	r3, #18
 8016eee:	2200      	movs	r2, #0
 8016ef0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016ef2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016ef6:	491b      	ldr	r1, [pc, #108]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016ef8:	4613      	mov	r3, r2
 8016efa:	005b      	lsls	r3, r3, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	440b      	add	r3, r1
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d021      	beq.n	8016f4c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016f08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016f0c:	4915      	ldr	r1, [pc, #84]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016f0e:	4613      	mov	r3, r2
 8016f10:	005b      	lsls	r3, r3, #1
 8016f12:	4413      	add	r3, r2
 8016f14:	00db      	lsls	r3, r3, #3
 8016f16:	440b      	add	r3, r1
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016f1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016f20:	4910      	ldr	r1, [pc, #64]	; (8016f64 <etharp_update_arp_entry+0x148>)
 8016f22:	4613      	mov	r3, r2
 8016f24:	005b      	lsls	r3, r3, #1
 8016f26:	4413      	add	r3, r2
 8016f28:	00db      	lsls	r3, r3, #3
 8016f2a:	440b      	add	r3, r1
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6939      	ldr	r1, [r7, #16]
 8016f40:	68f8      	ldr	r0, [r7, #12]
 8016f42:	f001 ff07 	bl	8018d54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016f46:	6938      	ldr	r0, [r7, #16]
 8016f48:	f7f9 fcae 	bl	80108a8 <pbuf_free>
  }
  return ERR_OK;
 8016f4c:	2300      	movs	r3, #0
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3718      	adds	r7, #24
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	0801c6d4 	.word	0x0801c6d4
 8016f5c:	0801c7f0 	.word	0x0801c7f0
 8016f60:	0801c770 	.word	0x0801c770
 8016f64:	2000c844 	.word	0x2000c844

08016f68 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f70:	2300      	movs	r3, #0
 8016f72:	73fb      	strb	r3, [r7, #15]
 8016f74:	e01f      	b.n	8016fb6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8016f76:	7bfa      	ldrb	r2, [r7, #15]
 8016f78:	4912      	ldr	r1, [pc, #72]	; (8016fc4 <etharp_cleanup_netif+0x5c>)
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	4413      	add	r3, r2
 8016f80:	00db      	lsls	r3, r3, #3
 8016f82:	440b      	add	r3, r1
 8016f84:	3314      	adds	r3, #20
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016f8a:	7bbb      	ldrb	r3, [r7, #14]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d00f      	beq.n	8016fb0 <etharp_cleanup_netif+0x48>
 8016f90:	7bfa      	ldrb	r2, [r7, #15]
 8016f92:	490c      	ldr	r1, [pc, #48]	; (8016fc4 <etharp_cleanup_netif+0x5c>)
 8016f94:	4613      	mov	r3, r2
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	4413      	add	r3, r2
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	440b      	add	r3, r1
 8016f9e:	3308      	adds	r3, #8
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	687a      	ldr	r2, [r7, #4]
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d103      	bne.n	8016fb0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8016fa8:	7bfb      	ldrb	r3, [r7, #15]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7ff fd12 	bl	80169d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fb0:	7bfb      	ldrb	r3, [r7, #15]
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	73fb      	strb	r3, [r7, #15]
 8016fb6:	7bfb      	ldrb	r3, [r7, #15]
 8016fb8:	2b09      	cmp	r3, #9
 8016fba:	d9dc      	bls.n	8016f76 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016fbc:	bf00      	nop
 8016fbe:	3710      	adds	r7, #16
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	2000c844 	.word	0x2000c844

08016fc8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016fc8:	b5b0      	push	{r4, r5, r7, lr}
 8016fca:	b08a      	sub	sp, #40	; 0x28
 8016fcc:	af04      	add	r7, sp, #16
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d107      	bne.n	8016fe8 <etharp_input+0x20>
 8016fd8:	4b3d      	ldr	r3, [pc, #244]	; (80170d0 <etharp_input+0x108>)
 8016fda:	f44f 7222 	mov.w	r2, #648	; 0x288
 8016fde:	493d      	ldr	r1, [pc, #244]	; (80170d4 <etharp_input+0x10c>)
 8016fe0:	483d      	ldr	r0, [pc, #244]	; (80170d8 <etharp_input+0x110>)
 8016fe2:	f002 f93d 	bl	8019260 <iprintf>
 8016fe6:	e06f      	b.n	80170c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	685b      	ldr	r3, [r3, #4]
 8016fec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ff8:	d10c      	bne.n	8017014 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016ffe:	2b06      	cmp	r3, #6
 8017000:	d108      	bne.n	8017014 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017006:	2b04      	cmp	r3, #4
 8017008:	d104      	bne.n	8017014 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	885b      	ldrh	r3, [r3, #2]
 801700e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017010:	2b08      	cmp	r3, #8
 8017012:	d003      	beq.n	801701c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f7f9 fc47 	bl	80108a8 <pbuf_free>
    return;
 801701a:	e055      	b.n	80170c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	330e      	adds	r3, #14
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	3318      	adds	r3, #24
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	3304      	adds	r3, #4
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d102      	bne.n	801703c <etharp_input+0x74>
    for_us = 0;
 8017036:	2300      	movs	r3, #0
 8017038:	75fb      	strb	r3, [r7, #23]
 801703a:	e009      	b.n	8017050 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801703c:	68ba      	ldr	r2, [r7, #8]
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	3304      	adds	r3, #4
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	429a      	cmp	r2, r3
 8017046:	bf0c      	ite	eq
 8017048:	2301      	moveq	r3, #1
 801704a:	2300      	movne	r3, #0
 801704c:	b2db      	uxtb	r3, r3
 801704e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	f103 0208 	add.w	r2, r3, #8
 8017056:	7dfb      	ldrb	r3, [r7, #23]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d001      	beq.n	8017060 <etharp_input+0x98>
 801705c:	2301      	movs	r3, #1
 801705e:	e000      	b.n	8017062 <etharp_input+0x9a>
 8017060:	2302      	movs	r3, #2
 8017062:	f107 010c 	add.w	r1, r7, #12
 8017066:	6838      	ldr	r0, [r7, #0]
 8017068:	f7ff fed8 	bl	8016e1c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	88db      	ldrh	r3, [r3, #6]
 8017070:	b29b      	uxth	r3, r3
 8017072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017076:	d003      	beq.n	8017080 <etharp_input+0xb8>
 8017078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801707c:	d01e      	beq.n	80170bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801707e:	e020      	b.n	80170c2 <etharp_input+0xfa>
    if (for_us) {
 8017080:	7dfb      	ldrb	r3, [r7, #23]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d01c      	beq.n	80170c0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801709c:	693a      	ldr	r2, [r7, #16]
 801709e:	3208      	adds	r2, #8
      etharp_raw(netif,
 80170a0:	2102      	movs	r1, #2
 80170a2:	9103      	str	r1, [sp, #12]
 80170a4:	f107 010c 	add.w	r1, r7, #12
 80170a8:	9102      	str	r1, [sp, #8]
 80170aa:	9201      	str	r2, [sp, #4]
 80170ac:	9300      	str	r3, [sp, #0]
 80170ae:	462b      	mov	r3, r5
 80170b0:	4622      	mov	r2, r4
 80170b2:	4601      	mov	r1, r0
 80170b4:	6838      	ldr	r0, [r7, #0]
 80170b6:	f000 fae3 	bl	8017680 <etharp_raw>
    break;
 80170ba:	e001      	b.n	80170c0 <etharp_input+0xf8>
    break;
 80170bc:	bf00      	nop
 80170be:	e000      	b.n	80170c2 <etharp_input+0xfa>
    break;
 80170c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f7f9 fbf0 	bl	80108a8 <pbuf_free>
}
 80170c8:	3718      	adds	r7, #24
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bdb0      	pop	{r4, r5, r7, pc}
 80170ce:	bf00      	nop
 80170d0:	0801c6d4 	.word	0x0801c6d4
 80170d4:	0801c848 	.word	0x0801c848
 80170d8:	0801c770 	.word	0x0801c770

080170dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af02      	add	r7, sp, #8
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	4613      	mov	r3, r2
 80170e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80170ea:	79fa      	ldrb	r2, [r7, #7]
 80170ec:	4944      	ldr	r1, [pc, #272]	; (8017200 <etharp_output_to_arp_index+0x124>)
 80170ee:	4613      	mov	r3, r2
 80170f0:	005b      	lsls	r3, r3, #1
 80170f2:	4413      	add	r3, r2
 80170f4:	00db      	lsls	r3, r3, #3
 80170f6:	440b      	add	r3, r1
 80170f8:	3314      	adds	r3, #20
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d806      	bhi.n	801710e <etharp_output_to_arp_index+0x32>
 8017100:	4b40      	ldr	r3, [pc, #256]	; (8017204 <etharp_output_to_arp_index+0x128>)
 8017102:	f240 22ed 	movw	r2, #749	; 0x2ed
 8017106:	4940      	ldr	r1, [pc, #256]	; (8017208 <etharp_output_to_arp_index+0x12c>)
 8017108:	4840      	ldr	r0, [pc, #256]	; (801720c <etharp_output_to_arp_index+0x130>)
 801710a:	f002 f8a9 	bl	8019260 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801710e:	79fa      	ldrb	r2, [r7, #7]
 8017110:	493b      	ldr	r1, [pc, #236]	; (8017200 <etharp_output_to_arp_index+0x124>)
 8017112:	4613      	mov	r3, r2
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	4413      	add	r3, r2
 8017118:	00db      	lsls	r3, r3, #3
 801711a:	440b      	add	r3, r1
 801711c:	3314      	adds	r3, #20
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b02      	cmp	r3, #2
 8017122:	d153      	bne.n	80171cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017124:	79fa      	ldrb	r2, [r7, #7]
 8017126:	4936      	ldr	r1, [pc, #216]	; (8017200 <etharp_output_to_arp_index+0x124>)
 8017128:	4613      	mov	r3, r2
 801712a:	005b      	lsls	r3, r3, #1
 801712c:	4413      	add	r3, r2
 801712e:	00db      	lsls	r3, r3, #3
 8017130:	440b      	add	r3, r1
 8017132:	3312      	adds	r3, #18
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801713a:	d919      	bls.n	8017170 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801713c:	79fa      	ldrb	r2, [r7, #7]
 801713e:	4613      	mov	r3, r2
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	4413      	add	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	4a2e      	ldr	r2, [pc, #184]	; (8017200 <etharp_output_to_arp_index+0x124>)
 8017148:	4413      	add	r3, r2
 801714a:	3304      	adds	r3, #4
 801714c:	4619      	mov	r1, r3
 801714e:	68f8      	ldr	r0, [r7, #12]
 8017150:	f000 fb44 	bl	80177dc <etharp_request>
 8017154:	4603      	mov	r3, r0
 8017156:	2b00      	cmp	r3, #0
 8017158:	d138      	bne.n	80171cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801715a:	79fa      	ldrb	r2, [r7, #7]
 801715c:	4928      	ldr	r1, [pc, #160]	; (8017200 <etharp_output_to_arp_index+0x124>)
 801715e:	4613      	mov	r3, r2
 8017160:	005b      	lsls	r3, r3, #1
 8017162:	4413      	add	r3, r2
 8017164:	00db      	lsls	r3, r3, #3
 8017166:	440b      	add	r3, r1
 8017168:	3314      	adds	r3, #20
 801716a:	2203      	movs	r2, #3
 801716c:	701a      	strb	r2, [r3, #0]
 801716e:	e02d      	b.n	80171cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017170:	79fa      	ldrb	r2, [r7, #7]
 8017172:	4923      	ldr	r1, [pc, #140]	; (8017200 <etharp_output_to_arp_index+0x124>)
 8017174:	4613      	mov	r3, r2
 8017176:	005b      	lsls	r3, r3, #1
 8017178:	4413      	add	r3, r2
 801717a:	00db      	lsls	r3, r3, #3
 801717c:	440b      	add	r3, r1
 801717e:	3312      	adds	r3, #18
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017186:	d321      	bcc.n	80171cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017188:	79fa      	ldrb	r2, [r7, #7]
 801718a:	4613      	mov	r3, r2
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	4413      	add	r3, r2
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	4a1b      	ldr	r2, [pc, #108]	; (8017200 <etharp_output_to_arp_index+0x124>)
 8017194:	4413      	add	r3, r2
 8017196:	1d19      	adds	r1, r3, #4
 8017198:	79fa      	ldrb	r2, [r7, #7]
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	3308      	adds	r3, #8
 80171a4:	4a16      	ldr	r2, [pc, #88]	; (8017200 <etharp_output_to_arp_index+0x124>)
 80171a6:	4413      	add	r3, r2
 80171a8:	3304      	adds	r3, #4
 80171aa:	461a      	mov	r2, r3
 80171ac:	68f8      	ldr	r0, [r7, #12]
 80171ae:	f000 faf3 	bl	8017798 <etharp_request_dst>
 80171b2:	4603      	mov	r3, r0
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d109      	bne.n	80171cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80171b8:	79fa      	ldrb	r2, [r7, #7]
 80171ba:	4911      	ldr	r1, [pc, #68]	; (8017200 <etharp_output_to_arp_index+0x124>)
 80171bc:	4613      	mov	r3, r2
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	4413      	add	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	3314      	adds	r3, #20
 80171c8:	2203      	movs	r2, #3
 80171ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80171d2:	79fa      	ldrb	r2, [r7, #7]
 80171d4:	4613      	mov	r3, r2
 80171d6:	005b      	lsls	r3, r3, #1
 80171d8:	4413      	add	r3, r2
 80171da:	00db      	lsls	r3, r3, #3
 80171dc:	3308      	adds	r3, #8
 80171de:	4a08      	ldr	r2, [pc, #32]	; (8017200 <etharp_output_to_arp_index+0x124>)
 80171e0:	4413      	add	r3, r2
 80171e2:	1d1a      	adds	r2, r3, #4
 80171e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80171e8:	9300      	str	r3, [sp, #0]
 80171ea:	4613      	mov	r3, r2
 80171ec:	460a      	mov	r2, r1
 80171ee:	68b9      	ldr	r1, [r7, #8]
 80171f0:	68f8      	ldr	r0, [r7, #12]
 80171f2:	f001 fdaf 	bl	8018d54 <ethernet_output>
 80171f6:	4603      	mov	r3, r0
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3710      	adds	r7, #16
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	2000c844 	.word	0x2000c844
 8017204:	0801c6d4 	.word	0x0801c6d4
 8017208:	0801c868 	.word	0x0801c868
 801720c:	0801c770 	.word	0x0801c770

08017210 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b08a      	sub	sp, #40	; 0x28
 8017214:	af02      	add	r7, sp, #8
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d106      	bne.n	8017234 <etharp_output+0x24>
 8017226:	4b69      	ldr	r3, [pc, #420]	; (80173cc <etharp_output+0x1bc>)
 8017228:	f240 321b 	movw	r2, #795	; 0x31b
 801722c:	4968      	ldr	r1, [pc, #416]	; (80173d0 <etharp_output+0x1c0>)
 801722e:	4869      	ldr	r0, [pc, #420]	; (80173d4 <etharp_output+0x1c4>)
 8017230:	f002 f816 	bl	8019260 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <etharp_output+0x38>
 801723a:	4b64      	ldr	r3, [pc, #400]	; (80173cc <etharp_output+0x1bc>)
 801723c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017240:	4965      	ldr	r1, [pc, #404]	; (80173d8 <etharp_output+0x1c8>)
 8017242:	4864      	ldr	r0, [pc, #400]	; (80173d4 <etharp_output+0x1c4>)
 8017244:	f002 f80c 	bl	8019260 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d106      	bne.n	801725c <etharp_output+0x4c>
 801724e:	4b5f      	ldr	r3, [pc, #380]	; (80173cc <etharp_output+0x1bc>)
 8017250:	f240 321d 	movw	r2, #797	; 0x31d
 8017254:	4961      	ldr	r1, [pc, #388]	; (80173dc <etharp_output+0x1cc>)
 8017256:	485f      	ldr	r0, [pc, #380]	; (80173d4 <etharp_output+0x1c4>)
 8017258:	f002 f802 	bl	8019260 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	68f9      	ldr	r1, [r7, #12]
 8017262:	4618      	mov	r0, r3
 8017264:	f000 fed4 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017268:	4603      	mov	r3, r0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d002      	beq.n	8017274 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801726e:	4b5c      	ldr	r3, [pc, #368]	; (80173e0 <etharp_output+0x1d0>)
 8017270:	61fb      	str	r3, [r7, #28]
 8017272:	e09b      	b.n	80173ac <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801727c:	2be0      	cmp	r3, #224	; 0xe0
 801727e:	d118      	bne.n	80172b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017280:	2301      	movs	r3, #1
 8017282:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017284:	2300      	movs	r3, #0
 8017286:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017288:	235e      	movs	r3, #94	; 0x5e
 801728a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	3301      	adds	r3, #1
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017296:	b2db      	uxtb	r3, r3
 8017298:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	3302      	adds	r3, #2
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	3303      	adds	r3, #3
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80172aa:	f107 0310 	add.w	r3, r7, #16
 80172ae:	61fb      	str	r3, [r7, #28]
 80172b0:	e07c      	b.n	80173ac <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681a      	ldr	r2, [r3, #0]
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	3304      	adds	r3, #4
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	405a      	eors	r2, r3
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	3308      	adds	r3, #8
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4013      	ands	r3, r2
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d012      	beq.n	80172f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80172d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80172d4:	4293      	cmp	r3, r2
 80172d6:	d00b      	beq.n	80172f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	330c      	adds	r3, #12
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d003      	beq.n	80172ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	330c      	adds	r3, #12
 80172e6:	61bb      	str	r3, [r7, #24]
 80172e8:	e002      	b.n	80172f0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80172ea:	f06f 0303 	mvn.w	r3, #3
 80172ee:	e069      	b.n	80173c4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80172f0:	4b3c      	ldr	r3, [pc, #240]	; (80173e4 <etharp_output+0x1d4>)
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	4619      	mov	r1, r3
 80172f6:	4a3c      	ldr	r2, [pc, #240]	; (80173e8 <etharp_output+0x1d8>)
 80172f8:	460b      	mov	r3, r1
 80172fa:	005b      	lsls	r3, r3, #1
 80172fc:	440b      	add	r3, r1
 80172fe:	00db      	lsls	r3, r3, #3
 8017300:	4413      	add	r3, r2
 8017302:	3314      	adds	r3, #20
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	2b01      	cmp	r3, #1
 8017308:	d917      	bls.n	801733a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	4b35      	ldr	r3, [pc, #212]	; (80173e4 <etharp_output+0x1d4>)
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	4618      	mov	r0, r3
 8017314:	4934      	ldr	r1, [pc, #208]	; (80173e8 <etharp_output+0x1d8>)
 8017316:	4603      	mov	r3, r0
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4403      	add	r3, r0
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	440b      	add	r3, r1
 8017320:	3304      	adds	r3, #4
 8017322:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017324:	429a      	cmp	r2, r3
 8017326:	d108      	bne.n	801733a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017328:	4b2e      	ldr	r3, [pc, #184]	; (80173e4 <etharp_output+0x1d4>)
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	461a      	mov	r2, r3
 801732e:	68b9      	ldr	r1, [r7, #8]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f7ff fed3 	bl	80170dc <etharp_output_to_arp_index>
 8017336:	4603      	mov	r3, r0
 8017338:	e044      	b.n	80173c4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801733a:	2300      	movs	r3, #0
 801733c:	75fb      	strb	r3, [r7, #23]
 801733e:	e02a      	b.n	8017396 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017340:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017344:	4928      	ldr	r1, [pc, #160]	; (80173e8 <etharp_output+0x1d8>)
 8017346:	4613      	mov	r3, r2
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	4413      	add	r3, r2
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	440b      	add	r3, r1
 8017350:	3314      	adds	r3, #20
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	2b01      	cmp	r3, #1
 8017356:	d918      	bls.n	801738a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017358:	69bb      	ldr	r3, [r7, #24]
 801735a:	6819      	ldr	r1, [r3, #0]
 801735c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017360:	4821      	ldr	r0, [pc, #132]	; (80173e8 <etharp_output+0x1d8>)
 8017362:	4613      	mov	r3, r2
 8017364:	005b      	lsls	r3, r3, #1
 8017366:	4413      	add	r3, r2
 8017368:	00db      	lsls	r3, r3, #3
 801736a:	4403      	add	r3, r0
 801736c:	3304      	adds	r3, #4
 801736e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017370:	4299      	cmp	r1, r3
 8017372:	d10a      	bne.n	801738a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8017374:	7dfa      	ldrb	r2, [r7, #23]
 8017376:	4b1b      	ldr	r3, [pc, #108]	; (80173e4 <etharp_output+0x1d4>)
 8017378:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801737a:	7dfb      	ldrb	r3, [r7, #23]
 801737c:	461a      	mov	r2, r3
 801737e:	68b9      	ldr	r1, [r7, #8]
 8017380:	68f8      	ldr	r0, [r7, #12]
 8017382:	f7ff feab 	bl	80170dc <etharp_output_to_arp_index>
 8017386:	4603      	mov	r3, r0
 8017388:	e01c      	b.n	80173c4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801738a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801738e:	b2db      	uxtb	r3, r3
 8017390:	3301      	adds	r3, #1
 8017392:	b2db      	uxtb	r3, r3
 8017394:	75fb      	strb	r3, [r7, #23]
 8017396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801739a:	2b09      	cmp	r3, #9
 801739c:	ddd0      	ble.n	8017340 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801739e:	68ba      	ldr	r2, [r7, #8]
 80173a0:	69b9      	ldr	r1, [r7, #24]
 80173a2:	68f8      	ldr	r0, [r7, #12]
 80173a4:	f000 f822 	bl	80173ec <etharp_query>
 80173a8:	4603      	mov	r3, r0
 80173aa:	e00b      	b.n	80173c4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80173b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	68b9      	ldr	r1, [r7, #8]
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f001 fcc9 	bl	8018d54 <ethernet_output>
 80173c2:	4603      	mov	r3, r0
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3720      	adds	r7, #32
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	0801c6d4 	.word	0x0801c6d4
 80173d0:	0801c848 	.word	0x0801c848
 80173d4:	0801c770 	.word	0x0801c770
 80173d8:	0801c898 	.word	0x0801c898
 80173dc:	0801c838 	.word	0x0801c838
 80173e0:	0801cf28 	.word	0x0801cf28
 80173e4:	2000c934 	.word	0x2000c934
 80173e8:	2000c844 	.word	0x2000c844

080173ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b08c      	sub	sp, #48	; 0x30
 80173f0:	af02      	add	r7, sp, #8
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	3325      	adds	r3, #37	; 0x25
 80173fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80173fe:	23ff      	movs	r3, #255	; 0xff
 8017400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017404:	2300      	movs	r3, #0
 8017406:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	68f9      	ldr	r1, [r7, #12]
 801740e:	4618      	mov	r0, r3
 8017410:	f000 fdfe 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d10c      	bne.n	8017434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017422:	2be0      	cmp	r3, #224	; 0xe0
 8017424:	d006      	beq.n	8017434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d003      	beq.n	8017434 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d102      	bne.n	801743a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017434:	f06f 030f 	mvn.w	r3, #15
 8017438:	e10f      	b.n	801765a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801743a:	68fa      	ldr	r2, [r7, #12]
 801743c:	2101      	movs	r1, #1
 801743e:	68b8      	ldr	r0, [r7, #8]
 8017440:	f7ff fba2 	bl	8016b88 <etharp_find_entry>
 8017444:	4603      	mov	r3, r0
 8017446:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8017448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801744c:	2b00      	cmp	r3, #0
 801744e:	da02      	bge.n	8017456 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8017450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017454:	e101      	b.n	801765a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017456:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801745a:	4982      	ldr	r1, [pc, #520]	; (8017664 <etharp_query+0x278>)
 801745c:	4613      	mov	r3, r2
 801745e:	005b      	lsls	r3, r3, #1
 8017460:	4413      	add	r3, r2
 8017462:	00db      	lsls	r3, r3, #3
 8017464:	440b      	add	r3, r1
 8017466:	3314      	adds	r3, #20
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d117      	bne.n	801749e <etharp_query+0xb2>
    is_new_entry = 1;
 801746e:	2301      	movs	r3, #1
 8017470:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017472:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017476:	497b      	ldr	r1, [pc, #492]	; (8017664 <etharp_query+0x278>)
 8017478:	4613      	mov	r3, r2
 801747a:	005b      	lsls	r3, r3, #1
 801747c:	4413      	add	r3, r2
 801747e:	00db      	lsls	r3, r3, #3
 8017480:	440b      	add	r3, r1
 8017482:	3314      	adds	r3, #20
 8017484:	2201      	movs	r2, #1
 8017486:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017488:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801748c:	4975      	ldr	r1, [pc, #468]	; (8017664 <etharp_query+0x278>)
 801748e:	4613      	mov	r3, r2
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	4413      	add	r3, r2
 8017494:	00db      	lsls	r3, r3, #3
 8017496:	440b      	add	r3, r1
 8017498:	3308      	adds	r3, #8
 801749a:	68fa      	ldr	r2, [r7, #12]
 801749c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801749e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80174a2:	4970      	ldr	r1, [pc, #448]	; (8017664 <etharp_query+0x278>)
 80174a4:	4613      	mov	r3, r2
 80174a6:	005b      	lsls	r3, r3, #1
 80174a8:	4413      	add	r3, r2
 80174aa:	00db      	lsls	r3, r3, #3
 80174ac:	440b      	add	r3, r1
 80174ae:	3314      	adds	r3, #20
 80174b0:	781b      	ldrb	r3, [r3, #0]
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d012      	beq.n	80174dc <etharp_query+0xf0>
 80174b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80174ba:	496a      	ldr	r1, [pc, #424]	; (8017664 <etharp_query+0x278>)
 80174bc:	4613      	mov	r3, r2
 80174be:	005b      	lsls	r3, r3, #1
 80174c0:	4413      	add	r3, r2
 80174c2:	00db      	lsls	r3, r3, #3
 80174c4:	440b      	add	r3, r1
 80174c6:	3314      	adds	r3, #20
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d806      	bhi.n	80174dc <etharp_query+0xf0>
 80174ce:	4b66      	ldr	r3, [pc, #408]	; (8017668 <etharp_query+0x27c>)
 80174d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80174d4:	4965      	ldr	r1, [pc, #404]	; (801766c <etharp_query+0x280>)
 80174d6:	4866      	ldr	r0, [pc, #408]	; (8017670 <etharp_query+0x284>)
 80174d8:	f001 fec2 	bl	8019260 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80174dc:	6a3b      	ldr	r3, [r7, #32]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d102      	bne.n	80174e8 <etharp_query+0xfc>
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d10c      	bne.n	8017502 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80174e8:	68b9      	ldr	r1, [r7, #8]
 80174ea:	68f8      	ldr	r0, [r7, #12]
 80174ec:	f000 f976 	bl	80177dc <etharp_request>
 80174f0:	4603      	mov	r3, r0
 80174f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d102      	bne.n	8017502 <etharp_query+0x116>
      return result;
 80174fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017500:	e0ab      	b.n	801765a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d106      	bne.n	8017516 <etharp_query+0x12a>
 8017508:	4b57      	ldr	r3, [pc, #348]	; (8017668 <etharp_query+0x27c>)
 801750a:	f240 32db 	movw	r2, #987	; 0x3db
 801750e:	4959      	ldr	r1, [pc, #356]	; (8017674 <etharp_query+0x288>)
 8017510:	4857      	ldr	r0, [pc, #348]	; (8017670 <etharp_query+0x284>)
 8017512:	f001 fea5 	bl	8019260 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017516:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801751a:	4952      	ldr	r1, [pc, #328]	; (8017664 <etharp_query+0x278>)
 801751c:	4613      	mov	r3, r2
 801751e:	005b      	lsls	r3, r3, #1
 8017520:	4413      	add	r3, r2
 8017522:	00db      	lsls	r3, r3, #3
 8017524:	440b      	add	r3, r1
 8017526:	3314      	adds	r3, #20
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	2b01      	cmp	r3, #1
 801752c:	d919      	bls.n	8017562 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801752e:	7cfa      	ldrb	r2, [r7, #19]
 8017530:	4b51      	ldr	r3, [pc, #324]	; (8017678 <etharp_query+0x28c>)
 8017532:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017534:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017538:	4613      	mov	r3, r2
 801753a:	005b      	lsls	r3, r3, #1
 801753c:	4413      	add	r3, r2
 801753e:	00db      	lsls	r3, r3, #3
 8017540:	3308      	adds	r3, #8
 8017542:	4a48      	ldr	r2, [pc, #288]	; (8017664 <etharp_query+0x278>)
 8017544:	4413      	add	r3, r2
 8017546:	1d1a      	adds	r2, r3, #4
 8017548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801754c:	9300      	str	r3, [sp, #0]
 801754e:	4613      	mov	r3, r2
 8017550:	697a      	ldr	r2, [r7, #20]
 8017552:	6879      	ldr	r1, [r7, #4]
 8017554:	68f8      	ldr	r0, [r7, #12]
 8017556:	f001 fbfd 	bl	8018d54 <ethernet_output>
 801755a:	4603      	mov	r3, r0
 801755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017560:	e079      	b.n	8017656 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017562:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017566:	493f      	ldr	r1, [pc, #252]	; (8017664 <etharp_query+0x278>)
 8017568:	4613      	mov	r3, r2
 801756a:	005b      	lsls	r3, r3, #1
 801756c:	4413      	add	r3, r2
 801756e:	00db      	lsls	r3, r3, #3
 8017570:	440b      	add	r3, r1
 8017572:	3314      	adds	r3, #20
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	2b01      	cmp	r3, #1
 8017578:	d16d      	bne.n	8017656 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801757a:	2300      	movs	r3, #0
 801757c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017582:	e01a      	b.n	80175ba <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	895a      	ldrh	r2, [r3, #10]
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	891b      	ldrh	r3, [r3, #8]
 801758c:	429a      	cmp	r2, r3
 801758e:	d10a      	bne.n	80175a6 <etharp_query+0x1ba>
 8017590:	69fb      	ldr	r3, [r7, #28]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d006      	beq.n	80175a6 <etharp_query+0x1ba>
 8017598:	4b33      	ldr	r3, [pc, #204]	; (8017668 <etharp_query+0x27c>)
 801759a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801759e:	4937      	ldr	r1, [pc, #220]	; (801767c <etharp_query+0x290>)
 80175a0:	4833      	ldr	r0, [pc, #204]	; (8017670 <etharp_query+0x284>)
 80175a2:	f001 fe5d 	bl	8019260 <iprintf>
      if (p->type != PBUF_ROM) {
 80175a6:	69fb      	ldr	r3, [r7, #28]
 80175a8:	7b1b      	ldrb	r3, [r3, #12]
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d002      	beq.n	80175b4 <etharp_query+0x1c8>
        copy_needed = 1;
 80175ae:	2301      	movs	r3, #1
 80175b0:	61bb      	str	r3, [r7, #24]
        break;
 80175b2:	e005      	b.n	80175c0 <etharp_query+0x1d4>
      }
      p = p->next;
 80175b4:	69fb      	ldr	r3, [r7, #28]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80175ba:	69fb      	ldr	r3, [r7, #28]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d1e1      	bne.n	8017584 <etharp_query+0x198>
    }
    if (copy_needed) {
 80175c0:	69bb      	ldr	r3, [r7, #24]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d017      	beq.n	80175f6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80175c6:	69fb      	ldr	r3, [r7, #28]
 80175c8:	891b      	ldrh	r3, [r3, #8]
 80175ca:	2200      	movs	r2, #0
 80175cc:	4619      	mov	r1, r3
 80175ce:	2002      	movs	r0, #2
 80175d0:	f7f8 fdf8 	bl	80101c4 <pbuf_alloc>
 80175d4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d011      	beq.n	8017600 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80175dc:	6879      	ldr	r1, [r7, #4]
 80175de:	69f8      	ldr	r0, [r7, #28]
 80175e0:	f7f9 fa92 	bl	8010b08 <pbuf_copy>
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d00a      	beq.n	8017600 <etharp_query+0x214>
          pbuf_free(p);
 80175ea:	69f8      	ldr	r0, [r7, #28]
 80175ec:	f7f9 f95c 	bl	80108a8 <pbuf_free>
          p = NULL;
 80175f0:	2300      	movs	r3, #0
 80175f2:	61fb      	str	r3, [r7, #28]
 80175f4:	e004      	b.n	8017600 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80175fa:	69f8      	ldr	r0, [r7, #28]
 80175fc:	f7f9 fa06 	bl	8010a0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d024      	beq.n	8017650 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017606:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801760a:	4916      	ldr	r1, [pc, #88]	; (8017664 <etharp_query+0x278>)
 801760c:	4613      	mov	r3, r2
 801760e:	005b      	lsls	r3, r3, #1
 8017610:	4413      	add	r3, r2
 8017612:	00db      	lsls	r3, r3, #3
 8017614:	440b      	add	r3, r1
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d00b      	beq.n	8017634 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801761c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017620:	4910      	ldr	r1, [pc, #64]	; (8017664 <etharp_query+0x278>)
 8017622:	4613      	mov	r3, r2
 8017624:	005b      	lsls	r3, r3, #1
 8017626:	4413      	add	r3, r2
 8017628:	00db      	lsls	r3, r3, #3
 801762a:	440b      	add	r3, r1
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	4618      	mov	r0, r3
 8017630:	f7f9 f93a 	bl	80108a8 <pbuf_free>
      }
      arp_table[i].q = p;
 8017634:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017638:	490a      	ldr	r1, [pc, #40]	; (8017664 <etharp_query+0x278>)
 801763a:	4613      	mov	r3, r2
 801763c:	005b      	lsls	r3, r3, #1
 801763e:	4413      	add	r3, r2
 8017640:	00db      	lsls	r3, r3, #3
 8017642:	440b      	add	r3, r1
 8017644:	69fa      	ldr	r2, [r7, #28]
 8017646:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017648:	2300      	movs	r3, #0
 801764a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801764e:	e002      	b.n	8017656 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017650:	23ff      	movs	r3, #255	; 0xff
 8017652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017656:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801765a:	4618      	mov	r0, r3
 801765c:	3728      	adds	r7, #40	; 0x28
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	2000c844 	.word	0x2000c844
 8017668:	0801c6d4 	.word	0x0801c6d4
 801766c:	0801c8a4 	.word	0x0801c8a4
 8017670:	0801c770 	.word	0x0801c770
 8017674:	0801c898 	.word	0x0801c898
 8017678:	2000c934 	.word	0x2000c934
 801767c:	0801c8cc 	.word	0x0801c8cc

08017680 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b08a      	sub	sp, #40	; 0x28
 8017684:	af02      	add	r7, sp, #8
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
 801768c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d106      	bne.n	80176a6 <etharp_raw+0x26>
 8017698:	4b3a      	ldr	r3, [pc, #232]	; (8017784 <etharp_raw+0x104>)
 801769a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801769e:	493a      	ldr	r1, [pc, #232]	; (8017788 <etharp_raw+0x108>)
 80176a0:	483a      	ldr	r0, [pc, #232]	; (801778c <etharp_raw+0x10c>)
 80176a2:	f001 fddd 	bl	8019260 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80176a6:	2200      	movs	r2, #0
 80176a8:	211c      	movs	r1, #28
 80176aa:	2002      	movs	r0, #2
 80176ac:	f7f8 fd8a 	bl	80101c4 <pbuf_alloc>
 80176b0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80176b2:	69bb      	ldr	r3, [r7, #24]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d102      	bne.n	80176be <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80176b8:	f04f 33ff 	mov.w	r3, #4294967295
 80176bc:	e05d      	b.n	801777a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80176be:	69bb      	ldr	r3, [r7, #24]
 80176c0:	895b      	ldrh	r3, [r3, #10]
 80176c2:	2b1b      	cmp	r3, #27
 80176c4:	d806      	bhi.n	80176d4 <etharp_raw+0x54>
 80176c6:	4b2f      	ldr	r3, [pc, #188]	; (8017784 <etharp_raw+0x104>)
 80176c8:	f240 4264 	movw	r2, #1124	; 0x464
 80176cc:	4930      	ldr	r1, [pc, #192]	; (8017790 <etharp_raw+0x110>)
 80176ce:	482f      	ldr	r0, [pc, #188]	; (801778c <etharp_raw+0x10c>)
 80176d0:	f001 fdc6 	bl	8019260 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	685b      	ldr	r3, [r3, #4]
 80176d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80176da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80176dc:	4618      	mov	r0, r3
 80176de:	f7f7 fec9 	bl	800f474 <lwip_htons>
 80176e2:	4603      	mov	r3, r0
 80176e4:	461a      	mov	r2, r3
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80176f0:	2b06      	cmp	r3, #6
 80176f2:	d006      	beq.n	8017702 <etharp_raw+0x82>
 80176f4:	4b23      	ldr	r3, [pc, #140]	; (8017784 <etharp_raw+0x104>)
 80176f6:	f240 426b 	movw	r2, #1131	; 0x46b
 80176fa:	4926      	ldr	r1, [pc, #152]	; (8017794 <etharp_raw+0x114>)
 80176fc:	4823      	ldr	r0, [pc, #140]	; (801778c <etharp_raw+0x10c>)
 80176fe:	f001 fdaf 	bl	8019260 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	3308      	adds	r3, #8
 8017706:	2206      	movs	r2, #6
 8017708:	6839      	ldr	r1, [r7, #0]
 801770a:	4618      	mov	r0, r3
 801770c:	f001 fd95 	bl	801923a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	3312      	adds	r3, #18
 8017714:	2206      	movs	r2, #6
 8017716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017718:	4618      	mov	r0, r3
 801771a:	f001 fd8e 	bl	801923a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	330e      	adds	r3, #14
 8017722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017724:	6812      	ldr	r2, [r2, #0]
 8017726:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	3318      	adds	r3, #24
 801772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801772e:	6812      	ldr	r2, [r2, #0]
 8017730:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8017732:	697b      	ldr	r3, [r7, #20]
 8017734:	2200      	movs	r2, #0
 8017736:	701a      	strb	r2, [r3, #0]
 8017738:	2200      	movs	r2, #0
 801773a:	f042 0201 	orr.w	r2, r2, #1
 801773e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	2200      	movs	r2, #0
 8017744:	f042 0208 	orr.w	r2, r2, #8
 8017748:	709a      	strb	r2, [r3, #2]
 801774a:	2200      	movs	r2, #0
 801774c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	2206      	movs	r2, #6
 8017752:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	2204      	movs	r2, #4
 8017758:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801775a:	f640 0306 	movw	r3, #2054	; 0x806
 801775e:	9300      	str	r3, [sp, #0]
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	68ba      	ldr	r2, [r7, #8]
 8017764:	69b9      	ldr	r1, [r7, #24]
 8017766:	68f8      	ldr	r0, [r7, #12]
 8017768:	f001 faf4 	bl	8018d54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801776c:	69b8      	ldr	r0, [r7, #24]
 801776e:	f7f9 f89b 	bl	80108a8 <pbuf_free>
  p = NULL;
 8017772:	2300      	movs	r3, #0
 8017774:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017776:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801777a:	4618      	mov	r0, r3
 801777c:	3720      	adds	r7, #32
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	0801c6d4 	.word	0x0801c6d4
 8017788:	0801c848 	.word	0x0801c848
 801778c:	0801c770 	.word	0x0801c770
 8017790:	0801c8e8 	.word	0x0801c8e8
 8017794:	0801c91c 	.word	0x0801c91c

08017798 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b088      	sub	sp, #32
 801779c:	af04      	add	r7, sp, #16
 801779e:	60f8      	str	r0, [r7, #12]
 80177a0:	60b9      	str	r1, [r7, #8]
 80177a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80177b4:	2201      	movs	r2, #1
 80177b6:	9203      	str	r2, [sp, #12]
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	9202      	str	r2, [sp, #8]
 80177bc:	4a06      	ldr	r2, [pc, #24]	; (80177d8 <etharp_request_dst+0x40>)
 80177be:	9201      	str	r2, [sp, #4]
 80177c0:	9300      	str	r3, [sp, #0]
 80177c2:	4603      	mov	r3, r0
 80177c4:	687a      	ldr	r2, [r7, #4]
 80177c6:	68f8      	ldr	r0, [r7, #12]
 80177c8:	f7ff ff5a 	bl	8017680 <etharp_raw>
 80177cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3710      	adds	r7, #16
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	bf00      	nop
 80177d8:	0801cf30 	.word	0x0801cf30

080177dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80177e6:	4a05      	ldr	r2, [pc, #20]	; (80177fc <etharp_request+0x20>)
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f7ff ffd4 	bl	8017798 <etharp_request_dst>
 80177f0:	4603      	mov	r3, r0
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3708      	adds	r7, #8
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}
 80177fa:	bf00      	nop
 80177fc:	0801cf28 	.word	0x0801cf28

08017800 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b08e      	sub	sp, #56	; 0x38
 8017804:	af04      	add	r7, sp, #16
 8017806:	6078      	str	r0, [r7, #4]
 8017808:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801780a:	4b7a      	ldr	r3, [pc, #488]	; (80179f4 <icmp_input+0x1f4>)
 801780c:	689b      	ldr	r3, [r3, #8]
 801780e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8017810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	b29b      	uxth	r3, r3
 8017816:	f003 030f 	and.w	r3, r3, #15
 801781a:	b29b      	uxth	r3, r3
 801781c:	009b      	lsls	r3, r3, #2
 801781e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017822:	2b13      	cmp	r3, #19
 8017824:	f240 80d1 	bls.w	80179ca <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	895b      	ldrh	r3, [r3, #10]
 801782c:	2b03      	cmp	r3, #3
 801782e:	f240 80ce 	bls.w	80179ce <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	685b      	ldr	r3, [r3, #4]
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801783c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017840:	2b00      	cmp	r3, #0
 8017842:	f000 80bb 	beq.w	80179bc <icmp_input+0x1bc>
 8017846:	2b08      	cmp	r3, #8
 8017848:	f040 80bb 	bne.w	80179c2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801784c:	4b6a      	ldr	r3, [pc, #424]	; (80179f8 <icmp_input+0x1f8>)
 801784e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017850:	4b68      	ldr	r3, [pc, #416]	; (80179f4 <icmp_input+0x1f4>)
 8017852:	695b      	ldr	r3, [r3, #20]
 8017854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017858:	2be0      	cmp	r3, #224	; 0xe0
 801785a:	f000 80bf 	beq.w	80179dc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801785e:	4b65      	ldr	r3, [pc, #404]	; (80179f4 <icmp_input+0x1f4>)
 8017860:	695a      	ldr	r2, [r3, #20]
 8017862:	4b64      	ldr	r3, [pc, #400]	; (80179f4 <icmp_input+0x1f4>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	4619      	mov	r1, r3
 8017868:	4610      	mov	r0, r2
 801786a:	f000 fbd1 	bl	8018010 <ip4_addr_isbroadcast_u32>
 801786e:	4603      	mov	r3, r0
 8017870:	2b00      	cmp	r3, #0
 8017872:	f040 80b5 	bne.w	80179e0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	891b      	ldrh	r3, [r3, #8]
 801787a:	2b07      	cmp	r3, #7
 801787c:	f240 80a9 	bls.w	80179d2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017882:	330e      	adds	r3, #14
 8017884:	b29b      	uxth	r3, r3
 8017886:	b21b      	sxth	r3, r3
 8017888:	4619      	mov	r1, r3
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	f7f8 ffe8 	bl	8010860 <pbuf_header>
 8017890:	4603      	mov	r3, r0
 8017892:	2b00      	cmp	r3, #0
 8017894:	d046      	beq.n	8017924 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	891a      	ldrh	r2, [r3, #8]
 801789a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801789c:	4413      	add	r3, r2
 801789e:	b29b      	uxth	r3, r3
 80178a0:	2200      	movs	r2, #0
 80178a2:	4619      	mov	r1, r3
 80178a4:	2002      	movs	r0, #2
 80178a6:	f7f8 fc8d 	bl	80101c4 <pbuf_alloc>
 80178aa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80178ac:	69bb      	ldr	r3, [r7, #24]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f000 8098 	beq.w	80179e4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	895b      	ldrh	r3, [r3, #10]
 80178b8:	461a      	mov	r2, r3
 80178ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178bc:	3308      	adds	r3, #8
 80178be:	429a      	cmp	r2, r3
 80178c0:	d203      	bcs.n	80178ca <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80178c2:	69b8      	ldr	r0, [r7, #24]
 80178c4:	f7f8 fff0 	bl	80108a8 <pbuf_free>
        goto icmperr;
 80178c8:	e08d      	b.n	80179e6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80178ca:	69bb      	ldr	r3, [r7, #24]
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80178d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178d2:	4618      	mov	r0, r3
 80178d4:	f001 fcb1 	bl	801923a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80178d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178da:	425b      	negs	r3, r3
 80178dc:	b29b      	uxth	r3, r3
 80178de:	b21b      	sxth	r3, r3
 80178e0:	4619      	mov	r1, r3
 80178e2:	69b8      	ldr	r0, [r7, #24]
 80178e4:	f7f8 ffbc 	bl	8010860 <pbuf_header>
 80178e8:	4603      	mov	r3, r0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d009      	beq.n	8017902 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80178ee:	4b43      	ldr	r3, [pc, #268]	; (80179fc <icmp_input+0x1fc>)
 80178f0:	22af      	movs	r2, #175	; 0xaf
 80178f2:	4943      	ldr	r1, [pc, #268]	; (8017a00 <icmp_input+0x200>)
 80178f4:	4843      	ldr	r0, [pc, #268]	; (8017a04 <icmp_input+0x204>)
 80178f6:	f001 fcb3 	bl	8019260 <iprintf>
        pbuf_free(r);
 80178fa:	69b8      	ldr	r0, [r7, #24]
 80178fc:	f7f8 ffd4 	bl	80108a8 <pbuf_free>
        goto icmperr;
 8017900:	e071      	b.n	80179e6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8017902:	6879      	ldr	r1, [r7, #4]
 8017904:	69b8      	ldr	r0, [r7, #24]
 8017906:	f7f9 f8ff 	bl	8010b08 <pbuf_copy>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d003      	beq.n	8017918 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8017910:	69b8      	ldr	r0, [r7, #24]
 8017912:	f7f8 ffc9 	bl	80108a8 <pbuf_free>
        goto icmperr;
 8017916:	e066      	b.n	80179e6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7f8 ffc5 	bl	80108a8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801791e:	69bb      	ldr	r3, [r7, #24]
 8017920:	607b      	str	r3, [r7, #4]
 8017922:	e015      	b.n	8017950 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017926:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801792a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801792e:	33f2      	adds	r3, #242	; 0xf2
 8017930:	b29b      	uxth	r3, r3
 8017932:	b21b      	sxth	r3, r3
 8017934:	4619      	mov	r1, r3
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7f8 ff92 	bl	8010860 <pbuf_header>
 801793c:	4603      	mov	r3, r0
 801793e:	2b00      	cmp	r3, #0
 8017940:	d006      	beq.n	8017950 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017942:	4b2e      	ldr	r3, [pc, #184]	; (80179fc <icmp_input+0x1fc>)
 8017944:	22c0      	movs	r2, #192	; 0xc0
 8017946:	4930      	ldr	r1, [pc, #192]	; (8017a08 <icmp_input+0x208>)
 8017948:	482e      	ldr	r0, [pc, #184]	; (8017a04 <icmp_input+0x204>)
 801794a:	f001 fc89 	bl	8019260 <iprintf>
        goto icmperr;
 801794e:	e04a      	b.n	80179e6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	685b      	ldr	r3, [r3, #4]
 8017954:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8017956:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801795a:	4619      	mov	r1, r3
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f8 ff7f 	bl	8010860 <pbuf_header>
 8017962:	4603      	mov	r3, r0
 8017964:	2b00      	cmp	r3, #0
 8017966:	d12b      	bne.n	80179c0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	681a      	ldr	r2, [r3, #0]
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017976:	4b1f      	ldr	r3, [pc, #124]	; (80179f4 <icmp_input+0x1f4>)
 8017978:	691a      	ldr	r2, [r3, #16]
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	2200      	movs	r2, #0
 8017982:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	2200      	movs	r2, #0
 8017988:	709a      	strb	r2, [r3, #2]
 801798a:	2200      	movs	r2, #0
 801798c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	22ff      	movs	r2, #255	; 0xff
 8017992:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	2200      	movs	r2, #0
 8017998:	729a      	strb	r2, [r3, #10]
 801799a:	2200      	movs	r2, #0
 801799c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	9302      	str	r3, [sp, #8]
 80179a2:	2301      	movs	r3, #1
 80179a4:	9301      	str	r3, [sp, #4]
 80179a6:	2300      	movs	r3, #0
 80179a8:	9300      	str	r3, [sp, #0]
 80179aa:	23ff      	movs	r3, #255	; 0xff
 80179ac:	2200      	movs	r2, #0
 80179ae:	69f9      	ldr	r1, [r7, #28]
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f000 fa5b 	bl	8017e6c <ip4_output_if>
 80179b6:	4603      	mov	r3, r0
 80179b8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80179ba:	e001      	b.n	80179c0 <icmp_input+0x1c0>
    break;
 80179bc:	bf00      	nop
 80179be:	e000      	b.n	80179c2 <icmp_input+0x1c2>
    break;
 80179c0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f7f8 ff70 	bl	80108a8 <pbuf_free>
  return;
 80179c8:	e011      	b.n	80179ee <icmp_input+0x1ee>
    goto lenerr;
 80179ca:	bf00      	nop
 80179cc:	e002      	b.n	80179d4 <icmp_input+0x1d4>
    goto lenerr;
 80179ce:	bf00      	nop
 80179d0:	e000      	b.n	80179d4 <icmp_input+0x1d4>
      goto lenerr;
 80179d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f7f8 ff67 	bl	80108a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80179da:	e008      	b.n	80179ee <icmp_input+0x1ee>
      goto icmperr;
 80179dc:	bf00      	nop
 80179de:	e002      	b.n	80179e6 <icmp_input+0x1e6>
      goto icmperr;
 80179e0:	bf00      	nop
 80179e2:	e000      	b.n	80179e6 <icmp_input+0x1e6>
        goto icmperr;
 80179e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7f8 ff5e 	bl	80108a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80179ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80179ee:	3728      	adds	r7, #40	; 0x28
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	2000d110 	.word	0x2000d110
 80179f8:	2000d124 	.word	0x2000d124
 80179fc:	0801c960 	.word	0x0801c960
 8017a00:	0801c9b8 	.word	0x0801c9b8
 8017a04:	0801c9f0 	.word	0x0801c9f0
 8017a08:	0801ca18 	.word	0x0801ca18

08017a0c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	460b      	mov	r3, r1
 8017a16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017a18:	78fb      	ldrb	r3, [r7, #3]
 8017a1a:	461a      	mov	r2, r3
 8017a1c:	2103      	movs	r1, #3
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f000 f814 	bl	8017a4c <icmp_send_response>
}
 8017a24:	bf00      	nop
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	460b      	mov	r3, r1
 8017a36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017a38:	78fb      	ldrb	r3, [r7, #3]
 8017a3a:	461a      	mov	r2, r3
 8017a3c:	210b      	movs	r1, #11
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f000 f804 	bl	8017a4c <icmp_send_response>
}
 8017a44:	bf00      	nop
 8017a46:	3708      	adds	r7, #8
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b08c      	sub	sp, #48	; 0x30
 8017a50:	af04      	add	r7, sp, #16
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	460b      	mov	r3, r1
 8017a56:	70fb      	strb	r3, [r7, #3]
 8017a58:	4613      	mov	r3, r2
 8017a5a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	2124      	movs	r1, #36	; 0x24
 8017a60:	2001      	movs	r0, #1
 8017a62:	f7f8 fbaf 	bl	80101c4 <pbuf_alloc>
 8017a66:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d04c      	beq.n	8017b08 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	895b      	ldrh	r3, [r3, #10]
 8017a72:	2b23      	cmp	r3, #35	; 0x23
 8017a74:	d806      	bhi.n	8017a84 <icmp_send_response+0x38>
 8017a76:	4b26      	ldr	r3, [pc, #152]	; (8017b10 <icmp_send_response+0xc4>)
 8017a78:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017a7c:	4925      	ldr	r1, [pc, #148]	; (8017b14 <icmp_send_response+0xc8>)
 8017a7e:	4826      	ldr	r0, [pc, #152]	; (8017b18 <icmp_send_response+0xcc>)
 8017a80:	f001 fbee 	bl	8019260 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	685b      	ldr	r3, [r3, #4]
 8017a88:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017a8a:	69fb      	ldr	r3, [r7, #28]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017a90:	697b      	ldr	r3, [r7, #20]
 8017a92:	78fa      	ldrb	r2, [r7, #3]
 8017a94:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017a96:	697b      	ldr	r3, [r7, #20]
 8017a98:	78ba      	ldrb	r2, [r7, #2]
 8017a9a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	711a      	strb	r2, [r3, #4]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	719a      	strb	r2, [r3, #6]
 8017aac:	2200      	movs	r2, #0
 8017aae:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	f103 0008 	add.w	r0, r3, #8
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	221c      	movs	r2, #28
 8017abe:	4619      	mov	r1, r3
 8017ac0:	f001 fbbb 	bl	801923a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017ac4:	69bb      	ldr	r3, [r7, #24]
 8017ac6:	68db      	ldr	r3, [r3, #12]
 8017ac8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017aca:	f107 030c 	add.w	r3, r7, #12
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f000 f824 	bl	8017b1c <ip4_route>
 8017ad4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d011      	beq.n	8017b00 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	2200      	movs	r2, #0
 8017ae0:	709a      	strb	r2, [r3, #2]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017ae6:	f107 020c 	add.w	r2, r7, #12
 8017aea:	693b      	ldr	r3, [r7, #16]
 8017aec:	9302      	str	r3, [sp, #8]
 8017aee:	2301      	movs	r3, #1
 8017af0:	9301      	str	r3, [sp, #4]
 8017af2:	2300      	movs	r3, #0
 8017af4:	9300      	str	r3, [sp, #0]
 8017af6:	23ff      	movs	r3, #255	; 0xff
 8017af8:	2100      	movs	r1, #0
 8017afa:	69f8      	ldr	r0, [r7, #28]
 8017afc:	f000 f9b6 	bl	8017e6c <ip4_output_if>
  }
  pbuf_free(q);
 8017b00:	69f8      	ldr	r0, [r7, #28]
 8017b02:	f7f8 fed1 	bl	80108a8 <pbuf_free>
 8017b06:	e000      	b.n	8017b0a <icmp_send_response+0xbe>
    return;
 8017b08:	bf00      	nop
}
 8017b0a:	3720      	adds	r7, #32
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}
 8017b10:	0801c960 	.word	0x0801c960
 8017b14:	0801ca4c 	.word	0x0801ca4c
 8017b18:	0801c9f0 	.word	0x0801c9f0

08017b1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017b24:	4b30      	ldr	r3, [pc, #192]	; (8017be8 <ip4_route+0xcc>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	60fb      	str	r3, [r7, #12]
 8017b2a:	e036      	b.n	8017b9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b32:	f003 0301 	and.w	r3, r3, #1
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d02b      	beq.n	8017b94 <ip4_route+0x78>
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b42:	089b      	lsrs	r3, r3, #2
 8017b44:	f003 0301 	and.w	r3, r3, #1
 8017b48:	b2db      	uxtb	r3, r3
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d022      	beq.n	8017b94 <ip4_route+0x78>
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	3304      	adds	r3, #4
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d01d      	beq.n	8017b94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	3304      	adds	r3, #4
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	405a      	eors	r2, r3
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	3308      	adds	r3, #8
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d101      	bne.n	8017b74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	e033      	b.n	8017bdc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b7a:	f003 0302 	and.w	r3, r3, #2
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d108      	bne.n	8017b94 <ip4_route+0x78>
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681a      	ldr	r2, [r3, #0]
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	330c      	adds	r3, #12
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d101      	bne.n	8017b94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	e023      	b.n	8017bdc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	60fb      	str	r3, [r7, #12]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d1c5      	bne.n	8017b2c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ba0:	4b12      	ldr	r3, [pc, #72]	; (8017bec <ip4_route+0xd0>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d015      	beq.n	8017bd4 <ip4_route+0xb8>
 8017ba8:	4b10      	ldr	r3, [pc, #64]	; (8017bec <ip4_route+0xd0>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017bb0:	f003 0301 	and.w	r3, r3, #1
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d00d      	beq.n	8017bd4 <ip4_route+0xb8>
 8017bb8:	4b0c      	ldr	r3, [pc, #48]	; (8017bec <ip4_route+0xd0>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017bc0:	f003 0304 	and.w	r3, r3, #4
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d005      	beq.n	8017bd4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017bc8:	4b08      	ldr	r3, [pc, #32]	; (8017bec <ip4_route+0xd0>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	3304      	adds	r3, #4
 8017bce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d101      	bne.n	8017bd8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	e001      	b.n	8017bdc <ip4_route+0xc0>
  }

  return netif_default;
 8017bd8:	4b04      	ldr	r3, [pc, #16]	; (8017bec <ip4_route+0xd0>)
 8017bda:	681b      	ldr	r3, [r3, #0]
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3714      	adds	r7, #20
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr
 8017be8:	200101bc 	.word	0x200101bc
 8017bec:	200101c0 	.word	0x200101c0

08017bf0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b086      	sub	sp, #24
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	091b      	lsrs	r3, r3, #4
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	2b04      	cmp	r3, #4
 8017c0a:	d004      	beq.n	8017c16 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017c0c:	6878      	ldr	r0, [r7, #4]
 8017c0e:	f7f8 fe4b 	bl	80108a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	e122      	b.n	8017e5c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	b29b      	uxth	r3, r3
 8017c1c:	f003 030f 	and.w	r3, r3, #15
 8017c20:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8017c22:	897b      	ldrh	r3, [r7, #10]
 8017c24:	009b      	lsls	r3, r3, #2
 8017c26:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017c28:	697b      	ldr	r3, [r7, #20]
 8017c2a:	885b      	ldrh	r3, [r3, #2]
 8017c2c:	b29b      	uxth	r3, r3
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7f7 fc20 	bl	800f474 <lwip_htons>
 8017c34:	4603      	mov	r3, r0
 8017c36:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	891b      	ldrh	r3, [r3, #8]
 8017c3c:	893a      	ldrh	r2, [r7, #8]
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d204      	bcs.n	8017c4c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8017c42:	893b      	ldrh	r3, [r7, #8]
 8017c44:	4619      	mov	r1, r3
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f7f8 fcba 	bl	80105c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	895b      	ldrh	r3, [r3, #10]
 8017c50:	897a      	ldrh	r2, [r7, #10]
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d807      	bhi.n	8017c66 <ip4_input+0x76>
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	891b      	ldrh	r3, [r3, #8]
 8017c5a:	893a      	ldrh	r2, [r7, #8]
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	d802      	bhi.n	8017c66 <ip4_input+0x76>
 8017c60:	897b      	ldrh	r3, [r7, #10]
 8017c62:	2b13      	cmp	r3, #19
 8017c64:	d804      	bhi.n	8017c70 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f7f8 fe1e 	bl	80108a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	e0f5      	b.n	8017e5c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	691b      	ldr	r3, [r3, #16]
 8017c74:	4a7b      	ldr	r2, [pc, #492]	; (8017e64 <ip4_input+0x274>)
 8017c76:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	68db      	ldr	r3, [r3, #12]
 8017c7c:	4a79      	ldr	r2, [pc, #484]	; (8017e64 <ip4_input+0x274>)
 8017c7e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c80:	4b78      	ldr	r3, [pc, #480]	; (8017e64 <ip4_input+0x274>)
 8017c82:	695b      	ldr	r3, [r3, #20]
 8017c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c88:	2be0      	cmp	r3, #224	; 0xe0
 8017c8a:	d112      	bne.n	8017cb2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017c92:	f003 0301 	and.w	r3, r3, #1
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d007      	beq.n	8017cac <ip4_input+0xbc>
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	3304      	adds	r3, #4
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d002      	beq.n	8017cac <ip4_input+0xbc>
      netif = inp;
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	613b      	str	r3, [r7, #16]
 8017caa:	e041      	b.n	8017d30 <ip4_input+0x140>
    } else {
      netif = NULL;
 8017cac:	2300      	movs	r3, #0
 8017cae:	613b      	str	r3, [r7, #16]
 8017cb0:	e03e      	b.n	8017d30 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017cb6:	683b      	ldr	r3, [r7, #0]
 8017cb8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017cba:	693b      	ldr	r3, [r7, #16]
 8017cbc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017cc0:	f003 0301 	and.w	r3, r3, #1
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d014      	beq.n	8017cf4 <ip4_input+0x104>
 8017cca:	693b      	ldr	r3, [r7, #16]
 8017ccc:	3304      	adds	r3, #4
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d00f      	beq.n	8017cf4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017cd4:	4b63      	ldr	r3, [pc, #396]	; (8017e64 <ip4_input+0x274>)
 8017cd6:	695a      	ldr	r2, [r3, #20]
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	3304      	adds	r3, #4
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	d026      	beq.n	8017d30 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017ce2:	4b60      	ldr	r3, [pc, #384]	; (8017e64 <ip4_input+0x274>)
 8017ce4:	695b      	ldr	r3, [r3, #20]
 8017ce6:	6939      	ldr	r1, [r7, #16]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f000 f991 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017cee:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d11d      	bne.n	8017d30 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d00d      	beq.n	8017d16 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8017cfa:	4b5a      	ldr	r3, [pc, #360]	; (8017e64 <ip4_input+0x274>)
 8017cfc:	695b      	ldr	r3, [r3, #20]
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	2b7f      	cmp	r3, #127	; 0x7f
 8017d02:	d102      	bne.n	8017d0a <ip4_input+0x11a>
          netif = NULL;
 8017d04:	2300      	movs	r3, #0
 8017d06:	613b      	str	r3, [r7, #16]
          break;
 8017d08:	e012      	b.n	8017d30 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8017d0e:	4b56      	ldr	r3, [pc, #344]	; (8017e68 <ip4_input+0x278>)
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	613b      	str	r3, [r7, #16]
 8017d14:	e002      	b.n	8017d1c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8017d1c:	693a      	ldr	r2, [r7, #16]
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d102      	bne.n	8017d2a <ip4_input+0x13a>
        netif = netif->next;
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8017d2a:	693b      	ldr	r3, [r7, #16]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1c4      	bne.n	8017cba <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d30:	4b4c      	ldr	r3, [pc, #304]	; (8017e64 <ip4_input+0x274>)
 8017d32:	691b      	ldr	r3, [r3, #16]
 8017d34:	6839      	ldr	r1, [r7, #0]
 8017d36:	4618      	mov	r0, r3
 8017d38:	f000 f96a 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d105      	bne.n	8017d4e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017d42:	4b48      	ldr	r3, [pc, #288]	; (8017e64 <ip4_input+0x274>)
 8017d44:	691b      	ldr	r3, [r3, #16]
 8017d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d4a:	2be0      	cmp	r3, #224	; 0xe0
 8017d4c:	d104      	bne.n	8017d58 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	f7f8 fdaa 	bl	80108a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017d54:	2300      	movs	r3, #0
 8017d56:	e081      	b.n	8017e5c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d104      	bne.n	8017d68 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7f8 fda2 	bl	80108a8 <pbuf_free>
    return ERR_OK;
 8017d64:	2300      	movs	r3, #0
 8017d66:	e079      	b.n	8017e5c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	88db      	ldrh	r3, [r3, #6]
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	461a      	mov	r2, r3
 8017d70:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017d74:	4013      	ands	r3, r2
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d00b      	beq.n	8017d92 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	f000 fc8e 	bl	801869c <ip4_reass>
 8017d80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d101      	bne.n	8017d8c <ip4_input+0x19c>
      return ERR_OK;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	e067      	b.n	8017e5c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017d92:	4a34      	ldr	r2, [pc, #208]	; (8017e64 <ip4_input+0x274>)
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017d98:	4a32      	ldr	r2, [pc, #200]	; (8017e64 <ip4_input+0x274>)
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017d9e:	4a31      	ldr	r2, [pc, #196]	; (8017e64 <ip4_input+0x274>)
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	f003 030f 	and.w	r3, r3, #15
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	009b      	lsls	r3, r3, #2
 8017db2:	b29a      	uxth	r2, r3
 8017db4:	4b2b      	ldr	r3, [pc, #172]	; (8017e64 <ip4_input+0x274>)
 8017db6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8017db8:	897b      	ldrh	r3, [r7, #10]
 8017dba:	425b      	negs	r3, r3
 8017dbc:	b29b      	uxth	r3, r3
 8017dbe:	b21b      	sxth	r3, r3
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f7f8 fd4c 	bl	8010860 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8017dc8:	697b      	ldr	r3, [r7, #20]
 8017dca:	7a5b      	ldrb	r3, [r3, #9]
 8017dcc:	2b06      	cmp	r3, #6
 8017dce:	d009      	beq.n	8017de4 <ip4_input+0x1f4>
 8017dd0:	2b11      	cmp	r3, #17
 8017dd2:	d002      	beq.n	8017dda <ip4_input+0x1ea>
 8017dd4:	2b01      	cmp	r3, #1
 8017dd6:	d00a      	beq.n	8017dee <ip4_input+0x1fe>
 8017dd8:	e00e      	b.n	8017df8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f7fe fc0b 	bl	80165f8 <udp_input>
      break;
 8017de2:	e028      	b.n	8017e36 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	6878      	ldr	r0, [r7, #4]
 8017de8:	f7fa fc28 	bl	801263c <tcp_input>
      break;
 8017dec:	e023      	b.n	8017e36 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8017dee:	6839      	ldr	r1, [r7, #0]
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f7ff fd05 	bl	8017800 <icmp_input>
      break;
 8017df6:	e01e      	b.n	8017e36 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017df8:	4b1a      	ldr	r3, [pc, #104]	; (8017e64 <ip4_input+0x274>)
 8017dfa:	695b      	ldr	r3, [r3, #20]
 8017dfc:	6939      	ldr	r1, [r7, #16]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 f906 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d112      	bne.n	8017e30 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e0a:	4b16      	ldr	r3, [pc, #88]	; (8017e64 <ip4_input+0x274>)
 8017e0c:	695b      	ldr	r3, [r3, #20]
 8017e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e12:	2be0      	cmp	r3, #224	; 0xe0
 8017e14:	d00c      	beq.n	8017e30 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8017e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7f8 fd31 	bl	8010884 <pbuf_header_force>
        p->payload = iphdr;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	697a      	ldr	r2, [r7, #20]
 8017e26:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017e28:	2102      	movs	r1, #2
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f7ff fdee 	bl	8017a0c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f7f8 fd39 	bl	80108a8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017e36:	4b0b      	ldr	r3, [pc, #44]	; (8017e64 <ip4_input+0x274>)
 8017e38:	2200      	movs	r2, #0
 8017e3a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017e3c:	4b09      	ldr	r3, [pc, #36]	; (8017e64 <ip4_input+0x274>)
 8017e3e:	2200      	movs	r2, #0
 8017e40:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017e42:	4b08      	ldr	r3, [pc, #32]	; (8017e64 <ip4_input+0x274>)
 8017e44:	2200      	movs	r2, #0
 8017e46:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017e48:	4b06      	ldr	r3, [pc, #24]	; (8017e64 <ip4_input+0x274>)
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017e4e:	4b05      	ldr	r3, [pc, #20]	; (8017e64 <ip4_input+0x274>)
 8017e50:	2200      	movs	r2, #0
 8017e52:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017e54:	4b03      	ldr	r3, [pc, #12]	; (8017e64 <ip4_input+0x274>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017e5a:	2300      	movs	r3, #0
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	3718      	adds	r7, #24
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	2000d110 	.word	0x2000d110
 8017e68:	200101bc 	.word	0x200101bc

08017e6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b08a      	sub	sp, #40	; 0x28
 8017e70:	af04      	add	r7, sp, #16
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	60b9      	str	r1, [r7, #8]
 8017e76:	607a      	str	r2, [r7, #4]
 8017e78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d009      	beq.n	8017e98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d003      	beq.n	8017e92 <ip4_output_if+0x26>
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d102      	bne.n	8017e98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e94:	3304      	adds	r3, #4
 8017e96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017e98:	78fa      	ldrb	r2, [r7, #3]
 8017e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9c:	9302      	str	r3, [sp, #8]
 8017e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017ea2:	9301      	str	r3, [sp, #4]
 8017ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ea8:	9300      	str	r3, [sp, #0]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	687a      	ldr	r2, [r7, #4]
 8017eae:	6979      	ldr	r1, [r7, #20]
 8017eb0:	68f8      	ldr	r0, [r7, #12]
 8017eb2:	f000 f805 	bl	8017ec0 <ip4_output_if_src>
 8017eb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017eb8:	4618      	mov	r0, r3
 8017eba:	3718      	adds	r7, #24
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}

08017ec0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b088      	sub	sp, #32
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	607a      	str	r2, [r7, #4]
 8017ecc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	89db      	ldrh	r3, [r3, #14]
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d006      	beq.n	8017ee4 <ip4_output_if_src+0x24>
 8017ed6:	4b48      	ldr	r3, [pc, #288]	; (8017ff8 <ip4_output_if_src+0x138>)
 8017ed8:	f240 3233 	movw	r2, #819	; 0x333
 8017edc:	4947      	ldr	r1, [pc, #284]	; (8017ffc <ip4_output_if_src+0x13c>)
 8017ede:	4848      	ldr	r0, [pc, #288]	; (8018000 <ip4_output_if_src+0x140>)
 8017ee0:	f001 f9be 	bl	8019260 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d060      	beq.n	8017fac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017eea:	2314      	movs	r3, #20
 8017eec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8017eee:	2114      	movs	r1, #20
 8017ef0:	68f8      	ldr	r0, [r7, #12]
 8017ef2:	f7f8 fcb5 	bl	8010860 <pbuf_header>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d002      	beq.n	8017f02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017efc:	f06f 0301 	mvn.w	r3, #1
 8017f00:	e075      	b.n	8017fee <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	685b      	ldr	r3, [r3, #4]
 8017f06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	895b      	ldrh	r3, [r3, #10]
 8017f0c:	2b13      	cmp	r3, #19
 8017f0e:	d806      	bhi.n	8017f1e <ip4_output_if_src+0x5e>
 8017f10:	4b39      	ldr	r3, [pc, #228]	; (8017ff8 <ip4_output_if_src+0x138>)
 8017f12:	f240 3261 	movw	r2, #865	; 0x361
 8017f16:	493b      	ldr	r1, [pc, #236]	; (8018004 <ip4_output_if_src+0x144>)
 8017f18:	4839      	ldr	r0, [pc, #228]	; (8018000 <ip4_output_if_src+0x140>)
 8017f1a:	f001 f9a1 	bl	8019260 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017f1e:	69fb      	ldr	r3, [r7, #28]
 8017f20:	78fa      	ldrb	r2, [r7, #3]
 8017f22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017f2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681a      	ldr	r2, [r3, #0]
 8017f30:	69fb      	ldr	r3, [r7, #28]
 8017f32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017f34:	8b7b      	ldrh	r3, [r7, #26]
 8017f36:	089b      	lsrs	r3, r3, #2
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f40:	b2da      	uxtb	r2, r3
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017f4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	891b      	ldrh	r3, [r3, #8]
 8017f52:	4618      	mov	r0, r3
 8017f54:	f7f7 fa8e 	bl	800f474 <lwip_htons>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	69fb      	ldr	r3, [r7, #28]
 8017f5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	2200      	movs	r2, #0
 8017f64:	719a      	strb	r2, [r3, #6]
 8017f66:	2200      	movs	r2, #0
 8017f68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017f6a:	4b27      	ldr	r3, [pc, #156]	; (8018008 <ip4_output_if_src+0x148>)
 8017f6c:	881b      	ldrh	r3, [r3, #0]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7f7 fa80 	bl	800f474 <lwip_htons>
 8017f74:	4603      	mov	r3, r0
 8017f76:	461a      	mov	r2, r3
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017f7c:	4b22      	ldr	r3, [pc, #136]	; (8018008 <ip4_output_if_src+0x148>)
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	3301      	adds	r3, #1
 8017f82:	b29a      	uxth	r2, r3
 8017f84:	4b20      	ldr	r3, [pc, #128]	; (8018008 <ip4_output_if_src+0x148>)
 8017f86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d104      	bne.n	8017f98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017f8e:	4b1f      	ldr	r3, [pc, #124]	; (801800c <ip4_output_if_src+0x14c>)
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	69fb      	ldr	r3, [r7, #28]
 8017f94:	60da      	str	r2, [r3, #12]
 8017f96:	e003      	b.n	8017fa0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	681a      	ldr	r2, [r3, #0]
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	729a      	strb	r2, [r3, #10]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	72da      	strb	r2, [r3, #11]
 8017faa:	e008      	b.n	8017fbe <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	685b      	ldr	r3, [r3, #4]
 8017fb0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	691b      	ldr	r3, [r3, #16]
 8017fb6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017fb8:	f107 0314 	add.w	r3, r7, #20
 8017fbc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d00c      	beq.n	8017fe0 <ip4_output_if_src+0x120>
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	891a      	ldrh	r2, [r3, #8]
 8017fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fcc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d906      	bls.n	8017fe0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8017fd2:	687a      	ldr	r2, [r7, #4]
 8017fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017fd6:	68f8      	ldr	r0, [r7, #12]
 8017fd8:	f000 fd0a 	bl	80189f0 <ip4_frag>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	e006      	b.n	8017fee <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe2:	695b      	ldr	r3, [r3, #20]
 8017fe4:	687a      	ldr	r2, [r7, #4]
 8017fe6:	68f9      	ldr	r1, [r7, #12]
 8017fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fea:	4798      	blx	r3
 8017fec:	4603      	mov	r3, r0
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3720      	adds	r7, #32
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	0801ca78 	.word	0x0801ca78
 8017ffc:	0801cad0 	.word	0x0801cad0
 8018000:	0801cadc 	.word	0x0801cadc
 8018004:	0801cb04 	.word	0x0801cb04
 8018008:	2000c936 	.word	0x2000c936
 801800c:	0801cf24 	.word	0x0801cf24

08018010 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018024:	d002      	beq.n	801802c <ip4_addr_isbroadcast_u32+0x1c>
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d101      	bne.n	8018030 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801802c:	2301      	movs	r3, #1
 801802e:	e02a      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018036:	f003 0302 	and.w	r3, r3, #2
 801803a:	2b00      	cmp	r3, #0
 801803c:	d101      	bne.n	8018042 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801803e:	2300      	movs	r3, #0
 8018040:	e021      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	3304      	adds	r3, #4
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	429a      	cmp	r2, r3
 801804c:	d101      	bne.n	8018052 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801804e:	2300      	movs	r3, #0
 8018050:	e019      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	3304      	adds	r3, #4
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	405a      	eors	r2, r3
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	3308      	adds	r3, #8
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	4013      	ands	r3, r2
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10d      	bne.n	8018084 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	3308      	adds	r3, #8
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	43da      	mvns	r2, r3
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	3308      	adds	r3, #8
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801807c:	429a      	cmp	r2, r3
 801807e:	d101      	bne.n	8018084 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018080:	2301      	movs	r3, #1
 8018082:	e000      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018084:	2300      	movs	r3, #0
  }
}
 8018086:	4618      	mov	r0, r3
 8018088:	3714      	adds	r7, #20
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr
	...

08018094 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b084      	sub	sp, #16
 8018098:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801809a:	2300      	movs	r3, #0
 801809c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801809e:	4b12      	ldr	r3, [pc, #72]	; (80180e8 <ip_reass_tmr+0x54>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80180a4:	e018      	b.n	80180d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	7fdb      	ldrb	r3, [r3, #31]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d00b      	beq.n	80180c6 <ip_reass_tmr+0x32>
      r->timer--;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	7fdb      	ldrb	r3, [r3, #31]
 80180b2:	3b01      	subs	r3, #1
 80180b4:	b2da      	uxtb	r2, r3
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	60fb      	str	r3, [r7, #12]
 80180c4:	e008      	b.n	80180d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80180d0:	68b9      	ldr	r1, [r7, #8]
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f000 f80a 	bl	80180ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d1e3      	bne.n	80180a6 <ip_reass_tmr+0x12>
     }
   }
}
 80180de:	bf00      	nop
 80180e0:	3710      	adds	r7, #16
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}
 80180e6:	bf00      	nop
 80180e8:	2000c938 	.word	0x2000c938

080180ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b088      	sub	sp, #32
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80180fa:	683a      	ldr	r2, [r7, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	429a      	cmp	r2, r3
 8018100:	d105      	bne.n	801810e <ip_reass_free_complete_datagram+0x22>
 8018102:	4b45      	ldr	r3, [pc, #276]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 8018104:	22ab      	movs	r2, #171	; 0xab
 8018106:	4945      	ldr	r1, [pc, #276]	; (801821c <ip_reass_free_complete_datagram+0x130>)
 8018108:	4845      	ldr	r0, [pc, #276]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 801810a:	f001 f8a9 	bl	8019260 <iprintf>
  if (prev != NULL) {
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d00a      	beq.n	801812a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	687a      	ldr	r2, [r7, #4]
 801811a:	429a      	cmp	r2, r3
 801811c:	d005      	beq.n	801812a <ip_reass_free_complete_datagram+0x3e>
 801811e:	4b3e      	ldr	r3, [pc, #248]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 8018120:	22ad      	movs	r2, #173	; 0xad
 8018122:	4940      	ldr	r1, [pc, #256]	; (8018224 <ip_reass_free_complete_datagram+0x138>)
 8018124:	483e      	ldr	r0, [pc, #248]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 8018126:	f001 f89b 	bl	8019260 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018132:	697b      	ldr	r3, [r7, #20]
 8018134:	889b      	ldrh	r3, [r3, #4]
 8018136:	b29b      	uxth	r3, r3
 8018138:	2b00      	cmp	r3, #0
 801813a:	d12a      	bne.n	8018192 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	685b      	ldr	r3, [r3, #4]
 8018140:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	681a      	ldr	r2, [r3, #0]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	6858      	ldr	r0, [r3, #4]
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	3308      	adds	r3, #8
 8018152:	2214      	movs	r2, #20
 8018154:	4619      	mov	r1, r3
 8018156:	f001 f870 	bl	801923a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801815a:	2101      	movs	r1, #1
 801815c:	69b8      	ldr	r0, [r7, #24]
 801815e:	f7ff fc65 	bl	8017a2c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018162:	69b8      	ldr	r0, [r7, #24]
 8018164:	f7f8 fc3a 	bl	80109dc <pbuf_clen>
 8018168:	4603      	mov	r3, r0
 801816a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801816c:	8bfa      	ldrh	r2, [r7, #30]
 801816e:	8a7b      	ldrh	r3, [r7, #18]
 8018170:	4413      	add	r3, r2
 8018172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018176:	db05      	blt.n	8018184 <ip_reass_free_complete_datagram+0x98>
 8018178:	4b27      	ldr	r3, [pc, #156]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 801817a:	22bc      	movs	r2, #188	; 0xbc
 801817c:	492a      	ldr	r1, [pc, #168]	; (8018228 <ip_reass_free_complete_datagram+0x13c>)
 801817e:	4828      	ldr	r0, [pc, #160]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 8018180:	f001 f86e 	bl	8019260 <iprintf>
    pbufs_freed += clen;
 8018184:	8bfa      	ldrh	r2, [r7, #30]
 8018186:	8a7b      	ldrh	r3, [r7, #18]
 8018188:	4413      	add	r3, r2
 801818a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801818c:	69b8      	ldr	r0, [r7, #24]
 801818e:	f7f8 fb8b 	bl	80108a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018198:	e01f      	b.n	80181da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801819a:	69bb      	ldr	r3, [r7, #24]
 801819c:	685b      	ldr	r3, [r3, #4]
 801819e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80181a0:	69bb      	ldr	r3, [r7, #24]
 80181a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80181aa:	68f8      	ldr	r0, [r7, #12]
 80181ac:	f7f8 fc16 	bl	80109dc <pbuf_clen>
 80181b0:	4603      	mov	r3, r0
 80181b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80181b4:	8bfa      	ldrh	r2, [r7, #30]
 80181b6:	8a7b      	ldrh	r3, [r7, #18]
 80181b8:	4413      	add	r3, r2
 80181ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80181be:	db05      	blt.n	80181cc <ip_reass_free_complete_datagram+0xe0>
 80181c0:	4b15      	ldr	r3, [pc, #84]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 80181c2:	22cc      	movs	r2, #204	; 0xcc
 80181c4:	4918      	ldr	r1, [pc, #96]	; (8018228 <ip_reass_free_complete_datagram+0x13c>)
 80181c6:	4816      	ldr	r0, [pc, #88]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 80181c8:	f001 f84a 	bl	8019260 <iprintf>
    pbufs_freed += clen;
 80181cc:	8bfa      	ldrh	r2, [r7, #30]
 80181ce:	8a7b      	ldrh	r3, [r7, #18]
 80181d0:	4413      	add	r3, r2
 80181d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f7f8 fb67 	bl	80108a8 <pbuf_free>
  while (p != NULL) {
 80181da:	69bb      	ldr	r3, [r7, #24]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1dc      	bne.n	801819a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80181e0:	6839      	ldr	r1, [r7, #0]
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f000 f8c2 	bl	801836c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80181e8:	4b10      	ldr	r3, [pc, #64]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 80181ea:	881b      	ldrh	r3, [r3, #0]
 80181ec:	8bfa      	ldrh	r2, [r7, #30]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d905      	bls.n	80181fe <ip_reass_free_complete_datagram+0x112>
 80181f2:	4b09      	ldr	r3, [pc, #36]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 80181f4:	22d2      	movs	r2, #210	; 0xd2
 80181f6:	490e      	ldr	r1, [pc, #56]	; (8018230 <ip_reass_free_complete_datagram+0x144>)
 80181f8:	4809      	ldr	r0, [pc, #36]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 80181fa:	f001 f831 	bl	8019260 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80181fe:	4b0b      	ldr	r3, [pc, #44]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 8018200:	881a      	ldrh	r2, [r3, #0]
 8018202:	8bfb      	ldrh	r3, [r7, #30]
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	b29a      	uxth	r2, r3
 8018208:	4b08      	ldr	r3, [pc, #32]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 801820a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801820c:	8bfb      	ldrh	r3, [r7, #30]
}
 801820e:	4618      	mov	r0, r3
 8018210:	3720      	adds	r7, #32
 8018212:	46bd      	mov	sp, r7
 8018214:	bd80      	pop	{r7, pc}
 8018216:	bf00      	nop
 8018218:	0801cb34 	.word	0x0801cb34
 801821c:	0801cb90 	.word	0x0801cb90
 8018220:	0801cb9c 	.word	0x0801cb9c
 8018224:	0801cbc4 	.word	0x0801cbc4
 8018228:	0801cbd8 	.word	0x0801cbd8
 801822c:	2000c93c 	.word	0x2000c93c
 8018230:	0801cbf8 	.word	0x0801cbf8

08018234 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b08a      	sub	sp, #40	; 0x28
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801823e:	2300      	movs	r3, #0
 8018240:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018242:	2300      	movs	r3, #0
 8018244:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018246:	2300      	movs	r3, #0
 8018248:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801824a:	2300      	movs	r3, #0
 801824c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801824e:	2300      	movs	r3, #0
 8018250:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018252:	4b28      	ldr	r3, [pc, #160]	; (80182f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018258:	e030      	b.n	80182bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825c:	695a      	ldr	r2, [r3, #20]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	429a      	cmp	r2, r3
 8018264:	d10c      	bne.n	8018280 <ip_reass_remove_oldest_datagram+0x4c>
 8018266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018268:	699a      	ldr	r2, [r3, #24]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	691b      	ldr	r3, [r3, #16]
 801826e:	429a      	cmp	r2, r3
 8018270:	d106      	bne.n	8018280 <ip_reass_remove_oldest_datagram+0x4c>
 8018272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018274:	899a      	ldrh	r2, [r3, #12]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	889b      	ldrh	r3, [r3, #4]
 801827a:	b29b      	uxth	r3, r3
 801827c:	429a      	cmp	r2, r3
 801827e:	d014      	beq.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018280:	693b      	ldr	r3, [r7, #16]
 8018282:	3301      	adds	r3, #1
 8018284:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018286:	6a3b      	ldr	r3, [r7, #32]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d104      	bne.n	8018296 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	61bb      	str	r3, [r7, #24]
 8018294:	e009      	b.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018298:	7fda      	ldrb	r2, [r3, #31]
 801829a:	6a3b      	ldr	r3, [r7, #32]
 801829c:	7fdb      	ldrb	r3, [r3, #31]
 801829e:	429a      	cmp	r2, r3
 80182a0:	d803      	bhi.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80182aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d001      	beq.n	80182b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80182b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80182b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80182bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d1cb      	bne.n	801825a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80182c2:	6a3b      	ldr	r3, [r7, #32]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d008      	beq.n	80182da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80182c8:	69b9      	ldr	r1, [r7, #24]
 80182ca:	6a38      	ldr	r0, [r7, #32]
 80182cc:	f7ff ff0e 	bl	80180ec <ip_reass_free_complete_datagram>
 80182d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	4413      	add	r3, r2
 80182d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80182da:	697a      	ldr	r2, [r7, #20]
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	429a      	cmp	r2, r3
 80182e0:	da02      	bge.n	80182e8 <ip_reass_remove_oldest_datagram+0xb4>
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	dcac      	bgt.n	8018242 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80182e8:	697b      	ldr	r3, [r7, #20]
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3728      	adds	r7, #40	; 0x28
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	bf00      	nop
 80182f4:	2000c938 	.word	0x2000c938

080182f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018302:	2004      	movs	r0, #4
 8018304:	f7f7 fcc2 	bl	800fc8c <memp_malloc>
 8018308:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d110      	bne.n	8018332 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018310:	6839      	ldr	r1, [r7, #0]
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff ff8e 	bl	8018234 <ip_reass_remove_oldest_datagram>
 8018318:	4602      	mov	r2, r0
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	4293      	cmp	r3, r2
 801831e:	dc03      	bgt.n	8018328 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018320:	2004      	movs	r0, #4
 8018322:	f7f7 fcb3 	bl	800fc8c <memp_malloc>
 8018326:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d101      	bne.n	8018332 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801832e:	2300      	movs	r3, #0
 8018330:	e016      	b.n	8018360 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018332:	2220      	movs	r2, #32
 8018334:	2100      	movs	r1, #0
 8018336:	68f8      	ldr	r0, [r7, #12]
 8018338:	f000 ff8a 	bl	8019250 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	2203      	movs	r2, #3
 8018340:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018342:	4b09      	ldr	r3, [pc, #36]	; (8018368 <ip_reass_enqueue_new_datagram+0x70>)
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801834a:	4a07      	ldr	r2, [pc, #28]	; (8018368 <ip_reass_enqueue_new_datagram+0x70>)
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	3308      	adds	r3, #8
 8018354:	2214      	movs	r2, #20
 8018356:	6879      	ldr	r1, [r7, #4]
 8018358:	4618      	mov	r0, r3
 801835a:	f000 ff6e 	bl	801923a <memcpy>
  return ipr;
 801835e:	68fb      	ldr	r3, [r7, #12]
}
 8018360:	4618      	mov	r0, r3
 8018362:	3710      	adds	r7, #16
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	2000c938 	.word	0x2000c938

0801836c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018376:	4b10      	ldr	r3, [pc, #64]	; (80183b8 <ip_reass_dequeue_datagram+0x4c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	687a      	ldr	r2, [r7, #4]
 801837c:	429a      	cmp	r2, r3
 801837e:	d104      	bne.n	801838a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4a0c      	ldr	r2, [pc, #48]	; (80183b8 <ip_reass_dequeue_datagram+0x4c>)
 8018386:	6013      	str	r3, [r2, #0]
 8018388:	e00d      	b.n	80183a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d106      	bne.n	801839e <ip_reass_dequeue_datagram+0x32>
 8018390:	4b0a      	ldr	r3, [pc, #40]	; (80183bc <ip_reass_dequeue_datagram+0x50>)
 8018392:	f240 1245 	movw	r2, #325	; 0x145
 8018396:	490a      	ldr	r1, [pc, #40]	; (80183c0 <ip_reass_dequeue_datagram+0x54>)
 8018398:	480a      	ldr	r0, [pc, #40]	; (80183c4 <ip_reass_dequeue_datagram+0x58>)
 801839a:	f000 ff61 	bl	8019260 <iprintf>
    prev->next = ipr->next;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80183a6:	6879      	ldr	r1, [r7, #4]
 80183a8:	2004      	movs	r0, #4
 80183aa:	f7f7 fce5 	bl	800fd78 <memp_free>
}
 80183ae:	bf00      	nop
 80183b0:	3708      	adds	r7, #8
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	2000c938 	.word	0x2000c938
 80183bc:	0801cb34 	.word	0x0801cb34
 80183c0:	0801cc14 	.word	0x0801cc14
 80183c4:	0801cb9c 	.word	0x0801cb9c

080183c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b08c      	sub	sp, #48	; 0x30
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80183d4:	2300      	movs	r3, #0
 80183d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80183d8:	2301      	movs	r3, #1
 80183da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	685b      	ldr	r3, [r3, #4]
 80183e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80183e2:	69fb      	ldr	r3, [r7, #28]
 80183e4:	885b      	ldrh	r3, [r3, #2]
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7f7 f843 	bl	800f474 <lwip_htons>
 80183ee:	4603      	mov	r3, r0
 80183f0:	461a      	mov	r2, r3
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	b29b      	uxth	r3, r3
 80183f8:	f003 030f 	and.w	r3, r3, #15
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	b29b      	uxth	r3, r3
 8018402:	1ad3      	subs	r3, r2, r3
 8018404:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	88db      	ldrh	r3, [r3, #6]
 801840a:	b29b      	uxth	r3, r3
 801840c:	4618      	mov	r0, r3
 801840e:	f7f7 f831 	bl	800f474 <lwip_htons>
 8018412:	4603      	mov	r3, r0
 8018414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018418:	b29b      	uxth	r3, r3
 801841a:	00db      	lsls	r3, r3, #3
 801841c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018426:	2200      	movs	r2, #0
 8018428:	701a      	strb	r2, [r3, #0]
 801842a:	2200      	movs	r2, #0
 801842c:	705a      	strb	r2, [r3, #1]
 801842e:	2200      	movs	r2, #0
 8018430:	709a      	strb	r2, [r3, #2]
 8018432:	2200      	movs	r2, #0
 8018434:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	8b3a      	ldrh	r2, [r7, #24]
 801843a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801843c:	8b3a      	ldrh	r2, [r7, #24]
 801843e:	8b7b      	ldrh	r3, [r7, #26]
 8018440:	4413      	add	r3, r2
 8018442:	b29a      	uxth	r2, r3
 8018444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018446:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	685b      	ldr	r3, [r3, #4]
 801844c:	627b      	str	r3, [r7, #36]	; 0x24
 801844e:	e061      	b.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8018450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8018456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018458:	889b      	ldrh	r3, [r3, #4]
 801845a:	b29a      	uxth	r2, r3
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	889b      	ldrh	r3, [r3, #4]
 8018460:	b29b      	uxth	r3, r3
 8018462:	429a      	cmp	r2, r3
 8018464:	d232      	bcs.n	80184cc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801846a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846e:	2b00      	cmp	r3, #0
 8018470:	d01f      	beq.n	80184b2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018474:	889b      	ldrh	r3, [r3, #4]
 8018476:	b29a      	uxth	r2, r3
 8018478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847a:	88db      	ldrh	r3, [r3, #6]
 801847c:	b29b      	uxth	r3, r3
 801847e:	429a      	cmp	r2, r3
 8018480:	f0c0 80e3 	bcc.w	801864a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8018484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018486:	88db      	ldrh	r3, [r3, #6]
 8018488:	b29a      	uxth	r2, r3
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	889b      	ldrh	r3, [r3, #4]
 801848e:	b29b      	uxth	r3, r3
 8018490:	429a      	cmp	r2, r3
 8018492:	f200 80da 	bhi.w	801864a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849e:	88db      	ldrh	r3, [r3, #6]
 80184a0:	b29a      	uxth	r2, r3
 80184a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184a4:	889b      	ldrh	r3, [r3, #4]
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d037      	beq.n	801851c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80184ac:	2300      	movs	r3, #0
 80184ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80184b0:	e034      	b.n	801851c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80184b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b4:	88db      	ldrh	r3, [r3, #6]
 80184b6:	b29a      	uxth	r2, r3
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	889b      	ldrh	r3, [r3, #4]
 80184bc:	b29b      	uxth	r3, r3
 80184be:	429a      	cmp	r2, r3
 80184c0:	f200 80c5 	bhi.w	801864e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	68ba      	ldr	r2, [r7, #8]
 80184c8:	605a      	str	r2, [r3, #4]
      break;
 80184ca:	e027      	b.n	801851c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80184cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ce:	889b      	ldrh	r3, [r3, #4]
 80184d0:	b29a      	uxth	r2, r3
 80184d2:	697b      	ldr	r3, [r7, #20]
 80184d4:	889b      	ldrh	r3, [r3, #4]
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	429a      	cmp	r2, r3
 80184da:	f000 80ba 	beq.w	8018652 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80184de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e0:	889b      	ldrh	r3, [r3, #4]
 80184e2:	b29a      	uxth	r2, r3
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	88db      	ldrh	r3, [r3, #6]
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	429a      	cmp	r2, r3
 80184ec:	f0c0 80b3 	bcc.w	8018656 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80184f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d009      	beq.n	801850a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80184f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f8:	88db      	ldrh	r3, [r3, #6]
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	889b      	ldrh	r3, [r3, #4]
 8018500:	b29b      	uxth	r3, r3
 8018502:	429a      	cmp	r2, r3
 8018504:	d001      	beq.n	801850a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018506:	2300      	movs	r3, #0
 8018508:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018510:	697b      	ldr	r3, [r7, #20]
 8018512:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018516:	2b00      	cmp	r3, #0
 8018518:	d19a      	bne.n	8018450 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801851a:	e000      	b.n	801851e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801851c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018520:	2b00      	cmp	r3, #0
 8018522:	d12d      	bne.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018526:	2b00      	cmp	r3, #0
 8018528:	d01c      	beq.n	8018564 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852c:	88db      	ldrh	r3, [r3, #6]
 801852e:	b29a      	uxth	r2, r3
 8018530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018532:	889b      	ldrh	r3, [r3, #4]
 8018534:	b29b      	uxth	r3, r3
 8018536:	429a      	cmp	r2, r3
 8018538:	d906      	bls.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801853a:	4b51      	ldr	r3, [pc, #324]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801853c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018540:	4950      	ldr	r1, [pc, #320]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018542:	4851      	ldr	r0, [pc, #324]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018544:	f000 fe8c 	bl	8019260 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854a:	68ba      	ldr	r2, [r7, #8]
 801854c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018550:	88db      	ldrh	r3, [r3, #6]
 8018552:	b29a      	uxth	r2, r3
 8018554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018556:	889b      	ldrh	r3, [r3, #4]
 8018558:	b29b      	uxth	r3, r3
 801855a:	429a      	cmp	r2, r3
 801855c:	d010      	beq.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801855e:	2300      	movs	r3, #0
 8018560:	623b      	str	r3, [r7, #32]
 8018562:	e00d      	b.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d006      	beq.n	801857a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801856c:	4b44      	ldr	r3, [pc, #272]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801856e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8018572:	4946      	ldr	r1, [pc, #280]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018574:	4844      	ldr	r0, [pc, #272]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018576:	f000 fe73 	bl	8019260 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	68ba      	ldr	r2, [r7, #8]
 801857e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d105      	bne.n	8018592 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	7f9b      	ldrb	r3, [r3, #30]
 801858a:	f003 0301 	and.w	r3, r3, #1
 801858e:	2b00      	cmp	r3, #0
 8018590:	d059      	beq.n	8018646 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8018592:	6a3b      	ldr	r3, [r7, #32]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d04f      	beq.n	8018638 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	685b      	ldr	r3, [r3, #4]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d006      	beq.n	80185ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	685b      	ldr	r3, [r3, #4]
 80185a4:	685b      	ldr	r3, [r3, #4]
 80185a6:	889b      	ldrh	r3, [r3, #4]
 80185a8:	b29b      	uxth	r3, r3
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d002      	beq.n	80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80185ae:	2300      	movs	r3, #0
 80185b0:	623b      	str	r3, [r7, #32]
 80185b2:	e041      	b.n	8018638 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80185b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185b6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80185b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80185be:	e012      	b.n	80185e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80185c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c2:	685b      	ldr	r3, [r3, #4]
 80185c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80185c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c8:	88db      	ldrh	r3, [r3, #6]
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ce:	889b      	ldrh	r3, [r3, #4]
 80185d0:	b29b      	uxth	r3, r3
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d002      	beq.n	80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80185d6:	2300      	movs	r3, #0
 80185d8:	623b      	str	r3, [r7, #32]
            break;
 80185da:	e007      	b.n	80185ec <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80185dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185de:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80185e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80185e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d1e9      	bne.n	80185c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80185ec:	6a3b      	ldr	r3, [r7, #32]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d022      	beq.n	8018638 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d106      	bne.n	8018608 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80185fa:	4b21      	ldr	r3, [pc, #132]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80185fc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8018600:	4923      	ldr	r1, [pc, #140]	; (8018690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018602:	4821      	ldr	r0, [pc, #132]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018604:	f000 fe2c 	bl	8019260 <iprintf>
          LWIP_ASSERT("sanity check",
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018610:	429a      	cmp	r2, r3
 8018612:	d106      	bne.n	8018622 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8018614:	4b1a      	ldr	r3, [pc, #104]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018616:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801861a:	491d      	ldr	r1, [pc, #116]	; (8018690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801861c:	481a      	ldr	r0, [pc, #104]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801861e:	f000 fe1f 	bl	8019260 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d006      	beq.n	8018638 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801862a:	4b15      	ldr	r3, [pc, #84]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801862c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018630:	4918      	ldr	r1, [pc, #96]	; (8018694 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018632:	4815      	ldr	r0, [pc, #84]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018634:	f000 fe14 	bl	8019260 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018638:	6a3b      	ldr	r3, [r7, #32]
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2301      	movne	r3, #1
 8018640:	2300      	moveq	r3, #0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	e018      	b.n	8018678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018646:	2300      	movs	r3, #0
 8018648:	e016      	b.n	8018678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 801864a:	bf00      	nop
 801864c:	e004      	b.n	8018658 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801864e:	bf00      	nop
 8018650:	e002      	b.n	8018658 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8018652:	bf00      	nop
 8018654:	e000      	b.n	8018658 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8018656:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8018658:	68b8      	ldr	r0, [r7, #8]
 801865a:	f7f8 f9bf 	bl	80109dc <pbuf_clen>
 801865e:	4603      	mov	r3, r0
 8018660:	461a      	mov	r2, r3
 8018662:	4b0d      	ldr	r3, [pc, #52]	; (8018698 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018664:	881b      	ldrh	r3, [r3, #0]
 8018666:	1a9b      	subs	r3, r3, r2
 8018668:	b29a      	uxth	r2, r3
 801866a:	4b0b      	ldr	r3, [pc, #44]	; (8018698 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801866c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801866e:	68b8      	ldr	r0, [r7, #8]
 8018670:	f7f8 f91a 	bl	80108a8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018674:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8018678:	4618      	mov	r0, r3
 801867a:	3730      	adds	r7, #48	; 0x30
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}
 8018680:	0801cb34 	.word	0x0801cb34
 8018684:	0801cc30 	.word	0x0801cc30
 8018688:	0801cb9c 	.word	0x0801cb9c
 801868c:	0801cc50 	.word	0x0801cc50
 8018690:	0801cc88 	.word	0x0801cc88
 8018694:	0801cc98 	.word	0x0801cc98
 8018698:	2000c93c 	.word	0x2000c93c

0801869c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b08e      	sub	sp, #56	; 0x38
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80186aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	f003 030f 	and.w	r3, r3, #15
 80186b2:	009b      	lsls	r3, r3, #2
 80186b4:	2b14      	cmp	r3, #20
 80186b6:	f040 8131 	bne.w	801891c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80186ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186bc:	88db      	ldrh	r3, [r3, #6]
 80186be:	b29b      	uxth	r3, r3
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7f6 fed7 	bl	800f474 <lwip_htons>
 80186c6:	4603      	mov	r3, r0
 80186c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	00db      	lsls	r3, r3, #3
 80186d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80186d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d4:	885b      	ldrh	r3, [r3, #2]
 80186d6:	b29b      	uxth	r3, r3
 80186d8:	4618      	mov	r0, r3
 80186da:	f7f6 fecb 	bl	800f474 <lwip_htons>
 80186de:	4603      	mov	r3, r0
 80186e0:	461a      	mov	r2, r3
 80186e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	f003 030f 	and.w	r3, r3, #15
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	009b      	lsls	r3, r3, #2
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	1ad3      	subs	r3, r2, r3
 80186f4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	f7f8 f970 	bl	80109dc <pbuf_clen>
 80186fc:	4603      	mov	r3, r0
 80186fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018700:	4b8d      	ldr	r3, [pc, #564]	; (8018938 <ip4_reass+0x29c>)
 8018702:	881b      	ldrh	r3, [r3, #0]
 8018704:	461a      	mov	r2, r3
 8018706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018708:	4413      	add	r3, r2
 801870a:	2b0a      	cmp	r3, #10
 801870c:	dd10      	ble.n	8018730 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801870e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018710:	4619      	mov	r1, r3
 8018712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018714:	f7ff fd8e 	bl	8018234 <ip_reass_remove_oldest_datagram>
 8018718:	4603      	mov	r3, r0
 801871a:	2b00      	cmp	r3, #0
 801871c:	f000 8100 	beq.w	8018920 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018720:	4b85      	ldr	r3, [pc, #532]	; (8018938 <ip4_reass+0x29c>)
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	461a      	mov	r2, r3
 8018726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018728:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801872a:	2b0a      	cmp	r3, #10
 801872c:	f300 80f8 	bgt.w	8018920 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018730:	4b82      	ldr	r3, [pc, #520]	; (801893c <ip4_reass+0x2a0>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	633b      	str	r3, [r7, #48]	; 0x30
 8018736:	e015      	b.n	8018764 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801873a:	695a      	ldr	r2, [r3, #20]
 801873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	429a      	cmp	r2, r3
 8018742:	d10c      	bne.n	801875e <ip4_reass+0xc2>
 8018744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018746:	699a      	ldr	r2, [r3, #24]
 8018748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801874a:	691b      	ldr	r3, [r3, #16]
 801874c:	429a      	cmp	r2, r3
 801874e:	d106      	bne.n	801875e <ip4_reass+0xc2>
 8018750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018752:	899a      	ldrh	r2, [r3, #12]
 8018754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018756:	889b      	ldrh	r3, [r3, #4]
 8018758:	b29b      	uxth	r3, r3
 801875a:	429a      	cmp	r2, r3
 801875c:	d006      	beq.n	801876c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	633b      	str	r3, [r7, #48]	; 0x30
 8018764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018766:	2b00      	cmp	r3, #0
 8018768:	d1e6      	bne.n	8018738 <ip4_reass+0x9c>
 801876a:	e000      	b.n	801876e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801876c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018770:	2b00      	cmp	r3, #0
 8018772:	d109      	bne.n	8018788 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018776:	4619      	mov	r1, r3
 8018778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801877a:	f7ff fdbd 	bl	80182f8 <ip_reass_enqueue_new_datagram>
 801877e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018782:	2b00      	cmp	r3, #0
 8018784:	d11c      	bne.n	80187c0 <ip4_reass+0x124>
      goto nullreturn;
 8018786:	e0ce      	b.n	8018926 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878a:	88db      	ldrh	r3, [r3, #6]
 801878c:	b29b      	uxth	r3, r3
 801878e:	4618      	mov	r0, r3
 8018790:	f7f6 fe70 	bl	800f474 <lwip_htons>
 8018794:	4603      	mov	r3, r0
 8018796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801879a:	2b00      	cmp	r3, #0
 801879c:	d110      	bne.n	80187c0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a0:	89db      	ldrh	r3, [r3, #14]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7f6 fe66 	bl	800f474 <lwip_htons>
 80187a8:	4603      	mov	r3, r0
 80187aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d006      	beq.n	80187c0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80187b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b4:	3308      	adds	r3, #8
 80187b6:	2214      	movs	r2, #20
 80187b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187ba:	4618      	mov	r0, r3
 80187bc:	f000 fd3d 	bl	801923a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80187c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c2:	88db      	ldrh	r3, [r3, #6]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	f003 0320 	and.w	r3, r3, #32
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	bf0c      	ite	eq
 80187ce:	2301      	moveq	r3, #1
 80187d0:	2300      	movne	r3, #0
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80187d6:	69fb      	ldr	r3, [r7, #28]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d00e      	beq.n	80187fa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80187dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80187de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187e0:	4413      	add	r3, r2
 80187e2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80187e4:	8b7a      	ldrh	r2, [r7, #26]
 80187e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80187e8:	429a      	cmp	r2, r3
 80187ea:	f0c0 8099 	bcc.w	8018920 <ip4_reass+0x284>
 80187ee:	8b7b      	ldrh	r3, [r7, #26]
 80187f0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80187f4:	4293      	cmp	r3, r2
 80187f6:	f200 8093 	bhi.w	8018920 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80187fa:	69fa      	ldr	r2, [r7, #28]
 80187fc:	6879      	ldr	r1, [r7, #4]
 80187fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018800:	f7ff fde2 	bl	80183c8 <ip_reass_chain_frag_into_datagram_and_validate>
 8018804:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018806:	697b      	ldr	r3, [r7, #20]
 8018808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801880c:	f000 808a 	beq.w	8018924 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018810:	4b49      	ldr	r3, [pc, #292]	; (8018938 <ip4_reass+0x29c>)
 8018812:	881a      	ldrh	r2, [r3, #0]
 8018814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018816:	4413      	add	r3, r2
 8018818:	b29a      	uxth	r2, r3
 801881a:	4b47      	ldr	r3, [pc, #284]	; (8018938 <ip4_reass+0x29c>)
 801881c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801881e:	69fb      	ldr	r3, [r7, #28]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d00d      	beq.n	8018840 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8018824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018828:	4413      	add	r3, r2
 801882a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882e:	8a7a      	ldrh	r2, [r7, #18]
 8018830:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018834:	7f9b      	ldrb	r3, [r3, #30]
 8018836:	f043 0301 	orr.w	r3, r3, #1
 801883a:	b2da      	uxtb	r2, r3
 801883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801883e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018840:	697b      	ldr	r3, [r7, #20]
 8018842:	2b01      	cmp	r3, #1
 8018844:	d168      	bne.n	8018918 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8018846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018848:	8b9b      	ldrh	r3, [r3, #28]
 801884a:	3314      	adds	r3, #20
 801884c:	b29a      	uxth	r2, r3
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8018852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	685b      	ldr	r3, [r3, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885e:	685b      	ldr	r3, [r3, #4]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018866:	3308      	adds	r3, #8
 8018868:	2214      	movs	r2, #20
 801886a:	4619      	mov	r1, r3
 801886c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801886e:	f000 fce4 	bl	801923a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8018872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018874:	8b9b      	ldrh	r3, [r3, #28]
 8018876:	4618      	mov	r0, r3
 8018878:	f7f6 fdfc 	bl	800f474 <lwip_htons>
 801887c:	4603      	mov	r3, r0
 801887e:	461a      	mov	r2, r3
 8018880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018882:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018886:	2200      	movs	r2, #0
 8018888:	719a      	strb	r2, [r3, #6]
 801888a:	2200      	movs	r2, #0
 801888c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018890:	2200      	movs	r2, #0
 8018892:	729a      	strb	r2, [r3, #10]
 8018894:	2200      	movs	r2, #0
 8018896:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889a:	685b      	ldr	r3, [r3, #4]
 801889c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801889e:	e00e      	b.n	80188be <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80188a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188a2:	685b      	ldr	r3, [r3, #4]
 80188a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80188a6:	f06f 0113 	mvn.w	r1, #19
 80188aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80188ac:	f7f7 ffd8 	bl	8010860 <pbuf_header>
      pbuf_cat(p, r);
 80188b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80188b2:	6878      	ldr	r0, [r7, #4]
 80188b4:	f7f8 f8d2 	bl	8010a5c <pbuf_cat>
      r = iprh->next_pbuf;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80188be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d1ed      	bne.n	80188a0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80188c4:	4b1d      	ldr	r3, [pc, #116]	; (801893c <ip4_reass+0x2a0>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188ca:	429a      	cmp	r2, r3
 80188cc:	d102      	bne.n	80188d4 <ip4_reass+0x238>
      ipr_prev = NULL;
 80188ce:	2300      	movs	r3, #0
 80188d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188d2:	e010      	b.n	80188f6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188d4:	4b19      	ldr	r3, [pc, #100]	; (801893c <ip4_reass+0x2a0>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188da:	e007      	b.n	80188ec <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80188dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d006      	beq.n	80188f4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1f4      	bne.n	80188dc <ip4_reass+0x240>
 80188f2:	e000      	b.n	80188f6 <ip4_reass+0x25a>
          break;
 80188f4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80188f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188fa:	f7ff fd37 	bl	801836c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f7f8 f86c 	bl	80109dc <pbuf_clen>
 8018904:	4603      	mov	r3, r0
 8018906:	461a      	mov	r2, r3
 8018908:	4b0b      	ldr	r3, [pc, #44]	; (8018938 <ip4_reass+0x29c>)
 801890a:	881b      	ldrh	r3, [r3, #0]
 801890c:	1a9b      	subs	r3, r3, r2
 801890e:	b29a      	uxth	r2, r3
 8018910:	4b09      	ldr	r3, [pc, #36]	; (8018938 <ip4_reass+0x29c>)
 8018912:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	e00a      	b.n	801892e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018918:	2300      	movs	r3, #0
 801891a:	e008      	b.n	801892e <ip4_reass+0x292>
    goto nullreturn;
 801891c:	bf00      	nop
 801891e:	e002      	b.n	8018926 <ip4_reass+0x28a>

nullreturn:
 8018920:	bf00      	nop
 8018922:	e000      	b.n	8018926 <ip4_reass+0x28a>
    goto nullreturn;
 8018924:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f7f7 ffbe 	bl	80108a8 <pbuf_free>
  return NULL;
 801892c:	2300      	movs	r3, #0
}
 801892e:	4618      	mov	r0, r3
 8018930:	3738      	adds	r7, #56	; 0x38
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}
 8018936:	bf00      	nop
 8018938:	2000c93c 	.word	0x2000c93c
 801893c:	2000c938 	.word	0x2000c938

08018940 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8018944:	2005      	movs	r0, #5
 8018946:	f7f7 f9a1 	bl	800fc8c <memp_malloc>
 801894a:	4603      	mov	r3, r0
}
 801894c:	4618      	mov	r0, r3
 801894e:	bd80      	pop	{r7, pc}

08018950 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b082      	sub	sp, #8
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d106      	bne.n	801896c <ip_frag_free_pbuf_custom_ref+0x1c>
 801895e:	4b07      	ldr	r3, [pc, #28]	; (801897c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018960:	f240 22ae 	movw	r2, #686	; 0x2ae
 8018964:	4906      	ldr	r1, [pc, #24]	; (8018980 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018966:	4807      	ldr	r0, [pc, #28]	; (8018984 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018968:	f000 fc7a 	bl	8019260 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801896c:	6879      	ldr	r1, [r7, #4]
 801896e:	2005      	movs	r0, #5
 8018970:	f7f7 fa02 	bl	800fd78 <memp_free>
}
 8018974:	bf00      	nop
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	0801cb34 	.word	0x0801cb34
 8018980:	0801ccbc 	.word	0x0801ccbc
 8018984:	0801cb9c 	.word	0x0801cb9c

08018988 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b084      	sub	sp, #16
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d106      	bne.n	80189a8 <ipfrag_free_pbuf_custom+0x20>
 801899a:	4b11      	ldr	r3, [pc, #68]	; (80189e0 <ipfrag_free_pbuf_custom+0x58>)
 801899c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80189a0:	4910      	ldr	r1, [pc, #64]	; (80189e4 <ipfrag_free_pbuf_custom+0x5c>)
 80189a2:	4811      	ldr	r0, [pc, #68]	; (80189e8 <ipfrag_free_pbuf_custom+0x60>)
 80189a4:	f000 fc5c 	bl	8019260 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80189a8:	68fa      	ldr	r2, [r7, #12]
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d006      	beq.n	80189be <ipfrag_free_pbuf_custom+0x36>
 80189b0:	4b0b      	ldr	r3, [pc, #44]	; (80189e0 <ipfrag_free_pbuf_custom+0x58>)
 80189b2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80189b6:	490d      	ldr	r1, [pc, #52]	; (80189ec <ipfrag_free_pbuf_custom+0x64>)
 80189b8:	480b      	ldr	r0, [pc, #44]	; (80189e8 <ipfrag_free_pbuf_custom+0x60>)
 80189ba:	f000 fc51 	bl	8019260 <iprintf>
  if (pcr->original != NULL) {
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	695b      	ldr	r3, [r3, #20]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d004      	beq.n	80189d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	695b      	ldr	r3, [r3, #20]
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7f7 ff6c 	bl	80108a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189d0:	68f8      	ldr	r0, [r7, #12]
 80189d2:	f7ff ffbd 	bl	8018950 <ip_frag_free_pbuf_custom_ref>
}
 80189d6:	bf00      	nop
 80189d8:	3710      	adds	r7, #16
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}
 80189de:	bf00      	nop
 80189e0:	0801cb34 	.word	0x0801cb34
 80189e4:	0801ccc8 	.word	0x0801ccc8
 80189e8:	0801cb9c 	.word	0x0801cb9c
 80189ec:	0801ccd4 	.word	0x0801ccd4

080189f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b092      	sub	sp, #72	; 0x48
 80189f4:	af02      	add	r7, sp, #8
 80189f6:	60f8      	str	r0, [r7, #12]
 80189f8:	60b9      	str	r1, [r7, #8]
 80189fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189fc:	2300      	movs	r3, #0
 80189fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018a04:	3b14      	subs	r3, #20
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	da00      	bge.n	8018a0c <ip4_frag+0x1c>
 8018a0a:	3307      	adds	r3, #7
 8018a0c:	10db      	asrs	r3, r3, #3
 8018a0e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018a10:	2314      	movs	r3, #20
 8018a12:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	685b      	ldr	r3, [r3, #4]
 8018a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8018a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8018a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	f003 030f 	and.w	r3, r3, #15
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	2b14      	cmp	r3, #20
 8018a2a:	d009      	beq.n	8018a40 <ip4_frag+0x50>
 8018a2c:	4b79      	ldr	r3, [pc, #484]	; (8018c14 <ip4_frag+0x224>)
 8018a2e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8018a32:	4979      	ldr	r1, [pc, #484]	; (8018c18 <ip4_frag+0x228>)
 8018a34:	4879      	ldr	r0, [pc, #484]	; (8018c1c <ip4_frag+0x22c>)
 8018a36:	f000 fc13 	bl	8019260 <iprintf>
 8018a3a:	f06f 0305 	mvn.w	r3, #5
 8018a3e:	e0e5      	b.n	8018c0c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a42:	88db      	ldrh	r3, [r3, #6]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f6 fd14 	bl	800f474 <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8018a50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018a52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a56:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8018a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d009      	beq.n	8018a76 <ip4_frag+0x86>
 8018a62:	4b6c      	ldr	r3, [pc, #432]	; (8018c14 <ip4_frag+0x224>)
 8018a64:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018a68:	496d      	ldr	r1, [pc, #436]	; (8018c20 <ip4_frag+0x230>)
 8018a6a:	486c      	ldr	r0, [pc, #432]	; (8018c1c <ip4_frag+0x22c>)
 8018a6c:	f000 fbf8 	bl	8019260 <iprintf>
 8018a70:	f06f 0305 	mvn.w	r3, #5
 8018a74:	e0ca      	b.n	8018c0c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	891b      	ldrh	r3, [r3, #8]
 8018a7a:	3b14      	subs	r3, #20
 8018a7c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8018a7e:	e0bc      	b.n	8018bfa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8018a80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018a82:	00da      	lsls	r2, r3, #3
 8018a84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a86:	4293      	cmp	r3, r2
 8018a88:	bfa8      	it	ge
 8018a8a:	4613      	movge	r3, r2
 8018a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a8e:	2200      	movs	r2, #0
 8018a90:	2114      	movs	r1, #20
 8018a92:	2002      	movs	r0, #2
 8018a94:	f7f7 fb96 	bl	80101c4 <pbuf_alloc>
 8018a98:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8018a9a:	6a3b      	ldr	r3, [r7, #32]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	f000 80b2 	beq.w	8018c06 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	895b      	ldrh	r3, [r3, #10]
 8018aa6:	2b13      	cmp	r3, #19
 8018aa8:	d806      	bhi.n	8018ab8 <ip4_frag+0xc8>
 8018aaa:	4b5a      	ldr	r3, [pc, #360]	; (8018c14 <ip4_frag+0x224>)
 8018aac:	f240 3209 	movw	r2, #777	; 0x309
 8018ab0:	495c      	ldr	r1, [pc, #368]	; (8018c24 <ip4_frag+0x234>)
 8018ab2:	485a      	ldr	r0, [pc, #360]	; (8018c1c <ip4_frag+0x22c>)
 8018ab4:	f000 fbd4 	bl	8019260 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018ab8:	6a3b      	ldr	r3, [r7, #32]
 8018aba:	685b      	ldr	r3, [r3, #4]
 8018abc:	2214      	movs	r2, #20
 8018abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f000 fbba 	bl	801923a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018ac6:	6a3b      	ldr	r3, [r7, #32]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8018acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ace:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018ad0:	e04f      	b.n	8018b72 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	895a      	ldrh	r2, [r3, #10]
 8018ad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018ad8:	1ad3      	subs	r3, r2, r3
 8018ada:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018adc:	8b7a      	ldrh	r2, [r7, #26]
 8018ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	bf28      	it	cs
 8018ae4:	4613      	movcs	r3, r2
 8018ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d105      	bne.n	8018afa <ip4_frag+0x10a>
        poff = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	60fb      	str	r3, [r7, #12]
        continue;
 8018af8:	e03b      	b.n	8018b72 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018afa:	f7ff ff21 	bl	8018940 <ip_frag_alloc_pbuf_custom_ref>
 8018afe:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d103      	bne.n	8018b0e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8018b06:	6a38      	ldr	r0, [r7, #32]
 8018b08:	f7f7 fece 	bl	80108a8 <pbuf_free>
        goto memerr;
 8018b0c:	e07c      	b.n	8018c08 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b0e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018b16:	4413      	add	r3, r2
 8018b18:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8018b1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b1c:	9201      	str	r2, [sp, #4]
 8018b1e:	9300      	str	r3, [sp, #0]
 8018b20:	4603      	mov	r3, r0
 8018b22:	2202      	movs	r2, #2
 8018b24:	2004      	movs	r0, #4
 8018b26:	f7f7 fce1 	bl	80104ec <pbuf_alloced_custom>
 8018b2a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8018b2c:	693b      	ldr	r3, [r7, #16]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d106      	bne.n	8018b40 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b32:	6978      	ldr	r0, [r7, #20]
 8018b34:	f7ff ff0c 	bl	8018950 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b38:	6a38      	ldr	r0, [r7, #32]
 8018b3a:	f7f7 feb5 	bl	80108a8 <pbuf_free>
        goto memerr;
 8018b3e:	e063      	b.n	8018c08 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8018b40:	68f8      	ldr	r0, [r7, #12]
 8018b42:	f7f7 ff63 	bl	8010a0c <pbuf_ref>
      pcr->original = p;
 8018b46:	697b      	ldr	r3, [r7, #20]
 8018b48:	68fa      	ldr	r2, [r7, #12]
 8018b4a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	4a36      	ldr	r2, [pc, #216]	; (8018c28 <ip4_frag+0x238>)
 8018b50:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b52:	6939      	ldr	r1, [r7, #16]
 8018b54:	6a38      	ldr	r0, [r7, #32]
 8018b56:	f7f7 ff81 	bl	8010a5c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8018b5a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8018b5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b5e:	1ad3      	subs	r3, r2, r3
 8018b60:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8018b62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d004      	beq.n	8018b72 <ip4_frag+0x182>
        poff = 0;
 8018b68:	2300      	movs	r3, #0
 8018b6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d1ac      	bne.n	8018ad2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8018b78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018b7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b7c:	4413      	add	r3, r2
 8018b7e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018b86:	3b14      	subs	r3, #20
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	bfd4      	ite	le
 8018b8c:	2301      	movle	r3, #1
 8018b8e:	2300      	movgt	r3, #0
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018b94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b9a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8018b9c:	69fb      	ldr	r3, [r7, #28]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d103      	bne.n	8018baa <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8018ba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018ba8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018baa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7f6 fc61 	bl	800f474 <lwip_htons>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	461a      	mov	r2, r3
 8018bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8018bba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018bbc:	3314      	adds	r3, #20
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7f6 fc57 	bl	800f474 <lwip_htons>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	461a      	mov	r2, r3
 8018bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bcc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	729a      	strb	r2, [r3, #10]
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	695b      	ldr	r3, [r3, #20]
 8018bdc:	687a      	ldr	r2, [r7, #4]
 8018bde:	6a39      	ldr	r1, [r7, #32]
 8018be0:	68b8      	ldr	r0, [r7, #8]
 8018be2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018be4:	6a38      	ldr	r0, [r7, #32]
 8018be6:	f7f7 fe5f 	bl	80108a8 <pbuf_free>
    left -= fragsize;
 8018bea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018bee:	1ad3      	subs	r3, r2, r3
 8018bf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8018bf2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018bf4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018bf6:	4413      	add	r3, r2
 8018bf8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8018bfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	f47f af3f 	bne.w	8018a80 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c02:	2300      	movs	r3, #0
 8018c04:	e002      	b.n	8018c0c <ip4_frag+0x21c>
      goto memerr;
 8018c06:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	3740      	adds	r7, #64	; 0x40
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}
 8018c14:	0801cb34 	.word	0x0801cb34
 8018c18:	0801cce0 	.word	0x0801cce0
 8018c1c:	0801cb9c 	.word	0x0801cb9c
 8018c20:	0801cd08 	.word	0x0801cd08
 8018c24:	0801cd24 	.word	0x0801cd24
 8018c28:	08018989 	.word	0x08018989

08018c2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b086      	sub	sp, #24
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8018c36:	230e      	movs	r3, #14
 8018c38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	895b      	ldrh	r3, [r3, #10]
 8018c3e:	2b0e      	cmp	r3, #14
 8018c40:	d977      	bls.n	8018d32 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	685b      	ldr	r3, [r3, #4]
 8018c46:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c48:	693b      	ldr	r3, [r7, #16]
 8018c4a:	7b1a      	ldrb	r2, [r3, #12]
 8018c4c:	7b5b      	ldrb	r3, [r3, #13]
 8018c4e:	021b      	lsls	r3, r3, #8
 8018c50:	4313      	orrs	r3, r2
 8018c52:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c54:	693b      	ldr	r3, [r7, #16]
 8018c56:	781b      	ldrb	r3, [r3, #0]
 8018c58:	f003 0301 	and.w	r3, r3, #1
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d023      	beq.n	8018ca8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c60:	693b      	ldr	r3, [r7, #16]
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d10f      	bne.n	8018c88 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c68:	693b      	ldr	r3, [r7, #16]
 8018c6a:	785b      	ldrb	r3, [r3, #1]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d11b      	bne.n	8018ca8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018c70:	693b      	ldr	r3, [r7, #16]
 8018c72:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c74:	2b5e      	cmp	r3, #94	; 0x5e
 8018c76:	d117      	bne.n	8018ca8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	7b5b      	ldrb	r3, [r3, #13]
 8018c7c:	f043 0310 	orr.w	r3, r3, #16
 8018c80:	b2da      	uxtb	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	735a      	strb	r2, [r3, #13]
 8018c86:	e00f      	b.n	8018ca8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	2206      	movs	r2, #6
 8018c8c:	4930      	ldr	r1, [pc, #192]	; (8018d50 <ethernet_input+0x124>)
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f000 fac4 	bl	801921c <memcmp>
 8018c94:	4603      	mov	r3, r0
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d106      	bne.n	8018ca8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	7b5b      	ldrb	r3, [r3, #13]
 8018c9e:	f043 0308 	orr.w	r3, r3, #8
 8018ca2:	b2da      	uxtb	r2, r3
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018ca8:	89fb      	ldrh	r3, [r7, #14]
 8018caa:	2b08      	cmp	r3, #8
 8018cac:	d003      	beq.n	8018cb6 <ethernet_input+0x8a>
 8018cae:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cb2:	d01e      	beq.n	8018cf2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cb4:	e044      	b.n	8018d40 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018cbc:	f003 0308 	and.w	r3, r3, #8
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d038      	beq.n	8018d36 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	895b      	ldrh	r3, [r3, #10]
 8018cc8:	461a      	mov	r2, r3
 8018cca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	db33      	blt.n	8018d3a <ethernet_input+0x10e>
 8018cd2:	8afb      	ldrh	r3, [r7, #22]
 8018cd4:	425b      	negs	r3, r3
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	b21b      	sxth	r3, r3
 8018cda:	4619      	mov	r1, r3
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f7f7 fdbf 	bl	8010860 <pbuf_header>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d128      	bne.n	8018d3a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018ce8:	6839      	ldr	r1, [r7, #0]
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f7fe ff80 	bl	8017bf0 <ip4_input>
      break;
 8018cf0:	e01d      	b.n	8018d2e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018cf8:	f003 0308 	and.w	r3, r3, #8
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d01e      	beq.n	8018d3e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	895b      	ldrh	r3, [r3, #10]
 8018d04:	461a      	mov	r2, r3
 8018d06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	db15      	blt.n	8018d3a <ethernet_input+0x10e>
 8018d0e:	8afb      	ldrh	r3, [r7, #22]
 8018d10:	425b      	negs	r3, r3
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	b21b      	sxth	r3, r3
 8018d16:	4619      	mov	r1, r3
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f7f7 fda1 	bl	8010860 <pbuf_header>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d10a      	bne.n	8018d3a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8018d24:	6839      	ldr	r1, [r7, #0]
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f7fe f94e 	bl	8016fc8 <etharp_input>
      break;
 8018d2c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d2e:	2300      	movs	r3, #0
 8018d30:	e00a      	b.n	8018d48 <ethernet_input+0x11c>
    goto free_and_return;
 8018d32:	bf00      	nop
 8018d34:	e004      	b.n	8018d40 <ethernet_input+0x114>
        goto free_and_return;
 8018d36:	bf00      	nop
 8018d38:	e002      	b.n	8018d40 <ethernet_input+0x114>

free_and_return:
 8018d3a:	bf00      	nop
 8018d3c:	e000      	b.n	8018d40 <ethernet_input+0x114>
        goto free_and_return;
 8018d3e:	bf00      	nop
  pbuf_free(p);
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f7f7 fdb1 	bl	80108a8 <pbuf_free>
  return ERR_OK;
 8018d46:	2300      	movs	r3, #0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3718      	adds	r7, #24
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	0801cf28 	.word	0x0801cf28

08018d54 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b086      	sub	sp, #24
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	60f8      	str	r0, [r7, #12]
 8018d5c:	60b9      	str	r1, [r7, #8]
 8018d5e:	607a      	str	r2, [r7, #4]
 8018d60:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d62:	8c3b      	ldrh	r3, [r7, #32]
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7f6 fb85 	bl	800f474 <lwip_htons>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d6e:	210e      	movs	r1, #14
 8018d70:	68b8      	ldr	r0, [r7, #8]
 8018d72:	f7f7 fd75 	bl	8010860 <pbuf_header>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d125      	bne.n	8018dc8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	685b      	ldr	r3, [r3, #4]
 8018d80:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	8afa      	ldrh	r2, [r7, #22]
 8018d86:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	2206      	movs	r2, #6
 8018d8c:	6839      	ldr	r1, [r7, #0]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f000 fa53 	bl	801923a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	3306      	adds	r3, #6
 8018d98:	2206      	movs	r2, #6
 8018d9a:	6879      	ldr	r1, [r7, #4]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f000 fa4c 	bl	801923a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018da8:	2b06      	cmp	r3, #6
 8018daa:	d006      	beq.n	8018dba <ethernet_output+0x66>
 8018dac:	4b0a      	ldr	r3, [pc, #40]	; (8018dd8 <ethernet_output+0x84>)
 8018dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018db2:	490a      	ldr	r1, [pc, #40]	; (8018ddc <ethernet_output+0x88>)
 8018db4:	480a      	ldr	r0, [pc, #40]	; (8018de0 <ethernet_output+0x8c>)
 8018db6:	f000 fa53 	bl	8019260 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	699b      	ldr	r3, [r3, #24]
 8018dbe:	68b9      	ldr	r1, [r7, #8]
 8018dc0:	68f8      	ldr	r0, [r7, #12]
 8018dc2:	4798      	blx	r3
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	e002      	b.n	8018dce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018dc8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018dca:	f06f 0301 	mvn.w	r3, #1
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3718      	adds	r7, #24
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}
 8018dd6:	bf00      	nop
 8018dd8:	0801cd44 	.word	0x0801cd44
 8018ddc:	0801cd9c 	.word	0x0801cd9c
 8018de0:	0801cdd0 	.word	0x0801cdd0

08018de4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b086      	sub	sp, #24
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	60bb      	str	r3, [r7, #8]
 8018df2:	2304      	movs	r3, #4
 8018df4:	60fb      	str	r3, [r7, #12]
 8018df6:	2300      	movs	r3, #0
 8018df8:	613b      	str	r3, [r7, #16]
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018dfe:	f107 0308 	add.w	r3, r7, #8
 8018e02:	2100      	movs	r1, #0
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7f1 fbce 	bl	800a5a6 <osMessageCreate>
 8018e0a:	4602      	mov	r2, r0
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d102      	bne.n	8018e1e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018e18:	f04f 33ff 	mov.w	r3, #4294967295
 8018e1c:	e000      	b.n	8018e20 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018e1e:	2300      	movs	r3, #0
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3718      	adds	r7, #24
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b082      	sub	sp, #8
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f1 fc93 	bl	800a760 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f7f1 fca4 	bl	800a78c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018e44:	bf00      	nop
 8018e46:	3708      	adds	r7, #8
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}

08018e4c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8018e56:	bf00      	nop
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	6839      	ldr	r1, [r7, #0]
 8018e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7f1 fbc8 	bl	800a5f8 <osMessagePut>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d1f4      	bne.n	8018e58 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8018e6e:	bf00      	nop
 8018e70:	3708      	adds	r7, #8
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}

08018e76 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018e76:	b580      	push	{r7, lr}
 8018e78:	b084      	sub	sp, #16
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
 8018e7e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	6839      	ldr	r1, [r7, #0]
 8018e86:	2200      	movs	r2, #0
 8018e88:	4618      	mov	r0, r3
 8018e8a:	f7f1 fbb5 	bl	800a5f8 <osMessagePut>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d102      	bne.n	8018e9a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018e94:	2300      	movs	r3, #0
 8018e96:	73fb      	strb	r3, [r7, #15]
 8018e98:	e001      	b.n	8018e9e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018e9a:	23ff      	movs	r3, #255	; 0xff
 8018e9c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b08c      	sub	sp, #48	; 0x30
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	61f8      	str	r0, [r7, #28]
 8018eb2:	61b9      	str	r1, [r7, #24]
 8018eb4:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018eb6:	f7f1 f99f 	bl	800a1f8 <osKernelSysTick>
 8018eba:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018ebc:	697b      	ldr	r3, [r7, #20]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d017      	beq.n	8018ef2 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018ec2:	69fb      	ldr	r3, [r7, #28]
 8018ec4:	6819      	ldr	r1, [r3, #0]
 8018ec6:	f107 0320 	add.w	r3, r7, #32
 8018eca:	697a      	ldr	r2, [r7, #20]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7f1 fbd3 	bl	800a678 <osMessageGet>

    if(event.status == osEventMessage)
 8018ed2:	6a3b      	ldr	r3, [r7, #32]
 8018ed4:	2b10      	cmp	r3, #16
 8018ed6:	d109      	bne.n	8018eec <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eda:	461a      	mov	r2, r3
 8018edc:	69bb      	ldr	r3, [r7, #24]
 8018ede:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018ee0:	f7f1 f98a 	bl	800a1f8 <osKernelSysTick>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee8:	1ad3      	subs	r3, r2, r3
 8018eea:	e019      	b.n	8018f20 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018eec:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef0:	e016      	b.n	8018f20 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018ef2:	69fb      	ldr	r3, [r7, #28]
 8018ef4:	6819      	ldr	r1, [r3, #0]
 8018ef6:	463b      	mov	r3, r7
 8018ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8018efc:	4618      	mov	r0, r3
 8018efe:	f7f1 fbbb 	bl	800a678 <osMessageGet>
 8018f02:	f107 0320 	add.w	r3, r7, #32
 8018f06:	463a      	mov	r2, r7
 8018f08:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f10:	461a      	mov	r2, r3
 8018f12:	69bb      	ldr	r3, [r7, #24]
 8018f14:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018f16:	f7f1 f96f 	bl	800a1f8 <osKernelSysTick>
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f1e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018f20:	4618      	mov	r0, r3
 8018f22:	3730      	adds	r7, #48	; 0x30
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}

08018f28 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b086      	sub	sp, #24
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6819      	ldr	r1, [r3, #0]
 8018f36:	f107 030c 	add.w	r3, r7, #12
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f1 fb9b 	bl	800a678 <osMessageGet>

  if(event.status == osEventMessage)
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	2b10      	cmp	r3, #16
 8018f46:	d105      	bne.n	8018f54 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018f48:	693b      	ldr	r3, [r7, #16]
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e001      	b.n	8018f58 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018f54:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018f58:	4618      	mov	r0, r3
 8018f5a:	3718      	adds	r7, #24
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd80      	pop	{r7, pc}

08018f60 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018f60:	b480      	push	{r7}
 8018f62:	b083      	sub	sp, #12
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d101      	bne.n	8018f74 <sys_mbox_valid+0x14>
    return 0;
 8018f70:	2300      	movs	r3, #0
 8018f72:	e000      	b.n	8018f76 <sys_mbox_valid+0x16>
  else
    return 1;
 8018f74:	2301      	movs	r3, #1
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	370c      	adds	r7, #12
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr

08018f82 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018f82:	b480      	push	{r7}
 8018f84:	b083      	sub	sp, #12
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	601a      	str	r2, [r3, #0]
}
 8018f90:	bf00      	nop
 8018f92:	370c      	adds	r7, #12
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr

08018f9c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b084      	sub	sp, #16
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018fa8:	2300      	movs	r3, #0
 8018faa:	60bb      	str	r3, [r7, #8]
 8018fac:	2300      	movs	r3, #0
 8018fae:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018fb0:	f107 0308 	add.w	r3, r7, #8
 8018fb4:	2101      	movs	r1, #1
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7f1 fa2a 	bl	800a410 <osSemaphoreCreate>
 8018fbc:	4602      	mov	r2, r0
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d102      	bne.n	8018fd0 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018fca:	f04f 33ff 	mov.w	r3, #4294967295
 8018fce:	e009      	b.n	8018fe4 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018fd0:	78fb      	ldrb	r3, [r7, #3]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d105      	bne.n	8018fe2 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	2100      	movs	r1, #0
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7f1 fa4b 	bl	800a478 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018fe2:	2300      	movs	r3, #0
}
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	3710      	adds	r7, #16
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bd80      	pop	{r7, pc}

08018fec <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b084      	sub	sp, #16
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018ff6:	f7f1 f8ff 	bl	800a1f8 <osKernelSysTick>
 8018ffa:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018ffc:	683b      	ldr	r3, [r7, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d011      	beq.n	8019026 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	6839      	ldr	r1, [r7, #0]
 8019008:	4618      	mov	r0, r3
 801900a:	f7f1 fa35 	bl	800a478 <osSemaphoreWait>
 801900e:	4603      	mov	r3, r0
 8019010:	2b00      	cmp	r3, #0
 8019012:	d105      	bne.n	8019020 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019014:	f7f1 f8f0 	bl	800a1f8 <osKernelSysTick>
 8019018:	4602      	mov	r2, r0
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	e012      	b.n	8019046 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019020:	f04f 33ff 	mov.w	r3, #4294967295
 8019024:	e00f      	b.n	8019046 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019026:	bf00      	nop
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	f04f 31ff 	mov.w	r1, #4294967295
 8019030:	4618      	mov	r0, r3
 8019032:	f7f1 fa21 	bl	800a478 <osSemaphoreWait>
 8019036:	4603      	mov	r3, r0
 8019038:	2b00      	cmp	r3, #0
 801903a:	d1f5      	bne.n	8019028 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801903c:	f7f1 f8dc 	bl	800a1f8 <osKernelSysTick>
 8019040:	4602      	mov	r2, r0
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019046:	4618      	mov	r0, r3
 8019048:	3710      	adds	r7, #16
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}

0801904e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801904e:	b580      	push	{r7, lr}
 8019050:	b082      	sub	sp, #8
 8019052:	af00      	add	r7, sp, #0
 8019054:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4618      	mov	r0, r3
 801905c:	f7f1 fa5a 	bl	800a514 <osSemaphoreRelease>
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4618      	mov	r0, r3
 8019076:	f7f1 fa83 	bl	800a580 <osSemaphoreDelete>
}
 801907a:	bf00      	nop
 801907c:	3708      	adds	r7, #8
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}

08019082 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019082:	b480      	push	{r7}
 8019084:	b083      	sub	sp, #12
 8019086:	af00      	add	r7, sp, #0
 8019088:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d101      	bne.n	8019096 <sys_sem_valid+0x14>
    return 0;
 8019092:	2300      	movs	r3, #0
 8019094:	e000      	b.n	8019098 <sys_sem_valid+0x16>
  else
    return 1;
 8019096:	2301      	movs	r3, #1
}
 8019098:	4618      	mov	r0, r3
 801909a:	370c      	adds	r7, #12
 801909c:	46bd      	mov	sp, r7
 801909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a2:	4770      	bx	lr

080190a4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80190a4:	b480      	push	{r7}
 80190a6:	b083      	sub	sp, #12
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2200      	movs	r2, #0
 80190b0:	601a      	str	r2, [r3, #0]
}
 80190b2:	bf00      	nop
 80190b4:	370c      	adds	r7, #12
 80190b6:	46bd      	mov	sp, r7
 80190b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190bc:	4770      	bx	lr
	...

080190c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80190c4:	4803      	ldr	r0, [pc, #12]	; (80190d4 <sys_init+0x14>)
 80190c6:	f7f1 f907 	bl	800a2d8 <osMutexCreate>
 80190ca:	4602      	mov	r2, r0
 80190cc:	4b02      	ldr	r3, [pc, #8]	; (80190d8 <sys_init+0x18>)
 80190ce:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80190d0:	bf00      	nop
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	0801cf38 	.word	0x0801cf38
 80190d8:	200101ec 	.word	0x200101ec

080190dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80190e4:	2300      	movs	r3, #0
 80190e6:	60bb      	str	r3, [r7, #8]
 80190e8:	2300      	movs	r3, #0
 80190ea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80190ec:	f107 0308 	add.w	r3, r7, #8
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7f1 f8f1 	bl	800a2d8 <osMutexCreate>
 80190f6:	4602      	mov	r2, r0
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d102      	bne.n	801910a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019104:	f04f 33ff 	mov.w	r3, #4294967295
 8019108:	e000      	b.n	801910c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801910a:	2300      	movs	r3, #0
}
 801910c:	4618      	mov	r0, r3
 801910e:	3710      	adds	r7, #16
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	f04f 31ff 	mov.w	r1, #4294967295
 8019124:	4618      	mov	r0, r3
 8019126:	f7f1 f8ef 	bl	800a308 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801912a:	bf00      	nop
 801912c:	3708      	adds	r7, #8
 801912e:	46bd      	mov	sp, r7
 8019130:	bd80      	pop	{r7, pc}

08019132 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019132:	b580      	push	{r7, lr}
 8019134:	b082      	sub	sp, #8
 8019136:	af00      	add	r7, sp, #0
 8019138:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	4618      	mov	r0, r3
 8019140:	f7f1 f930 	bl	800a3a4 <osMutexRelease>
}
 8019144:	bf00      	nop
 8019146:	3708      	adds	r7, #8
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b08c      	sub	sp, #48	; 0x30
 8019150:	af00      	add	r7, sp, #0
 8019152:	60f8      	str	r0, [r7, #12]
 8019154:	60b9      	str	r1, [r7, #8]
 8019156:	607a      	str	r2, [r7, #4]
 8019158:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801915a:	f107 0314 	add.w	r3, r7, #20
 801915e:	2200      	movs	r2, #0
 8019160:	601a      	str	r2, [r3, #0]
 8019162:	605a      	str	r2, [r3, #4]
 8019164:	609a      	str	r2, [r3, #8]
 8019166:	60da      	str	r2, [r3, #12]
 8019168:	611a      	str	r2, [r3, #16]
 801916a:	615a      	str	r2, [r3, #20]
 801916c:	619a      	str	r2, [r3, #24]
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	617b      	str	r3, [r7, #20]
 8019172:	68bb      	ldr	r3, [r7, #8]
 8019174:	61bb      	str	r3, [r7, #24]
 8019176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019178:	b21b      	sxth	r3, r3
 801917a:	83bb      	strh	r3, [r7, #28]
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019180:	f107 0314 	add.w	r3, r7, #20
 8019184:	6879      	ldr	r1, [r7, #4]
 8019186:	4618      	mov	r0, r3
 8019188:	f7f1 f846 	bl	800a218 <osThreadCreate>
 801918c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801918e:	4618      	mov	r0, r3
 8019190:	3730      	adds	r7, #48	; 0x30
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}
	...

08019198 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801919c:	4b04      	ldr	r3, [pc, #16]	; (80191b0 <sys_arch_protect+0x18>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	f04f 31ff 	mov.w	r1, #4294967295
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7f1 f8af 	bl	800a308 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80191aa:	2301      	movs	r3, #1
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	bd80      	pop	{r7, pc}
 80191b0:	200101ec 	.word	0x200101ec

080191b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b082      	sub	sp, #8
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80191bc:	4b04      	ldr	r3, [pc, #16]	; (80191d0 <sys_arch_unprotect+0x1c>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7f1 f8ef 	bl	800a3a4 <osMutexRelease>
}
 80191c6:	bf00      	nop
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	200101ec 	.word	0x200101ec

080191d4 <__libc_init_array>:
 80191d4:	b570      	push	{r4, r5, r6, lr}
 80191d6:	4e0d      	ldr	r6, [pc, #52]	; (801920c <__libc_init_array+0x38>)
 80191d8:	4c0d      	ldr	r4, [pc, #52]	; (8019210 <__libc_init_array+0x3c>)
 80191da:	1ba4      	subs	r4, r4, r6
 80191dc:	10a4      	asrs	r4, r4, #2
 80191de:	2500      	movs	r5, #0
 80191e0:	42a5      	cmp	r5, r4
 80191e2:	d109      	bne.n	80191f8 <__libc_init_array+0x24>
 80191e4:	4e0b      	ldr	r6, [pc, #44]	; (8019214 <__libc_init_array+0x40>)
 80191e6:	4c0c      	ldr	r4, [pc, #48]	; (8019218 <__libc_init_array+0x44>)
 80191e8:	f001 f8d8 	bl	801a39c <_init>
 80191ec:	1ba4      	subs	r4, r4, r6
 80191ee:	10a4      	asrs	r4, r4, #2
 80191f0:	2500      	movs	r5, #0
 80191f2:	42a5      	cmp	r5, r4
 80191f4:	d105      	bne.n	8019202 <__libc_init_array+0x2e>
 80191f6:	bd70      	pop	{r4, r5, r6, pc}
 80191f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80191fc:	4798      	blx	r3
 80191fe:	3501      	adds	r5, #1
 8019200:	e7ee      	b.n	80191e0 <__libc_init_array+0xc>
 8019202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019206:	4798      	blx	r3
 8019208:	3501      	adds	r5, #1
 801920a:	e7f2      	b.n	80191f2 <__libc_init_array+0x1e>
 801920c:	0801cfe0 	.word	0x0801cfe0
 8019210:	0801cfe0 	.word	0x0801cfe0
 8019214:	0801cfe0 	.word	0x0801cfe0
 8019218:	0801cfe4 	.word	0x0801cfe4

0801921c <memcmp>:
 801921c:	b530      	push	{r4, r5, lr}
 801921e:	2400      	movs	r4, #0
 8019220:	42a2      	cmp	r2, r4
 8019222:	d101      	bne.n	8019228 <memcmp+0xc>
 8019224:	2000      	movs	r0, #0
 8019226:	e007      	b.n	8019238 <memcmp+0x1c>
 8019228:	5d03      	ldrb	r3, [r0, r4]
 801922a:	3401      	adds	r4, #1
 801922c:	190d      	adds	r5, r1, r4
 801922e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019232:	42ab      	cmp	r3, r5
 8019234:	d0f4      	beq.n	8019220 <memcmp+0x4>
 8019236:	1b58      	subs	r0, r3, r5
 8019238:	bd30      	pop	{r4, r5, pc}

0801923a <memcpy>:
 801923a:	b510      	push	{r4, lr}
 801923c:	1e43      	subs	r3, r0, #1
 801923e:	440a      	add	r2, r1
 8019240:	4291      	cmp	r1, r2
 8019242:	d100      	bne.n	8019246 <memcpy+0xc>
 8019244:	bd10      	pop	{r4, pc}
 8019246:	f811 4b01 	ldrb.w	r4, [r1], #1
 801924a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801924e:	e7f7      	b.n	8019240 <memcpy+0x6>

08019250 <memset>:
 8019250:	4402      	add	r2, r0
 8019252:	4603      	mov	r3, r0
 8019254:	4293      	cmp	r3, r2
 8019256:	d100      	bne.n	801925a <memset+0xa>
 8019258:	4770      	bx	lr
 801925a:	f803 1b01 	strb.w	r1, [r3], #1
 801925e:	e7f9      	b.n	8019254 <memset+0x4>

08019260 <iprintf>:
 8019260:	b40f      	push	{r0, r1, r2, r3}
 8019262:	4b0a      	ldr	r3, [pc, #40]	; (801928c <iprintf+0x2c>)
 8019264:	b513      	push	{r0, r1, r4, lr}
 8019266:	681c      	ldr	r4, [r3, #0]
 8019268:	b124      	cbz	r4, 8019274 <iprintf+0x14>
 801926a:	69a3      	ldr	r3, [r4, #24]
 801926c:	b913      	cbnz	r3, 8019274 <iprintf+0x14>
 801926e:	4620      	mov	r0, r4
 8019270:	f000 f86e 	bl	8019350 <__sinit>
 8019274:	ab05      	add	r3, sp, #20
 8019276:	9a04      	ldr	r2, [sp, #16]
 8019278:	68a1      	ldr	r1, [r4, #8]
 801927a:	9301      	str	r3, [sp, #4]
 801927c:	4620      	mov	r0, r4
 801927e:	f000 fac7 	bl	8019810 <_vfiprintf_r>
 8019282:	b002      	add	sp, #8
 8019284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019288:	b004      	add	sp, #16
 801928a:	4770      	bx	lr
 801928c:	20000034 	.word	0x20000034

08019290 <siprintf>:
 8019290:	b40e      	push	{r1, r2, r3}
 8019292:	b500      	push	{lr}
 8019294:	b09c      	sub	sp, #112	; 0x70
 8019296:	ab1d      	add	r3, sp, #116	; 0x74
 8019298:	9002      	str	r0, [sp, #8]
 801929a:	9006      	str	r0, [sp, #24]
 801929c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80192a0:	4809      	ldr	r0, [pc, #36]	; (80192c8 <siprintf+0x38>)
 80192a2:	9107      	str	r1, [sp, #28]
 80192a4:	9104      	str	r1, [sp, #16]
 80192a6:	4909      	ldr	r1, [pc, #36]	; (80192cc <siprintf+0x3c>)
 80192a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ac:	9105      	str	r1, [sp, #20]
 80192ae:	6800      	ldr	r0, [r0, #0]
 80192b0:	9301      	str	r3, [sp, #4]
 80192b2:	a902      	add	r1, sp, #8
 80192b4:	f000 f98a 	bl	80195cc <_svfiprintf_r>
 80192b8:	9b02      	ldr	r3, [sp, #8]
 80192ba:	2200      	movs	r2, #0
 80192bc:	701a      	strb	r2, [r3, #0]
 80192be:	b01c      	add	sp, #112	; 0x70
 80192c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80192c4:	b003      	add	sp, #12
 80192c6:	4770      	bx	lr
 80192c8:	20000034 	.word	0x20000034
 80192cc:	ffff0208 	.word	0xffff0208

080192d0 <std>:
 80192d0:	2300      	movs	r3, #0
 80192d2:	b510      	push	{r4, lr}
 80192d4:	4604      	mov	r4, r0
 80192d6:	e9c0 3300 	strd	r3, r3, [r0]
 80192da:	6083      	str	r3, [r0, #8]
 80192dc:	8181      	strh	r1, [r0, #12]
 80192de:	6643      	str	r3, [r0, #100]	; 0x64
 80192e0:	81c2      	strh	r2, [r0, #14]
 80192e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80192e6:	6183      	str	r3, [r0, #24]
 80192e8:	4619      	mov	r1, r3
 80192ea:	2208      	movs	r2, #8
 80192ec:	305c      	adds	r0, #92	; 0x5c
 80192ee:	f7ff ffaf 	bl	8019250 <memset>
 80192f2:	4b05      	ldr	r3, [pc, #20]	; (8019308 <std+0x38>)
 80192f4:	6263      	str	r3, [r4, #36]	; 0x24
 80192f6:	4b05      	ldr	r3, [pc, #20]	; (801930c <std+0x3c>)
 80192f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80192fa:	4b05      	ldr	r3, [pc, #20]	; (8019310 <std+0x40>)
 80192fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192fe:	4b05      	ldr	r3, [pc, #20]	; (8019314 <std+0x44>)
 8019300:	6224      	str	r4, [r4, #32]
 8019302:	6323      	str	r3, [r4, #48]	; 0x30
 8019304:	bd10      	pop	{r4, pc}
 8019306:	bf00      	nop
 8019308:	08019d6d 	.word	0x08019d6d
 801930c:	08019d8f 	.word	0x08019d8f
 8019310:	08019dc7 	.word	0x08019dc7
 8019314:	08019deb 	.word	0x08019deb

08019318 <_cleanup_r>:
 8019318:	4901      	ldr	r1, [pc, #4]	; (8019320 <_cleanup_r+0x8>)
 801931a:	f000 b885 	b.w	8019428 <_fwalk_reent>
 801931e:	bf00      	nop
 8019320:	0801a0c5 	.word	0x0801a0c5

08019324 <__sfmoreglue>:
 8019324:	b570      	push	{r4, r5, r6, lr}
 8019326:	1e4a      	subs	r2, r1, #1
 8019328:	2568      	movs	r5, #104	; 0x68
 801932a:	4355      	muls	r5, r2
 801932c:	460e      	mov	r6, r1
 801932e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019332:	f000 f897 	bl	8019464 <_malloc_r>
 8019336:	4604      	mov	r4, r0
 8019338:	b140      	cbz	r0, 801934c <__sfmoreglue+0x28>
 801933a:	2100      	movs	r1, #0
 801933c:	e9c0 1600 	strd	r1, r6, [r0]
 8019340:	300c      	adds	r0, #12
 8019342:	60a0      	str	r0, [r4, #8]
 8019344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019348:	f7ff ff82 	bl	8019250 <memset>
 801934c:	4620      	mov	r0, r4
 801934e:	bd70      	pop	{r4, r5, r6, pc}

08019350 <__sinit>:
 8019350:	6983      	ldr	r3, [r0, #24]
 8019352:	b510      	push	{r4, lr}
 8019354:	4604      	mov	r4, r0
 8019356:	bb33      	cbnz	r3, 80193a6 <__sinit+0x56>
 8019358:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801935c:	6503      	str	r3, [r0, #80]	; 0x50
 801935e:	4b12      	ldr	r3, [pc, #72]	; (80193a8 <__sinit+0x58>)
 8019360:	4a12      	ldr	r2, [pc, #72]	; (80193ac <__sinit+0x5c>)
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	6282      	str	r2, [r0, #40]	; 0x28
 8019366:	4298      	cmp	r0, r3
 8019368:	bf04      	itt	eq
 801936a:	2301      	moveq	r3, #1
 801936c:	6183      	streq	r3, [r0, #24]
 801936e:	f000 f81f 	bl	80193b0 <__sfp>
 8019372:	6060      	str	r0, [r4, #4]
 8019374:	4620      	mov	r0, r4
 8019376:	f000 f81b 	bl	80193b0 <__sfp>
 801937a:	60a0      	str	r0, [r4, #8]
 801937c:	4620      	mov	r0, r4
 801937e:	f000 f817 	bl	80193b0 <__sfp>
 8019382:	2200      	movs	r2, #0
 8019384:	60e0      	str	r0, [r4, #12]
 8019386:	2104      	movs	r1, #4
 8019388:	6860      	ldr	r0, [r4, #4]
 801938a:	f7ff ffa1 	bl	80192d0 <std>
 801938e:	2201      	movs	r2, #1
 8019390:	2109      	movs	r1, #9
 8019392:	68a0      	ldr	r0, [r4, #8]
 8019394:	f7ff ff9c 	bl	80192d0 <std>
 8019398:	2202      	movs	r2, #2
 801939a:	2112      	movs	r1, #18
 801939c:	68e0      	ldr	r0, [r4, #12]
 801939e:	f7ff ff97 	bl	80192d0 <std>
 80193a2:	2301      	movs	r3, #1
 80193a4:	61a3      	str	r3, [r4, #24]
 80193a6:	bd10      	pop	{r4, pc}
 80193a8:	0801cf40 	.word	0x0801cf40
 80193ac:	08019319 	.word	0x08019319

080193b0 <__sfp>:
 80193b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193b2:	4b1b      	ldr	r3, [pc, #108]	; (8019420 <__sfp+0x70>)
 80193b4:	681e      	ldr	r6, [r3, #0]
 80193b6:	69b3      	ldr	r3, [r6, #24]
 80193b8:	4607      	mov	r7, r0
 80193ba:	b913      	cbnz	r3, 80193c2 <__sfp+0x12>
 80193bc:	4630      	mov	r0, r6
 80193be:	f7ff ffc7 	bl	8019350 <__sinit>
 80193c2:	3648      	adds	r6, #72	; 0x48
 80193c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80193c8:	3b01      	subs	r3, #1
 80193ca:	d503      	bpl.n	80193d4 <__sfp+0x24>
 80193cc:	6833      	ldr	r3, [r6, #0]
 80193ce:	b133      	cbz	r3, 80193de <__sfp+0x2e>
 80193d0:	6836      	ldr	r6, [r6, #0]
 80193d2:	e7f7      	b.n	80193c4 <__sfp+0x14>
 80193d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80193d8:	b16d      	cbz	r5, 80193f6 <__sfp+0x46>
 80193da:	3468      	adds	r4, #104	; 0x68
 80193dc:	e7f4      	b.n	80193c8 <__sfp+0x18>
 80193de:	2104      	movs	r1, #4
 80193e0:	4638      	mov	r0, r7
 80193e2:	f7ff ff9f 	bl	8019324 <__sfmoreglue>
 80193e6:	6030      	str	r0, [r6, #0]
 80193e8:	2800      	cmp	r0, #0
 80193ea:	d1f1      	bne.n	80193d0 <__sfp+0x20>
 80193ec:	230c      	movs	r3, #12
 80193ee:	603b      	str	r3, [r7, #0]
 80193f0:	4604      	mov	r4, r0
 80193f2:	4620      	mov	r0, r4
 80193f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193f6:	4b0b      	ldr	r3, [pc, #44]	; (8019424 <__sfp+0x74>)
 80193f8:	6665      	str	r5, [r4, #100]	; 0x64
 80193fa:	e9c4 5500 	strd	r5, r5, [r4]
 80193fe:	60a5      	str	r5, [r4, #8]
 8019400:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019404:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019408:	2208      	movs	r2, #8
 801940a:	4629      	mov	r1, r5
 801940c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019410:	f7ff ff1e 	bl	8019250 <memset>
 8019414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801941c:	e7e9      	b.n	80193f2 <__sfp+0x42>
 801941e:	bf00      	nop
 8019420:	0801cf40 	.word	0x0801cf40
 8019424:	ffff0001 	.word	0xffff0001

08019428 <_fwalk_reent>:
 8019428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801942c:	4680      	mov	r8, r0
 801942e:	4689      	mov	r9, r1
 8019430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019434:	2600      	movs	r6, #0
 8019436:	b914      	cbnz	r4, 801943e <_fwalk_reent+0x16>
 8019438:	4630      	mov	r0, r6
 801943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801943e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019442:	3f01      	subs	r7, #1
 8019444:	d501      	bpl.n	801944a <_fwalk_reent+0x22>
 8019446:	6824      	ldr	r4, [r4, #0]
 8019448:	e7f5      	b.n	8019436 <_fwalk_reent+0xe>
 801944a:	89ab      	ldrh	r3, [r5, #12]
 801944c:	2b01      	cmp	r3, #1
 801944e:	d907      	bls.n	8019460 <_fwalk_reent+0x38>
 8019450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019454:	3301      	adds	r3, #1
 8019456:	d003      	beq.n	8019460 <_fwalk_reent+0x38>
 8019458:	4629      	mov	r1, r5
 801945a:	4640      	mov	r0, r8
 801945c:	47c8      	blx	r9
 801945e:	4306      	orrs	r6, r0
 8019460:	3568      	adds	r5, #104	; 0x68
 8019462:	e7ee      	b.n	8019442 <_fwalk_reent+0x1a>

08019464 <_malloc_r>:
 8019464:	b570      	push	{r4, r5, r6, lr}
 8019466:	1ccd      	adds	r5, r1, #3
 8019468:	f025 0503 	bic.w	r5, r5, #3
 801946c:	3508      	adds	r5, #8
 801946e:	2d0c      	cmp	r5, #12
 8019470:	bf38      	it	cc
 8019472:	250c      	movcc	r5, #12
 8019474:	2d00      	cmp	r5, #0
 8019476:	4606      	mov	r6, r0
 8019478:	db01      	blt.n	801947e <_malloc_r+0x1a>
 801947a:	42a9      	cmp	r1, r5
 801947c:	d903      	bls.n	8019486 <_malloc_r+0x22>
 801947e:	230c      	movs	r3, #12
 8019480:	6033      	str	r3, [r6, #0]
 8019482:	2000      	movs	r0, #0
 8019484:	bd70      	pop	{r4, r5, r6, pc}
 8019486:	f000 fed6 	bl	801a236 <__malloc_lock>
 801948a:	4a21      	ldr	r2, [pc, #132]	; (8019510 <_malloc_r+0xac>)
 801948c:	6814      	ldr	r4, [r2, #0]
 801948e:	4621      	mov	r1, r4
 8019490:	b991      	cbnz	r1, 80194b8 <_malloc_r+0x54>
 8019492:	4c20      	ldr	r4, [pc, #128]	; (8019514 <_malloc_r+0xb0>)
 8019494:	6823      	ldr	r3, [r4, #0]
 8019496:	b91b      	cbnz	r3, 80194a0 <_malloc_r+0x3c>
 8019498:	4630      	mov	r0, r6
 801949a:	f000 fc57 	bl	8019d4c <_sbrk_r>
 801949e:	6020      	str	r0, [r4, #0]
 80194a0:	4629      	mov	r1, r5
 80194a2:	4630      	mov	r0, r6
 80194a4:	f000 fc52 	bl	8019d4c <_sbrk_r>
 80194a8:	1c43      	adds	r3, r0, #1
 80194aa:	d124      	bne.n	80194f6 <_malloc_r+0x92>
 80194ac:	230c      	movs	r3, #12
 80194ae:	6033      	str	r3, [r6, #0]
 80194b0:	4630      	mov	r0, r6
 80194b2:	f000 fec1 	bl	801a238 <__malloc_unlock>
 80194b6:	e7e4      	b.n	8019482 <_malloc_r+0x1e>
 80194b8:	680b      	ldr	r3, [r1, #0]
 80194ba:	1b5b      	subs	r3, r3, r5
 80194bc:	d418      	bmi.n	80194f0 <_malloc_r+0x8c>
 80194be:	2b0b      	cmp	r3, #11
 80194c0:	d90f      	bls.n	80194e2 <_malloc_r+0x7e>
 80194c2:	600b      	str	r3, [r1, #0]
 80194c4:	50cd      	str	r5, [r1, r3]
 80194c6:	18cc      	adds	r4, r1, r3
 80194c8:	4630      	mov	r0, r6
 80194ca:	f000 feb5 	bl	801a238 <__malloc_unlock>
 80194ce:	f104 000b 	add.w	r0, r4, #11
 80194d2:	1d23      	adds	r3, r4, #4
 80194d4:	f020 0007 	bic.w	r0, r0, #7
 80194d8:	1ac3      	subs	r3, r0, r3
 80194da:	d0d3      	beq.n	8019484 <_malloc_r+0x20>
 80194dc:	425a      	negs	r2, r3
 80194de:	50e2      	str	r2, [r4, r3]
 80194e0:	e7d0      	b.n	8019484 <_malloc_r+0x20>
 80194e2:	428c      	cmp	r4, r1
 80194e4:	684b      	ldr	r3, [r1, #4]
 80194e6:	bf16      	itet	ne
 80194e8:	6063      	strne	r3, [r4, #4]
 80194ea:	6013      	streq	r3, [r2, #0]
 80194ec:	460c      	movne	r4, r1
 80194ee:	e7eb      	b.n	80194c8 <_malloc_r+0x64>
 80194f0:	460c      	mov	r4, r1
 80194f2:	6849      	ldr	r1, [r1, #4]
 80194f4:	e7cc      	b.n	8019490 <_malloc_r+0x2c>
 80194f6:	1cc4      	adds	r4, r0, #3
 80194f8:	f024 0403 	bic.w	r4, r4, #3
 80194fc:	42a0      	cmp	r0, r4
 80194fe:	d005      	beq.n	801950c <_malloc_r+0xa8>
 8019500:	1a21      	subs	r1, r4, r0
 8019502:	4630      	mov	r0, r6
 8019504:	f000 fc22 	bl	8019d4c <_sbrk_r>
 8019508:	3001      	adds	r0, #1
 801950a:	d0cf      	beq.n	80194ac <_malloc_r+0x48>
 801950c:	6025      	str	r5, [r4, #0]
 801950e:	e7db      	b.n	80194c8 <_malloc_r+0x64>
 8019510:	2000c940 	.word	0x2000c940
 8019514:	2000c944 	.word	0x2000c944

08019518 <__ssputs_r>:
 8019518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801951c:	688e      	ldr	r6, [r1, #8]
 801951e:	429e      	cmp	r6, r3
 8019520:	4682      	mov	sl, r0
 8019522:	460c      	mov	r4, r1
 8019524:	4690      	mov	r8, r2
 8019526:	4699      	mov	r9, r3
 8019528:	d837      	bhi.n	801959a <__ssputs_r+0x82>
 801952a:	898a      	ldrh	r2, [r1, #12]
 801952c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019530:	d031      	beq.n	8019596 <__ssputs_r+0x7e>
 8019532:	6825      	ldr	r5, [r4, #0]
 8019534:	6909      	ldr	r1, [r1, #16]
 8019536:	1a6f      	subs	r7, r5, r1
 8019538:	6965      	ldr	r5, [r4, #20]
 801953a:	2302      	movs	r3, #2
 801953c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019540:	fb95 f5f3 	sdiv	r5, r5, r3
 8019544:	f109 0301 	add.w	r3, r9, #1
 8019548:	443b      	add	r3, r7
 801954a:	429d      	cmp	r5, r3
 801954c:	bf38      	it	cc
 801954e:	461d      	movcc	r5, r3
 8019550:	0553      	lsls	r3, r2, #21
 8019552:	d530      	bpl.n	80195b6 <__ssputs_r+0x9e>
 8019554:	4629      	mov	r1, r5
 8019556:	f7ff ff85 	bl	8019464 <_malloc_r>
 801955a:	4606      	mov	r6, r0
 801955c:	b950      	cbnz	r0, 8019574 <__ssputs_r+0x5c>
 801955e:	230c      	movs	r3, #12
 8019560:	f8ca 3000 	str.w	r3, [sl]
 8019564:	89a3      	ldrh	r3, [r4, #12]
 8019566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801956a:	81a3      	strh	r3, [r4, #12]
 801956c:	f04f 30ff 	mov.w	r0, #4294967295
 8019570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019574:	463a      	mov	r2, r7
 8019576:	6921      	ldr	r1, [r4, #16]
 8019578:	f7ff fe5f 	bl	801923a <memcpy>
 801957c:	89a3      	ldrh	r3, [r4, #12]
 801957e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019586:	81a3      	strh	r3, [r4, #12]
 8019588:	6126      	str	r6, [r4, #16]
 801958a:	6165      	str	r5, [r4, #20]
 801958c:	443e      	add	r6, r7
 801958e:	1bed      	subs	r5, r5, r7
 8019590:	6026      	str	r6, [r4, #0]
 8019592:	60a5      	str	r5, [r4, #8]
 8019594:	464e      	mov	r6, r9
 8019596:	454e      	cmp	r6, r9
 8019598:	d900      	bls.n	801959c <__ssputs_r+0x84>
 801959a:	464e      	mov	r6, r9
 801959c:	4632      	mov	r2, r6
 801959e:	4641      	mov	r1, r8
 80195a0:	6820      	ldr	r0, [r4, #0]
 80195a2:	f000 fe2f 	bl	801a204 <memmove>
 80195a6:	68a3      	ldr	r3, [r4, #8]
 80195a8:	1b9b      	subs	r3, r3, r6
 80195aa:	60a3      	str	r3, [r4, #8]
 80195ac:	6823      	ldr	r3, [r4, #0]
 80195ae:	441e      	add	r6, r3
 80195b0:	6026      	str	r6, [r4, #0]
 80195b2:	2000      	movs	r0, #0
 80195b4:	e7dc      	b.n	8019570 <__ssputs_r+0x58>
 80195b6:	462a      	mov	r2, r5
 80195b8:	f000 fe8e 	bl	801a2d8 <_realloc_r>
 80195bc:	4606      	mov	r6, r0
 80195be:	2800      	cmp	r0, #0
 80195c0:	d1e2      	bne.n	8019588 <__ssputs_r+0x70>
 80195c2:	6921      	ldr	r1, [r4, #16]
 80195c4:	4650      	mov	r0, sl
 80195c6:	f000 fe39 	bl	801a23c <_free_r>
 80195ca:	e7c8      	b.n	801955e <__ssputs_r+0x46>

080195cc <_svfiprintf_r>:
 80195cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d0:	461d      	mov	r5, r3
 80195d2:	898b      	ldrh	r3, [r1, #12]
 80195d4:	061f      	lsls	r7, r3, #24
 80195d6:	b09d      	sub	sp, #116	; 0x74
 80195d8:	4680      	mov	r8, r0
 80195da:	460c      	mov	r4, r1
 80195dc:	4616      	mov	r6, r2
 80195de:	d50f      	bpl.n	8019600 <_svfiprintf_r+0x34>
 80195e0:	690b      	ldr	r3, [r1, #16]
 80195e2:	b96b      	cbnz	r3, 8019600 <_svfiprintf_r+0x34>
 80195e4:	2140      	movs	r1, #64	; 0x40
 80195e6:	f7ff ff3d 	bl	8019464 <_malloc_r>
 80195ea:	6020      	str	r0, [r4, #0]
 80195ec:	6120      	str	r0, [r4, #16]
 80195ee:	b928      	cbnz	r0, 80195fc <_svfiprintf_r+0x30>
 80195f0:	230c      	movs	r3, #12
 80195f2:	f8c8 3000 	str.w	r3, [r8]
 80195f6:	f04f 30ff 	mov.w	r0, #4294967295
 80195fa:	e0c8      	b.n	801978e <_svfiprintf_r+0x1c2>
 80195fc:	2340      	movs	r3, #64	; 0x40
 80195fe:	6163      	str	r3, [r4, #20]
 8019600:	2300      	movs	r3, #0
 8019602:	9309      	str	r3, [sp, #36]	; 0x24
 8019604:	2320      	movs	r3, #32
 8019606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801960a:	2330      	movs	r3, #48	; 0x30
 801960c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019610:	9503      	str	r5, [sp, #12]
 8019612:	f04f 0b01 	mov.w	fp, #1
 8019616:	4637      	mov	r7, r6
 8019618:	463d      	mov	r5, r7
 801961a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801961e:	b10b      	cbz	r3, 8019624 <_svfiprintf_r+0x58>
 8019620:	2b25      	cmp	r3, #37	; 0x25
 8019622:	d13e      	bne.n	80196a2 <_svfiprintf_r+0xd6>
 8019624:	ebb7 0a06 	subs.w	sl, r7, r6
 8019628:	d00b      	beq.n	8019642 <_svfiprintf_r+0x76>
 801962a:	4653      	mov	r3, sl
 801962c:	4632      	mov	r2, r6
 801962e:	4621      	mov	r1, r4
 8019630:	4640      	mov	r0, r8
 8019632:	f7ff ff71 	bl	8019518 <__ssputs_r>
 8019636:	3001      	adds	r0, #1
 8019638:	f000 80a4 	beq.w	8019784 <_svfiprintf_r+0x1b8>
 801963c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801963e:	4453      	add	r3, sl
 8019640:	9309      	str	r3, [sp, #36]	; 0x24
 8019642:	783b      	ldrb	r3, [r7, #0]
 8019644:	2b00      	cmp	r3, #0
 8019646:	f000 809d 	beq.w	8019784 <_svfiprintf_r+0x1b8>
 801964a:	2300      	movs	r3, #0
 801964c:	f04f 32ff 	mov.w	r2, #4294967295
 8019650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019654:	9304      	str	r3, [sp, #16]
 8019656:	9307      	str	r3, [sp, #28]
 8019658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801965c:	931a      	str	r3, [sp, #104]	; 0x68
 801965e:	462f      	mov	r7, r5
 8019660:	2205      	movs	r2, #5
 8019662:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019666:	4850      	ldr	r0, [pc, #320]	; (80197a8 <_svfiprintf_r+0x1dc>)
 8019668:	f7e6 fe42 	bl	80002f0 <memchr>
 801966c:	9b04      	ldr	r3, [sp, #16]
 801966e:	b9d0      	cbnz	r0, 80196a6 <_svfiprintf_r+0xda>
 8019670:	06d9      	lsls	r1, r3, #27
 8019672:	bf44      	itt	mi
 8019674:	2220      	movmi	r2, #32
 8019676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801967a:	071a      	lsls	r2, r3, #28
 801967c:	bf44      	itt	mi
 801967e:	222b      	movmi	r2, #43	; 0x2b
 8019680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019684:	782a      	ldrb	r2, [r5, #0]
 8019686:	2a2a      	cmp	r2, #42	; 0x2a
 8019688:	d015      	beq.n	80196b6 <_svfiprintf_r+0xea>
 801968a:	9a07      	ldr	r2, [sp, #28]
 801968c:	462f      	mov	r7, r5
 801968e:	2000      	movs	r0, #0
 8019690:	250a      	movs	r5, #10
 8019692:	4639      	mov	r1, r7
 8019694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019698:	3b30      	subs	r3, #48	; 0x30
 801969a:	2b09      	cmp	r3, #9
 801969c:	d94d      	bls.n	801973a <_svfiprintf_r+0x16e>
 801969e:	b1b8      	cbz	r0, 80196d0 <_svfiprintf_r+0x104>
 80196a0:	e00f      	b.n	80196c2 <_svfiprintf_r+0xf6>
 80196a2:	462f      	mov	r7, r5
 80196a4:	e7b8      	b.n	8019618 <_svfiprintf_r+0x4c>
 80196a6:	4a40      	ldr	r2, [pc, #256]	; (80197a8 <_svfiprintf_r+0x1dc>)
 80196a8:	1a80      	subs	r0, r0, r2
 80196aa:	fa0b f000 	lsl.w	r0, fp, r0
 80196ae:	4318      	orrs	r0, r3
 80196b0:	9004      	str	r0, [sp, #16]
 80196b2:	463d      	mov	r5, r7
 80196b4:	e7d3      	b.n	801965e <_svfiprintf_r+0x92>
 80196b6:	9a03      	ldr	r2, [sp, #12]
 80196b8:	1d11      	adds	r1, r2, #4
 80196ba:	6812      	ldr	r2, [r2, #0]
 80196bc:	9103      	str	r1, [sp, #12]
 80196be:	2a00      	cmp	r2, #0
 80196c0:	db01      	blt.n	80196c6 <_svfiprintf_r+0xfa>
 80196c2:	9207      	str	r2, [sp, #28]
 80196c4:	e004      	b.n	80196d0 <_svfiprintf_r+0x104>
 80196c6:	4252      	negs	r2, r2
 80196c8:	f043 0302 	orr.w	r3, r3, #2
 80196cc:	9207      	str	r2, [sp, #28]
 80196ce:	9304      	str	r3, [sp, #16]
 80196d0:	783b      	ldrb	r3, [r7, #0]
 80196d2:	2b2e      	cmp	r3, #46	; 0x2e
 80196d4:	d10c      	bne.n	80196f0 <_svfiprintf_r+0x124>
 80196d6:	787b      	ldrb	r3, [r7, #1]
 80196d8:	2b2a      	cmp	r3, #42	; 0x2a
 80196da:	d133      	bne.n	8019744 <_svfiprintf_r+0x178>
 80196dc:	9b03      	ldr	r3, [sp, #12]
 80196de:	1d1a      	adds	r2, r3, #4
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	9203      	str	r2, [sp, #12]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	bfb8      	it	lt
 80196e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80196ec:	3702      	adds	r7, #2
 80196ee:	9305      	str	r3, [sp, #20]
 80196f0:	4d2e      	ldr	r5, [pc, #184]	; (80197ac <_svfiprintf_r+0x1e0>)
 80196f2:	7839      	ldrb	r1, [r7, #0]
 80196f4:	2203      	movs	r2, #3
 80196f6:	4628      	mov	r0, r5
 80196f8:	f7e6 fdfa 	bl	80002f0 <memchr>
 80196fc:	b138      	cbz	r0, 801970e <_svfiprintf_r+0x142>
 80196fe:	2340      	movs	r3, #64	; 0x40
 8019700:	1b40      	subs	r0, r0, r5
 8019702:	fa03 f000 	lsl.w	r0, r3, r0
 8019706:	9b04      	ldr	r3, [sp, #16]
 8019708:	4303      	orrs	r3, r0
 801970a:	3701      	adds	r7, #1
 801970c:	9304      	str	r3, [sp, #16]
 801970e:	7839      	ldrb	r1, [r7, #0]
 8019710:	4827      	ldr	r0, [pc, #156]	; (80197b0 <_svfiprintf_r+0x1e4>)
 8019712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019716:	2206      	movs	r2, #6
 8019718:	1c7e      	adds	r6, r7, #1
 801971a:	f7e6 fde9 	bl	80002f0 <memchr>
 801971e:	2800      	cmp	r0, #0
 8019720:	d038      	beq.n	8019794 <_svfiprintf_r+0x1c8>
 8019722:	4b24      	ldr	r3, [pc, #144]	; (80197b4 <_svfiprintf_r+0x1e8>)
 8019724:	bb13      	cbnz	r3, 801976c <_svfiprintf_r+0x1a0>
 8019726:	9b03      	ldr	r3, [sp, #12]
 8019728:	3307      	adds	r3, #7
 801972a:	f023 0307 	bic.w	r3, r3, #7
 801972e:	3308      	adds	r3, #8
 8019730:	9303      	str	r3, [sp, #12]
 8019732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019734:	444b      	add	r3, r9
 8019736:	9309      	str	r3, [sp, #36]	; 0x24
 8019738:	e76d      	b.n	8019616 <_svfiprintf_r+0x4a>
 801973a:	fb05 3202 	mla	r2, r5, r2, r3
 801973e:	2001      	movs	r0, #1
 8019740:	460f      	mov	r7, r1
 8019742:	e7a6      	b.n	8019692 <_svfiprintf_r+0xc6>
 8019744:	2300      	movs	r3, #0
 8019746:	3701      	adds	r7, #1
 8019748:	9305      	str	r3, [sp, #20]
 801974a:	4619      	mov	r1, r3
 801974c:	250a      	movs	r5, #10
 801974e:	4638      	mov	r0, r7
 8019750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019754:	3a30      	subs	r2, #48	; 0x30
 8019756:	2a09      	cmp	r2, #9
 8019758:	d903      	bls.n	8019762 <_svfiprintf_r+0x196>
 801975a:	2b00      	cmp	r3, #0
 801975c:	d0c8      	beq.n	80196f0 <_svfiprintf_r+0x124>
 801975e:	9105      	str	r1, [sp, #20]
 8019760:	e7c6      	b.n	80196f0 <_svfiprintf_r+0x124>
 8019762:	fb05 2101 	mla	r1, r5, r1, r2
 8019766:	2301      	movs	r3, #1
 8019768:	4607      	mov	r7, r0
 801976a:	e7f0      	b.n	801974e <_svfiprintf_r+0x182>
 801976c:	ab03      	add	r3, sp, #12
 801976e:	9300      	str	r3, [sp, #0]
 8019770:	4622      	mov	r2, r4
 8019772:	4b11      	ldr	r3, [pc, #68]	; (80197b8 <_svfiprintf_r+0x1ec>)
 8019774:	a904      	add	r1, sp, #16
 8019776:	4640      	mov	r0, r8
 8019778:	f3af 8000 	nop.w
 801977c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019780:	4681      	mov	r9, r0
 8019782:	d1d6      	bne.n	8019732 <_svfiprintf_r+0x166>
 8019784:	89a3      	ldrh	r3, [r4, #12]
 8019786:	065b      	lsls	r3, r3, #25
 8019788:	f53f af35 	bmi.w	80195f6 <_svfiprintf_r+0x2a>
 801978c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801978e:	b01d      	add	sp, #116	; 0x74
 8019790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019794:	ab03      	add	r3, sp, #12
 8019796:	9300      	str	r3, [sp, #0]
 8019798:	4622      	mov	r2, r4
 801979a:	4b07      	ldr	r3, [pc, #28]	; (80197b8 <_svfiprintf_r+0x1ec>)
 801979c:	a904      	add	r1, sp, #16
 801979e:	4640      	mov	r0, r8
 80197a0:	f000 f9c2 	bl	8019b28 <_printf_i>
 80197a4:	e7ea      	b.n	801977c <_svfiprintf_r+0x1b0>
 80197a6:	bf00      	nop
 80197a8:	0801cfa4 	.word	0x0801cfa4
 80197ac:	0801cfaa 	.word	0x0801cfaa
 80197b0:	0801cfae 	.word	0x0801cfae
 80197b4:	00000000 	.word	0x00000000
 80197b8:	08019519 	.word	0x08019519

080197bc <__sfputc_r>:
 80197bc:	6893      	ldr	r3, [r2, #8]
 80197be:	3b01      	subs	r3, #1
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	b410      	push	{r4}
 80197c4:	6093      	str	r3, [r2, #8]
 80197c6:	da08      	bge.n	80197da <__sfputc_r+0x1e>
 80197c8:	6994      	ldr	r4, [r2, #24]
 80197ca:	42a3      	cmp	r3, r4
 80197cc:	db01      	blt.n	80197d2 <__sfputc_r+0x16>
 80197ce:	290a      	cmp	r1, #10
 80197d0:	d103      	bne.n	80197da <__sfputc_r+0x1e>
 80197d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197d6:	f000 bb0d 	b.w	8019df4 <__swbuf_r>
 80197da:	6813      	ldr	r3, [r2, #0]
 80197dc:	1c58      	adds	r0, r3, #1
 80197de:	6010      	str	r0, [r2, #0]
 80197e0:	7019      	strb	r1, [r3, #0]
 80197e2:	4608      	mov	r0, r1
 80197e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197e8:	4770      	bx	lr

080197ea <__sfputs_r>:
 80197ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ec:	4606      	mov	r6, r0
 80197ee:	460f      	mov	r7, r1
 80197f0:	4614      	mov	r4, r2
 80197f2:	18d5      	adds	r5, r2, r3
 80197f4:	42ac      	cmp	r4, r5
 80197f6:	d101      	bne.n	80197fc <__sfputs_r+0x12>
 80197f8:	2000      	movs	r0, #0
 80197fa:	e007      	b.n	801980c <__sfputs_r+0x22>
 80197fc:	463a      	mov	r2, r7
 80197fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019802:	4630      	mov	r0, r6
 8019804:	f7ff ffda 	bl	80197bc <__sfputc_r>
 8019808:	1c43      	adds	r3, r0, #1
 801980a:	d1f3      	bne.n	80197f4 <__sfputs_r+0xa>
 801980c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019810 <_vfiprintf_r>:
 8019810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019814:	460c      	mov	r4, r1
 8019816:	b09d      	sub	sp, #116	; 0x74
 8019818:	4617      	mov	r7, r2
 801981a:	461d      	mov	r5, r3
 801981c:	4606      	mov	r6, r0
 801981e:	b118      	cbz	r0, 8019828 <_vfiprintf_r+0x18>
 8019820:	6983      	ldr	r3, [r0, #24]
 8019822:	b90b      	cbnz	r3, 8019828 <_vfiprintf_r+0x18>
 8019824:	f7ff fd94 	bl	8019350 <__sinit>
 8019828:	4b7c      	ldr	r3, [pc, #496]	; (8019a1c <_vfiprintf_r+0x20c>)
 801982a:	429c      	cmp	r4, r3
 801982c:	d158      	bne.n	80198e0 <_vfiprintf_r+0xd0>
 801982e:	6874      	ldr	r4, [r6, #4]
 8019830:	89a3      	ldrh	r3, [r4, #12]
 8019832:	0718      	lsls	r0, r3, #28
 8019834:	d55e      	bpl.n	80198f4 <_vfiprintf_r+0xe4>
 8019836:	6923      	ldr	r3, [r4, #16]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d05b      	beq.n	80198f4 <_vfiprintf_r+0xe4>
 801983c:	2300      	movs	r3, #0
 801983e:	9309      	str	r3, [sp, #36]	; 0x24
 8019840:	2320      	movs	r3, #32
 8019842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019846:	2330      	movs	r3, #48	; 0x30
 8019848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801984c:	9503      	str	r5, [sp, #12]
 801984e:	f04f 0b01 	mov.w	fp, #1
 8019852:	46b8      	mov	r8, r7
 8019854:	4645      	mov	r5, r8
 8019856:	f815 3b01 	ldrb.w	r3, [r5], #1
 801985a:	b10b      	cbz	r3, 8019860 <_vfiprintf_r+0x50>
 801985c:	2b25      	cmp	r3, #37	; 0x25
 801985e:	d154      	bne.n	801990a <_vfiprintf_r+0xfa>
 8019860:	ebb8 0a07 	subs.w	sl, r8, r7
 8019864:	d00b      	beq.n	801987e <_vfiprintf_r+0x6e>
 8019866:	4653      	mov	r3, sl
 8019868:	463a      	mov	r2, r7
 801986a:	4621      	mov	r1, r4
 801986c:	4630      	mov	r0, r6
 801986e:	f7ff ffbc 	bl	80197ea <__sfputs_r>
 8019872:	3001      	adds	r0, #1
 8019874:	f000 80c2 	beq.w	80199fc <_vfiprintf_r+0x1ec>
 8019878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987a:	4453      	add	r3, sl
 801987c:	9309      	str	r3, [sp, #36]	; 0x24
 801987e:	f898 3000 	ldrb.w	r3, [r8]
 8019882:	2b00      	cmp	r3, #0
 8019884:	f000 80ba 	beq.w	80199fc <_vfiprintf_r+0x1ec>
 8019888:	2300      	movs	r3, #0
 801988a:	f04f 32ff 	mov.w	r2, #4294967295
 801988e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019892:	9304      	str	r3, [sp, #16]
 8019894:	9307      	str	r3, [sp, #28]
 8019896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801989a:	931a      	str	r3, [sp, #104]	; 0x68
 801989c:	46a8      	mov	r8, r5
 801989e:	2205      	movs	r2, #5
 80198a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80198a4:	485e      	ldr	r0, [pc, #376]	; (8019a20 <_vfiprintf_r+0x210>)
 80198a6:	f7e6 fd23 	bl	80002f0 <memchr>
 80198aa:	9b04      	ldr	r3, [sp, #16]
 80198ac:	bb78      	cbnz	r0, 801990e <_vfiprintf_r+0xfe>
 80198ae:	06d9      	lsls	r1, r3, #27
 80198b0:	bf44      	itt	mi
 80198b2:	2220      	movmi	r2, #32
 80198b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198b8:	071a      	lsls	r2, r3, #28
 80198ba:	bf44      	itt	mi
 80198bc:	222b      	movmi	r2, #43	; 0x2b
 80198be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198c2:	782a      	ldrb	r2, [r5, #0]
 80198c4:	2a2a      	cmp	r2, #42	; 0x2a
 80198c6:	d02a      	beq.n	801991e <_vfiprintf_r+0x10e>
 80198c8:	9a07      	ldr	r2, [sp, #28]
 80198ca:	46a8      	mov	r8, r5
 80198cc:	2000      	movs	r0, #0
 80198ce:	250a      	movs	r5, #10
 80198d0:	4641      	mov	r1, r8
 80198d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198d6:	3b30      	subs	r3, #48	; 0x30
 80198d8:	2b09      	cmp	r3, #9
 80198da:	d969      	bls.n	80199b0 <_vfiprintf_r+0x1a0>
 80198dc:	b360      	cbz	r0, 8019938 <_vfiprintf_r+0x128>
 80198de:	e024      	b.n	801992a <_vfiprintf_r+0x11a>
 80198e0:	4b50      	ldr	r3, [pc, #320]	; (8019a24 <_vfiprintf_r+0x214>)
 80198e2:	429c      	cmp	r4, r3
 80198e4:	d101      	bne.n	80198ea <_vfiprintf_r+0xda>
 80198e6:	68b4      	ldr	r4, [r6, #8]
 80198e8:	e7a2      	b.n	8019830 <_vfiprintf_r+0x20>
 80198ea:	4b4f      	ldr	r3, [pc, #316]	; (8019a28 <_vfiprintf_r+0x218>)
 80198ec:	429c      	cmp	r4, r3
 80198ee:	bf08      	it	eq
 80198f0:	68f4      	ldreq	r4, [r6, #12]
 80198f2:	e79d      	b.n	8019830 <_vfiprintf_r+0x20>
 80198f4:	4621      	mov	r1, r4
 80198f6:	4630      	mov	r0, r6
 80198f8:	f000 fae0 	bl	8019ebc <__swsetup_r>
 80198fc:	2800      	cmp	r0, #0
 80198fe:	d09d      	beq.n	801983c <_vfiprintf_r+0x2c>
 8019900:	f04f 30ff 	mov.w	r0, #4294967295
 8019904:	b01d      	add	sp, #116	; 0x74
 8019906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801990a:	46a8      	mov	r8, r5
 801990c:	e7a2      	b.n	8019854 <_vfiprintf_r+0x44>
 801990e:	4a44      	ldr	r2, [pc, #272]	; (8019a20 <_vfiprintf_r+0x210>)
 8019910:	1a80      	subs	r0, r0, r2
 8019912:	fa0b f000 	lsl.w	r0, fp, r0
 8019916:	4318      	orrs	r0, r3
 8019918:	9004      	str	r0, [sp, #16]
 801991a:	4645      	mov	r5, r8
 801991c:	e7be      	b.n	801989c <_vfiprintf_r+0x8c>
 801991e:	9a03      	ldr	r2, [sp, #12]
 8019920:	1d11      	adds	r1, r2, #4
 8019922:	6812      	ldr	r2, [r2, #0]
 8019924:	9103      	str	r1, [sp, #12]
 8019926:	2a00      	cmp	r2, #0
 8019928:	db01      	blt.n	801992e <_vfiprintf_r+0x11e>
 801992a:	9207      	str	r2, [sp, #28]
 801992c:	e004      	b.n	8019938 <_vfiprintf_r+0x128>
 801992e:	4252      	negs	r2, r2
 8019930:	f043 0302 	orr.w	r3, r3, #2
 8019934:	9207      	str	r2, [sp, #28]
 8019936:	9304      	str	r3, [sp, #16]
 8019938:	f898 3000 	ldrb.w	r3, [r8]
 801993c:	2b2e      	cmp	r3, #46	; 0x2e
 801993e:	d10e      	bne.n	801995e <_vfiprintf_r+0x14e>
 8019940:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019944:	2b2a      	cmp	r3, #42	; 0x2a
 8019946:	d138      	bne.n	80199ba <_vfiprintf_r+0x1aa>
 8019948:	9b03      	ldr	r3, [sp, #12]
 801994a:	1d1a      	adds	r2, r3, #4
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	9203      	str	r2, [sp, #12]
 8019950:	2b00      	cmp	r3, #0
 8019952:	bfb8      	it	lt
 8019954:	f04f 33ff 	movlt.w	r3, #4294967295
 8019958:	f108 0802 	add.w	r8, r8, #2
 801995c:	9305      	str	r3, [sp, #20]
 801995e:	4d33      	ldr	r5, [pc, #204]	; (8019a2c <_vfiprintf_r+0x21c>)
 8019960:	f898 1000 	ldrb.w	r1, [r8]
 8019964:	2203      	movs	r2, #3
 8019966:	4628      	mov	r0, r5
 8019968:	f7e6 fcc2 	bl	80002f0 <memchr>
 801996c:	b140      	cbz	r0, 8019980 <_vfiprintf_r+0x170>
 801996e:	2340      	movs	r3, #64	; 0x40
 8019970:	1b40      	subs	r0, r0, r5
 8019972:	fa03 f000 	lsl.w	r0, r3, r0
 8019976:	9b04      	ldr	r3, [sp, #16]
 8019978:	4303      	orrs	r3, r0
 801997a:	f108 0801 	add.w	r8, r8, #1
 801997e:	9304      	str	r3, [sp, #16]
 8019980:	f898 1000 	ldrb.w	r1, [r8]
 8019984:	482a      	ldr	r0, [pc, #168]	; (8019a30 <_vfiprintf_r+0x220>)
 8019986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801998a:	2206      	movs	r2, #6
 801998c:	f108 0701 	add.w	r7, r8, #1
 8019990:	f7e6 fcae 	bl	80002f0 <memchr>
 8019994:	2800      	cmp	r0, #0
 8019996:	d037      	beq.n	8019a08 <_vfiprintf_r+0x1f8>
 8019998:	4b26      	ldr	r3, [pc, #152]	; (8019a34 <_vfiprintf_r+0x224>)
 801999a:	bb1b      	cbnz	r3, 80199e4 <_vfiprintf_r+0x1d4>
 801999c:	9b03      	ldr	r3, [sp, #12]
 801999e:	3307      	adds	r3, #7
 80199a0:	f023 0307 	bic.w	r3, r3, #7
 80199a4:	3308      	adds	r3, #8
 80199a6:	9303      	str	r3, [sp, #12]
 80199a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199aa:	444b      	add	r3, r9
 80199ac:	9309      	str	r3, [sp, #36]	; 0x24
 80199ae:	e750      	b.n	8019852 <_vfiprintf_r+0x42>
 80199b0:	fb05 3202 	mla	r2, r5, r2, r3
 80199b4:	2001      	movs	r0, #1
 80199b6:	4688      	mov	r8, r1
 80199b8:	e78a      	b.n	80198d0 <_vfiprintf_r+0xc0>
 80199ba:	2300      	movs	r3, #0
 80199bc:	f108 0801 	add.w	r8, r8, #1
 80199c0:	9305      	str	r3, [sp, #20]
 80199c2:	4619      	mov	r1, r3
 80199c4:	250a      	movs	r5, #10
 80199c6:	4640      	mov	r0, r8
 80199c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199cc:	3a30      	subs	r2, #48	; 0x30
 80199ce:	2a09      	cmp	r2, #9
 80199d0:	d903      	bls.n	80199da <_vfiprintf_r+0x1ca>
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d0c3      	beq.n	801995e <_vfiprintf_r+0x14e>
 80199d6:	9105      	str	r1, [sp, #20]
 80199d8:	e7c1      	b.n	801995e <_vfiprintf_r+0x14e>
 80199da:	fb05 2101 	mla	r1, r5, r1, r2
 80199de:	2301      	movs	r3, #1
 80199e0:	4680      	mov	r8, r0
 80199e2:	e7f0      	b.n	80199c6 <_vfiprintf_r+0x1b6>
 80199e4:	ab03      	add	r3, sp, #12
 80199e6:	9300      	str	r3, [sp, #0]
 80199e8:	4622      	mov	r2, r4
 80199ea:	4b13      	ldr	r3, [pc, #76]	; (8019a38 <_vfiprintf_r+0x228>)
 80199ec:	a904      	add	r1, sp, #16
 80199ee:	4630      	mov	r0, r6
 80199f0:	f3af 8000 	nop.w
 80199f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80199f8:	4681      	mov	r9, r0
 80199fa:	d1d5      	bne.n	80199a8 <_vfiprintf_r+0x198>
 80199fc:	89a3      	ldrh	r3, [r4, #12]
 80199fe:	065b      	lsls	r3, r3, #25
 8019a00:	f53f af7e 	bmi.w	8019900 <_vfiprintf_r+0xf0>
 8019a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a06:	e77d      	b.n	8019904 <_vfiprintf_r+0xf4>
 8019a08:	ab03      	add	r3, sp, #12
 8019a0a:	9300      	str	r3, [sp, #0]
 8019a0c:	4622      	mov	r2, r4
 8019a0e:	4b0a      	ldr	r3, [pc, #40]	; (8019a38 <_vfiprintf_r+0x228>)
 8019a10:	a904      	add	r1, sp, #16
 8019a12:	4630      	mov	r0, r6
 8019a14:	f000 f888 	bl	8019b28 <_printf_i>
 8019a18:	e7ec      	b.n	80199f4 <_vfiprintf_r+0x1e4>
 8019a1a:	bf00      	nop
 8019a1c:	0801cf64 	.word	0x0801cf64
 8019a20:	0801cfa4 	.word	0x0801cfa4
 8019a24:	0801cf84 	.word	0x0801cf84
 8019a28:	0801cf44 	.word	0x0801cf44
 8019a2c:	0801cfaa 	.word	0x0801cfaa
 8019a30:	0801cfae 	.word	0x0801cfae
 8019a34:	00000000 	.word	0x00000000
 8019a38:	080197eb 	.word	0x080197eb

08019a3c <_printf_common>:
 8019a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a40:	4691      	mov	r9, r2
 8019a42:	461f      	mov	r7, r3
 8019a44:	688a      	ldr	r2, [r1, #8]
 8019a46:	690b      	ldr	r3, [r1, #16]
 8019a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019a4c:	4293      	cmp	r3, r2
 8019a4e:	bfb8      	it	lt
 8019a50:	4613      	movlt	r3, r2
 8019a52:	f8c9 3000 	str.w	r3, [r9]
 8019a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019a5a:	4606      	mov	r6, r0
 8019a5c:	460c      	mov	r4, r1
 8019a5e:	b112      	cbz	r2, 8019a66 <_printf_common+0x2a>
 8019a60:	3301      	adds	r3, #1
 8019a62:	f8c9 3000 	str.w	r3, [r9]
 8019a66:	6823      	ldr	r3, [r4, #0]
 8019a68:	0699      	lsls	r1, r3, #26
 8019a6a:	bf42      	ittt	mi
 8019a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019a70:	3302      	addmi	r3, #2
 8019a72:	f8c9 3000 	strmi.w	r3, [r9]
 8019a76:	6825      	ldr	r5, [r4, #0]
 8019a78:	f015 0506 	ands.w	r5, r5, #6
 8019a7c:	d107      	bne.n	8019a8e <_printf_common+0x52>
 8019a7e:	f104 0a19 	add.w	sl, r4, #25
 8019a82:	68e3      	ldr	r3, [r4, #12]
 8019a84:	f8d9 2000 	ldr.w	r2, [r9]
 8019a88:	1a9b      	subs	r3, r3, r2
 8019a8a:	42ab      	cmp	r3, r5
 8019a8c:	dc28      	bgt.n	8019ae0 <_printf_common+0xa4>
 8019a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019a92:	6822      	ldr	r2, [r4, #0]
 8019a94:	3300      	adds	r3, #0
 8019a96:	bf18      	it	ne
 8019a98:	2301      	movne	r3, #1
 8019a9a:	0692      	lsls	r2, r2, #26
 8019a9c:	d42d      	bmi.n	8019afa <_printf_common+0xbe>
 8019a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019aa2:	4639      	mov	r1, r7
 8019aa4:	4630      	mov	r0, r6
 8019aa6:	47c0      	blx	r8
 8019aa8:	3001      	adds	r0, #1
 8019aaa:	d020      	beq.n	8019aee <_printf_common+0xb2>
 8019aac:	6823      	ldr	r3, [r4, #0]
 8019aae:	68e5      	ldr	r5, [r4, #12]
 8019ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8019ab4:	f003 0306 	and.w	r3, r3, #6
 8019ab8:	2b04      	cmp	r3, #4
 8019aba:	bf08      	it	eq
 8019abc:	1aad      	subeq	r5, r5, r2
 8019abe:	68a3      	ldr	r3, [r4, #8]
 8019ac0:	6922      	ldr	r2, [r4, #16]
 8019ac2:	bf0c      	ite	eq
 8019ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ac8:	2500      	movne	r5, #0
 8019aca:	4293      	cmp	r3, r2
 8019acc:	bfc4      	itt	gt
 8019ace:	1a9b      	subgt	r3, r3, r2
 8019ad0:	18ed      	addgt	r5, r5, r3
 8019ad2:	f04f 0900 	mov.w	r9, #0
 8019ad6:	341a      	adds	r4, #26
 8019ad8:	454d      	cmp	r5, r9
 8019ada:	d11a      	bne.n	8019b12 <_printf_common+0xd6>
 8019adc:	2000      	movs	r0, #0
 8019ade:	e008      	b.n	8019af2 <_printf_common+0xb6>
 8019ae0:	2301      	movs	r3, #1
 8019ae2:	4652      	mov	r2, sl
 8019ae4:	4639      	mov	r1, r7
 8019ae6:	4630      	mov	r0, r6
 8019ae8:	47c0      	blx	r8
 8019aea:	3001      	adds	r0, #1
 8019aec:	d103      	bne.n	8019af6 <_printf_common+0xba>
 8019aee:	f04f 30ff 	mov.w	r0, #4294967295
 8019af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af6:	3501      	adds	r5, #1
 8019af8:	e7c3      	b.n	8019a82 <_printf_common+0x46>
 8019afa:	18e1      	adds	r1, r4, r3
 8019afc:	1c5a      	adds	r2, r3, #1
 8019afe:	2030      	movs	r0, #48	; 0x30
 8019b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019b04:	4422      	add	r2, r4
 8019b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b0e:	3302      	adds	r3, #2
 8019b10:	e7c5      	b.n	8019a9e <_printf_common+0x62>
 8019b12:	2301      	movs	r3, #1
 8019b14:	4622      	mov	r2, r4
 8019b16:	4639      	mov	r1, r7
 8019b18:	4630      	mov	r0, r6
 8019b1a:	47c0      	blx	r8
 8019b1c:	3001      	adds	r0, #1
 8019b1e:	d0e6      	beq.n	8019aee <_printf_common+0xb2>
 8019b20:	f109 0901 	add.w	r9, r9, #1
 8019b24:	e7d8      	b.n	8019ad8 <_printf_common+0x9c>
	...

08019b28 <_printf_i>:
 8019b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019b30:	460c      	mov	r4, r1
 8019b32:	7e09      	ldrb	r1, [r1, #24]
 8019b34:	b085      	sub	sp, #20
 8019b36:	296e      	cmp	r1, #110	; 0x6e
 8019b38:	4617      	mov	r7, r2
 8019b3a:	4606      	mov	r6, r0
 8019b3c:	4698      	mov	r8, r3
 8019b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019b40:	f000 80b3 	beq.w	8019caa <_printf_i+0x182>
 8019b44:	d822      	bhi.n	8019b8c <_printf_i+0x64>
 8019b46:	2963      	cmp	r1, #99	; 0x63
 8019b48:	d036      	beq.n	8019bb8 <_printf_i+0x90>
 8019b4a:	d80a      	bhi.n	8019b62 <_printf_i+0x3a>
 8019b4c:	2900      	cmp	r1, #0
 8019b4e:	f000 80b9 	beq.w	8019cc4 <_printf_i+0x19c>
 8019b52:	2958      	cmp	r1, #88	; 0x58
 8019b54:	f000 8083 	beq.w	8019c5e <_printf_i+0x136>
 8019b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019b60:	e032      	b.n	8019bc8 <_printf_i+0xa0>
 8019b62:	2964      	cmp	r1, #100	; 0x64
 8019b64:	d001      	beq.n	8019b6a <_printf_i+0x42>
 8019b66:	2969      	cmp	r1, #105	; 0x69
 8019b68:	d1f6      	bne.n	8019b58 <_printf_i+0x30>
 8019b6a:	6820      	ldr	r0, [r4, #0]
 8019b6c:	6813      	ldr	r3, [r2, #0]
 8019b6e:	0605      	lsls	r5, r0, #24
 8019b70:	f103 0104 	add.w	r1, r3, #4
 8019b74:	d52a      	bpl.n	8019bcc <_printf_i+0xa4>
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	6011      	str	r1, [r2, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	da03      	bge.n	8019b86 <_printf_i+0x5e>
 8019b7e:	222d      	movs	r2, #45	; 0x2d
 8019b80:	425b      	negs	r3, r3
 8019b82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019b86:	486f      	ldr	r0, [pc, #444]	; (8019d44 <_printf_i+0x21c>)
 8019b88:	220a      	movs	r2, #10
 8019b8a:	e039      	b.n	8019c00 <_printf_i+0xd8>
 8019b8c:	2973      	cmp	r1, #115	; 0x73
 8019b8e:	f000 809d 	beq.w	8019ccc <_printf_i+0x1a4>
 8019b92:	d808      	bhi.n	8019ba6 <_printf_i+0x7e>
 8019b94:	296f      	cmp	r1, #111	; 0x6f
 8019b96:	d020      	beq.n	8019bda <_printf_i+0xb2>
 8019b98:	2970      	cmp	r1, #112	; 0x70
 8019b9a:	d1dd      	bne.n	8019b58 <_printf_i+0x30>
 8019b9c:	6823      	ldr	r3, [r4, #0]
 8019b9e:	f043 0320 	orr.w	r3, r3, #32
 8019ba2:	6023      	str	r3, [r4, #0]
 8019ba4:	e003      	b.n	8019bae <_printf_i+0x86>
 8019ba6:	2975      	cmp	r1, #117	; 0x75
 8019ba8:	d017      	beq.n	8019bda <_printf_i+0xb2>
 8019baa:	2978      	cmp	r1, #120	; 0x78
 8019bac:	d1d4      	bne.n	8019b58 <_printf_i+0x30>
 8019bae:	2378      	movs	r3, #120	; 0x78
 8019bb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019bb4:	4864      	ldr	r0, [pc, #400]	; (8019d48 <_printf_i+0x220>)
 8019bb6:	e055      	b.n	8019c64 <_printf_i+0x13c>
 8019bb8:	6813      	ldr	r3, [r2, #0]
 8019bba:	1d19      	adds	r1, r3, #4
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	6011      	str	r1, [r2, #0]
 8019bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019bc8:	2301      	movs	r3, #1
 8019bca:	e08c      	b.n	8019ce6 <_printf_i+0x1be>
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	6011      	str	r1, [r2, #0]
 8019bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019bd4:	bf18      	it	ne
 8019bd6:	b21b      	sxthne	r3, r3
 8019bd8:	e7cf      	b.n	8019b7a <_printf_i+0x52>
 8019bda:	6813      	ldr	r3, [r2, #0]
 8019bdc:	6825      	ldr	r5, [r4, #0]
 8019bde:	1d18      	adds	r0, r3, #4
 8019be0:	6010      	str	r0, [r2, #0]
 8019be2:	0628      	lsls	r0, r5, #24
 8019be4:	d501      	bpl.n	8019bea <_printf_i+0xc2>
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	e002      	b.n	8019bf0 <_printf_i+0xc8>
 8019bea:	0668      	lsls	r0, r5, #25
 8019bec:	d5fb      	bpl.n	8019be6 <_printf_i+0xbe>
 8019bee:	881b      	ldrh	r3, [r3, #0]
 8019bf0:	4854      	ldr	r0, [pc, #336]	; (8019d44 <_printf_i+0x21c>)
 8019bf2:	296f      	cmp	r1, #111	; 0x6f
 8019bf4:	bf14      	ite	ne
 8019bf6:	220a      	movne	r2, #10
 8019bf8:	2208      	moveq	r2, #8
 8019bfa:	2100      	movs	r1, #0
 8019bfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c00:	6865      	ldr	r5, [r4, #4]
 8019c02:	60a5      	str	r5, [r4, #8]
 8019c04:	2d00      	cmp	r5, #0
 8019c06:	f2c0 8095 	blt.w	8019d34 <_printf_i+0x20c>
 8019c0a:	6821      	ldr	r1, [r4, #0]
 8019c0c:	f021 0104 	bic.w	r1, r1, #4
 8019c10:	6021      	str	r1, [r4, #0]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d13d      	bne.n	8019c92 <_printf_i+0x16a>
 8019c16:	2d00      	cmp	r5, #0
 8019c18:	f040 808e 	bne.w	8019d38 <_printf_i+0x210>
 8019c1c:	4665      	mov	r5, ip
 8019c1e:	2a08      	cmp	r2, #8
 8019c20:	d10b      	bne.n	8019c3a <_printf_i+0x112>
 8019c22:	6823      	ldr	r3, [r4, #0]
 8019c24:	07db      	lsls	r3, r3, #31
 8019c26:	d508      	bpl.n	8019c3a <_printf_i+0x112>
 8019c28:	6923      	ldr	r3, [r4, #16]
 8019c2a:	6862      	ldr	r2, [r4, #4]
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	bfde      	ittt	le
 8019c30:	2330      	movle	r3, #48	; 0x30
 8019c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019c3a:	ebac 0305 	sub.w	r3, ip, r5
 8019c3e:	6123      	str	r3, [r4, #16]
 8019c40:	f8cd 8000 	str.w	r8, [sp]
 8019c44:	463b      	mov	r3, r7
 8019c46:	aa03      	add	r2, sp, #12
 8019c48:	4621      	mov	r1, r4
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	f7ff fef6 	bl	8019a3c <_printf_common>
 8019c50:	3001      	adds	r0, #1
 8019c52:	d14d      	bne.n	8019cf0 <_printf_i+0x1c8>
 8019c54:	f04f 30ff 	mov.w	r0, #4294967295
 8019c58:	b005      	add	sp, #20
 8019c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c5e:	4839      	ldr	r0, [pc, #228]	; (8019d44 <_printf_i+0x21c>)
 8019c60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019c64:	6813      	ldr	r3, [r2, #0]
 8019c66:	6821      	ldr	r1, [r4, #0]
 8019c68:	1d1d      	adds	r5, r3, #4
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	6015      	str	r5, [r2, #0]
 8019c6e:	060a      	lsls	r2, r1, #24
 8019c70:	d50b      	bpl.n	8019c8a <_printf_i+0x162>
 8019c72:	07ca      	lsls	r2, r1, #31
 8019c74:	bf44      	itt	mi
 8019c76:	f041 0120 	orrmi.w	r1, r1, #32
 8019c7a:	6021      	strmi	r1, [r4, #0]
 8019c7c:	b91b      	cbnz	r3, 8019c86 <_printf_i+0x15e>
 8019c7e:	6822      	ldr	r2, [r4, #0]
 8019c80:	f022 0220 	bic.w	r2, r2, #32
 8019c84:	6022      	str	r2, [r4, #0]
 8019c86:	2210      	movs	r2, #16
 8019c88:	e7b7      	b.n	8019bfa <_printf_i+0xd2>
 8019c8a:	064d      	lsls	r5, r1, #25
 8019c8c:	bf48      	it	mi
 8019c8e:	b29b      	uxthmi	r3, r3
 8019c90:	e7ef      	b.n	8019c72 <_printf_i+0x14a>
 8019c92:	4665      	mov	r5, ip
 8019c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c98:	fb02 3311 	mls	r3, r2, r1, r3
 8019c9c:	5cc3      	ldrb	r3, [r0, r3]
 8019c9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	d1f5      	bne.n	8019c94 <_printf_i+0x16c>
 8019ca8:	e7b9      	b.n	8019c1e <_printf_i+0xf6>
 8019caa:	6813      	ldr	r3, [r2, #0]
 8019cac:	6825      	ldr	r5, [r4, #0]
 8019cae:	6961      	ldr	r1, [r4, #20]
 8019cb0:	1d18      	adds	r0, r3, #4
 8019cb2:	6010      	str	r0, [r2, #0]
 8019cb4:	0628      	lsls	r0, r5, #24
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	d501      	bpl.n	8019cbe <_printf_i+0x196>
 8019cba:	6019      	str	r1, [r3, #0]
 8019cbc:	e002      	b.n	8019cc4 <_printf_i+0x19c>
 8019cbe:	066a      	lsls	r2, r5, #25
 8019cc0:	d5fb      	bpl.n	8019cba <_printf_i+0x192>
 8019cc2:	8019      	strh	r1, [r3, #0]
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	6123      	str	r3, [r4, #16]
 8019cc8:	4665      	mov	r5, ip
 8019cca:	e7b9      	b.n	8019c40 <_printf_i+0x118>
 8019ccc:	6813      	ldr	r3, [r2, #0]
 8019cce:	1d19      	adds	r1, r3, #4
 8019cd0:	6011      	str	r1, [r2, #0]
 8019cd2:	681d      	ldr	r5, [r3, #0]
 8019cd4:	6862      	ldr	r2, [r4, #4]
 8019cd6:	2100      	movs	r1, #0
 8019cd8:	4628      	mov	r0, r5
 8019cda:	f7e6 fb09 	bl	80002f0 <memchr>
 8019cde:	b108      	cbz	r0, 8019ce4 <_printf_i+0x1bc>
 8019ce0:	1b40      	subs	r0, r0, r5
 8019ce2:	6060      	str	r0, [r4, #4]
 8019ce4:	6863      	ldr	r3, [r4, #4]
 8019ce6:	6123      	str	r3, [r4, #16]
 8019ce8:	2300      	movs	r3, #0
 8019cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cee:	e7a7      	b.n	8019c40 <_printf_i+0x118>
 8019cf0:	6923      	ldr	r3, [r4, #16]
 8019cf2:	462a      	mov	r2, r5
 8019cf4:	4639      	mov	r1, r7
 8019cf6:	4630      	mov	r0, r6
 8019cf8:	47c0      	blx	r8
 8019cfa:	3001      	adds	r0, #1
 8019cfc:	d0aa      	beq.n	8019c54 <_printf_i+0x12c>
 8019cfe:	6823      	ldr	r3, [r4, #0]
 8019d00:	079b      	lsls	r3, r3, #30
 8019d02:	d413      	bmi.n	8019d2c <_printf_i+0x204>
 8019d04:	68e0      	ldr	r0, [r4, #12]
 8019d06:	9b03      	ldr	r3, [sp, #12]
 8019d08:	4298      	cmp	r0, r3
 8019d0a:	bfb8      	it	lt
 8019d0c:	4618      	movlt	r0, r3
 8019d0e:	e7a3      	b.n	8019c58 <_printf_i+0x130>
 8019d10:	2301      	movs	r3, #1
 8019d12:	464a      	mov	r2, r9
 8019d14:	4639      	mov	r1, r7
 8019d16:	4630      	mov	r0, r6
 8019d18:	47c0      	blx	r8
 8019d1a:	3001      	adds	r0, #1
 8019d1c:	d09a      	beq.n	8019c54 <_printf_i+0x12c>
 8019d1e:	3501      	adds	r5, #1
 8019d20:	68e3      	ldr	r3, [r4, #12]
 8019d22:	9a03      	ldr	r2, [sp, #12]
 8019d24:	1a9b      	subs	r3, r3, r2
 8019d26:	42ab      	cmp	r3, r5
 8019d28:	dcf2      	bgt.n	8019d10 <_printf_i+0x1e8>
 8019d2a:	e7eb      	b.n	8019d04 <_printf_i+0x1dc>
 8019d2c:	2500      	movs	r5, #0
 8019d2e:	f104 0919 	add.w	r9, r4, #25
 8019d32:	e7f5      	b.n	8019d20 <_printf_i+0x1f8>
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d1ac      	bne.n	8019c92 <_printf_i+0x16a>
 8019d38:	7803      	ldrb	r3, [r0, #0]
 8019d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d42:	e76c      	b.n	8019c1e <_printf_i+0xf6>
 8019d44:	0801cfb5 	.word	0x0801cfb5
 8019d48:	0801cfc6 	.word	0x0801cfc6

08019d4c <_sbrk_r>:
 8019d4c:	b538      	push	{r3, r4, r5, lr}
 8019d4e:	4c06      	ldr	r4, [pc, #24]	; (8019d68 <_sbrk_r+0x1c>)
 8019d50:	2300      	movs	r3, #0
 8019d52:	4605      	mov	r5, r0
 8019d54:	4608      	mov	r0, r1
 8019d56:	6023      	str	r3, [r4, #0]
 8019d58:	f7e7 f9d0 	bl	80010fc <_sbrk>
 8019d5c:	1c43      	adds	r3, r0, #1
 8019d5e:	d102      	bne.n	8019d66 <_sbrk_r+0x1a>
 8019d60:	6823      	ldr	r3, [r4, #0]
 8019d62:	b103      	cbz	r3, 8019d66 <_sbrk_r+0x1a>
 8019d64:	602b      	str	r3, [r5, #0]
 8019d66:	bd38      	pop	{r3, r4, r5, pc}
 8019d68:	200101e8 	.word	0x200101e8

08019d6c <__sread>:
 8019d6c:	b510      	push	{r4, lr}
 8019d6e:	460c      	mov	r4, r1
 8019d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d74:	f000 fad6 	bl	801a324 <_read_r>
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	bfab      	itete	ge
 8019d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8019d80:	181b      	addge	r3, r3, r0
 8019d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d86:	bfac      	ite	ge
 8019d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d8a:	81a3      	strhlt	r3, [r4, #12]
 8019d8c:	bd10      	pop	{r4, pc}

08019d8e <__swrite>:
 8019d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d92:	461f      	mov	r7, r3
 8019d94:	898b      	ldrh	r3, [r1, #12]
 8019d96:	05db      	lsls	r3, r3, #23
 8019d98:	4605      	mov	r5, r0
 8019d9a:	460c      	mov	r4, r1
 8019d9c:	4616      	mov	r6, r2
 8019d9e:	d505      	bpl.n	8019dac <__swrite+0x1e>
 8019da0:	2302      	movs	r3, #2
 8019da2:	2200      	movs	r2, #0
 8019da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019da8:	f000 f9b6 	bl	801a118 <_lseek_r>
 8019dac:	89a3      	ldrh	r3, [r4, #12]
 8019dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019db6:	81a3      	strh	r3, [r4, #12]
 8019db8:	4632      	mov	r2, r6
 8019dba:	463b      	mov	r3, r7
 8019dbc:	4628      	mov	r0, r5
 8019dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc2:	f000 b869 	b.w	8019e98 <_write_r>

08019dc6 <__sseek>:
 8019dc6:	b510      	push	{r4, lr}
 8019dc8:	460c      	mov	r4, r1
 8019dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dce:	f000 f9a3 	bl	801a118 <_lseek_r>
 8019dd2:	1c43      	adds	r3, r0, #1
 8019dd4:	89a3      	ldrh	r3, [r4, #12]
 8019dd6:	bf15      	itete	ne
 8019dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8019dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019de2:	81a3      	strheq	r3, [r4, #12]
 8019de4:	bf18      	it	ne
 8019de6:	81a3      	strhne	r3, [r4, #12]
 8019de8:	bd10      	pop	{r4, pc}

08019dea <__sclose>:
 8019dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dee:	f000 b8d3 	b.w	8019f98 <_close_r>
	...

08019df4 <__swbuf_r>:
 8019df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019df6:	460e      	mov	r6, r1
 8019df8:	4614      	mov	r4, r2
 8019dfa:	4605      	mov	r5, r0
 8019dfc:	b118      	cbz	r0, 8019e06 <__swbuf_r+0x12>
 8019dfe:	6983      	ldr	r3, [r0, #24]
 8019e00:	b90b      	cbnz	r3, 8019e06 <__swbuf_r+0x12>
 8019e02:	f7ff faa5 	bl	8019350 <__sinit>
 8019e06:	4b21      	ldr	r3, [pc, #132]	; (8019e8c <__swbuf_r+0x98>)
 8019e08:	429c      	cmp	r4, r3
 8019e0a:	d12a      	bne.n	8019e62 <__swbuf_r+0x6e>
 8019e0c:	686c      	ldr	r4, [r5, #4]
 8019e0e:	69a3      	ldr	r3, [r4, #24]
 8019e10:	60a3      	str	r3, [r4, #8]
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	071a      	lsls	r2, r3, #28
 8019e16:	d52e      	bpl.n	8019e76 <__swbuf_r+0x82>
 8019e18:	6923      	ldr	r3, [r4, #16]
 8019e1a:	b363      	cbz	r3, 8019e76 <__swbuf_r+0x82>
 8019e1c:	6923      	ldr	r3, [r4, #16]
 8019e1e:	6820      	ldr	r0, [r4, #0]
 8019e20:	1ac0      	subs	r0, r0, r3
 8019e22:	6963      	ldr	r3, [r4, #20]
 8019e24:	b2f6      	uxtb	r6, r6
 8019e26:	4283      	cmp	r3, r0
 8019e28:	4637      	mov	r7, r6
 8019e2a:	dc04      	bgt.n	8019e36 <__swbuf_r+0x42>
 8019e2c:	4621      	mov	r1, r4
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f000 f948 	bl	801a0c4 <_fflush_r>
 8019e34:	bb28      	cbnz	r0, 8019e82 <__swbuf_r+0x8e>
 8019e36:	68a3      	ldr	r3, [r4, #8]
 8019e38:	3b01      	subs	r3, #1
 8019e3a:	60a3      	str	r3, [r4, #8]
 8019e3c:	6823      	ldr	r3, [r4, #0]
 8019e3e:	1c5a      	adds	r2, r3, #1
 8019e40:	6022      	str	r2, [r4, #0]
 8019e42:	701e      	strb	r6, [r3, #0]
 8019e44:	6963      	ldr	r3, [r4, #20]
 8019e46:	3001      	adds	r0, #1
 8019e48:	4283      	cmp	r3, r0
 8019e4a:	d004      	beq.n	8019e56 <__swbuf_r+0x62>
 8019e4c:	89a3      	ldrh	r3, [r4, #12]
 8019e4e:	07db      	lsls	r3, r3, #31
 8019e50:	d519      	bpl.n	8019e86 <__swbuf_r+0x92>
 8019e52:	2e0a      	cmp	r6, #10
 8019e54:	d117      	bne.n	8019e86 <__swbuf_r+0x92>
 8019e56:	4621      	mov	r1, r4
 8019e58:	4628      	mov	r0, r5
 8019e5a:	f000 f933 	bl	801a0c4 <_fflush_r>
 8019e5e:	b190      	cbz	r0, 8019e86 <__swbuf_r+0x92>
 8019e60:	e00f      	b.n	8019e82 <__swbuf_r+0x8e>
 8019e62:	4b0b      	ldr	r3, [pc, #44]	; (8019e90 <__swbuf_r+0x9c>)
 8019e64:	429c      	cmp	r4, r3
 8019e66:	d101      	bne.n	8019e6c <__swbuf_r+0x78>
 8019e68:	68ac      	ldr	r4, [r5, #8]
 8019e6a:	e7d0      	b.n	8019e0e <__swbuf_r+0x1a>
 8019e6c:	4b09      	ldr	r3, [pc, #36]	; (8019e94 <__swbuf_r+0xa0>)
 8019e6e:	429c      	cmp	r4, r3
 8019e70:	bf08      	it	eq
 8019e72:	68ec      	ldreq	r4, [r5, #12]
 8019e74:	e7cb      	b.n	8019e0e <__swbuf_r+0x1a>
 8019e76:	4621      	mov	r1, r4
 8019e78:	4628      	mov	r0, r5
 8019e7a:	f000 f81f 	bl	8019ebc <__swsetup_r>
 8019e7e:	2800      	cmp	r0, #0
 8019e80:	d0cc      	beq.n	8019e1c <__swbuf_r+0x28>
 8019e82:	f04f 37ff 	mov.w	r7, #4294967295
 8019e86:	4638      	mov	r0, r7
 8019e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	0801cf64 	.word	0x0801cf64
 8019e90:	0801cf84 	.word	0x0801cf84
 8019e94:	0801cf44 	.word	0x0801cf44

08019e98 <_write_r>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	4c07      	ldr	r4, [pc, #28]	; (8019eb8 <_write_r+0x20>)
 8019e9c:	4605      	mov	r5, r0
 8019e9e:	4608      	mov	r0, r1
 8019ea0:	4611      	mov	r1, r2
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	6022      	str	r2, [r4, #0]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	f7e7 f8d7 	bl	800105a <_write>
 8019eac:	1c43      	adds	r3, r0, #1
 8019eae:	d102      	bne.n	8019eb6 <_write_r+0x1e>
 8019eb0:	6823      	ldr	r3, [r4, #0]
 8019eb2:	b103      	cbz	r3, 8019eb6 <_write_r+0x1e>
 8019eb4:	602b      	str	r3, [r5, #0]
 8019eb6:	bd38      	pop	{r3, r4, r5, pc}
 8019eb8:	200101e8 	.word	0x200101e8

08019ebc <__swsetup_r>:
 8019ebc:	4b32      	ldr	r3, [pc, #200]	; (8019f88 <__swsetup_r+0xcc>)
 8019ebe:	b570      	push	{r4, r5, r6, lr}
 8019ec0:	681d      	ldr	r5, [r3, #0]
 8019ec2:	4606      	mov	r6, r0
 8019ec4:	460c      	mov	r4, r1
 8019ec6:	b125      	cbz	r5, 8019ed2 <__swsetup_r+0x16>
 8019ec8:	69ab      	ldr	r3, [r5, #24]
 8019eca:	b913      	cbnz	r3, 8019ed2 <__swsetup_r+0x16>
 8019ecc:	4628      	mov	r0, r5
 8019ece:	f7ff fa3f 	bl	8019350 <__sinit>
 8019ed2:	4b2e      	ldr	r3, [pc, #184]	; (8019f8c <__swsetup_r+0xd0>)
 8019ed4:	429c      	cmp	r4, r3
 8019ed6:	d10f      	bne.n	8019ef8 <__swsetup_r+0x3c>
 8019ed8:	686c      	ldr	r4, [r5, #4]
 8019eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	0715      	lsls	r5, r2, #28
 8019ee2:	d42c      	bmi.n	8019f3e <__swsetup_r+0x82>
 8019ee4:	06d0      	lsls	r0, r2, #27
 8019ee6:	d411      	bmi.n	8019f0c <__swsetup_r+0x50>
 8019ee8:	2209      	movs	r2, #9
 8019eea:	6032      	str	r2, [r6, #0]
 8019eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ef0:	81a3      	strh	r3, [r4, #12]
 8019ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ef6:	e03e      	b.n	8019f76 <__swsetup_r+0xba>
 8019ef8:	4b25      	ldr	r3, [pc, #148]	; (8019f90 <__swsetup_r+0xd4>)
 8019efa:	429c      	cmp	r4, r3
 8019efc:	d101      	bne.n	8019f02 <__swsetup_r+0x46>
 8019efe:	68ac      	ldr	r4, [r5, #8]
 8019f00:	e7eb      	b.n	8019eda <__swsetup_r+0x1e>
 8019f02:	4b24      	ldr	r3, [pc, #144]	; (8019f94 <__swsetup_r+0xd8>)
 8019f04:	429c      	cmp	r4, r3
 8019f06:	bf08      	it	eq
 8019f08:	68ec      	ldreq	r4, [r5, #12]
 8019f0a:	e7e6      	b.n	8019eda <__swsetup_r+0x1e>
 8019f0c:	0751      	lsls	r1, r2, #29
 8019f0e:	d512      	bpl.n	8019f36 <__swsetup_r+0x7a>
 8019f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f12:	b141      	cbz	r1, 8019f26 <__swsetup_r+0x6a>
 8019f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f18:	4299      	cmp	r1, r3
 8019f1a:	d002      	beq.n	8019f22 <__swsetup_r+0x66>
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	f000 f98d 	bl	801a23c <_free_r>
 8019f22:	2300      	movs	r3, #0
 8019f24:	6363      	str	r3, [r4, #52]	; 0x34
 8019f26:	89a3      	ldrh	r3, [r4, #12]
 8019f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f2c:	81a3      	strh	r3, [r4, #12]
 8019f2e:	2300      	movs	r3, #0
 8019f30:	6063      	str	r3, [r4, #4]
 8019f32:	6923      	ldr	r3, [r4, #16]
 8019f34:	6023      	str	r3, [r4, #0]
 8019f36:	89a3      	ldrh	r3, [r4, #12]
 8019f38:	f043 0308 	orr.w	r3, r3, #8
 8019f3c:	81a3      	strh	r3, [r4, #12]
 8019f3e:	6923      	ldr	r3, [r4, #16]
 8019f40:	b94b      	cbnz	r3, 8019f56 <__swsetup_r+0x9a>
 8019f42:	89a3      	ldrh	r3, [r4, #12]
 8019f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f4c:	d003      	beq.n	8019f56 <__swsetup_r+0x9a>
 8019f4e:	4621      	mov	r1, r4
 8019f50:	4630      	mov	r0, r6
 8019f52:	f000 f917 	bl	801a184 <__smakebuf_r>
 8019f56:	89a2      	ldrh	r2, [r4, #12]
 8019f58:	f012 0301 	ands.w	r3, r2, #1
 8019f5c:	d00c      	beq.n	8019f78 <__swsetup_r+0xbc>
 8019f5e:	2300      	movs	r3, #0
 8019f60:	60a3      	str	r3, [r4, #8]
 8019f62:	6963      	ldr	r3, [r4, #20]
 8019f64:	425b      	negs	r3, r3
 8019f66:	61a3      	str	r3, [r4, #24]
 8019f68:	6923      	ldr	r3, [r4, #16]
 8019f6a:	b953      	cbnz	r3, 8019f82 <__swsetup_r+0xc6>
 8019f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019f74:	d1ba      	bne.n	8019eec <__swsetup_r+0x30>
 8019f76:	bd70      	pop	{r4, r5, r6, pc}
 8019f78:	0792      	lsls	r2, r2, #30
 8019f7a:	bf58      	it	pl
 8019f7c:	6963      	ldrpl	r3, [r4, #20]
 8019f7e:	60a3      	str	r3, [r4, #8]
 8019f80:	e7f2      	b.n	8019f68 <__swsetup_r+0xac>
 8019f82:	2000      	movs	r0, #0
 8019f84:	e7f7      	b.n	8019f76 <__swsetup_r+0xba>
 8019f86:	bf00      	nop
 8019f88:	20000034 	.word	0x20000034
 8019f8c:	0801cf64 	.word	0x0801cf64
 8019f90:	0801cf84 	.word	0x0801cf84
 8019f94:	0801cf44 	.word	0x0801cf44

08019f98 <_close_r>:
 8019f98:	b538      	push	{r3, r4, r5, lr}
 8019f9a:	4c06      	ldr	r4, [pc, #24]	; (8019fb4 <_close_r+0x1c>)
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	4605      	mov	r5, r0
 8019fa0:	4608      	mov	r0, r1
 8019fa2:	6023      	str	r3, [r4, #0]
 8019fa4:	f7e7 f875 	bl	8001092 <_close>
 8019fa8:	1c43      	adds	r3, r0, #1
 8019faa:	d102      	bne.n	8019fb2 <_close_r+0x1a>
 8019fac:	6823      	ldr	r3, [r4, #0]
 8019fae:	b103      	cbz	r3, 8019fb2 <_close_r+0x1a>
 8019fb0:	602b      	str	r3, [r5, #0]
 8019fb2:	bd38      	pop	{r3, r4, r5, pc}
 8019fb4:	200101e8 	.word	0x200101e8

08019fb8 <__sflush_r>:
 8019fb8:	898a      	ldrh	r2, [r1, #12]
 8019fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fbe:	4605      	mov	r5, r0
 8019fc0:	0710      	lsls	r0, r2, #28
 8019fc2:	460c      	mov	r4, r1
 8019fc4:	d458      	bmi.n	801a078 <__sflush_r+0xc0>
 8019fc6:	684b      	ldr	r3, [r1, #4]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	dc05      	bgt.n	8019fd8 <__sflush_r+0x20>
 8019fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	dc02      	bgt.n	8019fd8 <__sflush_r+0x20>
 8019fd2:	2000      	movs	r0, #0
 8019fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fda:	2e00      	cmp	r6, #0
 8019fdc:	d0f9      	beq.n	8019fd2 <__sflush_r+0x1a>
 8019fde:	2300      	movs	r3, #0
 8019fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fe4:	682f      	ldr	r7, [r5, #0]
 8019fe6:	6a21      	ldr	r1, [r4, #32]
 8019fe8:	602b      	str	r3, [r5, #0]
 8019fea:	d032      	beq.n	801a052 <__sflush_r+0x9a>
 8019fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fee:	89a3      	ldrh	r3, [r4, #12]
 8019ff0:	075a      	lsls	r2, r3, #29
 8019ff2:	d505      	bpl.n	801a000 <__sflush_r+0x48>
 8019ff4:	6863      	ldr	r3, [r4, #4]
 8019ff6:	1ac0      	subs	r0, r0, r3
 8019ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ffa:	b10b      	cbz	r3, 801a000 <__sflush_r+0x48>
 8019ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ffe:	1ac0      	subs	r0, r0, r3
 801a000:	2300      	movs	r3, #0
 801a002:	4602      	mov	r2, r0
 801a004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a006:	6a21      	ldr	r1, [r4, #32]
 801a008:	4628      	mov	r0, r5
 801a00a:	47b0      	blx	r6
 801a00c:	1c43      	adds	r3, r0, #1
 801a00e:	89a3      	ldrh	r3, [r4, #12]
 801a010:	d106      	bne.n	801a020 <__sflush_r+0x68>
 801a012:	6829      	ldr	r1, [r5, #0]
 801a014:	291d      	cmp	r1, #29
 801a016:	d848      	bhi.n	801a0aa <__sflush_r+0xf2>
 801a018:	4a29      	ldr	r2, [pc, #164]	; (801a0c0 <__sflush_r+0x108>)
 801a01a:	40ca      	lsrs	r2, r1
 801a01c:	07d6      	lsls	r6, r2, #31
 801a01e:	d544      	bpl.n	801a0aa <__sflush_r+0xf2>
 801a020:	2200      	movs	r2, #0
 801a022:	6062      	str	r2, [r4, #4]
 801a024:	04d9      	lsls	r1, r3, #19
 801a026:	6922      	ldr	r2, [r4, #16]
 801a028:	6022      	str	r2, [r4, #0]
 801a02a:	d504      	bpl.n	801a036 <__sflush_r+0x7e>
 801a02c:	1c42      	adds	r2, r0, #1
 801a02e:	d101      	bne.n	801a034 <__sflush_r+0x7c>
 801a030:	682b      	ldr	r3, [r5, #0]
 801a032:	b903      	cbnz	r3, 801a036 <__sflush_r+0x7e>
 801a034:	6560      	str	r0, [r4, #84]	; 0x54
 801a036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a038:	602f      	str	r7, [r5, #0]
 801a03a:	2900      	cmp	r1, #0
 801a03c:	d0c9      	beq.n	8019fd2 <__sflush_r+0x1a>
 801a03e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a042:	4299      	cmp	r1, r3
 801a044:	d002      	beq.n	801a04c <__sflush_r+0x94>
 801a046:	4628      	mov	r0, r5
 801a048:	f000 f8f8 	bl	801a23c <_free_r>
 801a04c:	2000      	movs	r0, #0
 801a04e:	6360      	str	r0, [r4, #52]	; 0x34
 801a050:	e7c0      	b.n	8019fd4 <__sflush_r+0x1c>
 801a052:	2301      	movs	r3, #1
 801a054:	4628      	mov	r0, r5
 801a056:	47b0      	blx	r6
 801a058:	1c41      	adds	r1, r0, #1
 801a05a:	d1c8      	bne.n	8019fee <__sflush_r+0x36>
 801a05c:	682b      	ldr	r3, [r5, #0]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d0c5      	beq.n	8019fee <__sflush_r+0x36>
 801a062:	2b1d      	cmp	r3, #29
 801a064:	d001      	beq.n	801a06a <__sflush_r+0xb2>
 801a066:	2b16      	cmp	r3, #22
 801a068:	d101      	bne.n	801a06e <__sflush_r+0xb6>
 801a06a:	602f      	str	r7, [r5, #0]
 801a06c:	e7b1      	b.n	8019fd2 <__sflush_r+0x1a>
 801a06e:	89a3      	ldrh	r3, [r4, #12]
 801a070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a074:	81a3      	strh	r3, [r4, #12]
 801a076:	e7ad      	b.n	8019fd4 <__sflush_r+0x1c>
 801a078:	690f      	ldr	r7, [r1, #16]
 801a07a:	2f00      	cmp	r7, #0
 801a07c:	d0a9      	beq.n	8019fd2 <__sflush_r+0x1a>
 801a07e:	0793      	lsls	r3, r2, #30
 801a080:	680e      	ldr	r6, [r1, #0]
 801a082:	bf08      	it	eq
 801a084:	694b      	ldreq	r3, [r1, #20]
 801a086:	600f      	str	r7, [r1, #0]
 801a088:	bf18      	it	ne
 801a08a:	2300      	movne	r3, #0
 801a08c:	eba6 0807 	sub.w	r8, r6, r7
 801a090:	608b      	str	r3, [r1, #8]
 801a092:	f1b8 0f00 	cmp.w	r8, #0
 801a096:	dd9c      	ble.n	8019fd2 <__sflush_r+0x1a>
 801a098:	4643      	mov	r3, r8
 801a09a:	463a      	mov	r2, r7
 801a09c:	6a21      	ldr	r1, [r4, #32]
 801a09e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	47b0      	blx	r6
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	dc06      	bgt.n	801a0b6 <__sflush_r+0xfe>
 801a0a8:	89a3      	ldrh	r3, [r4, #12]
 801a0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0ae:	81a3      	strh	r3, [r4, #12]
 801a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0b4:	e78e      	b.n	8019fd4 <__sflush_r+0x1c>
 801a0b6:	4407      	add	r7, r0
 801a0b8:	eba8 0800 	sub.w	r8, r8, r0
 801a0bc:	e7e9      	b.n	801a092 <__sflush_r+0xda>
 801a0be:	bf00      	nop
 801a0c0:	20400001 	.word	0x20400001

0801a0c4 <_fflush_r>:
 801a0c4:	b538      	push	{r3, r4, r5, lr}
 801a0c6:	690b      	ldr	r3, [r1, #16]
 801a0c8:	4605      	mov	r5, r0
 801a0ca:	460c      	mov	r4, r1
 801a0cc:	b1db      	cbz	r3, 801a106 <_fflush_r+0x42>
 801a0ce:	b118      	cbz	r0, 801a0d8 <_fflush_r+0x14>
 801a0d0:	6983      	ldr	r3, [r0, #24]
 801a0d2:	b90b      	cbnz	r3, 801a0d8 <_fflush_r+0x14>
 801a0d4:	f7ff f93c 	bl	8019350 <__sinit>
 801a0d8:	4b0c      	ldr	r3, [pc, #48]	; (801a10c <_fflush_r+0x48>)
 801a0da:	429c      	cmp	r4, r3
 801a0dc:	d109      	bne.n	801a0f2 <_fflush_r+0x2e>
 801a0de:	686c      	ldr	r4, [r5, #4]
 801a0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0e4:	b17b      	cbz	r3, 801a106 <_fflush_r+0x42>
 801a0e6:	4621      	mov	r1, r4
 801a0e8:	4628      	mov	r0, r5
 801a0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0ee:	f7ff bf63 	b.w	8019fb8 <__sflush_r>
 801a0f2:	4b07      	ldr	r3, [pc, #28]	; (801a110 <_fflush_r+0x4c>)
 801a0f4:	429c      	cmp	r4, r3
 801a0f6:	d101      	bne.n	801a0fc <_fflush_r+0x38>
 801a0f8:	68ac      	ldr	r4, [r5, #8]
 801a0fa:	e7f1      	b.n	801a0e0 <_fflush_r+0x1c>
 801a0fc:	4b05      	ldr	r3, [pc, #20]	; (801a114 <_fflush_r+0x50>)
 801a0fe:	429c      	cmp	r4, r3
 801a100:	bf08      	it	eq
 801a102:	68ec      	ldreq	r4, [r5, #12]
 801a104:	e7ec      	b.n	801a0e0 <_fflush_r+0x1c>
 801a106:	2000      	movs	r0, #0
 801a108:	bd38      	pop	{r3, r4, r5, pc}
 801a10a:	bf00      	nop
 801a10c:	0801cf64 	.word	0x0801cf64
 801a110:	0801cf84 	.word	0x0801cf84
 801a114:	0801cf44 	.word	0x0801cf44

0801a118 <_lseek_r>:
 801a118:	b538      	push	{r3, r4, r5, lr}
 801a11a:	4c07      	ldr	r4, [pc, #28]	; (801a138 <_lseek_r+0x20>)
 801a11c:	4605      	mov	r5, r0
 801a11e:	4608      	mov	r0, r1
 801a120:	4611      	mov	r1, r2
 801a122:	2200      	movs	r2, #0
 801a124:	6022      	str	r2, [r4, #0]
 801a126:	461a      	mov	r2, r3
 801a128:	f7e6 ffda 	bl	80010e0 <_lseek>
 801a12c:	1c43      	adds	r3, r0, #1
 801a12e:	d102      	bne.n	801a136 <_lseek_r+0x1e>
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	b103      	cbz	r3, 801a136 <_lseek_r+0x1e>
 801a134:	602b      	str	r3, [r5, #0]
 801a136:	bd38      	pop	{r3, r4, r5, pc}
 801a138:	200101e8 	.word	0x200101e8

0801a13c <__swhatbuf_r>:
 801a13c:	b570      	push	{r4, r5, r6, lr}
 801a13e:	460e      	mov	r6, r1
 801a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a144:	2900      	cmp	r1, #0
 801a146:	b096      	sub	sp, #88	; 0x58
 801a148:	4614      	mov	r4, r2
 801a14a:	461d      	mov	r5, r3
 801a14c:	da07      	bge.n	801a15e <__swhatbuf_r+0x22>
 801a14e:	2300      	movs	r3, #0
 801a150:	602b      	str	r3, [r5, #0]
 801a152:	89b3      	ldrh	r3, [r6, #12]
 801a154:	061a      	lsls	r2, r3, #24
 801a156:	d410      	bmi.n	801a17a <__swhatbuf_r+0x3e>
 801a158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a15c:	e00e      	b.n	801a17c <__swhatbuf_r+0x40>
 801a15e:	466a      	mov	r2, sp
 801a160:	f000 f8f2 	bl	801a348 <_fstat_r>
 801a164:	2800      	cmp	r0, #0
 801a166:	dbf2      	blt.n	801a14e <__swhatbuf_r+0x12>
 801a168:	9a01      	ldr	r2, [sp, #4]
 801a16a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a16e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a172:	425a      	negs	r2, r3
 801a174:	415a      	adcs	r2, r3
 801a176:	602a      	str	r2, [r5, #0]
 801a178:	e7ee      	b.n	801a158 <__swhatbuf_r+0x1c>
 801a17a:	2340      	movs	r3, #64	; 0x40
 801a17c:	2000      	movs	r0, #0
 801a17e:	6023      	str	r3, [r4, #0]
 801a180:	b016      	add	sp, #88	; 0x58
 801a182:	bd70      	pop	{r4, r5, r6, pc}

0801a184 <__smakebuf_r>:
 801a184:	898b      	ldrh	r3, [r1, #12]
 801a186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a188:	079d      	lsls	r5, r3, #30
 801a18a:	4606      	mov	r6, r0
 801a18c:	460c      	mov	r4, r1
 801a18e:	d507      	bpl.n	801a1a0 <__smakebuf_r+0x1c>
 801a190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	6123      	str	r3, [r4, #16]
 801a198:	2301      	movs	r3, #1
 801a19a:	6163      	str	r3, [r4, #20]
 801a19c:	b002      	add	sp, #8
 801a19e:	bd70      	pop	{r4, r5, r6, pc}
 801a1a0:	ab01      	add	r3, sp, #4
 801a1a2:	466a      	mov	r2, sp
 801a1a4:	f7ff ffca 	bl	801a13c <__swhatbuf_r>
 801a1a8:	9900      	ldr	r1, [sp, #0]
 801a1aa:	4605      	mov	r5, r0
 801a1ac:	4630      	mov	r0, r6
 801a1ae:	f7ff f959 	bl	8019464 <_malloc_r>
 801a1b2:	b948      	cbnz	r0, 801a1c8 <__smakebuf_r+0x44>
 801a1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1b8:	059a      	lsls	r2, r3, #22
 801a1ba:	d4ef      	bmi.n	801a19c <__smakebuf_r+0x18>
 801a1bc:	f023 0303 	bic.w	r3, r3, #3
 801a1c0:	f043 0302 	orr.w	r3, r3, #2
 801a1c4:	81a3      	strh	r3, [r4, #12]
 801a1c6:	e7e3      	b.n	801a190 <__smakebuf_r+0xc>
 801a1c8:	4b0d      	ldr	r3, [pc, #52]	; (801a200 <__smakebuf_r+0x7c>)
 801a1ca:	62b3      	str	r3, [r6, #40]	; 0x28
 801a1cc:	89a3      	ldrh	r3, [r4, #12]
 801a1ce:	6020      	str	r0, [r4, #0]
 801a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1d4:	81a3      	strh	r3, [r4, #12]
 801a1d6:	9b00      	ldr	r3, [sp, #0]
 801a1d8:	6163      	str	r3, [r4, #20]
 801a1da:	9b01      	ldr	r3, [sp, #4]
 801a1dc:	6120      	str	r0, [r4, #16]
 801a1de:	b15b      	cbz	r3, 801a1f8 <__smakebuf_r+0x74>
 801a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1e4:	4630      	mov	r0, r6
 801a1e6:	f000 f8c1 	bl	801a36c <_isatty_r>
 801a1ea:	b128      	cbz	r0, 801a1f8 <__smakebuf_r+0x74>
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	f023 0303 	bic.w	r3, r3, #3
 801a1f2:	f043 0301 	orr.w	r3, r3, #1
 801a1f6:	81a3      	strh	r3, [r4, #12]
 801a1f8:	89a3      	ldrh	r3, [r4, #12]
 801a1fa:	431d      	orrs	r5, r3
 801a1fc:	81a5      	strh	r5, [r4, #12]
 801a1fe:	e7cd      	b.n	801a19c <__smakebuf_r+0x18>
 801a200:	08019319 	.word	0x08019319

0801a204 <memmove>:
 801a204:	4288      	cmp	r0, r1
 801a206:	b510      	push	{r4, lr}
 801a208:	eb01 0302 	add.w	r3, r1, r2
 801a20c:	d807      	bhi.n	801a21e <memmove+0x1a>
 801a20e:	1e42      	subs	r2, r0, #1
 801a210:	4299      	cmp	r1, r3
 801a212:	d00a      	beq.n	801a22a <memmove+0x26>
 801a214:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a218:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a21c:	e7f8      	b.n	801a210 <memmove+0xc>
 801a21e:	4283      	cmp	r3, r0
 801a220:	d9f5      	bls.n	801a20e <memmove+0xa>
 801a222:	1881      	adds	r1, r0, r2
 801a224:	1ad2      	subs	r2, r2, r3
 801a226:	42d3      	cmn	r3, r2
 801a228:	d100      	bne.n	801a22c <memmove+0x28>
 801a22a:	bd10      	pop	{r4, pc}
 801a22c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a230:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a234:	e7f7      	b.n	801a226 <memmove+0x22>

0801a236 <__malloc_lock>:
 801a236:	4770      	bx	lr

0801a238 <__malloc_unlock>:
 801a238:	4770      	bx	lr
	...

0801a23c <_free_r>:
 801a23c:	b538      	push	{r3, r4, r5, lr}
 801a23e:	4605      	mov	r5, r0
 801a240:	2900      	cmp	r1, #0
 801a242:	d045      	beq.n	801a2d0 <_free_r+0x94>
 801a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a248:	1f0c      	subs	r4, r1, #4
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	bfb8      	it	lt
 801a24e:	18e4      	addlt	r4, r4, r3
 801a250:	f7ff fff1 	bl	801a236 <__malloc_lock>
 801a254:	4a1f      	ldr	r2, [pc, #124]	; (801a2d4 <_free_r+0x98>)
 801a256:	6813      	ldr	r3, [r2, #0]
 801a258:	4610      	mov	r0, r2
 801a25a:	b933      	cbnz	r3, 801a26a <_free_r+0x2e>
 801a25c:	6063      	str	r3, [r4, #4]
 801a25e:	6014      	str	r4, [r2, #0]
 801a260:	4628      	mov	r0, r5
 801a262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a266:	f7ff bfe7 	b.w	801a238 <__malloc_unlock>
 801a26a:	42a3      	cmp	r3, r4
 801a26c:	d90c      	bls.n	801a288 <_free_r+0x4c>
 801a26e:	6821      	ldr	r1, [r4, #0]
 801a270:	1862      	adds	r2, r4, r1
 801a272:	4293      	cmp	r3, r2
 801a274:	bf04      	itt	eq
 801a276:	681a      	ldreq	r2, [r3, #0]
 801a278:	685b      	ldreq	r3, [r3, #4]
 801a27a:	6063      	str	r3, [r4, #4]
 801a27c:	bf04      	itt	eq
 801a27e:	1852      	addeq	r2, r2, r1
 801a280:	6022      	streq	r2, [r4, #0]
 801a282:	6004      	str	r4, [r0, #0]
 801a284:	e7ec      	b.n	801a260 <_free_r+0x24>
 801a286:	4613      	mov	r3, r2
 801a288:	685a      	ldr	r2, [r3, #4]
 801a28a:	b10a      	cbz	r2, 801a290 <_free_r+0x54>
 801a28c:	42a2      	cmp	r2, r4
 801a28e:	d9fa      	bls.n	801a286 <_free_r+0x4a>
 801a290:	6819      	ldr	r1, [r3, #0]
 801a292:	1858      	adds	r0, r3, r1
 801a294:	42a0      	cmp	r0, r4
 801a296:	d10b      	bne.n	801a2b0 <_free_r+0x74>
 801a298:	6820      	ldr	r0, [r4, #0]
 801a29a:	4401      	add	r1, r0
 801a29c:	1858      	adds	r0, r3, r1
 801a29e:	4282      	cmp	r2, r0
 801a2a0:	6019      	str	r1, [r3, #0]
 801a2a2:	d1dd      	bne.n	801a260 <_free_r+0x24>
 801a2a4:	6810      	ldr	r0, [r2, #0]
 801a2a6:	6852      	ldr	r2, [r2, #4]
 801a2a8:	605a      	str	r2, [r3, #4]
 801a2aa:	4401      	add	r1, r0
 801a2ac:	6019      	str	r1, [r3, #0]
 801a2ae:	e7d7      	b.n	801a260 <_free_r+0x24>
 801a2b0:	d902      	bls.n	801a2b8 <_free_r+0x7c>
 801a2b2:	230c      	movs	r3, #12
 801a2b4:	602b      	str	r3, [r5, #0]
 801a2b6:	e7d3      	b.n	801a260 <_free_r+0x24>
 801a2b8:	6820      	ldr	r0, [r4, #0]
 801a2ba:	1821      	adds	r1, r4, r0
 801a2bc:	428a      	cmp	r2, r1
 801a2be:	bf04      	itt	eq
 801a2c0:	6811      	ldreq	r1, [r2, #0]
 801a2c2:	6852      	ldreq	r2, [r2, #4]
 801a2c4:	6062      	str	r2, [r4, #4]
 801a2c6:	bf04      	itt	eq
 801a2c8:	1809      	addeq	r1, r1, r0
 801a2ca:	6021      	streq	r1, [r4, #0]
 801a2cc:	605c      	str	r4, [r3, #4]
 801a2ce:	e7c7      	b.n	801a260 <_free_r+0x24>
 801a2d0:	bd38      	pop	{r3, r4, r5, pc}
 801a2d2:	bf00      	nop
 801a2d4:	2000c940 	.word	0x2000c940

0801a2d8 <_realloc_r>:
 801a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2da:	4607      	mov	r7, r0
 801a2dc:	4614      	mov	r4, r2
 801a2de:	460e      	mov	r6, r1
 801a2e0:	b921      	cbnz	r1, 801a2ec <_realloc_r+0x14>
 801a2e2:	4611      	mov	r1, r2
 801a2e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2e8:	f7ff b8bc 	b.w	8019464 <_malloc_r>
 801a2ec:	b922      	cbnz	r2, 801a2f8 <_realloc_r+0x20>
 801a2ee:	f7ff ffa5 	bl	801a23c <_free_r>
 801a2f2:	4625      	mov	r5, r4
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2f8:	f000 f848 	bl	801a38c <_malloc_usable_size_r>
 801a2fc:	42a0      	cmp	r0, r4
 801a2fe:	d20f      	bcs.n	801a320 <_realloc_r+0x48>
 801a300:	4621      	mov	r1, r4
 801a302:	4638      	mov	r0, r7
 801a304:	f7ff f8ae 	bl	8019464 <_malloc_r>
 801a308:	4605      	mov	r5, r0
 801a30a:	2800      	cmp	r0, #0
 801a30c:	d0f2      	beq.n	801a2f4 <_realloc_r+0x1c>
 801a30e:	4631      	mov	r1, r6
 801a310:	4622      	mov	r2, r4
 801a312:	f7fe ff92 	bl	801923a <memcpy>
 801a316:	4631      	mov	r1, r6
 801a318:	4638      	mov	r0, r7
 801a31a:	f7ff ff8f 	bl	801a23c <_free_r>
 801a31e:	e7e9      	b.n	801a2f4 <_realloc_r+0x1c>
 801a320:	4635      	mov	r5, r6
 801a322:	e7e7      	b.n	801a2f4 <_realloc_r+0x1c>

0801a324 <_read_r>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	4c07      	ldr	r4, [pc, #28]	; (801a344 <_read_r+0x20>)
 801a328:	4605      	mov	r5, r0
 801a32a:	4608      	mov	r0, r1
 801a32c:	4611      	mov	r1, r2
 801a32e:	2200      	movs	r2, #0
 801a330:	6022      	str	r2, [r4, #0]
 801a332:	461a      	mov	r2, r3
 801a334:	f7e6 fe74 	bl	8001020 <_read>
 801a338:	1c43      	adds	r3, r0, #1
 801a33a:	d102      	bne.n	801a342 <_read_r+0x1e>
 801a33c:	6823      	ldr	r3, [r4, #0]
 801a33e:	b103      	cbz	r3, 801a342 <_read_r+0x1e>
 801a340:	602b      	str	r3, [r5, #0]
 801a342:	bd38      	pop	{r3, r4, r5, pc}
 801a344:	200101e8 	.word	0x200101e8

0801a348 <_fstat_r>:
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4c07      	ldr	r4, [pc, #28]	; (801a368 <_fstat_r+0x20>)
 801a34c:	2300      	movs	r3, #0
 801a34e:	4605      	mov	r5, r0
 801a350:	4608      	mov	r0, r1
 801a352:	4611      	mov	r1, r2
 801a354:	6023      	str	r3, [r4, #0]
 801a356:	f7e6 fea8 	bl	80010aa <_fstat>
 801a35a:	1c43      	adds	r3, r0, #1
 801a35c:	d102      	bne.n	801a364 <_fstat_r+0x1c>
 801a35e:	6823      	ldr	r3, [r4, #0]
 801a360:	b103      	cbz	r3, 801a364 <_fstat_r+0x1c>
 801a362:	602b      	str	r3, [r5, #0]
 801a364:	bd38      	pop	{r3, r4, r5, pc}
 801a366:	bf00      	nop
 801a368:	200101e8 	.word	0x200101e8

0801a36c <_isatty_r>:
 801a36c:	b538      	push	{r3, r4, r5, lr}
 801a36e:	4c06      	ldr	r4, [pc, #24]	; (801a388 <_isatty_r+0x1c>)
 801a370:	2300      	movs	r3, #0
 801a372:	4605      	mov	r5, r0
 801a374:	4608      	mov	r0, r1
 801a376:	6023      	str	r3, [r4, #0]
 801a378:	f7e6 fea7 	bl	80010ca <_isatty>
 801a37c:	1c43      	adds	r3, r0, #1
 801a37e:	d102      	bne.n	801a386 <_isatty_r+0x1a>
 801a380:	6823      	ldr	r3, [r4, #0]
 801a382:	b103      	cbz	r3, 801a386 <_isatty_r+0x1a>
 801a384:	602b      	str	r3, [r5, #0]
 801a386:	bd38      	pop	{r3, r4, r5, pc}
 801a388:	200101e8 	.word	0x200101e8

0801a38c <_malloc_usable_size_r>:
 801a38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a390:	1f18      	subs	r0, r3, #4
 801a392:	2b00      	cmp	r3, #0
 801a394:	bfbc      	itt	lt
 801a396:	580b      	ldrlt	r3, [r1, r0]
 801a398:	18c0      	addlt	r0, r0, r3
 801a39a:	4770      	bx	lr

0801a39c <_init>:
 801a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a39e:	bf00      	nop
 801a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3a2:	bc08      	pop	{r3}
 801a3a4:	469e      	mov	lr, r3
 801a3a6:	4770      	bx	lr

0801a3a8 <_fini>:
 801a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3aa:	bf00      	nop
 801a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3ae:	bc08      	pop	{r3}
 801a3b0:	469e      	mov	lr, r3
 801a3b2:	4770      	bx	lr
