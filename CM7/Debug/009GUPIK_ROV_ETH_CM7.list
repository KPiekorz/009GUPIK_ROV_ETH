
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000183c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002754  08018660  08018660  00028660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801adb4  0801adb4  0002adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801adbc  0801adbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801adc0  0801adc0  0002adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801adc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007944  20000098  0801ae5c  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200079dc  0801ae5c  000379dc  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801ae5c  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005896b  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000093e9  00000000  00000000  00088a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002808  00000000  00000000  00091e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002550  00000000  00000000  00094628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004b893  00000000  00000000  00096b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00033426  00000000  00000000  000e240b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a571a  00000000  00000000  00115831  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002baf4b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ab40  00000000  00000000  002bafc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018648 	.word	0x08018648

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	08018648 	.word	0x08018648

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <SystemInit+0xc4>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <SystemInit+0xc4>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemInit+0xc4>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <SystemInit+0xc4>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemInit+0xc8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemInit+0xc8>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemInit+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemInit+0xc8>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4924      	ldr	r1, [pc, #144]	; (8000748 <SystemInit+0xc8>)
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemInit+0xcc>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemInit+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SystemInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <SystemInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <SystemInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemInit+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <SystemInit+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <SystemInit+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <SystemInit+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <SystemInit+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SystemInit+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <SystemInit+0xc8>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <SystemInit+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <SystemInit+0xd0>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <SystemInit+0xd0>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <SystemInit+0xd4>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <SystemInit+0xd8>)
 8000724:	4013      	ands	r3, r2
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <SystemInit+0xdc>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SystemInit+0xc4>)
 8000734:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000738:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	580000c0 	.word	0x580000c0
 8000754:	5c001000 	.word	0x5c001000
 8000758:	ffff0000 	.word	0xffff0000
 800075c:	51008108 	.word	0x51008108

08000760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <vApplicationGetIdleTaskMemory+0x2c>)
 8000770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <vApplicationGetIdleTaskMemory+0x30>)
 8000776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000b4 	.word	0x200000b4
 8000790:	20000108 	.word	0x20000108

08000794 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_FREERTOS_Init+0x48>)
 800079c:	1d3c      	adds	r4, r7, #4
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 f8a5 	bl	8009900 <osThreadCreate>
 80007b6:	4602      	mov	r2, r0
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_FREERTOS_Init+0x4c>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthTCPCommunication, "vTaskEthTCPCommunication", 1000, NULL, 1, NULL);
 80007bc:	2300      	movs	r3, #0
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	4906      	ldr	r1, [pc, #24]	; (80007e4 <MX_FREERTOS_Init+0x50>)
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_FREERTOS_Init+0x54>)
 80007ce:	f00a fb28 	bl	800ae22 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bdb0      	pop	{r4, r5, r7, pc}
 80007da:	bf00      	nop
 80007dc:	08018688 	.word	0x08018688
 80007e0:	20004204 	.word	0x20004204
 80007e4:	08018660 	.word	0x08018660
 80007e8:	08000801 	.word	0x08000801

080007ec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007f4:	f008 fc3c 	bl	8009070 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f009 f8cd 	bl	8009998 <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartDefaultTask+0xc>

08000800 <vTaskEthTCPCommunication>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

/* task to hold tcp communication */
void vTaskEthTCPCommunication(void * argument){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]


	for(;;){
 8000808:	e7fe      	b.n	8000808 <vTaskEthTCPCommunication+0x8>
	...

0800080c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <MX_GPIO_Init+0x140>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a48      	ldr	r2, [pc, #288]	; (800094c <MX_GPIO_Init+0x140>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b46      	ldr	r3, [pc, #280]	; (800094c <MX_GPIO_Init+0x140>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000840:	4b42      	ldr	r3, [pc, #264]	; (800094c <MX_GPIO_Init+0x140>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	4a41      	ldr	r2, [pc, #260]	; (800094c <MX_GPIO_Init+0x140>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000850:	4b3e      	ldr	r3, [pc, #248]	; (800094c <MX_GPIO_Init+0x140>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x140>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a39      	ldr	r2, [pc, #228]	; (800094c <MX_GPIO_Init+0x140>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <MX_GPIO_Init+0x140>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_GPIO_Init+0x140>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	4a32      	ldr	r2, [pc, #200]	; (800094c <MX_GPIO_Init+0x140>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <MX_GPIO_Init+0x140>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <MX_GPIO_Init+0x140>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	4a2a      	ldr	r2, [pc, #168]	; (800094c <MX_GPIO_Init+0x140>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_GPIO_Init+0x140>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_GPIO_Init+0x140>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_GPIO_Init+0x140>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_GPIO_Init+0x140>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0x140>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_GPIO_Init+0x140>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0x140>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f244 0101 	movw	r1, #16385	; 0x4001
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <MX_GPIO_Init+0x144>)
 80008fc:	f002 fdd0 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_GPIO_Init+0x148>)
 8000906:	f002 fdcb 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800090a:	f244 0301 	movw	r3, #16385	; 0x4001
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x144>)
 8000924:	f002 fc0c 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_GPIO_Init+0x148>)
 8000940:	f002 fbfe 	bl	8003140 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	58024400 	.word	0x58024400
 8000950:	58020400 	.word	0x58020400
 8000954:	58021000 	.word	0x58021000

08000958 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800095c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000960:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SCB_EnableICache+0x3c>)
 8000966:	2200      	movs	r2, #0
 8000968:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800096c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000970:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <SCB_EnableICache+0x3c>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <SCB_EnableICache+0x3c>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <SCB_EnableDCache+0x7c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <SCB_EnableDCache+0x7c>)
 80009ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009b0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	0b5b      	lsrs	r3, r3, #13
 80009b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009ba:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009c4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	015a      	lsls	r2, r3, #5
 80009ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009d4:	490f      	ldr	r1, [pc, #60]	; (8000a14 <SCB_EnableDCache+0x7c>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1ef      	bne.n	80009c6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	60fa      	str	r2, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1e5      	bne.n	80009bc <SCB_EnableDCache+0x24>
 80009f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SCB_EnableDCache+0x7c>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <SCB_EnableDCache+0x7c>)
 80009fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fe:	6153      	str	r3, [r2, #20]
 8000a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a04:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a1e:	f7ff ff9b 	bl	8000958 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a22:	f7ff ffb9 	bl	8000998 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a2c:	bf00      	nop
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <main+0xa8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <main+0x2c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dcf4      	bgt.n	8000a2e <main+0x16>
  if ( timeout < 0 )
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da01      	bge.n	8000a4e <main+0x36>
  {
  Error_Handler();
 8000a4a:	f000 f931 	bl	8000cb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fd1b 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f837 	bl	8000ac4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <main+0xa8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <main+0xa8>)
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <main+0xa8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f002 fd2d 	bl	80034d4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 fd43 	bl	8003508 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a86:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a88:	bf00      	nop
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <main+0xa8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d104      	bne.n	8000aa0 <main+0x88>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dcf4      	bgt.n	8000a8a <main+0x72>
if ( timeout < 0 )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da01      	bge.n	8000aaa <main+0x92>
{
Error_Handler();
 8000aa6:	f000 f903 	bl	8000cb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f7ff feaf 	bl	800080c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aae:	f000 fa41 	bl	8000f34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ab2:	f000 fad5 	bl	8001060 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000ab6:	f7ff fe6d 	bl	8000794 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000aba:	f008 ff0a 	bl	80098d2 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0xa6>
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0cc      	sub	sp, #304	; 0x130
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ace:	224c      	movs	r2, #76	; 0x4c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f016 fe90 	bl	80177f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000adc:	2220      	movs	r2, #32
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f016 fe89 	bl	80177f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4618      	mov	r0, r3
 8000aec:	23bc      	movs	r3, #188	; 0xbc
 8000aee:	461a      	mov	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f016 fe81 	bl	80177f8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000af6:	2004      	movs	r0, #4
 8000af8:	f002 fe62 	bl	80037c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <SystemClock_Config+0x1b8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a5d      	ldr	r2, [pc, #372]	; (8000c7c <SystemClock_Config+0x1b8>)
 8000b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <SystemClock_Config+0x1b8>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <SystemClock_Config+0x1bc>)
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	4a58      	ldr	r2, [pc, #352]	; (8000c80 <SystemClock_Config+0x1bc>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b26:	4b56      	ldr	r3, [pc, #344]	; (8000c80 <SystemClock_Config+0x1bc>)
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	f003 0201 	and.w	r2, r3, #1
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b36:	bf00      	nop
 8000b38:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <SystemClock_Config+0x1b8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b44:	d1f8      	bne.n	8000b38 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b46:	4b4f      	ldr	r3, [pc, #316]	; (8000c84 <SystemClock_Config+0x1c0>)
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f023 0303 	bic.w	r3, r3, #3
 8000b4e:	4a4d      	ldr	r2, [pc, #308]	; (8000c84 <SystemClock_Config+0x1c0>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b76:	2378      	movs	r3, #120	; 0x78
 8000b78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fe75 	bl	8003894 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000bb0:	f000 f87e 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	233f      	movs	r3, #63	; 0x3f
 8000bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be0:	2340      	movs	r3, #64	; 0x40
 8000be2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bea:	2104      	movs	r1, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fa29 	bl	8004044 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000bf8:	f000 f85a 	bl	8000cb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <SystemClock_Config+0x1c4>)
 8000c02:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2201      	movs	r2, #1
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2218      	movs	r2, #24
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	2202      	movs	r2, #2
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	2204      	movs	r2, #4
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2202      	movs	r2, #2
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fdb6 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 8000c6a:	f000 f821 	bl	8000cb0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c6e:	f002 fe01 	bl	8003874 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c72:	bf00      	nop
 8000c74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	58024800 	.word	0x58024800
 8000c80:	58000400 	.word	0x58000400
 8000c84:	58024400 	.word	0x58024400
 8000c88:	00040002 	.word	0x00040002

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 fc2f 	bl	8001500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010000 	.word	0x40010000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x38>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_MspInit+0x38>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_MspInit+0x38>)
 8000cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f06f 0001 	mvn.w	r0, #1
 8000cec:	f000 fd22 	bl	8001734 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400

08000cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	; 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 fd0f 	bl	8001734 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000d16:	2019      	movs	r0, #25
 8000d18:	f000 fd26 	bl	8001768 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_InitTick+0xa8>)
 8000d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d22:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_InitTick+0xa8>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_InitTick+0xa8>)
 8000d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fd01 	bl	800474c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d4a:	f003 fce9 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_InitTick+0xac>)
 8000d58:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5c:	0c9b      	lsrs	r3, r3, #18
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0xb0>)
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_InitTick+0xb4>)
 8000d66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_InitTick+0xb0>)
 8000d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_InitTick+0xb0>)
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_InitTick+0xb0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_InitTick+0xb0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <HAL_InitTick+0xb0>)
 8000d84:	f005 f814 	bl	8005db0 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d104      	bne.n	8000d98 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d8e:	4807      	ldr	r0, [pc, #28]	; (8000dac <HAL_InitTick+0xb0>)
 8000d90:	f005 f844 	bl	8005e1c <HAL_TIM_Base_Start_IT>
 8000d94:	4603      	mov	r3, r0
 8000d96:	e000      	b.n	8000d9a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3738      	adds	r7, #56	; 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	58024400 	.word	0x58024400
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	20004208 	.word	0x20004208
 8000db0:	40010000 	.word	0x40010000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_UP_IRQHandler+0x10>)
 8000dee:	f005 f83f 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20004208 	.word	0x20004208

08000dfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
	}

return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf1      	blt.n	8000e48 <_write+0x12>
	}
	return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:

int _close(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:

int _isatty(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x50>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x16>
		heap_end = &end;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <_sbrk+0x50>)
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <_sbrk+0x54>)
 8000eec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <_sbrk+0x50>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <_sbrk+0x50>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	466a      	mov	r2, sp
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d905      	bls.n	8000f0e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <_sbrk+0x58>)
 8000f04:	220c      	movs	r2, #12
 8000f06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	e006      	b.n	8000f1c <_sbrk+0x44>
	}

	heap_end += incr;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <_sbrk+0x50>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <_sbrk+0x50>)
 8000f18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20000308 	.word	0x20000308
 8000f2c:	200079e0 	.word	0x200079e0
 8000f30:	200079d4 	.word	0x200079d4

08000f34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <MX_USART3_UART_Init+0x94>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f005 f977 	bl	8006270 <HAL_UART_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f88:	f7ff fe92 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f90:	f007 fcdf 	bl	8008952 <HAL_UARTEx_SetTxFifoThreshold>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9a:	f7ff fe89 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fa2:	f007 fd14 	bl	80089ce <HAL_UARTEx_SetRxFifoThreshold>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fac:	f7ff fe80 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f007 fc95 	bl	80088e0 <HAL_UARTEx_DisableFifoMode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f7ff fe78 	bl	8000cb0 <Error_Handler>
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20004248 	.word	0x20004248
 8000fc8:	40004800 	.word	0x40004800

08000fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12e      	bne.n	800104c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8000ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8000ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_UART_MspInit+0x8c>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0x8c>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800102a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103c:	2307      	movs	r3, #7
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0x90>)
 8001048:	f002 f87a 	bl	8003140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40004800 	.word	0x40004800
 8001058:	58024400 	.word	0x58024400
 800105c:	58020c00 	.word	0x58020c00

08001060 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001068:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106c:	2209      	movs	r2, #9
 800106e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001072:	2202      	movs	r2, #2
 8001074:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800107e:	2202      	movs	r2, #2
 8001080:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001096:	2201      	movs	r2, #1
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800109c:	2201      	movs	r2, #1
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a8:	f002 fa42 	bl	8003530 <HAL_PCD_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80010b2:	f7ff fdfd 	bl	8000cb0 <Error_Handler>
  }

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200042d4 	.word	0x200042d4
 80010c0:	40080000 	.word	0x40080000

080010c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_PCD_MspInit+0xa4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d13b      	bne.n	800115e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_PCD_MspInit+0xa8>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_PCD_MspInit+0xa8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PCD_MspInit+0xa8>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001104:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <HAL_PCD_MspInit+0xac>)
 8001122:	f002 f80d 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_PCD_MspInit+0xac>)
 800113c:	f002 f800 	bl	8003140 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_PCD_MspInit+0xa8>)
 8001142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_PCD_MspInit+0xa8>)
 8001148:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800114c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_PCD_MspInit+0xa8>)
 8001152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40080000 	.word	0x40080000
 800116c:	58024400 	.word	0x58024400
 8001170:	58020000 	.word	0x58020000

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800117a:	e003      	b.n	8001184 <LoopCopyDataInit>

0800117c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800117e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001182:	3104      	adds	r1, #4

08001184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800118c:	d3f6      	bcc.n	800117c <CopyDataInit>
  ldr  r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001190:	e002      	b.n	8001198 <LoopFillZerobss>

08001192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001194:	f842 3b04 	str.w	r3, [r2], #4

08001198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800119c:	d3f9      	bcc.n	8001192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800119e:	f7ff fa6f 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f016 faeb 	bl	801777c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fc37 	bl	8000a18 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011b0:	0801adc4 	.word	0x0801adc4
  ldr  r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011b8:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80011bc:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80011c0:	200079dc 	.word	0x200079dc

080011c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC3_IRQHandler>

080011c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e014      	b.n	800121e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d17c      	bne.n	8001344 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2220      	movs	r2, #32
 800125c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e01c      	b.n	800129e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2112      	movs	r1, #18
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	da03      	bge.n	8001280 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001278:	f06f 0304 	mvn.w	r3, #4
 800127c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800127e:	e00b      	b.n	8001298 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	d105      	bne.n	8001298 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
         break;
 8001296:	e005      	b.n	80012a4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	d9df      	bls.n	8001264 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b1f      	cmp	r3, #31
 80012aa:	d902      	bls.n	80012b2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012ac:	f06f 0302 	mvn.w	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d145      	bne.n	8001344 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6810      	ldr	r0, [r2, #0]
 80012c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c4:	2100      	movs	r1, #0
 80012c6:	4798      	blx	r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db37      	blt.n	800133e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6810      	ldr	r0, [r2, #0]
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	2100      	movs	r1, #0
 80012dc:	4798      	blx	r3
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db28      	blt.n	8001336 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012ee:	e01c      	b.n	800132a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4798      	blx	r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001302:	d80e      	bhi.n	8001322 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6810      	ldr	r0, [r2, #0]
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	2100      	movs	r1, #0
 8001312:	4798      	blx	r3
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	da07      	bge.n	800132a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800131a:	f06f 0304 	mvn.w	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
                 break;
 8001320:	e010      	b.n	8001344 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001322:	f06f 0301 	mvn.w	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
               break;
 8001328:	e00c      	b.n	8001344 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1dd      	bne.n	80012f0 <LAN8742_Init+0xc6>
 8001334:	e006      	b.n	8001344 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001336:	f06f 0304 	mvn.w	r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e002      	b.n	8001344 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800133e:	f06f 0303 	mvn.w	r3, #3
 8001342:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d112      	bne.n	8001370 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4798      	blx	r3
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001354:	bf00      	nop
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001368:	d9f5      	bls.n	8001356 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001370:	693b      	ldr	r3, [r7, #16]
 }
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	2101      	movs	r1, #1
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	da02      	bge.n	80013a2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800139c:	f06f 0304 	mvn.w	r3, #4
 80013a0:	e06e      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	2101      	movs	r1, #1
 80013b0:	4798      	blx	r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da02      	bge.n	80013be <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013b8:	f06f 0304 	mvn.w	r3, #4
 80013bc:	e060      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013c8:	2301      	movs	r3, #1
 80013ca:	e059      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	2100      	movs	r1, #0
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da02      	bge.n	80013e8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013e2:	f06f 0304 	mvn.w	r3, #4
 80013e6:	e04b      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11b      	bne.n	800142a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <LAN8742_GetLinkState+0x90>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001406:	2302      	movs	r3, #2
 8001408:	e03a      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001414:	2303      	movs	r3, #3
 8001416:	e033      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001422:	2304      	movs	r3, #4
 8001424:	e02c      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001426:	2305      	movs	r3, #5
 8001428:	e02a      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6810      	ldr	r0, [r2, #0]
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	211f      	movs	r1, #31
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	da02      	bge.n	8001446 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001440:	f06f 0304 	mvn.w	r3, #4
 8001444:	e01c      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001450:	2306      	movs	r3, #6
 8001452:	e015      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	2b18      	cmp	r3, #24
 800145c:	d101      	bne.n	8001462 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800145e:	2302      	movs	r3, #2
 8001460:	e00e      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f003 031c 	and.w	r3, r3, #28
 8001468:	2b08      	cmp	r3, #8
 800146a:	d101      	bne.n	8001470 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800146c:	2303      	movs	r3, #3
 800146e:	e007      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 031c 	and.w	r3, r3, #28
 8001476:	2b14      	cmp	r3, #20
 8001478:	d101      	bne.n	800147e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800147a:	2304      	movs	r3, #4
 800147c:	e000      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800147e:	2305      	movs	r3, #5
    }				
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f945 	bl	800171e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f002 ff8c 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8001498:	4601      	mov	r1, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <HAL_Init+0x6c>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fc12 	bl	8000cfc <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fbed 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	0801abc0 	.word	0x0801abc0
 80014f8:	20000004 	.word	0x20000004
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c
 8001524:	200046dc 	.word	0x200046dc

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200046dc 	.word	0x200046dc

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_Delay+0x40>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000000c 	.word	0x2000000c

08001584 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetREVID+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c1b      	lsrs	r3, r3, #16
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	5c001000 	.word	0x5c001000

0800159c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000400 	.word	0x58000400

080015c4 <__NVIC_SetPriorityGrouping>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <__NVIC_SetPriorityGrouping+0x40>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x40>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	05fa0000 	.word	0x05fa0000

0800160c <__NVIC_GetPriorityGrouping>:
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff4c 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001742:	f7ff ff63 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001746:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7ff ffb3 	bl	80016b8 <NVIC_EncodePriority>
 8001752:	4602      	mov	r2, r0
 8001754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff82 	bl	8001664 <__NVIC_SetPriority>
}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff56 	bl	8001628 <__NVIC_EnableIRQ>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0c6      	b.n	8001924 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f007 fcd2 	bl	8009148 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2223      	movs	r2, #35	; 0x23
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <HAL_ETH_Init+0x1a8>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b0:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_ETH_Init+0x1a8>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_ETH_Init+0x1a8>)
 80017bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7a1b      	ldrb	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fee3 	bl	800159c <HAL_SYSCFG_ETHInterfaceSelect>
 80017d6:	e003      	b.n	80017e0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017dc:	f7ff fede 	bl	800159c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f8:	f7ff fe96 	bl	8001528 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017fe:	e00f      	b.n	8001820 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001800:	f7ff fe92 	bl	8001528 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800180e:	d907      	bls.n	8001820 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	22e0      	movs	r2, #224	; 0xe0
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e081      	b.n	8001924 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e6      	bne.n	8001800 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f001 f934 	bl	8002aa0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001838:	f002 ff2c 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_ETH_Init+0x1ac>)
 8001840:	fba3 2302 	umull	r2, r3, r3, r2
 8001844:	0c9a      	lsrs	r2, r3, #18
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3a01      	subs	r2, #1
 800184c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 f887 	bl	8002964 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800186c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001870:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	22e0      	movs	r2, #224	; 0xe0
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e04a      	b.n	8001924 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f241 1308 	movw	r3, #4360	; 0x1108
 8001896:	4413      	add	r3, r2
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_ETH_Init+0x1b0>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6952      	ldr	r2, [r2, #20]
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	6809      	ldr	r1, [r1, #0]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80018ae:	440b      	add	r3, r1
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f001 f94c 	bl	8002b50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f001 f990 	bl	8002bde <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	3305      	adds	r3, #5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021a      	lsls	r2, r3, #8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3303      	adds	r3, #3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	3302      	adds	r3, #2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800190a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800190c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2210      	movs	r2, #16
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2210      	movs	r2, #16
 8001920:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	431bde83 	.word	0x431bde83
 8001934:	ffff8001 	.word	0xffff8001

08001938 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	330a      	adds	r3, #10
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_ETH_DescAssignMemory+0x28>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d904      	bls.n	800196a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e021      	b.n	80019ae <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b087      	sub	sp, #28
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	330a      	adds	r3, #10
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d17d      	bne.n	8001ad8 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2223      	movs	r2, #35	; 0x23
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e018      	b.n	8001a1a <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d902      	bls.n	8001a06 <HAL_ETH_Start_IT+0x4c>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3b04      	subs	r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	330a      	adds	r3, #10
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3301      	adds	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d9e3      	bls.n	80019e8 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0202 	orr.w	r2, r2, #2
 8001a34:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a62:	4413      	add	r3, r2
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a72:	440b      	add	r3, r1
 8001a74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a8e:	440b      	add	r3, r1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001aa4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001aa8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2210      	movs	r2, #16
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2222      	movs	r2, #34	; 0x22
 8001ab4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f241 1334 	movw	r3, #4404	; 0x1134
 8001abe:	4413      	add	r3, r2
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6811      	ldr	r1, [r2, #0]
 8001ac6:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001aca:	431a      	orrs	r2, r3
 8001acc:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ad0:	440b      	add	r3, r1
 8001ad2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e076      	b.n	8001bf6 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d171      	bne.n	8001bf4 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b10:	2200      	movs	r2, #0
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f001 f8bf 	bl	8002c98 <ETH_Prepare_Tx_Descriptors>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	f043 0202 	orr.w	r2, r3, #2
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e062      	b.n	8001bf6 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3206      	adds	r2, #6
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d904      	bls.n	8001b5a <HAL_ETH_Transmit+0x74>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	1f1a      	subs	r2, r3, #4
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	3106      	adds	r1, #6
 8001b66:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001b6a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001b6e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001b70:	f7ff fcda 	bl	8001528 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001b76:	e034      	b.n	8001be2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	f043 0208 	orr.w	r2, r3, #8
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	22e0      	movs	r2, #224	; 0xe0
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e023      	b.n	8001bf6 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d015      	beq.n	8001be2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff fcb7 	bl	8001528 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <HAL_ETH_Transmit+0xe6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2210      	movs	r2, #16
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e009      	b.n	8001bf6 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dbc6      	blt.n	8001b78 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2210      	movs	r2, #16
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
  }
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b089      	sub	sp, #36	; 0x24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	332c      	adds	r3, #44	; 0x2c
 8001c0a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06b      	beq.n	8001d08 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e0bc      	b.n	8001dae <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d902      	bls.n	8001c68 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b04      	subs	r3, #4
 8001c66:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db11      	blt.n	8001c9e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d902      	bls.n	8001c9e <HAL_ETH_IsRxDataAvailable+0xa0>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07c      	b.n	8001dae <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d012      	beq.n	8001ce6 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d902      	bls.n	8001cda <HAL_ETH_IsRxDataAvailable+0xdc>
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e010      	b.n	8001d08 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d902      	bls.n	8001cfe <HAL_ETH_IsRxDataAvailable+0x100>
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db02      	blt.n	8001d16 <HAL_ETH_IsRxDataAvailable+0x118>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d98e      	bls.n	8001c34 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d044      	beq.n	8001da6 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e036      	b.n	8001d9e <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d3e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d902      	bls.n	8001d8e <HAL_ETH_IsRxDataAvailable+0x190>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d3c4      	bcc.n	8001d30 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]

  return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08a      	sub	sp, #40	; 0x28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	332c      	adds	r3, #44	; 0x2c
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07d      	b.n	8001eee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff feff 	bl	8001bfe <HAL_ETH_IsRxDataAvailable>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e071      	b.n	8001eee <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	e031      	b.n	8001e84 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	461a      	mov	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	461a      	mov	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e5a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3301      	adds	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d902      	bls.n	8001e6e <HAL_ETH_GetRxDataBuffer+0xb4>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	3301      	adds	r3, #1
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3c7      	bcc.n	8001e20 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d803      	bhi.n	8001eba <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	e018      	b.n	8001eec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	1ad2      	subs	r2, r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e001      	b.n	8001eec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	332c      	adds	r3, #44	; 0x2c
 8001f04:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fe72 	bl	8001bfe <HAL_ETH_IsRxDataAvailable>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e017      	b.n	8001f54 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d902      	bls.n	8001f3c <HAL_ETH_GetRxDataLength+0x46>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3b04      	subs	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	332c      	adds	r3, #44	; 0x2c
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e055      	b.n	8002038 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	e03c      	b.n	800201a <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fae:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d20d      	bcs.n	8002014 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d902      	bls.n	800200a <HAL_ETH_BuildRxDescriptors+0xae>
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3b04      	subs	r3, #4
 8002008:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	429a      	cmp	r2, r3
 8002020:	d3be      	bcc.n	8001fa0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	f241 1328 	movw	r3, #4392	; 0x1128
 800202c:	440b      	add	r3, r1
 800202e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e03e      	b.n	80020e4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	055b      	lsls	r3, r3, #21
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f043 030c 	orr.w	r3, r3, #12
 8002092:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80020a6:	f7ff fa3f 	bl	8001528 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020ac:	e009      	b.n	80020c2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80020ae:	f7ff fa3b 	bl	8001528 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020bc:	d901      	bls.n	80020c2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e010      	b.n	80020e4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ed      	bne.n	80020ae <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e03c      	b.n	8002188 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002116:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	055b      	lsls	r3, r3, #21
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 030c 	bic.w	r3, r3, #12
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_ETH_WritePHYRegister+0xa4>)
 800214e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002152:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <HAL_ETH_WritePHYRegister+0xa4>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800215a:	f7ff f9e5 	bl	8001528 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002160:	e009      	b.n	8002176 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002162:	f7ff f9e1 	bl	8001528 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002170:	d901      	bls.n	8002176 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e008      	b.n	8002188 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ed      	bne.n	8002162 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40028000 	.word	0x40028000

08002194 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e1c3      	b.n	8002530 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0e5b      	lsrs	r3, r3, #25
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b29a      	uxth	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80024bc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024cc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00a      	b.n	8002566 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	2b10      	cmp	r3, #16
 8002556:	d105      	bne.n	8002564 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f860 	bl	8002620 <ETH_SetMACConfig>

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002580:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002588:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800258a:	f002 f883 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 800258e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d908      	bls.n	80025aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d804      	bhi.n	80025aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e027      	b.n	80025fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d908      	bls.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d804      	bhi.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e01a      	b.n	80025fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d903      	bls.n	80025d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d911      	bls.n	80025f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d908      	bls.n	80025ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_ETH_SetMDIOClockRange+0xac>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d804      	bhi.n	80025ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e005      	b.n	80025fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e000      	b.n	80025fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	01312cff 	.word	0x01312cff
 8002610:	02160ebf 	.word	0x02160ebf
 8002614:	039386ff 	.word	0x039386ff
 8002618:	05f5e0ff 	.word	0x05f5e0ff
 800261c:	08f0d17f 	.word	0x08f0d17f

08002620 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002632:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800263a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	7b1b      	ldrb	r3, [r3, #12]
 8002640:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002642:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	7b5b      	ldrb	r3, [r3, #13]
 8002648:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800264a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	7b9b      	ldrb	r3, [r3, #14]
 8002650:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002652:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	7bdb      	ldrb	r3, [r3, #15]
 8002658:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800265a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	7c12      	ldrb	r2, [r2, #16]
 8002660:	2a00      	cmp	r2, #0
 8002662:	d102      	bne.n	800266a <ETH_SetMACConfig+0x4a>
 8002664:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002668:	e000      	b.n	800266c <ETH_SetMACConfig+0x4c>
 800266a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800266c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	7c52      	ldrb	r2, [r2, #17]
 8002672:	2a00      	cmp	r2, #0
 8002674:	d102      	bne.n	800267c <ETH_SetMACConfig+0x5c>
 8002676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800267a:	e000      	b.n	800267e <ETH_SetMACConfig+0x5e>
 800267c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800267e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7c9b      	ldrb	r3, [r3, #18]
 8002684:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002686:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800268c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002692:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800269a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	7f5b      	ldrb	r3, [r3, #29]
 80026a0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80026a2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	7f92      	ldrb	r2, [r2, #30]
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d102      	bne.n	80026b2 <ETH_SetMACConfig+0x92>
 80026ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0x94>
 80026b2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80026b4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	7fdb      	ldrb	r3, [r3, #31]
 80026ba:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026bc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d102      	bne.n	80026ce <ETH_SetMACConfig+0xae>
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	e000      	b.n	80026d0 <ETH_SetMACConfig+0xb0>
 80026ce:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80026d0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80026d6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026de:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80026e0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <ETH_SetMACConfig+0x22c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800270c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002714:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002716:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800271e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002720:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002728:	2a00      	cmp	r2, #0
 800272a:	d102      	bne.n	8002732 <ETH_SetMACConfig+0x112>
 800272c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002730:	e000      	b.n	8002734 <ETH_SetMACConfig+0x114>
 8002732:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002734:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <ETH_SetMACConfig+0x230>)
 8002746:	4013      	ands	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	430b      	orrs	r3, r1
 8002750:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <ETH_SetMACConfig+0x234>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	430b      	orrs	r3, r1
 8002774:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800277c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002782:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800278a:	2a00      	cmp	r2, #0
 800278c:	d101      	bne.n	8002792 <ETH_SetMACConfig+0x172>
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	e000      	b.n	8002794 <ETH_SetMACConfig+0x174>
 8002792:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002794:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027aa:	4013      	ands	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80027c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f023 0103 	bic.w	r1, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	430a      	orrs	r2, r1
 80027de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80027ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002806:	2a00      	cmp	r2, #0
 8002808:	d101      	bne.n	800280e <ETH_SetMACConfig+0x1ee>
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	e000      	b.n	8002810 <ETH_SetMACConfig+0x1f0>
 800280e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002810:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002818:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800281a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002822:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002830:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	430a      	orrs	r2, r1
 800283c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	00048083 	.word	0x00048083
 8002850:	c0f88000 	.word	0xc0f88000
 8002854:	fffffef0 	.word	0xfffffef0

08002858 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b38      	ldr	r3, [pc, #224]	; (8002950 <ETH_SetDMAConfig+0xf8>)
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	6809      	ldr	r1, [r1, #0]
 8002878:	431a      	orrs	r2, r3
 800287a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800287e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	791b      	ldrb	r3, [r3, #4]
 8002884:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800288a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	7b1b      	ldrb	r3, [r3, #12]
 8002890:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f241 0304 	movw	r3, #4100	; 0x1004
 800289e:	4413      	add	r3, r2
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <ETH_SetDMAConfig+0xfc>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6811      	ldr	r1, [r2, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80028b2:	440b      	add	r3, r1
 80028b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
 80028ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <ETH_SetDMAConfig+0x100>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	431a      	orrs	r2, r3
 80028da:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80028de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	7d1b      	ldrb	r3, [r3, #20]
 80028e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7f5b      	ldrb	r3, [r3, #29]
 80028f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80028fe:	4413      	add	r3, r2
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <ETH_SetDMAConfig+0x104>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6811      	ldr	r1, [r2, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	431a      	orrs	r2, r3
 800290e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002912:	440b      	add	r3, r1
 8002914:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7f1b      	ldrb	r3, [r3, #28]
 800291a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f241 1308 	movw	r3, #4360	; 0x1108
 800292c:	4413      	add	r3, r2
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <ETH_SetDMAConfig+0x108>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6811      	ldr	r1, [r2, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	431a      	orrs	r2, r3
 800293c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002940:	440b      	add	r3, r1
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	ffff87fd 	.word	0xffff87fd
 8002954:	ffff2ffe 	.word	0xffff2ffe
 8002958:	fffec000 	.word	0xfffec000
 800295c:	ffc0efef 	.word	0xffc0efef
 8002960:	7fc0ffff 	.word	0x7fc0ffff

08002964 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0a4      	sub	sp, #144	; 0x90
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002972:	2300      	movs	r3, #0
 8002974:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80029c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029de:	2300      	movs	r3, #0
 80029e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029e6:	2300      	movs	r3, #0
 80029e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029fc:	2320      	movs	r3, #32
 80029fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fde6 	bl	8002620 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002a84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fee1 	bl	8002858 <ETH_SetDMAConfig>
}
 8002a96:	bf00      	nop
 8002a98:	3790      	adds	r7, #144	; 0x90
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002aba:	f001 fdeb 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8002abe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d908      	bls.n	8002ada <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d804      	bhi.n	8002ada <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e027      	b.n	8002b2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d908      	bls.n	8002af4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d804      	bhi.n	8002af4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e01a      	b.n	8002b2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d903      	bls.n	8002b04 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d911      	bls.n	8002b28 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d908      	bls.n	8002b1e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d804      	bhi.n	8002b1e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e005      	b.n	8002b2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e000      	b.n	8002b2a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002b28:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	01312cff 	.word	0x01312cff
 8002b40:	02160ebf 	.word	0x02160ebf
 8002b44:	039386ff 	.word	0x039386ff
 8002b48:	05f5e0ff 	.word	0x05f5e0ff
 8002b4c:	08f0d17f 	.word	0x08f0d17f

08002b50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e01d      	b.n	8002b9a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	3206      	adds	r2, #6
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d9de      	bls.n	8002b5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f241 132c 	movw	r3, #4396	; 0x112c
 8002bae:	4413      	add	r3, r2
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68d9      	ldr	r1, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f241 1314 	movw	r3, #4372	; 0x1114
 8002bc0:	4413      	add	r3, r2
 8002bc2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e024      	b.n	8002c36 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6919      	ldr	r1, [r3, #16]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	330a      	adds	r3, #10
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d9d7      	bls.n	8002bec <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002c62:	4413      	add	r3, r2
 8002c64:	2203      	movs	r2, #3
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6919      	ldr	r1, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f241 131c 	movw	r3, #4380	; 0x111c
 8002c74:	4413      	add	r3, r2
 8002c76:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f241 1328 	movw	r3, #4392	; 0x1128
 8002c88:	4413      	add	r3, r2
 8002c8a:	6019      	str	r1, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b08d      	sub	sp, #52	; 0x34
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd6:	d101      	bne.n	8002cdc <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e223      	b.n	8003124 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d044      	beq.n	8002d72 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d027      	beq.n	8002d72 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d60:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d70:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <ETH_Prepare_Tx_Descriptors+0x224>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	6992      	ldr	r2, [r2, #24]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <ETH_Prepare_Tx_Descriptors+0x11c>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d030      	beq.n	8002e16 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	3301      	adds	r3, #1
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d902      	bls.n	8002dde <ETH_Prepare_Tx_Descriptors+0x146>
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	3301      	adds	r3, #1
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dfa:	d10c      	bne.n	8002e16 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e186      	b.n	8003124 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	3301      	adds	r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <ETH_Prepare_Tx_Descriptors+0x224>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	0412      	lsls	r2, r2, #16
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e008      	b.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d021      	beq.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	04db      	lsls	r3, r3, #19
 8002e92:	431a      	orrs	r2, r3
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	69d2      	ldr	r2, [r2, #28]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e02e      	b.n	8002f16 <ETH_Prepare_Tx_Descriptors+0x27e>
 8002eb8:	ffff0000 	.word	0xffff0000
 8002ebc:	ffffc000 	.word	0xffffc000
 8002ec0:	c000ffff 	.word	0xc000ffff
 8002ec4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4b98      	ldr	r3, [pc, #608]	; (8003130 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	6852      	ldr	r2, [r2, #4]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80c0 	beq.w	80030e6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f78:	e0b5      	b.n	80030e6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	3301      	adds	r3, #1
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d902      	bls.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x300>
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	3b04      	subs	r3, #4
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fba:	d126      	bne.n	800300a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e016      	b.n	8002ffe <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	3301      	adds	r3, #1
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d902      	bls.n	8002fee <ETH_Prepare_Tx_Descriptors+0x356>
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	3b04      	subs	r3, #4
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	429a      	cmp	r2, r3
 8003004:	d3e4      	bcc.n	8002fd0 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e08c      	b.n	8003124 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	3301      	adds	r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003026:	4013      	ands	r3, r2
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	6852      	ldr	r2, [r2, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003050:	4013      	ands	r3, r2
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	6852      	ldr	r2, [r2, #4]
 8003056:	0412      	lsls	r2, r2, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	e008      	b.n	8003072 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800306c:	4013      	ands	r3, r2
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00f      	beq.n	800309e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003084:	4013      	ands	r3, r2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	69d2      	ldr	r2, [r2, #28]
 800308a:	431a      	orrs	r2, r3
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	e017      	b.n	80030ce <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <ETH_Prepare_Tx_Descriptors+0x498>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	6852      	ldr	r2, [r2, #4]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f47f af45 	bne.w	8002f7a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e005      	b.n	8003110 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003120:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3734      	adds	r7, #52	; 0x34
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	ffff8000 	.word	0xffff8000
 8003134:	ffffc000 	.word	0xffffc000
 8003138:	c000ffff 	.word	0xc000ffff
 800313c:	fffc0000 	.word	0xfffc0000

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_GPIO_Init+0x234>)
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003152:	e194      	b.n	800347e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8186 	beq.w	8003478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d00b      	beq.n	800318c <HAL_GPIO_Init+0x4c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003180:	2b11      	cmp	r3, #17
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b12      	cmp	r3, #18
 800318a:	d130      	bne.n	80031ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c2:	2201      	movs	r2, #1
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0201 	and.w	r2, r3, #1
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0xee>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b12      	cmp	r3, #18
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80e0 	beq.w	8003478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_GPIO_Init+0x238>)
 80032ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032be:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <HAL_GPIO_Init+0x238>)
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_GPIO_Init+0x238>)
 80032ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a29      	ldr	r2, [pc, #164]	; (800337c <HAL_GPIO_Init+0x23c>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_GPIO_Init+0x240>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d052      	beq.n	80033a8 <HAL_GPIO_Init+0x268>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_GPIO_Init+0x244>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d031      	beq.n	800336e <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_GPIO_Init+0x248>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x22a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <HAL_GPIO_Init+0x24c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_GPIO_Init+0x250>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_GPIO_Init+0x254>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_GPIO_Init+0x258>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_GPIO_Init+0x25c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_GPIO_Init+0x260>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_GPIO_Init+0x264>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x20e>
 800334a:	2309      	movs	r3, #9
 800334c:	e02d      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800334e:	230a      	movs	r3, #10
 8003350:	e02b      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003352:	2308      	movs	r3, #8
 8003354:	e029      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003356:	2307      	movs	r3, #7
 8003358:	e027      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800335a:	2306      	movs	r3, #6
 800335c:	e025      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800335e:	2305      	movs	r3, #5
 8003360:	e023      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003362:	2304      	movs	r3, #4
 8003364:	e021      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003366:	2303      	movs	r3, #3
 8003368:	e01f      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800336a:	2302      	movs	r3, #2
 800336c:	e01d      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800336e:	2301      	movs	r3, #1
 8003370:	e01b      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003372:	bf00      	nop
 8003374:	58000080 	.word	0x58000080
 8003378:	58024400 	.word	0x58024400
 800337c:	58000400 	.word	0x58000400
 8003380:	58020000 	.word	0x58020000
 8003384:	58020400 	.word	0x58020400
 8003388:	58020800 	.word	0x58020800
 800338c:	58020c00 	.word	0x58020c00
 8003390:	58021000 	.word	0x58021000
 8003394:	58021400 	.word	0x58021400
 8003398:	58021800 	.word	0x58021800
 800339c:	58021c00 	.word	0x58021c00
 80033a0:	58022000 	.word	0x58022000
 80033a4:	58022400 	.word	0x58022400
 80033a8:	2300      	movs	r3, #0
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	4093      	lsls	r3, r2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ba:	4938      	ldr	r1, [pc, #224]	; (800349c <HAL_GPIO_Init+0x35c>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f ae63 	bne.w	8003154 <HAL_GPIO_Init+0x14>
  }
}
 800348e:	bf00      	nop
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	58000400 	.word	0x58000400

080034a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034b0:	787b      	ldrb	r3, [r7, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034bc:	e003      	b.n	80034c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80034dc:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_HSEM_FastTake+0x2c>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3320      	adds	r3, #32
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_HSEM_FastTake+0x30>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	58026400 	.word	0x58026400
 8003504:	80000300 	.word	0x80000300

08003508 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003512:	4906      	ldr	r1, [pc, #24]	; (800352c <HAL_HSEM_Release+0x24>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	58026400 	.word	0x58026400

08003530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b08f      	sub	sp, #60	; 0x3c
 8003534:	af0a      	add	r7, sp, #40	; 0x28
 8003536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e116      	b.n	8003770 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd fdb1 	bl	80010c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f005 fb2d 	bl	8008be0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	687e      	ldr	r6, [r7, #4]
 800358e:	466d      	mov	r5, sp
 8003590:	f106 0410 	add.w	r4, r6, #16
 8003594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a4:	1d33      	adds	r3, r6, #4
 80035a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f005 fab7 	bl	8008b1c <USB_CoreInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d7      	b.n	8003770 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f005 fb1b 	bl	8008c02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e04a      	b.n	8003668 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	333d      	adds	r3, #61	; 0x3d
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	333c      	adds	r3, #60	; 0x3c
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	b298      	uxth	r0, r3
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3342      	adds	r3, #66	; 0x42
 800360e:	4602      	mov	r2, r0
 8003610:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	333f      	adds	r3, #63	; 0x3f
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3344      	adds	r3, #68	; 0x44
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3348      	adds	r3, #72	; 0x48
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3350      	adds	r3, #80	; 0x50
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3301      	adds	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d3af      	bcc.n	80035d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e044      	b.n	8003702 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3b5      	bcc.n	8003678 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	687e      	ldr	r6, [r7, #4]
 8003714:	466d      	mov	r5, sp
 8003716:	f106 0410 	add.w	r4, r6, #16
 800371a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003726:	e885 0003 	stmia.w	r5, {r0, r1}
 800372a:	1d33      	adds	r3, r6, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	6838      	ldr	r0, [r7, #0]
 8003730:	f005 fa92 	bl	8008c58 <USB_DevInit>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e014      	b.n	8003770 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f80a 	bl	8003778 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f005 fc34 	bl	8008fd6 <USB_DevDisconnect>

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003778 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_PCDEx_ActivateLPM+0x44>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	10000003 	.word	0x10000003

080037c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d00a      	beq.n	80037ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e040      	b.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e03e      	b.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037f2:	491f      	ldr	r1, [pc, #124]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037fa:	f7fd fe95 	bl	8001528 <HAL_GetTick>
 80037fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003802:	f7fd fe91 	bl	8001528 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003810:	d901      	bls.n	8003816 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e028      	b.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d1ee      	bne.n	8003802 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b1e      	cmp	r3, #30
 8003828:	d008      	beq.n	800383c <HAL_PWREx_ConfigSupply+0x7c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b2e      	cmp	r3, #46	; 0x2e
 800382e:	d005      	beq.n	800383c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b1d      	cmp	r3, #29
 8003834:	d002      	beq.n	800383c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b2d      	cmp	r3, #45	; 0x2d
 800383a:	d114      	bne.n	8003866 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800383c:	f7fd fe74 	bl	8001528 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003842:	e009      	b.n	8003858 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003844:	f7fd fe70 	bl	8001528 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003852:	d901      	bls.n	8003858 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_PWREx_ConfigSupply+0xb0>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d1ee      	bne.n	8003844 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	58024800 	.word	0x58024800

08003874 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	58024800 	.word	0x58024800

08003894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	; 0x30
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e3c4      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8087 	beq.w	80039c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b4:	4ba2      	ldr	r3, [pc, #648]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038be:	4ba0      	ldr	r3, [pc, #640]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d007      	beq.n	80038da <HAL_RCC_OscConfig+0x46>
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	2b18      	cmp	r3, #24
 80038ce:	d110      	bne.n	80038f2 <HAL_RCC_OscConfig+0x5e>
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d10b      	bne.n	80038f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038da:	4b99      	ldr	r3, [pc, #612]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d06c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x12c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d168      	bne.n	80039c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e39e      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x76>
 80038fc:	4b90      	ldr	r3, [pc, #576]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a8f      	ldr	r2, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e02e      	b.n	8003968 <HAL_RCC_OscConfig+0xd4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a8a      	ldr	r2, [pc, #552]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a87      	ldr	r2, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e01d      	b.n	8003968 <HAL_RCC_OscConfig+0xd4>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0xbc>
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a81      	ldr	r2, [pc, #516]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b7f      	ldr	r3, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0xd4>
 8003950:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a77      	ldr	r2, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd fdda 	bl	8001528 <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7fd fdd6 	bl	8001528 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e352      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0xe4>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fdc6 	bl	8001528 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd fdc2 	bl	8001528 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e33e      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x10c>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8092 	beq.w	8003af4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d0:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039da:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_RCC_OscConfig+0x162>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	2b18      	cmp	r3, #24
 80039ea:	d12d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1b4>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d128      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f6:	4b52      	ldr	r3, [pc, #328]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x17a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e310      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	f7fd fdb9 	bl	8001584 <HAL_GetREVID>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d80a      	bhi.n	8003a32 <HAL_RCC_OscConfig+0x19e>
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	4945      	ldr	r1, [pc, #276]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	e060      	b.n	8003af4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	493f      	ldr	r1, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a46:	e055      	b.n	8003af4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d038      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 0219 	bic.w	r2, r3, #25
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4938      	ldr	r1, [pc, #224]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fd61 	bl	8001528 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd fd5d 	bl	8001528 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e2d9      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a7c:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	f7fd fd7c 	bl	8001584 <HAL_GetREVID>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d80a      	bhi.n	8003aac <HAL_RCC_OscConfig+0x218>
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	031b      	lsls	r3, r3, #12
 8003aa4:	4926      	ldr	r1, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 8003aaa:	e023      	b.n	8003af4 <HAL_RCC_OscConfig+0x260>
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	4921      	ldr	r1, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fd2b 	bl	8001528 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fd27 	bl	8001528 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e2a3      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae8:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8091 	beq.w	8003c24 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d007      	beq.n	8003b28 <HAL_RCC_OscConfig+0x294>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b18      	cmp	r3, #24
 8003b1c:	d12f      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d12a      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2b0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e277      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
 8003b40:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b44:	f7fd fd1e 	bl	8001584 <HAL_GetREVID>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d80a      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x2d4>
 8003b52:	4ba2      	ldr	r3, [pc, #648]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	069b      	lsls	r3, r3, #26
 8003b60:	499e      	ldr	r1, [pc, #632]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b66:	e05d      	b.n	8003c24 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b68:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	4999      	ldr	r1, [pc, #612]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b7c:	e052      	b.n	8003c24 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d035      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b86:	4b95      	ldr	r3, [pc, #596]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a94      	ldr	r2, [pc, #592]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fd fcc9 	bl	8001528 <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b9a:	f7fd fcc5 	bl	8001528 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e241      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bac:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bb8:	f7fd fce4 	bl	8001584 <HAL_GetREVID>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f241 0303 	movw	r3, #4099	; 0x1003
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d80a      	bhi.n	8003bdc <HAL_RCC_OscConfig+0x348>
 8003bc6:	4b85      	ldr	r3, [pc, #532]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	069b      	lsls	r3, r3, #26
 8003bd4:	4981      	ldr	r1, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
 8003bda:	e023      	b.n	8003c24 <HAL_RCC_OscConfig+0x390>
 8003bdc:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	497c      	ldr	r1, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60cb      	str	r3, [r1, #12]
 8003bf0:	e018      	b.n	8003c24 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fc93 	bl	8001528 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c06:	f7fd fc8f 	bl	8001528 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e20b      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d036      	beq.n	8003c9e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d019      	beq.n	8003c6c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c38:	4b68      	ldr	r3, [pc, #416]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	4a67      	ldr	r2, [pc, #412]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fd fc70 	bl	8001528 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fc6c 	bl	8001528 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1e8      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x3b8>
 8003c6a:	e018      	b.n	8003c9e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6c:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	4a5a      	ldr	r2, [pc, #360]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fc56 	bl	8001528 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd fc52 	bl	8001528 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1ce      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c92:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d036      	beq.n	8003d18 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d019      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a49      	ldr	r2, [pc, #292]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fc33 	bl	8001528 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cc6:	f7fd fc2f 	bl	8001528 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1ab      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cd8:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x432>
 8003ce4:	e018      	b.n	8003d18 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fc19 	bl	8001528 <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cfa:	f7fd fc15 	bl	8001528 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e191      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d0c:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8086 	beq.w	8003e32 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCC_OscConfig+0x54c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_RCC_OscConfig+0x54c>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fbf9 	bl	8001528 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd fbf5 	bl	8001528 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b64      	cmp	r3, #100	; 0x64
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e171      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_RCC_OscConfig+0x54c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x4da>
 8003d60:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6c:	e02d      	b.n	8003dca <HAL_RCC_OscConfig+0x536>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4fc>
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	e01c      	b.n	8003dca <HAL_RCC_OscConfig+0x536>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x51e>
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e00b      	b.n	8003dca <HAL_RCC_OscConfig+0x536>
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a06      	ldr	r2, [pc, #24]	; (8003ddc <HAL_RCC_OscConfig+0x548>)
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01a      	beq.n	8003e08 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fd fba9 	bl	8001528 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd8:	e00f      	b.n	8003dfa <HAL_RCC_OscConfig+0x566>
 8003dda:	bf00      	nop
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fba0 	bl	8001528 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e11a      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfa:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ee      	beq.n	8003de4 <HAL_RCC_OscConfig+0x550>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd fb8e 	bl	8001528 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fd fb8a 	bl	8001528 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e104      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e26:	4b84      	ldr	r3, [pc, #528]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1ee      	bne.n	8003e10 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80f9 	beq.w	800402e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e3c:	4b7e      	ldr	r3, [pc, #504]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e44:	2b18      	cmp	r3, #24
 8003e46:	f000 80b4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	f040 8095 	bne.w	8003f7e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b78      	ldr	r3, [pc, #480]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a77      	ldr	r2, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fb62 	bl	8001528 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fd fb5e 	bl	8001528 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0da      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e7a:	4b6f      	ldr	r3, [pc, #444]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8a:	4b6c      	ldr	r3, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x7a8>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4967      	ldr	r1, [pc, #412]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed0:	4959      	ldr	r1, [pc, #356]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ed6:	4b58      	ldr	r3, [pc, #352]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	4a57      	ldr	r2, [pc, #348]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ee2:	4b55      	ldr	r3, [pc, #340]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee6:	4b56      	ldr	r3, [pc, #344]	; (8004040 <HAL_RCC_OscConfig+0x7ac>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	4951      	ldr	r1, [pc, #324]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ef6:	4b50      	ldr	r3, [pc, #320]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f023 020c 	bic.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	494d      	ldr	r1, [pc, #308]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f023 0202 	bic.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	4948      	ldr	r1, [pc, #288]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f1a:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a46      	ldr	r2, [pc, #280]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4b44      	ldr	r3, [pc, #272]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a43      	ldr	r2, [pc, #268]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a3d      	ldr	r2, [pc, #244]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fae7 	bl	8001528 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fae3 	bl	8001528 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e05f      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f70:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x6ca>
 8003f7c:	e057      	b.n	800402e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fd facd 	bl	8001528 <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd fac9 	bl	8001528 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e045      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
 8003fb0:	e03d      	b.n	800402e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <HAL_RCC_OscConfig+0x7a4>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d031      	beq.n	800402a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d12a      	bne.n	800402a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d122      	bne.n	800402a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d11a      	bne.n	800402a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0a5b      	lsrs	r3, r3, #9
 8003ff8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d111      	bne.n	800402a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d108      	bne.n	800402a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	0e1b      	lsrs	r3, r3, #24
 800401c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	58024400 	.word	0x58024400
 800403c:	fffffc0c 	.word	0xfffffc0c
 8004040:	ffff0007 	.word	0xffff0007

08004044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e19c      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b8a      	ldr	r3, [pc, #552]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d910      	bls.n	8004088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b87      	ldr	r3, [pc, #540]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 020f 	bic.w	r2, r3, #15
 800406e:	4985      	ldr	r1, [pc, #532]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b83      	ldr	r3, [pc, #524]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e184      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d908      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040a4:	4b78      	ldr	r3, [pc, #480]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	4975      	ldr	r1, [pc, #468]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	4b70      	ldr	r3, [pc, #448]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d908      	bls.n	80040e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	496a      	ldr	r1, [pc, #424]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	4b64      	ldr	r3, [pc, #400]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d908      	bls.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	495e      	ldr	r1, [pc, #376]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800410e:	4313      	orrs	r3, r2
 8004110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d908      	bls.n	8004140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800412e:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4953      	ldr	r1, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800413c:	4313      	orrs	r3, r2
 800413e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f023 020f 	bic.w	r2, r3, #15
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4947      	ldr	r1, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800416a:	4313      	orrs	r3, r2
 800416c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d055      	beq.n	8004226 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800417a:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4940      	ldr	r1, [pc, #256]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004194:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0f6      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ac:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0ea      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c4:	4b30      	ldr	r3, [pc, #192]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0de      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d4:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d6      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4925      	ldr	r1, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd f997 	bl	8001528 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fe:	f7fd f993 	bl	8001528 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0be      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	429a      	cmp	r2, r3
 8004224:	d1eb      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	429a      	cmp	r2, r3
 8004240:	d208      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004250:	4313      	orrs	r3, r2
 8004252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d214      	bcs.n	800428c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e086      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
 8004284:	52002000 	.word	0x52002000
 8004288:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d208      	bcs.n	80042ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042a8:	4b3c      	ldr	r3, [pc, #240]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4939      	ldr	r1, [pc, #228]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d208      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	492e      	ldr	r1, [pc, #184]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004300:	429a      	cmp	r2, r3
 8004302:	d208      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	4922      	ldr	r1, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004312:	4313      	orrs	r3, r2
 8004314:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d010      	beq.n	8004344 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800432e:	429a      	cmp	r2, r3
 8004330:	d208      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4917      	ldr	r1, [pc, #92]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004340:	4313      	orrs	r3, r2
 8004342:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004344:	f000 f834 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004348:	4601      	mov	r1, r0
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x35c>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa21 f303 	lsr.w	r3, r1, r3
 8004360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCC_ClockConfig+0x358>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <HAL_RCC_ClockConfig+0x35c>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x360>)
 800437a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x364>)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x368>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fcb8 	bl	8000cfc <HAL_InitTick>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400
 80043a0:	0801abc0 	.word	0x0801abc0
 80043a4:	20000004 	.word	0x20000004
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000008 	.word	0x20000008

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b6:	4baf      	ldr	r3, [pc, #700]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043be:	2b18      	cmp	r3, #24
 80043c0:	f200 814e 	bhi.w	8004660 <HAL_RCC_GetSysClockFreq+0x2b0>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004431 	.word	0x08004431
 80043d0:	08004661 	.word	0x08004661
 80043d4:	08004661 	.word	0x08004661
 80043d8:	08004661 	.word	0x08004661
 80043dc:	08004661 	.word	0x08004661
 80043e0:	08004661 	.word	0x08004661
 80043e4:	08004661 	.word	0x08004661
 80043e8:	08004661 	.word	0x08004661
 80043ec:	08004457 	.word	0x08004457
 80043f0:	08004661 	.word	0x08004661
 80043f4:	08004661 	.word	0x08004661
 80043f8:	08004661 	.word	0x08004661
 80043fc:	08004661 	.word	0x08004661
 8004400:	08004661 	.word	0x08004661
 8004404:	08004661 	.word	0x08004661
 8004408:	08004661 	.word	0x08004661
 800440c:	0800445d 	.word	0x0800445d
 8004410:	08004661 	.word	0x08004661
 8004414:	08004661 	.word	0x08004661
 8004418:	08004661 	.word	0x08004661
 800441c:	08004661 	.word	0x08004661
 8004420:	08004661 	.word	0x08004661
 8004424:	08004661 	.word	0x08004661
 8004428:	08004661 	.word	0x08004661
 800442c:	08004463 	.word	0x08004463
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004430:	4b90      	ldr	r3, [pc, #576]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800443c:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	4a8c      	ldr	r2, [pc, #560]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800444e:	e10a      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004450:	4b89      	ldr	r3, [pc, #548]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004452:	61bb      	str	r3, [r7, #24]
    break;
 8004454:	e107      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004456:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004458:	61bb      	str	r3, [r7, #24]
    break;
 800445a:	e104      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800445c:	4b88      	ldr	r3, [pc, #544]	; (8004680 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800445e:	61bb      	str	r3, [r7, #24]
    break;
 8004460:	e101      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004462:	4b84      	ldr	r3, [pc, #528]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800446c:	4b81      	ldr	r3, [pc, #516]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004476:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004478:	4b7e      	ldr	r3, [pc, #504]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004482:	4b7c      	ldr	r3, [pc, #496]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80da 	beq.w	800465a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d05a      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x1b2>
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d302      	bcc.n	80044b6 <HAL_RCC_GetSysClockFreq+0x106>
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d078      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80044b4:	e099      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d02d      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044c2:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	4a6a      	ldr	r2, [pc, #424]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ec:	4b61      	ldr	r3, [pc, #388]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004500:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004518:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800451c:	e087      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004528:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004688 <HAL_RCC_GetSysClockFreq+0x2d8>
 800452c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004540:	ed97 6a02 	vldr	s12, [r7, #8]
 8004544:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004560:	e065      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800468c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004574:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	ed97 6a02 	vldr	s12, [r7, #8]
 8004588:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2d4>
 800458c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a4:	e043      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004690 <HAL_RCC_GetSysClockFreq+0x2e0>
 80045b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b8:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80045cc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2d4>
 80045d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e8:	e021      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800468c <HAL_RCC_GetSysClockFreq+0x2dc>
 80045f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004610:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004628:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	0a5b      	lsrs	r3, r3, #9
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	3301      	adds	r3, #1
 800463a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004646:	edd7 6a07 	vldr	s13, [r7, #28]
 800464a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004652:	ee17 3a90 	vmov	r3, s15
 8004656:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004658:	e005      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
    break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004662:	61bb      	str	r3, [r7, #24]
    break;
 8004664:	bf00      	nop
  }

  return sysclockfreq;
 8004666:	69bb      	ldr	r3, [r7, #24]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3724      	adds	r7, #36	; 0x24
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	58024400 	.word	0x58024400
 8004678:	03d09000 	.word	0x03d09000
 800467c:	003d0900 	.word	0x003d0900
 8004680:	007a1200 	.word	0x007a1200
 8004684:	46000000 	.word	0x46000000
 8004688:	4c742400 	.word	0x4c742400
 800468c:	4a742400 	.word	0x4a742400
 8004690:	4af42400 	.word	0x4af42400

08004694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800469a:	f7ff fe89 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800469e:	4601      	mov	r1, r0
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80046ac:	5cd3      	ldrb	r3, [r2, r3]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	fa21 f303 	lsr.w	r3, r1, r3
 80046b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	fa22 f303 	lsr.w	r3, r2, r3
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_RCC_GetHCLKFreq+0x58>)
 80046d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046d2:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_GetHCLKFreq+0x58>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58024400 	.word	0x58024400
 80046e8:	0801abc0 	.word	0x0801abc0
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20000000 	.word	0x20000000

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046f8:	f7ff ffcc 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046fc:	4601      	mov	r1, r0
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_RCC_GetPCLK1Freq+0x28>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	58024400 	.word	0x58024400
 800471c:	0801abc0 	.word	0x0801abc0

08004720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004724:	f7ff ffb6 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8004728:	4601      	mov	r1, r0
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	0801abc0 	.word	0x0801abc0

0800474c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	223f      	movs	r2, #63	; 0x3f
 800475a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f003 0207 	and.w	r2, r3, #7
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_RCC_GetClockConfig+0x7c>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_GetClockConfig+0x80>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	58024400 	.word	0x58024400
 80047cc:	52002000 	.word	0x52002000

080047d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047dc:	2300      	movs	r3, #0
 80047de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d03d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f4:	d013      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d802      	bhi.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004800:	e01f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004806:	d013      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800480c:	d01c      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800480e:	e018      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004810:	4baf      	ldr	r3, [pc, #700]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4aae      	ldr	r2, [pc, #696]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800481c:	e015      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f001 f95f 	bl	8005ae8 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800482e:	e00c      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fa08 	bl	8005c4c <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004850:	4b9f      	ldr	r3, [pc, #636]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485c:	499c      	ldr	r1, [pc, #624]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800485e:	4313      	orrs	r3, r2
 8004860:	650b      	str	r3, [r1, #80]	; 0x50
 8004862:	e001      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03d      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	2b04      	cmp	r3, #4
 800487a:	d826      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004899 	.word	0x08004899
 8004888:	080048a7 	.word	0x080048a7
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048d1 	.word	0x080048d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4a8c      	ldr	r2, [pc, #560]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800489e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a4:	e015      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f91b 	bl	8005ae8 <RCCEx_PLL2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048b6:	e00c      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3324      	adds	r3, #36	; 0x24
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f9c4 	bl	8005c4c <RCCEx_PLL3_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048c8:	e003      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
      break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80048d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d8:	4b7d      	ldr	r3, [pc, #500]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	f023 0207 	bic.w	r2, r3, #7
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	497a      	ldr	r1, [pc, #488]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	650b      	str	r3, [r1, #80]	; 0x50
 80048ea:	e001      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03e      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d01c      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d804      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d00d      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004910:	e01e      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004912:	2bc0      	cmp	r3, #192	; 0xc0
 8004914:	d01f      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491a:	d01e      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800491c:	e018      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a6b      	ldr	r2, [pc, #428]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800492a:	e017      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f8d8 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800493c:	e00e      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f981 	bl	8005c4c <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800494e:	e005      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
      break;
 8004954:	e002      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800495a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	4958      	ldr	r1, [pc, #352]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004970:	4313      	orrs	r3, r2
 8004972:	650b      	str	r3, [r1, #80]	; 0x50
 8004974:	e001      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	2b00      	cmp	r3, #0
 8004984:	d044      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800498c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004990:	d01f      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004996:	d805      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a0:	d00e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80049a2:	e01f      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80049a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049a8:	d01f      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80049aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ae:	d01e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80049b0:	e018      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	4a46      	ldr	r2, [pc, #280]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049be:	e017      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f88e 	bl	8005ae8 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049d0:	e00e      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3324      	adds	r3, #36	; 0x24
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f937 	bl	8005c4c <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a04:	4932      	ldr	r1, [pc, #200]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	658b      	str	r3, [r1, #88]	; 0x58
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d044      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a26:	d01f      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a2c:	d805      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a36:	d00e      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a38:	e01f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a3e:	d01f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a44:	d01e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a46:	e018      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a48:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a54:	e017      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 f843 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a66:	e00e      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f8ec 	bl	8005c4c <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a78:	e005      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a9a:	490d      	ldr	r1, [pc, #52]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa0:	e001      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d035      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d802      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01b      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004ac2:	e017      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d018      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004acc:	e012      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4baf      	ldr	r3, [pc, #700]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4aae      	ldr	r2, [pc, #696]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fffd 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
      break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b06:	4ba3      	ldr	r3, [pc, #652]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	49a0      	ldr	r1, [pc, #640]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b18:	e001      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d042      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d01f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b38:	d805      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d00e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004b44:	e01f      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b4a:	d01f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b50:	d01e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004b52:	e018      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b54:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4a8e      	ldr	r2, [pc, #568]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b60:	e017      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 ffbd 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b72:	e00e      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f866 	bl	8005c4c <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b84:	e005      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b8c:	bf00      	nop
 8004b8e:	e000      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b98:	4b7e      	ldr	r3, [pc, #504]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	497b      	ldr	r1, [pc, #492]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8004baa:	e001      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d042      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bc4:	d01b      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bca:	d805      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d022      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bd6:	e01b      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bdc:	d01d      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be2:	d01c      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be8:	d01b      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ff78 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bfc:	e012      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3324      	adds	r3, #36	; 0x24
 8004c02:	2101      	movs	r1, #1
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 f821 	bl	8005c4c <RCCEx_PLL3_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c0e:	e009      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
      break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c16:	bf00      	nop
 8004c18:	e004      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c2a:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	4957      	ldr	r1, [pc, #348]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d044      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c58:	d01b      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5e:	d805      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d022      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c6a:	e01b      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d01d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c76:	d01c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c7c:	d01b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c7e:	e011      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff2e 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c90:	e012      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3324      	adds	r3, #36	; 0x24
 8004c96:	2101      	movs	r1, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 ffd7 	bl	8005c4c <RCCEx_PLL3_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ccc:	4931      	ldr	r1, [pc, #196]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8004cd2:	e001      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02d      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cec:	d005      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf2:	d009      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d013      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfa:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d06:	e00c      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 feea 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	4917      	ldr	r1, [pc, #92]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	650b      	str	r3, [r1, #80]	; 0x50
 8004d3a:	e001      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d035      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d81b      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004d6d 	.word	0x08004d6d
 8004d64:	08004d7b 	.word	0x08004d7b
 8004d68:	08004d99 	.word	0x08004d99
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d78:	e00f      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 feb1 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d8a:	e006      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
      break;
 8004d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004da0:	4bba      	ldr	r3, [pc, #744]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	f023 0203 	bic.w	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	49b7      	ldr	r1, [pc, #732]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004db2:	e001      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc6:	4bb2      	ldr	r3, [pc, #712]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4ab1      	ldr	r2, [pc, #708]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dd2:	f7fc fba9 	bl	8001528 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd8:	e009      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dda:	f7fc fba5 	bl	8001528 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d902      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	75fb      	strb	r3, [r7, #23]
        break;
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dee:	4ba8      	ldr	r3, [pc, #672]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0ef      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d166      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e00:	4ba2      	ldr	r3, [pc, #648]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e0a:	4053      	eors	r3, r2
 8004e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e14:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e1e:	4b9b      	ldr	r3, [pc, #620]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a9a      	ldr	r2, [pc, #616]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e2a:	4b98      	ldr	r3, [pc, #608]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a97      	ldr	r2, [pc, #604]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e36:	4a95      	ldr	r2, [pc, #596]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e46:	d115      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fc fb6e 	bl	8001528 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fc fb6a 	bl	8001528 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d902      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	75fb      	strb	r3, [r7, #23]
            break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e68:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ed      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d126      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e88:	d10d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004e8a:	4b80      	ldr	r3, [pc, #512]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e98:	0919      	lsrs	r1, r3, #4
 8004e9a:	4b7e      	ldr	r3, [pc, #504]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	497b      	ldr	r1, [pc, #492]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
 8004ea4:	e005      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004ea6:	4b79      	ldr	r3, [pc, #484]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	4a78      	ldr	r2, [pc, #480]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004eb0:	6113      	str	r3, [r2, #16]
 8004eb2:	4b76      	ldr	r3, [pc, #472]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	4972      	ldr	r1, [pc, #456]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	670b      	str	r3, [r1, #112]	; 0x70
 8004ec6:	e004      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	75bb      	strb	r3, [r7, #22]
 8004ecc:	e001      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d07d      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	2b28      	cmp	r3, #40	; 0x28
 8004ee4:	d866      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004fbb 	.word	0x08004fbb
 8004ef0:	08004fb5 	.word	0x08004fb5
 8004ef4:	08004fb5 	.word	0x08004fb5
 8004ef8:	08004fb5 	.word	0x08004fb5
 8004efc:	08004fb5 	.word	0x08004fb5
 8004f00:	08004fb5 	.word	0x08004fb5
 8004f04:	08004fb5 	.word	0x08004fb5
 8004f08:	08004fb5 	.word	0x08004fb5
 8004f0c:	08004f91 	.word	0x08004f91
 8004f10:	08004fb5 	.word	0x08004fb5
 8004f14:	08004fb5 	.word	0x08004fb5
 8004f18:	08004fb5 	.word	0x08004fb5
 8004f1c:	08004fb5 	.word	0x08004fb5
 8004f20:	08004fb5 	.word	0x08004fb5
 8004f24:	08004fb5 	.word	0x08004fb5
 8004f28:	08004fb5 	.word	0x08004fb5
 8004f2c:	08004fa3 	.word	0x08004fa3
 8004f30:	08004fb5 	.word	0x08004fb5
 8004f34:	08004fb5 	.word	0x08004fb5
 8004f38:	08004fb5 	.word	0x08004fb5
 8004f3c:	08004fb5 	.word	0x08004fb5
 8004f40:	08004fb5 	.word	0x08004fb5
 8004f44:	08004fb5 	.word	0x08004fb5
 8004f48:	08004fb5 	.word	0x08004fb5
 8004f4c:	08004fbb 	.word	0x08004fbb
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08004fb5 	.word	0x08004fb5
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fbb 	.word	0x08004fbb
 8004f70:	08004fb5 	.word	0x08004fb5
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fbb 	.word	0x08004fbb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fda6 	bl	8005ae8 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3324      	adds	r3, #36	; 0x24
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fe4f 	bl	8005c4c <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e003      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fc2:	4b32      	ldr	r3, [pc, #200]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fce:	492f      	ldr	r1, [pc, #188]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	654b      	str	r3, [r1, #84]	; 0x54
 8004fd4:	e001      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d037      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d820      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005037 	.word	0x08005037
 8004ff8:	0800500d 	.word	0x0800500d
 8004ffc:	0800501f 	.word	0x0800501f
 8005000:	08005037 	.word	0x08005037
 8005004:	08005037 	.word	0x08005037
 8005008:	08005037 	.word	0x08005037
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fd68 	bl	8005ae8 <RCCEx_PLL2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800501c:	e00c      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	2101      	movs	r1, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fe11 	bl	8005c4c <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800502e:	e003      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
      break;
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f023 0207 	bic.w	r2, r3, #7
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	4910      	ldr	r1, [pc, #64]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	654b      	str	r3, [r1, #84]	; 0x54
 8005050:	e001      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d040      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	2b05      	cmp	r3, #5
 800506a:	d827      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050c3 	.word	0x080050c3
 8005078:	08005099 	.word	0x08005099
 800507c:	080050ab 	.word	0x080050ab
 8005080:	080050c3 	.word	0x080050c3
 8005084:	080050c3 	.word	0x080050c3
 8005088:	080050c3 	.word	0x080050c3
 800508c:	58024400 	.word	0x58024400
 8005090:	58024800 	.word	0x58024800
 8005094:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	2101      	movs	r1, #1
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fd22 	bl	8005ae8 <RCCEx_PLL2_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050a8:	e00c      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fdcb 	bl	8005c4c <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
      break;
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80050c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ca:	4bb2      	ldr	r3, [pc, #712]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f023 0207 	bic.w	r2, r3, #7
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	49ae      	ldr	r1, [pc, #696]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	658b      	str	r3, [r1, #88]	; 0x58
 80050de:	e001      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d044      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d01b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80050fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005100:	d805      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d022      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800510c:	e01b      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d01d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005118:	d01c      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800511a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800511e:	d01b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005120:	e011      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fcdd 	bl	8005ae8 <RCCEx_PLL2_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005132:	e012      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fd86 	bl	8005c4c <RCCEx_PLL3_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005144:	e009      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
      break;
 800514a:	e006      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800514c:	bf00      	nop
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005150:	bf00      	nop
 8005152:	e002      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005160:	4b8c      	ldr	r3, [pc, #560]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516e:	4989      	ldr	r1, [pc, #548]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	654b      	str	r3, [r1, #84]	; 0x54
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d044      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005190:	d01b      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005196:	d805      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d022      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80051a2:	e01b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d01d      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80051aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ae:	d01c      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d01b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80051b6:	e011      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fc92 	bl	8005ae8 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051c8:	e012      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2102      	movs	r1, #2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fd3b 	bl	8005c4c <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051da:	e009      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	e006      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051e2:	bf00      	nop
 80051e4:	e004      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051e6:	bf00      	nop
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f6:	4b67      	ldr	r3, [pc, #412]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005204:	4963      	ldr	r1, [pc, #396]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	658b      	str	r3, [r1, #88]	; 0x58
 800520a:	e001      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d044      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005226:	d01b      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522c:	d805      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d022      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005238:	e01b      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523e:	d01d      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005240:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005244:	d01c      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005246:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800524a:	d01b      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800524c:	e011      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fc47 	bl	8005ae8 <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800525e:	e012      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3324      	adds	r3, #36	; 0x24
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fcf0 	bl	8005c4c <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005270:	e009      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
      break;
 8005276:	e006      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005278:	bf00      	nop
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800527c:	bf00      	nop
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800528c:	4b41      	ldr	r3, [pc, #260]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529a:	493e      	ldr	r1, [pc, #248]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	658b      	str	r3, [r1, #88]	; 0x58
 80052a0:	e001      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052bc:	d10a      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3324      	adds	r3, #36	; 0x24
 80052c2:	2102      	movs	r1, #2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fcc1 	bl	8005c4c <RCCEx_PLL3_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e2:	492c      	ldr	r1, [pc, #176]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d10a      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3324      	adds	r3, #36	; 0x24
 8005304:	2102      	movs	r1, #2
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fca0 	bl	8005c4c <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005316:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005324:	491b      	ldr	r1, [pc, #108]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d032      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d00d      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005346:	d016      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fbc8 	bl	8005ae8 <RCCEx_PLL2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800535c:	e00c      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	2102      	movs	r1, #2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fc71 	bl	8005c4c <RCCEx_PLL3_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800536e:	e003      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
      break;
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800538c:	4901      	ldr	r1, [pc, #4]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	658b      	str	r3, [r1, #88]	; 0x58
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02f      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b2:	d00c      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80053b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b8:	d015      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053be:	d10f      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c0:	4b71      	ldr	r3, [pc, #452]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a70      	ldr	r2, [pc, #448]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053cc:	e00c      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fc39 	bl	8005c4c <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80053e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ee:	4b66      	ldr	r3, [pc, #408]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fc:	4962      	ldr	r1, [pc, #392]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	654b      	str	r3, [r1, #84]	; 0x54
 8005402:	e001      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d029      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d007      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005422:	e00f      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4b58      	ldr	r3, [pc, #352]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a57      	ldr	r2, [pc, #348]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800542a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005430:	e00b      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fb55 	bl	8005ae8 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005442:	e002      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	75fb      	strb	r3, [r7, #23]
      break;
 8005448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545c:	494a      	ldr	r1, [pc, #296]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800545e:	4313      	orrs	r3, r2
 8005460:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	2102      	movs	r1, #2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fbe6 	bl	8005c4c <RCCEx_PLL3_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02f      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d00c      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80054a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a4:	d802      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80054aa:	e00d      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d00f      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80054b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b6:	d00e      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80054b8:	e006      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ba:	4b33      	ldr	r3, [pc, #204]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a32      	ldr	r2, [pc, #200]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054c6:	e007      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
      break;
 80054cc:	e004      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ea:	4927      	ldr	r1, [pc, #156]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	654b      	str	r3, [r1, #84]	; 0x54
 80054f0:	e001      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005502:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	491e      	ldr	r1, [pc, #120]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005520:	4b19      	ldr	r3, [pc, #100]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552c:	4916      	ldr	r1, [pc, #88]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	4a11      	ldr	r2, [pc, #68]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005548:	6113      	str	r3, [r2, #16]
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	da08      	bge.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	4906      	ldr	r1, [pc, #24]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005570:	4313      	orrs	r3, r2
 8005572:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005574:	7dbb      	ldrb	r3, [r7, #22]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58024400 	.word	0x58024400

0800558c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005590:	f7ff f880 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8005594:	4601      	mov	r1, r0
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80055a2:	5cd3      	ldrb	r3, [r2, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	58024400 	.word	0x58024400
 80055b4:	0801abc0 	.word	0x0801abc0

080055b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055c0:	4b9d      	ldr	r3, [pc, #628]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80055ca:	4b9b      	ldr	r3, [pc, #620]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	0b1b      	lsrs	r3, r3, #12
 80055d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055d6:	4b98      	ldr	r3, [pc, #608]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055e2:	4b95      	ldr	r3, [pc, #596]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	08db      	lsrs	r3, r3, #3
 80055e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 810a 	beq.w	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d05a      	beq.n	80056c2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800560c:	2b01      	cmp	r3, #1
 800560e:	d302      	bcc.n	8005616 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005610:	2b02      	cmp	r3, #2
 8005612:	d078      	beq.n	8005706 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005614:	e099      	b.n	800574a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005616:	4b88      	ldr	r3, [pc, #544]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02d      	beq.n	800567e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005622:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	08db      	lsrs	r3, r3, #3
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	4a83      	ldr	r2, [pc, #524]	; (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564c:	4b7a      	ldr	r3, [pc, #488]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005660:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005678:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800567c:	e087      	b.n	800578e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005688:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800568c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005690:	4b69      	ldr	r3, [pc, #420]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80056a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056c0:	e065      	b.n	800578e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80056d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d4:	4b58      	ldr	r3, [pc, #352]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80056ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005704:	e043      	b.n	800578e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800584c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005718:	4b47      	ldr	r3, [pc, #284]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005728:	ed97 6a03 	vldr	s12, [r7, #12]
 800572c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005748:	e021      	b.n	800578e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005754:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575c:	4b36      	ldr	r3, [pc, #216]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005770:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800578c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	0a5b      	lsrs	r3, r3, #9
 8005794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b4:	ee17 2a90 	vmov	r2, s15
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80057bc:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	0c1b      	lsrs	r3, r3, #16
 80057c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e2:	ee17 2a90 	vmov	r2, s15
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80057ea:	4b13      	ldr	r3, [pc, #76]	; (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	0e1b      	lsrs	r3, r3, #24
 80057f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005804:	edd7 6a07 	vldr	s13, [r7, #28]
 8005808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005810:	ee17 2a90 	vmov	r2, s15
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005818:	e008      	b.n	800582c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	3724      	adds	r7, #36	; 0x24
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	46000000 	.word	0x46000000
 8005844:	4c742400 	.word	0x4c742400
 8005848:	4a742400 	.word	0x4a742400
 800584c:	4af42400 	.word	0x4af42400

08005850 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005858:	4b9d      	ldr	r3, [pc, #628]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005862:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	0d1b      	lsrs	r3, r3, #20
 8005868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800586c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800586e:	4b98      	ldr	r3, [pc, #608]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800587a:	4b95      	ldr	r3, [pc, #596]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 810a 	beq.w	8005ab2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d05a      	beq.n	800595a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d302      	bcc.n	80058ae <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d078      	beq.n	800599e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80058ac:	e099      	b.n	80059e2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ae:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d02d      	beq.n	8005916 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ba:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	08db      	lsrs	r3, r3, #3
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	4a83      	ldr	r2, [pc, #524]	; (8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80058c6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ca:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e4:	4b7a      	ldr	r3, [pc, #488]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80058fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005910:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005914:	e087      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005920:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005928:	4b69      	ldr	r3, [pc, #420]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005938:	ed97 6a03 	vldr	s12, [r7, #12]
 800593c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005958:	e065      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596c:	4b58      	ldr	r3, [pc, #352]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005980:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005998:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599c:	e043      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80059ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b0:	4b47      	ldr	r3, [pc, #284]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80059c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059e0:	e021      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80059f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a04:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a24:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a26:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4c:	ee17 2a90 	vmov	r2, s15
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7a:	ee17 2a90 	vmov	r2, s15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	0e1b      	lsrs	r3, r3, #24
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa8:	ee17 2a90 	vmov	r2, s15
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
}
 8005ac4:	bf00      	nop
 8005ac6:	3724      	adds	r7, #36	; 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	03d09000 	.word	0x03d09000
 8005ad8:	46000000 	.word	0x46000000
 8005adc:	4c742400 	.word	0x4c742400
 8005ae0:	4a742400 	.word	0x4a742400
 8005ae4:	4af42400 	.word	0x4af42400

08005ae8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d101      	bne.n	8005b06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e099      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b06:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b12:	f7fb fd09 	bl	8001528 <HAL_GetTick>
 8005b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b1a:	f7fb fd05 	bl	8001528 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e086      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b2c:	4b45      	ldr	r3, [pc, #276]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f0      	bne.n	8005b1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b38:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	493f      	ldr	r1, [pc, #252]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	025b      	lsls	r3, r3, #9
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b7c:	4931      	ldr	r1, [pc, #196]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b82:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	492d      	ldr	r1, [pc, #180]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b94:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	f023 0220 	bic.w	r2, r3, #32
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	4928      	ldr	r1, [pc, #160]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ba6:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bac:	f023 0310 	bic.w	r3, r3, #16
 8005bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bb2:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <RCCEx_PLL2_Config+0x160>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	69d2      	ldr	r2, [r2, #28]
 8005bbe:	00d2      	lsls	r2, r2, #3
 8005bc0:	4920      	ldr	r1, [pc, #128]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	f043 0310 	orr.w	r3, r3, #16
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005be4:	e00f      	b.n	8005c06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d106      	bne.n	8005bfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bf8:	e005      	b.n	8005c06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c12:	f7fb fc89 	bl	8001528 <HAL_GetTick>
 8005c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c18:	e008      	b.n	8005c2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c1a:	f7fb fc85 	bl	8001528 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <RCCEx_PLL2_Config+0x15c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f0      	beq.n	8005c1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	58024400 	.word	0x58024400
 8005c48:	ffff0007 	.word	0xffff0007

08005c4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c5a:	4b53      	ldr	r3, [pc, #332]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d101      	bne.n	8005c6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e099      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a4e      	ldr	r2, [pc, #312]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c76:	f7fb fc57 	bl	8001528 <HAL_GetTick>
 8005c7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c7c:	e008      	b.n	8005c90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c7e:	f7fb fc53 	bl	8001528 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e086      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c90:	4b45      	ldr	r3, [pc, #276]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f0      	bne.n	8005c7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c9c:	4b42      	ldr	r3, [pc, #264]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	051b      	lsls	r3, r3, #20
 8005caa:	493f      	ldr	r1, [pc, #252]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	628b      	str	r3, [r1, #40]	; 0x28
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	025b      	lsls	r3, r3, #9
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ce0:	4931      	ldr	r1, [pc, #196]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ce6:	4b30      	ldr	r3, [pc, #192]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	492d      	ldr	r1, [pc, #180]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	4928      	ldr	r1, [pc, #160]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d0a:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <RCCEx_PLL3_Config+0x160>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	69d2      	ldr	r2, [r2, #28]
 8005d22:	00d2      	lsls	r2, r2, #3
 8005d24:	4920      	ldr	r1, [pc, #128]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d2a:	4b1f      	ldr	r3, [pc, #124]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d48:	e00f      	b.n	8005d6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d50:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d5c:	e005      	b.n	8005d6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a11      	ldr	r2, [pc, #68]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d76:	f7fb fbd7 	bl	8001528 <HAL_GetTick>
 8005d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d7c:	e008      	b.n	8005d90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d7e:	f7fb fbd3 	bl	8001528 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e006      	b.n	8005d9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <RCCEx_PLL3_Config+0x15c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400
 8005dac:	ffff0007 	.word	0xffff0007

08005db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e01d      	b.n	8005dfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f815 	bl	8005e06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f000 f986 	bl	8006100 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HAL_TIM_Base_Start_IT+0x50>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d00b      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0x42>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	00010007 	.word	0x00010007

08005e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0202 	mvn.w	r2, #2
 8005e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f905 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8f7 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f908 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0204 	mvn.w	r2, #4
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f8db 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f8cd 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8de 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0208 	mvn.w	r2, #8
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8b1 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8a3 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8b4 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d122      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0210 	mvn.w	r2, #16
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f887 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f879 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f88a 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0201 	mvn.w	r2, #1
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fa fe4c 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f914 	bl	8006248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d10e      	bne.n	800604e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d107      	bne.n	800604e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f907 	bl	800625c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d10e      	bne.n	800607a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f838 	bl	80060ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b20      	cmp	r3, #32
 8006086:	d10e      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d107      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0220 	mvn.w	r2, #32
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8c7 	bl	8006234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a40      	ldr	r2, [pc, #256]	; (8006214 <TIM_Base_SetConfig+0x114>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d00f      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3d      	ldr	r2, [pc, #244]	; (8006218 <TIM_Base_SetConfig+0x118>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00b      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3c      	ldr	r2, [pc, #240]	; (800621c <TIM_Base_SetConfig+0x11c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d007      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <TIM_Base_SetConfig+0x120>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a3a      	ldr	r2, [pc, #232]	; (8006224 <TIM_Base_SetConfig+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2f      	ldr	r2, [pc, #188]	; (8006214 <TIM_Base_SetConfig+0x114>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01f      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <TIM_Base_SetConfig+0x118>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2b      	ldr	r2, [pc, #172]	; (800621c <TIM_Base_SetConfig+0x11c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <TIM_Base_SetConfig+0x120>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a29      	ldr	r2, [pc, #164]	; (8006224 <TIM_Base_SetConfig+0x124>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a28      	ldr	r2, [pc, #160]	; (8006228 <TIM_Base_SetConfig+0x128>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a27      	ldr	r2, [pc, #156]	; (800622c <TIM_Base_SetConfig+0x12c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a26      	ldr	r2, [pc, #152]	; (8006230 <TIM_Base_SetConfig+0x130>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a10      	ldr	r2, [pc, #64]	; (8006214 <TIM_Base_SetConfig+0x114>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00f      	beq.n	80061f8 <TIM_Base_SetConfig+0xf8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a12      	ldr	r2, [pc, #72]	; (8006224 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <TIM_Base_SetConfig+0xf8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a11      	ldr	r2, [pc, #68]	; (8006228 <TIM_Base_SetConfig+0x128>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_Base_SetConfig+0xf8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a10      	ldr	r2, [pc, #64]	; (800622c <TIM_Base_SetConfig+0x12c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_Base_SetConfig+0xf8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a0f      	ldr	r2, [pc, #60]	; (8006230 <TIM_Base_SetConfig+0x130>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d103      	bne.n	8006200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	615a      	str	r2, [r3, #20]
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40010400 	.word	0x40010400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800

08006234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fa fe99 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2224      	movs	r2, #36	; 0x24
 800629e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f82c 	bl	8006310 <UART_SetConfig>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e022      	b.n	8006308 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f002 f99e 	bl	800860c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f002 fa25 	bl	8008750 <UART_CheckIdleState>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006314:	b090      	sub	sp, #64	; 0x40
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006324:	2300      	movs	r3, #0
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4313      	orrs	r3, r2
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006346:	4313      	orrs	r3, r2
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4bc1      	ldr	r3, [pc, #772]	; (8006658 <UART_SetConfig+0x348>)
 8006352:	4013      	ands	r3, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800635a:	430b      	orrs	r3, r1
 800635c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4ab7      	ldr	r2, [pc, #732]	; (800665c <UART_SetConfig+0x34c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800638a:	4313      	orrs	r3, r2
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4bb2      	ldr	r3, [pc, #712]	; (8006660 <UART_SetConfig+0x350>)
 8006396:	4013      	ands	r3, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639e:	430b      	orrs	r3, r1
 80063a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	f023 010f 	bic.w	r1, r3, #15
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4aa9      	ldr	r2, [pc, #676]	; (8006664 <UART_SetConfig+0x354>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d177      	bne.n	80064b2 <UART_SetConfig+0x1a2>
 80063c2:	4ba9      	ldr	r3, [pc, #676]	; (8006668 <UART_SetConfig+0x358>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ca:	2b28      	cmp	r3, #40	; 0x28
 80063cc:	d86c      	bhi.n	80064a8 <UART_SetConfig+0x198>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0xc4>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	08006479 	.word	0x08006479
 80063d8:	080064a9 	.word	0x080064a9
 80063dc:	080064a9 	.word	0x080064a9
 80063e0:	080064a9 	.word	0x080064a9
 80063e4:	080064a9 	.word	0x080064a9
 80063e8:	080064a9 	.word	0x080064a9
 80063ec:	080064a9 	.word	0x080064a9
 80063f0:	080064a9 	.word	0x080064a9
 80063f4:	08006481 	.word	0x08006481
 80063f8:	080064a9 	.word	0x080064a9
 80063fc:	080064a9 	.word	0x080064a9
 8006400:	080064a9 	.word	0x080064a9
 8006404:	080064a9 	.word	0x080064a9
 8006408:	080064a9 	.word	0x080064a9
 800640c:	080064a9 	.word	0x080064a9
 8006410:	080064a9 	.word	0x080064a9
 8006414:	08006489 	.word	0x08006489
 8006418:	080064a9 	.word	0x080064a9
 800641c:	080064a9 	.word	0x080064a9
 8006420:	080064a9 	.word	0x080064a9
 8006424:	080064a9 	.word	0x080064a9
 8006428:	080064a9 	.word	0x080064a9
 800642c:	080064a9 	.word	0x080064a9
 8006430:	080064a9 	.word	0x080064a9
 8006434:	08006491 	.word	0x08006491
 8006438:	080064a9 	.word	0x080064a9
 800643c:	080064a9 	.word	0x080064a9
 8006440:	080064a9 	.word	0x080064a9
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a9 	.word	0x080064a9
 800644c:	080064a9 	.word	0x080064a9
 8006450:	080064a9 	.word	0x080064a9
 8006454:	08006499 	.word	0x08006499
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064a9 	.word	0x080064a9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064a9 	.word	0x080064a9
 800646c:	080064a9 	.word	0x080064a9
 8006470:	080064a9 	.word	0x080064a9
 8006474:	080064a1 	.word	0x080064a1
 8006478:	2301      	movs	r3, #1
 800647a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800647e:	e233      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006480:	2304      	movs	r3, #4
 8006482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006486:	e22f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006488:	2308      	movs	r3, #8
 800648a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800648e:	e22b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006490:	2310      	movs	r3, #16
 8006492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006496:	e227      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006498:	2320      	movs	r3, #32
 800649a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800649e:	e223      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80064a6:	e21f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80064ae:	bf00      	nop
 80064b0:	e21a      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a6d      	ldr	r2, [pc, #436]	; (800666c <UART_SetConfig+0x35c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d132      	bne.n	8006522 <UART_SetConfig+0x212>
 80064bc:	4b6a      	ldr	r3, [pc, #424]	; (8006668 <UART_SetConfig+0x358>)
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d827      	bhi.n	8006518 <UART_SetConfig+0x208>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x1c0>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064f1 	.word	0x080064f1
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80064ee:	e1fb      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80064f6:	e1f7      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80064fe:	e1f3      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006506:	e1ef      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006508:	2320      	movs	r3, #32
 800650a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800650e:	e1eb      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006516:	e1e7      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800651e:	bf00      	nop
 8006520:	e1e2      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a52      	ldr	r2, [pc, #328]	; (8006670 <UART_SetConfig+0x360>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d132      	bne.n	8006592 <UART_SetConfig+0x282>
 800652c:	4b4e      	ldr	r3, [pc, #312]	; (8006668 <UART_SetConfig+0x358>)
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	2b05      	cmp	r3, #5
 8006536:	d827      	bhi.n	8006588 <UART_SetConfig+0x278>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x230>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006559 	.word	0x08006559
 8006544:	08006561 	.word	0x08006561
 8006548:	08006569 	.word	0x08006569
 800654c:	08006571 	.word	0x08006571
 8006550:	08006579 	.word	0x08006579
 8006554:	08006581 	.word	0x08006581
 8006558:	2300      	movs	r3, #0
 800655a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800655e:	e1c3      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006566:	e1bf      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800656e:	e1bb      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006576:	e1b7      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006578:	2320      	movs	r3, #32
 800657a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800657e:	e1b3      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006586:	e1af      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800658e:	bf00      	nop
 8006590:	e1aa      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a37      	ldr	r2, [pc, #220]	; (8006674 <UART_SetConfig+0x364>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d132      	bne.n	8006602 <UART_SetConfig+0x2f2>
 800659c:	4b32      	ldr	r3, [pc, #200]	; (8006668 <UART_SetConfig+0x358>)
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	d827      	bhi.n	80065f8 <UART_SetConfig+0x2e8>
 80065a8:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0x2a0>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	080065d9 	.word	0x080065d9
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065ce:	e18b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065d6:	e187      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065de:	e183      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065e6:	e17f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065e8:	2320      	movs	r3, #32
 80065ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065ee:	e17b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065f6:	e177      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80065fe:	bf00      	nop
 8006600:	e172      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <UART_SetConfig+0x368>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d144      	bne.n	8006696 <UART_SetConfig+0x386>
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <UART_SetConfig+0x358>)
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	2b05      	cmp	r3, #5
 8006616:	d839      	bhi.n	800668c <UART_SetConfig+0x37c>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x310>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	0800667d 	.word	0x0800667d
 8006634:	08006685 	.word	0x08006685
 8006638:	2300      	movs	r3, #0
 800663a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800663e:	e153      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006646:	e14f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800664e:	e14b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006656:	e147      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006658:	cfff69f3 	.word	0xcfff69f3
 800665c:	58000c00 	.word	0x58000c00
 8006660:	11fff4ff 	.word	0x11fff4ff
 8006664:	40011000 	.word	0x40011000
 8006668:	58024400 	.word	0x58024400
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800
 8006674:	40004c00 	.word	0x40004c00
 8006678:	40005000 	.word	0x40005000
 800667c:	2320      	movs	r3, #32
 800667e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006682:	e131      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800668a:	e12d      	b.n	80068e8 <UART_SetConfig+0x5d8>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006692:	bf00      	nop
 8006694:	e128      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4ac3      	ldr	r2, [pc, #780]	; (80069a8 <UART_SetConfig+0x698>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d178      	bne.n	8006792 <UART_SetConfig+0x482>
 80066a0:	4bc2      	ldr	r3, [pc, #776]	; (80069ac <UART_SetConfig+0x69c>)
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a8:	2b28      	cmp	r3, #40	; 0x28
 80066aa:	d86d      	bhi.n	8006788 <UART_SetConfig+0x478>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x3a4>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	08006759 	.word	0x08006759
 80066b8:	08006789 	.word	0x08006789
 80066bc:	08006789 	.word	0x08006789
 80066c0:	08006789 	.word	0x08006789
 80066c4:	08006789 	.word	0x08006789
 80066c8:	08006789 	.word	0x08006789
 80066cc:	08006789 	.word	0x08006789
 80066d0:	08006789 	.word	0x08006789
 80066d4:	08006761 	.word	0x08006761
 80066d8:	08006789 	.word	0x08006789
 80066dc:	08006789 	.word	0x08006789
 80066e0:	08006789 	.word	0x08006789
 80066e4:	08006789 	.word	0x08006789
 80066e8:	08006789 	.word	0x08006789
 80066ec:	08006789 	.word	0x08006789
 80066f0:	08006789 	.word	0x08006789
 80066f4:	08006769 	.word	0x08006769
 80066f8:	08006789 	.word	0x08006789
 80066fc:	08006789 	.word	0x08006789
 8006700:	08006789 	.word	0x08006789
 8006704:	08006789 	.word	0x08006789
 8006708:	08006789 	.word	0x08006789
 800670c:	08006789 	.word	0x08006789
 8006710:	08006789 	.word	0x08006789
 8006714:	08006771 	.word	0x08006771
 8006718:	08006789 	.word	0x08006789
 800671c:	08006789 	.word	0x08006789
 8006720:	08006789 	.word	0x08006789
 8006724:	08006789 	.word	0x08006789
 8006728:	08006789 	.word	0x08006789
 800672c:	08006789 	.word	0x08006789
 8006730:	08006789 	.word	0x08006789
 8006734:	08006779 	.word	0x08006779
 8006738:	08006789 	.word	0x08006789
 800673c:	08006789 	.word	0x08006789
 8006740:	08006789 	.word	0x08006789
 8006744:	08006789 	.word	0x08006789
 8006748:	08006789 	.word	0x08006789
 800674c:	08006789 	.word	0x08006789
 8006750:	08006789 	.word	0x08006789
 8006754:	08006781 	.word	0x08006781
 8006758:	2301      	movs	r3, #1
 800675a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800675e:	e0c3      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006766:	e0bf      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800676e:	e0bb      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006776:	e0b7      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800677e:	e0b3      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006786:	e0af      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800678e:	bf00      	nop
 8006790:	e0aa      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a86      	ldr	r2, [pc, #536]	; (80069b0 <UART_SetConfig+0x6a0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d132      	bne.n	8006802 <UART_SetConfig+0x4f2>
 800679c:	4b83      	ldr	r3, [pc, #524]	; (80069ac <UART_SetConfig+0x69c>)
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d827      	bhi.n	80067f8 <UART_SetConfig+0x4e8>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x4a0>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067d1 	.word	0x080067d1
 80067b8:	080067d9 	.word	0x080067d9
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	080067e9 	.word	0x080067e9
 80067c4:	080067f1 	.word	0x080067f1
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ce:	e08b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067d6:	e087      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067de:	e083      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067e6:	e07f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067e8:	2320      	movs	r3, #32
 80067ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ee:	e07b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067f0:	2340      	movs	r3, #64	; 0x40
 80067f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067f6:	e077      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067fe:	bf00      	nop
 8006800:	e072      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6b      	ldr	r2, [pc, #428]	; (80069b4 <UART_SetConfig+0x6a4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d132      	bne.n	8006872 <UART_SetConfig+0x562>
 800680c:	4b67      	ldr	r3, [pc, #412]	; (80069ac <UART_SetConfig+0x69c>)
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	2b05      	cmp	r3, #5
 8006816:	d827      	bhi.n	8006868 <UART_SetConfig+0x558>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0x510>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006839 	.word	0x08006839
 8006824:	08006841 	.word	0x08006841
 8006828:	08006849 	.word	0x08006849
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	2300      	movs	r3, #0
 800683a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800683e:	e053      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006846:	e04f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800684e:	e04b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006856:	e047      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006858:	2320      	movs	r3, #32
 800685a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800685e:	e043      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006866:	e03f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800686e:	bf00      	nop
 8006870:	e03a      	b.n	80068e8 <UART_SetConfig+0x5d8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a50      	ldr	r2, [pc, #320]	; (80069b8 <UART_SetConfig+0x6a8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d132      	bne.n	80068e2 <UART_SetConfig+0x5d2>
 800687c:	4b4b      	ldr	r3, [pc, #300]	; (80069ac <UART_SetConfig+0x69c>)
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	2b05      	cmp	r3, #5
 8006886:	d827      	bhi.n	80068d8 <UART_SetConfig+0x5c8>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <UART_SetConfig+0x580>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a9 	.word	0x080068a9
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068b9 	.word	0x080068b9
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	2302      	movs	r3, #2
 80068aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ae:	e01b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068b0:	2304      	movs	r3, #4
 80068b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068b6:	e017      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068b8:	2308      	movs	r3, #8
 80068ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068be:	e013      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068c0:	2310      	movs	r3, #16
 80068c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068c8:	2320      	movs	r3, #32
 80068ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ce:	e00b      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068d6:	e007      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0x5d8>
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a32      	ldr	r2, [pc, #200]	; (80069b8 <UART_SetConfig+0x6a8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 86f7 	bne.w	80076e2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	f000 80c0 	beq.w	8006a7e <UART_SetConfig+0x76e>
 80068fe:	2b08      	cmp	r3, #8
 8006900:	dc04      	bgt.n	800690c <UART_SetConfig+0x5fc>
 8006902:	2b02      	cmp	r3, #2
 8006904:	d00c      	beq.n	8006920 <UART_SetConfig+0x610>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d065      	beq.n	80069d6 <UART_SetConfig+0x6c6>
 800690a:	e27a      	b.n	8006e02 <UART_SetConfig+0xaf2>
 800690c:	2b20      	cmp	r3, #32
 800690e:	f000 81b0 	beq.w	8006c72 <UART_SetConfig+0x962>
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	f000 821e 	beq.w	8006d54 <UART_SetConfig+0xa44>
 8006918:	2b10      	cmp	r3, #16
 800691a:	f000 8104 	beq.w	8006b26 <UART_SetConfig+0x816>
 800691e:	e270      	b.n	8006e02 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006920:	f7fe fe34 	bl	800558c <HAL_RCCEx_GetD3PCLK1Freq>
 8006924:	4602      	mov	r2, r0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d04e      	beq.n	80069cc <UART_SetConfig+0x6bc>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	2b01      	cmp	r3, #1
 8006934:	d048      	beq.n	80069c8 <UART_SetConfig+0x6b8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b02      	cmp	r3, #2
 800693c:	d042      	beq.n	80069c4 <UART_SetConfig+0x6b4>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	2b03      	cmp	r3, #3
 8006944:	d03c      	beq.n	80069c0 <UART_SetConfig+0x6b0>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	2b04      	cmp	r3, #4
 800694c:	d036      	beq.n	80069bc <UART_SetConfig+0x6ac>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b05      	cmp	r3, #5
 8006954:	d026      	beq.n	80069a4 <UART_SetConfig+0x694>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	2b06      	cmp	r3, #6
 800695c:	d020      	beq.n	80069a0 <UART_SetConfig+0x690>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2b07      	cmp	r3, #7
 8006964:	d01a      	beq.n	800699c <UART_SetConfig+0x68c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b08      	cmp	r3, #8
 800696c:	d014      	beq.n	8006998 <UART_SetConfig+0x688>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b09      	cmp	r3, #9
 8006974:	d00e      	beq.n	8006994 <UART_SetConfig+0x684>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2b0a      	cmp	r3, #10
 800697c:	d008      	beq.n	8006990 <UART_SetConfig+0x680>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	2b0b      	cmp	r3, #11
 8006984:	d102      	bne.n	800698c <UART_SetConfig+0x67c>
 8006986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698a:	e020      	b.n	80069ce <UART_SetConfig+0x6be>
 800698c:	2301      	movs	r3, #1
 800698e:	e01e      	b.n	80069ce <UART_SetConfig+0x6be>
 8006990:	2380      	movs	r3, #128	; 0x80
 8006992:	e01c      	b.n	80069ce <UART_SetConfig+0x6be>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	e01a      	b.n	80069ce <UART_SetConfig+0x6be>
 8006998:	2320      	movs	r3, #32
 800699a:	e018      	b.n	80069ce <UART_SetConfig+0x6be>
 800699c:	2310      	movs	r3, #16
 800699e:	e016      	b.n	80069ce <UART_SetConfig+0x6be>
 80069a0:	230c      	movs	r3, #12
 80069a2:	e014      	b.n	80069ce <UART_SetConfig+0x6be>
 80069a4:	230a      	movs	r3, #10
 80069a6:	e012      	b.n	80069ce <UART_SetConfig+0x6be>
 80069a8:	40011400 	.word	0x40011400
 80069ac:	58024400 	.word	0x58024400
 80069b0:	40007800 	.word	0x40007800
 80069b4:	40007c00 	.word	0x40007c00
 80069b8:	58000c00 	.word	0x58000c00
 80069bc:	2308      	movs	r3, #8
 80069be:	e006      	b.n	80069ce <UART_SetConfig+0x6be>
 80069c0:	2306      	movs	r3, #6
 80069c2:	e004      	b.n	80069ce <UART_SetConfig+0x6be>
 80069c4:	2304      	movs	r3, #4
 80069c6:	e002      	b.n	80069ce <UART_SetConfig+0x6be>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e000      	b.n	80069ce <UART_SetConfig+0x6be>
 80069cc:	2301      	movs	r3, #1
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069d4:	e219      	b.n	8006e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d6:	f107 0318 	add.w	r3, r7, #24
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fdec 	bl	80055b8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d044      	beq.n	8006a74 <UART_SetConfig+0x764>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d03e      	beq.n	8006a70 <UART_SetConfig+0x760>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d038      	beq.n	8006a6c <UART_SetConfig+0x75c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d032      	beq.n	8006a68 <UART_SetConfig+0x758>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d02c      	beq.n	8006a64 <UART_SetConfig+0x754>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d026      	beq.n	8006a60 <UART_SetConfig+0x750>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d020      	beq.n	8006a5c <UART_SetConfig+0x74c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b07      	cmp	r3, #7
 8006a20:	d01a      	beq.n	8006a58 <UART_SetConfig+0x748>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d014      	beq.n	8006a54 <UART_SetConfig+0x744>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d00e      	beq.n	8006a50 <UART_SetConfig+0x740>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	2b0a      	cmp	r3, #10
 8006a38:	d008      	beq.n	8006a4c <UART_SetConfig+0x73c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	2b0b      	cmp	r3, #11
 8006a40:	d102      	bne.n	8006a48 <UART_SetConfig+0x738>
 8006a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a46:	e016      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e014      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	e012      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	e010      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a54:	2320      	movs	r3, #32
 8006a56:	e00e      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	e00c      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	e00a      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a60:	230a      	movs	r3, #10
 8006a62:	e008      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a64:	2308      	movs	r3, #8
 8006a66:	e006      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a68:	2306      	movs	r3, #6
 8006a6a:	e004      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	e002      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e000      	b.n	8006a76 <UART_SetConfig+0x766>
 8006a74:	2301      	movs	r3, #1
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7c:	e1c5      	b.n	8006e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fee4 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d044      	beq.n	8006b1c <UART_SetConfig+0x80c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d03e      	beq.n	8006b18 <UART_SetConfig+0x808>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d038      	beq.n	8006b14 <UART_SetConfig+0x804>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d032      	beq.n	8006b10 <UART_SetConfig+0x800>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d02c      	beq.n	8006b0c <UART_SetConfig+0x7fc>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d026      	beq.n	8006b08 <UART_SetConfig+0x7f8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d020      	beq.n	8006b04 <UART_SetConfig+0x7f4>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b07      	cmp	r3, #7
 8006ac8:	d01a      	beq.n	8006b00 <UART_SetConfig+0x7f0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d014      	beq.n	8006afc <UART_SetConfig+0x7ec>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	d00e      	beq.n	8006af8 <UART_SetConfig+0x7e8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	2b0a      	cmp	r3, #10
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x7e4>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	2b0b      	cmp	r3, #11
 8006ae8:	d102      	bne.n	8006af0 <UART_SetConfig+0x7e0>
 8006aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aee:	e016      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e014      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	e012      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	e010      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006afc:	2320      	movs	r3, #32
 8006afe:	e00e      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b00:	2310      	movs	r3, #16
 8006b02:	e00c      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b04:	230c      	movs	r3, #12
 8006b06:	e00a      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b08:	230a      	movs	r3, #10
 8006b0a:	e008      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	e006      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b10:	2306      	movs	r3, #6
 8006b12:	e004      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b14:	2304      	movs	r3, #4
 8006b16:	e002      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e000      	b.n	8006b1e <UART_SetConfig+0x80e>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b24:	e171      	b.n	8006e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b26:	4b7a      	ldr	r3, [pc, #488]	; (8006d10 <UART_SetConfig+0xa00>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d054      	beq.n	8006bdc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b32:	4b77      	ldr	r3, [pc, #476]	; (8006d10 <UART_SetConfig+0xa00>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	08db      	lsrs	r3, r3, #3
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	4a75      	ldr	r2, [pc, #468]	; (8006d14 <UART_SetConfig+0xa04>)
 8006b3e:	40da      	lsrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d044      	beq.n	8006bd2 <UART_SetConfig+0x8c2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d03e      	beq.n	8006bce <UART_SetConfig+0x8be>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d038      	beq.n	8006bca <UART_SetConfig+0x8ba>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d032      	beq.n	8006bc6 <UART_SetConfig+0x8b6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d02c      	beq.n	8006bc2 <UART_SetConfig+0x8b2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d026      	beq.n	8006bbe <UART_SetConfig+0x8ae>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d020      	beq.n	8006bba <UART_SetConfig+0x8aa>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d01a      	beq.n	8006bb6 <UART_SetConfig+0x8a6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d014      	beq.n	8006bb2 <UART_SetConfig+0x8a2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d00e      	beq.n	8006bae <UART_SetConfig+0x89e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b0a      	cmp	r3, #10
 8006b96:	d008      	beq.n	8006baa <UART_SetConfig+0x89a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b0b      	cmp	r3, #11
 8006b9e:	d102      	bne.n	8006ba6 <UART_SetConfig+0x896>
 8006ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ba4:	e016      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e014      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	e012      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	e010      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	e00e      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	e00c      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	e00a      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	e006      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bc6:	2306      	movs	r3, #6
 8006bc8:	e004      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bca:	2304      	movs	r3, #4
 8006bcc:	e002      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e000      	b.n	8006bd4 <UART_SetConfig+0x8c4>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006bda:	e116      	b.n	8006e0a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d043      	beq.n	8006c6c <UART_SetConfig+0x95c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d03d      	beq.n	8006c68 <UART_SetConfig+0x958>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d037      	beq.n	8006c64 <UART_SetConfig+0x954>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d031      	beq.n	8006c60 <UART_SetConfig+0x950>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d02b      	beq.n	8006c5c <UART_SetConfig+0x94c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	d025      	beq.n	8006c58 <UART_SetConfig+0x948>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	d01f      	beq.n	8006c54 <UART_SetConfig+0x944>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	d019      	beq.n	8006c50 <UART_SetConfig+0x940>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d013      	beq.n	8006c4c <UART_SetConfig+0x93c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	2b09      	cmp	r3, #9
 8006c2a:	d00d      	beq.n	8006c48 <UART_SetConfig+0x938>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	2b0a      	cmp	r3, #10
 8006c32:	d007      	beq.n	8006c44 <UART_SetConfig+0x934>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	2b0b      	cmp	r3, #11
 8006c3a:	d101      	bne.n	8006c40 <UART_SetConfig+0x930>
 8006c3c:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <UART_SetConfig+0xa08>)
 8006c3e:	e016      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c40:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <UART_SetConfig+0xa04>)
 8006c42:	e014      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c44:	4b35      	ldr	r3, [pc, #212]	; (8006d1c <UART_SetConfig+0xa0c>)
 8006c46:	e012      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c48:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <UART_SetConfig+0xa10>)
 8006c4a:	e010      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c4c:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <UART_SetConfig+0xa14>)
 8006c4e:	e00e      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c50:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <UART_SetConfig+0xa18>)
 8006c52:	e00c      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c54:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <UART_SetConfig+0xa1c>)
 8006c56:	e00a      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c58:	4b35      	ldr	r3, [pc, #212]	; (8006d30 <UART_SetConfig+0xa20>)
 8006c5a:	e008      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c5c:	4b35      	ldr	r3, [pc, #212]	; (8006d34 <UART_SetConfig+0xa24>)
 8006c5e:	e006      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <UART_SetConfig+0xa28>)
 8006c62:	e004      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <UART_SetConfig+0xa2c>)
 8006c66:	e002      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c68:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <UART_SetConfig+0xa30>)
 8006c6a:	e000      	b.n	8006c6e <UART_SetConfig+0x95e>
 8006c6c:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <UART_SetConfig+0xa04>)
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c70:	e0cb      	b.n	8006e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d046      	beq.n	8006d08 <UART_SetConfig+0x9f8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d040      	beq.n	8006d04 <UART_SetConfig+0x9f4>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d03a      	beq.n	8006d00 <UART_SetConfig+0x9f0>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d034      	beq.n	8006cfc <UART_SetConfig+0x9ec>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d02e      	beq.n	8006cf8 <UART_SetConfig+0x9e8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d028      	beq.n	8006cf4 <UART_SetConfig+0x9e4>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b06      	cmp	r3, #6
 8006ca8:	d022      	beq.n	8006cf0 <UART_SetConfig+0x9e0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b07      	cmp	r3, #7
 8006cb0:	d01c      	beq.n	8006cec <UART_SetConfig+0x9dc>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d016      	beq.n	8006ce8 <UART_SetConfig+0x9d8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d00f      	beq.n	8006ce2 <UART_SetConfig+0x9d2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b0a      	cmp	r3, #10
 8006cc8:	d008      	beq.n	8006cdc <UART_SetConfig+0x9cc>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b0b      	cmp	r3, #11
 8006cd0:	d102      	bne.n	8006cd8 <UART_SetConfig+0x9c8>
 8006cd2:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006cd6:	e018      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cd8:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <UART_SetConfig+0xa18>)
 8006cda:	e016      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cdc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006ce0:	e013      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006ce2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006ce6:	e010      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <UART_SetConfig+0xa34>)
 8006cea:	e00e      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <UART_SetConfig+0xa08>)
 8006cee:	e00c      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cf0:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <UART_SetConfig+0xa38>)
 8006cf2:	e00a      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cf4:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <UART_SetConfig+0xa3c>)
 8006cf6:	e008      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cf8:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <UART_SetConfig+0xa0c>)
 8006cfa:	e006      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006cfc:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <UART_SetConfig+0xa40>)
 8006cfe:	e004      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <UART_SetConfig+0xa10>)
 8006d02:	e002      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <UART_SetConfig+0xa14>)
 8006d06:	e000      	b.n	8006d0a <UART_SetConfig+0x9fa>
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <UART_SetConfig+0xa18>)
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d0c:	e07d      	b.n	8006e0a <UART_SetConfig+0xafa>
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	0003d090 	.word	0x0003d090
 8006d1c:	0007a120 	.word	0x0007a120
 8006d20:	000f4240 	.word	0x000f4240
 8006d24:	001e8480 	.word	0x001e8480
 8006d28:	003d0900 	.word	0x003d0900
 8006d2c:	00516155 	.word	0x00516155
 8006d30:	0061a800 	.word	0x0061a800
 8006d34:	007a1200 	.word	0x007a1200
 8006d38:	00a2c2aa 	.word	0x00a2c2aa
 8006d3c:	00f42400 	.word	0x00f42400
 8006d40:	01e84800 	.word	0x01e84800
 8006d44:	0001e848 	.word	0x0001e848
 8006d48:	00051615 	.word	0x00051615
 8006d4c:	00061a80 	.word	0x00061a80
 8006d50:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d04e      	beq.n	8006dfa <UART_SetConfig+0xaea>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d047      	beq.n	8006df4 <UART_SetConfig+0xae4>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d040      	beq.n	8006dee <UART_SetConfig+0xade>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d039      	beq.n	8006de8 <UART_SetConfig+0xad8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d032      	beq.n	8006de2 <UART_SetConfig+0xad2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d02b      	beq.n	8006ddc <UART_SetConfig+0xacc>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	2b06      	cmp	r3, #6
 8006d8a:	d024      	beq.n	8006dd6 <UART_SetConfig+0xac6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	d01d      	beq.n	8006dd0 <UART_SetConfig+0xac0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d016      	beq.n	8006dca <UART_SetConfig+0xaba>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	2b09      	cmp	r3, #9
 8006da2:	d00f      	beq.n	8006dc4 <UART_SetConfig+0xab4>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	2b0a      	cmp	r3, #10
 8006daa:	d008      	beq.n	8006dbe <UART_SetConfig+0xaae>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	2b0b      	cmp	r3, #11
 8006db2:	d101      	bne.n	8006db8 <UART_SetConfig+0xaa8>
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	e022      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbc:	e01f      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc2:	e01c      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc8:	e019      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dce:	e016      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dd4:	e013      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dd6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006dda:	e010      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006ddc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006de0:	e00d      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de6:	e00a      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006de8:	f241 5355 	movw	r3, #5461	; 0x1555
 8006dec:	e007      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006df2:	e004      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006df8:	e001      	b.n	8006dfe <UART_SetConfig+0xaee>
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e00:	e003      	b.n	8006e0a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006e08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f001 83e8 	beq.w	80085e2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d305      	bcc.n	8006e2e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d904      	bls.n	8006e38 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e34:	f001 bbd5 	b.w	80085e2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8006e38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	f000 8154 	beq.w	80070ea <UART_SetConfig+0xdda>
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	dc06      	bgt.n	8006e54 <UART_SetConfig+0xb44>
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d00f      	beq.n	8006e6a <UART_SetConfig+0xb5a>
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	f000 80ac 	beq.w	8006fa8 <UART_SetConfig+0xc98>
 8006e50:	f000 bc30 	b.w	80076b4 <UART_SetConfig+0x13a4>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	f000 832d 	beq.w	80074b4 <UART_SetConfig+0x11a4>
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	f000 83a5 	beq.w	80075aa <UART_SetConfig+0x129a>
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	f000 81e3 	beq.w	800722c <UART_SetConfig+0xf1c>
 8006e66:	f000 bc25 	b.w	80076b4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e6a:	f7fe fb8f 	bl	800558c <HAL_RCCEx_GetD3PCLK1Freq>
 8006e6e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	4618      	mov	r0, r3
 8006e74:	f04f 0100 	mov.w	r1, #0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d067      	beq.n	8006f50 <UART_SetConfig+0xc40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d05e      	beq.n	8006f46 <UART_SetConfig+0xc36>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d055      	beq.n	8006f3c <UART_SetConfig+0xc2c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d04c      	beq.n	8006f32 <UART_SetConfig+0xc22>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d043      	beq.n	8006f28 <UART_SetConfig+0xc18>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b05      	cmp	r3, #5
 8006ea6:	d03a      	beq.n	8006f1e <UART_SetConfig+0xc0e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b06      	cmp	r3, #6
 8006eae:	d031      	beq.n	8006f14 <UART_SetConfig+0xc04>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b07      	cmp	r3, #7
 8006eb6:	d028      	beq.n	8006f0a <UART_SetConfig+0xbfa>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d01f      	beq.n	8006f00 <UART_SetConfig+0xbf0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b09      	cmp	r3, #9
 8006ec6:	d016      	beq.n	8006ef6 <UART_SetConfig+0xbe6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2b0a      	cmp	r3, #10
 8006ece:	d00d      	beq.n	8006eec <UART_SetConfig+0xbdc>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b0b      	cmp	r3, #11
 8006ed6:	d104      	bne.n	8006ee2 <UART_SetConfig+0xbd2>
 8006ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006edc:	f04f 0400 	mov.w	r4, #0
 8006ee0:	e03a      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006ee2:	f04f 0301 	mov.w	r3, #1
 8006ee6:	f04f 0400 	mov.w	r4, #0
 8006eea:	e035      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006eec:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ef0:	f04f 0400 	mov.w	r4, #0
 8006ef4:	e030      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006efa:	f04f 0400 	mov.w	r4, #0
 8006efe:	e02b      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f00:	f04f 0320 	mov.w	r3, #32
 8006f04:	f04f 0400 	mov.w	r4, #0
 8006f08:	e026      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f0a:	f04f 0310 	mov.w	r3, #16
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	e021      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f14:	f04f 030c 	mov.w	r3, #12
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	e01c      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f1e:	f04f 030a 	mov.w	r3, #10
 8006f22:	f04f 0400 	mov.w	r4, #0
 8006f26:	e017      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f28:	f04f 0308 	mov.w	r3, #8
 8006f2c:	f04f 0400 	mov.w	r4, #0
 8006f30:	e012      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f32:	f04f 0306 	mov.w	r3, #6
 8006f36:	f04f 0400 	mov.w	r4, #0
 8006f3a:	e00d      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f3c:	f04f 0304 	mov.w	r3, #4
 8006f40:	f04f 0400 	mov.w	r4, #0
 8006f44:	e008      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f46:	f04f 0302 	mov.w	r3, #2
 8006f4a:	f04f 0400 	mov.w	r4, #0
 8006f4e:	e003      	b.n	8006f58 <UART_SetConfig+0xc48>
 8006f50:	f04f 0301 	mov.w	r3, #1
 8006f54:	f04f 0400 	mov.w	r4, #0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	f7f9 fa10 	bl	8000380 <__aeabi_uldivmod>
 8006f60:	4603      	mov	r3, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	4619      	mov	r1, r3
 8006f66:	4622      	mov	r2, r4
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	f04f 0400 	mov.w	r4, #0
 8006f70:	0214      	lsls	r4, r2, #8
 8006f72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f76:	020b      	lsls	r3, r1, #8
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6852      	ldr	r2, [r2, #4]
 8006f7c:	0852      	lsrs	r2, r2, #1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	eb13 0b01 	adds.w	fp, r3, r1
 8006f88:	eb44 0c02 	adc.w	ip, r4, r2
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	4661      	mov	r1, ip
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f04f 0400 	mov.w	r4, #0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	f7f9 f9f0 	bl	8000380 <__aeabi_uldivmod>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fa6:	e389      	b.n	80076bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa8:	f107 0318 	add.w	r3, r7, #24
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fb03 	bl	80055b8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d067      	beq.n	8007092 <UART_SetConfig+0xd82>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d05e      	beq.n	8007088 <UART_SetConfig+0xd78>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d055      	beq.n	800707e <UART_SetConfig+0xd6e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d04c      	beq.n	8007074 <UART_SetConfig+0xd64>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d043      	beq.n	800706a <UART_SetConfig+0xd5a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b05      	cmp	r3, #5
 8006fe8:	d03a      	beq.n	8007060 <UART_SetConfig+0xd50>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d031      	beq.n	8007056 <UART_SetConfig+0xd46>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b07      	cmp	r3, #7
 8006ff8:	d028      	beq.n	800704c <UART_SetConfig+0xd3c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d01f      	beq.n	8007042 <UART_SetConfig+0xd32>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b09      	cmp	r3, #9
 8007008:	d016      	beq.n	8007038 <UART_SetConfig+0xd28>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b0a      	cmp	r3, #10
 8007010:	d00d      	beq.n	800702e <UART_SetConfig+0xd1e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b0b      	cmp	r3, #11
 8007018:	d104      	bne.n	8007024 <UART_SetConfig+0xd14>
 800701a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800701e:	f04f 0400 	mov.w	r4, #0
 8007022:	e03a      	b.n	800709a <UART_SetConfig+0xd8a>
 8007024:	f04f 0301 	mov.w	r3, #1
 8007028:	f04f 0400 	mov.w	r4, #0
 800702c:	e035      	b.n	800709a <UART_SetConfig+0xd8a>
 800702e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007032:	f04f 0400 	mov.w	r4, #0
 8007036:	e030      	b.n	800709a <UART_SetConfig+0xd8a>
 8007038:	f04f 0340 	mov.w	r3, #64	; 0x40
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	e02b      	b.n	800709a <UART_SetConfig+0xd8a>
 8007042:	f04f 0320 	mov.w	r3, #32
 8007046:	f04f 0400 	mov.w	r4, #0
 800704a:	e026      	b.n	800709a <UART_SetConfig+0xd8a>
 800704c:	f04f 0310 	mov.w	r3, #16
 8007050:	f04f 0400 	mov.w	r4, #0
 8007054:	e021      	b.n	800709a <UART_SetConfig+0xd8a>
 8007056:	f04f 030c 	mov.w	r3, #12
 800705a:	f04f 0400 	mov.w	r4, #0
 800705e:	e01c      	b.n	800709a <UART_SetConfig+0xd8a>
 8007060:	f04f 030a 	mov.w	r3, #10
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	e017      	b.n	800709a <UART_SetConfig+0xd8a>
 800706a:	f04f 0308 	mov.w	r3, #8
 800706e:	f04f 0400 	mov.w	r4, #0
 8007072:	e012      	b.n	800709a <UART_SetConfig+0xd8a>
 8007074:	f04f 0306 	mov.w	r3, #6
 8007078:	f04f 0400 	mov.w	r4, #0
 800707c:	e00d      	b.n	800709a <UART_SetConfig+0xd8a>
 800707e:	f04f 0304 	mov.w	r3, #4
 8007082:	f04f 0400 	mov.w	r4, #0
 8007086:	e008      	b.n	800709a <UART_SetConfig+0xd8a>
 8007088:	f04f 0302 	mov.w	r3, #2
 800708c:	f04f 0400 	mov.w	r4, #0
 8007090:	e003      	b.n	800709a <UART_SetConfig+0xd8a>
 8007092:	f04f 0301 	mov.w	r3, #1
 8007096:	f04f 0400 	mov.w	r4, #0
 800709a:	461a      	mov	r2, r3
 800709c:	4623      	mov	r3, r4
 800709e:	f7f9 f96f 	bl	8000380 <__aeabi_uldivmod>
 80070a2:	4603      	mov	r3, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	4619      	mov	r1, r3
 80070a8:	4622      	mov	r2, r4
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	0214      	lsls	r4, r2, #8
 80070b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80070b8:	020b      	lsls	r3, r1, #8
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6852      	ldr	r2, [r2, #4]
 80070be:	0852      	lsrs	r2, r2, #1
 80070c0:	4611      	mov	r1, r2
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	eb13 0b01 	adds.w	fp, r3, r1
 80070ca:	eb44 0c02 	adc.w	ip, r4, r2
 80070ce:	4658      	mov	r0, fp
 80070d0:	4661      	mov	r1, ip
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f04f 0400 	mov.w	r4, #0
 80070da:	461a      	mov	r2, r3
 80070dc:	4623      	mov	r3, r4
 80070de:	f7f9 f94f 	bl	8000380 <__aeabi_uldivmod>
 80070e2:	4603      	mov	r3, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070e8:	e2e8      	b.n	80076bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fbae 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d067      	beq.n	80071d4 <UART_SetConfig+0xec4>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b01      	cmp	r3, #1
 800710a:	d05e      	beq.n	80071ca <UART_SetConfig+0xeba>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b02      	cmp	r3, #2
 8007112:	d055      	beq.n	80071c0 <UART_SetConfig+0xeb0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b03      	cmp	r3, #3
 800711a:	d04c      	beq.n	80071b6 <UART_SetConfig+0xea6>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b04      	cmp	r3, #4
 8007122:	d043      	beq.n	80071ac <UART_SetConfig+0xe9c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b05      	cmp	r3, #5
 800712a:	d03a      	beq.n	80071a2 <UART_SetConfig+0xe92>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b06      	cmp	r3, #6
 8007132:	d031      	beq.n	8007198 <UART_SetConfig+0xe88>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b07      	cmp	r3, #7
 800713a:	d028      	beq.n	800718e <UART_SetConfig+0xe7e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b08      	cmp	r3, #8
 8007142:	d01f      	beq.n	8007184 <UART_SetConfig+0xe74>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b09      	cmp	r3, #9
 800714a:	d016      	beq.n	800717a <UART_SetConfig+0xe6a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b0a      	cmp	r3, #10
 8007152:	d00d      	beq.n	8007170 <UART_SetConfig+0xe60>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b0b      	cmp	r3, #11
 800715a:	d104      	bne.n	8007166 <UART_SetConfig+0xe56>
 800715c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007160:	f04f 0400 	mov.w	r4, #0
 8007164:	e03a      	b.n	80071dc <UART_SetConfig+0xecc>
 8007166:	f04f 0301 	mov.w	r3, #1
 800716a:	f04f 0400 	mov.w	r4, #0
 800716e:	e035      	b.n	80071dc <UART_SetConfig+0xecc>
 8007170:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007174:	f04f 0400 	mov.w	r4, #0
 8007178:	e030      	b.n	80071dc <UART_SetConfig+0xecc>
 800717a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800717e:	f04f 0400 	mov.w	r4, #0
 8007182:	e02b      	b.n	80071dc <UART_SetConfig+0xecc>
 8007184:	f04f 0320 	mov.w	r3, #32
 8007188:	f04f 0400 	mov.w	r4, #0
 800718c:	e026      	b.n	80071dc <UART_SetConfig+0xecc>
 800718e:	f04f 0310 	mov.w	r3, #16
 8007192:	f04f 0400 	mov.w	r4, #0
 8007196:	e021      	b.n	80071dc <UART_SetConfig+0xecc>
 8007198:	f04f 030c 	mov.w	r3, #12
 800719c:	f04f 0400 	mov.w	r4, #0
 80071a0:	e01c      	b.n	80071dc <UART_SetConfig+0xecc>
 80071a2:	f04f 030a 	mov.w	r3, #10
 80071a6:	f04f 0400 	mov.w	r4, #0
 80071aa:	e017      	b.n	80071dc <UART_SetConfig+0xecc>
 80071ac:	f04f 0308 	mov.w	r3, #8
 80071b0:	f04f 0400 	mov.w	r4, #0
 80071b4:	e012      	b.n	80071dc <UART_SetConfig+0xecc>
 80071b6:	f04f 0306 	mov.w	r3, #6
 80071ba:	f04f 0400 	mov.w	r4, #0
 80071be:	e00d      	b.n	80071dc <UART_SetConfig+0xecc>
 80071c0:	f04f 0304 	mov.w	r3, #4
 80071c4:	f04f 0400 	mov.w	r4, #0
 80071c8:	e008      	b.n	80071dc <UART_SetConfig+0xecc>
 80071ca:	f04f 0302 	mov.w	r3, #2
 80071ce:	f04f 0400 	mov.w	r4, #0
 80071d2:	e003      	b.n	80071dc <UART_SetConfig+0xecc>
 80071d4:	f04f 0301 	mov.w	r3, #1
 80071d8:	f04f 0400 	mov.w	r4, #0
 80071dc:	461a      	mov	r2, r3
 80071de:	4623      	mov	r3, r4
 80071e0:	f7f9 f8ce 	bl	8000380 <__aeabi_uldivmod>
 80071e4:	4603      	mov	r3, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	4619      	mov	r1, r3
 80071ea:	4622      	mov	r2, r4
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	f04f 0400 	mov.w	r4, #0
 80071f4:	0214      	lsls	r4, r2, #8
 80071f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071fa:	020b      	lsls	r3, r1, #8
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6852      	ldr	r2, [r2, #4]
 8007200:	0852      	lsrs	r2, r2, #1
 8007202:	4611      	mov	r1, r2
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	eb13 0b01 	adds.w	fp, r3, r1
 800720c:	eb44 0c02 	adc.w	ip, r4, r2
 8007210:	4658      	mov	r0, fp
 8007212:	4661      	mov	r1, ip
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	461a      	mov	r2, r3
 800721e:	4623      	mov	r3, r4
 8007220:	f7f9 f8ae 	bl	8000380 <__aeabi_uldivmod>
 8007224:	4603      	mov	r3, r0
 8007226:	460c      	mov	r4, r1
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800722a:	e247      	b.n	80076bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800722c:	4b96      	ldr	r3, [pc, #600]	; (8007488 <UART_SetConfig+0x1178>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80a3 	beq.w	8007380 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800723a:	4b93      	ldr	r3, [pc, #588]	; (8007488 <UART_SetConfig+0x1178>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	08db      	lsrs	r3, r3, #3
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	4a91      	ldr	r2, [pc, #580]	; (800748c <UART_SetConfig+0x117c>)
 8007246:	fa22 f303 	lsr.w	r3, r2, r3
 800724a:	4618      	mov	r0, r3
 800724c:	f04f 0100 	mov.w	r1, #0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d067      	beq.n	8007328 <UART_SetConfig+0x1018>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b01      	cmp	r3, #1
 800725e:	d05e      	beq.n	800731e <UART_SetConfig+0x100e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b02      	cmp	r3, #2
 8007266:	d055      	beq.n	8007314 <UART_SetConfig+0x1004>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b03      	cmp	r3, #3
 800726e:	d04c      	beq.n	800730a <UART_SetConfig+0xffa>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b04      	cmp	r3, #4
 8007276:	d043      	beq.n	8007300 <UART_SetConfig+0xff0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b05      	cmp	r3, #5
 800727e:	d03a      	beq.n	80072f6 <UART_SetConfig+0xfe6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b06      	cmp	r3, #6
 8007286:	d031      	beq.n	80072ec <UART_SetConfig+0xfdc>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b07      	cmp	r3, #7
 800728e:	d028      	beq.n	80072e2 <UART_SetConfig+0xfd2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b08      	cmp	r3, #8
 8007296:	d01f      	beq.n	80072d8 <UART_SetConfig+0xfc8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	2b09      	cmp	r3, #9
 800729e:	d016      	beq.n	80072ce <UART_SetConfig+0xfbe>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b0a      	cmp	r3, #10
 80072a6:	d00d      	beq.n	80072c4 <UART_SetConfig+0xfb4>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b0b      	cmp	r3, #11
 80072ae:	d104      	bne.n	80072ba <UART_SetConfig+0xfaa>
 80072b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b4:	f04f 0400 	mov.w	r4, #0
 80072b8:	e03a      	b.n	8007330 <UART_SetConfig+0x1020>
 80072ba:	f04f 0301 	mov.w	r3, #1
 80072be:	f04f 0400 	mov.w	r4, #0
 80072c2:	e035      	b.n	8007330 <UART_SetConfig+0x1020>
 80072c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	e030      	b.n	8007330 <UART_SetConfig+0x1020>
 80072ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072d2:	f04f 0400 	mov.w	r4, #0
 80072d6:	e02b      	b.n	8007330 <UART_SetConfig+0x1020>
 80072d8:	f04f 0320 	mov.w	r3, #32
 80072dc:	f04f 0400 	mov.w	r4, #0
 80072e0:	e026      	b.n	8007330 <UART_SetConfig+0x1020>
 80072e2:	f04f 0310 	mov.w	r3, #16
 80072e6:	f04f 0400 	mov.w	r4, #0
 80072ea:	e021      	b.n	8007330 <UART_SetConfig+0x1020>
 80072ec:	f04f 030c 	mov.w	r3, #12
 80072f0:	f04f 0400 	mov.w	r4, #0
 80072f4:	e01c      	b.n	8007330 <UART_SetConfig+0x1020>
 80072f6:	f04f 030a 	mov.w	r3, #10
 80072fa:	f04f 0400 	mov.w	r4, #0
 80072fe:	e017      	b.n	8007330 <UART_SetConfig+0x1020>
 8007300:	f04f 0308 	mov.w	r3, #8
 8007304:	f04f 0400 	mov.w	r4, #0
 8007308:	e012      	b.n	8007330 <UART_SetConfig+0x1020>
 800730a:	f04f 0306 	mov.w	r3, #6
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	e00d      	b.n	8007330 <UART_SetConfig+0x1020>
 8007314:	f04f 0304 	mov.w	r3, #4
 8007318:	f04f 0400 	mov.w	r4, #0
 800731c:	e008      	b.n	8007330 <UART_SetConfig+0x1020>
 800731e:	f04f 0302 	mov.w	r3, #2
 8007322:	f04f 0400 	mov.w	r4, #0
 8007326:	e003      	b.n	8007330 <UART_SetConfig+0x1020>
 8007328:	f04f 0301 	mov.w	r3, #1
 800732c:	f04f 0400 	mov.w	r4, #0
 8007330:	461a      	mov	r2, r3
 8007332:	4623      	mov	r3, r4
 8007334:	f7f9 f824 	bl	8000380 <__aeabi_uldivmod>
 8007338:	4603      	mov	r3, r0
 800733a:	460c      	mov	r4, r1
 800733c:	4619      	mov	r1, r3
 800733e:	4622      	mov	r2, r4
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	f04f 0400 	mov.w	r4, #0
 8007348:	0214      	lsls	r4, r2, #8
 800734a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800734e:	020b      	lsls	r3, r1, #8
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6852      	ldr	r2, [r2, #4]
 8007354:	0852      	lsrs	r2, r2, #1
 8007356:	4611      	mov	r1, r2
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	eb13 0b01 	adds.w	fp, r3, r1
 8007360:	eb44 0c02 	adc.w	ip, r4, r2
 8007364:	4658      	mov	r0, fp
 8007366:	4661      	mov	r1, ip
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f04f 0400 	mov.w	r4, #0
 8007370:	461a      	mov	r2, r3
 8007372:	4623      	mov	r3, r4
 8007374:	f7f9 f804 	bl	8000380 <__aeabi_uldivmod>
 8007378:	4603      	mov	r3, r0
 800737a:	460c      	mov	r4, r1
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800737e:	e19d      	b.n	80076bc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05b      	beq.n	8007440 <UART_SetConfig+0x1130>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b01      	cmp	r3, #1
 800738e:	d053      	beq.n	8007438 <UART_SetConfig+0x1128>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b02      	cmp	r3, #2
 8007396:	d04b      	beq.n	8007430 <UART_SetConfig+0x1120>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b03      	cmp	r3, #3
 800739e:	d043      	beq.n	8007428 <UART_SetConfig+0x1118>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d03b      	beq.n	8007420 <UART_SetConfig+0x1110>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	d033      	beq.n	8007418 <UART_SetConfig+0x1108>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	d02b      	beq.n	8007410 <UART_SetConfig+0x1100>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b07      	cmp	r3, #7
 80073be:	d023      	beq.n	8007408 <UART_SetConfig+0x10f8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d01b      	beq.n	8007400 <UART_SetConfig+0x10f0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d013      	beq.n	80073f8 <UART_SetConfig+0x10e8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b0a      	cmp	r3, #10
 80073d6:	d00b      	beq.n	80073f0 <UART_SetConfig+0x10e0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b0b      	cmp	r3, #11
 80073de:	d103      	bne.n	80073e8 <UART_SetConfig+0x10d8>
 80073e0:	4b2a      	ldr	r3, [pc, #168]	; (800748c <UART_SetConfig+0x117c>)
 80073e2:	f04f 0400 	mov.w	r4, #0
 80073e6:	e02e      	b.n	8007446 <UART_SetConfig+0x1136>
 80073e8:	4b29      	ldr	r3, [pc, #164]	; (8007490 <UART_SetConfig+0x1180>)
 80073ea:	f04f 0403 	mov.w	r4, #3
 80073ee:	e02a      	b.n	8007446 <UART_SetConfig+0x1136>
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <UART_SetConfig+0x1184>)
 80073f2:	f04f 0400 	mov.w	r4, #0
 80073f6:	e026      	b.n	8007446 <UART_SetConfig+0x1136>
 80073f8:	4b27      	ldr	r3, [pc, #156]	; (8007498 <UART_SetConfig+0x1188>)
 80073fa:	f04f 0400 	mov.w	r4, #0
 80073fe:	e022      	b.n	8007446 <UART_SetConfig+0x1136>
 8007400:	4b26      	ldr	r3, [pc, #152]	; (800749c <UART_SetConfig+0x118c>)
 8007402:	f04f 0400 	mov.w	r4, #0
 8007406:	e01e      	b.n	8007446 <UART_SetConfig+0x1136>
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <UART_SetConfig+0x1190>)
 800740a:	f04f 0400 	mov.w	r4, #0
 800740e:	e01a      	b.n	8007446 <UART_SetConfig+0x1136>
 8007410:	a419      	add	r4, pc, #100	; (adr r4, 8007478 <UART_SetConfig+0x1168>)
 8007412:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007416:	e016      	b.n	8007446 <UART_SetConfig+0x1136>
 8007418:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <UART_SetConfig+0x1194>)
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	e012      	b.n	8007446 <UART_SetConfig+0x1136>
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <UART_SetConfig+0x1198>)
 8007422:	f04f 0400 	mov.w	r4, #0
 8007426:	e00e      	b.n	8007446 <UART_SetConfig+0x1136>
 8007428:	a415      	add	r4, pc, #84	; (adr r4, 8007480 <UART_SetConfig+0x1170>)
 800742a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800742e:	e00a      	b.n	8007446 <UART_SetConfig+0x1136>
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <UART_SetConfig+0x119c>)
 8007432:	f04f 0400 	mov.w	r4, #0
 8007436:	e006      	b.n	8007446 <UART_SetConfig+0x1136>
 8007438:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <UART_SetConfig+0x11a0>)
 800743a:	f04f 0401 	mov.w	r4, #1
 800743e:	e002      	b.n	8007446 <UART_SetConfig+0x1136>
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <UART_SetConfig+0x1180>)
 8007442:	f04f 0403 	mov.w	r4, #3
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	0852      	lsrs	r2, r2, #1
 800744c:	4611      	mov	r1, r2
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	eb13 0b01 	adds.w	fp, r3, r1
 8007456:	eb44 0c02 	adc.w	ip, r4, r2
 800745a:	4658      	mov	r0, fp
 800745c:	4661      	mov	r1, ip
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f04f 0400 	mov.w	r4, #0
 8007466:	461a      	mov	r2, r3
 8007468:	4623      	mov	r3, r4
 800746a:	f7f8 ff89 	bl	8000380 <__aeabi_uldivmod>
 800746e:	4603      	mov	r3, r0
 8007470:	460c      	mov	r4, r1
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007474:	e122      	b.n	80076bc <UART_SetConfig+0x13ac>
 8007476:	bf00      	nop
 8007478:	51615500 	.word	0x51615500
 800747c:	00000000 	.word	0x00000000
 8007480:	a2c2aa00 	.word	0xa2c2aa00
 8007484:	00000000 	.word	0x00000000
 8007488:	58024400 	.word	0x58024400
 800748c:	03d09000 	.word	0x03d09000
 8007490:	d0900000 	.word	0xd0900000
 8007494:	07a12000 	.word	0x07a12000
 8007498:	0f424000 	.word	0x0f424000
 800749c:	1e848000 	.word	0x1e848000
 80074a0:	3d090000 	.word	0x3d090000
 80074a4:	61a80000 	.word	0x61a80000
 80074a8:	7a120000 	.word	0x7a120000
 80074ac:	f4240000 	.word	0xf4240000
 80074b0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d05b      	beq.n	8007574 <UART_SetConfig+0x1264>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d053      	beq.n	800756c <UART_SetConfig+0x125c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d04b      	beq.n	8007564 <UART_SetConfig+0x1254>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d043      	beq.n	800755c <UART_SetConfig+0x124c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d03b      	beq.n	8007554 <UART_SetConfig+0x1244>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b05      	cmp	r3, #5
 80074e2:	d033      	beq.n	800754c <UART_SetConfig+0x123c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2b06      	cmp	r3, #6
 80074ea:	d02b      	beq.n	8007544 <UART_SetConfig+0x1234>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	d023      	beq.n	800753c <UART_SetConfig+0x122c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d01b      	beq.n	8007534 <UART_SetConfig+0x1224>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2b09      	cmp	r3, #9
 8007502:	d013      	beq.n	800752c <UART_SetConfig+0x121c>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	2b0a      	cmp	r3, #10
 800750a:	d00b      	beq.n	8007524 <UART_SetConfig+0x1214>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2b0b      	cmp	r3, #11
 8007512:	d103      	bne.n	800751c <UART_SetConfig+0x120c>
 8007514:	4bc0      	ldr	r3, [pc, #768]	; (8007818 <UART_SetConfig+0x1508>)
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	e02e      	b.n	800757a <UART_SetConfig+0x126a>
 800751c:	4bbf      	ldr	r3, [pc, #764]	; (800781c <UART_SetConfig+0x150c>)
 800751e:	f04f 0400 	mov.w	r4, #0
 8007522:	e02a      	b.n	800757a <UART_SetConfig+0x126a>
 8007524:	4bbe      	ldr	r3, [pc, #760]	; (8007820 <UART_SetConfig+0x1510>)
 8007526:	f04f 0400 	mov.w	r4, #0
 800752a:	e026      	b.n	800757a <UART_SetConfig+0x126a>
 800752c:	4bbd      	ldr	r3, [pc, #756]	; (8007824 <UART_SetConfig+0x1514>)
 800752e:	f04f 0400 	mov.w	r4, #0
 8007532:	e022      	b.n	800757a <UART_SetConfig+0x126a>
 8007534:	4bbc      	ldr	r3, [pc, #752]	; (8007828 <UART_SetConfig+0x1518>)
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	e01e      	b.n	800757a <UART_SetConfig+0x126a>
 800753c:	4bbb      	ldr	r3, [pc, #748]	; (800782c <UART_SetConfig+0x151c>)
 800753e:	f04f 0400 	mov.w	r4, #0
 8007542:	e01a      	b.n	800757a <UART_SetConfig+0x126a>
 8007544:	a4b0      	add	r4, pc, #704	; (adr r4, 8007808 <UART_SetConfig+0x14f8>)
 8007546:	e9d4 3400 	ldrd	r3, r4, [r4]
 800754a:	e016      	b.n	800757a <UART_SetConfig+0x126a>
 800754c:	4bb8      	ldr	r3, [pc, #736]	; (8007830 <UART_SetConfig+0x1520>)
 800754e:	f04f 0400 	mov.w	r4, #0
 8007552:	e012      	b.n	800757a <UART_SetConfig+0x126a>
 8007554:	4bb7      	ldr	r3, [pc, #732]	; (8007834 <UART_SetConfig+0x1524>)
 8007556:	f04f 0400 	mov.w	r4, #0
 800755a:	e00e      	b.n	800757a <UART_SetConfig+0x126a>
 800755c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007810 <UART_SetConfig+0x1500>)
 800755e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007562:	e00a      	b.n	800757a <UART_SetConfig+0x126a>
 8007564:	4bb4      	ldr	r3, [pc, #720]	; (8007838 <UART_SetConfig+0x1528>)
 8007566:	f04f 0400 	mov.w	r4, #0
 800756a:	e006      	b.n	800757a <UART_SetConfig+0x126a>
 800756c:	4bb3      	ldr	r3, [pc, #716]	; (800783c <UART_SetConfig+0x152c>)
 800756e:	f04f 0400 	mov.w	r4, #0
 8007572:	e002      	b.n	800757a <UART_SetConfig+0x126a>
 8007574:	4ba9      	ldr	r3, [pc, #676]	; (800781c <UART_SetConfig+0x150c>)
 8007576:	f04f 0400 	mov.w	r4, #0
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6852      	ldr	r2, [r2, #4]
 800757e:	0852      	lsrs	r2, r2, #1
 8007580:	4611      	mov	r1, r2
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	eb13 0b01 	adds.w	fp, r3, r1
 800758a:	eb44 0c02 	adc.w	ip, r4, r2
 800758e:	4658      	mov	r0, fp
 8007590:	4661      	mov	r1, ip
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f04f 0400 	mov.w	r4, #0
 800759a:	461a      	mov	r2, r3
 800759c:	4623      	mov	r3, r4
 800759e:	f7f8 feef 	bl	8000380 <__aeabi_uldivmod>
 80075a2:	4603      	mov	r3, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075a8:	e088      	b.n	80076bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d064      	beq.n	800767c <UART_SetConfig+0x136c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d05b      	beq.n	8007672 <UART_SetConfig+0x1362>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d052      	beq.n	8007668 <UART_SetConfig+0x1358>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d04a      	beq.n	8007660 <UART_SetConfig+0x1350>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d041      	beq.n	8007656 <UART_SetConfig+0x1346>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d039      	beq.n	800764e <UART_SetConfig+0x133e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b06      	cmp	r3, #6
 80075e0:	d031      	beq.n	8007646 <UART_SetConfig+0x1336>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	d028      	beq.n	800763c <UART_SetConfig+0x132c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d01f      	beq.n	8007632 <UART_SetConfig+0x1322>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d016      	beq.n	8007628 <UART_SetConfig+0x1318>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b0a      	cmp	r3, #10
 8007600:	d00d      	beq.n	800761e <UART_SetConfig+0x130e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b0b      	cmp	r3, #11
 8007608:	d104      	bne.n	8007614 <UART_SetConfig+0x1304>
 800760a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760e:	f04f 0400 	mov.w	r4, #0
 8007612:	e037      	b.n	8007684 <UART_SetConfig+0x1374>
 8007614:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007618:	f04f 0400 	mov.w	r4, #0
 800761c:	e032      	b.n	8007684 <UART_SetConfig+0x1374>
 800761e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007622:	f04f 0400 	mov.w	r4, #0
 8007626:	e02d      	b.n	8007684 <UART_SetConfig+0x1374>
 8007628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800762c:	f04f 0400 	mov.w	r4, #0
 8007630:	e028      	b.n	8007684 <UART_SetConfig+0x1374>
 8007632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007636:	f04f 0400 	mov.w	r4, #0
 800763a:	e023      	b.n	8007684 <UART_SetConfig+0x1374>
 800763c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007640:	f04f 0400 	mov.w	r4, #0
 8007644:	e01e      	b.n	8007684 <UART_SetConfig+0x1374>
 8007646:	4b7e      	ldr	r3, [pc, #504]	; (8007840 <UART_SetConfig+0x1530>)
 8007648:	f04f 0400 	mov.w	r4, #0
 800764c:	e01a      	b.n	8007684 <UART_SetConfig+0x1374>
 800764e:	4b7d      	ldr	r3, [pc, #500]	; (8007844 <UART_SetConfig+0x1534>)
 8007650:	f04f 0400 	mov.w	r4, #0
 8007654:	e016      	b.n	8007684 <UART_SetConfig+0x1374>
 8007656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	e011      	b.n	8007684 <UART_SetConfig+0x1374>
 8007660:	4b79      	ldr	r3, [pc, #484]	; (8007848 <UART_SetConfig+0x1538>)
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e00d      	b.n	8007684 <UART_SetConfig+0x1374>
 8007668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800766c:	f04f 0400 	mov.w	r4, #0
 8007670:	e008      	b.n	8007684 <UART_SetConfig+0x1374>
 8007672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007676:	f04f 0400 	mov.w	r4, #0
 800767a:	e003      	b.n	8007684 <UART_SetConfig+0x1374>
 800767c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007680:	f04f 0400 	mov.w	r4, #0
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6852      	ldr	r2, [r2, #4]
 8007688:	0852      	lsrs	r2, r2, #1
 800768a:	4611      	mov	r1, r2
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	eb13 0b01 	adds.w	fp, r3, r1
 8007694:	eb44 0c02 	adc.w	ip, r4, r2
 8007698:	4658      	mov	r0, fp
 800769a:	4661      	mov	r1, ip
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f04f 0400 	mov.w	r4, #0
 80076a4:	461a      	mov	r2, r3
 80076a6:	4623      	mov	r3, r4
 80076a8:	f7f8 fe6a 	bl	8000380 <__aeabi_uldivmod>
 80076ac:	4603      	mov	r3, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076b2:	e003      	b.n	80076bc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80076ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c2:	d309      	bcc.n	80076d8 <UART_SetConfig+0x13c8>
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ca:	d205      	bcs.n	80076d8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076d2:	60da      	str	r2, [r3, #12]
 80076d4:	f000 bf85 	b.w	80085e2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076de:	f000 bf80 	b.w	80085e2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ea:	f040 83da 	bne.w	8007ea2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80076ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	f200 83b3 	bhi.w	8007e5e <UART_SetConfig+0x1b4e>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x13f0>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	0800784d 	.word	0x0800784d
 8007704:	08007905 	.word	0x08007905
 8007708:	08007e5f 	.word	0x08007e5f
 800770c:	08007e5f 	.word	0x08007e5f
 8007710:	080079bd 	.word	0x080079bd
 8007714:	08007e5f 	.word	0x08007e5f
 8007718:	08007e5f 	.word	0x08007e5f
 800771c:	08007e5f 	.word	0x08007e5f
 8007720:	08007a79 	.word	0x08007a79
 8007724:	08007e5f 	.word	0x08007e5f
 8007728:	08007e5f 	.word	0x08007e5f
 800772c:	08007e5f 	.word	0x08007e5f
 8007730:	08007e5f 	.word	0x08007e5f
 8007734:	08007e5f 	.word	0x08007e5f
 8007738:	08007e5f 	.word	0x08007e5f
 800773c:	08007e5f 	.word	0x08007e5f
 8007740:	08007b35 	.word	0x08007b35
 8007744:	08007e5f 	.word	0x08007e5f
 8007748:	08007e5f 	.word	0x08007e5f
 800774c:	08007e5f 	.word	0x08007e5f
 8007750:	08007e5f 	.word	0x08007e5f
 8007754:	08007e5f 	.word	0x08007e5f
 8007758:	08007e5f 	.word	0x08007e5f
 800775c:	08007e5f 	.word	0x08007e5f
 8007760:	08007e5f 	.word	0x08007e5f
 8007764:	08007e5f 	.word	0x08007e5f
 8007768:	08007e5f 	.word	0x08007e5f
 800776c:	08007e5f 	.word	0x08007e5f
 8007770:	08007e5f 	.word	0x08007e5f
 8007774:	08007e5f 	.word	0x08007e5f
 8007778:	08007e5f 	.word	0x08007e5f
 800777c:	08007e5f 	.word	0x08007e5f
 8007780:	08007ca7 	.word	0x08007ca7
 8007784:	08007e5f 	.word	0x08007e5f
 8007788:	08007e5f 	.word	0x08007e5f
 800778c:	08007e5f 	.word	0x08007e5f
 8007790:	08007e5f 	.word	0x08007e5f
 8007794:	08007e5f 	.word	0x08007e5f
 8007798:	08007e5f 	.word	0x08007e5f
 800779c:	08007e5f 	.word	0x08007e5f
 80077a0:	08007e5f 	.word	0x08007e5f
 80077a4:	08007e5f 	.word	0x08007e5f
 80077a8:	08007e5f 	.word	0x08007e5f
 80077ac:	08007e5f 	.word	0x08007e5f
 80077b0:	08007e5f 	.word	0x08007e5f
 80077b4:	08007e5f 	.word	0x08007e5f
 80077b8:	08007e5f 	.word	0x08007e5f
 80077bc:	08007e5f 	.word	0x08007e5f
 80077c0:	08007e5f 	.word	0x08007e5f
 80077c4:	08007e5f 	.word	0x08007e5f
 80077c8:	08007e5f 	.word	0x08007e5f
 80077cc:	08007e5f 	.word	0x08007e5f
 80077d0:	08007e5f 	.word	0x08007e5f
 80077d4:	08007e5f 	.word	0x08007e5f
 80077d8:	08007e5f 	.word	0x08007e5f
 80077dc:	08007e5f 	.word	0x08007e5f
 80077e0:	08007e5f 	.word	0x08007e5f
 80077e4:	08007e5f 	.word	0x08007e5f
 80077e8:	08007e5f 	.word	0x08007e5f
 80077ec:	08007e5f 	.word	0x08007e5f
 80077f0:	08007e5f 	.word	0x08007e5f
 80077f4:	08007e5f 	.word	0x08007e5f
 80077f8:	08007e5f 	.word	0x08007e5f
 80077fc:	08007e5f 	.word	0x08007e5f
 8007800:	08007d9d 	.word	0x08007d9d
 8007804:	f3af 8000 	nop.w
 8007808:	05161500 	.word	0x05161500
 800780c:	00000000 	.word	0x00000000
 8007810:	0a2c2a00 	.word	0x0a2c2a00
 8007814:	00000000 	.word	0x00000000
 8007818:	003d0900 	.word	0x003d0900
 800781c:	3d090000 	.word	0x3d090000
 8007820:	007a1200 	.word	0x007a1200
 8007824:	00f42400 	.word	0x00f42400
 8007828:	01e84800 	.word	0x01e84800
 800782c:	03d09000 	.word	0x03d09000
 8007830:	061a8000 	.word	0x061a8000
 8007834:	07a12000 	.word	0x07a12000
 8007838:	0f424000 	.word	0x0f424000
 800783c:	1e848000 	.word	0x1e848000
 8007840:	000aaa00 	.word	0x000aaa00
 8007844:	000ccc00 	.word	0x000ccc00
 8007848:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800784c:	f7fc ff52 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8007850:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	d044      	beq.n	80078e4 <UART_SetConfig+0x15d4>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b01      	cmp	r3, #1
 8007860:	d03e      	beq.n	80078e0 <UART_SetConfig+0x15d0>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b02      	cmp	r3, #2
 8007868:	d038      	beq.n	80078dc <UART_SetConfig+0x15cc>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b03      	cmp	r3, #3
 8007870:	d032      	beq.n	80078d8 <UART_SetConfig+0x15c8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b04      	cmp	r3, #4
 8007878:	d02c      	beq.n	80078d4 <UART_SetConfig+0x15c4>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b05      	cmp	r3, #5
 8007880:	d026      	beq.n	80078d0 <UART_SetConfig+0x15c0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b06      	cmp	r3, #6
 8007888:	d020      	beq.n	80078cc <UART_SetConfig+0x15bc>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b07      	cmp	r3, #7
 8007890:	d01a      	beq.n	80078c8 <UART_SetConfig+0x15b8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b08      	cmp	r3, #8
 8007898:	d014      	beq.n	80078c4 <UART_SetConfig+0x15b4>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d00e      	beq.n	80078c0 <UART_SetConfig+0x15b0>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b0a      	cmp	r3, #10
 80078a8:	d008      	beq.n	80078bc <UART_SetConfig+0x15ac>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b0b      	cmp	r3, #11
 80078b0:	d102      	bne.n	80078b8 <UART_SetConfig+0x15a8>
 80078b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b6:	e016      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e014      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	e012      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	e010      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078c4:	2320      	movs	r3, #32
 80078c6:	e00e      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078c8:	2310      	movs	r3, #16
 80078ca:	e00c      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078cc:	230c      	movs	r3, #12
 80078ce:	e00a      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078d0:	230a      	movs	r3, #10
 80078d2:	e008      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078d4:	2308      	movs	r3, #8
 80078d6:	e006      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078d8:	2306      	movs	r3, #6
 80078da:	e004      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078dc:	2304      	movs	r3, #4
 80078de:	e002      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e000      	b.n	80078e6 <UART_SetConfig+0x15d6>
 80078e4:	2301      	movs	r3, #1
 80078e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	005a      	lsls	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	b29b      	uxth	r3, r3
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007902:	e2b0      	b.n	8007e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007904:	f7fc ff0c 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8007908:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d044      	beq.n	800799c <UART_SetConfig+0x168c>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b01      	cmp	r3, #1
 8007918:	d03e      	beq.n	8007998 <UART_SetConfig+0x1688>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b02      	cmp	r3, #2
 8007920:	d038      	beq.n	8007994 <UART_SetConfig+0x1684>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b03      	cmp	r3, #3
 8007928:	d032      	beq.n	8007990 <UART_SetConfig+0x1680>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b04      	cmp	r3, #4
 8007930:	d02c      	beq.n	800798c <UART_SetConfig+0x167c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b05      	cmp	r3, #5
 8007938:	d026      	beq.n	8007988 <UART_SetConfig+0x1678>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b06      	cmp	r3, #6
 8007940:	d020      	beq.n	8007984 <UART_SetConfig+0x1674>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b07      	cmp	r3, #7
 8007948:	d01a      	beq.n	8007980 <UART_SetConfig+0x1670>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b08      	cmp	r3, #8
 8007950:	d014      	beq.n	800797c <UART_SetConfig+0x166c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b09      	cmp	r3, #9
 8007958:	d00e      	beq.n	8007978 <UART_SetConfig+0x1668>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b0a      	cmp	r3, #10
 8007960:	d008      	beq.n	8007974 <UART_SetConfig+0x1664>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b0b      	cmp	r3, #11
 8007968:	d102      	bne.n	8007970 <UART_SetConfig+0x1660>
 800796a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800796e:	e016      	b.n	800799e <UART_SetConfig+0x168e>
 8007970:	2301      	movs	r3, #1
 8007972:	e014      	b.n	800799e <UART_SetConfig+0x168e>
 8007974:	2380      	movs	r3, #128	; 0x80
 8007976:	e012      	b.n	800799e <UART_SetConfig+0x168e>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	e010      	b.n	800799e <UART_SetConfig+0x168e>
 800797c:	2320      	movs	r3, #32
 800797e:	e00e      	b.n	800799e <UART_SetConfig+0x168e>
 8007980:	2310      	movs	r3, #16
 8007982:	e00c      	b.n	800799e <UART_SetConfig+0x168e>
 8007984:	230c      	movs	r3, #12
 8007986:	e00a      	b.n	800799e <UART_SetConfig+0x168e>
 8007988:	230a      	movs	r3, #10
 800798a:	e008      	b.n	800799e <UART_SetConfig+0x168e>
 800798c:	2308      	movs	r3, #8
 800798e:	e006      	b.n	800799e <UART_SetConfig+0x168e>
 8007990:	2306      	movs	r3, #6
 8007992:	e004      	b.n	800799e <UART_SetConfig+0x168e>
 8007994:	2304      	movs	r3, #4
 8007996:	e002      	b.n	800799e <UART_SetConfig+0x168e>
 8007998:	2302      	movs	r3, #2
 800799a:	e000      	b.n	800799e <UART_SetConfig+0x168e>
 800799c:	2301      	movs	r3, #1
 800799e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	005a      	lsls	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	441a      	add	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ba:	e254      	b.n	8007e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079bc:	f107 0318 	add.w	r3, r7, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fd fdf9 	bl	80055b8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d044      	beq.n	8007a5a <UART_SetConfig+0x174a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d03e      	beq.n	8007a56 <UART_SetConfig+0x1746>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d038      	beq.n	8007a52 <UART_SetConfig+0x1742>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d032      	beq.n	8007a4e <UART_SetConfig+0x173e>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d02c      	beq.n	8007a4a <UART_SetConfig+0x173a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b05      	cmp	r3, #5
 80079f6:	d026      	beq.n	8007a46 <UART_SetConfig+0x1736>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d020      	beq.n	8007a42 <UART_SetConfig+0x1732>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	d01a      	beq.n	8007a3e <UART_SetConfig+0x172e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d014      	beq.n	8007a3a <UART_SetConfig+0x172a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d00e      	beq.n	8007a36 <UART_SetConfig+0x1726>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b0a      	cmp	r3, #10
 8007a1e:	d008      	beq.n	8007a32 <UART_SetConfig+0x1722>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b0b      	cmp	r3, #11
 8007a26:	d102      	bne.n	8007a2e <UART_SetConfig+0x171e>
 8007a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a2c:	e016      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e014      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a32:	2380      	movs	r3, #128	; 0x80
 8007a34:	e012      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	e010      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a3a:	2320      	movs	r3, #32
 8007a3c:	e00e      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a3e:	2310      	movs	r3, #16
 8007a40:	e00c      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a42:	230c      	movs	r3, #12
 8007a44:	e00a      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a46:	230a      	movs	r3, #10
 8007a48:	e008      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	e006      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a4e:	2306      	movs	r3, #6
 8007a50:	e004      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a52:	2304      	movs	r3, #4
 8007a54:	e002      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e000      	b.n	8007a5c <UART_SetConfig+0x174c>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a60:	005a      	lsls	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a76:	e1f6      	b.n	8007e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd fee7 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d044      	beq.n	8007b16 <UART_SetConfig+0x1806>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d03e      	beq.n	8007b12 <UART_SetConfig+0x1802>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d038      	beq.n	8007b0e <UART_SetConfig+0x17fe>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d032      	beq.n	8007b0a <UART_SetConfig+0x17fa>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d02c      	beq.n	8007b06 <UART_SetConfig+0x17f6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	d026      	beq.n	8007b02 <UART_SetConfig+0x17f2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b06      	cmp	r3, #6
 8007aba:	d020      	beq.n	8007afe <UART_SetConfig+0x17ee>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b07      	cmp	r3, #7
 8007ac2:	d01a      	beq.n	8007afa <UART_SetConfig+0x17ea>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d014      	beq.n	8007af6 <UART_SetConfig+0x17e6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b09      	cmp	r3, #9
 8007ad2:	d00e      	beq.n	8007af2 <UART_SetConfig+0x17e2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b0a      	cmp	r3, #10
 8007ada:	d008      	beq.n	8007aee <UART_SetConfig+0x17de>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d102      	bne.n	8007aea <UART_SetConfig+0x17da>
 8007ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae8:	e016      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e014      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007aee:	2380      	movs	r3, #128	; 0x80
 8007af0:	e012      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	e010      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007af6:	2320      	movs	r3, #32
 8007af8:	e00e      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007afa:	2310      	movs	r3, #16
 8007afc:	e00c      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007afe:	230c      	movs	r3, #12
 8007b00:	e00a      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b02:	230a      	movs	r3, #10
 8007b04:	e008      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b06:	2308      	movs	r3, #8
 8007b08:	e006      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b0a:	2306      	movs	r3, #6
 8007b0c:	e004      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b0e:	2304      	movs	r3, #4
 8007b10:	e002      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e000      	b.n	8007b18 <UART_SetConfig+0x1808>
 8007b16:	2301      	movs	r3, #1
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	005a      	lsls	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b32:	e198      	b.n	8007e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b34:	4b87      	ldr	r3, [pc, #540]	; (8007d54 <UART_SetConfig+0x1a44>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d05e      	beq.n	8007bfe <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b40:	4b84      	ldr	r3, [pc, #528]	; (8007d54 <UART_SetConfig+0x1a44>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	08db      	lsrs	r3, r3, #3
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	4a83      	ldr	r2, [pc, #524]	; (8007d58 <UART_SetConfig+0x1a48>)
 8007b4c:	40da      	lsrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d044      	beq.n	8007be0 <UART_SetConfig+0x18d0>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d03e      	beq.n	8007bdc <UART_SetConfig+0x18cc>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d038      	beq.n	8007bd8 <UART_SetConfig+0x18c8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d032      	beq.n	8007bd4 <UART_SetConfig+0x18c4>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d02c      	beq.n	8007bd0 <UART_SetConfig+0x18c0>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d026      	beq.n	8007bcc <UART_SetConfig+0x18bc>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	2b06      	cmp	r3, #6
 8007b84:	d020      	beq.n	8007bc8 <UART_SetConfig+0x18b8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b07      	cmp	r3, #7
 8007b8c:	d01a      	beq.n	8007bc4 <UART_SetConfig+0x18b4>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d014      	beq.n	8007bc0 <UART_SetConfig+0x18b0>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d00e      	beq.n	8007bbc <UART_SetConfig+0x18ac>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	2b0a      	cmp	r3, #10
 8007ba4:	d008      	beq.n	8007bb8 <UART_SetConfig+0x18a8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b0b      	cmp	r3, #11
 8007bac:	d102      	bne.n	8007bb4 <UART_SetConfig+0x18a4>
 8007bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb2:	e016      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e014      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	e012      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bbc:	2340      	movs	r3, #64	; 0x40
 8007bbe:	e010      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	e00e      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	e00c      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bc8:	230c      	movs	r3, #12
 8007bca:	e00a      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bcc:	230a      	movs	r3, #10
 8007bce:	e008      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	e006      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bd4:	2306      	movs	r3, #6
 8007bd6:	e004      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	e002      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e000      	b.n	8007be2 <UART_SetConfig+0x18d2>
 8007be0:	2301      	movs	r3, #1
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	005a      	lsls	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	441a      	add	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007bfc:	e133      	b.n	8007e66 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d043      	beq.n	8007c8e <UART_SetConfig+0x197e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d03d      	beq.n	8007c8a <UART_SetConfig+0x197a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d037      	beq.n	8007c86 <UART_SetConfig+0x1976>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d031      	beq.n	8007c82 <UART_SetConfig+0x1972>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d02b      	beq.n	8007c7e <UART_SetConfig+0x196e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d025      	beq.n	8007c7a <UART_SetConfig+0x196a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d01f      	beq.n	8007c76 <UART_SetConfig+0x1966>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	2b07      	cmp	r3, #7
 8007c3c:	d019      	beq.n	8007c72 <UART_SetConfig+0x1962>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d013      	beq.n	8007c6e <UART_SetConfig+0x195e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b09      	cmp	r3, #9
 8007c4c:	d00d      	beq.n	8007c6a <UART_SetConfig+0x195a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2b0a      	cmp	r3, #10
 8007c54:	d007      	beq.n	8007c66 <UART_SetConfig+0x1956>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b0b      	cmp	r3, #11
 8007c5c:	d101      	bne.n	8007c62 <UART_SetConfig+0x1952>
 8007c5e:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <UART_SetConfig+0x1a4c>)
 8007c60:	e016      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c62:	4b3f      	ldr	r3, [pc, #252]	; (8007d60 <UART_SetConfig+0x1a50>)
 8007c64:	e014      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c66:	4b3f      	ldr	r3, [pc, #252]	; (8007d64 <UART_SetConfig+0x1a54>)
 8007c68:	e012      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	; (8007d68 <UART_SetConfig+0x1a58>)
 8007c6c:	e010      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c6e:	4b3f      	ldr	r3, [pc, #252]	; (8007d6c <UART_SetConfig+0x1a5c>)
 8007c70:	e00e      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c72:	4b3f      	ldr	r3, [pc, #252]	; (8007d70 <UART_SetConfig+0x1a60>)
 8007c74:	e00c      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c76:	4b3f      	ldr	r3, [pc, #252]	; (8007d74 <UART_SetConfig+0x1a64>)
 8007c78:	e00a      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c7a:	4b3f      	ldr	r3, [pc, #252]	; (8007d78 <UART_SetConfig+0x1a68>)
 8007c7c:	e008      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c7e:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <UART_SetConfig+0x1a6c>)
 8007c80:	e006      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c82:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <UART_SetConfig+0x1a70>)
 8007c84:	e004      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c86:	4b3f      	ldr	r3, [pc, #252]	; (8007d84 <UART_SetConfig+0x1a74>)
 8007c88:	e002      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c8a:	4b33      	ldr	r3, [pc, #204]	; (8007d58 <UART_SetConfig+0x1a48>)
 8007c8c:	e000      	b.n	8007c90 <UART_SetConfig+0x1980>
 8007c8e:	4b34      	ldr	r3, [pc, #208]	; (8007d60 <UART_SetConfig+0x1a50>)
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6852      	ldr	r2, [r2, #4]
 8007c94:	0852      	lsrs	r2, r2, #1
 8007c96:	441a      	add	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ca4:	e0df      	b.n	8007e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d045      	beq.n	8007d3a <UART_SetConfig+0x1a2a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d03f      	beq.n	8007d36 <UART_SetConfig+0x1a26>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d039      	beq.n	8007d32 <UART_SetConfig+0x1a22>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d033      	beq.n	8007d2e <UART_SetConfig+0x1a1e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d02d      	beq.n	8007d2a <UART_SetConfig+0x1a1a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d027      	beq.n	8007d26 <UART_SetConfig+0x1a16>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b06      	cmp	r3, #6
 8007cdc:	d021      	beq.n	8007d22 <UART_SetConfig+0x1a12>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b07      	cmp	r3, #7
 8007ce4:	d01b      	beq.n	8007d1e <UART_SetConfig+0x1a0e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d015      	beq.n	8007d1a <UART_SetConfig+0x1a0a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b09      	cmp	r3, #9
 8007cf4:	d00f      	beq.n	8007d16 <UART_SetConfig+0x1a06>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b0a      	cmp	r3, #10
 8007cfc:	d008      	beq.n	8007d10 <UART_SetConfig+0x1a00>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b0b      	cmp	r3, #11
 8007d04:	d102      	bne.n	8007d0c <UART_SetConfig+0x19fc>
 8007d06:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007d0a:	e017      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d0c:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <UART_SetConfig+0x1a60>)
 8007d0e:	e015      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007d14:	e012      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d16:	4b1c      	ldr	r3, [pc, #112]	; (8007d88 <UART_SetConfig+0x1a78>)
 8007d18:	e010      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d1a:	4b1c      	ldr	r3, [pc, #112]	; (8007d8c <UART_SetConfig+0x1a7c>)
 8007d1c:	e00e      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <UART_SetConfig+0x1a4c>)
 8007d20:	e00c      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d22:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <UART_SetConfig+0x1a80>)
 8007d24:	e00a      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <UART_SetConfig+0x1a84>)
 8007d28:	e008      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <UART_SetConfig+0x1a54>)
 8007d2c:	e006      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <UART_SetConfig+0x1a88>)
 8007d30:	e004      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d32:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <UART_SetConfig+0x1a58>)
 8007d34:	e002      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <UART_SetConfig+0x1a5c>)
 8007d38:	e000      	b.n	8007d3c <UART_SetConfig+0x1a2c>
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <UART_SetConfig+0x1a60>)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6852      	ldr	r2, [r2, #4]
 8007d40:	0852      	lsrs	r2, r2, #1
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d50:	e089      	b.n	8007e66 <UART_SetConfig+0x1b56>
 8007d52:	bf00      	nop
 8007d54:	58024400 	.word	0x58024400
 8007d58:	03d09000 	.word	0x03d09000
 8007d5c:	0007a120 	.word	0x0007a120
 8007d60:	07a12000 	.word	0x07a12000
 8007d64:	000f4240 	.word	0x000f4240
 8007d68:	001e8480 	.word	0x001e8480
 8007d6c:	003d0900 	.word	0x003d0900
 8007d70:	007a1200 	.word	0x007a1200
 8007d74:	00a2c2aa 	.word	0x00a2c2aa
 8007d78:	00c35000 	.word	0x00c35000
 8007d7c:	00f42400 	.word	0x00f42400
 8007d80:	01458554 	.word	0x01458554
 8007d84:	01e84800 	.word	0x01e84800
 8007d88:	0001e848 	.word	0x0001e848
 8007d8c:	0003d090 	.word	0x0003d090
 8007d90:	000a2c2a 	.word	0x000a2c2a
 8007d94:	000c3500 	.word	0x000c3500
 8007d98:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d04f      	beq.n	8007e44 <UART_SetConfig+0x1b34>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d048      	beq.n	8007e3e <UART_SetConfig+0x1b2e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d041      	beq.n	8007e38 <UART_SetConfig+0x1b28>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d03a      	beq.n	8007e32 <UART_SetConfig+0x1b22>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d033      	beq.n	8007e2c <UART_SetConfig+0x1b1c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	d02c      	beq.n	8007e26 <UART_SetConfig+0x1b16>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b06      	cmp	r3, #6
 8007dd2:	d025      	beq.n	8007e20 <UART_SetConfig+0x1b10>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b07      	cmp	r3, #7
 8007dda:	d01e      	beq.n	8007e1a <UART_SetConfig+0x1b0a>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d017      	beq.n	8007e14 <UART_SetConfig+0x1b04>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	d010      	beq.n	8007e0e <UART_SetConfig+0x1afe>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	2b0a      	cmp	r3, #10
 8007df2:	d009      	beq.n	8007e08 <UART_SetConfig+0x1af8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b0b      	cmp	r3, #11
 8007dfa:	d102      	bne.n	8007e02 <UART_SetConfig+0x1af2>
 8007dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e00:	e022      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e06:	e01f      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e0c:	e01c      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e12:	e019      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e18:	e016      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e1e:	e013      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e20:	f241 5354 	movw	r3, #5460	; 0x1554
 8007e24:	e010      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e26:	f641 1398 	movw	r3, #6552	; 0x1998
 8007e2a:	e00d      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e30:	e00a      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e32:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007e36:	e007      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e3c:	e004      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e42:	e001      	b.n	8007e48 <UART_SetConfig+0x1b38>
 8007e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6852      	ldr	r2, [r2, #4]
 8007e4c:	0852      	lsrs	r2, r2, #1
 8007e4e:	441a      	add	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e5c:	e003      	b.n	8007e66 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e68:	2b0f      	cmp	r3, #15
 8007e6a:	d916      	bls.n	8007e9a <UART_SetConfig+0x1b8a>
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e72:	d212      	bcs.n	8007e9a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f023 030f 	bic.w	r3, r3, #15
 8007e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e3a3      	b.n	80085e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea0:	e39f      	b.n	80085e2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8007ea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	f200 8388 	bhi.w	80085bc <UART_SetConfig+0x22ac>
 8007eac:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <UART_SetConfig+0x1ba4>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007fb9 	.word	0x08007fb9
 8007eb8:	0800806f 	.word	0x0800806f
 8007ebc:	080085bd 	.word	0x080085bd
 8007ec0:	080085bd 	.word	0x080085bd
 8007ec4:	08008125 	.word	0x08008125
 8007ec8:	080085bd 	.word	0x080085bd
 8007ecc:	080085bd 	.word	0x080085bd
 8007ed0:	080085bd 	.word	0x080085bd
 8007ed4:	080081df 	.word	0x080081df
 8007ed8:	080085bd 	.word	0x080085bd
 8007edc:	080085bd 	.word	0x080085bd
 8007ee0:	080085bd 	.word	0x080085bd
 8007ee4:	080085bd 	.word	0x080085bd
 8007ee8:	080085bd 	.word	0x080085bd
 8007eec:	080085bd 	.word	0x080085bd
 8007ef0:	080085bd 	.word	0x080085bd
 8007ef4:	08008299 	.word	0x08008299
 8007ef8:	080085bd 	.word	0x080085bd
 8007efc:	080085bd 	.word	0x080085bd
 8007f00:	080085bd 	.word	0x080085bd
 8007f04:	080085bd 	.word	0x080085bd
 8007f08:	080085bd 	.word	0x080085bd
 8007f0c:	080085bd 	.word	0x080085bd
 8007f10:	080085bd 	.word	0x080085bd
 8007f14:	080085bd 	.word	0x080085bd
 8007f18:	080085bd 	.word	0x080085bd
 8007f1c:	080085bd 	.word	0x080085bd
 8007f20:	080085bd 	.word	0x080085bd
 8007f24:	080085bd 	.word	0x080085bd
 8007f28:	080085bd 	.word	0x080085bd
 8007f2c:	080085bd 	.word	0x080085bd
 8007f30:	080085bd 	.word	0x080085bd
 8007f34:	08008409 	.word	0x08008409
 8007f38:	080085bd 	.word	0x080085bd
 8007f3c:	080085bd 	.word	0x080085bd
 8007f40:	080085bd 	.word	0x080085bd
 8007f44:	080085bd 	.word	0x080085bd
 8007f48:	080085bd 	.word	0x080085bd
 8007f4c:	080085bd 	.word	0x080085bd
 8007f50:	080085bd 	.word	0x080085bd
 8007f54:	080085bd 	.word	0x080085bd
 8007f58:	080085bd 	.word	0x080085bd
 8007f5c:	080085bd 	.word	0x080085bd
 8007f60:	080085bd 	.word	0x080085bd
 8007f64:	080085bd 	.word	0x080085bd
 8007f68:	080085bd 	.word	0x080085bd
 8007f6c:	080085bd 	.word	0x080085bd
 8007f70:	080085bd 	.word	0x080085bd
 8007f74:	080085bd 	.word	0x080085bd
 8007f78:	080085bd 	.word	0x080085bd
 8007f7c:	080085bd 	.word	0x080085bd
 8007f80:	080085bd 	.word	0x080085bd
 8007f84:	080085bd 	.word	0x080085bd
 8007f88:	080085bd 	.word	0x080085bd
 8007f8c:	080085bd 	.word	0x080085bd
 8007f90:	080085bd 	.word	0x080085bd
 8007f94:	080085bd 	.word	0x080085bd
 8007f98:	080085bd 	.word	0x080085bd
 8007f9c:	080085bd 	.word	0x080085bd
 8007fa0:	080085bd 	.word	0x080085bd
 8007fa4:	080085bd 	.word	0x080085bd
 8007fa8:	080085bd 	.word	0x080085bd
 8007fac:	080085bd 	.word	0x080085bd
 8007fb0:	080085bd 	.word	0x080085bd
 8007fb4:	080084fd 	.word	0x080084fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb8:	f7fc fb9c 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8007fbc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d044      	beq.n	8008050 <UART_SetConfig+0x1d40>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d03e      	beq.n	800804c <UART_SetConfig+0x1d3c>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d038      	beq.n	8008048 <UART_SetConfig+0x1d38>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d032      	beq.n	8008044 <UART_SetConfig+0x1d34>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d02c      	beq.n	8008040 <UART_SetConfig+0x1d30>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d026      	beq.n	800803c <UART_SetConfig+0x1d2c>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	2b06      	cmp	r3, #6
 8007ff4:	d020      	beq.n	8008038 <UART_SetConfig+0x1d28>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b07      	cmp	r3, #7
 8007ffc:	d01a      	beq.n	8008034 <UART_SetConfig+0x1d24>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b08      	cmp	r3, #8
 8008004:	d014      	beq.n	8008030 <UART_SetConfig+0x1d20>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b09      	cmp	r3, #9
 800800c:	d00e      	beq.n	800802c <UART_SetConfig+0x1d1c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b0a      	cmp	r3, #10
 8008014:	d008      	beq.n	8008028 <UART_SetConfig+0x1d18>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b0b      	cmp	r3, #11
 800801c:	d102      	bne.n	8008024 <UART_SetConfig+0x1d14>
 800801e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008022:	e016      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008024:	2301      	movs	r3, #1
 8008026:	e014      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008028:	2380      	movs	r3, #128	; 0x80
 800802a:	e012      	b.n	8008052 <UART_SetConfig+0x1d42>
 800802c:	2340      	movs	r3, #64	; 0x40
 800802e:	e010      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008030:	2320      	movs	r3, #32
 8008032:	e00e      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008034:	2310      	movs	r3, #16
 8008036:	e00c      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008038:	230c      	movs	r3, #12
 800803a:	e00a      	b.n	8008052 <UART_SetConfig+0x1d42>
 800803c:	230a      	movs	r3, #10
 800803e:	e008      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008040:	2308      	movs	r3, #8
 8008042:	e006      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008044:	2306      	movs	r3, #6
 8008046:	e004      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008048:	2304      	movs	r3, #4
 800804a:	e002      	b.n	8008052 <UART_SetConfig+0x1d42>
 800804c:	2302      	movs	r3, #2
 800804e:	e000      	b.n	8008052 <UART_SetConfig+0x1d42>
 8008050:	2301      	movs	r3, #1
 8008052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008054:	fbb2 f2f3 	udiv	r2, r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	441a      	add	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
 8008068:	b29b      	uxth	r3, r3
 800806a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800806c:	e2aa      	b.n	80085c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800806e:	f7fc fb57 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8008072:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d044      	beq.n	8008106 <UART_SetConfig+0x1df6>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b01      	cmp	r3, #1
 8008082:	d03e      	beq.n	8008102 <UART_SetConfig+0x1df2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b02      	cmp	r3, #2
 800808a:	d038      	beq.n	80080fe <UART_SetConfig+0x1dee>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b03      	cmp	r3, #3
 8008092:	d032      	beq.n	80080fa <UART_SetConfig+0x1dea>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b04      	cmp	r3, #4
 800809a:	d02c      	beq.n	80080f6 <UART_SetConfig+0x1de6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d026      	beq.n	80080f2 <UART_SetConfig+0x1de2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b06      	cmp	r3, #6
 80080aa:	d020      	beq.n	80080ee <UART_SetConfig+0x1dde>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	2b07      	cmp	r3, #7
 80080b2:	d01a      	beq.n	80080ea <UART_SetConfig+0x1dda>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d014      	beq.n	80080e6 <UART_SetConfig+0x1dd6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b09      	cmp	r3, #9
 80080c2:	d00e      	beq.n	80080e2 <UART_SetConfig+0x1dd2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b0a      	cmp	r3, #10
 80080ca:	d008      	beq.n	80080de <UART_SetConfig+0x1dce>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b0b      	cmp	r3, #11
 80080d2:	d102      	bne.n	80080da <UART_SetConfig+0x1dca>
 80080d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d8:	e016      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080da:	2301      	movs	r3, #1
 80080dc:	e014      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080de:	2380      	movs	r3, #128	; 0x80
 80080e0:	e012      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	e010      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080e6:	2320      	movs	r3, #32
 80080e8:	e00e      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080ea:	2310      	movs	r3, #16
 80080ec:	e00c      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080ee:	230c      	movs	r3, #12
 80080f0:	e00a      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080f2:	230a      	movs	r3, #10
 80080f4:	e008      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080f6:	2308      	movs	r3, #8
 80080f8:	e006      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080fa:	2306      	movs	r3, #6
 80080fc:	e004      	b.n	8008108 <UART_SetConfig+0x1df8>
 80080fe:	2304      	movs	r3, #4
 8008100:	e002      	b.n	8008108 <UART_SetConfig+0x1df8>
 8008102:	2302      	movs	r3, #2
 8008104:	e000      	b.n	8008108 <UART_SetConfig+0x1df8>
 8008106:	2301      	movs	r3, #1
 8008108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810a:	fbb2 f2f3 	udiv	r2, r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	fbb2 f3f3 	udiv	r3, r2, r3
 800811e:	b29b      	uxth	r3, r3
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008122:	e24f      	b.n	80085c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008124:	f107 0318 	add.w	r3, r7, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7fd fa45 	bl	80055b8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d044      	beq.n	80081c2 <UART_SetConfig+0x1eb2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2b01      	cmp	r3, #1
 800813e:	d03e      	beq.n	80081be <UART_SetConfig+0x1eae>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b02      	cmp	r3, #2
 8008146:	d038      	beq.n	80081ba <UART_SetConfig+0x1eaa>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	2b03      	cmp	r3, #3
 800814e:	d032      	beq.n	80081b6 <UART_SetConfig+0x1ea6>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	2b04      	cmp	r3, #4
 8008156:	d02c      	beq.n	80081b2 <UART_SetConfig+0x1ea2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b05      	cmp	r3, #5
 800815e:	d026      	beq.n	80081ae <UART_SetConfig+0x1e9e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b06      	cmp	r3, #6
 8008166:	d020      	beq.n	80081aa <UART_SetConfig+0x1e9a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2b07      	cmp	r3, #7
 800816e:	d01a      	beq.n	80081a6 <UART_SetConfig+0x1e96>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	2b08      	cmp	r3, #8
 8008176:	d014      	beq.n	80081a2 <UART_SetConfig+0x1e92>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b09      	cmp	r3, #9
 800817e:	d00e      	beq.n	800819e <UART_SetConfig+0x1e8e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	2b0a      	cmp	r3, #10
 8008186:	d008      	beq.n	800819a <UART_SetConfig+0x1e8a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b0b      	cmp	r3, #11
 800818e:	d102      	bne.n	8008196 <UART_SetConfig+0x1e86>
 8008190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008194:	e016      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 8008196:	2301      	movs	r3, #1
 8008198:	e014      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	e012      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	e010      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081a2:	2320      	movs	r3, #32
 80081a4:	e00e      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081a6:	2310      	movs	r3, #16
 80081a8:	e00c      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081aa:	230c      	movs	r3, #12
 80081ac:	e00a      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081ae:	230a      	movs	r3, #10
 80081b0:	e008      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081b2:	2308      	movs	r3, #8
 80081b4:	e006      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081b6:	2306      	movs	r3, #6
 80081b8:	e004      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081ba:	2304      	movs	r3, #4
 80081bc:	e002      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081be:	2302      	movs	r3, #2
 80081c0:	e000      	b.n	80081c4 <UART_SetConfig+0x1eb4>
 80081c2:	2301      	movs	r3, #1
 80081c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	441a      	add	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d8:	b29b      	uxth	r3, r3
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081dc:	e1f2      	b.n	80085c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fd fb34 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d044      	beq.n	800827c <UART_SetConfig+0x1f6c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d03e      	beq.n	8008278 <UART_SetConfig+0x1f68>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d038      	beq.n	8008274 <UART_SetConfig+0x1f64>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b03      	cmp	r3, #3
 8008208:	d032      	beq.n	8008270 <UART_SetConfig+0x1f60>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b04      	cmp	r3, #4
 8008210:	d02c      	beq.n	800826c <UART_SetConfig+0x1f5c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b05      	cmp	r3, #5
 8008218:	d026      	beq.n	8008268 <UART_SetConfig+0x1f58>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b06      	cmp	r3, #6
 8008220:	d020      	beq.n	8008264 <UART_SetConfig+0x1f54>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b07      	cmp	r3, #7
 8008228:	d01a      	beq.n	8008260 <UART_SetConfig+0x1f50>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b08      	cmp	r3, #8
 8008230:	d014      	beq.n	800825c <UART_SetConfig+0x1f4c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b09      	cmp	r3, #9
 8008238:	d00e      	beq.n	8008258 <UART_SetConfig+0x1f48>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b0a      	cmp	r3, #10
 8008240:	d008      	beq.n	8008254 <UART_SetConfig+0x1f44>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b0b      	cmp	r3, #11
 8008248:	d102      	bne.n	8008250 <UART_SetConfig+0x1f40>
 800824a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824e:	e016      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008250:	2301      	movs	r3, #1
 8008252:	e014      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008254:	2380      	movs	r3, #128	; 0x80
 8008256:	e012      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008258:	2340      	movs	r3, #64	; 0x40
 800825a:	e010      	b.n	800827e <UART_SetConfig+0x1f6e>
 800825c:	2320      	movs	r3, #32
 800825e:	e00e      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008260:	2310      	movs	r3, #16
 8008262:	e00c      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008264:	230c      	movs	r3, #12
 8008266:	e00a      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008268:	230a      	movs	r3, #10
 800826a:	e008      	b.n	800827e <UART_SetConfig+0x1f6e>
 800826c:	2308      	movs	r3, #8
 800826e:	e006      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008270:	2306      	movs	r3, #6
 8008272:	e004      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008274:	2304      	movs	r3, #4
 8008276:	e002      	b.n	800827e <UART_SetConfig+0x1f6e>
 8008278:	2302      	movs	r3, #2
 800827a:	e000      	b.n	800827e <UART_SetConfig+0x1f6e>
 800827c:	2301      	movs	r3, #1
 800827e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	441a      	add	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	b29b      	uxth	r3, r3
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008296:	e195      	b.n	80085c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008298:	4b87      	ldr	r3, [pc, #540]	; (80084b8 <UART_SetConfig+0x21a8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d05d      	beq.n	8008360 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a4:	4b84      	ldr	r3, [pc, #528]	; (80084b8 <UART_SetConfig+0x21a8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	08db      	lsrs	r3, r3, #3
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	4a83      	ldr	r2, [pc, #524]	; (80084bc <UART_SetConfig+0x21ac>)
 80082b0:	40da      	lsrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d044      	beq.n	8008344 <UART_SetConfig+0x2034>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d03e      	beq.n	8008340 <UART_SetConfig+0x2030>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d038      	beq.n	800833c <UART_SetConfig+0x202c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d032      	beq.n	8008338 <UART_SetConfig+0x2028>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d02c      	beq.n	8008334 <UART_SetConfig+0x2024>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d026      	beq.n	8008330 <UART_SetConfig+0x2020>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d020      	beq.n	800832c <UART_SetConfig+0x201c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b07      	cmp	r3, #7
 80082f0:	d01a      	beq.n	8008328 <UART_SetConfig+0x2018>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d014      	beq.n	8008324 <UART_SetConfig+0x2014>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d00e      	beq.n	8008320 <UART_SetConfig+0x2010>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b0a      	cmp	r3, #10
 8008308:	d008      	beq.n	800831c <UART_SetConfig+0x200c>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	2b0b      	cmp	r3, #11
 8008310:	d102      	bne.n	8008318 <UART_SetConfig+0x2008>
 8008312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008316:	e016      	b.n	8008346 <UART_SetConfig+0x2036>
 8008318:	2301      	movs	r3, #1
 800831a:	e014      	b.n	8008346 <UART_SetConfig+0x2036>
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	e012      	b.n	8008346 <UART_SetConfig+0x2036>
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	e010      	b.n	8008346 <UART_SetConfig+0x2036>
 8008324:	2320      	movs	r3, #32
 8008326:	e00e      	b.n	8008346 <UART_SetConfig+0x2036>
 8008328:	2310      	movs	r3, #16
 800832a:	e00c      	b.n	8008346 <UART_SetConfig+0x2036>
 800832c:	230c      	movs	r3, #12
 800832e:	e00a      	b.n	8008346 <UART_SetConfig+0x2036>
 8008330:	230a      	movs	r3, #10
 8008332:	e008      	b.n	8008346 <UART_SetConfig+0x2036>
 8008334:	2308      	movs	r3, #8
 8008336:	e006      	b.n	8008346 <UART_SetConfig+0x2036>
 8008338:	2306      	movs	r3, #6
 800833a:	e004      	b.n	8008346 <UART_SetConfig+0x2036>
 800833c:	2304      	movs	r3, #4
 800833e:	e002      	b.n	8008346 <UART_SetConfig+0x2036>
 8008340:	2302      	movs	r3, #2
 8008342:	e000      	b.n	8008346 <UART_SetConfig+0x2036>
 8008344:	2301      	movs	r3, #1
 8008346:	fbb2 f2f3 	udiv	r2, r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	441a      	add	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	fbb2 f3f3 	udiv	r3, r2, r3
 800835a:	b29b      	uxth	r3, r3
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800835e:	e131      	b.n	80085c4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d043      	beq.n	80083f0 <UART_SetConfig+0x20e0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b01      	cmp	r3, #1
 800836e:	d03d      	beq.n	80083ec <UART_SetConfig+0x20dc>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b02      	cmp	r3, #2
 8008376:	d037      	beq.n	80083e8 <UART_SetConfig+0x20d8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b03      	cmp	r3, #3
 800837e:	d031      	beq.n	80083e4 <UART_SetConfig+0x20d4>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b04      	cmp	r3, #4
 8008386:	d02b      	beq.n	80083e0 <UART_SetConfig+0x20d0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b05      	cmp	r3, #5
 800838e:	d025      	beq.n	80083dc <UART_SetConfig+0x20cc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b06      	cmp	r3, #6
 8008396:	d01f      	beq.n	80083d8 <UART_SetConfig+0x20c8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b07      	cmp	r3, #7
 800839e:	d019      	beq.n	80083d4 <UART_SetConfig+0x20c4>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d013      	beq.n	80083d0 <UART_SetConfig+0x20c0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d00d      	beq.n	80083cc <UART_SetConfig+0x20bc>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b0a      	cmp	r3, #10
 80083b6:	d007      	beq.n	80083c8 <UART_SetConfig+0x20b8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b0b      	cmp	r3, #11
 80083be:	d101      	bne.n	80083c4 <UART_SetConfig+0x20b4>
 80083c0:	4b3f      	ldr	r3, [pc, #252]	; (80084c0 <UART_SetConfig+0x21b0>)
 80083c2:	e016      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083c4:	4b3d      	ldr	r3, [pc, #244]	; (80084bc <UART_SetConfig+0x21ac>)
 80083c6:	e014      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083c8:	4b3e      	ldr	r3, [pc, #248]	; (80084c4 <UART_SetConfig+0x21b4>)
 80083ca:	e012      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083cc:	4b3e      	ldr	r3, [pc, #248]	; (80084c8 <UART_SetConfig+0x21b8>)
 80083ce:	e010      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083d0:	4b3e      	ldr	r3, [pc, #248]	; (80084cc <UART_SetConfig+0x21bc>)
 80083d2:	e00e      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083d4:	4b3e      	ldr	r3, [pc, #248]	; (80084d0 <UART_SetConfig+0x21c0>)
 80083d6:	e00c      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083d8:	4b3e      	ldr	r3, [pc, #248]	; (80084d4 <UART_SetConfig+0x21c4>)
 80083da:	e00a      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083dc:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <UART_SetConfig+0x21c8>)
 80083de:	e008      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083e0:	4b3e      	ldr	r3, [pc, #248]	; (80084dc <UART_SetConfig+0x21cc>)
 80083e2:	e006      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083e4:	4b3e      	ldr	r3, [pc, #248]	; (80084e0 <UART_SetConfig+0x21d0>)
 80083e6:	e004      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083e8:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <UART_SetConfig+0x21d4>)
 80083ea:	e002      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083ec:	4b3e      	ldr	r3, [pc, #248]	; (80084e8 <UART_SetConfig+0x21d8>)
 80083ee:	e000      	b.n	80083f2 <UART_SetConfig+0x20e2>
 80083f0:	4b32      	ldr	r3, [pc, #200]	; (80084bc <UART_SetConfig+0x21ac>)
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6852      	ldr	r2, [r2, #4]
 80083f6:	0852      	lsrs	r2, r2, #1
 80083f8:	441a      	add	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008402:	b29b      	uxth	r3, r3
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008406:	e0dd      	b.n	80085c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d046      	beq.n	800849e <UART_SetConfig+0x218e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b01      	cmp	r3, #1
 8008416:	d040      	beq.n	800849a <UART_SetConfig+0x218a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b02      	cmp	r3, #2
 800841e:	d03a      	beq.n	8008496 <UART_SetConfig+0x2186>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b03      	cmp	r3, #3
 8008426:	d034      	beq.n	8008492 <UART_SetConfig+0x2182>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b04      	cmp	r3, #4
 800842e:	d02e      	beq.n	800848e <UART_SetConfig+0x217e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b05      	cmp	r3, #5
 8008436:	d028      	beq.n	800848a <UART_SetConfig+0x217a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b06      	cmp	r3, #6
 800843e:	d022      	beq.n	8008486 <UART_SetConfig+0x2176>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b07      	cmp	r3, #7
 8008446:	d01c      	beq.n	8008482 <UART_SetConfig+0x2172>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	2b08      	cmp	r3, #8
 800844e:	d016      	beq.n	800847e <UART_SetConfig+0x216e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	2b09      	cmp	r3, #9
 8008456:	d00f      	beq.n	8008478 <UART_SetConfig+0x2168>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b0a      	cmp	r3, #10
 800845e:	d008      	beq.n	8008472 <UART_SetConfig+0x2162>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b0b      	cmp	r3, #11
 8008466:	d102      	bne.n	800846e <UART_SetConfig+0x215e>
 8008468:	f643 5309 	movw	r3, #15625	; 0x3d09
 800846c:	e018      	b.n	80084a0 <UART_SetConfig+0x2190>
 800846e:	4b18      	ldr	r3, [pc, #96]	; (80084d0 <UART_SetConfig+0x21c0>)
 8008470:	e016      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008472:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008476:	e013      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008478:	f24f 4324 	movw	r3, #62500	; 0xf424
 800847c:	e010      	b.n	80084a0 <UART_SetConfig+0x2190>
 800847e:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <UART_SetConfig+0x21dc>)
 8008480:	e00e      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <UART_SetConfig+0x21b0>)
 8008484:	e00c      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008486:	4b1a      	ldr	r3, [pc, #104]	; (80084f0 <UART_SetConfig+0x21e0>)
 8008488:	e00a      	b.n	80084a0 <UART_SetConfig+0x2190>
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <UART_SetConfig+0x21e4>)
 800848c:	e008      	b.n	80084a0 <UART_SetConfig+0x2190>
 800848e:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <UART_SetConfig+0x21b4>)
 8008490:	e006      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008492:	4b19      	ldr	r3, [pc, #100]	; (80084f8 <UART_SetConfig+0x21e8>)
 8008494:	e004      	b.n	80084a0 <UART_SetConfig+0x2190>
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <UART_SetConfig+0x21b8>)
 8008498:	e002      	b.n	80084a0 <UART_SetConfig+0x2190>
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <UART_SetConfig+0x21bc>)
 800849c:	e000      	b.n	80084a0 <UART_SetConfig+0x2190>
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <UART_SetConfig+0x21c0>)
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6852      	ldr	r2, [r2, #4]
 80084a4:	0852      	lsrs	r2, r2, #1
 80084a6:	441a      	add	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084b4:	e086      	b.n	80085c4 <UART_SetConfig+0x22b4>
 80084b6:	bf00      	nop
 80084b8:	58024400 	.word	0x58024400
 80084bc:	03d09000 	.word	0x03d09000
 80084c0:	0003d090 	.word	0x0003d090
 80084c4:	0007a120 	.word	0x0007a120
 80084c8:	000f4240 	.word	0x000f4240
 80084cc:	001e8480 	.word	0x001e8480
 80084d0:	003d0900 	.word	0x003d0900
 80084d4:	00516155 	.word	0x00516155
 80084d8:	0061a800 	.word	0x0061a800
 80084dc:	007a1200 	.word	0x007a1200
 80084e0:	00a2c2aa 	.word	0x00a2c2aa
 80084e4:	00f42400 	.word	0x00f42400
 80084e8:	01e84800 	.word	0x01e84800
 80084ec:	0001e848 	.word	0x0001e848
 80084f0:	00051615 	.word	0x00051615
 80084f4:	00061a80 	.word	0x00061a80
 80084f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d04e      	beq.n	80085a2 <UART_SetConfig+0x2292>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2b01      	cmp	r3, #1
 800850a:	d047      	beq.n	800859c <UART_SetConfig+0x228c>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	2b02      	cmp	r3, #2
 8008512:	d040      	beq.n	8008596 <UART_SetConfig+0x2286>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2b03      	cmp	r3, #3
 800851a:	d039      	beq.n	8008590 <UART_SetConfig+0x2280>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b04      	cmp	r3, #4
 8008522:	d032      	beq.n	800858a <UART_SetConfig+0x227a>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	2b05      	cmp	r3, #5
 800852a:	d02b      	beq.n	8008584 <UART_SetConfig+0x2274>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b06      	cmp	r3, #6
 8008532:	d024      	beq.n	800857e <UART_SetConfig+0x226e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b07      	cmp	r3, #7
 800853a:	d01d      	beq.n	8008578 <UART_SetConfig+0x2268>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b08      	cmp	r3, #8
 8008542:	d016      	beq.n	8008572 <UART_SetConfig+0x2262>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b09      	cmp	r3, #9
 800854a:	d00f      	beq.n	800856c <UART_SetConfig+0x225c>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b0a      	cmp	r3, #10
 8008552:	d008      	beq.n	8008566 <UART_SetConfig+0x2256>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b0b      	cmp	r3, #11
 800855a:	d101      	bne.n	8008560 <UART_SetConfig+0x2250>
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	e022      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008564:	e01f      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800856a:	e01c      	b.n	80085a6 <UART_SetConfig+0x2296>
 800856c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008570:	e019      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008576:	e016      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800857c:	e013      	b.n	80085a6 <UART_SetConfig+0x2296>
 800857e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008582:	e010      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008584:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008588:	e00d      	b.n	80085a6 <UART_SetConfig+0x2296>
 800858a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800858e:	e00a      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008590:	f241 5355 	movw	r3, #5461	; 0x1555
 8008594:	e007      	b.n	80085a6 <UART_SetConfig+0x2296>
 8008596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800859a:	e004      	b.n	80085a6 <UART_SetConfig+0x2296>
 800859c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085a0:	e001      	b.n	80085a6 <UART_SetConfig+0x2296>
 80085a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6852      	ldr	r2, [r2, #4]
 80085aa:	0852      	lsrs	r2, r2, #1
 80085ac:	441a      	add	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085ba:	e003      	b.n	80085c4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80085c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d908      	bls.n	80085dc <UART_SetConfig+0x22cc>
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d0:	d204      	bcs.n	80085dc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e002      	b.n	80085e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80085fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008602:	4618      	mov	r0, r3
 8008604:	3740      	adds	r7, #64	; 0x40
 8008606:	46bd      	mov	sp, r7
 8008608:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800860c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	f003 0304 	and.w	r3, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01a      	beq.n	8008722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800870a:	d10a      	bne.n	8008722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	605a      	str	r2, [r3, #4]
  }
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af02      	add	r7, sp, #8
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008760:	f7f8 fee2 	bl	8001528 <HAL_GetTick>
 8008764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b08      	cmp	r3, #8
 8008772:	d10e      	bne.n	8008792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f82c 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e022      	b.n	80087d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b04      	cmp	r3, #4
 800879e:	d10e      	bne.n	80087be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f816 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e00c      	b.n	80087d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f0:	e062      	b.n	80088b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d05e      	beq.n	80088b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7f8 fe95 	bl	8001528 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <UART_WaitOnFlagUntilTimeout+0x30>
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d11d      	bne.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800881e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e045      	b.n	80088d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d02e      	beq.n	80088b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008868:	d126      	bne.n	80088b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008872:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008882:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e00f      	b.n	80088d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	bf0c      	ite	eq
 80088c8:	2301      	moveq	r3, #1
 80088ca:	2300      	movne	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d08d      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e027      	b.n	8008946 <HAL_UARTEx_DisableFifoMode+0x66>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2224      	movs	r2, #36	; 0x24
 8008902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0201 	bic.w	r2, r2, #1
 800891c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008966:	2302      	movs	r3, #2
 8008968:	e02d      	b.n	80089c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2224      	movs	r2, #36	; 0x24
 8008976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0201 	bic.w	r2, r2, #1
 8008990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f850 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e02d      	b.n	8008a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2224      	movs	r2, #36	; 0x24
 80089f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f812 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b089      	sub	sp, #36	; 0x24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008a54:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <UARTEx_SetNbDataToProcess+0xc8>)
 8008a56:	f107 0314 	add.w	r3, r7, #20
 8008a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008a62:	4a2d      	ldr	r2, [pc, #180]	; (8008b18 <UARTEx_SetNbDataToProcess+0xcc>)
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d108      	bne.n	8008a8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a88:	e03d      	b.n	8008b06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a8e:	2308      	movs	r3, #8
 8008a90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	0e5b      	lsrs	r3, r3, #25
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	0f5b      	lsrs	r3, r3, #29
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008ab2:	7fbb      	ldrb	r3, [r7, #30]
 8008ab4:	7f3a      	ldrb	r2, [r7, #28]
 8008ab6:	f107 0120 	add.w	r1, r7, #32
 8008aba:	440a      	add	r2, r1
 8008abc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ac0:	fb02 f303 	mul.w	r3, r2, r3
 8008ac4:	7f3a      	ldrb	r2, [r7, #28]
 8008ac6:	f107 0120 	add.w	r1, r7, #32
 8008aca:	440a      	add	r2, r1
 8008acc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008adc:	7ffb      	ldrb	r3, [r7, #31]
 8008ade:	7f7a      	ldrb	r2, [r7, #29]
 8008ae0:	f107 0120 	add.w	r1, r7, #32
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	7f7a      	ldrb	r2, [r7, #29]
 8008af0:	f107 0120 	add.w	r1, r7, #32
 8008af4:	440a      	add	r2, r1
 8008af6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b06:	bf00      	nop
 8008b08:	3724      	adds	r7, #36	; 0x24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	080186a4 	.word	0x080186a4
 8008b18:	080186ac 	.word	0x080186ac

08008b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	f107 001c 	add.w	r0, r7, #28
 8008b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d120      	bne.n	8008b76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <USB_CoreInit+0xc0>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d105      	bne.n	8008b6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fa4c 	bl	8009008 <USB_CoreReset>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
 8008b74:	e01a      	b.n	8008bac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa40 	bl	8009008 <USB_CoreReset>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b9e:	e005      	b.n	8008bac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d10b      	bne.n	8008bca <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f043 0206 	orr.w	r2, r3, #6
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f043 0220 	orr.w	r2, r3, #32
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bd6:	b004      	add	sp, #16
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	ffbdffbf 	.word	0xffbdffbf

08008be0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f023 0201 	bic.w	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d106      	bne.n	8008c2e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	e00b      	b.n	8008c46 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]
 8008c40:	e001      	b.n	8008c46 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e003      	b.n	8008c4e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c46:	2032      	movs	r0, #50	; 0x32
 8008c48:	f7f8 fc7a 	bl	8001540 <HAL_Delay>

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c58:	b084      	sub	sp, #16
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e009      	b.n	8008c8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	3340      	adds	r3, #64	; 0x40
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	2200      	movs	r2, #0
 8008c84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b0e      	cmp	r3, #14
 8008c90:	d9f2      	bls.n	8008c78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d11c      	bne.n	8008cd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca6:	f043 0302 	orr.w	r3, r3, #2
 8008caa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e005      	b.n	8008cde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	680b      	ldr	r3, [r1, #0]
 8008cfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d10c      	bne.n	8008d1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f949 	bl	8008fa4 <USB_SetDevSpeed>
 8008d12:	e008      	b.n	8008d26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d14:	2101      	movs	r1, #1
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f944 	bl	8008fa4 <USB_SetDevSpeed>
 8008d1c:	e003      	b.n	8008d26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d1e:	2103      	movs	r1, #3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f93f 	bl	8008fa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d26:	2110      	movs	r1, #16
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8f3 	bl	8008f14 <USB_FlushTxFifo>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f911 	bl	8008f60 <USB_FlushRxFifo>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	461a      	mov	r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	e043      	b.n	8008dfa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d88:	d118      	bne.n	8008dbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e013      	b.n	8008dce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db2:	461a      	mov	r2, r3
 8008db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e008      	b.n	8008dce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dda:	461a      	mov	r2, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	461a      	mov	r2, r3
 8008dee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3301      	adds	r3, #1
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3b7      	bcc.n	8008d72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	e043      	b.n	8008e90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e1e:	d118      	bne.n	8008e52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	461a      	mov	r2, r3
 8008e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e013      	b.n	8008e64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	e008      	b.n	8008e64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	461a      	mov	r2, r3
 8008e60:	2300      	movs	r3, #0
 8008e62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e70:	461a      	mov	r2, r3
 8008e72:	2300      	movs	r3, #0
 8008e74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	461a      	mov	r2, r3
 8008e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d3b7      	bcc.n	8008e08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008eb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f043 0210 	orr.w	r2, r3, #16
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <USB_DevInit+0x2b4>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f043 0208 	orr.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d105      	bne.n	8008efc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <USB_DevInit+0x2b8>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f08:	b004      	add	sp, #16
 8008f0a:	4770      	bx	lr
 8008f0c:	803c3800 	.word	0x803c3800
 8008f10:	40000004 	.word	0x40000004

08008f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	019b      	lsls	r3, r3, #6
 8008f26:	f043 0220 	orr.w	r2, r3, #32
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <USB_FlushTxFifo+0x48>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d901      	bls.n	8008f40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d0f0      	beq.n	8008f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	00030d40 	.word	0x00030d40

08008f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2210      	movs	r2, #16
 8008f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <USB_FlushRxFifo+0x40>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d901      	bls.n	8008f84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e006      	b.n	8008f92 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f003 0310 	and.w	r3, r3, #16
 8008f8c:	2b10      	cmp	r3, #16
 8008f8e:	d0f0      	beq.n	8008f72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	00030d40 	.word	0x00030d40

08008fa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ff0:	f043 0302 	orr.w	r3, r3, #2
 8008ff4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008ff6:	2003      	movs	r0, #3
 8008ff8:	f7f8 faa2 	bl	8001540 <HAL_Delay>

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a13      	ldr	r2, [pc, #76]	; (800906c <USB_CoreReset+0x64>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e01b      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	daf2      	bge.n	8009014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f043 0201 	orr.w	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a09      	ldr	r2, [pc, #36]	; (800906c <USB_CoreReset+0x64>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d901      	bls.n	8009050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e006      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	d0f0      	beq.n	800903e <USB_CoreReset+0x36>

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	00030d40 	.word	0x00030d40

08009070 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009076:	2100      	movs	r1, #0
 8009078:	2000      	movs	r0, #0
 800907a:	f003 fbb5 	bl	800c7e8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800907e:	4b17      	ldr	r3, [pc, #92]	; (80090dc <MX_LWIP_Init+0x6c>)
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009084:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <MX_LWIP_Init+0x70>)
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800908a:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <MX_LWIP_Init+0x74>)
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009090:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <MX_LWIP_Init+0x78>)
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <MX_LWIP_Init+0x7c>)
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <MX_LWIP_Init+0x74>)
 800909e:	4a10      	ldr	r2, [pc, #64]	; (80090e0 <MX_LWIP_Init+0x70>)
 80090a0:	490e      	ldr	r1, [pc, #56]	; (80090dc <MX_LWIP_Init+0x6c>)
 80090a2:	4813      	ldr	r0, [pc, #76]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090a4:	f004 f89e 	bl	800d1e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80090a8:	4811      	ldr	r0, [pc, #68]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090aa:	f004 f983 	bl	800d3b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80090ae:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80090c0:	480b      	ldr	r0, [pc, #44]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090c2:	f004 f987 	bl	800d3d4 <netif_set_up>
 80090c6:	e002      	b.n	80090ce <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80090c8:	4809      	ldr	r0, [pc, #36]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090ca:	f004 f9c7 	bl	800d45c <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80090ce:	4808      	ldr	r0, [pc, #32]	; (80090f0 <MX_LWIP_Init+0x80>)
 80090d0:	f00a fc2e 	bl	8013930 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80090d4:	bf00      	nop
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20004714 	.word	0x20004714
 80090e0:	20004718 	.word	0x20004718
 80090e4:	2000471c 	.word	0x2000471c
 80090e8:	0800c711 	.word	0x0800c711
 80090ec:	08009749 	.word	0x08009749
 80090f0:	200046e0 	.word	0x200046e0

080090f4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009106:	2320      	movs	r3, #32
 8009108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800910a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800910e:	e00b      	b.n	8009128 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009110:	4a0c      	ldr	r2, [pc, #48]	; (8009144 <SCB_InvalidateDCache_by_Addr+0x50>)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4413      	add	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dcf0      	bgt.n	8009110 <SCB_InvalidateDCache_by_Addr+0x1c>
 800912e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009132:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	e000ed00 	.word	0xe000ed00

08009148 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08e      	sub	sp, #56	; 0x38
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	609a      	str	r2, [r3, #8]
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a59      	ldr	r2, [pc, #356]	; (80092cc <HAL_ETH_MspInit+0x184>)
 8009166:	4293      	cmp	r3, r2
 8009168:	f040 80ab 	bne.w	80092c2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800916c:	4b58      	ldr	r3, [pc, #352]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 800916e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009172:	4a57      	ldr	r2, [pc, #348]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009178:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800917c:	4b54      	ldr	r3, [pc, #336]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 800917e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009186:	623b      	str	r3, [r7, #32]
 8009188:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800918a:	4b51      	ldr	r3, [pc, #324]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 800918c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009190:	4a4f      	ldr	r2, [pc, #316]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009196:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800919a:	4b4d      	ldr	r3, [pc, #308]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 800919c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80091a8:	4b49      	ldr	r3, [pc, #292]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091ae:	4a48      	ldr	r2, [pc, #288]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80091b8:	4b45      	ldr	r3, [pc, #276]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80091c6:	4b42      	ldr	r3, [pc, #264]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091cc:	4a40      	ldr	r2, [pc, #256]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091ce:	f043 0304 	orr.w	r3, r3, #4
 80091d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091d6:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091e4:	4b3a      	ldr	r3, [pc, #232]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ea:	4a39      	ldr	r2, [pc, #228]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091f4:	4b36      	ldr	r3, [pc, #216]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 80091f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009202:	4b33      	ldr	r3, [pc, #204]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009208:	4a31      	ldr	r2, [pc, #196]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 800920a:	f043 0302 	orr.w	r3, r3, #2
 800920e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009212:	4b2f      	ldr	r3, [pc, #188]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009220:	4b2b      	ldr	r3, [pc, #172]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009226:	4a2a      	ldr	r2, [pc, #168]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009230:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <HAL_ETH_MspInit+0x188>)
 8009232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	60bb      	str	r3, [r7, #8]
 800923c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800923e:	2332      	movs	r3, #50	; 0x32
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009242:	2302      	movs	r3, #2
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009246:	2300      	movs	r3, #0
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924a:	2300      	movs	r3, #0
 800924c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800924e:	230b      	movs	r3, #11
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009256:	4619      	mov	r1, r3
 8009258:	481e      	ldr	r0, [pc, #120]	; (80092d4 <HAL_ETH_MspInit+0x18c>)
 800925a:	f7f9 ff71 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800925e:	2386      	movs	r3, #134	; 0x86
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009262:	2302      	movs	r3, #2
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009266:	2300      	movs	r3, #0
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800926a:	2300      	movs	r3, #0
 800926c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800926e:	230b      	movs	r3, #11
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009276:	4619      	mov	r1, r3
 8009278:	4817      	ldr	r0, [pc, #92]	; (80092d8 <HAL_ETH_MspInit+0x190>)
 800927a:	f7f9 ff61 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800927e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009284:	2302      	movs	r3, #2
 8009286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009288:	2300      	movs	r3, #0
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800928c:	2300      	movs	r3, #0
 800928e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009290:	230b      	movs	r3, #11
 8009292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009298:	4619      	mov	r1, r3
 800929a:	4810      	ldr	r0, [pc, #64]	; (80092dc <HAL_ETH_MspInit+0x194>)
 800929c:	f7f9 ff50 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80092a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a6:	2302      	movs	r3, #2
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ae:	2300      	movs	r3, #0
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80092b2:	230b      	movs	r3, #11
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80092b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ba:	4619      	mov	r1, r3
 80092bc:	4808      	ldr	r0, [pc, #32]	; (80092e0 <HAL_ETH_MspInit+0x198>)
 80092be:	f7f9 ff3f 	bl	8003140 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80092c2:	bf00      	nop
 80092c4:	3738      	adds	r7, #56	; 0x38
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40028000 	.word	0x40028000
 80092d0:	58024400 	.word	0x58024400
 80092d4:	58020800 	.word	0x58020800
 80092d8:	58020000 	.word	0x58020000
 80092dc:	58020400 	.word	0x58020400
 80092e0:	58021800 	.word	0x58021800

080092e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80092e4:	b5b0      	push	{r4, r5, r7, lr}
 80092e6:	b0ac      	sub	sp, #176	; 0xb0
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80092f8:	4b90      	ldr	r3, [pc, #576]	; (800953c <low_level_init+0x258>)
 80092fa:	4a91      	ldr	r2, [pc, #580]	; (8009540 <low_level_init+0x25c>)
 80092fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80092fe:	2300      	movs	r3, #0
 8009300:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800930a:	23e1      	movs	r3, #225	; 0xe1
 800930c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800931c:	2300      	movs	r3, #0
 800931e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009322:	4a86      	ldr	r2, [pc, #536]	; (800953c <low_level_init+0x258>)
 8009324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009328:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800932a:	4b84      	ldr	r3, [pc, #528]	; (800953c <low_level_init+0x258>)
 800932c:	2201      	movs	r2, #1
 800932e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009330:	4b82      	ldr	r3, [pc, #520]	; (800953c <low_level_init+0x258>)
 8009332:	4a84      	ldr	r2, [pc, #528]	; (8009544 <low_level_init+0x260>)
 8009334:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009336:	4b81      	ldr	r3, [pc, #516]	; (800953c <low_level_init+0x258>)
 8009338:	4a83      	ldr	r2, [pc, #524]	; (8009548 <low_level_init+0x264>)
 800933a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800933c:	4b7f      	ldr	r3, [pc, #508]	; (800953c <low_level_init+0x258>)
 800933e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009342:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009344:	487d      	ldr	r0, [pc, #500]	; (800953c <low_level_init+0x258>)
 8009346:	f7f8 fa1d 	bl	8001784 <HAL_ETH_Init>
 800934a:	4603      	mov	r3, r0
 800934c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009350:	2234      	movs	r2, #52	; 0x34
 8009352:	2100      	movs	r1, #0
 8009354:	487d      	ldr	r0, [pc, #500]	; (800954c <low_level_init+0x268>)
 8009356:	f00e fa4f 	bl	80177f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800935a:	4b7c      	ldr	r3, [pc, #496]	; (800954c <low_level_init+0x268>)
 800935c:	2221      	movs	r2, #33	; 0x21
 800935e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009360:	4b7a      	ldr	r3, [pc, #488]	; (800954c <low_level_init+0x268>)
 8009362:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009366:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009368:	4b78      	ldr	r3, [pc, #480]	; (800954c <low_level_init+0x268>)
 800936a:	2200      	movs	r2, #0
 800936c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800936e:	4878      	ldr	r0, [pc, #480]	; (8009550 <low_level_init+0x26c>)
 8009370:	f003 fdf2 	bl	800cf58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2206      	movs	r2, #6
 8009378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800937c:	4b6f      	ldr	r3, [pc, #444]	; (800953c <low_level_init+0x258>)
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009388:	4b6c      	ldr	r3, [pc, #432]	; (800953c <low_level_init+0x258>)
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	785a      	ldrb	r2, [r3, #1]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009394:	4b69      	ldr	r3, [pc, #420]	; (800953c <low_level_init+0x258>)
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	789a      	ldrb	r2, [r3, #2]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80093a0:	4b66      	ldr	r3, [pc, #408]	; (800953c <low_level_init+0x258>)
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	78da      	ldrb	r2, [r3, #3]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80093ac:	4b63      	ldr	r3, [pc, #396]	; (800953c <low_level_init+0x258>)
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	791a      	ldrb	r2, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80093b8:	4b60      	ldr	r3, [pc, #384]	; (800953c <low_level_init+0x258>)
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	795a      	ldrb	r2, [r3, #5]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80093ca:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093d2:	f043 030a 	orr.w	r3, r3, #10
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80093de:	2300      	movs	r3, #0
 80093e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093e4:	e012      	b.n	800940c <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80093e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093ea:	4613      	mov	r3, r2
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	4413      	add	r3, r2
 80093f0:	025b      	lsls	r3, r3, #9
 80093f2:	4a58      	ldr	r2, [pc, #352]	; (8009554 <low_level_init+0x270>)
 80093f4:	441a      	add	r2, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80093fc:	484f      	ldr	r0, [pc, #316]	; (800953c <low_level_init+0x258>)
 80093fe:	f7f8 fa9b 	bl	8001938 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009406:	3301      	adds	r3, #1
 8009408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800940c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009410:	2b03      	cmp	r3, #3
 8009412:	d9e8      	bls.n	80093e6 <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009414:	2300      	movs	r3, #0
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28
 8009418:	2300      	movs	r3, #0
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800941c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009420:	2101      	movs	r1, #1
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fb68 	bl	8009af8 <osSemaphoreCreate>
 8009428:	4602      	mov	r2, r0
 800942a:	4b4b      	ldr	r3, [pc, #300]	; (8009558 <low_level_init+0x274>)
 800942c:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800942e:	4b4b      	ldr	r3, [pc, #300]	; (800955c <low_level_init+0x278>)
 8009430:	f107 040c 	add.w	r4, r7, #12
 8009434:	461d      	mov	r5, r3
 8009436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800943a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800943e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fa59 	bl	8009900 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800944e:	4944      	ldr	r1, [pc, #272]	; (8009560 <low_level_init+0x27c>)
 8009450:	4844      	ldr	r0, [pc, #272]	; (8009564 <low_level_init+0x280>)
 8009452:	f7f7 feb8 	bl	80011c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009456:	4843      	ldr	r0, [pc, #268]	; (8009564 <low_level_init+0x280>)
 8009458:	f7f7 fee7 	bl	800122a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800945c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d164      	bne.n	800952e <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009464:	483f      	ldr	r0, [pc, #252]	; (8009564 <low_level_init+0x280>)
 8009466:	f7f7 ff88 	bl	800137a <LAN8742_GetLinkState>
 800946a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800946e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009472:	2b01      	cmp	r3, #1
 8009474:	dc06      	bgt.n	8009484 <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f004 f838 	bl	800d4ec <netif_set_link_down>
      netif_set_down(netif);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f003 ffed 	bl	800d45c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009482:	e056      	b.n	8009532 <low_level_init+0x24e>
      switch (PHYLinkState)
 8009484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009488:	3b02      	subs	r3, #2
 800948a:	2b03      	cmp	r3, #3
 800948c:	d82a      	bhi.n	80094e4 <low_level_init+0x200>
 800948e:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <low_level_init+0x1b0>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094b7 	.word	0x080094b7
 800949c:	080094c7 	.word	0x080094c7
 80094a0:	080094d7 	.word	0x080094d7
        duplex = ETH_FULLDUPLEX_MODE;
 80094a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80094ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80094b4:	e01f      	b.n	80094f6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80094bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80094c4:	e017      	b.n	80094f6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80094c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80094ce:	2300      	movs	r3, #0
 80094d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80094d4:	e00f      	b.n	80094f6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80094e2:	e008      	b.n	80094f6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80094e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80094ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 80094f4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 80094f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094fa:	4619      	mov	r1, r3
 80094fc:	480f      	ldr	r0, [pc, #60]	; (800953c <low_level_init+0x258>)
 80094fe:	f7f8 fe49 	bl	8002194 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009506:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8009508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800950c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800950e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009512:	4619      	mov	r1, r3
 8009514:	4809      	ldr	r0, [pc, #36]	; (800953c <low_level_init+0x258>)
 8009516:	f7f9 f811 	bl	800253c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800951a:	4808      	ldr	r0, [pc, #32]	; (800953c <low_level_init+0x258>)
 800951c:	f7f8 fa4d 	bl	80019ba <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f003 ff57 	bl	800d3d4 <netif_set_up>
    netif_set_link_up(netif);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f003 ffba 	bl	800d4a0 <netif_set_link_up>
}
 800952c:	e001      	b.n	8009532 <low_level_init+0x24e>
    Error_Handler();
 800952e:	f7f7 fbbf 	bl	8000cb0 <Error_Handler>
}
 8009532:	bf00      	nop
 8009534:	37b0      	adds	r7, #176	; 0xb0
 8009536:	46bd      	mov	sp, r7
 8009538:	bdb0      	pop	{r4, r5, r7, pc}
 800953a:	bf00      	nop
 800953c:	2000480c 	.word	0x2000480c
 8009540:	40028000 	.word	0x40028000
 8009544:	30040060 	.word	0x30040060
 8009548:	30040000 	.word	0x30040000
 800954c:	2000487c 	.word	0x2000487c
 8009550:	0801abd0 	.word	0x0801abd0
 8009554:	30040200 	.word	0x30040200
 8009558:	2000030c 	.word	0x2000030c
 800955c:	080186bc 	.word	0x080186bc
 8009560:	20000010 	.word	0x20000010
 8009564:	200047ec 	.word	0x200047ec

08009568 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b092      	sub	sp, #72	; 0x48
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	647b      	str	r3, [r7, #68]	; 0x44
 8009576:	2300      	movs	r3, #0
 8009578:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009580:	f107 0308 	add.w	r3, r7, #8
 8009584:	2230      	movs	r2, #48	; 0x30
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f00e f935 	bl	80177f8 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009592:	e04f      	b.n	8009634 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8009594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009596:	2b03      	cmp	r3, #3
 8009598:	d902      	bls.n	80095a0 <low_level_output+0x38>
      return ERR_IF;
 800959a:	f06f 030b 	mvn.w	r3, #11
 800959e:	e05a      	b.n	8009656 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 80095a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a2:	6859      	ldr	r1, [r3, #4]
 80095a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095a6:	4613      	mov	r3, r2
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095b2:	4413      	add	r3, r2
 80095b4:	3b40      	subs	r3, #64	; 0x40
 80095b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80095b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ba:	895b      	ldrh	r3, [r3, #10]
 80095bc:	4619      	mov	r1, r3
 80095be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095cc:	4413      	add	r3, r2
 80095ce:	3b3c      	subs	r3, #60	; 0x3c
 80095d0:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 80095d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d4:	895b      	ldrh	r3, [r3, #10]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095da:	4413      	add	r3, r2
 80095dc:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 80095de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d012      	beq.n	800960a <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80095e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e6:	1e5a      	subs	r2, r3, #1
 80095e8:	f107 0008 	add.w	r0, r7, #8
 80095ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095ee:	460b      	mov	r3, r1
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	440b      	add	r3, r1
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	18c1      	adds	r1, r0, r3
 80095f8:	4613      	mov	r3, r2
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009604:	4413      	add	r3, r2
 8009606:	3b38      	subs	r3, #56	; 0x38
 8009608:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 8009612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009614:	4613      	mov	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009620:	4413      	add	r3, r2
 8009622:	3b38      	subs	r3, #56	; 0x38
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962a:	3301      	adds	r3, #1
 800962c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1ac      	bne.n	8009594 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800963a:	4a09      	ldr	r2, [pc, #36]	; (8009660 <low_level_output+0xf8>)
 800963c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963e:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009640:	4a07      	ldr	r2, [pc, #28]	; (8009660 <low_level_output+0xf8>)
 8009642:	f107 0308 	add.w	r3, r7, #8
 8009646:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009648:	2214      	movs	r2, #20
 800964a:	4905      	ldr	r1, [pc, #20]	; (8009660 <low_level_output+0xf8>)
 800964c:	4805      	ldr	r0, [pc, #20]	; (8009664 <low_level_output+0xfc>)
 800964e:	f7f8 fa4a 	bl	8001ae6 <HAL_ETH_Transmit>
  
  return errval;
 8009652:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009656:	4618      	mov	r0, r3
 8009658:	3748      	adds	r7, #72	; 0x48
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000487c 	.word	0x2000487c
 8009664:	2000480c 	.word	0x2000480c

08009668 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08a      	sub	sp, #40	; 0x28
 800966c:	af02      	add	r7, sp, #8
 800966e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009678:	f107 030c 	add.w	r3, r7, #12
 800967c:	4619      	mov	r1, r3
 800967e:	4817      	ldr	r0, [pc, #92]	; (80096dc <low_level_input+0x74>)
 8009680:	f7f8 fb9b 	bl	8001dba <HAL_ETH_GetRxDataBuffer>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d122      	bne.n	80096d0 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4619      	mov	r1, r3
 8009690:	4812      	ldr	r0, [pc, #72]	; (80096dc <low_level_input+0x74>)
 8009692:	f7f8 fc30 	bl	8001ef6 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009696:	4811      	ldr	r0, [pc, #68]	; (80096dc <low_level_input+0x74>)
 8009698:	f7f8 fc60 	bl	8001f5c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fd26 	bl	80090f4 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80096a8:	480d      	ldr	r0, [pc, #52]	; (80096e0 <low_level_input+0x78>)
 80096aa:	f003 fcd1 	bl	800d050 <memp_malloc_pool>
 80096ae:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <low_level_input+0x7c>)
 80096b4:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	b299      	uxth	r1, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2202      	movs	r2, #2
 80096c8:	2004      	movs	r0, #4
 80096ca:	f004 f91d 	bl	800d908 <pbuf_alloced_custom>
 80096ce:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 80096d0:	69fb      	ldr	r3, [r7, #28]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2000480c 	.word	0x2000480c
 80096e0:	0801abd0 	.word	0x0801abd0
 80096e4:	080097a5 	.word	0x080097a5

080096e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <ethernetif_input+0x58>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f04f 31ff 	mov.w	r1, #4294967295
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fa2f 	bl	8009b60 <osSemaphoreWait>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f5      	bne.n	80096f4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009708:	480e      	ldr	r0, [pc, #56]	; (8009744 <ethernetif_input+0x5c>)
 800970a:	f00d ffd7 	bl	80176bc <sys_mutex_lock>
        p = low_level_input( netif );
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff ffaa 	bl	8009668 <low_level_input>
 8009714:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	68f9      	ldr	r1, [r7, #12]
 8009722:	68b8      	ldr	r0, [r7, #8]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800972c:	68b8      	ldr	r0, [r7, #8]
 800972e:	f004 fac9 	bl	800dcc4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009732:	4804      	ldr	r0, [pc, #16]	; (8009744 <ethernetif_input+0x5c>)
 8009734:	f00d ffd1 	bl	80176da <sys_mutex_unlock>
      } while(p!=NULL);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e4      	bne.n	8009708 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800973e:	e7d9      	b.n	80096f4 <ethernetif_input+0xc>
 8009740:	2000030c 	.word	0x2000030c
 8009744:	200048b0 	.word	0x200048b0

08009748 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <ethernetif_init+0x1c>
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <ethernetif_init+0x48>)
 8009758:	f240 223b 	movw	r2, #571	; 0x23b
 800975c:	490d      	ldr	r1, [pc, #52]	; (8009794 <ethernetif_init+0x4c>)
 800975e:	480e      	ldr	r0, [pc, #56]	; (8009798 <ethernetif_init+0x50>)
 8009760:	f00e f852 	bl	8017808 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2273      	movs	r2, #115	; 0x73
 8009768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2274      	movs	r2, #116	; 0x74
 8009770:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <ethernetif_init+0x54>)
 8009778:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a08      	ldr	r2, [pc, #32]	; (80097a0 <ethernetif_init+0x58>)
 800977e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff fdaf 	bl	80092e4 <low_level_init>

  return ERR_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	080186d8 	.word	0x080186d8
 8009794:	080186f4 	.word	0x080186f4
 8009798:	08018704 	.word	0x08018704
 800979c:	08015915 	.word	0x08015915
 80097a0:	08009569 	.word	0x08009569

080097a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	891b      	ldrh	r3, [r3, #8]
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7ff fc9a 	bl	80090f4 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80097c0:	68f9      	ldr	r1, [r7, #12]
 80097c2:	4803      	ldr	r0, [pc, #12]	; (80097d0 <pbuf_free_custom+0x2c>)
 80097c4:	f003 fcb8 	bl	800d138 <memp_free_pool>
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	0801abd0 	.word	0x0801abd0

080097d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80097d8:	f7f7 fea6 	bl	8001528 <HAL_GetTick>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80097e8:	4802      	ldr	r0, [pc, #8]	; (80097f4 <ETH_PHY_IO_Init+0x10>)
 80097ea:	f7f8 fec1 	bl	8002570 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	2000480c 	.word	0x2000480c

080097f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return 0;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	68f9      	ldr	r1, [r7, #12]
 800981a:	4807      	ldr	r0, [pc, #28]	; (8009838 <ETH_PHY_IO_ReadReg+0x30>)
 800981c:	f7f8 fc12 	bl	8002044 <HAL_ETH_ReadPHYRegister>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009826:	f04f 33ff 	mov.w	r3, #4294967295
 800982a:	e000      	b.n	800982e <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	2000480c 	.word	0x2000480c

0800983c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	4807      	ldr	r0, [pc, #28]	; (800986c <ETH_PHY_IO_WriteReg+0x30>)
 8009850:	f7f8 fc4c 	bl	80020ec <HAL_ETH_WritePHYRegister>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800985a:	f04f 33ff 	mov.w	r3, #4294967295
 800985e:	e000      	b.n	8009862 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	2000480c 	.word	0x2000480c

08009870 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009874:	f7f7 fe58 	bl	8001528 <HAL_GetTick>
 8009878:	4603      	mov	r3, r0
}
 800987a:	4618      	mov	r0, r3
 800987c:	bd80      	pop	{r7, pc}

0800987e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	4603      	mov	r3, r0
 8009886:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800988c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009890:	2b84      	cmp	r3, #132	; 0x84
 8009892:	d005      	beq.n	80098a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	3303      	adds	r3, #3
 800989e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80098a0:	68fb      	ldr	r3, [r7, #12]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b4:	f3ef 8305 	mrs	r3, IPSR
 80098b8:	607b      	str	r3, [r7, #4]
  return(result);
 80098ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bf14      	ite	ne
 80098c0:	2301      	movne	r3, #1
 80098c2:	2300      	moveq	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80098d6:	f001 fc0d 	bl	800b0f4 <vTaskStartScheduler>
  
  return osOK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}

080098e0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80098e4:	f7ff ffe3 	bl	80098ae <inHandlerMode>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80098ee:	f001 fd19 	bl	800b324 <xTaskGetTickCountFromISR>
 80098f2:	4603      	mov	r3, r0
 80098f4:	e002      	b.n	80098fc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80098f6:	f001 fd05 	bl	800b304 <xTaskGetTickCount>
 80098fa:	4603      	mov	r3, r0
  }
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	bd80      	pop	{r7, pc}

08009900 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009902:	b089      	sub	sp, #36	; 0x24
 8009904:	af04      	add	r7, sp, #16
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d020      	beq.n	8009954 <osThreadCreate+0x54>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d01c      	beq.n	8009954 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685c      	ldr	r4, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691e      	ldr	r6, [r3, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff ffa6 	bl	800987e <makeFreeRtosPriority>
 8009932:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	9100      	str	r1, [sp, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	4632      	mov	r2, r6
 8009946:	4629      	mov	r1, r5
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fa10 	bl	800ad6e <xTaskCreateStatic>
 800994e:	4603      	mov	r3, r0
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e01c      	b.n	800998e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685c      	ldr	r4, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009960:	b29e      	uxth	r6, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff ff88 	bl	800987e <makeFreeRtosPriority>
 800996e:	4602      	mov	r2, r0
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	9200      	str	r2, [sp, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	4632      	mov	r2, r6
 800997c:	4629      	mov	r1, r5
 800997e:	4620      	mov	r0, r4
 8009980:	f001 fa4f 	bl	800ae22 <xTaskCreate>
 8009984:	4603      	mov	r3, r0
 8009986:	2b01      	cmp	r3, #1
 8009988:	d001      	beq.n	800998e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800998e:	68fb      	ldr	r3, [r7, #12]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009998 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <osDelay+0x16>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	e000      	b.n	80099b0 <osDelay+0x18>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 fb6b 	bl	800b08c <vTaskDelay>
  
  return osOK;
 80099b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d007      	beq.n	80099e0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	4619      	mov	r1, r3
 80099d6:	2001      	movs	r0, #1
 80099d8:	f000 fc0d 	bl	800a1f6 <xQueueCreateMutexStatic>
 80099dc:	4603      	mov	r3, r0
 80099de:	e003      	b.n	80099e8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80099e0:	2001      	movs	r0, #1
 80099e2:	f000 fbf0 	bl	800a1c6 <xQueueCreateMutex>
 80099e6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80099fa:	2300      	movs	r3, #0
 80099fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <osMutexWait+0x18>
    return osErrorParameter;
 8009a04:	2380      	movs	r3, #128	; 0x80
 8009a06:	e03a      	b.n	8009a7e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a12:	d103      	bne.n	8009a1c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e009      	b.n	8009a30 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <osMutexWait+0x40>
      ticks = 1;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a30:	f7ff ff3d 	bl	80098ae <inHandlerMode>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d017      	beq.n	8009a6a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a3a:	f107 0308 	add.w	r3, r7, #8
 8009a3e:	461a      	mov	r2, r3
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 ffee 	bl	800aa24 <xQueueReceiveFromISR>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d001      	beq.n	8009a52 <osMutexWait+0x62>
      return osErrorOS;
 8009a4e:	23ff      	movs	r3, #255	; 0xff
 8009a50:	e015      	b.n	8009a7e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d011      	beq.n	8009a7c <osMutexWait+0x8c>
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <osMutexWait+0x98>)
 8009a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	e008      	b.n	8009a7c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fed1 	bl	800a814 <xQueueSemaphoreTake>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d001      	beq.n	8009a7c <osMutexWait+0x8c>
    return osErrorOS;
 8009a78:	23ff      	movs	r3, #255	; 0xff
 8009a7a:	e000      	b.n	8009a7e <osMutexWait+0x8e>
  }
  
  return osOK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009a9c:	f7ff ff07 	bl	80098ae <inHandlerMode>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009aa6:	f107 0308 	add.w	r3, r7, #8
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fd4b 	bl	800a548 <xQueueGiveFromISR>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d001      	beq.n	8009abc <osMutexRelease+0x30>
      return osErrorOS;
 8009ab8:	23ff      	movs	r3, #255	; 0xff
 8009aba:	e017      	b.n	8009aec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d013      	beq.n	8009aea <osMutexRelease+0x5e>
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <osMutexRelease+0x68>)
 8009ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	e00a      	b.n	8009aea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2100      	movs	r1, #0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fba6 	bl	800a22c <xQueueGenericSend>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d001      	beq.n	8009aea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009ae6:	23ff      	movs	r3, #255	; 0xff
 8009ae8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009aea:	68fb      	ldr	r3, [r7, #12]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000ed04 	.word	0xe000ed04

08009af8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d010      	beq.n	8009b2c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d10b      	bne.n	8009b28 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	2303      	movs	r3, #3
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f000 fa66 	bl	8009ff0 <xQueueGenericCreateStatic>
 8009b24:	4603      	mov	r3, r0
 8009b26:	e016      	b.n	8009b56 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e014      	b.n	8009b56 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d110      	bne.n	8009b54 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009b32:	2203      	movs	r2, #3
 8009b34:	2100      	movs	r1, #0
 8009b36:	2001      	movs	r0, #1
 8009b38:	f000 facd 	bl	800a0d6 <xQueueGenericCreate>
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <osSemaphoreCreate+0x58>
 8009b44:	2300      	movs	r3, #0
 8009b46:	2200      	movs	r2, #0
 8009b48:	2100      	movs	r1, #0
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 fb6e 	bl	800a22c <xQueueGenericSend>
      return sema;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	e000      	b.n	8009b56 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009b54:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009b74:	2380      	movs	r3, #128	; 0x80
 8009b76:	e03a      	b.n	8009bee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d103      	bne.n	8009b8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	e009      	b.n	8009ba0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d006      	beq.n	8009ba0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <osSemaphoreWait+0x40>
      ticks = 1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ba0:	f7ff fe85 	bl	80098ae <inHandlerMode>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d017      	beq.n	8009bda <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009baa:	f107 0308 	add.w	r3, r7, #8
 8009bae:	461a      	mov	r2, r3
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 ff36 	bl	800aa24 <xQueueReceiveFromISR>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d001      	beq.n	8009bc2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009bbe:	23ff      	movs	r3, #255	; 0xff
 8009bc0:	e015      	b.n	8009bee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d011      	beq.n	8009bec <osSemaphoreWait+0x8c>
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <osSemaphoreWait+0x98>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	e008      	b.n	8009bec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fe19 	bl	800a814 <xQueueSemaphoreTake>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d001      	beq.n	8009bec <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009be8:	23ff      	movs	r3, #255	; 0xff
 8009bea:	e000      	b.n	8009bee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009bfc:	b590      	push	{r4, r7, lr}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d012      	beq.n	8009c34 <osMessageCreate+0x38>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00e      	beq.n	8009c34 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6859      	ldr	r1, [r3, #4]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68dc      	ldr	r4, [r3, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	f000 f9e0 	bl	8009ff0 <xQueueGenericCreateStatic>
 8009c30:	4603      	mov	r3, r0
 8009c32:	e008      	b.n	8009c46 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f000 fa49 	bl	800a0d6 <xQueueGenericCreate>
 8009c44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd90      	pop	{r4, r7, pc}
	...

08009c50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <osMessagePut+0x1e>
    ticks = 1;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009c6e:	f7ff fe1e 	bl	80098ae <inHandlerMode>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d018      	beq.n	8009caa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009c78:	f107 0210 	add.w	r2, r7, #16
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	2300      	movs	r3, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fbcc 	bl	800a420 <xQueueGenericSendFromISR>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d001      	beq.n	8009c92 <osMessagePut+0x42>
      return osErrorOS;
 8009c8e:	23ff      	movs	r3, #255	; 0xff
 8009c90:	e018      	b.n	8009cc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d014      	beq.n	8009cc2 <osMessagePut+0x72>
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <osMessagePut+0x7c>)
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	e00b      	b.n	8009cc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009caa:	f107 0108 	add.w	r1, r7, #8
 8009cae:	2300      	movs	r3, #0
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 faba 	bl	800a22c <xQueueGenericSend>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d001      	beq.n	8009cc2 <osMessagePut+0x72>
      return osErrorOS;
 8009cbe:	23ff      	movs	r3, #255	; 0xff
 8009cc0:	e000      	b.n	8009cc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009cd0:	b590      	push	{r4, r7, lr}
 8009cd2:	b08b      	sub	sp, #44	; 0x2c
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009cea:	2380      	movs	r3, #128	; 0x80
 8009cec:	617b      	str	r3, [r7, #20]
    return event;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	461c      	mov	r4, r3
 8009cf2:	f107 0314 	add.w	r3, r7, #20
 8009cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009cfe:	e054      	b.n	8009daa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d103      	bne.n	8009d18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
 8009d16:	e009      	b.n	8009d2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <osMessageGet+0x5c>
      ticks = 1;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009d2c:	f7ff fdbf 	bl	80098ae <inHandlerMode>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d01c      	beq.n	8009d70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009d36:	f107 0220 	add.w	r2, r7, #32
 8009d3a:	f107 0314 	add.w	r3, r7, #20
 8009d3e:	3304      	adds	r3, #4
 8009d40:	4619      	mov	r1, r3
 8009d42:	68b8      	ldr	r0, [r7, #8]
 8009d44:	f000 fe6e 	bl	800aa24 <xQueueReceiveFromISR>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d102      	bne.n	8009d54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009d4e:	2310      	movs	r3, #16
 8009d50:	617b      	str	r3, [r7, #20]
 8009d52:	e001      	b.n	8009d58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01d      	beq.n	8009d9a <osMessageGet+0xca>
 8009d5e:	4b15      	ldr	r3, [pc, #84]	; (8009db4 <osMessageGet+0xe4>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	e014      	b.n	8009d9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009d70:	f107 0314 	add.w	r3, r7, #20
 8009d74:	3304      	adds	r3, #4
 8009d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d78:	4619      	mov	r1, r3
 8009d7a:	68b8      	ldr	r0, [r7, #8]
 8009d7c:	f000 fc6e 	bl	800a65c <xQueueReceive>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d102      	bne.n	8009d8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009d86:	2310      	movs	r3, #16
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e006      	b.n	8009d9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <osMessageGet+0xc6>
 8009d92:	2300      	movs	r3, #0
 8009d94:	e000      	b.n	8009d98 <osMessageGet+0xc8>
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	461c      	mov	r4, r3
 8009d9e:	f107 0314 	add.w	r3, r7, #20
 8009da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	372c      	adds	r7, #44	; 0x2c
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd90      	pop	{r4, r7, pc}
 8009db2:	bf00      	nop
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f103 0208 	add.w	r2, r3, #8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f103 0208 	add.w	r2, r3, #8
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f103 0208 	add.w	r2, r3, #8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
}
 8009e4e:	bf00      	nop
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e70:	d103      	bne.n	8009e7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	e00c      	b.n	8009e94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	e002      	b.n	8009e88 <vListInsert+0x2e>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d2f6      	bcs.n	8009e82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	601a      	str	r2, [r3, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6892      	ldr	r2, [r2, #8]
 8009ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6852      	ldr	r2, [r2, #4]
 8009eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d103      	bne.n	8009f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	1e5a      	subs	r2, r3, #1
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d109      	bne.n	8009f48 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	e7fe      	b.n	8009f46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009f48:	f002 f848 	bl	800bfdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f54:	68f9      	ldr	r1, [r7, #12]
 8009f56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f58:	fb01 f303 	mul.w	r3, r1, r3
 8009f5c:	441a      	add	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f7e:	fb01 f303 	mul.w	r3, r1, r3
 8009f82:	441a      	add	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	22ff      	movs	r2, #255	; 0xff
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	22ff      	movs	r2, #255	; 0xff
 8009f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d114      	bne.n	8009fc8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01a      	beq.n	8009fdc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3310      	adds	r3, #16
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fb02 	bl	800b5b4 <xTaskRemoveFromEventList>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d012      	beq.n	8009fdc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <xQueueGenericReset+0xcc>)
 8009fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	e009      	b.n	8009fdc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3310      	adds	r3, #16
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fef3 	bl	8009db8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3324      	adds	r3, #36	; 0x24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff feee 	bl	8009db8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fdc:	f002 f82c 	bl	800c038 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fe0:	2301      	movs	r3, #1
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <xQueueGenericCreateStatic+0x28>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28
 800a016:	e7fe      	b.n	800a016 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d109      	bne.n	800a032 <xQueueGenericCreateStatic+0x42>
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	627b      	str	r3, [r7, #36]	; 0x24
 800a030:	e7fe      	b.n	800a030 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <xQueueGenericCreateStatic+0x4e>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <xQueueGenericCreateStatic+0x52>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <xQueueGenericCreateStatic+0x54>
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d109      	bne.n	800a05c <xQueueGenericCreateStatic+0x6c>
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	623b      	str	r3, [r7, #32]
 800a05a:	e7fe      	b.n	800a05a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <xQueueGenericCreateStatic+0x78>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <xQueueGenericCreateStatic+0x7c>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <xQueueGenericCreateStatic+0x7e>
 800a06c:	2300      	movs	r3, #0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <xQueueGenericCreateStatic+0x96>
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a086:	2348      	movs	r3, #72	; 0x48
 800a088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b48      	cmp	r3, #72	; 0x48
 800a08e:	d009      	beq.n	800a0a4 <xQueueGenericCreateStatic+0xb4>
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	61bb      	str	r3, [r7, #24]
 800a0a2:	e7fe      	b.n	800a0a2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00d      	beq.n	800a0cc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 f844 	bl	800a154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3730      	adds	r7, #48	; 0x30
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b08a      	sub	sp, #40	; 0x28
 800a0da:	af02      	add	r7, sp, #8
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <xQueueGenericCreate+0x28>
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d102      	bne.n	800a10a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a104:	2300      	movs	r3, #0
 800a106:	61fb      	str	r3, [r7, #28]
 800a108:	e004      	b.n	800a114 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	fb02 f303 	mul.w	r3, r2, r3
 800a112:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	3348      	adds	r3, #72	; 0x48
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 f879 	bl	800c210 <pvPortMalloc>
 800a11e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	3348      	adds	r3, #72	; 0x48
 800a12e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a138:	79fa      	ldrb	r2, [r7, #7]
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	4613      	mov	r3, r2
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f805 	bl	800a154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a14a:	69bb      	ldr	r3, [r7, #24]
	}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d103      	bne.n	800a170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	e002      	b.n	800a176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a182:	2101      	movs	r1, #1
 800a184:	69b8      	ldr	r0, [r7, #24]
 800a186:	f7ff fecb 	bl	8009f20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f837 	bl	800a22c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6939      	ldr	r1, [r7, #16]
 800a1de:	6978      	ldr	r0, [r7, #20]
 800a1e0:	f7ff ff79 	bl	800a0d6 <xQueueGenericCreate>
 800a1e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff ffd3 	bl	800a192 <prvInitialiseMutex>

		return xNewQueue;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
	}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b088      	sub	sp, #32
 800a1fa:	af02      	add	r7, sp, #8
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	6039      	str	r1, [r7, #0]
 800a200:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a202:	2301      	movs	r3, #1
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	2300      	movs	r3, #0
 800a208:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2200      	movs	r2, #0
 800a212:	6939      	ldr	r1, [r7, #16]
 800a214:	6978      	ldr	r0, [r7, #20]
 800a216:	f7ff feeb 	bl	8009ff0 <xQueueGenericCreateStatic>
 800a21a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff ffb8 	bl	800a192 <prvInitialiseMutex>

		return xNewQueue;
 800a222:	68fb      	ldr	r3, [r7, #12]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08e      	sub	sp, #56	; 0x38
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a23a:	2300      	movs	r3, #0
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <xQueueGenericSend+0x30>
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	62bb      	str	r3, [r7, #40]	; 0x28
 800a25a:	e7fe      	b.n	800a25a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <xQueueGenericSend+0x3e>
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <xQueueGenericSend+0x42>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e000      	b.n	800a270 <xQueueGenericSend+0x44>
 800a26e:	2300      	movs	r3, #0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <xQueueGenericSend+0x5c>
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
 800a286:	e7fe      	b.n	800a286 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d103      	bne.n	800a296 <xQueueGenericSend+0x6a>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <xQueueGenericSend+0x6e>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <xQueueGenericSend+0x70>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d109      	bne.n	800a2b4 <xQueueGenericSend+0x88>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	623b      	str	r3, [r7, #32]
 800a2b2:	e7fe      	b.n	800a2b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2b4:	f001 fb34 	bl	800b920 <xTaskGetSchedulerState>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d102      	bne.n	800a2c4 <xQueueGenericSend+0x98>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <xQueueGenericSend+0x9c>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <xQueueGenericSend+0x9e>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <xQueueGenericSend+0xb6>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e7fe      	b.n	800a2e0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2e2:	f001 fe7b 	bl	800bfdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d302      	bcc.n	800a2f8 <xQueueGenericSend+0xcc>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d129      	bne.n	800a34c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fe:	f000 fc26 	bl	800ab4e <prvCopyDataToQueue>
 800a302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d010      	beq.n	800a32e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	3324      	adds	r3, #36	; 0x24
 800a310:	4618      	mov	r0, r3
 800a312:	f001 f94f 	bl	800b5b4 <xTaskRemoveFromEventList>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d013      	beq.n	800a344 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a31c:	4b3f      	ldr	r3, [pc, #252]	; (800a41c <xQueueGenericSend+0x1f0>)
 800a31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	e00a      	b.n	800a344 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a334:	4b39      	ldr	r3, [pc, #228]	; (800a41c <xQueueGenericSend+0x1f0>)
 800a336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a344:	f001 fe78 	bl	800c038 <vPortExitCritical>
				return pdPASS;
 800a348:	2301      	movs	r3, #1
 800a34a:	e063      	b.n	800a414 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a352:	f001 fe71 	bl	800c038 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a356:	2300      	movs	r3, #0
 800a358:	e05c      	b.n	800a414 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d106      	bne.n	800a36e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a360:	f107 0314 	add.w	r3, r7, #20
 800a364:	4618      	mov	r0, r3
 800a366:	f001 f987 	bl	800b678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a36a:	2301      	movs	r3, #1
 800a36c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a36e:	f001 fe63 	bl	800c038 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a372:	f000 ff1d 	bl	800b1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a376:	f001 fe31 	bl	800bfdc <vPortEnterCritical>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a380:	b25b      	sxtb	r3, r3
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d103      	bne.n	800a390 <xQueueGenericSend+0x164>
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a396:	b25b      	sxtb	r3, r3
 800a398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39c:	d103      	bne.n	800a3a6 <xQueueGenericSend+0x17a>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3a6:	f001 fe47 	bl	800c038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3aa:	1d3a      	adds	r2, r7, #4
 800a3ac:	f107 0314 	add.w	r3, r7, #20
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f001 f976 	bl	800b6a4 <xTaskCheckForTimeOut>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d124      	bne.n	800a408 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3c0:	f000 fcbd 	bl	800ad3e <prvIsQueueFull>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d018      	beq.n	800a3fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	3310      	adds	r3, #16
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 f8ca 	bl	800b56c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3da:	f000 fc48 	bl	800ac6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3de:	f000 fef5 	bl	800b1cc <xTaskResumeAll>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f47f af7c 	bne.w	800a2e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a3ea:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <xQueueGenericSend+0x1f0>)
 800a3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	e772      	b.n	800a2e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3fe:	f000 fc36 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a402:	f000 fee3 	bl	800b1cc <xTaskResumeAll>
 800a406:	e76c      	b.n	800a2e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40a:	f000 fc30 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a40e:	f000 fedd 	bl	800b1cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a414:	4618      	mov	r0, r3
 800a416:	3738      	adds	r7, #56	; 0x38
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08e      	sub	sp, #56	; 0x38
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2b00      	cmp	r3, #0
 800a436:	d109      	bne.n	800a44c <xQueueGenericSendFromISR+0x2c>
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
 800a44a:	e7fe      	b.n	800a44a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <xQueueGenericSendFromISR+0x3a>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <xQueueGenericSendFromISR+0x3e>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <xQueueGenericSendFromISR+0x40>
 800a45e:	2300      	movs	r3, #0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d109      	bne.n	800a478 <xQueueGenericSendFromISR+0x58>
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	623b      	str	r3, [r7, #32]
 800a476:	e7fe      	b.n	800a476 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d103      	bne.n	800a486 <xQueueGenericSendFromISR+0x66>
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <xQueueGenericSendFromISR+0x6a>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueGenericSendFromISR+0x6c>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x84>
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	e7fe      	b.n	800a4a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4a4:	f001 fe76 	bl	800c194 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	61ba      	str	r2, [r7, #24]
 800a4be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d302      	bcc.n	800a4d6 <xQueueGenericSendFromISR+0xb6>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d12c      	bne.n	800a530 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4e6:	f000 fb32 	bl	800ab4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d112      	bne.n	800a51a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d016      	beq.n	800a52a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	3324      	adds	r3, #36	; 0x24
 800a500:	4618      	mov	r0, r3
 800a502:	f001 f857 	bl	800b5b4 <xTaskRemoveFromEventList>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00e      	beq.n	800a52a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00b      	beq.n	800a52a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	e007      	b.n	800a52a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a51a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a51e:	3301      	adds	r3, #1
 800a520:	b2db      	uxtb	r3, r3
 800a522:	b25a      	sxtb	r2, r3
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a52a:	2301      	movs	r3, #1
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a52e:	e001      	b.n	800a534 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a530:	2300      	movs	r3, #0
 800a532:	637b      	str	r3, [r7, #52]	; 0x34
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a540:	4618      	mov	r0, r3
 800a542:	3738      	adds	r7, #56	; 0x38
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08e      	sub	sp, #56	; 0x38
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d109      	bne.n	800a570 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	623b      	str	r3, [r7, #32]
 800a56e:	e7fe      	b.n	800a56e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <xQueueGiveFromISR+0x44>
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	61fb      	str	r3, [r7, #28]
 800a58a:	e7fe      	b.n	800a58a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d103      	bne.n	800a59c <xQueueGiveFromISR+0x54>
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <xQueueGiveFromISR+0x58>
 800a59c:	2301      	movs	r3, #1
 800a59e:	e000      	b.n	800a5a2 <xQueueGiveFromISR+0x5a>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <xQueueGiveFromISR+0x72>
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	61bb      	str	r3, [r7, #24]
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5ba:	f001 fdeb 	bl	800c194 <vPortValidateInterruptPriority>
	__asm volatile
 800a5be:	f3ef 8211 	mrs	r2, BASEPRI
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	617a      	str	r2, [r7, #20]
 800a5d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a5d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d22b      	bcs.n	800a642 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a604:	d112      	bne.n	800a62c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d016      	beq.n	800a63c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	3324      	adds	r3, #36	; 0x24
 800a612:	4618      	mov	r0, r3
 800a614:	f000 ffce 	bl	800b5b4 <xTaskRemoveFromEventList>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00e      	beq.n	800a63c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2201      	movs	r2, #1
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	e007      	b.n	800a63c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a630:	3301      	adds	r3, #1
 800a632:	b2db      	uxtb	r3, r3
 800a634:	b25a      	sxtb	r2, r3
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a63c:	2301      	movs	r3, #1
 800a63e:	637b      	str	r3, [r7, #52]	; 0x34
 800a640:	e001      	b.n	800a646 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a642:	2300      	movs	r3, #0
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a652:	4618      	mov	r0, r3
 800a654:	3738      	adds	r7, #56	; 0x38
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08c      	sub	sp, #48	; 0x30
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d109      	bne.n	800a68a <xQueueReceive+0x2e>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	623b      	str	r3, [r7, #32]
 800a688:	e7fe      	b.n	800a688 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d103      	bne.n	800a698 <xQueueReceive+0x3c>
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <xQueueReceive+0x40>
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <xQueueReceive+0x42>
 800a69c:	2300      	movs	r3, #0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <xQueueReceive+0x5a>
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b6:	f001 f933 	bl	800b920 <xTaskGetSchedulerState>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <xQueueReceive+0x6a>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <xQueueReceive+0x6e>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e000      	b.n	800a6cc <xQueueReceive+0x70>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <xQueueReceive+0x88>
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	61bb      	str	r3, [r7, #24]
 800a6e2:	e7fe      	b.n	800a6e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e4:	f001 fc7a 	bl	800bfdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01f      	beq.n	800a734 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f8:	f000 fa93 	bl	800ac22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	3310      	adds	r3, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f000 ff4f 	bl	800b5b4 <xTaskRemoveFromEventList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71c:	4b3c      	ldr	r3, [pc, #240]	; (800a810 <xQueueReceive+0x1b4>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72c:	f001 fc84 	bl	800c038 <vPortExitCritical>
				return pdPASS;
 800a730:	2301      	movs	r3, #1
 800a732:	e069      	b.n	800a808 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73a:	f001 fc7d 	bl	800c038 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73e:	2300      	movs	r3, #0
 800a740:	e062      	b.n	800a808 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a748:	f107 0310 	add.w	r3, r7, #16
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 ff93 	bl	800b678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a756:	f001 fc6f 	bl	800c038 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75a:	f000 fd29 	bl	800b1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75e:	f001 fc3d 	bl	800bfdc <vPortEnterCritical>
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x11c>
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a77e:	b25b      	sxtb	r3, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d103      	bne.n	800a78e <xQueueReceive+0x132>
 800a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a78e:	f001 fc53 	bl	800c038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a792:	1d3a      	adds	r2, r7, #4
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 ff82 	bl	800b6a4 <xTaskCheckForTimeOut>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d123      	bne.n	800a7ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f000 fab3 	bl	800ad12 <prvIsQueueEmpty>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	3324      	adds	r3, #36	; 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fed6 	bl	800b56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c2:	f000 fa54 	bl	800ac6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c6:	f000 fd01 	bl	800b1cc <xTaskResumeAll>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d189      	bne.n	800a6e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <xQueueReceive+0x1b4>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e780      	b.n	800a6e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e4:	f000 fa43 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e8:	f000 fcf0 	bl	800b1cc <xTaskResumeAll>
 800a7ec:	e77a      	b.n	800a6e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f0:	f000 fa3d 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f4:	f000 fcea 	bl	800b1cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7fa:	f000 fa8a 	bl	800ad12 <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f af6f 	beq.w	800a6e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a806:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3730      	adds	r7, #48	; 0x30
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a826:	2300      	movs	r3, #0
 800a828:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d109      	bne.n	800a844 <xQueueSemaphoreTake+0x30>
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	623b      	str	r3, [r7, #32]
 800a842:	e7fe      	b.n	800a842 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d009      	beq.n	800a860 <xQueueSemaphoreTake+0x4c>
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	e7fe      	b.n	800a85e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a860:	f001 f85e 	bl	800b920 <xTaskGetSchedulerState>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <xQueueSemaphoreTake+0x5c>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <xQueueSemaphoreTake+0x60>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <xQueueSemaphoreTake+0x62>
 800a874:	2300      	movs	r3, #0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <xQueueSemaphoreTake+0x7a>
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	e7fe      	b.n	800a88c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a88e:	f001 fba5 	bl	800bfdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d024      	beq.n	800a8e8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a8ae:	f001 f9f1 	bl	800bc94 <pvTaskIncrementMutexHeldCount>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00f      	beq.n	800a8e0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	3310      	adds	r3, #16
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fe75 	bl	800b5b4 <xTaskRemoveFromEventList>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8d0:	4b53      	ldr	r3, [pc, #332]	; (800aa20 <xQueueSemaphoreTake+0x20c>)
 800a8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8e0:	f001 fbaa 	bl	800c038 <vPortExitCritical>
				return pdPASS;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e096      	b.n	800aa16 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d110      	bne.n	800a910 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d009      	beq.n	800a908 <xQueueSemaphoreTake+0xf4>
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e7fe      	b.n	800a906 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a908:	f001 fb96 	bl	800c038 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a90c:	2300      	movs	r3, #0
 800a90e:	e082      	b.n	800aa16 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a916:	f107 030c 	add.w	r3, r7, #12
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 feac 	bl	800b678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a920:	2301      	movs	r3, #1
 800a922:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a924:	f001 fb88 	bl	800c038 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a928:	f000 fc42 	bl	800b1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a92c:	f001 fb56 	bl	800bfdc <vPortEnterCritical>
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a936:	b25b      	sxtb	r3, r3
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d103      	bne.n	800a946 <xQueueSemaphoreTake+0x132>
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a952:	d103      	bne.n	800a95c <xQueueSemaphoreTake+0x148>
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a95c:	f001 fb6c 	bl	800c038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a960:	463a      	mov	r2, r7
 800a962:	f107 030c 	add.w	r3, r7, #12
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fe9b 	bl	800b6a4 <xTaskCheckForTimeOut>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d132      	bne.n	800a9da <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a976:	f000 f9cc 	bl	800ad12 <prvIsQueueEmpty>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d026      	beq.n	800a9ce <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d109      	bne.n	800a99c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a988:	f001 fb28 	bl	800bfdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	4618      	mov	r0, r3
 800a992:	f000 ffe3 	bl	800b95c <xTaskPriorityInherit>
 800a996:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a998:	f001 fb4e 	bl	800c038 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	3324      	adds	r3, #36	; 0x24
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fde1 	bl	800b56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ac:	f000 f95f 	bl	800ac6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9b0:	f000 fc0c 	bl	800b1cc <xTaskResumeAll>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f47f af69 	bne.w	800a88e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a9bc:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <xQueueSemaphoreTake+0x20c>)
 800a9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	e75f      	b.n	800a88e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9d0:	f000 f94d 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9d4:	f000 fbfa 	bl	800b1cc <xTaskResumeAll>
 800a9d8:	e759      	b.n	800a88e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9dc:	f000 f947 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9e0:	f000 fbf4 	bl	800b1cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9e6:	f000 f994 	bl	800ad12 <prvIsQueueEmpty>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f43f af4e 	beq.w	800a88e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00d      	beq.n	800aa14 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a9f8:	f001 faf0 	bl	800bfdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9fe:	f000 f88e 	bl	800ab1e <prvGetDisinheritPriorityAfterTimeout>
 800aa02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f8aa 	bl	800bb64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa10:	f001 fb12 	bl	800c038 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3738      	adds	r7, #56	; 0x38
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08e      	sub	sp, #56	; 0x38
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <xQueueReceiveFromISR+0x2a>
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	623b      	str	r3, [r7, #32]
 800aa4c:	e7fe      	b.n	800aa4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <xQueueReceiveFromISR+0x38>
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <xQueueReceiveFromISR+0x3c>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <xQueueReceiveFromISR+0x3e>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <xQueueReceiveFromISR+0x56>
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	e7fe      	b.n	800aa78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa7a:	f001 fb8b 	bl	800c194 <vPortValidateInterruptPriority>
	__asm volatile
 800aa7e:	f3ef 8211 	mrs	r2, BASEPRI
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	61ba      	str	r2, [r7, #24]
 800aa94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d02f      	beq.n	800ab06 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aab0:	68b9      	ldr	r1, [r7, #8]
 800aab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab4:	f000 f8b5 	bl	800ac22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	1e5a      	subs	r2, r3, #1
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d112      	bne.n	800aaf0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d016      	beq.n	800ab00 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	3310      	adds	r3, #16
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fd6c 	bl	800b5b4 <xTaskRemoveFromEventList>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00e      	beq.n	800ab00 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	e007      	b.n	800ab00 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	b25a      	sxtb	r2, r3
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab00:	2301      	movs	r3, #1
 800ab02:	637b      	str	r3, [r7, #52]	; 0x34
 800ab04:	e001      	b.n	800ab0a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	637b      	str	r3, [r7, #52]	; 0x34
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3738      	adds	r7, #56	; 0x38
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab1e:	b480      	push	{r7}
 800ab20:	b085      	sub	sp, #20
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d006      	beq.n	800ab3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f1c3 0307 	rsb	r3, r3, #7
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	e001      	b.n	800ab40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab40:	68fb      	ldr	r3, [r7, #12]
	}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b086      	sub	sp, #24
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10d      	bne.n	800ab88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d14d      	bne.n	800ac10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 ff6f 	bl	800ba5c <xTaskPriorityDisinherit>
 800ab7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	609a      	str	r2, [r3, #8]
 800ab86:	e043      	b.n	800ac10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d119      	bne.n	800abc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6858      	ldr	r0, [r3, #4]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	461a      	mov	r2, r3
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	f00c fe22 	bl	80177e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	441a      	add	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d32b      	bcc.n	800ac10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	605a      	str	r2, [r3, #4]
 800abc0:	e026      	b.n	800ac10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68d8      	ldr	r0, [r3, #12]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	461a      	mov	r2, r3
 800abcc:	68b9      	ldr	r1, [r7, #8]
 800abce:	f00c fe08 	bl	80177e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	425b      	negs	r3, r3
 800abdc:	441a      	add	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d207      	bcs.n	800abfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	425b      	negs	r3, r3
 800abf8:	441a      	add	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d105      	bne.n	800ac10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac18:	697b      	ldr	r3, [r7, #20]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3718      	adds	r7, #24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d018      	beq.n	800ac66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	441a      	add	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d303      	bcc.n	800ac56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68d9      	ldr	r1, [r3, #12]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5e:	461a      	mov	r2, r3
 800ac60:	6838      	ldr	r0, [r7, #0]
 800ac62:	f00c fdbe 	bl	80177e2 <memcpy>
	}
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac76:	f001 f9b1 	bl	800bfdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac82:	e011      	b.n	800aca8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d012      	beq.n	800acb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3324      	adds	r3, #36	; 0x24
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fc8f 	bl	800b5b4 <xTaskRemoveFromEventList>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9c:	f000 fd62 	bl	800b764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acac:	2b00      	cmp	r3, #0
 800acae:	dce9      	bgt.n	800ac84 <prvUnlockQueue+0x16>
 800acb0:	e000      	b.n	800acb4 <prvUnlockQueue+0x46>
					break;
 800acb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	22ff      	movs	r2, #255	; 0xff
 800acb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acbc:	f001 f9bc 	bl	800c038 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acc0:	f001 f98c 	bl	800bfdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800accc:	e011      	b.n	800acf2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d012      	beq.n	800acfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3310      	adds	r3, #16
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fc6a 	bl	800b5b4 <xTaskRemoveFromEventList>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace6:	f000 fd3d 	bl	800b764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	3b01      	subs	r3, #1
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dce9      	bgt.n	800acce <prvUnlockQueue+0x60>
 800acfa:	e000      	b.n	800acfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad06:	f001 f997 	bl	800c038 <vPortExitCritical>
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad1a:	f001 f95f 	bl	800bfdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	e001      	b.n	800ad30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad30:	f001 f982 	bl	800c038 <vPortExitCritical>

	return xReturn;
 800ad34:	68fb      	ldr	r3, [r7, #12]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad46:	f001 f949 	bl	800bfdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d102      	bne.n	800ad5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad56:	2301      	movs	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e001      	b.n	800ad60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad60:	f001 f96a 	bl	800c038 <vPortExitCritical>

	return xReturn;
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b08e      	sub	sp, #56	; 0x38
 800ad72:	af04      	add	r7, sp, #16
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <xTaskCreateStatic+0x28>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	623b      	str	r3, [r7, #32]
 800ad94:	e7fe      	b.n	800ad94 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <xTaskCreateStatic+0x42>
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	61fb      	str	r3, [r7, #28]
 800adae:	e7fe      	b.n	800adae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adb0:	2354      	movs	r3, #84	; 0x54
 800adb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	2b54      	cmp	r3, #84	; 0x54
 800adb8:	d009      	beq.n	800adce <xTaskCreateStatic+0x60>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e7fe      	b.n	800adcc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d01e      	beq.n	800ae14 <xTaskCreateStatic+0xa6>
 800add6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01b      	beq.n	800ae14 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ade4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	2202      	movs	r2, #2
 800adea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adee:	2300      	movs	r3, #0
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	f107 0314 	add.w	r3, r7, #20
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f850 	bl	800aeac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae0e:	f000 f8d3 	bl	800afb8 <prvAddNewTaskToReadyList>
 800ae12:	e001      	b.n	800ae18 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae18:	697b      	ldr	r3, [r7, #20]
	}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3728      	adds	r7, #40	; 0x28
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b08c      	sub	sp, #48	; 0x30
 800ae26:	af04      	add	r7, sp, #16
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	603b      	str	r3, [r7, #0]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 f9ea 	bl	800c210 <pvPortMalloc>
 800ae3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00e      	beq.n	800ae62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae44:	2054      	movs	r0, #84	; 0x54
 800ae46:	f001 f9e3 	bl	800c210 <pvPortMalloc>
 800ae4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	631a      	str	r2, [r3, #48]	; 0x30
 800ae58:	e005      	b.n	800ae66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f001 fa9a 	bl	800c394 <vPortFree>
 800ae60:	e001      	b.n	800ae66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d017      	beq.n	800ae9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae74:	88fa      	ldrh	r2, [r7, #6]
 800ae76:	2300      	movs	r3, #0
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 f80e 	bl	800aeac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae90:	69f8      	ldr	r0, [r7, #28]
 800ae92:	f000 f891 	bl	800afb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae96:	2301      	movs	r3, #1
 800ae98:	61bb      	str	r3, [r7, #24]
 800ae9a:	e002      	b.n	800aea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea2:	69bb      	ldr	r3, [r7, #24]
	}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aec4:	440b      	add	r3, r1
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f023 0307 	bic.w	r3, r3, #7
 800aed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <prvInitialiseNewTask+0x46>
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	e7fe      	b.n	800aef0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01f      	beq.n	800af38 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aef8:	2300      	movs	r3, #0
 800aefa:	61fb      	str	r3, [r7, #28]
 800aefc:	e012      	b.n	800af24 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	4413      	add	r3, r2
 800af04:	7819      	ldrb	r1, [r3, #0]
 800af06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4413      	add	r3, r2
 800af0c:	3334      	adds	r3, #52	; 0x34
 800af0e:	460a      	mov	r2, r1
 800af10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	4413      	add	r3, r2
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3301      	adds	r3, #1
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d9e9      	bls.n	800aefe <prvInitialiseNewTask+0x52>
 800af2a:	e000      	b.n	800af2e <prvInitialiseNewTask+0x82>
			{
				break;
 800af2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af36:	e003      	b.n	800af40 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	2b06      	cmp	r3, #6
 800af44:	d901      	bls.n	800af4a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af46:	2306      	movs	r3, #6
 800af48:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af4e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af54:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	2200      	movs	r2, #0
 800af5a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	3304      	adds	r3, #4
 800af60:	4618      	mov	r0, r3
 800af62:	f7fe ff49 	bl	8009df8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	3318      	adds	r3, #24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe ff44 	bl	8009df8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	f1c3 0207 	rsb	r2, r3, #7
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af84:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	2200      	movs	r2, #0
 800af8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	69b8      	ldr	r0, [r7, #24]
 800af9a:	f000 fef5 	bl	800bd88 <pxPortInitialiseStack>
 800af9e:	4602      	mov	r2, r0
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afb0:	bf00      	nop
 800afb2:	3720      	adds	r7, #32
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afc0:	f001 f80c 	bl	800bfdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afc4:	4b2a      	ldr	r3, [pc, #168]	; (800b070 <prvAddNewTaskToReadyList+0xb8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	4a29      	ldr	r2, [pc, #164]	; (800b070 <prvAddNewTaskToReadyList+0xb8>)
 800afcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afce:	4b29      	ldr	r3, [pc, #164]	; (800b074 <prvAddNewTaskToReadyList+0xbc>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d109      	bne.n	800afea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afd6:	4a27      	ldr	r2, [pc, #156]	; (800b074 <prvAddNewTaskToReadyList+0xbc>)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afdc:	4b24      	ldr	r3, [pc, #144]	; (800b070 <prvAddNewTaskToReadyList+0xb8>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d110      	bne.n	800b006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afe4:	f000 fbe2 	bl	800b7ac <prvInitialiseTaskLists>
 800afe8:	e00d      	b.n	800b006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afea:	4b23      	ldr	r3, [pc, #140]	; (800b078 <prvAddNewTaskToReadyList+0xc0>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d109      	bne.n	800b006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aff2:	4b20      	ldr	r3, [pc, #128]	; (800b074 <prvAddNewTaskToReadyList+0xbc>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	429a      	cmp	r2, r3
 800affe:	d802      	bhi.n	800b006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b000:	4a1c      	ldr	r2, [pc, #112]	; (800b074 <prvAddNewTaskToReadyList+0xbc>)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b006:	4b1d      	ldr	r3, [pc, #116]	; (800b07c <prvAddNewTaskToReadyList+0xc4>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3301      	adds	r3, #1
 800b00c:	4a1b      	ldr	r2, [pc, #108]	; (800b07c <prvAddNewTaskToReadyList+0xc4>)
 800b00e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	2201      	movs	r2, #1
 800b016:	409a      	lsls	r2, r3
 800b018:	4b19      	ldr	r3, [pc, #100]	; (800b080 <prvAddNewTaskToReadyList+0xc8>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	4a18      	ldr	r2, [pc, #96]	; (800b080 <prvAddNewTaskToReadyList+0xc8>)
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4a15      	ldr	r2, [pc, #84]	; (800b084 <prvAddNewTaskToReadyList+0xcc>)
 800b030:	441a      	add	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3304      	adds	r3, #4
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7fe feea 	bl	8009e12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b03e:	f000 fffb 	bl	800c038 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b042:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <prvAddNewTaskToReadyList+0xc0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00e      	beq.n	800b068 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b04a:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <prvAddNewTaskToReadyList+0xbc>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	429a      	cmp	r2, r3
 800b056:	d207      	bcs.n	800b068 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b058:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <prvAddNewTaskToReadyList+0xd0>)
 800b05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b068:	bf00      	nop
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000414 	.word	0x20000414
 800b074:	20000314 	.word	0x20000314
 800b078:	20000420 	.word	0x20000420
 800b07c:	20000430 	.word	0x20000430
 800b080:	2000041c 	.word	0x2000041c
 800b084:	20000318 	.word	0x20000318
 800b088:	e000ed04 	.word	0xe000ed04

0800b08c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d016      	beq.n	800b0cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <vTaskDelay+0x60>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <vTaskDelay+0x2e>
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	60bb      	str	r3, [r7, #8]
 800b0b8:	e7fe      	b.n	800b0b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b0ba:	f000 f879 	bl	800b1b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fdfb 	bl	800bcbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0c6:	f000 f881 	bl	800b1cc <xTaskResumeAll>
 800b0ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d107      	bne.n	800b0e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b0d2:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <vTaskDelay+0x64>)
 800b0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0e2:	bf00      	nop
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	2000043c 	.word	0x2000043c
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08a      	sub	sp, #40	; 0x28
 800b0f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b102:	463a      	mov	r2, r7
 800b104:	1d39      	adds	r1, r7, #4
 800b106:	f107 0308 	add.w	r3, r7, #8
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f5 fb28 	bl	8000760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	9202      	str	r2, [sp, #8]
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	2300      	movs	r3, #0
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	2300      	movs	r3, #0
 800b120:	460a      	mov	r2, r1
 800b122:	491d      	ldr	r1, [pc, #116]	; (800b198 <vTaskStartScheduler+0xa4>)
 800b124:	481d      	ldr	r0, [pc, #116]	; (800b19c <vTaskStartScheduler+0xa8>)
 800b126:	f7ff fe22 	bl	800ad6e <xTaskCreateStatic>
 800b12a:	4602      	mov	r2, r0
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <vTaskStartScheduler+0xac>)
 800b12e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b130:	4b1b      	ldr	r3, [pc, #108]	; (800b1a0 <vTaskStartScheduler+0xac>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b138:	2301      	movs	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e001      	b.n	800b142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d115      	bne.n	800b174 <vTaskStartScheduler+0x80>
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b15a:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <vTaskStartScheduler+0xb0>)
 800b15c:	f04f 32ff 	mov.w	r2, #4294967295
 800b160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b162:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <vTaskStartScheduler+0xb4>)
 800b164:	2201      	movs	r2, #1
 800b166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b168:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <vTaskStartScheduler+0xb8>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b16e:	f000 fe97 	bl	800bea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b172:	e00d      	b.n	800b190 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d109      	bne.n	800b190 <vTaskStartScheduler+0x9c>
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e7fe      	b.n	800b18e <vTaskStartScheduler+0x9a>
}
 800b190:	bf00      	nop
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	0801872c 	.word	0x0801872c
 800b19c:	0800b77d 	.word	0x0800b77d
 800b1a0:	20000438 	.word	0x20000438
 800b1a4:	20000434 	.word	0x20000434
 800b1a8:	20000420 	.word	0x20000420
 800b1ac:	20000418 	.word	0x20000418

0800b1b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b1b4:	4b04      	ldr	r3, [pc, #16]	; (800b1c8 <vTaskSuspendAll+0x18>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	4a03      	ldr	r2, [pc, #12]	; (800b1c8 <vTaskSuspendAll+0x18>)
 800b1bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b1be:	bf00      	nop
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	2000043c 	.word	0x2000043c

0800b1cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1da:	4b41      	ldr	r3, [pc, #260]	; (800b2e0 <xTaskResumeAll+0x114>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d109      	bne.n	800b1f6 <xTaskResumeAll+0x2a>
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	e7fe      	b.n	800b1f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1f6:	f000 fef1 	bl	800bfdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1fa:	4b39      	ldr	r3, [pc, #228]	; (800b2e0 <xTaskResumeAll+0x114>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	4a37      	ldr	r2, [pc, #220]	; (800b2e0 <xTaskResumeAll+0x114>)
 800b202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b204:	4b36      	ldr	r3, [pc, #216]	; (800b2e0 <xTaskResumeAll+0x114>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d161      	bne.n	800b2d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b20c:	4b35      	ldr	r3, [pc, #212]	; (800b2e4 <xTaskResumeAll+0x118>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d05d      	beq.n	800b2d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b214:	e02e      	b.n	800b274 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b216:	4b34      	ldr	r3, [pc, #208]	; (800b2e8 <xTaskResumeAll+0x11c>)
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3318      	adds	r3, #24
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe fe52 	bl	8009ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fe4d 	bl	8009ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b236:	2201      	movs	r2, #1
 800b238:	409a      	lsls	r2, r3
 800b23a:	4b2c      	ldr	r3, [pc, #176]	; (800b2ec <xTaskResumeAll+0x120>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4313      	orrs	r3, r2
 800b240:	4a2a      	ldr	r2, [pc, #168]	; (800b2ec <xTaskResumeAll+0x120>)
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4a27      	ldr	r2, [pc, #156]	; (800b2f0 <xTaskResumeAll+0x124>)
 800b252:	441a      	add	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3304      	adds	r3, #4
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fe fdd9 	bl	8009e12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b264:	4b23      	ldr	r3, [pc, #140]	; (800b2f4 <xTaskResumeAll+0x128>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d302      	bcc.n	800b274 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b26e:	4b22      	ldr	r3, [pc, #136]	; (800b2f8 <xTaskResumeAll+0x12c>)
 800b270:	2201      	movs	r2, #1
 800b272:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b274:	4b1c      	ldr	r3, [pc, #112]	; (800b2e8 <xTaskResumeAll+0x11c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1cc      	bne.n	800b216 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b282:	f000 fb2d 	bl	800b8e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b286:	4b1d      	ldr	r3, [pc, #116]	; (800b2fc <xTaskResumeAll+0x130>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d010      	beq.n	800b2b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b292:	f000 f859 	bl	800b348 <xTaskIncrementTick>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b29c:	4b16      	ldr	r3, [pc, #88]	; (800b2f8 <xTaskResumeAll+0x12c>)
 800b29e:	2201      	movs	r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1f1      	bne.n	800b292 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <xTaskResumeAll+0x130>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2b4:	4b10      	ldr	r3, [pc, #64]	; (800b2f8 <xTaskResumeAll+0x12c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d009      	beq.n	800b2d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <xTaskResumeAll+0x134>)
 800b2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d0:	f000 feb2 	bl	800c038 <vPortExitCritical>

	return xAlreadyYielded;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2000043c 	.word	0x2000043c
 800b2e4:	20000414 	.word	0x20000414
 800b2e8:	200003d4 	.word	0x200003d4
 800b2ec:	2000041c 	.word	0x2000041c
 800b2f0:	20000318 	.word	0x20000318
 800b2f4:	20000314 	.word	0x20000314
 800b2f8:	20000428 	.word	0x20000428
 800b2fc:	20000424 	.word	0x20000424
 800b300:	e000ed04 	.word	0xe000ed04

0800b304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <xTaskGetTickCount+0x1c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b310:	687b      	ldr	r3, [r7, #4]
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20000418 	.word	0x20000418

0800b324 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b32a:	f000 ff33 	bl	800c194 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b32e:	2300      	movs	r3, #0
 800b330:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b332:	4b04      	ldr	r3, [pc, #16]	; (800b344 <xTaskGetTickCountFromISR+0x20>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b338:	683b      	ldr	r3, [r7, #0]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000418 	.word	0x20000418

0800b348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b34e:	2300      	movs	r3, #0
 800b350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b352:	4b4e      	ldr	r3, [pc, #312]	; (800b48c <xTaskIncrementTick+0x144>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 8087 	bne.w	800b46a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b35c:	4b4c      	ldr	r3, [pc, #304]	; (800b490 <xTaskIncrementTick+0x148>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3301      	adds	r3, #1
 800b362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b364:	4a4a      	ldr	r2, [pc, #296]	; (800b490 <xTaskIncrementTick+0x148>)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d11f      	bne.n	800b3b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b370:	4b48      	ldr	r3, [pc, #288]	; (800b494 <xTaskIncrementTick+0x14c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d009      	beq.n	800b38e <xTaskIncrementTick+0x46>
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	e7fe      	b.n	800b38c <xTaskIncrementTick+0x44>
 800b38e:	4b41      	ldr	r3, [pc, #260]	; (800b494 <xTaskIncrementTick+0x14c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	4b40      	ldr	r3, [pc, #256]	; (800b498 <xTaskIncrementTick+0x150>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a3e      	ldr	r2, [pc, #248]	; (800b494 <xTaskIncrementTick+0x14c>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	4a3e      	ldr	r2, [pc, #248]	; (800b498 <xTaskIncrementTick+0x150>)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	4b3e      	ldr	r3, [pc, #248]	; (800b49c <xTaskIncrementTick+0x154>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	4a3c      	ldr	r2, [pc, #240]	; (800b49c <xTaskIncrementTick+0x154>)
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	f000 fa98 	bl	800b8e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3b0:	4b3b      	ldr	r3, [pc, #236]	; (800b4a0 <xTaskIncrementTick+0x158>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d348      	bcc.n	800b44c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ba:	4b36      	ldr	r3, [pc, #216]	; (800b494 <xTaskIncrementTick+0x14c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d104      	bne.n	800b3ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c4:	4b36      	ldr	r3, [pc, #216]	; (800b4a0 <xTaskIncrementTick+0x158>)
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	601a      	str	r2, [r3, #0]
					break;
 800b3cc:	e03e      	b.n	800b44c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ce:	4b31      	ldr	r3, [pc, #196]	; (800b494 <xTaskIncrementTick+0x14c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d203      	bcs.n	800b3ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3e6:	4a2e      	ldr	r2, [pc, #184]	; (800b4a0 <xTaskIncrementTick+0x158>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3ec:	e02e      	b.n	800b44c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fd6a 	bl	8009ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3318      	adds	r3, #24
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fd61 	bl	8009ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	2201      	movs	r2, #1
 800b410:	409a      	lsls	r2, r3
 800b412:	4b24      	ldr	r3, [pc, #144]	; (800b4a4 <xTaskIncrementTick+0x15c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4313      	orrs	r3, r2
 800b418:	4a22      	ldr	r2, [pc, #136]	; (800b4a4 <xTaskIncrementTick+0x15c>)
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4a1f      	ldr	r2, [pc, #124]	; (800b4a8 <xTaskIncrementTick+0x160>)
 800b42a:	441a      	add	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f7fe fced 	bl	8009e12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43c:	4b1b      	ldr	r3, [pc, #108]	; (800b4ac <xTaskIncrementTick+0x164>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	429a      	cmp	r2, r3
 800b444:	d3b9      	bcc.n	800b3ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b44a:	e7b6      	b.n	800b3ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b44c:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <xTaskIncrementTick+0x164>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	4915      	ldr	r1, [pc, #84]	; (800b4a8 <xTaskIncrementTick+0x160>)
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d907      	bls.n	800b474 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e004      	b.n	800b474 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b46a:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <xTaskIncrementTick+0x168>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <xTaskIncrementTick+0x168>)
 800b472:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b474:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <xTaskIncrementTick+0x16c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b480:	697b      	ldr	r3, [r7, #20]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	2000043c 	.word	0x2000043c
 800b490:	20000418 	.word	0x20000418
 800b494:	200003cc 	.word	0x200003cc
 800b498:	200003d0 	.word	0x200003d0
 800b49c:	2000042c 	.word	0x2000042c
 800b4a0:	20000434 	.word	0x20000434
 800b4a4:	2000041c 	.word	0x2000041c
 800b4a8:	20000318 	.word	0x20000318
 800b4ac:	20000314 	.word	0x20000314
 800b4b0:	20000424 	.word	0x20000424
 800b4b4:	20000428 	.word	0x20000428

0800b4b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4be:	4b26      	ldr	r3, [pc, #152]	; (800b558 <vTaskSwitchContext+0xa0>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4c6:	4b25      	ldr	r3, [pc, #148]	; (800b55c <vTaskSwitchContext+0xa4>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4cc:	e03e      	b.n	800b54c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b4ce:	4b23      	ldr	r3, [pc, #140]	; (800b55c <vTaskSwitchContext+0xa4>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d4:	4b22      	ldr	r3, [pc, #136]	; (800b560 <vTaskSwitchContext+0xa8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	fab3 f383 	clz	r3, r3
 800b4e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	f1c3 031f 	rsb	r3, r3, #31
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	491e      	ldr	r1, [pc, #120]	; (800b564 <vTaskSwitchContext+0xac>)
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	440b      	add	r3, r1
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <vTaskSwitchContext+0x5a>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	e7fe      	b.n	800b510 <vTaskSwitchContext+0x58>
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4a11      	ldr	r2, [pc, #68]	; (800b564 <vTaskSwitchContext+0xac>)
 800b51e:	4413      	add	r3, r2
 800b520:	613b      	str	r3, [r7, #16]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	605a      	str	r2, [r3, #4]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	3308      	adds	r3, #8
 800b534:	429a      	cmp	r2, r3
 800b536:	d104      	bne.n	800b542 <vTaskSwitchContext+0x8a>
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	605a      	str	r2, [r3, #4]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	4a07      	ldr	r2, [pc, #28]	; (800b568 <vTaskSwitchContext+0xb0>)
 800b54a:	6013      	str	r3, [r2, #0]
}
 800b54c:	bf00      	nop
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	2000043c 	.word	0x2000043c
 800b55c:	20000428 	.word	0x20000428
 800b560:	2000041c 	.word	0x2000041c
 800b564:	20000318 	.word	0x20000318
 800b568:	20000314 	.word	0x20000314

0800b56c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <vTaskPlaceOnEventList+0x24>
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60fb      	str	r3, [r7, #12]
 800b58e:	e7fe      	b.n	800b58e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b590:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <vTaskPlaceOnEventList+0x44>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3318      	adds	r3, #24
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7fe fc5e 	bl	8009e5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b59e:	2101      	movs	r1, #1
 800b5a0:	6838      	ldr	r0, [r7, #0]
 800b5a2:	f000 fb8b 	bl	800bcbc <prvAddCurrentTaskToDelayedList>
}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000314 	.word	0x20000314

0800b5b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d109      	bne.n	800b5de <xTaskRemoveFromEventList+0x2a>
 800b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	e7fe      	b.n	800b5dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe fc72 	bl	8009ecc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <xTaskRemoveFromEventList+0xac>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d11c      	bne.n	800b62a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fe fc69 	bl	8009ecc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	2201      	movs	r2, #1
 800b600:	409a      	lsls	r2, r3
 800b602:	4b18      	ldr	r3, [pc, #96]	; (800b664 <xTaskRemoveFromEventList+0xb0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4313      	orrs	r3, r2
 800b608:	4a16      	ldr	r2, [pc, #88]	; (800b664 <xTaskRemoveFromEventList+0xb0>)
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4a13      	ldr	r2, [pc, #76]	; (800b668 <xTaskRemoveFromEventList+0xb4>)
 800b61a:	441a      	add	r2, r3
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	3304      	adds	r3, #4
 800b620:	4619      	mov	r1, r3
 800b622:	4610      	mov	r0, r2
 800b624:	f7fe fbf5 	bl	8009e12 <vListInsertEnd>
 800b628:	e005      	b.n	800b636 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3318      	adds	r3, #24
 800b62e:	4619      	mov	r1, r3
 800b630:	480e      	ldr	r0, [pc, #56]	; (800b66c <xTaskRemoveFromEventList+0xb8>)
 800b632:	f7fe fbee 	bl	8009e12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <xTaskRemoveFromEventList+0xbc>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	429a      	cmp	r2, r3
 800b642:	d905      	bls.n	800b650 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <xTaskRemoveFromEventList+0xc0>)
 800b64a:	2201      	movs	r2, #1
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	e001      	b.n	800b654 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b650:	2300      	movs	r3, #0
 800b652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b654:	697b      	ldr	r3, [r7, #20]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	2000043c 	.word	0x2000043c
 800b664:	2000041c 	.word	0x2000041c
 800b668:	20000318 	.word	0x20000318
 800b66c:	200003d4 	.word	0x200003d4
 800b670:	20000314 	.word	0x20000314
 800b674:	20000428 	.word	0x20000428

0800b678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b680:	4b06      	ldr	r3, [pc, #24]	; (800b69c <vTaskInternalSetTimeOutState+0x24>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b688:	4b05      	ldr	r3, [pc, #20]	; (800b6a0 <vTaskInternalSetTimeOutState+0x28>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	605a      	str	r2, [r3, #4]
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	2000042c 	.word	0x2000042c
 800b6a0:	20000418 	.word	0x20000418

0800b6a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d109      	bne.n	800b6c8 <xTaskCheckForTimeOut+0x24>
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	613b      	str	r3, [r7, #16]
 800b6c6:	e7fe      	b.n	800b6c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d109      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x3e>
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e7fe      	b.n	800b6e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b6e2:	f000 fc7b 	bl	800bfdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6e6:	4b1d      	ldr	r3, [pc, #116]	; (800b75c <xTaskCheckForTimeOut+0xb8>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fe:	d102      	bne.n	800b706 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b700:	2300      	movs	r3, #0
 800b702:	61fb      	str	r3, [r7, #28]
 800b704:	e023      	b.n	800b74e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <xTaskCheckForTimeOut+0xbc>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d007      	beq.n	800b722 <xTaskCheckForTimeOut+0x7e>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d302      	bcc.n	800b722 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b71c:	2301      	movs	r3, #1
 800b71e:	61fb      	str	r3, [r7, #28]
 800b720:	e015      	b.n	800b74e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d20b      	bcs.n	800b744 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	1ad2      	subs	r2, r2, r3
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ff9d 	bl	800b678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b73e:	2300      	movs	r3, #0
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	e004      	b.n	800b74e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b74a:	2301      	movs	r3, #1
 800b74c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b74e:	f000 fc73 	bl	800c038 <vPortExitCritical>

	return xReturn;
 800b752:	69fb      	ldr	r3, [r7, #28]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000418 	.word	0x20000418
 800b760:	2000042c 	.word	0x2000042c

0800b764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b768:	4b03      	ldr	r3, [pc, #12]	; (800b778 <vTaskMissedYield+0x14>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
}
 800b76e:	bf00      	nop
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	20000428 	.word	0x20000428

0800b77c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b784:	f000 f852 	bl	800b82c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b788:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <prvIdleTask+0x28>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d9f9      	bls.n	800b784 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <prvIdleTask+0x2c>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7a0:	e7f0      	b.n	800b784 <prvIdleTask+0x8>
 800b7a2:	bf00      	nop
 800b7a4:	20000318 	.word	0x20000318
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	e00c      	b.n	800b7d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4a12      	ldr	r2, [pc, #72]	; (800b80c <prvInitialiseTaskLists+0x60>)
 800b7c4:	4413      	add	r3, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe faf6 	bl	8009db8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	607b      	str	r3, [r7, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b06      	cmp	r3, #6
 800b7d6:	d9ef      	bls.n	800b7b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7d8:	480d      	ldr	r0, [pc, #52]	; (800b810 <prvInitialiseTaskLists+0x64>)
 800b7da:	f7fe faed 	bl	8009db8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7de:	480d      	ldr	r0, [pc, #52]	; (800b814 <prvInitialiseTaskLists+0x68>)
 800b7e0:	f7fe faea 	bl	8009db8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7e4:	480c      	ldr	r0, [pc, #48]	; (800b818 <prvInitialiseTaskLists+0x6c>)
 800b7e6:	f7fe fae7 	bl	8009db8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7ea:	480c      	ldr	r0, [pc, #48]	; (800b81c <prvInitialiseTaskLists+0x70>)
 800b7ec:	f7fe fae4 	bl	8009db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7f0:	480b      	ldr	r0, [pc, #44]	; (800b820 <prvInitialiseTaskLists+0x74>)
 800b7f2:	f7fe fae1 	bl	8009db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <prvInitialiseTaskLists+0x78>)
 800b7f8:	4a05      	ldr	r2, [pc, #20]	; (800b810 <prvInitialiseTaskLists+0x64>)
 800b7fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	; (800b828 <prvInitialiseTaskLists+0x7c>)
 800b7fe:	4a05      	ldr	r2, [pc, #20]	; (800b814 <prvInitialiseTaskLists+0x68>)
 800b800:	601a      	str	r2, [r3, #0]
}
 800b802:	bf00      	nop
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000318 	.word	0x20000318
 800b810:	200003a4 	.word	0x200003a4
 800b814:	200003b8 	.word	0x200003b8
 800b818:	200003d4 	.word	0x200003d4
 800b81c:	200003e8 	.word	0x200003e8
 800b820:	20000400 	.word	0x20000400
 800b824:	200003cc 	.word	0x200003cc
 800b828:	200003d0 	.word	0x200003d0

0800b82c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b832:	e019      	b.n	800b868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b834:	f000 fbd2 	bl	800bfdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b838:	4b0f      	ldr	r3, [pc, #60]	; (800b878 <prvCheckTasksWaitingTermination+0x4c>)
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3304      	adds	r3, #4
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe fb41 	bl	8009ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b84a:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <prvCheckTasksWaitingTermination+0x50>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3b01      	subs	r3, #1
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <prvCheckTasksWaitingTermination+0x50>)
 800b852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b854:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <prvCheckTasksWaitingTermination+0x54>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3b01      	subs	r3, #1
 800b85a:	4a09      	ldr	r2, [pc, #36]	; (800b880 <prvCheckTasksWaitingTermination+0x54>)
 800b85c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b85e:	f000 fbeb 	bl	800c038 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f80e 	bl	800b884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <prvCheckTasksWaitingTermination+0x54>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e1      	bne.n	800b834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	200003e8 	.word	0x200003e8
 800b87c:	20000414 	.word	0x20000414
 800b880:	200003fc 	.word	0x200003fc

0800b884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b892:	2b00      	cmp	r3, #0
 800b894:	d108      	bne.n	800b8a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fd7a 	bl	800c394 <vPortFree>
				vPortFree( pxTCB );
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fd77 	bl	800c394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8a6:	e017      	b.n	800b8d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d103      	bne.n	800b8ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fd6e 	bl	800c394 <vPortFree>
	}
 800b8b8:	e00e      	b.n	800b8d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d009      	beq.n	800b8d8 <prvDeleteTCB+0x54>
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	e7fe      	b.n	800b8d6 <prvDeleteTCB+0x52>
	}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <prvResetNextTaskUnblockTime+0x38>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d104      	bne.n	800b8fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <prvResetNextTaskUnblockTime+0x3c>)
 800b8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8f8:	e008      	b.n	800b90c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fa:	4b07      	ldr	r3, [pc, #28]	; (800b918 <prvResetNextTaskUnblockTime+0x38>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	4a04      	ldr	r2, [pc, #16]	; (800b91c <prvResetNextTaskUnblockTime+0x3c>)
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	200003cc 	.word	0x200003cc
 800b91c:	20000434 	.word	0x20000434

0800b920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <xTaskGetSchedulerState+0x34>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b92e:	2301      	movs	r3, #1
 800b930:	607b      	str	r3, [r7, #4]
 800b932:	e008      	b.n	800b946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b934:	4b08      	ldr	r3, [pc, #32]	; (800b958 <xTaskGetSchedulerState+0x38>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d102      	bne.n	800b942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b93c:	2302      	movs	r3, #2
 800b93e:	607b      	str	r3, [r7, #4]
 800b940:	e001      	b.n	800b946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b942:	2300      	movs	r3, #0
 800b944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b946:	687b      	ldr	r3, [r7, #4]
	}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20000420 	.word	0x20000420
 800b958:	2000043c 	.word	0x2000043c

0800b95c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d069      	beq.n	800ba46 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	4b36      	ldr	r3, [pc, #216]	; (800ba50 <xTaskPriorityInherit+0xf4>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d259      	bcs.n	800ba34 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	db06      	blt.n	800b996 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b988:	4b31      	ldr	r3, [pc, #196]	; (800ba50 <xTaskPriorityInherit+0xf4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98e:	f1c3 0207 	rsb	r2, r3, #7
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6959      	ldr	r1, [r3, #20]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a2b      	ldr	r2, [pc, #172]	; (800ba54 <xTaskPriorityInherit+0xf8>)
 800b9a8:	4413      	add	r3, r2
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	d13a      	bne.n	800ba24 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fa8a 	bl	8009ecc <uxListRemove>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d115      	bne.n	800b9ea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c2:	4924      	ldr	r1, [pc, #144]	; (800ba54 <xTaskPriorityInherit+0xf8>)
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	440b      	add	r3, r1
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xTaskPriorityInherit+0x8e>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	2201      	movs	r2, #1
 800b9da:	fa02 f303 	lsl.w	r3, r2, r3
 800b9de:	43da      	mvns	r2, r3
 800b9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ba58 <xTaskPriorityInherit+0xfc>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	4a1c      	ldr	r2, [pc, #112]	; (800ba58 <xTaskPriorityInherit+0xfc>)
 800b9e8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9ea:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <xTaskPriorityInherit+0xf4>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	409a      	lsls	r2, r3
 800b9fc:	4b16      	ldr	r3, [pc, #88]	; (800ba58 <xTaskPriorityInherit+0xfc>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <xTaskPriorityInherit+0xfc>)
 800ba04:	6013      	str	r3, [r2, #0]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4a10      	ldr	r2, [pc, #64]	; (800ba54 <xTaskPriorityInherit+0xf8>)
 800ba14:	441a      	add	r2, r3
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f7fe f9f8 	bl	8009e12 <vListInsertEnd>
 800ba22:	e004      	b.n	800ba2e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba24:	4b0a      	ldr	r3, [pc, #40]	; (800ba50 <xTaskPriorityInherit+0xf4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	e008      	b.n	800ba46 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba38:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <xTaskPriorityInherit+0xf4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d201      	bcs.n	800ba46 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba42:	2301      	movs	r3, #1
 800ba44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba46:	68fb      	ldr	r3, [r7, #12]
	}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000314 	.word	0x20000314
 800ba54:	20000318 	.word	0x20000318
 800ba58:	2000041c 	.word	0x2000041c

0800ba5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d06c      	beq.n	800bb4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba72:	4b39      	ldr	r3, [pc, #228]	; (800bb58 <xTaskPriorityDisinherit+0xfc>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d009      	beq.n	800ba90 <xTaskPriorityDisinherit+0x34>
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e7fe      	b.n	800ba8e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d109      	bne.n	800baac <xTaskPriorityDisinherit+0x50>
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60bb      	str	r3, [r7, #8]
 800baaa:	e7fe      	b.n	800baaa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bab0:	1e5a      	subs	r2, r3, #1
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800babe:	429a      	cmp	r2, r3
 800bac0:	d044      	beq.n	800bb4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d140      	bne.n	800bb4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3304      	adds	r3, #4
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe f9fc 	bl	8009ecc <uxListRemove>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d115      	bne.n	800bb06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	491f      	ldr	r1, [pc, #124]	; (800bb5c <xTaskPriorityDisinherit+0x100>)
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	440b      	add	r3, r1
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <xTaskPriorityDisinherit+0xaa>
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	2201      	movs	r2, #1
 800baf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bafa:	43da      	mvns	r2, r3
 800bafc:	4b18      	ldr	r3, [pc, #96]	; (800bb60 <xTaskPriorityDisinherit+0x104>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4013      	ands	r3, r2
 800bb02:	4a17      	ldr	r2, [pc, #92]	; (800bb60 <xTaskPriorityDisinherit+0x104>)
 800bb04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	f1c3 0207 	rsb	r2, r3, #7
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	2201      	movs	r2, #1
 800bb20:	409a      	lsls	r2, r3
 800bb22:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <xTaskPriorityDisinherit+0x104>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	4a0d      	ldr	r2, [pc, #52]	; (800bb60 <xTaskPriorityDisinherit+0x104>)
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <xTaskPriorityDisinherit+0x100>)
 800bb3a:	441a      	add	r2, r3
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4619      	mov	r1, r3
 800bb42:	4610      	mov	r0, r2
 800bb44:	f7fe f965 	bl	8009e12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb4c:	697b      	ldr	r3, [r7, #20]
	}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000314 	.word	0x20000314
 800bb5c:	20000318 	.word	0x20000318
 800bb60:	2000041c 	.word	0x2000041c

0800bb64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb72:	2301      	movs	r3, #1
 800bb74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 8081 	beq.w	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d109      	bne.n	800bb9a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800bb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e7fe      	b.n	800bb98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d902      	bls.n	800bbaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	61fb      	str	r3, [r7, #28]
 800bba8:	e002      	b.n	800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	69fa      	ldr	r2, [r7, #28]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d062      	beq.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d15d      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bbc4:	4b30      	ldr	r3, [pc, #192]	; (800bc88 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d109      	bne.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	60bb      	str	r3, [r7, #8]
 800bbe0:	e7fe      	b.n	800bbe0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db04      	blt.n	800bc00 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	f1c3 0207 	rsb	r2, r3, #7
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	6959      	ldr	r1, [r3, #20]
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bc10:	4413      	add	r3, r2
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d134      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe f956 	bl	8009ecc <uxListRemove>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d115      	bne.n	800bc52 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2a:	4918      	ldr	r1, [pc, #96]	; (800bc8c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	440b      	add	r3, r1
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	2201      	movs	r2, #1
 800bc42:	fa02 f303 	lsl.w	r3, r2, r3
 800bc46:	43da      	mvns	r2, r3
 800bc48:	4b11      	ldr	r3, [pc, #68]	; (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	4a10      	ldr	r2, [pc, #64]	; (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bc50:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	2201      	movs	r2, #1
 800bc58:	409a      	lsls	r2, r3
 800bc5a:	4b0d      	ldr	r3, [pc, #52]	; (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	4a0b      	ldr	r2, [pc, #44]	; (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a06      	ldr	r2, [pc, #24]	; (800bc8c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bc72:	441a      	add	r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fe f8c9 	bl	8009e12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc80:	bf00      	nop
 800bc82:	3720      	adds	r7, #32
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20000314 	.word	0x20000314
 800bc8c:	20000318 	.word	0x20000318
 800bc90:	2000041c 	.word	0x2000041c

0800bc94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc98:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bca0:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bca6:	3201      	adds	r2, #1
 800bca8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	; (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcac:	681b      	ldr	r3, [r3, #0]
	}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20000314 	.word	0x20000314

0800bcbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcc6:	4b29      	ldr	r3, [pc, #164]	; (800bd6c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bccc:	4b28      	ldr	r3, [pc, #160]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe f8fa 	bl	8009ecc <uxListRemove>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10b      	bne.n	800bcf6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bcde:	4b24      	ldr	r3, [pc, #144]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	2201      	movs	r2, #1
 800bce6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcea:	43da      	mvns	r2, r3
 800bcec:	4b21      	ldr	r3, [pc, #132]	; (800bd74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	4a20      	ldr	r2, [pc, #128]	; (800bd74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcf4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfc:	d10a      	bne.n	800bd14 <prvAddCurrentTaskToDelayedList+0x58>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd04:	4b1a      	ldr	r3, [pc, #104]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	481a      	ldr	r0, [pc, #104]	; (800bd78 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd0e:	f7fe f880 	bl	8009e12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd12:	e026      	b.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4413      	add	r3, r2
 800bd1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd1c:	4b14      	ldr	r3, [pc, #80]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d209      	bcs.n	800bd40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd2c:	4b13      	ldr	r3, [pc, #76]	; (800bd7c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	4b0f      	ldr	r3, [pc, #60]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4619      	mov	r1, r3
 800bd38:	4610      	mov	r0, r2
 800bd3a:	f7fe f88e 	bl	8009e5a <vListInsert>
}
 800bd3e:	e010      	b.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd40:	4b0f      	ldr	r3, [pc, #60]	; (800bd80 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe f884 	bl	8009e5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd52:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d202      	bcs.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd5c:	4a09      	ldr	r2, [pc, #36]	; (800bd84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6013      	str	r3, [r2, #0]
}
 800bd62:	bf00      	nop
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20000418 	.word	0x20000418
 800bd70:	20000314 	.word	0x20000314
 800bd74:	2000041c 	.word	0x2000041c
 800bd78:	20000400 	.word	0x20000400
 800bd7c:	200003d0 	.word	0x200003d0
 800bd80:	200003cc 	.word	0x200003cc
 800bd84:	20000434 	.word	0x20000434

0800bd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3b04      	subs	r3, #4
 800bd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f023 0201 	bic.w	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdb8:	4a0c      	ldr	r2, [pc, #48]	; (800bdec <pxPortInitialiseStack+0x64>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3b14      	subs	r3, #20
 800bdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f06f 0202 	mvn.w	r2, #2
 800bdd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3b20      	subs	r3, #32
 800bddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	0800bdf1 	.word	0x0800bdf1

0800bdf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdfa:	4b11      	ldr	r3, [pc, #68]	; (800be40 <prvTaskExitError+0x50>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d009      	beq.n	800be18 <prvTaskExitError+0x28>
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	e7fe      	b.n	800be16 <prvTaskExitError+0x26>
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be2a:	bf00      	nop
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0fc      	beq.n	800be2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be32:	bf00      	nop
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	20000024 	.word	0x20000024
	...

0800be50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be50:	4b07      	ldr	r3, [pc, #28]	; (800be70 <pxCurrentTCBConst2>)
 800be52:	6819      	ldr	r1, [r3, #0]
 800be54:	6808      	ldr	r0, [r1, #0]
 800be56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	f380 8809 	msr	PSP, r0
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f04f 0000 	mov.w	r0, #0
 800be66:	f380 8811 	msr	BASEPRI, r0
 800be6a:	4770      	bx	lr
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst2>:
 800be70:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be78:	4808      	ldr	r0, [pc, #32]	; (800be9c <prvPortStartFirstTask+0x24>)
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	6800      	ldr	r0, [r0, #0]
 800be7e:	f380 8808 	msr	MSP, r0
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8814 	msr	CONTROL, r0
 800be8a:	b662      	cpsie	i
 800be8c:	b661      	cpsie	f
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	df00      	svc	0
 800be98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be9a:	bf00      	nop
 800be9c:	e000ed08 	.word	0xe000ed08

0800bea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bea6:	4b44      	ldr	r3, [pc, #272]	; (800bfb8 <xPortStartScheduler+0x118>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a44      	ldr	r2, [pc, #272]	; (800bfbc <xPortStartScheduler+0x11c>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d109      	bne.n	800bec4 <xPortStartScheduler+0x24>
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
 800bec2:	e7fe      	b.n	800bec2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bec4:	4b3c      	ldr	r3, [pc, #240]	; (800bfb8 <xPortStartScheduler+0x118>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a3d      	ldr	r2, [pc, #244]	; (800bfc0 <xPortStartScheduler+0x120>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d109      	bne.n	800bee2 <xPortStartScheduler+0x42>
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	e7fe      	b.n	800bee0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bee2:	4b38      	ldr	r3, [pc, #224]	; (800bfc4 <xPortStartScheduler+0x124>)
 800bee4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	22ff      	movs	r2, #255	; 0xff
 800bef2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	4b30      	ldr	r3, [pc, #192]	; (800bfc8 <xPortStartScheduler+0x128>)
 800bf08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf0a:	4b30      	ldr	r3, [pc, #192]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf0c:	2207      	movs	r2, #7
 800bf0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf10:	e009      	b.n	800bf26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bf12:	4b2e      	ldr	r3, [pc, #184]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	4a2c      	ldr	r2, [pc, #176]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf2e:	2b80      	cmp	r3, #128	; 0x80
 800bf30:	d0ef      	beq.n	800bf12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf32:	4b26      	ldr	r3, [pc, #152]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f1c3 0307 	rsb	r3, r3, #7
 800bf3a:	2b04      	cmp	r3, #4
 800bf3c:	d009      	beq.n	800bf52 <xPortStartScheduler+0xb2>
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	60bb      	str	r3, [r7, #8]
 800bf50:	e7fe      	b.n	800bf50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf52:	4b1e      	ldr	r3, [pc, #120]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	4a1c      	ldr	r2, [pc, #112]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf5c:	4b1b      	ldr	r3, [pc, #108]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf64:	4a19      	ldr	r2, [pc, #100]	; (800bfcc <xPortStartScheduler+0x12c>)
 800bf66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf70:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <xPortStartScheduler+0x130>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a16      	ldr	r2, [pc, #88]	; (800bfd0 <xPortStartScheduler+0x130>)
 800bf76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf7c:	4b14      	ldr	r3, [pc, #80]	; (800bfd0 <xPortStartScheduler+0x130>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a13      	ldr	r2, [pc, #76]	; (800bfd0 <xPortStartScheduler+0x130>)
 800bf82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf88:	f000 f8d6 	bl	800c138 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf8c:	4b11      	ldr	r3, [pc, #68]	; (800bfd4 <xPortStartScheduler+0x134>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf92:	f000 f8f5 	bl	800c180 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf96:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <xPortStartScheduler+0x138>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a0f      	ldr	r2, [pc, #60]	; (800bfd8 <xPortStartScheduler+0x138>)
 800bf9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bfa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfa2:	f7ff ff69 	bl	800be78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfa6:	f7ff fa87 	bl	800b4b8 <vTaskSwitchContext>
	prvTaskExitError();
 800bfaa:	f7ff ff21 	bl	800bdf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	e000ed00 	.word	0xe000ed00
 800bfbc:	410fc271 	.word	0x410fc271
 800bfc0:	410fc270 	.word	0x410fc270
 800bfc4:	e000e400 	.word	0xe000e400
 800bfc8:	20000440 	.word	0x20000440
 800bfcc:	20000444 	.word	0x20000444
 800bfd0:	e000ed20 	.word	0xe000ed20
 800bfd4:	20000024 	.word	0x20000024
 800bfd8:	e000ef34 	.word	0xe000ef34

0800bfdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bff4:	4b0e      	ldr	r3, [pc, #56]	; (800c030 <vPortEnterCritical+0x54>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	4a0d      	ldr	r2, [pc, #52]	; (800c030 <vPortEnterCritical+0x54>)
 800bffc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bffe:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <vPortEnterCritical+0x54>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d10e      	bne.n	800c024 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <vPortEnterCritical+0x58>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d009      	beq.n	800c024 <vPortEnterCritical+0x48>
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	603b      	str	r3, [r7, #0]
 800c022:	e7fe      	b.n	800c022 <vPortEnterCritical+0x46>
	}
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	20000024 	.word	0x20000024
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <vPortExitCritical+0x4c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <vPortExitCritical+0x22>
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	e7fe      	b.n	800c058 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c05a:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <vPortExitCritical+0x4c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	4a08      	ldr	r2, [pc, #32]	; (800c084 <vPortExitCritical+0x4c>)
 800c062:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c064:	4b07      	ldr	r3, [pc, #28]	; (800c084 <vPortExitCritical+0x4c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d104      	bne.n	800c076 <vPortExitCritical+0x3e>
 800c06c:	2300      	movs	r3, #0
 800c06e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20000024 	.word	0x20000024
	...

0800c090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c090:	f3ef 8009 	mrs	r0, PSP
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <pxCurrentTCBConst>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	f01e 0f10 	tst.w	lr, #16
 800c0a0:	bf08      	it	eq
 800c0a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	6010      	str	r0, [r2, #0]
 800c0ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0b4:	f380 8811 	msr	BASEPRI, r0
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f7ff f9fa 	bl	800b4b8 <vTaskSwitchContext>
 800c0c4:	f04f 0000 	mov.w	r0, #0
 800c0c8:	f380 8811 	msr	BASEPRI, r0
 800c0cc:	bc09      	pop	{r0, r3}
 800c0ce:	6819      	ldr	r1, [r3, #0]
 800c0d0:	6808      	ldr	r0, [r1, #0]
 800c0d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d6:	f01e 0f10 	tst.w	lr, #16
 800c0da:	bf08      	it	eq
 800c0dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0e0:	f380 8809 	msr	PSP, r0
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w

0800c0f0 <pxCurrentTCBConst>:
 800c0f0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop

0800c0f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c110:	f7ff f91a 	bl	800b348 <xTaskIncrementTick>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <SysTick_Handler+0x3c>)
 800c11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	2300      	movs	r3, #0
 800c124:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	e000ed04 	.word	0xe000ed04

0800c138 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c13c:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <vPortSetupTimerInterrupt+0x34>)
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <vPortSetupTimerInterrupt+0x38>)
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c148:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <vPortSetupTimerInterrupt+0x3c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a0a      	ldr	r2, [pc, #40]	; (800c178 <vPortSetupTimerInterrupt+0x40>)
 800c14e:	fba2 2303 	umull	r2, r3, r2, r3
 800c152:	099b      	lsrs	r3, r3, #6
 800c154:	4a09      	ldr	r2, [pc, #36]	; (800c17c <vPortSetupTimerInterrupt+0x44>)
 800c156:	3b01      	subs	r3, #1
 800c158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c15a:	4b04      	ldr	r3, [pc, #16]	; (800c16c <vPortSetupTimerInterrupt+0x34>)
 800c15c:	2207      	movs	r2, #7
 800c15e:	601a      	str	r2, [r3, #0]
}
 800c160:	bf00      	nop
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	e000e010 	.word	0xe000e010
 800c170:	e000e018 	.word	0xe000e018
 800c174:	20000000 	.word	0x20000000
 800c178:	10624dd3 	.word	0x10624dd3
 800c17c:	e000e014 	.word	0xe000e014

0800c180 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c180:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c190 <vPortEnableVFP+0x10>
 800c184:	6801      	ldr	r1, [r0, #0]
 800c186:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c18a:	6001      	str	r1, [r0, #0]
 800c18c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c18e:	bf00      	nop
 800c190:	e000ed88 	.word	0xe000ed88

0800c194 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c19a:	f3ef 8305 	mrs	r3, IPSR
 800c19e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b0f      	cmp	r3, #15
 800c1a4:	d913      	bls.n	800c1ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1a6:	4a16      	ldr	r2, [pc, #88]	; (800c200 <vPortValidateInterruptPriority+0x6c>)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1b0:	4b14      	ldr	r3, [pc, #80]	; (800c204 <vPortValidateInterruptPriority+0x70>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	7afa      	ldrb	r2, [r7, #11]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d209      	bcs.n	800c1ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	607b      	str	r3, [r7, #4]
 800c1cc:	e7fe      	b.n	800c1cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <vPortValidateInterruptPriority+0x74>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <vPortValidateInterruptPriority+0x78>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d909      	bls.n	800c1f2 <vPortValidateInterruptPriority+0x5e>
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	603b      	str	r3, [r7, #0]
 800c1f0:	e7fe      	b.n	800c1f0 <vPortValidateInterruptPriority+0x5c>
	}
 800c1f2:	bf00      	nop
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	e000e3f0 	.word	0xe000e3f0
 800c204:	20000440 	.word	0x20000440
 800c208:	e000ed0c 	.word	0xe000ed0c
 800c20c:	20000444 	.word	0x20000444

0800c210 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08a      	sub	sp, #40	; 0x28
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c21c:	f7fe ffc8 	bl	800b1b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c220:	4b57      	ldr	r3, [pc, #348]	; (800c380 <pvPortMalloc+0x170>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c228:	f000 f90c 	bl	800c444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c22c:	4b55      	ldr	r3, [pc, #340]	; (800c384 <pvPortMalloc+0x174>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	f040 808c 	bne.w	800c352 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d01c      	beq.n	800c27a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c240:	2208      	movs	r2, #8
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f003 0307 	and.w	r3, r3, #7
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d013      	beq.n	800c27a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f023 0307 	bic.w	r3, r3, #7
 800c258:	3308      	adds	r3, #8
 800c25a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f003 0307 	and.w	r3, r3, #7
 800c262:	2b00      	cmp	r3, #0
 800c264:	d009      	beq.n	800c27a <pvPortMalloc+0x6a>
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	e7fe      	b.n	800c278 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d068      	beq.n	800c352 <pvPortMalloc+0x142>
 800c280:	4b41      	ldr	r3, [pc, #260]	; (800c388 <pvPortMalloc+0x178>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	429a      	cmp	r2, r3
 800c288:	d863      	bhi.n	800c352 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c28a:	4b40      	ldr	r3, [pc, #256]	; (800c38c <pvPortMalloc+0x17c>)
 800c28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c28e:	4b3f      	ldr	r3, [pc, #252]	; (800c38c <pvPortMalloc+0x17c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c294:	e004      	b.n	800c2a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d903      	bls.n	800c2b2 <pvPortMalloc+0xa2>
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f1      	bne.n	800c296 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2b2:	4b33      	ldr	r3, [pc, #204]	; (800c380 <pvPortMalloc+0x170>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d04a      	beq.n	800c352 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	4413      	add	r3, r2
 800c2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	2308      	movs	r3, #8
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d91e      	bls.n	800c31c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f003 0307 	and.w	r3, r3, #7
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <pvPortMalloc+0xf4>
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	e7fe      	b.n	800c302 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	1ad2      	subs	r2, r2, r3
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c316:	69b8      	ldr	r0, [r7, #24]
 800c318:	f000 f8f6 	bl	800c508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c31c:	4b1a      	ldr	r3, [pc, #104]	; (800c388 <pvPortMalloc+0x178>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	4a18      	ldr	r2, [pc, #96]	; (800c388 <pvPortMalloc+0x178>)
 800c328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c32a:	4b17      	ldr	r3, [pc, #92]	; (800c388 <pvPortMalloc+0x178>)
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	4b18      	ldr	r3, [pc, #96]	; (800c390 <pvPortMalloc+0x180>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d203      	bcs.n	800c33e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c336:	4b14      	ldr	r3, [pc, #80]	; (800c388 <pvPortMalloc+0x178>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a15      	ldr	r2, [pc, #84]	; (800c390 <pvPortMalloc+0x180>)
 800c33c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	4b10      	ldr	r3, [pc, #64]	; (800c384 <pvPortMalloc+0x174>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	431a      	orrs	r2, r3
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c352:	f7fe ff3b 	bl	800b1cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f003 0307 	and.w	r3, r3, #7
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d009      	beq.n	800c374 <pvPortMalloc+0x164>
 800c360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e7fe      	b.n	800c372 <pvPortMalloc+0x162>
	return pvReturn;
 800c374:	69fb      	ldr	r3, [r7, #28]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3728      	adds	r7, #40	; 0x28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	20004050 	.word	0x20004050
 800c384:	2000405c 	.word	0x2000405c
 800c388:	20004054 	.word	0x20004054
 800c38c:	20004048 	.word	0x20004048
 800c390:	20004058 	.word	0x20004058

0800c394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d046      	beq.n	800c434 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3a6:	2308      	movs	r3, #8
 800c3a8:	425b      	negs	r3, r3
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4b20      	ldr	r3, [pc, #128]	; (800c43c <vPortFree+0xa8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <vPortFree+0x42>
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	e7fe      	b.n	800c3d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d009      	beq.n	800c3f2 <vPortFree+0x5e>
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60bb      	str	r3, [r7, #8]
 800c3f0:	e7fe      	b.n	800c3f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	4b11      	ldr	r3, [pc, #68]	; (800c43c <vPortFree+0xa8>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d019      	beq.n	800c434 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d115      	bne.n	800c434 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <vPortFree+0xa8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	43db      	mvns	r3, r3
 800c412:	401a      	ands	r2, r3
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c418:	f7fe feca 	bl	800b1b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	4b07      	ldr	r3, [pc, #28]	; (800c440 <vPortFree+0xac>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4413      	add	r3, r2
 800c426:	4a06      	ldr	r2, [pc, #24]	; (800c440 <vPortFree+0xac>)
 800c428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c42a:	6938      	ldr	r0, [r7, #16]
 800c42c:	f000 f86c 	bl	800c508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c430:	f7fe fecc 	bl	800b1cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c434:	bf00      	nop
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	2000405c 	.word	0x2000405c
 800c440:	20004054 	.word	0x20004054

0800c444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c44a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c44e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c450:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <prvHeapInit+0xac>)
 800c452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00c      	beq.n	800c478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3307      	adds	r3, #7
 800c462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 0307 	bic.w	r3, r3, #7
 800c46a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	4a1f      	ldr	r2, [pc, #124]	; (800c4f0 <prvHeapInit+0xac>)
 800c474:	4413      	add	r3, r2
 800c476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c47c:	4a1d      	ldr	r2, [pc, #116]	; (800c4f4 <prvHeapInit+0xb0>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c482:	4b1c      	ldr	r3, [pc, #112]	; (800c4f4 <prvHeapInit+0xb0>)
 800c484:	2200      	movs	r2, #0
 800c486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	4413      	add	r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c490:	2208      	movs	r2, #8
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	1a9b      	subs	r3, r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0307 	bic.w	r3, r3, #7
 800c49e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4a15      	ldr	r2, [pc, #84]	; (800c4f8 <prvHeapInit+0xb4>)
 800c4a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4a6:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <prvHeapInit+0xb4>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4ae:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <prvHeapInit+0xb4>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <prvHeapInit+0xb4>)
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	4a0a      	ldr	r2, [pc, #40]	; (800c4fc <prvHeapInit+0xb8>)
 800c4d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	4a09      	ldr	r2, [pc, #36]	; (800c500 <prvHeapInit+0xbc>)
 800c4da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4dc:	4b09      	ldr	r3, [pc, #36]	; (800c504 <prvHeapInit+0xc0>)
 800c4de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4e2:	601a      	str	r2, [r3, #0]
}
 800c4e4:	bf00      	nop
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20000448 	.word	0x20000448
 800c4f4:	20004048 	.word	0x20004048
 800c4f8:	20004050 	.word	0x20004050
 800c4fc:	20004058 	.word	0x20004058
 800c500:	20004054 	.word	0x20004054
 800c504:	2000405c 	.word	0x2000405c

0800c508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c510:	4b28      	ldr	r3, [pc, #160]	; (800c5b4 <prvInsertBlockIntoFreeList+0xac>)
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	e002      	b.n	800c51c <prvInsertBlockIntoFreeList+0x14>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	429a      	cmp	r2, r3
 800c524:	d8f7      	bhi.n	800c516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	4413      	add	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d108      	bne.n	800c54a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	441a      	add	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	441a      	add	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d118      	bne.n	800c590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	4b15      	ldr	r3, [pc, #84]	; (800c5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d00d      	beq.n	800c586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	441a      	add	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	e008      	b.n	800c598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c586:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	e003      	b.n	800c598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d002      	beq.n	800c5a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20004048 	.word	0x20004048
 800c5b8:	20004050 	.word	0x20004050

0800c5bc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800c5c4:	4b29      	ldr	r3, [pc, #164]	; (800c66c <tcpip_thread+0xb0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d005      	beq.n	800c5d8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800c5cc:	4b27      	ldr	r3, [pc, #156]	; (800c66c <tcpip_thread+0xb0>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a27      	ldr	r2, [pc, #156]	; (800c670 <tcpip_thread+0xb4>)
 800c5d2:	6812      	ldr	r2, [r2, #0]
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800c5d8:	4826      	ldr	r0, [pc, #152]	; (800c674 <tcpip_thread+0xb8>)
 800c5da:	f00b f86f 	bl	80176bc <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800c5de:	4825      	ldr	r0, [pc, #148]	; (800c674 <tcpip_thread+0xb8>)
 800c5e0:	f00b f87b 	bl	80176da <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800c5e4:	f107 030c 	add.w	r3, r7, #12
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4823      	ldr	r0, [pc, #140]	; (800c678 <tcpip_thread+0xbc>)
 800c5ec:	f006 fac8 	bl	8012b80 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c5f0:	4820      	ldr	r0, [pc, #128]	; (800c674 <tcpip_thread+0xb8>)
 800c5f2:	f00b f863 	bl	80176bc <sys_mutex_lock>
    if (msg == NULL) {
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c5fc:	4b1f      	ldr	r3, [pc, #124]	; (800c67c <tcpip_thread+0xc0>)
 800c5fe:	2269      	movs	r2, #105	; 0x69
 800c600:	491f      	ldr	r1, [pc, #124]	; (800c680 <tcpip_thread+0xc4>)
 800c602:	4820      	ldr	r0, [pc, #128]	; (800c684 <tcpip_thread+0xc8>)
 800c604:	f00b f900 	bl	8017808 <iprintf>
      continue;
 800c608:	e02f      	b.n	800c66a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d011      	beq.n	800c636 <tcpip_thread+0x7a>
 800c612:	2b04      	cmp	r3, #4
 800c614:	d01b      	beq.n	800c64e <tcpip_thread+0x92>
 800c616:	2b02      	cmp	r3, #2
 800c618:	d120      	bne.n	800c65c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	6850      	ldr	r0, [r2, #4]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	6892      	ldr	r2, [r2, #8]
 800c626:	4611      	mov	r1, r2
 800c628:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	4619      	mov	r1, r3
 800c62e:	2009      	movs	r0, #9
 800c630:	f000 fda6 	bl	800d180 <memp_free>
      break;
 800c634:	e019      	b.n	800c66a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	6892      	ldr	r2, [r2, #8]
 800c63e:	4610      	mov	r0, r2
 800c640:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4619      	mov	r1, r3
 800c646:	2008      	movs	r0, #8
 800c648:	f000 fd9a 	bl	800d180 <memp_free>
      break;
 800c64c:	e00d      	b.n	800c66a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	6892      	ldr	r2, [r2, #8]
 800c656:	4610      	mov	r0, r2
 800c658:	4798      	blx	r3
      break;
 800c65a:	e006      	b.n	800c66a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c65c:	4b07      	ldr	r3, [pc, #28]	; (800c67c <tcpip_thread+0xc0>)
 800c65e:	229b      	movs	r2, #155	; 0x9b
 800c660:	4907      	ldr	r1, [pc, #28]	; (800c680 <tcpip_thread+0xc4>)
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <tcpip_thread+0xc8>)
 800c664:	f00b f8d0 	bl	8017808 <iprintf>
      break;
 800c668:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800c66a:	e7b8      	b.n	800c5de <tcpip_thread+0x22>
 800c66c:	20004060 	.word	0x20004060
 800c670:	20004064 	.word	0x20004064
 800c674:	200048b0 	.word	0x200048b0
 800c678:	20004068 	.word	0x20004068
 800c67c:	08018734 	.word	0x08018734
 800c680:	08018788 	.word	0x08018788
 800c684:	080187a8 	.word	0x080187a8

0800c688 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800c694:	481a      	ldr	r0, [pc, #104]	; (800c700 <tcpip_inpkt+0x78>)
 800c696:	f00a ffd5 	bl	8017644 <sys_mbox_valid>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d105      	bne.n	800c6ac <tcpip_inpkt+0x24>
 800c6a0:	4b18      	ldr	r3, [pc, #96]	; (800c704 <tcpip_inpkt+0x7c>)
 800c6a2:	22b5      	movs	r2, #181	; 0xb5
 800c6a4:	4918      	ldr	r1, [pc, #96]	; (800c708 <tcpip_inpkt+0x80>)
 800c6a6:	4819      	ldr	r0, [pc, #100]	; (800c70c <tcpip_inpkt+0x84>)
 800c6a8:	f00b f8ae 	bl	8017808 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c6ac:	2009      	movs	r0, #9
 800c6ae:	f000 fcf1 	bl	800d094 <memp_malloc>
 800c6b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d102      	bne.n	800c6c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c6be:	e01a      	b.n	800c6f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c6d8:	6979      	ldr	r1, [r7, #20]
 800c6da:	4809      	ldr	r0, [pc, #36]	; (800c700 <tcpip_inpkt+0x78>)
 800c6dc:	f00a ff59 	bl	8017592 <sys_mbox_trypost>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c6e6:	6979      	ldr	r1, [r7, #20]
 800c6e8:	2009      	movs	r0, #9
 800c6ea:	f000 fd49 	bl	800d180 <memp_free>
    return ERR_MEM;
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	e000      	b.n	800c6f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c6f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20004068 	.word	0x20004068
 800c704:	08018734 	.word	0x08018734
 800c708:	080187d0 	.word	0x080187d0
 800c70c:	080187a8 	.word	0x080187a8

0800c710 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c720:	f003 0318 	and.w	r3, r3, #24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d006      	beq.n	800c736 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c728:	4a08      	ldr	r2, [pc, #32]	; (800c74c <tcpip_input+0x3c>)
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff ffab 	bl	800c688 <tcpip_inpkt>
 800c732:	4603      	mov	r3, r0
 800c734:	e005      	b.n	800c742 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800c736:	4a06      	ldr	r2, [pc, #24]	; (800c750 <tcpip_input+0x40>)
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff ffa4 	bl	800c688 <tcpip_inpkt>
 800c740:	4603      	mov	r3, r0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	0801736d 	.word	0x0801736d
 800c750:	080162f5 	.word	0x080162f5

0800c754 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800c762:	481d      	ldr	r0, [pc, #116]	; (800c7d8 <tcpip_callback_with_block+0x84>)
 800c764:	f00a ff6e 	bl	8017644 <sys_mbox_valid>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d105      	bne.n	800c77a <tcpip_callback_with_block+0x26>
 800c76e:	4b1b      	ldr	r3, [pc, #108]	; (800c7dc <tcpip_callback_with_block+0x88>)
 800c770:	22ee      	movs	r2, #238	; 0xee
 800c772:	491b      	ldr	r1, [pc, #108]	; (800c7e0 <tcpip_callback_with_block+0x8c>)
 800c774:	481b      	ldr	r0, [pc, #108]	; (800c7e4 <tcpip_callback_with_block+0x90>)
 800c776:	f00b f847 	bl	8017808 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c77a:	2008      	movs	r0, #8
 800c77c:	f000 fc8a 	bl	800d094 <memp_malloc>
 800c780:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800c788:	f04f 33ff 	mov.w	r3, #4294967295
 800c78c:	e01f      	b.n	800c7ce <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2203      	movs	r2, #3
 800c792:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	609a      	str	r2, [r3, #8]
  if (block) {
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d004      	beq.n	800c7b0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800c7a6:	6979      	ldr	r1, [r7, #20]
 800c7a8:	480b      	ldr	r0, [pc, #44]	; (800c7d8 <tcpip_callback_with_block+0x84>)
 800c7aa:	f00a fedd 	bl	8017568 <sys_mbox_post>
 800c7ae:	e00d      	b.n	800c7cc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	4809      	ldr	r0, [pc, #36]	; (800c7d8 <tcpip_callback_with_block+0x84>)
 800c7b4:	f00a feed 	bl	8017592 <sys_mbox_trypost>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d006      	beq.n	800c7cc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c7be:	6979      	ldr	r1, [r7, #20]
 800c7c0:	2008      	movs	r0, #8
 800c7c2:	f000 fcdd 	bl	800d180 <memp_free>
      return ERR_MEM;
 800c7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ca:	e000      	b.n	800c7ce <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20004068 	.word	0x20004068
 800c7dc:	08018734 	.word	0x08018734
 800c7e0:	080187d0 	.word	0x080187d0
 800c7e4:	080187a8 	.word	0x080187a8

0800c7e8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af02      	add	r7, sp, #8
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c7f2:	f000 f86a 	bl	800c8ca <lwip_init>

  tcpip_init_done = initfunc;
 800c7f6:	4a17      	ldr	r2, [pc, #92]	; (800c854 <tcpip_init+0x6c>)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c7fc:	4a16      	ldr	r2, [pc, #88]	; (800c858 <tcpip_init+0x70>)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c802:	2106      	movs	r1, #6
 800c804:	4815      	ldr	r0, [pc, #84]	; (800c85c <tcpip_init+0x74>)
 800c806:	f00a fe8d 	bl	8017524 <sys_mbox_new>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d006      	beq.n	800c81e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c810:	4b13      	ldr	r3, [pc, #76]	; (800c860 <tcpip_init+0x78>)
 800c812:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c816:	4913      	ldr	r1, [pc, #76]	; (800c864 <tcpip_init+0x7c>)
 800c818:	4813      	ldr	r0, [pc, #76]	; (800c868 <tcpip_init+0x80>)
 800c81a:	f00a fff5 	bl	8017808 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c81e:	4813      	ldr	r0, [pc, #76]	; (800c86c <tcpip_init+0x84>)
 800c820:	f00a ff30 	bl	8017684 <sys_mutex_new>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d006      	beq.n	800c838 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c82a:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <tcpip_init+0x78>)
 800c82c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c830:	490f      	ldr	r1, [pc, #60]	; (800c870 <tcpip_init+0x88>)
 800c832:	480d      	ldr	r0, [pc, #52]	; (800c868 <tcpip_init+0x80>)
 800c834:	f00a ffe8 	bl	8017808 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c838:	2300      	movs	r3, #0
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c840:	2200      	movs	r2, #0
 800c842:	490c      	ldr	r1, [pc, #48]	; (800c874 <tcpip_init+0x8c>)
 800c844:	480c      	ldr	r0, [pc, #48]	; (800c878 <tcpip_init+0x90>)
 800c846:	f00a ff55 	bl	80176f4 <sys_thread_new>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20004060 	.word	0x20004060
 800c858:	20004064 	.word	0x20004064
 800c85c:	20004068 	.word	0x20004068
 800c860:	08018734 	.word	0x08018734
 800c864:	080187e0 	.word	0x080187e0
 800c868:	080187a8 	.word	0x080187a8
 800c86c:	200048b0 	.word	0x200048b0
 800c870:	08018804 	.word	0x08018804
 800c874:	0800c5bd 	.word	0x0800c5bd
 800c878:	08018828 	.word	0x08018828

0800c87c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	ba5b      	rev16	r3, r3
 800c88a:	b29b      	uxth	r3, r3
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	061a      	lsls	r2, r3, #24
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	0a1b      	lsrs	r3, r3, #8
 800c8b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	0e1b      	lsrs	r3, r3, #24
 800c8bc:	4313      	orrs	r3, r2
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c8d4:	f00a fec8 	bl	8017668 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c8d8:	f000 f8a6 	bl	800ca28 <mem_init>
  memp_init();
 800c8dc:	f000 fb6c 	bl	800cfb8 <memp_init>
  pbuf_init();
  netif_init();
 800c8e0:	f000 fc78 	bl	800d1d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c8e4:	f006 f972 	bl	8012bcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c8e8:	f001 fc72 	bl	800e1d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800c8ec:	f006 f804 	bl	80128f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c900:	4b40      	ldr	r3, [pc, #256]	; (800ca04 <plug_holes+0x10c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	429a      	cmp	r2, r3
 800c908:	d206      	bcs.n	800c918 <plug_holes+0x20>
 800c90a:	4b3f      	ldr	r3, [pc, #252]	; (800ca08 <plug_holes+0x110>)
 800c90c:	f240 125d 	movw	r2, #349	; 0x15d
 800c910:	493e      	ldr	r1, [pc, #248]	; (800ca0c <plug_holes+0x114>)
 800c912:	483f      	ldr	r0, [pc, #252]	; (800ca10 <plug_holes+0x118>)
 800c914:	f00a ff78 	bl	8017808 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c918:	4b3e      	ldr	r3, [pc, #248]	; (800ca14 <plug_holes+0x11c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d306      	bcc.n	800c930 <plug_holes+0x38>
 800c922:	4b39      	ldr	r3, [pc, #228]	; (800ca08 <plug_holes+0x110>)
 800c924:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c928:	493b      	ldr	r1, [pc, #236]	; (800ca18 <plug_holes+0x120>)
 800c92a:	4839      	ldr	r0, [pc, #228]	; (800ca10 <plug_holes+0x118>)
 800c92c:	f00a ff6c 	bl	8017808 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	791b      	ldrb	r3, [r3, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d006      	beq.n	800c946 <plug_holes+0x4e>
 800c938:	4b33      	ldr	r3, [pc, #204]	; (800ca08 <plug_holes+0x110>)
 800c93a:	f240 125f 	movw	r2, #351	; 0x15f
 800c93e:	4937      	ldr	r1, [pc, #220]	; (800ca1c <plug_holes+0x124>)
 800c940:	4833      	ldr	r0, [pc, #204]	; (800ca10 <plug_holes+0x118>)
 800c942:	f00a ff61 	bl	8017808 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c94e:	d906      	bls.n	800c95e <plug_holes+0x66>
 800c950:	4b2d      	ldr	r3, [pc, #180]	; (800ca08 <plug_holes+0x110>)
 800c952:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c956:	4932      	ldr	r1, [pc, #200]	; (800ca20 <plug_holes+0x128>)
 800c958:	482d      	ldr	r0, [pc, #180]	; (800ca10 <plug_holes+0x118>)
 800c95a:	f00a ff55 	bl	8017808 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c95e:	4b29      	ldr	r3, [pc, #164]	; (800ca04 <plug_holes+0x10c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	8812      	ldrh	r2, [r2, #0]
 800c966:	4413      	add	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d01f      	beq.n	800c9b2 <plug_holes+0xba>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	791b      	ldrb	r3, [r3, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d11b      	bne.n	800c9b2 <plug_holes+0xba>
 800c97a:	4b26      	ldr	r3, [pc, #152]	; (800ca14 <plug_holes+0x11c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	429a      	cmp	r2, r3
 800c982:	d016      	beq.n	800c9b2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c984:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <plug_holes+0x12c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d102      	bne.n	800c994 <plug_holes+0x9c>
      lfree = mem;
 800c98e:	4a25      	ldr	r2, [pc, #148]	; (800ca24 <plug_holes+0x12c>)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	881a      	ldrh	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a19      	ldr	r2, [pc, #100]	; (800ca04 <plug_holes+0x10c>)
 800c9a0:	6812      	ldr	r2, [r2, #0]
 800c9a2:	1a99      	subs	r1, r3, r2
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <plug_holes+0x10c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	8812      	ldrh	r2, [r2, #0]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	b28a      	uxth	r2, r1
 800c9b0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c9b2:	4b14      	ldr	r3, [pc, #80]	; (800ca04 <plug_holes+0x10c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	8852      	ldrh	r2, [r2, #2]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d01a      	beq.n	800c9fc <plug_holes+0x104>
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d116      	bne.n	800c9fc <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c9ce:	4b15      	ldr	r3, [pc, #84]	; (800ca24 <plug_holes+0x12c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d102      	bne.n	800c9de <plug_holes+0xe6>
      lfree = pmem;
 800c9d8:	4a12      	ldr	r2, [pc, #72]	; (800ca24 <plug_holes+0x12c>)
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	881a      	ldrh	r2, [r3, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	4a06      	ldr	r2, [pc, #24]	; (800ca04 <plug_holes+0x10c>)
 800c9ea:	6812      	ldr	r2, [r2, #0]
 800c9ec:	1a99      	subs	r1, r3, r2
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <plug_holes+0x10c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	8812      	ldrh	r2, [r2, #0]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	b28a      	uxth	r2, r1
 800c9fa:	805a      	strh	r2, [r3, #2]
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	2000406c 	.word	0x2000406c
 800ca08:	08018838 	.word	0x08018838
 800ca0c:	0801888c 	.word	0x0801888c
 800ca10:	080188a4 	.word	0x080188a4
 800ca14:	20004070 	.word	0x20004070
 800ca18:	080188cc 	.word	0x080188cc
 800ca1c:	080188e8 	.word	0x080188e8
 800ca20:	08018904 	.word	0x08018904
 800ca24:	20004074 	.word	0x20004074

0800ca28 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ca2e:	4b1c      	ldr	r3, [pc, #112]	; (800caa0 <mem_init+0x78>)
 800ca30:	4a1c      	ldr	r2, [pc, #112]	; (800caa4 <mem_init+0x7c>)
 800ca32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ca34:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <mem_init+0x78>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ca4e:	4b14      	ldr	r3, [pc, #80]	; (800caa0 <mem_init+0x78>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ca56:	4a14      	ldr	r2, [pc, #80]	; (800caa8 <mem_init+0x80>)
 800ca58:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ca5a:	4b13      	ldr	r3, [pc, #76]	; (800caa8 <mem_init+0x80>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ca62:	4b11      	ldr	r3, [pc, #68]	; (800caa8 <mem_init+0x80>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca6a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <mem_init+0x80>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca74:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ca76:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <mem_init+0x78>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a0c      	ldr	r2, [pc, #48]	; (800caac <mem_init+0x84>)
 800ca7c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ca7e:	480c      	ldr	r0, [pc, #48]	; (800cab0 <mem_init+0x88>)
 800ca80:	f00a fe00 	bl	8017684 <sys_mutex_new>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d006      	beq.n	800ca98 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ca8a:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <mem_init+0x8c>)
 800ca8c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ca90:	4909      	ldr	r1, [pc, #36]	; (800cab8 <mem_init+0x90>)
 800ca92:	480a      	ldr	r0, [pc, #40]	; (800cabc <mem_init+0x94>)
 800ca94:	f00a feb8 	bl	8017808 <iprintf>
  }
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	2000406c 	.word	0x2000406c
 800caa4:	30044000 	.word	0x30044000
 800caa8:	20004070 	.word	0x20004070
 800caac:	20004074 	.word	0x20004074
 800cab0:	20004078 	.word	0x20004078
 800cab4:	08018838 	.word	0x08018838
 800cab8:	08018930 	.word	0x08018930
 800cabc:	080188a4 	.word	0x080188a4

0800cac0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d050      	beq.n	800cb70 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d006      	beq.n	800cae6 <mem_free+0x26>
 800cad8:	4b27      	ldr	r3, [pc, #156]	; (800cb78 <mem_free+0xb8>)
 800cada:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800cade:	4927      	ldr	r1, [pc, #156]	; (800cb7c <mem_free+0xbc>)
 800cae0:	4827      	ldr	r0, [pc, #156]	; (800cb80 <mem_free+0xc0>)
 800cae2:	f00a fe91 	bl	8017808 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cae6:	4b27      	ldr	r3, [pc, #156]	; (800cb84 <mem_free+0xc4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d304      	bcc.n	800cafa <mem_free+0x3a>
 800caf0:	4b25      	ldr	r3, [pc, #148]	; (800cb88 <mem_free+0xc8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d306      	bcc.n	800cb08 <mem_free+0x48>
 800cafa:	4b1f      	ldr	r3, [pc, #124]	; (800cb78 <mem_free+0xb8>)
 800cafc:	f240 12af 	movw	r2, #431	; 0x1af
 800cb00:	4922      	ldr	r1, [pc, #136]	; (800cb8c <mem_free+0xcc>)
 800cb02:	481f      	ldr	r0, [pc, #124]	; (800cb80 <mem_free+0xc0>)
 800cb04:	f00a fe80 	bl	8017808 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb08:	4b1e      	ldr	r3, [pc, #120]	; (800cb84 <mem_free+0xc4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d304      	bcc.n	800cb1c <mem_free+0x5c>
 800cb12:	4b1d      	ldr	r3, [pc, #116]	; (800cb88 <mem_free+0xc8>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d306      	bcc.n	800cb2a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800cb1c:	f00a fe10 	bl	8017740 <sys_arch_protect>
 800cb20:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800cb22:	68b8      	ldr	r0, [r7, #8]
 800cb24:	f00a fe1a 	bl	801775c <sys_arch_unprotect>
    return;
 800cb28:	e023      	b.n	800cb72 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb2a:	4819      	ldr	r0, [pc, #100]	; (800cb90 <mem_free+0xd0>)
 800cb2c:	f00a fdc6 	bl	80176bc <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3b08      	subs	r3, #8
 800cb34:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	791b      	ldrb	r3, [r3, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <mem_free+0x8c>
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	; (800cb78 <mem_free+0xb8>)
 800cb40:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800cb44:	4913      	ldr	r1, [pc, #76]	; (800cb94 <mem_free+0xd4>)
 800cb46:	480e      	ldr	r0, [pc, #56]	; (800cb80 <mem_free+0xc0>)
 800cb48:	f00a fe5e 	bl	8017808 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb52:	4b11      	ldr	r3, [pc, #68]	; (800cb98 <mem_free+0xd8>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d202      	bcs.n	800cb62 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb5c:	4a0e      	ldr	r2, [pc, #56]	; (800cb98 <mem_free+0xd8>)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff fec8 	bl	800c8f8 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cb68:	4809      	ldr	r0, [pc, #36]	; (800cb90 <mem_free+0xd0>)
 800cb6a:	f00a fdb6 	bl	80176da <sys_mutex_unlock>
 800cb6e:	e000      	b.n	800cb72 <mem_free+0xb2>
    return;
 800cb70:	bf00      	nop
}
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	08018838 	.word	0x08018838
 800cb7c:	0801894c 	.word	0x0801894c
 800cb80:	080188a4 	.word	0x080188a4
 800cb84:	2000406c 	.word	0x2000406c
 800cb88:	20004070 	.word	0x20004070
 800cb8c:	08018970 	.word	0x08018970
 800cb90:	20004078 	.word	0x20004078
 800cb94:	08018988 	.word	0x08018988
 800cb98:	20004074 	.word	0x20004074

0800cb9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800cba8:	887b      	ldrh	r3, [r7, #2]
 800cbaa:	3303      	adds	r3, #3
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	f023 0303 	bic.w	r3, r3, #3
 800cbb2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800cbb4:	887b      	ldrh	r3, [r7, #2]
 800cbb6:	2b0b      	cmp	r3, #11
 800cbb8:	d801      	bhi.n	800cbbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cbba:	230c      	movs	r3, #12
 800cbbc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800cbbe:	887b      	ldrh	r3, [r7, #2]
 800cbc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbc4:	d901      	bls.n	800cbca <mem_trim+0x2e>
    return NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e0bd      	b.n	800cd46 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cbca:	4b61      	ldr	r3, [pc, #388]	; (800cd50 <mem_trim+0x1b4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d304      	bcc.n	800cbde <mem_trim+0x42>
 800cbd4:	4b5f      	ldr	r3, [pc, #380]	; (800cd54 <mem_trim+0x1b8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d306      	bcc.n	800cbec <mem_trim+0x50>
 800cbde:	4b5e      	ldr	r3, [pc, #376]	; (800cd58 <mem_trim+0x1bc>)
 800cbe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cbe4:	495d      	ldr	r1, [pc, #372]	; (800cd5c <mem_trim+0x1c0>)
 800cbe6:	485e      	ldr	r0, [pc, #376]	; (800cd60 <mem_trim+0x1c4>)
 800cbe8:	f00a fe0e 	bl	8017808 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cbec:	4b58      	ldr	r3, [pc, #352]	; (800cd50 <mem_trim+0x1b4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d304      	bcc.n	800cc00 <mem_trim+0x64>
 800cbf6:	4b57      	ldr	r3, [pc, #348]	; (800cd54 <mem_trim+0x1b8>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d307      	bcc.n	800cc10 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800cc00:	f00a fd9e 	bl	8017740 <sys_arch_protect>
 800cc04:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f00a fda8 	bl	801775c <sys_arch_unprotect>
    return rmem;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	e09a      	b.n	800cd46 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3b08      	subs	r3, #8
 800cc14:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	4a4d      	ldr	r2, [pc, #308]	; (800cd50 <mem_trim+0x1b4>)
 800cc1a:	6812      	ldr	r2, [r2, #0]
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	881a      	ldrh	r2, [r3, #0]
 800cc24:	8b7b      	ldrh	r3, [r7, #26]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3b08      	subs	r3, #8
 800cc2c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc2e:	887a      	ldrh	r2, [r7, #2]
 800cc30:	8b3b      	ldrh	r3, [r7, #24]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d906      	bls.n	800cc44 <mem_trim+0xa8>
 800cc36:	4b48      	ldr	r3, [pc, #288]	; (800cd58 <mem_trim+0x1bc>)
 800cc38:	f240 2206 	movw	r2, #518	; 0x206
 800cc3c:	4949      	ldr	r1, [pc, #292]	; (800cd64 <mem_trim+0x1c8>)
 800cc3e:	4848      	ldr	r0, [pc, #288]	; (800cd60 <mem_trim+0x1c4>)
 800cc40:	f00a fde2 	bl	8017808 <iprintf>
  if (newsize > size) {
 800cc44:	887a      	ldrh	r2, [r7, #2]
 800cc46:	8b3b      	ldrh	r3, [r7, #24]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d901      	bls.n	800cc50 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e07a      	b.n	800cd46 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800cc50:	887a      	ldrh	r2, [r7, #2]
 800cc52:	8b3b      	ldrh	r3, [r7, #24]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d101      	bne.n	800cc5c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	e074      	b.n	800cd46 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc5c:	4842      	ldr	r0, [pc, #264]	; (800cd68 <mem_trim+0x1cc>)
 800cc5e:	f00a fd2d 	bl	80176bc <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800cc62:	4b3b      	ldr	r3, [pc, #236]	; (800cd50 <mem_trim+0x1b4>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	8812      	ldrh	r2, [r2, #0]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	791b      	ldrb	r3, [r3, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d131      	bne.n	800ccda <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800cc7c:	8b7a      	ldrh	r2, [r7, #26]
 800cc7e:	887b      	ldrh	r3, [r7, #2]
 800cc80:	4413      	add	r3, r2
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	3308      	adds	r3, #8
 800cc86:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800cc88:	4b38      	ldr	r3, [pc, #224]	; (800cd6c <mem_trim+0x1d0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d105      	bne.n	800cc9e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800cc92:	4b2f      	ldr	r3, [pc, #188]	; (800cd50 <mem_trim+0x1b4>)
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	8a7b      	ldrh	r3, [r7, #18]
 800cc98:	4413      	add	r3, r2
 800cc9a:	4a34      	ldr	r2, [pc, #208]	; (800cd6c <mem_trim+0x1d0>)
 800cc9c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800cc9e:	4b2c      	ldr	r3, [pc, #176]	; (800cd50 <mem_trim+0x1b4>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	8a7b      	ldrh	r3, [r7, #18]
 800cca4:	4413      	add	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	8a3a      	ldrh	r2, [r7, #16]
 800ccb2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	8b7a      	ldrh	r2, [r7, #26]
 800ccb8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	8a7a      	ldrh	r2, [r7, #18]
 800ccbe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	881b      	ldrh	r3, [r3, #0]
 800ccc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccc8:	d039      	beq.n	800cd3e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ccca:	4b21      	ldr	r3, [pc, #132]	; (800cd50 <mem_trim+0x1b4>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	8812      	ldrh	r2, [r2, #0]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	8a7a      	ldrh	r2, [r7, #18]
 800ccd6:	805a      	strh	r2, [r3, #2]
 800ccd8:	e031      	b.n	800cd3e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ccda:	887b      	ldrh	r3, [r7, #2]
 800ccdc:	f103 0214 	add.w	r2, r3, #20
 800cce0:	8b3b      	ldrh	r3, [r7, #24]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d82b      	bhi.n	800cd3e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800cce6:	8b7a      	ldrh	r2, [r7, #26]
 800cce8:	887b      	ldrh	r3, [r7, #2]
 800ccea:	4413      	add	r3, r2
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	3308      	adds	r3, #8
 800ccf0:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ccf2:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <mem_trim+0x1b4>)
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	8a7b      	ldrh	r3, [r7, #18]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800ccfc:	4b1b      	ldr	r3, [pc, #108]	; (800cd6c <mem_trim+0x1d0>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d202      	bcs.n	800cd0c <mem_trim+0x170>
      lfree = mem2;
 800cd06:	4a19      	ldr	r2, [pc, #100]	; (800cd6c <mem_trim+0x1d0>)
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	881a      	ldrh	r2, [r3, #0]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	8b7a      	ldrh	r2, [r7, #26]
 800cd1e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	8a7a      	ldrh	r2, [r7, #18]
 800cd24:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd2e:	d006      	beq.n	800cd3e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800cd30:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <mem_trim+0x1b4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	8812      	ldrh	r2, [r2, #0]
 800cd38:	4413      	add	r3, r2
 800cd3a:	8a7a      	ldrh	r2, [r7, #18]
 800cd3c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd3e:	480a      	ldr	r0, [pc, #40]	; (800cd68 <mem_trim+0x1cc>)
 800cd40:	f00a fccb 	bl	80176da <sys_mutex_unlock>
  return rmem;
 800cd44:	687b      	ldr	r3, [r7, #4]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3720      	adds	r7, #32
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	2000406c 	.word	0x2000406c
 800cd54:	20004070 	.word	0x20004070
 800cd58:	08018838 	.word	0x08018838
 800cd5c:	0801899c 	.word	0x0801899c
 800cd60:	080188a4 	.word	0x080188a4
 800cd64:	080189b4 	.word	0x080189b4
 800cd68:	20004078 	.word	0x20004078
 800cd6c:	20004074 	.word	0x20004074

0800cd70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800cd7a:	88fb      	ldrh	r3, [r7, #6]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <mem_malloc+0x14>
    return NULL;
 800cd80:	2300      	movs	r3, #0
 800cd82:	e0d1      	b.n	800cf28 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800cd84:	88fb      	ldrh	r3, [r7, #6]
 800cd86:	3303      	adds	r3, #3
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	f023 0303 	bic.w	r3, r3, #3
 800cd8e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800cd90:	88fb      	ldrh	r3, [r7, #6]
 800cd92:	2b0b      	cmp	r3, #11
 800cd94:	d801      	bhi.n	800cd9a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd96:	230c      	movs	r3, #12
 800cd98:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800cd9a:	88fb      	ldrh	r3, [r7, #6]
 800cd9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cda0:	d901      	bls.n	800cda6 <mem_malloc+0x36>
    return NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	e0c0      	b.n	800cf28 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cda6:	4862      	ldr	r0, [pc, #392]	; (800cf30 <mem_malloc+0x1c0>)
 800cda8:	f00a fc88 	bl	80176bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800cdac:	4b61      	ldr	r3, [pc, #388]	; (800cf34 <mem_malloc+0x1c4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4b61      	ldr	r3, [pc, #388]	; (800cf38 <mem_malloc+0x1c8>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	83fb      	strh	r3, [r7, #30]
 800cdba:	e0aa      	b.n	800cf12 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800cdbc:	4b5e      	ldr	r3, [pc, #376]	; (800cf38 <mem_malloc+0x1c8>)
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	8bfb      	ldrh	r3, [r7, #30]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	791b      	ldrb	r3, [r3, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f040 809b 	bne.w	800cf06 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	8bfb      	ldrh	r3, [r7, #30]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	f1a3 0208 	sub.w	r2, r3, #8
 800cdde:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800cde0:	429a      	cmp	r2, r3
 800cde2:	f0c0 8090 	bcc.w	800cf06 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	8bfb      	ldrh	r3, [r7, #30]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	f1a3 0208 	sub.w	r2, r3, #8
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d327      	bcc.n	800ce4c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800cdfc:	8bfa      	ldrh	r2, [r7, #30]
 800cdfe:	88fb      	ldrh	r3, [r7, #6]
 800ce00:	4413      	add	r3, r2
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3308      	adds	r3, #8
 800ce06:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ce08:	4b4b      	ldr	r3, [pc, #300]	; (800cf38 <mem_malloc+0x1c8>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	8a7b      	ldrh	r3, [r7, #18]
 800ce0e:	4413      	add	r3, r2
 800ce10:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	881a      	ldrh	r2, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8bfa      	ldrh	r2, [r7, #30]
 800ce24:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	8a7a      	ldrh	r2, [r7, #18]
 800ce2a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce3a:	d00a      	beq.n	800ce52 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ce3c:	4b3e      	ldr	r3, [pc, #248]	; (800cf38 <mem_malloc+0x1c8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	8812      	ldrh	r2, [r2, #0]
 800ce44:	4413      	add	r3, r2
 800ce46:	8a7a      	ldrh	r2, [r7, #18]
 800ce48:	805a      	strh	r2, [r3, #2]
 800ce4a:	e002      	b.n	800ce52 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce52:	4b38      	ldr	r3, [pc, #224]	; (800cf34 <mem_malloc+0x1c4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d127      	bne.n	800ceac <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800ce5c:	4b35      	ldr	r3, [pc, #212]	; (800cf34 <mem_malloc+0x1c4>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ce62:	e005      	b.n	800ce70 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ce64:	4b34      	ldr	r3, [pc, #208]	; (800cf38 <mem_malloc+0x1c8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	69ba      	ldr	r2, [r7, #24]
 800ce6a:	8812      	ldrh	r2, [r2, #0]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	791b      	ldrb	r3, [r3, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d004      	beq.n	800ce82 <mem_malloc+0x112>
 800ce78:	4b30      	ldr	r3, [pc, #192]	; (800cf3c <mem_malloc+0x1cc>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	69ba      	ldr	r2, [r7, #24]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d1f0      	bne.n	800ce64 <mem_malloc+0xf4>
          }
          lfree = cur;
 800ce82:	4a2c      	ldr	r2, [pc, #176]	; (800cf34 <mem_malloc+0x1c4>)
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce88:	4b2a      	ldr	r3, [pc, #168]	; (800cf34 <mem_malloc+0x1c4>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	4b2b      	ldr	r3, [pc, #172]	; (800cf3c <mem_malloc+0x1cc>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d00b      	beq.n	800ceac <mem_malloc+0x13c>
 800ce94:	4b27      	ldr	r3, [pc, #156]	; (800cf34 <mem_malloc+0x1c4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	791b      	ldrb	r3, [r3, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d006      	beq.n	800ceac <mem_malloc+0x13c>
 800ce9e:	4b28      	ldr	r3, [pc, #160]	; (800cf40 <mem_malloc+0x1d0>)
 800cea0:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cea4:	4927      	ldr	r1, [pc, #156]	; (800cf44 <mem_malloc+0x1d4>)
 800cea6:	4828      	ldr	r0, [pc, #160]	; (800cf48 <mem_malloc+0x1d8>)
 800cea8:	f00a fcae 	bl	8017808 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ceac:	4820      	ldr	r0, [pc, #128]	; (800cf30 <mem_malloc+0x1c0>)
 800ceae:	f00a fc14 	bl	80176da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ceb2:	88fa      	ldrh	r2, [r7, #6]
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	3308      	adds	r3, #8
 800ceba:	4a20      	ldr	r2, [pc, #128]	; (800cf3c <mem_malloc+0x1cc>)
 800cebc:	6812      	ldr	r2, [r2, #0]
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d906      	bls.n	800ced0 <mem_malloc+0x160>
 800cec2:	4b1f      	ldr	r3, [pc, #124]	; (800cf40 <mem_malloc+0x1d0>)
 800cec4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cec8:	4920      	ldr	r1, [pc, #128]	; (800cf4c <mem_malloc+0x1dc>)
 800ceca:	481f      	ldr	r0, [pc, #124]	; (800cf48 <mem_malloc+0x1d8>)
 800cecc:	f00a fc9c 	bl	8017808 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <mem_malloc+0x178>
 800ceda:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <mem_malloc+0x1d0>)
 800cedc:	f240 22d6 	movw	r2, #726	; 0x2d6
 800cee0:	491b      	ldr	r1, [pc, #108]	; (800cf50 <mem_malloc+0x1e0>)
 800cee2:	4819      	ldr	r0, [pc, #100]	; (800cf48 <mem_malloc+0x1d8>)
 800cee4:	f00a fc90 	bl	8017808 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	f003 0303 	and.w	r3, r3, #3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <mem_malloc+0x190>
 800cef2:	4b13      	ldr	r3, [pc, #76]	; (800cf40 <mem_malloc+0x1d0>)
 800cef4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800cef8:	4916      	ldr	r1, [pc, #88]	; (800cf54 <mem_malloc+0x1e4>)
 800cefa:	4813      	ldr	r0, [pc, #76]	; (800cf48 <mem_malloc+0x1d8>)
 800cefc:	f00a fc84 	bl	8017808 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	3308      	adds	r3, #8
 800cf04:	e010      	b.n	800cf28 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800cf06:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <mem_malloc+0x1c8>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	8bfb      	ldrh	r3, [r7, #30]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800cf12:	8bfa      	ldrh	r2, [r7, #30]
 800cf14:	88fb      	ldrh	r3, [r7, #6]
 800cf16:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	f4ff af4e 	bcc.w	800cdbc <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cf20:	4803      	ldr	r0, [pc, #12]	; (800cf30 <mem_malloc+0x1c0>)
 800cf22:	f00a fbda 	bl	80176da <sys_mutex_unlock>
  return NULL;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20004078 	.word	0x20004078
 800cf34:	20004074 	.word	0x20004074
 800cf38:	2000406c 	.word	0x2000406c
 800cf3c:	20004070 	.word	0x20004070
 800cf40:	08018838 	.word	0x08018838
 800cf44:	080189d4 	.word	0x080189d4
 800cf48:	080188a4 	.word	0x080188a4
 800cf4c:	080189f0 	.word	0x080189f0
 800cf50:	08018a20 	.word	0x08018a20
 800cf54:	08018a50 	.word	0x08018a50

0800cf58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	3303      	adds	r3, #3
 800cf6e:	f023 0303 	bic.w	r3, r3, #3
 800cf72:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	e011      	b.n	800cf9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	4413      	add	r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	885b      	ldrh	r3, [r3, #2]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	dbe7      	blt.n	800cf7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	80fb      	strh	r3, [r7, #6]
 800cfc2:	e009      	b.n	800cfd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cfc4:	88fb      	ldrh	r3, [r7, #6]
 800cfc6:	4a08      	ldr	r2, [pc, #32]	; (800cfe8 <memp_init+0x30>)
 800cfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff ffc3 	bl	800cf58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cfd2:	88fb      	ldrh	r3, [r7, #6]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	80fb      	strh	r3, [r7, #6]
 800cfd8:	88fb      	ldrh	r3, [r7, #6]
 800cfda:	2b0c      	cmp	r3, #12
 800cfdc:	d9f2      	bls.n	800cfc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0801ac78 	.word	0x0801ac78

0800cfec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cff4:	f00a fba4 	bl	8017740 <sys_arch_protect>
 800cff8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d015      	beq.n	800d034 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	6812      	ldr	r2, [r2, #0]
 800d010:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f003 0303 	and.w	r3, r3, #3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d006      	beq.n	800d02a <do_memp_malloc_pool+0x3e>
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <do_memp_malloc_pool+0x58>)
 800d01e:	f240 1249 	movw	r2, #329	; 0x149
 800d022:	4909      	ldr	r1, [pc, #36]	; (800d048 <do_memp_malloc_pool+0x5c>)
 800d024:	4809      	ldr	r0, [pc, #36]	; (800d04c <do_memp_malloc_pool+0x60>)
 800d026:	f00a fbef 	bl	8017808 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f00a fb96 	bl	801775c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	e003      	b.n	800d03c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f00a fb91 	bl	801775c <sys_arch_unprotect>
  return NULL;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	08018a74 	.word	0x08018a74
 800d048:	08018ac8 	.word	0x08018ac8
 800d04c:	08018aec 	.word	0x08018aec

0800d050 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <memp_malloc_pool+0x1c>
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <memp_malloc_pool+0x38>)
 800d060:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d064:	4909      	ldr	r1, [pc, #36]	; (800d08c <memp_malloc_pool+0x3c>)
 800d066:	480a      	ldr	r0, [pc, #40]	; (800d090 <memp_malloc_pool+0x40>)
 800d068:	f00a fbce 	bl	8017808 <iprintf>
  if (desc == NULL) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <memp_malloc_pool+0x26>
    return NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	e003      	b.n	800d07e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff ffb8 	bl	800cfec <do_memp_malloc_pool>
 800d07c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08018a74 	.word	0x08018a74
 800d08c:	08018b14 	.word	0x08018b14
 800d090:	08018aec 	.word	0x08018aec

0800d094 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	2b0c      	cmp	r3, #12
 800d0a2:	d908      	bls.n	800d0b6 <memp_malloc+0x22>
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	; (800d0d0 <memp_malloc+0x3c>)
 800d0a6:	f240 1287 	movw	r2, #391	; 0x187
 800d0aa:	490a      	ldr	r1, [pc, #40]	; (800d0d4 <memp_malloc+0x40>)
 800d0ac:	480a      	ldr	r0, [pc, #40]	; (800d0d8 <memp_malloc+0x44>)
 800d0ae:	f00a fbab 	bl	8017808 <iprintf>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e008      	b.n	800d0c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	4a08      	ldr	r2, [pc, #32]	; (800d0dc <memp_malloc+0x48>)
 800d0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff ff94 	bl	800cfec <do_memp_malloc_pool>
 800d0c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	08018a74 	.word	0x08018a74
 800d0d4:	08018b28 	.word	0x08018b28
 800d0d8:	08018aec 	.word	0x08018aec
 800d0dc:	0801ac78 	.word	0x0801ac78

0800d0e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d006      	beq.n	800d102 <do_memp_free_pool+0x22>
 800d0f4:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <do_memp_free_pool+0x4c>)
 800d0f6:	f240 129d 	movw	r2, #413	; 0x19d
 800d0fa:	490d      	ldr	r1, [pc, #52]	; (800d130 <do_memp_free_pool+0x50>)
 800d0fc:	480d      	ldr	r0, [pc, #52]	; (800d134 <do_memp_free_pool+0x54>)
 800d0fe:	f00a fb83 	bl	8017808 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d106:	f00a fb1b 	bl	8017740 <sys_arch_protect>
 800d10a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d11e:	68b8      	ldr	r0, [r7, #8]
 800d120:	f00a fb1c 	bl	801775c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	08018a74 	.word	0x08018a74
 800d130:	08018b48 	.word	0x08018b48
 800d134:	08018aec 	.word	0x08018aec

0800d138 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d106      	bne.n	800d156 <memp_free_pool+0x1e>
 800d148:	4b0a      	ldr	r3, [pc, #40]	; (800d174 <memp_free_pool+0x3c>)
 800d14a:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800d14e:	490a      	ldr	r1, [pc, #40]	; (800d178 <memp_free_pool+0x40>)
 800d150:	480a      	ldr	r0, [pc, #40]	; (800d17c <memp_free_pool+0x44>)
 800d152:	f00a fb59 	bl	8017808 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <memp_free_pool+0x34>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d004      	beq.n	800d16c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ffbb 	bl	800d0e0 <do_memp_free_pool>
 800d16a:	e000      	b.n	800d16e <memp_free_pool+0x36>
    return;
 800d16c:	bf00      	nop
}
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	08018a74 	.word	0x08018a74
 800d178:	08018b14 	.word	0x08018b14
 800d17c:	08018aec 	.word	0x08018aec

0800d180 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	4603      	mov	r3, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d18c:	79fb      	ldrb	r3, [r7, #7]
 800d18e:	2b0c      	cmp	r3, #12
 800d190:	d907      	bls.n	800d1a2 <memp_free+0x22>
 800d192:	4b0c      	ldr	r3, [pc, #48]	; (800d1c4 <memp_free+0x44>)
 800d194:	f240 12db 	movw	r2, #475	; 0x1db
 800d198:	490b      	ldr	r1, [pc, #44]	; (800d1c8 <memp_free+0x48>)
 800d19a:	480c      	ldr	r0, [pc, #48]	; (800d1cc <memp_free+0x4c>)
 800d19c:	f00a fb34 	bl	8017808 <iprintf>
 800d1a0:	e00c      	b.n	800d1bc <memp_free+0x3c>

  if (mem == NULL) {
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d008      	beq.n	800d1ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	4a09      	ldr	r2, [pc, #36]	; (800d1d0 <memp_free+0x50>)
 800d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7ff ff94 	bl	800d0e0 <do_memp_free_pool>
 800d1b8:	e000      	b.n	800d1bc <memp_free+0x3c>
    return;
 800d1ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	08018a74 	.word	0x08018a74
 800d1c8:	08018b68 	.word	0x08018b68
 800d1cc:	08018aec 	.word	0x08018aec
 800d1d0:	0801ac78 	.word	0x0801ac78

0800d1d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d1d8:	bf00      	nop
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
	...

0800d1e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <netif_add+0x20>
 800d1f8:	4b23      	ldr	r3, [pc, #140]	; (800d288 <netif_add+0xa4>)
 800d1fa:	22fb      	movs	r2, #251	; 0xfb
 800d1fc:	4923      	ldr	r1, [pc, #140]	; (800d28c <netif_add+0xa8>)
 800d1fe:	4824      	ldr	r0, [pc, #144]	; (800d290 <netif_add+0xac>)
 800d200:	f00a fb02 	bl	8017808 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3320      	adds	r3, #32
 800d222:	2204      	movs	r2, #4
 800d224:	2100      	movs	r1, #0
 800d226:	4618      	mov	r0, r3
 800d228:	f00a fae6 	bl	80177f8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2203      	movs	r2, #3
 800d230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	69ba      	ldr	r2, [r7, #24]
 800d238:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800d23a:	4b16      	ldr	r3, [pc, #88]	; (800d294 <netif_add+0xb0>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	1c5a      	adds	r2, r3, #1
 800d240:	b2d1      	uxtb	r1, r2
 800d242:	4a14      	ldr	r2, [pc, #80]	; (800d294 <netif_add+0xb0>)
 800d244:	7011      	strb	r1, [r2, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6a3a      	ldr	r2, [r7, #32]
 800d250:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	68b9      	ldr	r1, [r7, #8]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f81f 	bl	800d29c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	4798      	blx	r3
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d001      	beq.n	800d26e <netif_add+0x8a>
    return NULL;
 800d26a:	2300      	movs	r3, #0
 800d26c:	e007      	b.n	800d27e <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d26e:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <netif_add+0xb4>)
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d276:	4a08      	ldr	r2, [pc, #32]	; (800d298 <netif_add+0xb4>)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800d27c:	68fb      	ldr	r3, [r7, #12]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	08018b84 	.word	0x08018b84
 800d28c:	08018bd8 	.word	0x08018bd8
 800d290:	08018bf0 	.word	0x08018bf0
 800d294:	200040b0 	.word	0x200040b0
 800d298:	20007980 	.word	0x20007980

0800d29c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <netif_set_addr+0x1c>
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10c      	bne.n	800d2d2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800d2b8:	68b9      	ldr	r1, [r7, #8]
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f000 f81a 	bl	800d2f4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 f862 	bl	800d38c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d2c8:	6839      	ldr	r1, [r7, #0]
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f84a 	bl	800d364 <netif_set_gw>
 800d2d0:	e00b      	b.n	800d2ea <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800d2d2:	6879      	ldr	r1, [r7, #4]
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 f859 	bl	800d38c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 f841 	bl	800d364 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 f805 	bl	800d2f4 <netif_set_ipaddr>
  }
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d003      	beq.n	800d30c <netif_set_ipaddr+0x18>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	e002      	b.n	800d312 <netif_set_ipaddr+0x1e>
 800d30c:	4b14      	ldr	r3, [pc, #80]	; (800d360 <netif_set_ipaddr+0x6c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3304      	adds	r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d01c      	beq.n	800d358 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3304      	adds	r3, #4
 800d322:	f107 020c 	add.w	r2, r7, #12
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f002 f8df 	bl	800f4ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3304      	adds	r3, #4
 800d332:	f107 020c 	add.w	r2, r7, #12
 800d336:	4611      	mov	r1, r2
 800d338:	4618      	mov	r0, r3
 800d33a:	f005 ffa3 	bl	8013284 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <netif_set_ipaddr+0x56>
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	e000      	b.n	800d34c <netif_set_ipaddr+0x58>
 800d34a:	2300      	movs	r3, #0
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d350:	2101      	movs	r1, #1
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 f861 	bl	800d41a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800d358:	bf00      	nop
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	0801acfc 	.word	0x0801acfc

0800d364 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d002      	beq.n	800d37a <netif_set_gw+0x16>
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	e000      	b.n	800d37c <netif_set_gw+0x18>
 800d37a:	2300      	movs	r3, #0
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <netif_set_netmask+0x16>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	e000      	b.n	800d3a4 <netif_set_netmask+0x18>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d3bc:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <netif_set_default+0x1c>)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d3c2:	bf00      	nop
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	20007984 	.word	0x20007984

0800d3d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d113      	bne.n	800d412 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3f0:	f043 0301 	orr.w	r3, r3, #1
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d402:	f003 0304 	and.w	r3, r3, #4
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800d40a:	2103      	movs	r1, #3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f804 	bl	800d41a <netif_issue_reports>
    }
  }
}
 800d412:	bf00      	nop
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b082      	sub	sp, #8
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d426:	78fb      	ldrb	r3, [r7, #3]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d011      	beq.n	800d454 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3304      	adds	r3, #4
 800d434:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00c      	beq.n	800d454 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	2b00      	cmp	r3, #0
 800d446:	d005      	beq.n	800d454 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3304      	adds	r3, #4
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f008 fd46 	bl	8015ee0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d012      	beq.n	800d498 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d48a:	f003 0308 	and.w	r3, r3, #8
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f008 f8e6 	bl	8015664 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4ae:	f003 0304 	and.w	r3, r3, #4
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d116      	bne.n	800d4e4 <netif_set_link_up+0x44>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4bc:	f043 0304 	orr.w	r3, r3, #4
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f006 fabd 	bl	8013a48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d003      	beq.n	800d4e4 <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800d4dc:	2103      	movs	r1, #3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff ff9b 	bl	800d41a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d008      	beq.n	800d514 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d508:	f023 0304 	bic.w	r3, r3, #4
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
  }
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d526:	f00a f90b 	bl	8017740 <sys_arch_protect>
 800d52a:	6038      	str	r0, [r7, #0]
 800d52c:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <pbuf_free_ooseq+0x4c>)
 800d52e:	2200      	movs	r2, #0
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	6838      	ldr	r0, [r7, #0]
 800d534:	f00a f912 	bl	801775c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d538:	4b0d      	ldr	r3, [pc, #52]	; (800d570 <pbuf_free_ooseq+0x50>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	e00f      	b.n	800d560 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d544:	2b00      	cmp	r3, #0
 800d546:	d008      	beq.n	800d55a <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d54c:	4618      	mov	r0, r3
 800d54e:	f001 fd08 	bl	800ef62 <tcp_segs_free>
      pcb->ooseq = NULL;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800d558:	e005      	b.n	800d566 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	607b      	str	r3, [r7, #4]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1ec      	bne.n	800d540 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20007988 	.word	0x20007988
 800d570:	20007990 	.word	0x20007990

0800d574 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d57c:	f7ff ffd0 	bl	800d520 <pbuf_free_ooseq>
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d58e:	f00a f8d7 	bl	8017740 <sys_arch_protect>
 800d592:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d594:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <pbuf_pool_is_empty+0x50>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d59a:	4b0f      	ldr	r3, [pc, #60]	; (800d5d8 <pbuf_pool_is_empty+0x50>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f00a f8db 	bl	801775c <sys_arch_unprotect>

  if (!queued) {
 800d5a6:	78fb      	ldrb	r3, [r7, #3]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d110      	bne.n	800d5ce <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	480a      	ldr	r0, [pc, #40]	; (800d5dc <pbuf_pool_is_empty+0x54>)
 800d5b2:	f7ff f8cf 	bl	800c754 <tcpip_callback_with_block>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d008      	beq.n	800d5ce <pbuf_pool_is_empty+0x46>
 800d5bc:	f00a f8c0 	bl	8017740 <sys_arch_protect>
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <pbuf_pool_is_empty+0x50>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f00a f8c7 	bl	801775c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d5ce:	bf00      	nop
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20007988 	.word	0x20007988
 800d5dc:	0800d575 	.word	0x0800d575

0800d5e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	71fb      	strb	r3, [r7, #7]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	80bb      	strh	r3, [r7, #4]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800d5f2:	79fb      	ldrb	r3, [r7, #7]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d81c      	bhi.n	800d632 <pbuf_alloc+0x52>
 800d5f8:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <pbuf_alloc+0x20>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d615 	.word	0x0800d615
 800d604:	0800d61b 	.word	0x0800d61b
 800d608:	0800d621 	.word	0x0800d621
 800d60c:	0800d627 	.word	0x0800d627
 800d610:	0800d62d 	.word	0x0800d62d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d614:	2336      	movs	r3, #54	; 0x36
 800d616:	82fb      	strh	r3, [r7, #22]
    break;
 800d618:	e014      	b.n	800d644 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d61a:	2322      	movs	r3, #34	; 0x22
 800d61c:	82fb      	strh	r3, [r7, #22]
    break;
 800d61e:	e011      	b.n	800d644 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d620:	230e      	movs	r3, #14
 800d622:	82fb      	strh	r3, [r7, #22]
    break;
 800d624:	e00e      	b.n	800d644 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d626:	2300      	movs	r3, #0
 800d628:	82fb      	strh	r3, [r7, #22]
    break;
 800d62a:	e00b      	b.n	800d644 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	82fb      	strh	r3, [r7, #22]
    break;
 800d630:	e008      	b.n	800d644 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800d632:	4ba5      	ldr	r3, [pc, #660]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d634:	f44f 728b 	mov.w	r2, #278	; 0x116
 800d638:	49a4      	ldr	r1, [pc, #656]	; (800d8cc <pbuf_alloc+0x2ec>)
 800d63a:	48a5      	ldr	r0, [pc, #660]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d63c:	f00a f8e4 	bl	8017808 <iprintf>
    return NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	e15d      	b.n	800d900 <pbuf_alloc+0x320>
  }

  switch (type) {
 800d644:	79bb      	ldrb	r3, [r7, #6]
 800d646:	2b03      	cmp	r3, #3
 800d648:	f200 8134 	bhi.w	800d8b4 <pbuf_alloc+0x2d4>
 800d64c:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <pbuf_alloc+0x74>)
 800d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d652:	bf00      	nop
 800d654:	0800d7f5 	.word	0x0800d7f5
 800d658:	0800d881 	.word	0x0800d881
 800d65c:	0800d881 	.word	0x0800d881
 800d660:	0800d665 	.word	0x0800d665
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d664:	200c      	movs	r0, #12
 800d666:	f7ff fd15 	bl	800d094 <memp_malloc>
 800d66a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d103      	bne.n	800d67a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800d672:	f7ff ff89 	bl	800d588 <pbuf_pool_is_empty>
      return NULL;
 800d676:	2300      	movs	r3, #0
 800d678:	e142      	b.n	800d900 <pbuf_alloc+0x320>
    }
    p->type = type;
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	79ba      	ldrb	r2, [r7, #6]
 800d67e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800d686:	8afb      	ldrh	r3, [r7, #22]
 800d688:	3310      	adds	r3, #16
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	4413      	add	r3, r2
 800d68e:	3303      	adds	r3, #3
 800d690:	f023 0303 	bic.w	r3, r3, #3
 800d694:	461a      	mov	r2, r3
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f003 0303 	and.w	r3, r3, #3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d006      	beq.n	800d6b4 <pbuf_alloc+0xd4>
 800d6a6:	4b88      	ldr	r3, [pc, #544]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d6a8:	f240 1229 	movw	r2, #297	; 0x129
 800d6ac:	4989      	ldr	r1, [pc, #548]	; (800d8d4 <pbuf_alloc+0x2f4>)
 800d6ae:	4888      	ldr	r0, [pc, #544]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d6b0:	f00a f8aa 	bl	8017808 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	88ba      	ldrh	r2, [r7, #4]
 800d6b8:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d6ba:	8afb      	ldrh	r3, [r7, #22]
 800d6bc:	3303      	adds	r3, #3
 800d6be:	f023 0303 	bic.w	r3, r3, #3
 800d6c2:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800d6c6:	88bb      	ldrh	r3, [r7, #4]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	bf28      	it	cs
 800d6cc:	4613      	movcs	r3, r2
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	69fa      	ldr	r2, [r7, #28]
 800d6da:	8952      	ldrh	r2, [r2, #10]
 800d6dc:	441a      	add	r2, r3
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d906      	bls.n	800d6f6 <pbuf_alloc+0x116>
 800d6e8:	4b77      	ldr	r3, [pc, #476]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d6ea:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d6ee:	497a      	ldr	r1, [pc, #488]	; (800d8d8 <pbuf_alloc+0x2f8>)
 800d6f0:	4877      	ldr	r0, [pc, #476]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d6f2:	f00a f889 	bl	8017808 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d6f6:	8afb      	ldrh	r3, [r7, #22]
 800d6f8:	3303      	adds	r3, #3
 800d6fa:	f023 0303 	bic.w	r3, r3, #3
 800d6fe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d702:	d106      	bne.n	800d712 <pbuf_alloc+0x132>
 800d704:	4b70      	ldr	r3, [pc, #448]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d706:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d70a:	4974      	ldr	r1, [pc, #464]	; (800d8dc <pbuf_alloc+0x2fc>)
 800d70c:	4870      	ldr	r0, [pc, #448]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d70e:	f00a f87b 	bl	8017808 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	2201      	movs	r2, #1
 800d716:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d71c:	88bb      	ldrh	r3, [r7, #4]
 800d71e:	69fa      	ldr	r2, [r7, #28]
 800d720:	8952      	ldrh	r2, [r2, #10]
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d726:	e061      	b.n	800d7ec <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d728:	200c      	movs	r0, #12
 800d72a:	f7ff fcb3 	bl	800d094 <memp_malloc>
 800d72e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800d736:	f7ff ff27 	bl	800d588 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d73a:	69f8      	ldr	r0, [r7, #28]
 800d73c:	f000 fac2 	bl	800dcc4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d740:	2300      	movs	r3, #0
 800d742:	e0dd      	b.n	800d900 <pbuf_alloc+0x320>
      }
      q->type = type;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	79ba      	ldrb	r2, [r7, #6]
 800d748:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d762:	4293      	cmp	r3, r2
 800d764:	dd06      	ble.n	800d774 <pbuf_alloc+0x194>
 800d766:	4b58      	ldr	r3, [pc, #352]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d768:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d76c:	495c      	ldr	r1, [pc, #368]	; (800d8e0 <pbuf_alloc+0x300>)
 800d76e:	4858      	ldr	r0, [pc, #352]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d770:	f00a f84a 	bl	8017808 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	b29a      	uxth	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d784:	bf28      	it	cs
 800d786:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f103 0210 	add.w	r2, r3, #16
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	f003 0303 	and.w	r3, r3, #3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d006      	beq.n	800d7b4 <pbuf_alloc+0x1d4>
 800d7a6:	4b48      	ldr	r3, [pc, #288]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d7a8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800d7ac:	494d      	ldr	r1, [pc, #308]	; (800d8e4 <pbuf_alloc+0x304>)
 800d7ae:	4848      	ldr	r0, [pc, #288]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d7b0:	f00a f82a 	bl	8017808 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	8952      	ldrh	r2, [r2, #10]
 800d7bc:	441a      	add	r2, r3
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d906      	bls.n	800d7d6 <pbuf_alloc+0x1f6>
 800d7c8:	4b3f      	ldr	r3, [pc, #252]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d7ca:	f240 1255 	movw	r2, #341	; 0x155
 800d7ce:	4942      	ldr	r1, [pc, #264]	; (800d8d8 <pbuf_alloc+0x2f8>)
 800d7d0:	483f      	ldr	r0, [pc, #252]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d7d2:	f00a f819 	bl	8017808 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	1a9b      	subs	r3, r3, r2
 800d7e6:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dc9a      	bgt.n	800d728 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d7f2:	e07e      	b.n	800d8f2 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d7f4:	8afb      	ldrh	r3, [r7, #22]
 800d7f6:	3313      	adds	r3, #19
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	f023 0303 	bic.w	r3, r3, #3
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	88bb      	ldrh	r3, [r7, #4]
 800d802:	3303      	adds	r3, #3
 800d804:	b29b      	uxth	r3, r3
 800d806:	f023 0303 	bic.w	r3, r3, #3
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	4413      	add	r3, r2
 800d80e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d810:	897a      	ldrh	r2, [r7, #10]
 800d812:	88bb      	ldrh	r3, [r7, #4]
 800d814:	3303      	adds	r3, #3
 800d816:	f023 0303 	bic.w	r3, r3, #3
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d201      	bcs.n	800d822 <pbuf_alloc+0x242>
        return NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	e06e      	b.n	800d900 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d822:	897b      	ldrh	r3, [r7, #10]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff faa3 	bl	800cd70 <mem_malloc>
 800d82a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <pbuf_alloc+0x256>
      return NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	e064      	b.n	800d900 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d836:	8afb      	ldrh	r3, [r7, #22]
 800d838:	3310      	adds	r3, #16
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	4413      	add	r3, r2
 800d83e:	3303      	adds	r3, #3
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	461a      	mov	r2, r3
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	88ba      	ldrh	r2, [r7, #4]
 800d84e:	811a      	strh	r2, [r3, #8]
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	891a      	ldrh	r2, [r3, #8]
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	79ba      	ldrb	r2, [r7, #6]
 800d862:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	f003 0303 	and.w	r3, r3, #3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d03f      	beq.n	800d8f0 <pbuf_alloc+0x310>
 800d870:	4b15      	ldr	r3, [pc, #84]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d872:	f240 1277 	movw	r2, #375	; 0x177
 800d876:	491c      	ldr	r1, [pc, #112]	; (800d8e8 <pbuf_alloc+0x308>)
 800d878:	4815      	ldr	r0, [pc, #84]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d87a:	f009 ffc5 	bl	8017808 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d87e:	e037      	b.n	800d8f0 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d880:	200b      	movs	r0, #11
 800d882:	f7ff fc07 	bl	800d094 <memp_malloc>
 800d886:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d88e:	2300      	movs	r3, #0
 800d890:	e036      	b.n	800d900 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	2200      	movs	r2, #0
 800d896:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	88ba      	ldrh	r2, [r7, #4]
 800d89c:	811a      	strh	r2, [r3, #8]
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	891a      	ldrh	r2, [r3, #8]
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	79ba      	ldrb	r2, [r7, #6]
 800d8b0:	731a      	strb	r2, [r3, #12]
    break;
 800d8b2:	e01e      	b.n	800d8f2 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d8b4:	4b04      	ldr	r3, [pc, #16]	; (800d8c8 <pbuf_alloc+0x2e8>)
 800d8b6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800d8ba:	490c      	ldr	r1, [pc, #48]	; (800d8ec <pbuf_alloc+0x30c>)
 800d8bc:	4804      	ldr	r0, [pc, #16]	; (800d8d0 <pbuf_alloc+0x2f0>)
 800d8be:	f009 ffa3 	bl	8017808 <iprintf>
    return NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e01c      	b.n	800d900 <pbuf_alloc+0x320>
 800d8c6:	bf00      	nop
 800d8c8:	08018c18 	.word	0x08018c18
 800d8cc:	08018c6c 	.word	0x08018c6c
 800d8d0:	08018c88 	.word	0x08018c88
 800d8d4:	08018cb0 	.word	0x08018cb0
 800d8d8:	08018ce0 	.word	0x08018ce0
 800d8dc:	08018d14 	.word	0x08018d14
 800d8e0:	08018d48 	.word	0x08018d48
 800d8e4:	08018d5c 	.word	0x08018d5c
 800d8e8:	08018d8c 	.word	0x08018d8c
 800d8ec:	08018db8 	.word	0x08018db8
    break;
 800d8f0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	603b      	str	r3, [r7, #0]
 800d910:	4603      	mov	r3, r0
 800d912:	71fb      	strb	r3, [r7, #7]
 800d914:	460b      	mov	r3, r1
 800d916:	80bb      	strh	r3, [r7, #4]
 800d918:	4613      	mov	r3, r2
 800d91a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	2b04      	cmp	r3, #4
 800d920:	d81b      	bhi.n	800d95a <pbuf_alloced_custom+0x52>
 800d922:	a201      	add	r2, pc, #4	; (adr r2, 800d928 <pbuf_alloced_custom+0x20>)
 800d924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d928:	0800d93d 	.word	0x0800d93d
 800d92c:	0800d943 	.word	0x0800d943
 800d930:	0800d949 	.word	0x0800d949
 800d934:	0800d94f 	.word	0x0800d94f
 800d938:	0800d955 	.word	0x0800d955
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d93c:	2336      	movs	r3, #54	; 0x36
 800d93e:	81fb      	strh	r3, [r7, #14]
    break;
 800d940:	e014      	b.n	800d96c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d942:	2322      	movs	r3, #34	; 0x22
 800d944:	81fb      	strh	r3, [r7, #14]
    break;
 800d946:	e011      	b.n	800d96c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d948:	230e      	movs	r3, #14
 800d94a:	81fb      	strh	r3, [r7, #14]
    break;
 800d94c:	e00e      	b.n	800d96c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d94e:	2300      	movs	r3, #0
 800d950:	81fb      	strh	r3, [r7, #14]
    break;
 800d952:	e00b      	b.n	800d96c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d954:	2300      	movs	r3, #0
 800d956:	81fb      	strh	r3, [r7, #14]
    break;
 800d958:	e008      	b.n	800d96c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d95a:	4b1d      	ldr	r3, [pc, #116]	; (800d9d0 <pbuf_alloced_custom+0xc8>)
 800d95c:	f240 12c5 	movw	r2, #453	; 0x1c5
 800d960:	491c      	ldr	r1, [pc, #112]	; (800d9d4 <pbuf_alloced_custom+0xcc>)
 800d962:	481d      	ldr	r0, [pc, #116]	; (800d9d8 <pbuf_alloced_custom+0xd0>)
 800d964:	f009 ff50 	bl	8017808 <iprintf>
    return NULL;
 800d968:	2300      	movs	r3, #0
 800d96a:	e02d      	b.n	800d9c8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	3303      	adds	r3, #3
 800d970:	f023 0203 	bic.w	r2, r3, #3
 800d974:	88bb      	ldrh	r3, [r7, #4]
 800d976:	441a      	add	r2, r3
 800d978:	8bbb      	ldrh	r3, [r7, #28]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d901      	bls.n	800d982 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	e022      	b.n	800d9c8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2200      	movs	r2, #0
 800d986:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d008      	beq.n	800d9a0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d98e:	89fb      	ldrh	r3, [r7, #14]
 800d990:	3303      	adds	r3, #3
 800d992:	f023 0303 	bic.w	r3, r3, #3
 800d996:	69ba      	ldr	r2, [r7, #24]
 800d998:	441a      	add	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	e002      	b.n	800d9a6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2202      	movs	r2, #2
 800d9aa:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	88ba      	ldrh	r2, [r7, #4]
 800d9b0:	811a      	strh	r2, [r3, #8]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	891a      	ldrh	r2, [r3, #8]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	79ba      	ldrb	r2, [r7, #6]
 800d9be:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d9c6:	683b      	ldr	r3, [r7, #0]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	08018c18 	.word	0x08018c18
 800d9d4:	08018dd4 	.word	0x08018dd4
 800d9d8:	08018c88 	.word	0x08018c88

0800d9dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d106      	bne.n	800d9fc <pbuf_realloc+0x20>
 800d9ee:	4b4b      	ldr	r3, [pc, #300]	; (800db1c <pbuf_realloc+0x140>)
 800d9f0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d9f4:	494a      	ldr	r1, [pc, #296]	; (800db20 <pbuf_realloc+0x144>)
 800d9f6:	484b      	ldr	r0, [pc, #300]	; (800db24 <pbuf_realloc+0x148>)
 800d9f8:	f009 ff06 	bl	8017808 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7b1b      	ldrb	r3, [r3, #12]
 800da00:	2b03      	cmp	r3, #3
 800da02:	d012      	beq.n	800da2a <pbuf_realloc+0x4e>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	7b1b      	ldrb	r3, [r3, #12]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d00e      	beq.n	800da2a <pbuf_realloc+0x4e>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7b1b      	ldrb	r3, [r3, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00a      	beq.n	800da2a <pbuf_realloc+0x4e>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7b1b      	ldrb	r3, [r3, #12]
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d006      	beq.n	800da2a <pbuf_realloc+0x4e>
 800da1c:	4b3f      	ldr	r3, [pc, #252]	; (800db1c <pbuf_realloc+0x140>)
 800da1e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800da22:	4941      	ldr	r1, [pc, #260]	; (800db28 <pbuf_realloc+0x14c>)
 800da24:	483f      	ldr	r0, [pc, #252]	; (800db24 <pbuf_realloc+0x148>)
 800da26:	f009 feef 	bl	8017808 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	891b      	ldrh	r3, [r3, #8]
 800da2e:	887a      	ldrh	r2, [r7, #2]
 800da30:	429a      	cmp	r2, r3
 800da32:	d26f      	bcs.n	800db14 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800da34:	887b      	ldrh	r3, [r7, #2]
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	8912      	ldrh	r2, [r2, #8]
 800da3a:	1a9b      	subs	r3, r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da3e:	887b      	ldrh	r3, [r7, #2]
 800da40:	827b      	strh	r3, [r7, #18]
  q = p;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da46:	e025      	b.n	800da94 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	8a7a      	ldrh	r2, [r7, #18]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da58:	4293      	cmp	r3, r2
 800da5a:	dd06      	ble.n	800da6a <pbuf_realloc+0x8e>
 800da5c:	4b2f      	ldr	r3, [pc, #188]	; (800db1c <pbuf_realloc+0x140>)
 800da5e:	f240 220b 	movw	r2, #523	; 0x20b
 800da62:	4932      	ldr	r1, [pc, #200]	; (800db2c <pbuf_realloc+0x150>)
 800da64:	482f      	ldr	r0, [pc, #188]	; (800db24 <pbuf_realloc+0x148>)
 800da66:	f009 fecf 	bl	8017808 <iprintf>
    q->tot_len += (u16_t)grow;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	891a      	ldrh	r2, [r3, #8]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4413      	add	r3, r2
 800da74:	b29a      	uxth	r2, r3
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <pbuf_realloc+0xb8>
 800da86:	4b25      	ldr	r3, [pc, #148]	; (800db1c <pbuf_realloc+0x140>)
 800da88:	f240 220f 	movw	r2, #527	; 0x20f
 800da8c:	4928      	ldr	r1, [pc, #160]	; (800db30 <pbuf_realloc+0x154>)
 800da8e:	4825      	ldr	r0, [pc, #148]	; (800db24 <pbuf_realloc+0x148>)
 800da90:	f009 feba 	bl	8017808 <iprintf>
  while (rem_len > q->len) {
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	895b      	ldrh	r3, [r3, #10]
 800da98:	8a7a      	ldrh	r2, [r7, #18]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d8d4      	bhi.n	800da48 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	7b1b      	ldrb	r3, [r3, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d122      	bne.n	800daec <pbuf_realloc+0x110>
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	895b      	ldrh	r3, [r3, #10]
 800daaa:	8a7a      	ldrh	r2, [r7, #18]
 800daac:	429a      	cmp	r2, r3
 800daae:	d01d      	beq.n	800daec <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	7b5b      	ldrb	r3, [r3, #13]
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d117      	bne.n	800daec <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	461a      	mov	r2, r3
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	8a7b      	ldrh	r3, [r7, #18]
 800daca:	4413      	add	r3, r2
 800dacc:	b29b      	uxth	r3, r3
 800dace:	4619      	mov	r1, r3
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f7ff f863 	bl	800cb9c <mem_trim>
 800dad6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <pbuf_realloc+0x110>
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <pbuf_realloc+0x140>)
 800dae0:	f240 221d 	movw	r2, #541	; 0x21d
 800dae4:	4913      	ldr	r1, [pc, #76]	; (800db34 <pbuf_realloc+0x158>)
 800dae6:	480f      	ldr	r0, [pc, #60]	; (800db24 <pbuf_realloc+0x148>)
 800dae8:	f009 fe8e 	bl	8017808 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	8a7a      	ldrh	r2, [r7, #18]
 800daf0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	895a      	ldrh	r2, [r3, #10]
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d004      	beq.n	800db0c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4618      	mov	r0, r3
 800db08:	f000 f8dc 	bl	800dcc4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2200      	movs	r2, #0
 800db10:	601a      	str	r2, [r3, #0]
 800db12:	e000      	b.n	800db16 <pbuf_realloc+0x13a>
    return;
 800db14:	bf00      	nop

}
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	08018c18 	.word	0x08018c18
 800db20:	08018df8 	.word	0x08018df8
 800db24:	08018c88 	.word	0x08018c88
 800db28:	08018e10 	.word	0x08018e10
 800db2c:	08018e2c 	.word	0x08018e2c
 800db30:	08018e40 	.word	0x08018e40
 800db34:	08018e58 	.word	0x08018e58

0800db38 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	807b      	strh	r3, [r7, #2]
 800db44:	4613      	mov	r3, r2
 800db46:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <pbuf_header_impl+0x24>
 800db4e:	4b46      	ldr	r3, [pc, #280]	; (800dc68 <pbuf_header_impl+0x130>)
 800db50:	f240 223f 	movw	r2, #575	; 0x23f
 800db54:	4945      	ldr	r1, [pc, #276]	; (800dc6c <pbuf_header_impl+0x134>)
 800db56:	4846      	ldr	r0, [pc, #280]	; (800dc70 <pbuf_header_impl+0x138>)
 800db58:	f009 fe56 	bl	8017808 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800db5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <pbuf_header_impl+0x32>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <pbuf_header_impl+0x36>
    return 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e078      	b.n	800dc60 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800db6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db72:	2b00      	cmp	r3, #0
 800db74:	da10      	bge.n	800db98 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800db76:	887b      	ldrh	r3, [r7, #2]
 800db78:	425b      	negs	r3, r3
 800db7a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	895b      	ldrh	r3, [r3, #10]
 800db80:	89fa      	ldrh	r2, [r7, #14]
 800db82:	429a      	cmp	r2, r3
 800db84:	d90a      	bls.n	800db9c <pbuf_header_impl+0x64>
 800db86:	4b38      	ldr	r3, [pc, #224]	; (800dc68 <pbuf_header_impl+0x130>)
 800db88:	f240 2247 	movw	r2, #583	; 0x247
 800db8c:	4939      	ldr	r1, [pc, #228]	; (800dc74 <pbuf_header_impl+0x13c>)
 800db8e:	4838      	ldr	r0, [pc, #224]	; (800dc70 <pbuf_header_impl+0x138>)
 800db90:	f009 fe3a 	bl	8017808 <iprintf>
 800db94:	2301      	movs	r3, #1
 800db96:	e063      	b.n	800dc60 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800db98:	887b      	ldrh	r3, [r7, #2]
 800db9a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7b1b      	ldrb	r3, [r3, #12]
 800dba0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800dba8:	89bb      	ldrh	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <pbuf_header_impl+0x7c>
 800dbae:	89bb      	ldrh	r3, [r7, #12]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d112      	bne.n	800dbda <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbbc:	425b      	negs	r3, r3
 800dbbe:	441a      	add	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3310      	adds	r3, #16
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d238      	bcs.n	800dc42 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e042      	b.n	800dc60 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800dbda:	89bb      	ldrh	r3, [r7, #12]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	d002      	beq.n	800dbe6 <pbuf_header_impl+0xae>
 800dbe0:	89bb      	ldrh	r3, [r7, #12]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d124      	bne.n	800dc30 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dbe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	da0d      	bge.n	800dc0a <pbuf_header_impl+0xd2>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	895b      	ldrh	r3, [r3, #10]
 800dbf2:	89fa      	ldrh	r2, [r7, #14]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d808      	bhi.n	800dc0a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc00:	425b      	negs	r3, r3
 800dc02:	441a      	add	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	605a      	str	r2, [r3, #4]
 800dc08:	e011      	b.n	800dc2e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800dc0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	dd0b      	ble.n	800dc2a <pbuf_header_impl+0xf2>
 800dc12:	787b      	ldrb	r3, [r7, #1]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d008      	beq.n	800dc2a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc20:	425b      	negs	r3, r3
 800dc22:	441a      	add	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	605a      	str	r2, [r3, #4]
 800dc28:	e001      	b.n	800dc2e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e018      	b.n	800dc60 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dc2e:	e008      	b.n	800dc42 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800dc30:	4b0d      	ldr	r3, [pc, #52]	; (800dc68 <pbuf_header_impl+0x130>)
 800dc32:	f240 2277 	movw	r2, #631	; 0x277
 800dc36:	4910      	ldr	r1, [pc, #64]	; (800dc78 <pbuf_header_impl+0x140>)
 800dc38:	480d      	ldr	r0, [pc, #52]	; (800dc70 <pbuf_header_impl+0x138>)
 800dc3a:	f009 fde5 	bl	8017808 <iprintf>
    return 1;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e00e      	b.n	800dc60 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	895a      	ldrh	r2, [r3, #10]
 800dc46:	887b      	ldrh	r3, [r7, #2]
 800dc48:	4413      	add	r3, r2
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	891a      	ldrh	r2, [r3, #8]
 800dc54:	887b      	ldrh	r3, [r7, #2]
 800dc56:	4413      	add	r3, r2
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	08018c18 	.word	0x08018c18
 800dc6c:	08018e74 	.word	0x08018e74
 800dc70:	08018c88 	.word	0x08018c88
 800dc74:	08018e80 	.word	0x08018e80
 800dc78:	08018ea0 	.word	0x08018ea0

0800dc7c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800dc88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff ff51 	bl	800db38 <pbuf_header_impl>
 800dc96:	4603      	mov	r3, r0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800dcac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7ff ff3f 	bl	800db38 <pbuf_header_impl>
 800dcba:	4603      	mov	r3, r0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10b      	bne.n	800dcea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <pbuf_free+0x22>
 800dcd8:	4b41      	ldr	r3, [pc, #260]	; (800dde0 <pbuf_free+0x11c>)
 800dcda:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dcde:	4941      	ldr	r1, [pc, #260]	; (800dde4 <pbuf_free+0x120>)
 800dce0:	4841      	ldr	r0, [pc, #260]	; (800dde8 <pbuf_free+0x124>)
 800dce2:	f009 fd91 	bl	8017808 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	e076      	b.n	800ddd8 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	7b1b      	ldrb	r3, [r3, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d012      	beq.n	800dd18 <pbuf_free+0x54>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	7b1b      	ldrb	r3, [r3, #12]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d00e      	beq.n	800dd18 <pbuf_free+0x54>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	7b1b      	ldrb	r3, [r3, #12]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d00a      	beq.n	800dd18 <pbuf_free+0x54>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	7b1b      	ldrb	r3, [r3, #12]
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d006      	beq.n	800dd18 <pbuf_free+0x54>
 800dd0a:	4b35      	ldr	r3, [pc, #212]	; (800dde0 <pbuf_free+0x11c>)
 800dd0c:	f240 22de 	movw	r2, #734	; 0x2de
 800dd10:	4936      	ldr	r1, [pc, #216]	; (800ddec <pbuf_free+0x128>)
 800dd12:	4835      	ldr	r0, [pc, #212]	; (800dde8 <pbuf_free+0x124>)
 800dd14:	f009 fd78 	bl	8017808 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd1c:	e058      	b.n	800ddd0 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dd1e:	f009 fd0f 	bl	8017740 <sys_arch_protect>
 800dd22:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	89db      	ldrh	r3, [r3, #14]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d106      	bne.n	800dd3a <pbuf_free+0x76>
 800dd2c:	4b2c      	ldr	r3, [pc, #176]	; (800dde0 <pbuf_free+0x11c>)
 800dd2e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800dd32:	492f      	ldr	r1, [pc, #188]	; (800ddf0 <pbuf_free+0x12c>)
 800dd34:	482c      	ldr	r0, [pc, #176]	; (800dde8 <pbuf_free+0x124>)
 800dd36:	f009 fd67 	bl	8017808 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	89db      	ldrh	r3, [r3, #14]
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	81da      	strh	r2, [r3, #14]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	89db      	ldrh	r3, [r3, #14]
 800dd4a:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800dd4c:	69b8      	ldr	r0, [r7, #24]
 800dd4e:	f009 fd05 	bl	801775c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd52:	8afb      	ldrh	r3, [r7, #22]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d139      	bne.n	800ddcc <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7b1b      	ldrb	r3, [r3, #12]
 800dd62:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	7b5b      	ldrb	r3, [r3, #13]
 800dd68:	f003 0302 	and.w	r3, r3, #2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d011      	beq.n	800dd94 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <pbuf_free+0xc6>
 800dd7c:	4b18      	ldr	r3, [pc, #96]	; (800dde0 <pbuf_free+0x11c>)
 800dd7e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800dd82:	491c      	ldr	r1, [pc, #112]	; (800ddf4 <pbuf_free+0x130>)
 800dd84:	4818      	ldr	r0, [pc, #96]	; (800dde8 <pbuf_free+0x124>)
 800dd86:	f009 fd3f 	bl	8017808 <iprintf>
        pc->custom_free_function(p);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	4798      	blx	r3
 800dd92:	e015      	b.n	800ddc0 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800dd94:	89fb      	ldrh	r3, [r7, #14]
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d104      	bne.n	800dda4 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	200c      	movs	r0, #12
 800dd9e:	f7ff f9ef 	bl	800d180 <memp_free>
 800dda2:	e00d      	b.n	800ddc0 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800dda4:	89fb      	ldrh	r3, [r7, #14]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d002      	beq.n	800ddb0 <pbuf_free+0xec>
 800ddaa:	89fb      	ldrh	r3, [r7, #14]
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d104      	bne.n	800ddba <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	200b      	movs	r0, #11
 800ddb4:	f7ff f9e4 	bl	800d180 <memp_free>
 800ddb8:	e002      	b.n	800ddc0 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7fe fe80 	bl	800cac0 <mem_free>
        }
      }
      count++;
 800ddc0:	7ffb      	ldrb	r3, [r7, #31]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	607b      	str	r3, [r7, #4]
 800ddca:	e001      	b.n	800ddd0 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1a3      	bne.n	800dd1e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ddd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3720      	adds	r7, #32
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	08018c18 	.word	0x08018c18
 800dde4:	08018e74 	.word	0x08018e74
 800dde8:	08018c88 	.word	0x08018c88
 800ddec:	08018eb0 	.word	0x08018eb0
 800ddf0:	08018ec8 	.word	0x08018ec8
 800ddf4:	08018ee0 	.word	0x08018ee0

0800ddf8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de04:	e005      	b.n	800de12 <pbuf_clen+0x1a>
    ++len;
 800de06:	89fb      	ldrh	r3, [r7, #14]
 800de08:	3301      	adds	r3, #1
 800de0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1f6      	bne.n	800de06 <pbuf_clen+0xe>
  }
  return len;
 800de18:	89fb      	ldrh	r3, [r7, #14]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
	...

0800de28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d016      	beq.n	800de64 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800de36:	f009 fc83 	bl	8017740 <sys_arch_protect>
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	89db      	ldrh	r3, [r3, #14]
 800de40:	3301      	adds	r3, #1
 800de42:	b29a      	uxth	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	81da      	strh	r2, [r3, #14]
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f009 fc87 	bl	801775c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	89db      	ldrh	r3, [r3, #14]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d106      	bne.n	800de64 <pbuf_ref+0x3c>
 800de56:	4b05      	ldr	r3, [pc, #20]	; (800de6c <pbuf_ref+0x44>)
 800de58:	f240 3239 	movw	r2, #825	; 0x339
 800de5c:	4904      	ldr	r1, [pc, #16]	; (800de70 <pbuf_ref+0x48>)
 800de5e:	4805      	ldr	r0, [pc, #20]	; (800de74 <pbuf_ref+0x4c>)
 800de60:	f009 fcd2 	bl	8017808 <iprintf>
  }
}
 800de64:	bf00      	nop
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	08018c18 	.word	0x08018c18
 800de70:	08018f04 	.word	0x08018f04
 800de74:	08018c88 	.word	0x08018c88

0800de78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <pbuf_cat+0x16>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d107      	bne.n	800de9e <pbuf_cat+0x26>
 800de8e:	4b20      	ldr	r3, [pc, #128]	; (800df10 <pbuf_cat+0x98>)
 800de90:	f240 324d 	movw	r2, #845	; 0x34d
 800de94:	491f      	ldr	r1, [pc, #124]	; (800df14 <pbuf_cat+0x9c>)
 800de96:	4820      	ldr	r0, [pc, #128]	; (800df18 <pbuf_cat+0xa0>)
 800de98:	f009 fcb6 	bl	8017808 <iprintf>
 800de9c:	e034      	b.n	800df08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	e00a      	b.n	800deba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	891a      	ldrh	r2, [r3, #8]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	891b      	ldrh	r3, [r3, #8]
 800deac:	4413      	add	r3, r2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	60fb      	str	r3, [r7, #12]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1f0      	bne.n	800dea4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	891a      	ldrh	r2, [r3, #8]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	895b      	ldrh	r3, [r3, #10]
 800deca:	429a      	cmp	r2, r3
 800decc:	d006      	beq.n	800dedc <pbuf_cat+0x64>
 800dece:	4b10      	ldr	r3, [pc, #64]	; (800df10 <pbuf_cat+0x98>)
 800ded0:	f240 3255 	movw	r2, #853	; 0x355
 800ded4:	4911      	ldr	r1, [pc, #68]	; (800df1c <pbuf_cat+0xa4>)
 800ded6:	4810      	ldr	r0, [pc, #64]	; (800df18 <pbuf_cat+0xa0>)
 800ded8:	f009 fc96 	bl	8017808 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d006      	beq.n	800def2 <pbuf_cat+0x7a>
 800dee4:	4b0a      	ldr	r3, [pc, #40]	; (800df10 <pbuf_cat+0x98>)
 800dee6:	f240 3256 	movw	r2, #854	; 0x356
 800deea:	490d      	ldr	r1, [pc, #52]	; (800df20 <pbuf_cat+0xa8>)
 800deec:	480a      	ldr	r0, [pc, #40]	; (800df18 <pbuf_cat+0xa0>)
 800deee:	f009 fc8b 	bl	8017808 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	891a      	ldrh	r2, [r3, #8]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	4413      	add	r3, r2
 800defc:	b29a      	uxth	r2, r3
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	08018c18 	.word	0x08018c18
 800df14:	08018f18 	.word	0x08018f18
 800df18:	08018c88 	.word	0x08018c88
 800df1c:	08018f50 	.word	0x08018f50
 800df20:	08018f80 	.word	0x08018f80

0800df24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff ffa1 	bl	800de78 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800df36:	6838      	ldr	r0, [r7, #0]
 800df38:	f7ff ff76 	bl	800de28 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800df3c:	bf00      	nop
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800df4e:	2300      	movs	r3, #0
 800df50:	81fb      	strh	r3, [r7, #14]
 800df52:	2300      	movs	r3, #0
 800df54:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d008      	beq.n	800df6e <pbuf_copy+0x2a>
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d005      	beq.n	800df6e <pbuf_copy+0x2a>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	891a      	ldrh	r2, [r3, #8]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	891b      	ldrh	r3, [r3, #8]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d209      	bcs.n	800df82 <pbuf_copy+0x3e>
 800df6e:	4b54      	ldr	r3, [pc, #336]	; (800e0c0 <pbuf_copy+0x17c>)
 800df70:	f240 32bd 	movw	r2, #957	; 0x3bd
 800df74:	4953      	ldr	r1, [pc, #332]	; (800e0c4 <pbuf_copy+0x180>)
 800df76:	4854      	ldr	r0, [pc, #336]	; (800e0c8 <pbuf_copy+0x184>)
 800df78:	f009 fc46 	bl	8017808 <iprintf>
 800df7c:	f06f 030f 	mvn.w	r3, #15
 800df80:	e099      	b.n	800e0b6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	895b      	ldrh	r3, [r3, #10]
 800df86:	461a      	mov	r2, r3
 800df88:	89fb      	ldrh	r3, [r7, #14]
 800df8a:	1ad2      	subs	r2, r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	895b      	ldrh	r3, [r3, #10]
 800df90:	4619      	mov	r1, r3
 800df92:	89bb      	ldrh	r3, [r7, #12]
 800df94:	1acb      	subs	r3, r1, r3
 800df96:	429a      	cmp	r2, r3
 800df98:	db05      	blt.n	800dfa6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	895a      	ldrh	r2, [r3, #10]
 800df9e:	89bb      	ldrh	r3, [r7, #12]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	817b      	strh	r3, [r7, #10]
 800dfa4:	e004      	b.n	800dfb0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	895a      	ldrh	r2, [r3, #10]
 800dfaa:	89fb      	ldrh	r3, [r7, #14]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	89fb      	ldrh	r3, [r7, #14]
 800dfb6:	18d0      	adds	r0, r2, r3
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	89bb      	ldrh	r3, [r7, #12]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	897a      	ldrh	r2, [r7, #10]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	f009 fc0d 	bl	80177e2 <memcpy>
    offset_to += len;
 800dfc8:	89fa      	ldrh	r2, [r7, #14]
 800dfca:	897b      	ldrh	r3, [r7, #10]
 800dfcc:	4413      	add	r3, r2
 800dfce:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800dfd0:	89ba      	ldrh	r2, [r7, #12]
 800dfd2:	897b      	ldrh	r3, [r7, #10]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	895b      	ldrh	r3, [r3, #10]
 800dfdc:	89fa      	ldrh	r2, [r7, #14]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d906      	bls.n	800dff0 <pbuf_copy+0xac>
 800dfe2:	4b37      	ldr	r3, [pc, #220]	; (800e0c0 <pbuf_copy+0x17c>)
 800dfe4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800dfe8:	4938      	ldr	r1, [pc, #224]	; (800e0cc <pbuf_copy+0x188>)
 800dfea:	4837      	ldr	r0, [pc, #220]	; (800e0c8 <pbuf_copy+0x184>)
 800dfec:	f009 fc0c 	bl	8017808 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	895b      	ldrh	r3, [r3, #10]
 800dff4:	89ba      	ldrh	r2, [r7, #12]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d906      	bls.n	800e008 <pbuf_copy+0xc4>
 800dffa:	4b31      	ldr	r3, [pc, #196]	; (800e0c0 <pbuf_copy+0x17c>)
 800dffc:	f240 32ce 	movw	r2, #974	; 0x3ce
 800e000:	4933      	ldr	r1, [pc, #204]	; (800e0d0 <pbuf_copy+0x18c>)
 800e002:	4831      	ldr	r0, [pc, #196]	; (800e0c8 <pbuf_copy+0x184>)
 800e004:	f009 fc00 	bl	8017808 <iprintf>
    if (offset_from >= p_from->len) {
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	895b      	ldrh	r3, [r3, #10]
 800e00c:	89ba      	ldrh	r2, [r7, #12]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d304      	bcc.n	800e01c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	895b      	ldrh	r3, [r3, #10]
 800e020:	89fa      	ldrh	r2, [r7, #14]
 800e022:	429a      	cmp	r2, r3
 800e024:	d114      	bne.n	800e050 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10c      	bne.n	800e050 <pbuf_copy+0x10c>
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d009      	beq.n	800e050 <pbuf_copy+0x10c>
 800e03c:	4b20      	ldr	r3, [pc, #128]	; (800e0c0 <pbuf_copy+0x17c>)
 800e03e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e042:	4924      	ldr	r1, [pc, #144]	; (800e0d4 <pbuf_copy+0x190>)
 800e044:	4820      	ldr	r0, [pc, #128]	; (800e0c8 <pbuf_copy+0x184>)
 800e046:	f009 fbdf 	bl	8017808 <iprintf>
 800e04a:	f06f 030f 	mvn.w	r3, #15
 800e04e:	e032      	b.n	800e0b6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d013      	beq.n	800e07e <pbuf_copy+0x13a>
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	895a      	ldrh	r2, [r3, #10]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	891b      	ldrh	r3, [r3, #8]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d10d      	bne.n	800e07e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d009      	beq.n	800e07e <pbuf_copy+0x13a>
 800e06a:	4b15      	ldr	r3, [pc, #84]	; (800e0c0 <pbuf_copy+0x17c>)
 800e06c:	f240 32de 	movw	r2, #990	; 0x3de
 800e070:	4919      	ldr	r1, [pc, #100]	; (800e0d8 <pbuf_copy+0x194>)
 800e072:	4815      	ldr	r0, [pc, #84]	; (800e0c8 <pbuf_copy+0x184>)
 800e074:	f009 fbc8 	bl	8017808 <iprintf>
 800e078:	f06f 0305 	mvn.w	r3, #5
 800e07c:	e01b      	b.n	800e0b6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d013      	beq.n	800e0ac <pbuf_copy+0x168>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	895a      	ldrh	r2, [r3, #10]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	891b      	ldrh	r3, [r3, #8]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d10d      	bne.n	800e0ac <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d009      	beq.n	800e0ac <pbuf_copy+0x168>
 800e098:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <pbuf_copy+0x17c>)
 800e09a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e09e:	490e      	ldr	r1, [pc, #56]	; (800e0d8 <pbuf_copy+0x194>)
 800e0a0:	4809      	ldr	r0, [pc, #36]	; (800e0c8 <pbuf_copy+0x184>)
 800e0a2:	f009 fbb1 	bl	8017808 <iprintf>
 800e0a6:	f06f 0305 	mvn.w	r3, #5
 800e0aa:	e004      	b.n	800e0b6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f47f af67 	bne.w	800df82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	08018c18 	.word	0x08018c18
 800e0c4:	08018fcc 	.word	0x08018fcc
 800e0c8:	08018c88 	.word	0x08018c88
 800e0cc:	08018ffc 	.word	0x08018ffc
 800e0d0:	08019014 	.word	0x08019014
 800e0d4:	08019030 	.word	0x08019030
 800e0d8:	08019040 	.word	0x08019040

0800e0dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	80fb      	strh	r3, [r7, #6]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d108      	bne.n	800e10e <pbuf_copy_partial+0x32>
 800e0fc:	4b30      	ldr	r3, [pc, #192]	; (800e1c0 <pbuf_copy_partial+0xe4>)
 800e0fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800e102:	4930      	ldr	r1, [pc, #192]	; (800e1c4 <pbuf_copy_partial+0xe8>)
 800e104:	4830      	ldr	r0, [pc, #192]	; (800e1c8 <pbuf_copy_partial+0xec>)
 800e106:	f009 fb7f 	bl	8017808 <iprintf>
 800e10a:	2300      	movs	r3, #0
 800e10c:	e054      	b.n	800e1b8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d108      	bne.n	800e126 <pbuf_copy_partial+0x4a>
 800e114:	4b2a      	ldr	r3, [pc, #168]	; (800e1c0 <pbuf_copy_partial+0xe4>)
 800e116:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e11a:	492c      	ldr	r1, [pc, #176]	; (800e1cc <pbuf_copy_partial+0xf0>)
 800e11c:	482a      	ldr	r0, [pc, #168]	; (800e1c8 <pbuf_copy_partial+0xec>)
 800e11e:	f009 fb73 	bl	8017808 <iprintf>
 800e122:	2300      	movs	r3, #0
 800e124:	e048      	b.n	800e1b8 <pbuf_copy_partial+0xdc>

  left = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <pbuf_copy_partial+0x5a>
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <pbuf_copy_partial+0x5e>
    return 0;
 800e136:	2300      	movs	r3, #0
 800e138:	e03e      	b.n	800e1b8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	61fb      	str	r3, [r7, #28]
 800e13e:	e034      	b.n	800e1aa <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800e140:	88bb      	ldrh	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00a      	beq.n	800e15c <pbuf_copy_partial+0x80>
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	895b      	ldrh	r3, [r3, #10]
 800e14a:	88ba      	ldrh	r2, [r7, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d305      	bcc.n	800e15c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	895b      	ldrh	r3, [r3, #10]
 800e154:	88ba      	ldrh	r2, [r7, #4]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	80bb      	strh	r3, [r7, #4]
 800e15a:	e023      	b.n	800e1a4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	895a      	ldrh	r2, [r3, #10]
 800e160:	88bb      	ldrh	r3, [r7, #4]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e166:	8b3a      	ldrh	r2, [r7, #24]
 800e168:	88fb      	ldrh	r3, [r7, #6]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d901      	bls.n	800e172 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800e172:	8b7b      	ldrh	r3, [r7, #26]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	18d0      	adds	r0, r2, r3
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	88bb      	ldrh	r3, [r7, #4]
 800e17e:	4413      	add	r3, r2
 800e180:	8b3a      	ldrh	r2, [r7, #24]
 800e182:	4619      	mov	r1, r3
 800e184:	f009 fb2d 	bl	80177e2 <memcpy>
      copied_total += buf_copy_len;
 800e188:	8afa      	ldrh	r2, [r7, #22]
 800e18a:	8b3b      	ldrh	r3, [r7, #24]
 800e18c:	4413      	add	r3, r2
 800e18e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800e190:	8b7a      	ldrh	r2, [r7, #26]
 800e192:	8b3b      	ldrh	r3, [r7, #24]
 800e194:	4413      	add	r3, r2
 800e196:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800e198:	88fa      	ldrh	r2, [r7, #6]
 800e19a:	8b3b      	ldrh	r3, [r7, #24]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	61fb      	str	r3, [r7, #28]
 800e1aa:	88fb      	ldrh	r3, [r7, #6]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <pbuf_copy_partial+0xda>
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1c4      	bne.n	800e140 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800e1b6:	8afb      	ldrh	r3, [r7, #22]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3720      	adds	r7, #32
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	08018c18 	.word	0x08018c18
 800e1c4:	0801906c 	.word	0x0801906c
 800e1c8:	08018c88 	.word	0x08018c88
 800e1cc:	0801908c 	.word	0x0801908c

0800e1d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e1d4:	bf00      	nop
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e1e4:	f000 fdf0 	bl	800edc8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e1e8:	4b07      	ldr	r3, [pc, #28]	; (800e208 <tcp_tmr+0x28>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	4b05      	ldr	r3, [pc, #20]	; (800e208 <tcp_tmr+0x28>)
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <tcp_tmr+0x28>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	f003 0301 	and.w	r3, r3, #1
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e200:	f000 fb22 	bl	800e848 <tcp_slowtmr>
  }
}
 800e204:	bf00      	nop
 800e206:	bd80      	pop	{r7, pc}
 800e208:	200040b1 	.word	0x200040b1

0800e20c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e00a      	b.n	800e232 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	d102      	bne.n	800e22c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	60fb      	str	r3, [r7, #12]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1f1      	bne.n	800e21c <tcp_remove_listener+0x10>
      }
   }
}
 800e238:	bf00      	nop
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <tcp_listen_closed+0x1a>
 800e252:	4b13      	ldr	r3, [pc, #76]	; (800e2a0 <tcp_listen_closed+0x5c>)
 800e254:	22c0      	movs	r2, #192	; 0xc0
 800e256:	4913      	ldr	r1, [pc, #76]	; (800e2a4 <tcp_listen_closed+0x60>)
 800e258:	4813      	ldr	r0, [pc, #76]	; (800e2a8 <tcp_listen_closed+0x64>)
 800e25a:	f009 fad5 	bl	8017808 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	7d1b      	ldrb	r3, [r3, #20]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d005      	beq.n	800e272 <tcp_listen_closed+0x2e>
 800e266:	4b0e      	ldr	r3, [pc, #56]	; (800e2a0 <tcp_listen_closed+0x5c>)
 800e268:	22c1      	movs	r2, #193	; 0xc1
 800e26a:	4910      	ldr	r1, [pc, #64]	; (800e2ac <tcp_listen_closed+0x68>)
 800e26c:	480e      	ldr	r0, [pc, #56]	; (800e2a8 <tcp_listen_closed+0x64>)
 800e26e:	f009 facb 	bl	8017808 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e272:	2301      	movs	r3, #1
 800e274:	60fb      	str	r3, [r7, #12]
 800e276:	e00b      	b.n	800e290 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800e278:	4a0d      	ldr	r2, [pc, #52]	; (800e2b0 <tcp_listen_closed+0x6c>)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff ffc1 	bl	800e20c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3301      	adds	r3, #1
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b03      	cmp	r3, #3
 800e294:	d9f0      	bls.n	800e278 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	080191c0 	.word	0x080191c0
 800e2a4:	08019214 	.word	0x08019214
 800e2a8:	08019220 	.word	0x08019220
 800e2ac:	08019248 	.word	0x08019248
 800e2b0:	0801acc4 	.word	0x0801acc4

0800e2b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e2b4:	b5b0      	push	{r4, r5, r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af02      	add	r7, sp, #8
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d075      	beq.n	800e3b2 <tcp_close_shutdown+0xfe>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d003      	beq.n	800e2d6 <tcp_close_shutdown+0x22>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	2b07      	cmp	r3, #7
 800e2d4:	d16d      	bne.n	800e3b2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d104      	bne.n	800e2e8 <tcp_close_shutdown+0x34>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e2e6:	d064      	beq.n	800e3b2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7e9b      	ldrb	r3, [r3, #26]
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <tcp_close_shutdown+0x4e>
 800e2f4:	4b59      	ldr	r3, [pc, #356]	; (800e45c <tcp_close_shutdown+0x1a8>)
 800e2f6:	f240 120f 	movw	r2, #271	; 0x10f
 800e2fa:	4959      	ldr	r1, [pc, #356]	; (800e460 <tcp_close_shutdown+0x1ac>)
 800e2fc:	4859      	ldr	r0, [pc, #356]	; (800e464 <tcp_close_shutdown+0x1b0>)
 800e2fe:	f009 fa83 	bl	8017808 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e30a:	687c      	ldr	r4, [r7, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	1d1d      	adds	r5, r3, #4
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	8adb      	ldrh	r3, [r3, #22]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	8b12      	ldrh	r2, [r2, #24]
 800e318:	9201      	str	r2, [sp, #4]
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	462b      	mov	r3, r5
 800e31e:	4622      	mov	r2, r4
 800e320:	f004 f862 	bl	80123e8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 ffc5 	bl	800f2b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e32a:	4b4f      	ldr	r3, [pc, #316]	; (800e468 <tcp_close_shutdown+0x1b4>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	429a      	cmp	r2, r3
 800e332:	d105      	bne.n	800e340 <tcp_close_shutdown+0x8c>
 800e334:	4b4c      	ldr	r3, [pc, #304]	; (800e468 <tcp_close_shutdown+0x1b4>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	4a4b      	ldr	r2, [pc, #300]	; (800e468 <tcp_close_shutdown+0x1b4>)
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	e013      	b.n	800e368 <tcp_close_shutdown+0xb4>
 800e340:	4b49      	ldr	r3, [pc, #292]	; (800e468 <tcp_close_shutdown+0x1b4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	e00c      	b.n	800e362 <tcp_close_shutdown+0xae>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d104      	bne.n	800e35c <tcp_close_shutdown+0xa8>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68da      	ldr	r2, [r3, #12]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	60da      	str	r2, [r3, #12]
 800e35a:	e005      	b.n	800e368 <tcp_close_shutdown+0xb4>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	60fb      	str	r3, [r7, #12]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1ef      	bne.n	800e348 <tcp_close_shutdown+0x94>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	60da      	str	r2, [r3, #12]
 800e36e:	4b3f      	ldr	r3, [pc, #252]	; (800e46c <tcp_close_shutdown+0x1b8>)
 800e370:	2201      	movs	r2, #1
 800e372:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7d1b      	ldrb	r3, [r3, #20]
 800e378:	2b04      	cmp	r3, #4
 800e37a:	d10c      	bne.n	800e396 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	220a      	movs	r2, #10
 800e380:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e382:	4b3b      	ldr	r3, [pc, #236]	; (800e470 <tcp_close_shutdown+0x1bc>)
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	60da      	str	r2, [r3, #12]
 800e38a:	4a39      	ldr	r2, [pc, #228]	; (800e470 <tcp_close_shutdown+0x1bc>)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	f004 fa7c 	bl	801288c <tcp_timer_needed>
 800e394:	e00b      	b.n	800e3ae <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800e396:	4b37      	ldr	r3, [pc, #220]	; (800e474 <tcp_close_shutdown+0x1c0>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d102      	bne.n	800e3a6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800e3a0:	f003 faec 	bl	801197c <tcp_trigger_input_pcb_close>
 800e3a4:	e003      	b.n	800e3ae <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800e3a6:	6879      	ldr	r1, [r7, #4]
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	f7fe fee9 	bl	800d180 <memp_free>
        }
      }
      return ERR_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e050      	b.n	800e454 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7d1b      	ldrb	r3, [r3, #20]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d02e      	beq.n	800e418 <tcp_close_shutdown+0x164>
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d038      	beq.n	800e430 <tcp_close_shutdown+0x17c>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d142      	bne.n	800e448 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8adb      	ldrh	r3, [r3, #22]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d021      	beq.n	800e40e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e3ca:	4b2b      	ldr	r3, [pc, #172]	; (800e478 <tcp_close_shutdown+0x1c4>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d105      	bne.n	800e3e0 <tcp_close_shutdown+0x12c>
 800e3d4:	4b28      	ldr	r3, [pc, #160]	; (800e478 <tcp_close_shutdown+0x1c4>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	4a27      	ldr	r2, [pc, #156]	; (800e478 <tcp_close_shutdown+0x1c4>)
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	e013      	b.n	800e408 <tcp_close_shutdown+0x154>
 800e3e0:	4b25      	ldr	r3, [pc, #148]	; (800e478 <tcp_close_shutdown+0x1c4>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	60bb      	str	r3, [r7, #8]
 800e3e6:	e00c      	b.n	800e402 <tcp_close_shutdown+0x14e>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d104      	bne.n	800e3fc <tcp_close_shutdown+0x148>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	68da      	ldr	r2, [r3, #12]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	60da      	str	r2, [r3, #12]
 800e3fa:	e005      	b.n	800e408 <tcp_close_shutdown+0x154>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	60bb      	str	r3, [r7, #8]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1ef      	bne.n	800e3e8 <tcp_close_shutdown+0x134>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	2001      	movs	r0, #1
 800e412:	f7fe feb5 	bl	800d180 <memp_free>
    break;
 800e416:	e01c      	b.n	800e452 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff13 	bl	800e244 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	4816      	ldr	r0, [pc, #88]	; (800e47c <tcp_close_shutdown+0x1c8>)
 800e422:	f000 ff89 	bl	800f338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e426:	6879      	ldr	r1, [r7, #4]
 800e428:	2002      	movs	r0, #2
 800e42a:	f7fe fea9 	bl	800d180 <memp_free>
    break;
 800e42e:	e010      	b.n	800e452 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	480d      	ldr	r0, [pc, #52]	; (800e468 <tcp_close_shutdown+0x1b4>)
 800e434:	f000 ff80 	bl	800f338 <tcp_pcb_remove>
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <tcp_close_shutdown+0x1b8>)
 800e43a:	2201      	movs	r2, #1
 800e43c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	2001      	movs	r0, #1
 800e442:	f7fe fe9d 	bl	800d180 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800e446:	e004      	b.n	800e452 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f819 	bl	800e480 <tcp_close_shutdown_fin>
 800e44e:	4603      	mov	r3, r0
 800e450:	e000      	b.n	800e454 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bdb0      	pop	{r4, r5, r7, pc}
 800e45c:	080191c0 	.word	0x080191c0
 800e460:	08019260 	.word	0x08019260
 800e464:	08019220 	.word	0x08019220
 800e468:	20007990 	.word	0x20007990
 800e46c:	2000798c 	.word	0x2000798c
 800e470:	200079a0 	.word	0x200079a0
 800e474:	200079a4 	.word	0x200079a4
 800e478:	2000799c 	.word	0x2000799c
 800e47c:	20007998 	.word	0x20007998

0800e480 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <tcp_close_shutdown_fin+0x1c>
 800e48e:	4b2c      	ldr	r3, [pc, #176]	; (800e540 <tcp_close_shutdown_fin+0xc0>)
 800e490:	f240 124d 	movw	r2, #333	; 0x14d
 800e494:	492b      	ldr	r1, [pc, #172]	; (800e544 <tcp_close_shutdown_fin+0xc4>)
 800e496:	482c      	ldr	r0, [pc, #176]	; (800e548 <tcp_close_shutdown_fin+0xc8>)
 800e498:	f009 f9b6 	bl	8017808 <iprintf>

  switch (pcb->state) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7d1b      	ldrb	r3, [r3, #20]
 800e4a0:	2b04      	cmp	r3, #4
 800e4a2:	d010      	beq.n	800e4c6 <tcp_close_shutdown_fin+0x46>
 800e4a4:	2b07      	cmp	r3, #7
 800e4a6:	d01b      	beq.n	800e4e0 <tcp_close_shutdown_fin+0x60>
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d126      	bne.n	800e4fa <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f003 faf1 	bl	8011a94 <tcp_send_fin>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d11f      	bne.n	800e4fe <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2205      	movs	r2, #5
 800e4c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e4c4:	e01b      	b.n	800e4fe <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f003 fae4 	bl	8011a94 <tcp_send_fin>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d114      	bne.n	800e502 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2205      	movs	r2, #5
 800e4dc:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e4de:	e010      	b.n	800e502 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f003 fad7 	bl	8011a94 <tcp_send_fin>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d109      	bne.n	800e506 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2209      	movs	r2, #9
 800e4f6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e4f8:	e005      	b.n	800e506 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e01c      	b.n	800e538 <tcp_close_shutdown_fin+0xb8>
    break;
 800e4fe:	bf00      	nop
 800e500:	e002      	b.n	800e508 <tcp_close_shutdown_fin+0x88>
    break;
 800e502:	bf00      	nop
 800e504:	e000      	b.n	800e508 <tcp_close_shutdown_fin+0x88>
    break;
 800e506:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d103      	bne.n	800e518 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f003 fcdf 	bl	8011ed4 <tcp_output>
 800e516:	e00d      	b.n	800e534 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d108      	bne.n	800e534 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7e9b      	ldrb	r3, [r3, #26]
 800e526:	f043 0308 	orr.w	r3, r3, #8
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	e001      	b.n	800e538 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	080191c0 	.word	0x080191c0
 800e544:	08019214 	.word	0x08019214
 800e548:	08019220 	.word	0x08019220

0800e54c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	7d1b      	ldrb	r3, [r3, #20]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d006      	beq.n	800e56a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7e9b      	ldrb	r3, [r3, #26]
 800e560:	f043 0310 	orr.w	r3, r3, #16
 800e564:	b2da      	uxtb	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e56a:	2101      	movs	r1, #1
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7ff fea1 	bl	800e2b4 <tcp_close_shutdown>
 800e572:	4603      	mov	r3, r0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08c      	sub	sp, #48	; 0x30
 800e580:	af02      	add	r7, sp, #8
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7d1b      	ldrb	r3, [r3, #20]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d106      	bne.n	800e59c <tcp_abandon+0x20>
 800e58e:	4b4d      	ldr	r3, [pc, #308]	; (800e6c4 <tcp_abandon+0x148>)
 800e590:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e594:	494c      	ldr	r1, [pc, #304]	; (800e6c8 <tcp_abandon+0x14c>)
 800e596:	484d      	ldr	r0, [pc, #308]	; (800e6cc <tcp_abandon+0x150>)
 800e598:	f009 f936 	bl	8017808 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
 800e5a0:	2b0a      	cmp	r3, #10
 800e5a2:	d108      	bne.n	800e5b6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	484a      	ldr	r0, [pc, #296]	; (800e6d0 <tcp_abandon+0x154>)
 800e5a8:	f000 fec6 	bl	800f338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e5ac:	6879      	ldr	r1, [r7, #4]
 800e5ae:	2001      	movs	r0, #1
 800e5b0:	f7fe fde6 	bl	800d180 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800e5b4:	e081      	b.n	800e6ba <tcp_abandon+0x13e>
    int send_rst = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5d0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d1b      	ldrb	r3, [r3, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d126      	bne.n	800e62e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	8adb      	ldrh	r3, [r3, #22]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d02e      	beq.n	800e646 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5e8:	4b3a      	ldr	r3, [pc, #232]	; (800e6d4 <tcp_abandon+0x158>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d105      	bne.n	800e5fe <tcp_abandon+0x82>
 800e5f2:	4b38      	ldr	r3, [pc, #224]	; (800e6d4 <tcp_abandon+0x158>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	4a36      	ldr	r2, [pc, #216]	; (800e6d4 <tcp_abandon+0x158>)
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	e013      	b.n	800e626 <tcp_abandon+0xaa>
 800e5fe:	4b35      	ldr	r3, [pc, #212]	; (800e6d4 <tcp_abandon+0x158>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	61fb      	str	r3, [r7, #28]
 800e604:	e00c      	b.n	800e620 <tcp_abandon+0xa4>
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d104      	bne.n	800e61a <tcp_abandon+0x9e>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	68da      	ldr	r2, [r3, #12]
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	60da      	str	r2, [r3, #12]
 800e618:	e005      	b.n	800e626 <tcp_abandon+0xaa>
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	61fb      	str	r3, [r7, #28]
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1ef      	bne.n	800e606 <tcp_abandon+0x8a>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	60da      	str	r2, [r3, #12]
 800e62c:	e00b      	b.n	800e646 <tcp_abandon+0xca>
      send_rst = reset;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8adb      	ldrh	r3, [r3, #22]
 800e636:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	4827      	ldr	r0, [pc, #156]	; (800e6d8 <tcp_abandon+0x15c>)
 800e63c:	f000 fe7c 	bl	800f338 <tcp_pcb_remove>
 800e640:	4b26      	ldr	r3, [pc, #152]	; (800e6dc <tcp_abandon+0x160>)
 800e642:	2201      	movs	r2, #1
 800e644:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e652:	4618      	mov	r0, r3
 800e654:	f000 fc85 	bl	800ef62 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d004      	beq.n	800e66a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e664:	4618      	mov	r0, r3
 800e666:	f000 fc7c 	bl	800ef62 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d004      	beq.n	800e67c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e676:	4618      	mov	r0, r3
 800e678:	f000 fc73 	bl	800ef62 <tcp_segs_free>
    if (send_rst) {
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00c      	beq.n	800e69c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	1d19      	adds	r1, r3, #4
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	8b1b      	ldrh	r3, [r3, #24]
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	460b      	mov	r3, r1
 800e694:	6979      	ldr	r1, [r7, #20]
 800e696:	69b8      	ldr	r0, [r7, #24]
 800e698:	f003 fea6 	bl	80123e8 <tcp_rst>
    last_state = pcb->state;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7d1b      	ldrb	r3, [r3, #20]
 800e6a0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	f7fe fd6b 	bl	800d180 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d004      	beq.n	800e6ba <tcp_abandon+0x13e>
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	f06f 010c 	mvn.w	r1, #12
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	4798      	blx	r3
}
 800e6ba:	bf00      	nop
 800e6bc:	3728      	adds	r7, #40	; 0x28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	080191c0 	.word	0x080191c0
 800e6c8:	0801927c 	.word	0x0801927c
 800e6cc:	08019220 	.word	0x08019220
 800e6d0:	200079a0 	.word	0x200079a0
 800e6d4:	2000799c 	.word	0x2000799c
 800e6d8:	20007990 	.word	0x20007990
 800e6dc:	2000798c 	.word	0x2000798c

0800e6e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff ff46 	bl	800e57c <tcp_abandon>
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e708:	4413      	add	r3, r2
 800e70a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e714:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e718:	bf28      	it	cs
 800e71a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e71e:	b292      	uxth	r2, r2
 800e720:	4413      	add	r3, r2
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	db08      	blt.n	800e73c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	e020      	b.n	800e77e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	dd03      	ble.n	800e752 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e750:	e014      	b.n	800e77c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e764:	d306      	bcc.n	800e774 <tcp_update_rcv_ann_wnd+0x7c>
 800e766:	4b08      	ldr	r3, [pc, #32]	; (800e788 <tcp_update_rcv_ann_wnd+0x90>)
 800e768:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e76c:	4907      	ldr	r1, [pc, #28]	; (800e78c <tcp_update_rcv_ann_wnd+0x94>)
 800e76e:	4808      	ldr	r0, [pc, #32]	; (800e790 <tcp_update_rcv_ann_wnd+0x98>)
 800e770:	f009 f84a 	bl	8017808 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	b29a      	uxth	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e77c:	2300      	movs	r3, #0
  }
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	080191c0 	.word	0x080191c0
 800e78c:	080192fc 	.word	0x080192fc
 800e790:	08019220 	.word	0x08019220

0800e794 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d106      	bne.n	800e7b6 <tcp_recved+0x22>
 800e7a8:	4b23      	ldr	r3, [pc, #140]	; (800e838 <tcp_recved+0xa4>)
 800e7aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e7ae:	4923      	ldr	r1, [pc, #140]	; (800e83c <tcp_recved+0xa8>)
 800e7b0:	4823      	ldr	r0, [pc, #140]	; (800e840 <tcp_recved+0xac>)
 800e7b2:	f009 f829 	bl	8017808 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7ba:	887b      	ldrh	r3, [r7, #2]
 800e7bc:	4413      	add	r3, r2
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e7cc:	d904      	bls.n	800e7d8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7d4:	851a      	strh	r2, [r3, #40]	; 0x28
 800e7d6:	e017      	b.n	800e808 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d113      	bne.n	800e808 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7d1b      	ldrb	r3, [r3, #20]
 800e7e4:	2b07      	cmp	r3, #7
 800e7e6:	d003      	beq.n	800e7f0 <tcp_recved+0x5c>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7d1b      	ldrb	r3, [r3, #20]
 800e7ec:	2b09      	cmp	r3, #9
 800e7ee:	d104      	bne.n	800e7fa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e7f8:	e006      	b.n	800e808 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e7fa:	4b0f      	ldr	r3, [pc, #60]	; (800e838 <tcp_recved+0xa4>)
 800e7fc:	f240 322d 	movw	r2, #813	; 0x32d
 800e800:	4910      	ldr	r1, [pc, #64]	; (800e844 <tcp_recved+0xb0>)
 800e802:	480f      	ldr	r0, [pc, #60]	; (800e840 <tcp_recved+0xac>)
 800e804:	f009 f800 	bl	8017808 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff ff75 	bl	800e6f8 <tcp_update_rcv_ann_wnd>
 800e80e:	4603      	mov	r3, r0
 800e810:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e818:	db09      	blt.n	800e82e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	7e9b      	ldrb	r3, [r3, #26]
 800e81e:	f043 0302 	orr.w	r3, r3, #2
 800e822:	b2da      	uxtb	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f003 fb53 	bl	8011ed4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	080191c0 	.word	0x080191c0
 800e83c:	08019318 	.word	0x08019318
 800e840:	08019220 	.word	0x08019220
 800e844:	08019340 	.word	0x08019340

0800e848 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e848:	b5b0      	push	{r4, r5, r7, lr}
 800e84a:	b08c      	sub	sp, #48	; 0x30
 800e84c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e852:	4b96      	ldr	r3, [pc, #600]	; (800eaac <tcp_slowtmr+0x264>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3301      	adds	r3, #1
 800e858:	4a94      	ldr	r2, [pc, #592]	; (800eaac <tcp_slowtmr+0x264>)
 800e85a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e85c:	4b94      	ldr	r3, [pc, #592]	; (800eab0 <tcp_slowtmr+0x268>)
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	3301      	adds	r3, #1
 800e862:	b2da      	uxtb	r2, r3
 800e864:	4b92      	ldr	r3, [pc, #584]	; (800eab0 <tcp_slowtmr+0x268>)
 800e866:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e868:	2300      	movs	r3, #0
 800e86a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e86c:	4b91      	ldr	r3, [pc, #580]	; (800eab4 <tcp_slowtmr+0x26c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e872:	e227      	b.n	800ecc4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	7d1b      	ldrb	r3, [r3, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d106      	bne.n	800e88a <tcp_slowtmr+0x42>
 800e87c:	4b8e      	ldr	r3, [pc, #568]	; (800eab8 <tcp_slowtmr+0x270>)
 800e87e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e882:	498e      	ldr	r1, [pc, #568]	; (800eabc <tcp_slowtmr+0x274>)
 800e884:	488e      	ldr	r0, [pc, #568]	; (800eac0 <tcp_slowtmr+0x278>)
 800e886:	f008 ffbf 	bl	8017808 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	7d1b      	ldrb	r3, [r3, #20]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d106      	bne.n	800e8a0 <tcp_slowtmr+0x58>
 800e892:	4b89      	ldr	r3, [pc, #548]	; (800eab8 <tcp_slowtmr+0x270>)
 800e894:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e898:	498a      	ldr	r1, [pc, #552]	; (800eac4 <tcp_slowtmr+0x27c>)
 800e89a:	4889      	ldr	r0, [pc, #548]	; (800eac0 <tcp_slowtmr+0x278>)
 800e89c:	f008 ffb4 	bl	8017808 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	7d1b      	ldrb	r3, [r3, #20]
 800e8a4:	2b0a      	cmp	r3, #10
 800e8a6:	d106      	bne.n	800e8b6 <tcp_slowtmr+0x6e>
 800e8a8:	4b83      	ldr	r3, [pc, #524]	; (800eab8 <tcp_slowtmr+0x270>)
 800e8aa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e8ae:	4986      	ldr	r1, [pc, #536]	; (800eac8 <tcp_slowtmr+0x280>)
 800e8b0:	4883      	ldr	r0, [pc, #524]	; (800eac0 <tcp_slowtmr+0x278>)
 800e8b2:	f008 ffa9 	bl	8017808 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	7f5a      	ldrb	r2, [r3, #29]
 800e8ba:	4b7d      	ldr	r3, [pc, #500]	; (800eab0 <tcp_slowtmr+0x268>)
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d103      	bne.n	800e8ca <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e8c8:	e1fc      	b.n	800ecc4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e8ca:	4b79      	ldr	r3, [pc, #484]	; (800eab0 <tcp_slowtmr+0x268>)
 800e8cc:	781a      	ldrb	r2, [r3, #0]
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	7d1b      	ldrb	r3, [r3, #20]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d108      	bne.n	800e8f4 <tcp_slowtmr+0xac>
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8e8:	2b05      	cmp	r3, #5
 800e8ea:	d903      	bls.n	800e8f4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e8ec:	7ffb      	ldrb	r3, [r7, #31]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	77fb      	strb	r3, [r7, #31]
 800e8f2:	e0a2      	b.n	800ea3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8fa:	2b0b      	cmp	r3, #11
 800e8fc:	d903      	bls.n	800e906 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e8fe:	7ffb      	ldrb	r3, [r7, #31]
 800e900:	3301      	adds	r3, #1
 800e902:	77fb      	strb	r3, [r7, #31]
 800e904:	e099      	b.n	800ea3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d032      	beq.n	800e976 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e916:	3b01      	subs	r3, #1
 800e918:	4a6c      	ldr	r2, [pc, #432]	; (800eacc <tcp_slowtmr+0x284>)
 800e91a:	5cd3      	ldrb	r3, [r2, r3]
 800e91c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e924:	7cfa      	ldrb	r2, [r7, #19]
 800e926:	429a      	cmp	r2, r3
 800e928:	d907      	bls.n	800e93a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e930:	3301      	adds	r3, #1
 800e932:	b2da      	uxtb	r2, r3
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e940:	7cfa      	ldrb	r2, [r7, #19]
 800e942:	429a      	cmp	r2, r3
 800e944:	d879      	bhi.n	800ea3a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e948:	f003 fee0 	bl	801270c <tcp_zero_window_probe>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d173      	bne.n	800ea3a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e960:	2b06      	cmp	r3, #6
 800e962:	d86a      	bhi.n	800ea3a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e96a:	3301      	adds	r3, #1
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e974:	e061      	b.n	800ea3a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	db08      	blt.n	800e992 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e986:	b29b      	uxth	r3, r3
 800e988:	3301      	adds	r3, #1
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	b21a      	sxth	r2, r3
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d04f      	beq.n	800ea3a <tcp_slowtmr+0x1f2>
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	db47      	blt.n	800ea3a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	7d1b      	ldrb	r3, [r3, #20]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d018      	beq.n	800e9e4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9b8:	2b0c      	cmp	r3, #12
 800e9ba:	bf28      	it	cs
 800e9bc:	230c      	movcs	r3, #12
 800e9be:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9c6:	10db      	asrs	r3, r3, #3
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9d2:	4413      	add	r3, r2
 800e9d4:	7dfa      	ldrb	r2, [r7, #23]
 800e9d6:	493e      	ldr	r1, [pc, #248]	; (800ead0 <tcp_slowtmr+0x288>)
 800e9d8:	5c8a      	ldrb	r2, [r1, r2]
 800e9da:	4093      	lsls	r3, r2
 800e9dc:	b21a      	sxth	r2, r3
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	bf28      	it	cs
 800e9fa:	4613      	movcs	r3, r2
 800e9fc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e9fe:	8abb      	ldrh	r3, [r7, #20]
 800ea00:	085b      	lsrs	r3, r3, #1
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d206      	bcs.n	800ea2a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800ea34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea36:	f003 fd4d 	bl	80124d4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	7d1b      	ldrb	r3, [r3, #20]
 800ea3e:	2b06      	cmp	r3, #6
 800ea40:	d10f      	bne.n	800ea62 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	7e9b      	ldrb	r3, [r3, #26]
 800ea46:	f003 0310 	and.w	r3, r3, #16
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d009      	beq.n	800ea62 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea4e:	4b17      	ldr	r3, [pc, #92]	; (800eaac <tcp_slowtmr+0x264>)
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	2b28      	cmp	r3, #40	; 0x28
 800ea5a:	d902      	bls.n	800ea62 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ea5c:	7ffb      	ldrb	r3, [r7, #31]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	7a1b      	ldrb	r3, [r3, #8]
 800ea66:	f003 0308 	and.w	r3, r3, #8
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d05d      	beq.n	800eb2a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d003      	beq.n	800ea7e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800ea7a:	2b07      	cmp	r3, #7
 800ea7c:	d155      	bne.n	800eb2a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <tcp_slowtmr+0x264>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ea8e:	4b11      	ldr	r3, [pc, #68]	; (800ead4 <tcp_slowtmr+0x28c>)
 800ea90:	440b      	add	r3, r1
 800ea92:	4911      	ldr	r1, [pc, #68]	; (800ead8 <tcp_slowtmr+0x290>)
 800ea94:	fba1 1303 	umull	r1, r3, r1, r3
 800ea98:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d91e      	bls.n	800eadc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea9e:	7ffb      	ldrb	r3, [r7, #31]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800eaa4:	7fbb      	ldrb	r3, [r7, #30]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	77bb      	strb	r3, [r7, #30]
 800eaaa:	e03e      	b.n	800eb2a <tcp_slowtmr+0x2e2>
 800eaac:	20007994 	.word	0x20007994
 800eab0:	200040b2 	.word	0x200040b2
 800eab4:	20007990 	.word	0x20007990
 800eab8:	080191c0 	.word	0x080191c0
 800eabc:	08019394 	.word	0x08019394
 800eac0:	08019220 	.word	0x08019220
 800eac4:	080193c0 	.word	0x080193c0
 800eac8:	080193ec 	.word	0x080193ec
 800eacc:	0801acbc 	.word	0x0801acbc
 800ead0:	0801acac 	.word	0x0801acac
 800ead4:	000a4cb8 	.word	0x000a4cb8
 800ead8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eadc:	4b97      	ldr	r3, [pc, #604]	; (800ed3c <tcp_slowtmr+0x4f4>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	6a1b      	ldr	r3, [r3, #32]
 800eae4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	4b92      	ldr	r3, [pc, #584]	; (800ed40 <tcp_slowtmr+0x4f8>)
 800eaf6:	fb03 f300 	mul.w	r3, r3, r0
 800eafa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800eafc:	4991      	ldr	r1, [pc, #580]	; (800ed44 <tcp_slowtmr+0x4fc>)
 800eafe:	fba1 1303 	umull	r1, r3, r1, r3
 800eb02:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d910      	bls.n	800eb2a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800eb08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb0a:	f003 fdc2 	bl	8012692 <tcp_keepalive>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800eb12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d107      	bne.n	800eb2a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800eb20:	3301      	adds	r3, #1
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d016      	beq.n	800eb60 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800eb32:	4b82      	ldr	r3, [pc, #520]	; (800ed3c <tcp_slowtmr+0x4f4>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	1ad2      	subs	r2, r2, r3
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eb42:	4619      	mov	r1, r3
 800eb44:	460b      	mov	r3, r1
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	440b      	add	r3, r1
 800eb4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d307      	bcc.n	800eb60 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 fa04 	bl	800ef62 <tcp_segs_free>
      pcb->ooseq = NULL;
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	7d1b      	ldrb	r3, [r3, #20]
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d109      	bne.n	800eb7c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb68:	4b74      	ldr	r3, [pc, #464]	; (800ed3c <tcp_slowtmr+0x4f4>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	6a1b      	ldr	r3, [r3, #32]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	2b28      	cmp	r3, #40	; 0x28
 800eb74:	d902      	bls.n	800eb7c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eb76:	7ffb      	ldrb	r3, [r7, #31]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7e:	7d1b      	ldrb	r3, [r3, #20]
 800eb80:	2b09      	cmp	r3, #9
 800eb82:	d109      	bne.n	800eb98 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb84:	4b6d      	ldr	r3, [pc, #436]	; (800ed3c <tcp_slowtmr+0x4f4>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	2bf0      	cmp	r3, #240	; 0xf0
 800eb90:	d902      	bls.n	800eb98 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800eb92:	7ffb      	ldrb	r3, [r7, #31]
 800eb94:	3301      	adds	r3, #1
 800eb96:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb98:	7ffb      	ldrb	r3, [r7, #31]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d05d      	beq.n	800ec5a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eba4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eba8:	f000 fb84 	bl	800f2b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d010      	beq.n	800ebd4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ebb2:	4b65      	ldr	r3, [pc, #404]	; (800ed48 <tcp_slowtmr+0x500>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d106      	bne.n	800ebca <tcp_slowtmr+0x382>
 800ebbc:	4b63      	ldr	r3, [pc, #396]	; (800ed4c <tcp_slowtmr+0x504>)
 800ebbe:	f240 4289 	movw	r2, #1161	; 0x489
 800ebc2:	4963      	ldr	r1, [pc, #396]	; (800ed50 <tcp_slowtmr+0x508>)
 800ebc4:	4863      	ldr	r0, [pc, #396]	; (800ed54 <tcp_slowtmr+0x50c>)
 800ebc6:	f008 fe1f 	bl	8017808 <iprintf>
        prev->next = pcb->next;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	68da      	ldr	r2, [r3, #12]
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	60da      	str	r2, [r3, #12]
 800ebd2:	e00f      	b.n	800ebf4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ebd4:	4b5c      	ldr	r3, [pc, #368]	; (800ed48 <tcp_slowtmr+0x500>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d006      	beq.n	800ebec <tcp_slowtmr+0x3a4>
 800ebde:	4b5b      	ldr	r3, [pc, #364]	; (800ed4c <tcp_slowtmr+0x504>)
 800ebe0:	f240 428d 	movw	r2, #1165	; 0x48d
 800ebe4:	495c      	ldr	r1, [pc, #368]	; (800ed58 <tcp_slowtmr+0x510>)
 800ebe6:	485b      	ldr	r0, [pc, #364]	; (800ed54 <tcp_slowtmr+0x50c>)
 800ebe8:	f008 fe0e 	bl	8017808 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	4a55      	ldr	r2, [pc, #340]	; (800ed48 <tcp_slowtmr+0x500>)
 800ebf2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ebf4:	7fbb      	ldrb	r3, [r7, #30]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d010      	beq.n	800ec1c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ec02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	1d1d      	adds	r5, r3, #4
 800ec08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0a:	8adb      	ldrh	r3, [r3, #22]
 800ec0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec0e:	8b12      	ldrh	r2, [r2, #24]
 800ec10:	9201      	str	r2, [sp, #4]
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	462b      	mov	r3, r5
 800ec16:	4622      	mov	r2, r4
 800ec18:	f003 fbe6 	bl	80123e8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	7d1b      	ldrb	r3, [r3, #20]
 800ec26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	2001      	movs	r0, #1
 800ec36:	f7fe faa3 	bl	800d180 <memp_free>

      tcp_active_pcbs_changed = 0;
 800ec3a:	4b48      	ldr	r3, [pc, #288]	; (800ed5c <tcp_slowtmr+0x514>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d004      	beq.n	800ec50 <tcp_slowtmr+0x408>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f06f 010c 	mvn.w	r1, #12
 800ec4c:	68b8      	ldr	r0, [r7, #8]
 800ec4e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec50:	4b42      	ldr	r3, [pc, #264]	; (800ed5c <tcp_slowtmr+0x514>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d035      	beq.n	800ecc4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800ec58:	e606      	b.n	800e868 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	7edb      	ldrb	r3, [r3, #27]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	7eda      	ldrb	r2, [r3, #27]
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	7f1b      	ldrb	r3, [r3, #28]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d323      	bcc.n	800ecc4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ec82:	4b36      	ldr	r3, [pc, #216]	; (800ed5c <tcp_slowtmr+0x514>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00a      	beq.n	800eca8 <tcp_slowtmr+0x460>
 800ec92:	6a3b      	ldr	r3, [r7, #32]
 800ec94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec98:	6a3a      	ldr	r2, [r7, #32]
 800ec9a:	6912      	ldr	r2, [r2, #16]
 800ec9c:	6a39      	ldr	r1, [r7, #32]
 800ec9e:	4610      	mov	r0, r2
 800eca0:	4798      	blx	r3
 800eca2:	4603      	mov	r3, r0
 800eca4:	777b      	strb	r3, [r7, #29]
 800eca6:	e001      	b.n	800ecac <tcp_slowtmr+0x464>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800ecac:	4b2b      	ldr	r3, [pc, #172]	; (800ed5c <tcp_slowtmr+0x514>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d000      	beq.n	800ecb6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800ecb4:	e5d8      	b.n	800e868 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ecb6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d102      	bne.n	800ecc4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800ecbe:	6a38      	ldr	r0, [r7, #32]
 800ecc0:	f003 f908 	bl	8011ed4 <tcp_output>
  while (pcb != NULL) {
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f47f add4 	bne.w	800e874 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eccc:	2300      	movs	r3, #0
 800ecce:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800ecd0:	4b23      	ldr	r3, [pc, #140]	; (800ed60 <tcp_slowtmr+0x518>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ecd6:	e068      	b.n	800edaa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	2b0a      	cmp	r3, #10
 800ecde:	d006      	beq.n	800ecee <tcp_slowtmr+0x4a6>
 800ece0:	4b1a      	ldr	r3, [pc, #104]	; (800ed4c <tcp_slowtmr+0x504>)
 800ece2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ece6:	491f      	ldr	r1, [pc, #124]	; (800ed64 <tcp_slowtmr+0x51c>)
 800ece8:	481a      	ldr	r0, [pc, #104]	; (800ed54 <tcp_slowtmr+0x50c>)
 800ecea:	f008 fd8d 	bl	8017808 <iprintf>
    pcb_remove = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ecf2:	4b12      	ldr	r3, [pc, #72]	; (800ed3c <tcp_slowtmr+0x4f4>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	6a1b      	ldr	r3, [r3, #32]
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	2bf0      	cmp	r3, #240	; 0xf0
 800ecfe:	d902      	bls.n	800ed06 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800ed00:	7ffb      	ldrb	r3, [r7, #31]
 800ed02:	3301      	adds	r3, #1
 800ed04:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ed06:	7ffb      	ldrb	r3, [r7, #31]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d049      	beq.n	800eda0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ed0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed0e:	f000 fad1 	bl	800f2b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d029      	beq.n	800ed6c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ed18:	4b11      	ldr	r3, [pc, #68]	; (800ed60 <tcp_slowtmr+0x518>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d106      	bne.n	800ed30 <tcp_slowtmr+0x4e8>
 800ed22:	4b0a      	ldr	r3, [pc, #40]	; (800ed4c <tcp_slowtmr+0x504>)
 800ed24:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800ed28:	490f      	ldr	r1, [pc, #60]	; (800ed68 <tcp_slowtmr+0x520>)
 800ed2a:	480a      	ldr	r0, [pc, #40]	; (800ed54 <tcp_slowtmr+0x50c>)
 800ed2c:	f008 fd6c 	bl	8017808 <iprintf>
        prev->next = pcb->next;
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	68da      	ldr	r2, [r3, #12]
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	60da      	str	r2, [r3, #12]
 800ed38:	e028      	b.n	800ed8c <tcp_slowtmr+0x544>
 800ed3a:	bf00      	nop
 800ed3c:	20007994 	.word	0x20007994
 800ed40:	000124f8 	.word	0x000124f8
 800ed44:	10624dd3 	.word	0x10624dd3
 800ed48:	20007990 	.word	0x20007990
 800ed4c:	080191c0 	.word	0x080191c0
 800ed50:	0801941c 	.word	0x0801941c
 800ed54:	08019220 	.word	0x08019220
 800ed58:	08019448 	.word	0x08019448
 800ed5c:	2000798c 	.word	0x2000798c
 800ed60:	200079a0 	.word	0x200079a0
 800ed64:	08019474 	.word	0x08019474
 800ed68:	080194a4 	.word	0x080194a4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed6c:	4b12      	ldr	r3, [pc, #72]	; (800edb8 <tcp_slowtmr+0x570>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d006      	beq.n	800ed84 <tcp_slowtmr+0x53c>
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <tcp_slowtmr+0x574>)
 800ed78:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ed7c:	4910      	ldr	r1, [pc, #64]	; (800edc0 <tcp_slowtmr+0x578>)
 800ed7e:	4811      	ldr	r0, [pc, #68]	; (800edc4 <tcp_slowtmr+0x57c>)
 800ed80:	f008 fd42 	bl	8017808 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	4a0b      	ldr	r2, [pc, #44]	; (800edb8 <tcp_slowtmr+0x570>)
 800ed8a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ed96:	69b9      	ldr	r1, [r7, #24]
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7fe f9f1 	bl	800d180 <memp_free>
 800ed9e:	e004      	b.n	800edaa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d193      	bne.n	800ecd8 <tcp_slowtmr+0x490>
    }
  }
}
 800edb0:	bf00      	nop
 800edb2:	3728      	adds	r7, #40	; 0x28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bdb0      	pop	{r4, r5, r7, pc}
 800edb8:	200079a0 	.word	0x200079a0
 800edbc:	080191c0 	.word	0x080191c0
 800edc0:	080194cc 	.word	0x080194cc
 800edc4:	08019220 	.word	0x08019220

0800edc8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800edce:	4b2d      	ldr	r3, [pc, #180]	; (800ee84 <tcp_fasttmr+0xbc>)
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	3301      	adds	r3, #1
 800edd4:	b2da      	uxtb	r2, r3
 800edd6:	4b2b      	ldr	r3, [pc, #172]	; (800ee84 <tcp_fasttmr+0xbc>)
 800edd8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800edda:	4b2b      	ldr	r3, [pc, #172]	; (800ee88 <tcp_fasttmr+0xc0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ede0:	e048      	b.n	800ee74 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	7f5a      	ldrb	r2, [r3, #29]
 800ede6:	4b27      	ldr	r3, [pc, #156]	; (800ee84 <tcp_fasttmr+0xbc>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	429a      	cmp	r2, r3
 800edec:	d03f      	beq.n	800ee6e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800edee:	4b25      	ldr	r3, [pc, #148]	; (800ee84 <tcp_fasttmr+0xbc>)
 800edf0:	781a      	ldrb	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7e9b      	ldrb	r3, [r3, #26]
 800edfa:	f003 0301 	and.w	r3, r3, #1
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d010      	beq.n	800ee24 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	7e9b      	ldrb	r3, [r3, #26]
 800ee06:	f043 0302 	orr.w	r3, r3, #2
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f003 f85f 	bl	8011ed4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	7e9b      	ldrb	r3, [r3, #26]
 800ee1a:	f023 0303 	bic.w	r3, r3, #3
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7e9b      	ldrb	r3, [r3, #26]
 800ee28:	f003 0308 	and.w	r3, r3, #8
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d009      	beq.n	800ee44 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	7e9b      	ldrb	r3, [r3, #26]
 800ee34:	f023 0308 	bic.w	r3, r3, #8
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff fb1e 	bl	800e480 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00a      	beq.n	800ee68 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee52:	4b0e      	ldr	r3, [pc, #56]	; (800ee8c <tcp_fasttmr+0xc4>)
 800ee54:	2200      	movs	r2, #0
 800ee56:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 f819 	bl	800ee90 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee5e:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <tcp_fasttmr+0xc4>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d000      	beq.n	800ee68 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee66:	e7b8      	b.n	800edda <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	607b      	str	r3, [r7, #4]
 800ee6c:	e002      	b.n	800ee74 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1b3      	bne.n	800ede2 <tcp_fasttmr+0x1a>
    }
  }
}
 800ee7a:	bf00      	nop
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	200040b2 	.word	0x200040b2
 800ee88:	20007990 	.word	0x20007990
 800ee8c:	2000798c 	.word	0x2000798c

0800ee90 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee90:	b590      	push	{r4, r7, lr}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee9c:	7b5b      	ldrb	r3, [r3, #13]
 800ee9e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00b      	beq.n	800eece <tcp_process_refused_data+0x3e>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6918      	ldr	r0, [r3, #16]
 800eec0:	2300      	movs	r3, #0
 800eec2:	68ba      	ldr	r2, [r7, #8]
 800eec4:	6879      	ldr	r1, [r7, #4]
 800eec6:	47a0      	blx	r4
 800eec8:	4603      	mov	r3, r0
 800eeca:	73fb      	strb	r3, [r7, #15]
 800eecc:	e007      	b.n	800eede <tcp_process_refused_data+0x4e>
 800eece:	2300      	movs	r3, #0
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	2000      	movs	r0, #0
 800eed6:	f000 f88c 	bl	800eff2 <tcp_recv_null>
 800eeda:	4603      	mov	r3, r0
 800eedc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d12a      	bne.n	800ef3c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
 800eee8:	f003 0320 	and.w	r3, r3, #32
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d033      	beq.n	800ef58 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eef4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eef8:	d005      	beq.n	800ef06 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eefe:	3301      	adds	r3, #1
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <tcp_process_refused_data+0x98>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6918      	ldr	r0, [r3, #16]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	6879      	ldr	r1, [r7, #4]
 800ef20:	47a0      	blx	r4
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
 800ef26:	e001      	b.n	800ef2c <tcp_process_refused_data+0x9c>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ef2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef30:	f113 0f0d 	cmn.w	r3, #13
 800ef34:	d110      	bne.n	800ef58 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800ef36:	f06f 030c 	mvn.w	r3, #12
 800ef3a:	e00e      	b.n	800ef5a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800ef3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef40:	f113 0f0d 	cmn.w	r3, #13
 800ef44:	d102      	bne.n	800ef4c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ef46:	f06f 030c 	mvn.w	r3, #12
 800ef4a:	e006      	b.n	800ef5a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ef52:	f06f 0304 	mvn.w	r3, #4
 800ef56:	e000      	b.n	800ef5a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd90      	pop	{r4, r7, pc}

0800ef62 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef6a:	e007      	b.n	800ef7c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f809 	bl	800ef8a <tcp_seg_free>
    seg = next;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1f4      	bne.n	800ef6c <tcp_segs_free+0xa>
  }
}
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b082      	sub	sp, #8
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00c      	beq.n	800efb2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d004      	beq.n	800efaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fe8d 	bl	800dcc4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800efaa:	6879      	ldr	r1, [r7, #4]
 800efac:	2003      	movs	r0, #3
 800efae:	f7fe f8e7 	bl	800d180 <memp_free>
  }
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b084      	sub	sp, #16
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800efc2:	2003      	movs	r0, #3
 800efc4:	f7fe f866 	bl	800d094 <memp_malloc>
 800efc8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <tcp_seg_copy+0x1a>
    return NULL;
 800efd0:	2300      	movs	r3, #0
 800efd2:	e00a      	b.n	800efea <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800efd4:	2210      	movs	r2, #16
 800efd6:	6879      	ldr	r1, [r7, #4]
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f008 fc02 	bl	80177e2 <memcpy>
  pbuf_ref(cseg->p);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe ff20 	bl	800de28 <pbuf_ref>
  return cseg;
 800efe8:	68fb      	ldr	r3, [r7, #12]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b084      	sub	sp, #16
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	60b9      	str	r1, [r7, #8]
 800effc:	607a      	str	r2, [r7, #4]
 800effe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d009      	beq.n	800f01a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	891b      	ldrh	r3, [r3, #8]
 800f00a:	4619      	mov	r1, r3
 800f00c:	68b8      	ldr	r0, [r7, #8]
 800f00e:	f7ff fbc1 	bl	800e794 <tcp_recved>
    pbuf_free(p);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fe fe56 	bl	800dcc4 <pbuf_free>
 800f018:	e008      	b.n	800f02c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800f01a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d104      	bne.n	800f02c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800f022:	68b8      	ldr	r0, [r7, #8]
 800f024:	f7ff fa92 	bl	800e54c <tcp_close>
 800f028:	4603      	mov	r3, r0
 800f02a:	e000      	b.n	800f02e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
	...

0800f038 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f046:	2b00      	cmp	r3, #0
 800f048:	db01      	blt.n	800f04e <tcp_kill_prio+0x16>
 800f04a:	79fb      	ldrb	r3, [r7, #7]
 800f04c:	e000      	b.n	800f050 <tcp_kill_prio+0x18>
 800f04e:	237f      	movs	r3, #127	; 0x7f
 800f050:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f056:	2300      	movs	r3, #0
 800f058:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f05a:	4b16      	ldr	r3, [pc, #88]	; (800f0b4 <tcp_kill_prio+0x7c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	617b      	str	r3, [r7, #20]
 800f060:	e01a      	b.n	800f098 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	7d5b      	ldrb	r3, [r3, #21]
 800f066:	7afa      	ldrb	r2, [r7, #11]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d312      	bcc.n	800f092 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f06c:	4b12      	ldr	r3, [pc, #72]	; (800f0b8 <tcp_kill_prio+0x80>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d80a      	bhi.n	800f092 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800f07c:	4b0e      	ldr	r3, [pc, #56]	; (800f0b8 <tcp_kill_prio+0x80>)
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	6a1b      	ldr	r3, [r3, #32]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	7d5b      	ldrb	r3, [r3, #21]
 800f090:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e1      	bne.n	800f062 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d002      	beq.n	800f0aa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f0a4:	6938      	ldr	r0, [r7, #16]
 800f0a6:	f7ff fb1b 	bl	800e6e0 <tcp_abort>
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20007990 	.word	0x20007990
 800f0b8:	20007994 	.word	0x20007994

0800f0bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b086      	sub	sp, #24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	2b08      	cmp	r3, #8
 800f0ca:	d009      	beq.n	800f0e0 <tcp_kill_state+0x24>
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	2b09      	cmp	r3, #9
 800f0d0:	d006      	beq.n	800f0e0 <tcp_kill_state+0x24>
 800f0d2:	4b1a      	ldr	r3, [pc, #104]	; (800f13c <tcp_kill_state+0x80>)
 800f0d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f0d8:	4919      	ldr	r1, [pc, #100]	; (800f140 <tcp_kill_state+0x84>)
 800f0da:	481a      	ldr	r0, [pc, #104]	; (800f144 <tcp_kill_state+0x88>)
 800f0dc:	f008 fb94 	bl	8017808 <iprintf>

  inactivity = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0e8:	4b17      	ldr	r3, [pc, #92]	; (800f148 <tcp_kill_state+0x8c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	617b      	str	r3, [r7, #20]
 800f0ee:	e017      	b.n	800f120 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	79fa      	ldrb	r2, [r7, #7]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d10f      	bne.n	800f11a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f0fa:	4b14      	ldr	r3, [pc, #80]	; (800f14c <tcp_kill_state+0x90>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	429a      	cmp	r2, r3
 800f108:	d807      	bhi.n	800f11a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <tcp_kill_state+0x90>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	617b      	str	r3, [r7, #20]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e4      	bne.n	800f0f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d003      	beq.n	800f134 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f12c:	2100      	movs	r1, #0
 800f12e:	6938      	ldr	r0, [r7, #16]
 800f130:	f7ff fa24 	bl	800e57c <tcp_abandon>
  }
}
 800f134:	bf00      	nop
 800f136:	3718      	adds	r7, #24
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	080191c0 	.word	0x080191c0
 800f140:	080194f4 	.word	0x080194f4
 800f144:	08019220 	.word	0x08019220
 800f148:	20007990 	.word	0x20007990
 800f14c:	20007994 	.word	0x20007994

0800f150 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f15e:	4b12      	ldr	r3, [pc, #72]	; (800f1a8 <tcp_kill_timewait+0x58>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e012      	b.n	800f18c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f166:	4b11      	ldr	r3, [pc, #68]	; (800f1ac <tcp_kill_timewait+0x5c>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	429a      	cmp	r2, r3
 800f174:	d807      	bhi.n	800f186 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f176:	4b0d      	ldr	r3, [pc, #52]	; (800f1ac <tcp_kill_timewait+0x5c>)
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1e9      	bne.n	800f166 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	f7ff faa1 	bl	800e6e0 <tcp_abort>
  }
}
 800f19e:	bf00      	nop
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	200079a0 	.word	0x200079a0
 800f1ac:	20007994 	.word	0x20007994

0800f1b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f7fd ff6a 	bl	800d094 <memp_malloc>
 800f1c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d124      	bne.n	800f212 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f1c8:	f7ff ffc2 	bl	800f150 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	f7fd ff61 	bl	800d094 <memp_malloc>
 800f1d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d11b      	bne.n	800f212 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f1da:	2009      	movs	r0, #9
 800f1dc:	f7ff ff6e 	bl	800f0bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	f7fd ff57 	bl	800d094 <memp_malloc>
 800f1e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d111      	bne.n	800f212 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f1ee:	2008      	movs	r0, #8
 800f1f0:	f7ff ff64 	bl	800f0bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	f7fd ff4d 	bl	800d094 <memp_malloc>
 800f1fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d107      	bne.n	800f212 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff ff17 	bl	800f038 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f20a:	2001      	movs	r0, #1
 800f20c:	f7fd ff42 	bl	800d094 <memp_malloc>
 800f210:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d03f      	beq.n	800f298 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f218:	2298      	movs	r2, #152	; 0x98
 800f21a:	2100      	movs	r1, #0
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f008 faeb 	bl	80177f8 <memset>
    pcb->prio = prio;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	79fa      	ldrb	r2, [r7, #7]
 800f226:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f22e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	22ff      	movs	r2, #255	; 0xff
 800f246:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f24e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2206      	movs	r2, #6
 800f254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2206      	movs	r2, #6
 800f25c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f264:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2201      	movs	r2, #1
 800f26a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f26e:	4b0d      	ldr	r3, [pc, #52]	; (800f2a4 <tcp_alloc+0xf4>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f276:	4b0c      	ldr	r3, [pc, #48]	; (800f2a8 <tcp_alloc+0xf8>)
 800f278:	781a      	ldrb	r2, [r3, #0]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f284:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	4a08      	ldr	r2, [pc, #32]	; (800f2ac <tcp_alloc+0xfc>)
 800f28c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4a07      	ldr	r2, [pc, #28]	; (800f2b0 <tcp_alloc+0x100>)
 800f294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f298:	68fb      	ldr	r3, [r7, #12]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20007994 	.word	0x20007994
 800f2a8:	200040b2 	.word	0x200040b2
 800f2ac:	0800eff3 	.word	0x0800eff3
 800f2b0:	006ddd00 	.word	0x006ddd00

0800f2b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	7d1b      	ldrb	r3, [r3, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d034      	beq.n	800f32e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f2c8:	2b0a      	cmp	r3, #10
 800f2ca:	d030      	beq.n	800f32e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d02c      	beq.n	800f32e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d007      	beq.n	800f2ec <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fe fcef 	bl	800dcc4 <pbuf_free>
      pcb->refused_data = NULL;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fe36 	bl	800ef62 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f302:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fe2a 	bl	800ef62 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff fe25 	bl	800ef62 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	669a      	str	r2, [r3, #104]	; 0x68
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f32e:	bf00      	nop
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
	...

0800f338 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d105      	bne.n	800f358 <tcp_pcb_remove+0x20>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68da      	ldr	r2, [r3, #12]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	e013      	b.n	800f380 <tcp_pcb_remove+0x48>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	e00c      	b.n	800f37a <tcp_pcb_remove+0x42>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d104      	bne.n	800f374 <tcp_pcb_remove+0x3c>
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	60da      	str	r2, [r3, #12]
 800f372:	e005      	b.n	800f380 <tcp_pcb_remove+0x48>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	60fb      	str	r3, [r7, #12]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1ef      	bne.n	800f360 <tcp_pcb_remove+0x28>
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2200      	movs	r2, #0
 800f384:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f386:	6838      	ldr	r0, [r7, #0]
 800f388:	f7ff ff94 	bl	800f2b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	2b0a      	cmp	r3, #10
 800f392:	d013      	beq.n	800f3bc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d00f      	beq.n	800f3bc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	7e9b      	ldrb	r3, [r3, #26]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d009      	beq.n	800f3bc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	7e9b      	ldrb	r3, [r3, #26]
 800f3ac:	f043 0302 	orr.w	r3, r3, #2
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f3b6:	6838      	ldr	r0, [r7, #0]
 800f3b8:	f002 fd8c 	bl	8011ed4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d020      	beq.n	800f406 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d006      	beq.n	800f3da <tcp_pcb_remove+0xa2>
 800f3cc:	4b13      	ldr	r3, [pc, #76]	; (800f41c <tcp_pcb_remove+0xe4>)
 800f3ce:	f240 7253 	movw	r2, #1875	; 0x753
 800f3d2:	4913      	ldr	r1, [pc, #76]	; (800f420 <tcp_pcb_remove+0xe8>)
 800f3d4:	4813      	ldr	r0, [pc, #76]	; (800f424 <tcp_pcb_remove+0xec>)
 800f3d6:	f008 fa17 	bl	8017808 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <tcp_pcb_remove+0xb8>
 800f3e2:	4b0e      	ldr	r3, [pc, #56]	; (800f41c <tcp_pcb_remove+0xe4>)
 800f3e4:	f240 7254 	movw	r2, #1876	; 0x754
 800f3e8:	490f      	ldr	r1, [pc, #60]	; (800f428 <tcp_pcb_remove+0xf0>)
 800f3ea:	480e      	ldr	r0, [pc, #56]	; (800f424 <tcp_pcb_remove+0xec>)
 800f3ec:	f008 fa0c 	bl	8017808 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d006      	beq.n	800f406 <tcp_pcb_remove+0xce>
 800f3f8:	4b08      	ldr	r3, [pc, #32]	; (800f41c <tcp_pcb_remove+0xe4>)
 800f3fa:	f240 7256 	movw	r2, #1878	; 0x756
 800f3fe:	490b      	ldr	r1, [pc, #44]	; (800f42c <tcp_pcb_remove+0xf4>)
 800f400:	4808      	ldr	r0, [pc, #32]	; (800f424 <tcp_pcb_remove+0xec>)
 800f402:	f008 fa01 	bl	8017808 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2200      	movs	r2, #0
 800f40a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	2200      	movs	r2, #0
 800f410:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f412:	bf00      	nop
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	080191c0 	.word	0x080191c0
 800f420:	0801959c 	.word	0x0801959c
 800f424:	08019220 	.word	0x08019220
 800f428:	080195b4 	.word	0x080195b4
 800f42c:	080195d0 	.word	0x080195d0

0800f430 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f438:	4b07      	ldr	r3, [pc, #28]	; (800f458 <tcp_next_iss+0x28>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	4b07      	ldr	r3, [pc, #28]	; (800f45c <tcp_next_iss+0x2c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4413      	add	r3, r2
 800f442:	4a05      	ldr	r2, [pc, #20]	; (800f458 <tcp_next_iss+0x28>)
 800f444:	6013      	str	r3, [r2, #0]
  return iss;
 800f446:	4b04      	ldr	r3, [pc, #16]	; (800f458 <tcp_next_iss+0x28>)
 800f448:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop
 800f458:	20000028 	.word	0x20000028
 800f45c:	20007994 	.word	0x20007994

0800f460 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	6039      	str	r1, [r7, #0]
 800f46a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f46c:	6838      	ldr	r0, [r7, #0]
 800f46e:	f006 fed7 	bl	8016220 <ip4_route>
 800f472:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f47a:	88fb      	ldrh	r3, [r7, #6]
 800f47c:	e010      	b.n	800f4a0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f482:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d008      	beq.n	800f49e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f48c:	897b      	ldrh	r3, [r7, #10]
 800f48e:	3b28      	subs	r3, #40	; 0x28
 800f490:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f492:	893a      	ldrh	r2, [r7, #8]
 800f494:	88fb      	ldrh	r3, [r7, #6]
 800f496:	4293      	cmp	r3, r2
 800f498:	bf28      	it	cs
 800f49a:	4613      	movcs	r3, r2
 800f49c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f49e:	88fb      	ldrh	r3, [r7, #6]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f4b6:	e011      	b.n	800f4dc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d108      	bne.n	800f4d6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff f908 	bl	800e6e0 <tcp_abort>
      pcb = next;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	e002      	b.n	800f4dc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1ea      	bne.n	800f4b8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f4e2:	bf00      	nop
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
	...

0800f4ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d02c      	beq.n	800f556 <tcp_netif_ip_addr_changed+0x6a>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d028      	beq.n	800f556 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f504:	4b16      	ldr	r3, [pc, #88]	; (800f560 <tcp_netif_ip_addr_changed+0x74>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff ffcc 	bl	800f4a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f510:	4b14      	ldr	r3, [pc, #80]	; (800f564 <tcp_netif_ip_addr_changed+0x78>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff ffc6 	bl	800f4a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d019      	beq.n	800f556 <tcp_netif_ip_addr_changed+0x6a>
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d015      	beq.n	800f556 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f52a:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <tcp_netif_ip_addr_changed+0x7c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	60fb      	str	r3, [r7, #12]
 800f530:	e00e      	b.n	800f550 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	d103      	bne.n	800f54c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1ed      	bne.n	800f532 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f556:	bf00      	nop
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20007990 	.word	0x20007990
 800f564:	2000799c 	.word	0x2000799c
 800f568:	20007998 	.word	0x20007998

0800f56c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f56c:	b590      	push	{r4, r7, lr}
 800f56e:	b08b      	sub	sp, #44	; 0x2c
 800f570:	af02      	add	r7, sp, #8
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	4a82      	ldr	r2, [pc, #520]	; (800f784 <tcp_input+0x218>)
 800f57c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	895b      	ldrh	r3, [r3, #10]
 800f582:	2b13      	cmp	r3, #19
 800f584:	f240 838a 	bls.w	800fc9c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f588:	4b7f      	ldr	r3, [pc, #508]	; (800f788 <tcp_input+0x21c>)
 800f58a:	695a      	ldr	r2, [r3, #20]
 800f58c:	4b7e      	ldr	r3, [pc, #504]	; (800f788 <tcp_input+0x21c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f007 f8dc 	bl	8016750 <ip4_addr_isbroadcast_u32>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f040 8380 	bne.w	800fca0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f5a0:	4b79      	ldr	r3, [pc, #484]	; (800f788 <tcp_input+0x21c>)
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5a8:	2be0      	cmp	r3, #224	; 0xe0
 800f5aa:	f000 8379 	beq.w	800fca0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f5ae:	4b75      	ldr	r3, [pc, #468]	; (800f784 <tcp_input+0x218>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	899b      	ldrh	r3, [r3, #12]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd f960 	bl	800c87c <lwip_htons>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	0b1b      	lsrs	r3, r3, #12
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5c8:	7cbb      	ldrb	r3, [r7, #18]
 800f5ca:	2b13      	cmp	r3, #19
 800f5cc:	f240 8368 	bls.w	800fca0 <tcp_input+0x734>
 800f5d0:	7cbb      	ldrb	r3, [r7, #18]
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	891b      	ldrh	r3, [r3, #8]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	f200 8361 	bhi.w	800fca0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f5de:	7cbb      	ldrb	r3, [r7, #18]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	3b14      	subs	r3, #20
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	4b69      	ldr	r3, [pc, #420]	; (800f78c <tcp_input+0x220>)
 800f5e8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5ea:	4b69      	ldr	r3, [pc, #420]	; (800f790 <tcp_input+0x224>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	895a      	ldrh	r2, [r3, #10]
 800f5f4:	7cbb      	ldrb	r3, [r7, #18]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d30d      	bcc.n	800f618 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5fc:	4b63      	ldr	r3, [pc, #396]	; (800f78c <tcp_input+0x220>)
 800f5fe:	881a      	ldrh	r2, [r3, #0]
 800f600:	4b64      	ldr	r3, [pc, #400]	; (800f794 <tcp_input+0x228>)
 800f602:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f604:	7cbb      	ldrb	r3, [r7, #18]
 800f606:	b29b      	uxth	r3, r3
 800f608:	425b      	negs	r3, r3
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	b21b      	sxth	r3, r3
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fe fb33 	bl	800dc7c <pbuf_header>
 800f616:	e055      	b.n	800f6c4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d105      	bne.n	800f62c <tcp_input+0xc0>
 800f620:	4b5d      	ldr	r3, [pc, #372]	; (800f798 <tcp_input+0x22c>)
 800f622:	22b2      	movs	r2, #178	; 0xb2
 800f624:	495d      	ldr	r1, [pc, #372]	; (800f79c <tcp_input+0x230>)
 800f626:	485e      	ldr	r0, [pc, #376]	; (800f7a0 <tcp_input+0x234>)
 800f628:	f008 f8ee 	bl	8017808 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f62c:	f06f 0113 	mvn.w	r1, #19
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7fe fb23 	bl	800dc7c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	895a      	ldrh	r2, [r3, #10]
 800f63a:	4b56      	ldr	r3, [pc, #344]	; (800f794 <tcp_input+0x228>)
 800f63c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f63e:	4b53      	ldr	r3, [pc, #332]	; (800f78c <tcp_input+0x220>)
 800f640:	881a      	ldrh	r2, [r3, #0]
 800f642:	4b54      	ldr	r3, [pc, #336]	; (800f794 <tcp_input+0x228>)
 800f644:	881b      	ldrh	r3, [r3, #0]
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f64a:	4b52      	ldr	r3, [pc, #328]	; (800f794 <tcp_input+0x228>)
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	425b      	negs	r3, r3
 800f650:	b29b      	uxth	r3, r3
 800f652:	b21b      	sxth	r3, r3
 800f654:	4619      	mov	r1, r3
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7fe fb10 	bl	800dc7c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	895b      	ldrh	r3, [r3, #10]
 800f662:	8a3a      	ldrh	r2, [r7, #16]
 800f664:	429a      	cmp	r2, r3
 800f666:	f200 831d 	bhi.w	800fca4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	4a47      	ldr	r2, [pc, #284]	; (800f790 <tcp_input+0x224>)
 800f672:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	8a3b      	ldrh	r3, [r7, #16]
 800f67a:	425b      	negs	r3, r3
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	b21b      	sxth	r3, r3
 800f680:	4619      	mov	r1, r3
 800f682:	4610      	mov	r0, r2
 800f684:	f7fe fafa 	bl	800dc7c <pbuf_header>
    p->tot_len -= opt2len;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	891a      	ldrh	r2, [r3, #8]
 800f68c:	8a3b      	ldrh	r3, [r7, #16]
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	b29a      	uxth	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	895b      	ldrh	r3, [r3, #10]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d005      	beq.n	800f6aa <tcp_input+0x13e>
 800f69e:	4b3e      	ldr	r3, [pc, #248]	; (800f798 <tcp_input+0x22c>)
 800f6a0:	22cf      	movs	r2, #207	; 0xcf
 800f6a2:	4940      	ldr	r1, [pc, #256]	; (800f7a4 <tcp_input+0x238>)
 800f6a4:	483e      	ldr	r0, [pc, #248]	; (800f7a0 <tcp_input+0x234>)
 800f6a6:	f008 f8af 	bl	8017808 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	891a      	ldrh	r2, [r3, #8]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	891b      	ldrh	r3, [r3, #8]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d005      	beq.n	800f6c4 <tcp_input+0x158>
 800f6b8:	4b37      	ldr	r3, [pc, #220]	; (800f798 <tcp_input+0x22c>)
 800f6ba:	22d0      	movs	r2, #208	; 0xd0
 800f6bc:	493a      	ldr	r1, [pc, #232]	; (800f7a8 <tcp_input+0x23c>)
 800f6be:	4838      	ldr	r0, [pc, #224]	; (800f7a0 <tcp_input+0x234>)
 800f6c0:	f008 f8a2 	bl	8017808 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f6c4:	4b2f      	ldr	r3, [pc, #188]	; (800f784 <tcp_input+0x218>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	4b2d      	ldr	r3, [pc, #180]	; (800f784 <tcp_input+0x218>)
 800f6ce:	681c      	ldr	r4, [r3, #0]
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	f7fd f8d3 	bl	800c87c <lwip_htons>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f6da:	4b2a      	ldr	r3, [pc, #168]	; (800f784 <tcp_input+0x218>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	885b      	ldrh	r3, [r3, #2]
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	4b28      	ldr	r3, [pc, #160]	; (800f784 <tcp_input+0x218>)
 800f6e4:	681c      	ldr	r4, [r3, #0]
 800f6e6:	4610      	mov	r0, r2
 800f6e8:	f7fd f8c8 	bl	800c87c <lwip_htons>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6f0:	4b24      	ldr	r3, [pc, #144]	; (800f784 <tcp_input+0x218>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685a      	ldr	r2, [r3, #4]
 800f6f6:	4b23      	ldr	r3, [pc, #140]	; (800f784 <tcp_input+0x218>)
 800f6f8:	681c      	ldr	r4, [r3, #0]
 800f6fa:	4610      	mov	r0, r2
 800f6fc:	f7fd f8cc 	bl	800c898 <lwip_htonl>
 800f700:	4603      	mov	r3, r0
 800f702:	6063      	str	r3, [r4, #4]
 800f704:	6863      	ldr	r3, [r4, #4]
 800f706:	4a29      	ldr	r2, [pc, #164]	; (800f7ac <tcp_input+0x240>)
 800f708:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f70a:	4b1e      	ldr	r3, [pc, #120]	; (800f784 <tcp_input+0x218>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	689a      	ldr	r2, [r3, #8]
 800f710:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <tcp_input+0x218>)
 800f712:	681c      	ldr	r4, [r3, #0]
 800f714:	4610      	mov	r0, r2
 800f716:	f7fd f8bf 	bl	800c898 <lwip_htonl>
 800f71a:	4603      	mov	r3, r0
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	68a3      	ldr	r3, [r4, #8]
 800f720:	4a23      	ldr	r2, [pc, #140]	; (800f7b0 <tcp_input+0x244>)
 800f722:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f724:	4b17      	ldr	r3, [pc, #92]	; (800f784 <tcp_input+0x218>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	89db      	ldrh	r3, [r3, #14]
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	4b15      	ldr	r3, [pc, #84]	; (800f784 <tcp_input+0x218>)
 800f72e:	681c      	ldr	r4, [r3, #0]
 800f730:	4610      	mov	r0, r2
 800f732:	f7fd f8a3 	bl	800c87c <lwip_htons>
 800f736:	4603      	mov	r3, r0
 800f738:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f73a:	4b12      	ldr	r3, [pc, #72]	; (800f784 <tcp_input+0x218>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	899b      	ldrh	r3, [r3, #12]
 800f740:	b29b      	uxth	r3, r3
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd f89a 	bl	800c87c <lwip_htons>
 800f748:	4603      	mov	r3, r0
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f750:	b2da      	uxtb	r2, r3
 800f752:	4b18      	ldr	r3, [pc, #96]	; (800f7b4 <tcp_input+0x248>)
 800f754:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	891a      	ldrh	r2, [r3, #8]
 800f75a:	4b16      	ldr	r3, [pc, #88]	; (800f7b4 <tcp_input+0x248>)
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	f003 0303 	and.w	r3, r3, #3
 800f762:	2b00      	cmp	r3, #0
 800f764:	bf14      	ite	ne
 800f766:	2301      	movne	r3, #1
 800f768:	2300      	moveq	r3, #0
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4413      	add	r3, r2
 800f770:	b29a      	uxth	r2, r3
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <tcp_input+0x24c>)
 800f774:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f77a:	4b10      	ldr	r3, [pc, #64]	; (800f7bc <tcp_input+0x250>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	e082      	b.n	800f888 <tcp_input+0x31c>
 800f782:	bf00      	nop
 800f784:	200040c4 	.word	0x200040c4
 800f788:	200048b4 	.word	0x200048b4
 800f78c:	200040c8 	.word	0x200040c8
 800f790:	200040cc 	.word	0x200040cc
 800f794:	200040ca 	.word	0x200040ca
 800f798:	080195e8 	.word	0x080195e8
 800f79c:	08019640 	.word	0x08019640
 800f7a0:	08019650 	.word	0x08019650
 800f7a4:	08019678 	.word	0x08019678
 800f7a8:	08019684 	.word	0x08019684
 800f7ac:	200040d4 	.word	0x200040d4
 800f7b0:	200040d8 	.word	0x200040d8
 800f7b4:	200040e0 	.word	0x200040e0
 800f7b8:	200040de 	.word	0x200040de
 800f7bc:	20007990 	.word	0x20007990
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d105      	bne.n	800f7d4 <tcp_input+0x268>
 800f7c8:	4b8f      	ldr	r3, [pc, #572]	; (800fa08 <tcp_input+0x49c>)
 800f7ca:	22e2      	movs	r2, #226	; 0xe2
 800f7cc:	498f      	ldr	r1, [pc, #572]	; (800fa0c <tcp_input+0x4a0>)
 800f7ce:	4890      	ldr	r0, [pc, #576]	; (800fa10 <tcp_input+0x4a4>)
 800f7d0:	f008 f81a 	bl	8017808 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	7d1b      	ldrb	r3, [r3, #20]
 800f7d8:	2b0a      	cmp	r3, #10
 800f7da:	d105      	bne.n	800f7e8 <tcp_input+0x27c>
 800f7dc:	4b8a      	ldr	r3, [pc, #552]	; (800fa08 <tcp_input+0x49c>)
 800f7de:	22e3      	movs	r2, #227	; 0xe3
 800f7e0:	498c      	ldr	r1, [pc, #560]	; (800fa14 <tcp_input+0x4a8>)
 800f7e2:	488b      	ldr	r0, [pc, #556]	; (800fa10 <tcp_input+0x4a4>)
 800f7e4:	f008 f810 	bl	8017808 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	7d1b      	ldrb	r3, [r3, #20]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d105      	bne.n	800f7fc <tcp_input+0x290>
 800f7f0:	4b85      	ldr	r3, [pc, #532]	; (800fa08 <tcp_input+0x49c>)
 800f7f2:	22e4      	movs	r2, #228	; 0xe4
 800f7f4:	4988      	ldr	r1, [pc, #544]	; (800fa18 <tcp_input+0x4ac>)
 800f7f6:	4886      	ldr	r0, [pc, #536]	; (800fa10 <tcp_input+0x4a4>)
 800f7f8:	f008 f806 	bl	8017808 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	8b1a      	ldrh	r2, [r3, #24]
 800f800:	4b86      	ldr	r3, [pc, #536]	; (800fa1c <tcp_input+0x4b0>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	b29b      	uxth	r3, r3
 800f808:	429a      	cmp	r2, r3
 800f80a:	d138      	bne.n	800f87e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	8ada      	ldrh	r2, [r3, #22]
 800f810:	4b82      	ldr	r3, [pc, #520]	; (800fa1c <tcp_input+0x4b0>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	885b      	ldrh	r3, [r3, #2]
 800f816:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f818:	429a      	cmp	r2, r3
 800f81a:	d130      	bne.n	800f87e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	685a      	ldr	r2, [r3, #4]
 800f820:	4b7f      	ldr	r3, [pc, #508]	; (800fa20 <tcp_input+0x4b4>)
 800f822:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f824:	429a      	cmp	r2, r3
 800f826:	d12a      	bne.n	800f87e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	4b7c      	ldr	r3, [pc, #496]	; (800fa20 <tcp_input+0x4b4>)
 800f82e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f830:	429a      	cmp	r2, r3
 800f832:	d124      	bne.n	800f87e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	69fa      	ldr	r2, [r7, #28]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d105      	bne.n	800f84a <tcp_input+0x2de>
 800f83e:	4b72      	ldr	r3, [pc, #456]	; (800fa08 <tcp_input+0x49c>)
 800f840:	22ec      	movs	r2, #236	; 0xec
 800f842:	4978      	ldr	r1, [pc, #480]	; (800fa24 <tcp_input+0x4b8>)
 800f844:	4872      	ldr	r0, [pc, #456]	; (800fa10 <tcp_input+0x4a4>)
 800f846:	f007 ffdf 	bl	8017808 <iprintf>
      if (prev != NULL) {
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00a      	beq.n	800f866 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	68da      	ldr	r2, [r3, #12]
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f858:	4b73      	ldr	r3, [pc, #460]	; (800fa28 <tcp_input+0x4bc>)
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f860:	4a71      	ldr	r2, [pc, #452]	; (800fa28 <tcp_input+0x4bc>)
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	69fa      	ldr	r2, [r7, #28]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d10f      	bne.n	800f890 <tcp_input+0x324>
 800f870:	4b65      	ldr	r3, [pc, #404]	; (800fa08 <tcp_input+0x49c>)
 800f872:	22f4      	movs	r2, #244	; 0xf4
 800f874:	496d      	ldr	r1, [pc, #436]	; (800fa2c <tcp_input+0x4c0>)
 800f876:	4866      	ldr	r0, [pc, #408]	; (800fa10 <tcp_input+0x4a4>)
 800f878:	f007 ffc6 	bl	8017808 <iprintf>
      break;
 800f87c:	e008      	b.n	800f890 <tcp_input+0x324>
    }
    prev = pcb;
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	61fb      	str	r3, [r7, #28]
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d198      	bne.n	800f7c0 <tcp_input+0x254>
 800f88e:	e000      	b.n	800f892 <tcp_input+0x326>
      break;
 800f890:	bf00      	nop
  }

  if (pcb == NULL) {
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d173      	bne.n	800f980 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f898:	4b65      	ldr	r3, [pc, #404]	; (800fa30 <tcp_input+0x4c4>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	61fb      	str	r3, [r7, #28]
 800f89e:	e02f      	b.n	800f900 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	7d1b      	ldrb	r3, [r3, #20]
 800f8a4:	2b0a      	cmp	r3, #10
 800f8a6:	d005      	beq.n	800f8b4 <tcp_input+0x348>
 800f8a8:	4b57      	ldr	r3, [pc, #348]	; (800fa08 <tcp_input+0x49c>)
 800f8aa:	22fe      	movs	r2, #254	; 0xfe
 800f8ac:	4961      	ldr	r1, [pc, #388]	; (800fa34 <tcp_input+0x4c8>)
 800f8ae:	4858      	ldr	r0, [pc, #352]	; (800fa10 <tcp_input+0x4a4>)
 800f8b0:	f007 ffaa 	bl	8017808 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	8b1a      	ldrh	r2, [r3, #24]
 800f8b8:	4b58      	ldr	r3, [pc, #352]	; (800fa1c <tcp_input+0x4b0>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d11a      	bne.n	800f8fa <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	8ada      	ldrh	r2, [r3, #22]
 800f8c8:	4b54      	ldr	r3, [pc, #336]	; (800fa1c <tcp_input+0x4b0>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	885b      	ldrh	r3, [r3, #2]
 800f8ce:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d112      	bne.n	800f8fa <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	685a      	ldr	r2, [r3, #4]
 800f8d8:	4b51      	ldr	r3, [pc, #324]	; (800fa20 <tcp_input+0x4b4>)
 800f8da:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d10c      	bne.n	800f8fa <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	4b4e      	ldr	r3, [pc, #312]	; (800fa20 <tcp_input+0x4b4>)
 800f8e6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d106      	bne.n	800f8fa <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f8ec:	69f8      	ldr	r0, [r7, #28]
 800f8ee:	f000 fb15 	bl	800ff1c <tcp_timewait_input>
        pbuf_free(p);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fe f9e6 	bl	800dcc4 <pbuf_free>
        return;
 800f8f8:	e1da      	b.n	800fcb0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	61fb      	str	r3, [r7, #28]
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1cc      	bne.n	800f8a0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f906:	2300      	movs	r3, #0
 800f908:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f90a:	4b4b      	ldr	r3, [pc, #300]	; (800fa38 <tcp_input+0x4cc>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	617b      	str	r3, [r7, #20]
 800f910:	e019      	b.n	800f946 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	8ada      	ldrh	r2, [r3, #22]
 800f916:	4b41      	ldr	r3, [pc, #260]	; (800fa1c <tcp_input+0x4b0>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	885b      	ldrh	r3, [r3, #2]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	429a      	cmp	r2, r3
 800f920:	d10c      	bne.n	800f93c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	4b3e      	ldr	r3, [pc, #248]	; (800fa20 <tcp_input+0x4b4>)
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d00f      	beq.n	800f94e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00d      	beq.n	800f950 <tcp_input+0x3e4>
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d009      	beq.n	800f950 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	617b      	str	r3, [r7, #20]
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1e2      	bne.n	800f912 <tcp_input+0x3a6>
 800f94c:	e000      	b.n	800f950 <tcp_input+0x3e4>
            break;
 800f94e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d014      	beq.n	800f980 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00a      	beq.n	800f972 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	68da      	ldr	r2, [r3, #12]
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f964:	4b34      	ldr	r3, [pc, #208]	; (800fa38 <tcp_input+0x4cc>)
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f96c:	4a32      	ldr	r2, [pc, #200]	; (800fa38 <tcp_input+0x4cc>)
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f972:	6978      	ldr	r0, [r7, #20]
 800f974:	f000 f9f0 	bl	800fd58 <tcp_listen_input>
      pbuf_free(p);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7fe f9a3 	bl	800dcc4 <pbuf_free>
      return;
 800f97e:	e197      	b.n	800fcb0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	2b00      	cmp	r3, #0
 800f984:	f000 8164 	beq.w	800fc50 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f988:	4b2c      	ldr	r3, [pc, #176]	; (800fa3c <tcp_input+0x4d0>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	891a      	ldrh	r2, [r3, #8]
 800f992:	4b2a      	ldr	r3, [pc, #168]	; (800fa3c <tcp_input+0x4d0>)
 800f994:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f996:	4a29      	ldr	r2, [pc, #164]	; (800fa3c <tcp_input+0x4d0>)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f99c:	4b1f      	ldr	r3, [pc, #124]	; (800fa1c <tcp_input+0x4b0>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a26      	ldr	r2, [pc, #152]	; (800fa3c <tcp_input+0x4d0>)
 800f9a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f9a4:	4b26      	ldr	r3, [pc, #152]	; (800fa40 <tcp_input+0x4d4>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f9aa:	4b26      	ldr	r3, [pc, #152]	; (800fa44 <tcp_input+0x4d8>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f9b0:	4b25      	ldr	r3, [pc, #148]	; (800fa48 <tcp_input+0x4dc>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f9b6:	4b25      	ldr	r3, [pc, #148]	; (800fa4c <tcp_input+0x4e0>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	f003 0308 	and.w	r3, r3, #8
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d006      	beq.n	800f9d0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	7b5b      	ldrb	r3, [r3, #13]
 800f9c6:	f043 0301 	orr.w	r3, r3, #1
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d03d      	beq.n	800fa54 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f9d8:	69f8      	ldr	r0, [r7, #28]
 800f9da:	f7ff fa59 	bl	800ee90 <tcp_process_refused_data>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f113 0f0d 	cmn.w	r3, #13
 800f9e4:	d007      	beq.n	800f9f6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d032      	beq.n	800fa54 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f9ee:	4b18      	ldr	r3, [pc, #96]	; (800fa50 <tcp_input+0x4e4>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d02e      	beq.n	800fa54 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f040 8108 	bne.w	800fc10 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa00:	69f8      	ldr	r0, [r7, #28]
 800fa02:	f002 fa0b 	bl	8011e1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa06:	e103      	b.n	800fc10 <tcp_input+0x6a4>
 800fa08:	080195e8 	.word	0x080195e8
 800fa0c:	080196a4 	.word	0x080196a4
 800fa10:	08019650 	.word	0x08019650
 800fa14:	080196cc 	.word	0x080196cc
 800fa18:	080196f8 	.word	0x080196f8
 800fa1c:	200040c4 	.word	0x200040c4
 800fa20:	200048b4 	.word	0x200048b4
 800fa24:	08019720 	.word	0x08019720
 800fa28:	20007990 	.word	0x20007990
 800fa2c:	0801974c 	.word	0x0801974c
 800fa30:	200079a0 	.word	0x200079a0
 800fa34:	08019778 	.word	0x08019778
 800fa38:	20007998 	.word	0x20007998
 800fa3c:	200040b4 	.word	0x200040b4
 800fa40:	200040e4 	.word	0x200040e4
 800fa44:	200040e1 	.word	0x200040e1
 800fa48:	200040dc 	.word	0x200040dc
 800fa4c:	200040e0 	.word	0x200040e0
 800fa50:	200040de 	.word	0x200040de
      }
    }
    tcp_input_pcb = pcb;
 800fa54:	4a98      	ldr	r2, [pc, #608]	; (800fcb8 <tcp_input+0x74c>)
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa5a:	69f8      	ldr	r0, [r7, #28]
 800fa5c:	f000 fac6 	bl	800ffec <tcp_process>
 800fa60:	4603      	mov	r3, r0
 800fa62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa68:	f113 0f0d 	cmn.w	r3, #13
 800fa6c:	f000 80d2 	beq.w	800fc14 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800fa70:	4b92      	ldr	r3, [pc, #584]	; (800fcbc <tcp_input+0x750>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	f003 0308 	and.w	r3, r3, #8
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d016      	beq.n	800faaa <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d008      	beq.n	800fa98 <tcp_input+0x52c>
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa8c:	69fa      	ldr	r2, [r7, #28]
 800fa8e:	6912      	ldr	r2, [r2, #16]
 800fa90:	f06f 010d 	mvn.w	r1, #13
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa98:	69f9      	ldr	r1, [r7, #28]
 800fa9a:	4889      	ldr	r0, [pc, #548]	; (800fcc0 <tcp_input+0x754>)
 800fa9c:	f7ff fc4c 	bl	800f338 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800faa0:	69f9      	ldr	r1, [r7, #28]
 800faa2:	2001      	movs	r0, #1
 800faa4:	f7fd fb6c 	bl	800d180 <memp_free>
 800faa8:	e0bf      	b.n	800fc2a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800faae:	4b85      	ldr	r3, [pc, #532]	; (800fcc4 <tcp_input+0x758>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d01b      	beq.n	800faee <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fab6:	4b83      	ldr	r3, [pc, #524]	; (800fcc4 <tcp_input+0x758>)
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d009      	beq.n	800fad8 <tcp_input+0x56c>
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac8:	69fa      	ldr	r2, [r7, #28]
 800faca:	6910      	ldr	r0, [r2, #16]
 800facc:	89fa      	ldrh	r2, [r7, #14]
 800face:	69f9      	ldr	r1, [r7, #28]
 800fad0:	4798      	blx	r3
 800fad2:	4603      	mov	r3, r0
 800fad4:	74fb      	strb	r3, [r7, #19]
 800fad6:	e001      	b.n	800fadc <tcp_input+0x570>
 800fad8:	2300      	movs	r3, #0
 800fada:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fadc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fae0:	f113 0f0d 	cmn.w	r3, #13
 800fae4:	f000 8098 	beq.w	800fc18 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fae8:	4b76      	ldr	r3, [pc, #472]	; (800fcc4 <tcp_input+0x758>)
 800faea:	2200      	movs	r2, #0
 800faec:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800faee:	69f8      	ldr	r0, [r7, #28]
 800faf0:	f000 f900 	bl	800fcf4 <tcp_input_delayed_close>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f040 8090 	bne.w	800fc1c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fafc:	4b72      	ldr	r3, [pc, #456]	; (800fcc8 <tcp_input+0x75c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d041      	beq.n	800fb88 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d006      	beq.n	800fb1a <tcp_input+0x5ae>
 800fb0c:	4b6f      	ldr	r3, [pc, #444]	; (800fccc <tcp_input+0x760>)
 800fb0e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800fb12:	496f      	ldr	r1, [pc, #444]	; (800fcd0 <tcp_input+0x764>)
 800fb14:	486f      	ldr	r0, [pc, #444]	; (800fcd4 <tcp_input+0x768>)
 800fb16:	f007 fe77 	bl	8017808 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	7e9b      	ldrb	r3, [r3, #26]
 800fb1e:	f003 0310 	and.w	r3, r3, #16
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d008      	beq.n	800fb38 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb26:	4b68      	ldr	r3, [pc, #416]	; (800fcc8 <tcp_input+0x75c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fe f8ca 	bl	800dcc4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb30:	69f8      	ldr	r0, [r7, #28]
 800fb32:	f7fe fdd5 	bl	800e6e0 <tcp_abort>
            goto aborted;
 800fb36:	e078      	b.n	800fc2a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00c      	beq.n	800fb5c <tcp_input+0x5f0>
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	6918      	ldr	r0, [r3, #16]
 800fb4c:	4b5e      	ldr	r3, [pc, #376]	; (800fcc8 <tcp_input+0x75c>)
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	2300      	movs	r3, #0
 800fb52:	69f9      	ldr	r1, [r7, #28]
 800fb54:	47a0      	blx	r4
 800fb56:	4603      	mov	r3, r0
 800fb58:	74fb      	strb	r3, [r7, #19]
 800fb5a:	e008      	b.n	800fb6e <tcp_input+0x602>
 800fb5c:	4b5a      	ldr	r3, [pc, #360]	; (800fcc8 <tcp_input+0x75c>)
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	2300      	movs	r3, #0
 800fb62:	69f9      	ldr	r1, [r7, #28]
 800fb64:	2000      	movs	r0, #0
 800fb66:	f7ff fa44 	bl	800eff2 <tcp_recv_null>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb72:	f113 0f0d 	cmn.w	r3, #13
 800fb76:	d053      	beq.n	800fc20 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d003      	beq.n	800fb88 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb80:	4b51      	ldr	r3, [pc, #324]	; (800fcc8 <tcp_input+0x75c>)
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb88:	4b4c      	ldr	r3, [pc, #304]	; (800fcbc <tcp_input+0x750>)
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	f003 0320 	and.w	r3, r3, #32
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d030      	beq.n	800fbf6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d009      	beq.n	800fbb0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba0:	7b5a      	ldrb	r2, [r3, #13]
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba6:	f042 0220 	orr.w	r2, r2, #32
 800fbaa:	b2d2      	uxtb	r2, r2
 800fbac:	735a      	strb	r2, [r3, #13]
 800fbae:	e022      	b.n	800fbf6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbb8:	d005      	beq.n	800fbc6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00b      	beq.n	800fbe8 <tcp_input+0x67c>
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	6918      	ldr	r0, [r3, #16]
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2200      	movs	r2, #0
 800fbde:	69f9      	ldr	r1, [r7, #28]
 800fbe0:	47a0      	blx	r4
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	74fb      	strb	r3, [r7, #19]
 800fbe6:	e001      	b.n	800fbec <tcp_input+0x680>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbf0:	f113 0f0d 	cmn.w	r3, #13
 800fbf4:	d016      	beq.n	800fc24 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fbf6:	4b30      	ldr	r3, [pc, #192]	; (800fcb8 <tcp_input+0x74c>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fbfc:	69f8      	ldr	r0, [r7, #28]
 800fbfe:	f000 f879 	bl	800fcf4 <tcp_input_delayed_close>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10f      	bne.n	800fc28 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc08:	69f8      	ldr	r0, [r7, #28]
 800fc0a:	f002 f963 	bl	8011ed4 <tcp_output>
 800fc0e:	e00c      	b.n	800fc2a <tcp_input+0x6be>
        goto aborted;
 800fc10:	bf00      	nop
 800fc12:	e00a      	b.n	800fc2a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc14:	bf00      	nop
 800fc16:	e008      	b.n	800fc2a <tcp_input+0x6be>
              goto aborted;
 800fc18:	bf00      	nop
 800fc1a:	e006      	b.n	800fc2a <tcp_input+0x6be>
          goto aborted;
 800fc1c:	bf00      	nop
 800fc1e:	e004      	b.n	800fc2a <tcp_input+0x6be>
            goto aborted;
 800fc20:	bf00      	nop
 800fc22:	e002      	b.n	800fc2a <tcp_input+0x6be>
              goto aborted;
 800fc24:	bf00      	nop
 800fc26:	e000      	b.n	800fc2a <tcp_input+0x6be>
          goto aborted;
 800fc28:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc2a:	4b23      	ldr	r3, [pc, #140]	; (800fcb8 <tcp_input+0x74c>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc30:	4b25      	ldr	r3, [pc, #148]	; (800fcc8 <tcp_input+0x75c>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800fc36:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <tcp_input+0x76c>)
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d037      	beq.n	800fcae <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800fc3e:	4b26      	ldr	r3, [pc, #152]	; (800fcd8 <tcp_input+0x76c>)
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe f83e 	bl	800dcc4 <pbuf_free>
      inseg.p = NULL;
 800fc48:	4b23      	ldr	r3, [pc, #140]	; (800fcd8 <tcp_input+0x76c>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc4e:	e02e      	b.n	800fcae <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc50:	4b22      	ldr	r3, [pc, #136]	; (800fcdc <tcp_input+0x770>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	899b      	ldrh	r3, [r3, #12]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fc fe0f 	bl	800c87c <lwip_htons>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	f003 0304 	and.w	r3, r3, #4
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d115      	bne.n	800fc94 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc68:	4b1d      	ldr	r3, [pc, #116]	; (800fce0 <tcp_input+0x774>)
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	4b1d      	ldr	r3, [pc, #116]	; (800fce4 <tcp_input+0x778>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	461a      	mov	r2, r3
 800fc72:	4b1d      	ldr	r3, [pc, #116]	; (800fce8 <tcp_input+0x77c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc78:	4b18      	ldr	r3, [pc, #96]	; (800fcdc <tcp_input+0x770>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc7c:	885b      	ldrh	r3, [r3, #2]
 800fc7e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc80:	4a16      	ldr	r2, [pc, #88]	; (800fcdc <tcp_input+0x770>)
 800fc82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc84:	8812      	ldrh	r2, [r2, #0]
 800fc86:	b292      	uxth	r2, r2
 800fc88:	9201      	str	r2, [sp, #4]
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	4b17      	ldr	r3, [pc, #92]	; (800fcec <tcp_input+0x780>)
 800fc8e:	4a18      	ldr	r2, [pc, #96]	; (800fcf0 <tcp_input+0x784>)
 800fc90:	f002 fbaa 	bl	80123e8 <tcp_rst>
    pbuf_free(p);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f7fe f815 	bl	800dcc4 <pbuf_free>
  return;
 800fc9a:	e008      	b.n	800fcae <tcp_input+0x742>
    goto dropped;
 800fc9c:	bf00      	nop
 800fc9e:	e002      	b.n	800fca6 <tcp_input+0x73a>
dropped:
 800fca0:	bf00      	nop
 800fca2:	e000      	b.n	800fca6 <tcp_input+0x73a>
      goto dropped;
 800fca4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f7fe f80c 	bl	800dcc4 <pbuf_free>
 800fcac:	e000      	b.n	800fcb0 <tcp_input+0x744>
  return;
 800fcae:	bf00      	nop
}
 800fcb0:	3724      	adds	r7, #36	; 0x24
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd90      	pop	{r4, r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	200079a4 	.word	0x200079a4
 800fcbc:	200040e1 	.word	0x200040e1
 800fcc0:	20007990 	.word	0x20007990
 800fcc4:	200040dc 	.word	0x200040dc
 800fcc8:	200040e4 	.word	0x200040e4
 800fccc:	080195e8 	.word	0x080195e8
 800fcd0:	080197a8 	.word	0x080197a8
 800fcd4:	08019650 	.word	0x08019650
 800fcd8:	200040b4 	.word	0x200040b4
 800fcdc:	200040c4 	.word	0x200040c4
 800fce0:	200040d8 	.word	0x200040d8
 800fce4:	200040de 	.word	0x200040de
 800fce8:	200040d4 	.word	0x200040d4
 800fcec:	200048c4 	.word	0x200048c4
 800fcf0:	200048c8 	.word	0x200048c8

0800fcf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800fcfc:	4b14      	ldr	r3, [pc, #80]	; (800fd50 <tcp_input_delayed_close+0x5c>)
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	f003 0310 	and.w	r3, r3, #16
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d01d      	beq.n	800fd44 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	7e9b      	ldrb	r3, [r3, #26]
 800fd0c:	f003 0310 	and.w	r3, r3, #16
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10d      	bne.n	800fd30 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d008      	beq.n	800fd30 <tcp_input_delayed_close+0x3c>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	6912      	ldr	r2, [r2, #16]
 800fd28:	f06f 010e 	mvn.w	r1, #14
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd30:	6879      	ldr	r1, [r7, #4]
 800fd32:	4808      	ldr	r0, [pc, #32]	; (800fd54 <tcp_input_delayed_close+0x60>)
 800fd34:	f7ff fb00 	bl	800f338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	2001      	movs	r0, #1
 800fd3c:	f7fd fa20 	bl	800d180 <memp_free>
    return 1;
 800fd40:	2301      	movs	r3, #1
 800fd42:	e000      	b.n	800fd46 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	200040e1 	.word	0x200040e1
 800fd54:	20007990 	.word	0x20007990

0800fd58 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af02      	add	r7, sp, #8
 800fd5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd60:	4b64      	ldr	r3, [pc, #400]	; (800fef4 <tcp_listen_input+0x19c>)
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	f003 0304 	and.w	r3, r3, #4
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f040 80bc 	bne.w	800fee6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fd6e:	4b61      	ldr	r3, [pc, #388]	; (800fef4 <tcp_listen_input+0x19c>)
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	f003 0310 	and.w	r3, r3, #16
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d016      	beq.n	800fda8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd7a:	4b5f      	ldr	r3, [pc, #380]	; (800fef8 <tcp_listen_input+0x1a0>)
 800fd7c:	6818      	ldr	r0, [r3, #0]
 800fd7e:	4b5f      	ldr	r3, [pc, #380]	; (800fefc <tcp_listen_input+0x1a4>)
 800fd80:	881b      	ldrh	r3, [r3, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4b5e      	ldr	r3, [pc, #376]	; (800ff00 <tcp_listen_input+0x1a8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd8a:	4b5e      	ldr	r3, [pc, #376]	; (800ff04 <tcp_listen_input+0x1ac>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd8e:	885b      	ldrh	r3, [r3, #2]
 800fd90:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd92:	4a5c      	ldr	r2, [pc, #368]	; (800ff04 <tcp_listen_input+0x1ac>)
 800fd94:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd96:	8812      	ldrh	r2, [r2, #0]
 800fd98:	b292      	uxth	r2, r2
 800fd9a:	9201      	str	r2, [sp, #4]
 800fd9c:	9300      	str	r3, [sp, #0]
 800fd9e:	4b5a      	ldr	r3, [pc, #360]	; (800ff08 <tcp_listen_input+0x1b0>)
 800fda0:	4a5a      	ldr	r2, [pc, #360]	; (800ff0c <tcp_listen_input+0x1b4>)
 800fda2:	f002 fb21 	bl	80123e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fda6:	e0a0      	b.n	800feea <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800fda8:	4b52      	ldr	r3, [pc, #328]	; (800fef4 <tcp_listen_input+0x19c>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	f003 0302 	and.w	r3, r3, #2
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f000 809a 	beq.w	800feea <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	7d5b      	ldrb	r3, [r3, #21]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7ff f9f8 	bl	800f1b0 <tcp_alloc>
 800fdc0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d111      	bne.n	800fdec <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	699b      	ldr	r3, [r3, #24]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d00a      	beq.n	800fde6 <tcp_listen_input+0x8e>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	6910      	ldr	r0, [r2, #16]
 800fdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fddc:	2100      	movs	r1, #0
 800fdde:	4798      	blx	r3
 800fde0:	4603      	mov	r3, r0
 800fde2:	73bb      	strb	r3, [r7, #14]
      return;
 800fde4:	e082      	b.n	800feec <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fde6:	23f0      	movs	r3, #240	; 0xf0
 800fde8:	73bb      	strb	r3, [r7, #14]
      return;
 800fdea:	e07f      	b.n	800feec <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fdec:	4b48      	ldr	r3, [pc, #288]	; (800ff10 <tcp_listen_input+0x1b8>)
 800fdee:	695a      	ldr	r2, [r3, #20]
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fdf4:	4b46      	ldr	r3, [pc, #280]	; (800ff10 <tcp_listen_input+0x1b8>)
 800fdf6:	691a      	ldr	r2, [r3, #16]
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	8ada      	ldrh	r2, [r3, #22]
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe04:	4b3f      	ldr	r3, [pc, #252]	; (800ff04 <tcp_listen_input+0x1ac>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2203      	movs	r2, #3
 800fe14:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe16:	4b3a      	ldr	r3, [pc, #232]	; (800ff00 <tcp_listen_input+0x1a8>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	1c5a      	adds	r2, r3, #1
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe28:	6978      	ldr	r0, [r7, #20]
 800fe2a:	f7ff fb01 	bl	800f430 <tcp_next_iss>
 800fe2e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	693a      	ldr	r2, [r7, #16]
 800fe34:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	693a      	ldr	r2, [r7, #16]
 800fe40:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fe48:	4b2d      	ldr	r3, [pc, #180]	; (800ff00 <tcp_listen_input+0x1a8>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	1e5a      	subs	r2, r3, #1
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	691a      	ldr	r2, [r3, #16]
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7a1b      	ldrb	r3, [r3, #8]
 800fe64:	f003 030c 	and.w	r3, r3, #12
 800fe68:	b2da      	uxtb	r2, r3
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fe6e:	4b29      	ldr	r3, [pc, #164]	; (800ff14 <tcp_listen_input+0x1bc>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	60da      	str	r2, [r3, #12]
 800fe76:	4a27      	ldr	r2, [pc, #156]	; (800ff14 <tcp_listen_input+0x1bc>)
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	f002 fd06 	bl	801288c <tcp_timer_needed>
 800fe80:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <tcp_listen_input+0x1c0>)
 800fe82:	2201      	movs	r2, #1
 800fe84:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe86:	6978      	ldr	r0, [r7, #20]
 800fe88:	f001 fd14 	bl	80118b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe8c:	4b1d      	ldr	r3, [pc, #116]	; (800ff04 <tcp_listen_input+0x1ac>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	89db      	ldrh	r3, [r3, #14]
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	3304      	adds	r3, #4
 800feae:	4619      	mov	r1, r3
 800feb0:	4610      	mov	r0, r2
 800feb2:	f7ff fad5 	bl	800f460 <tcp_eff_send_mss_impl>
 800feb6:	4603      	mov	r3, r0
 800feb8:	461a      	mov	r2, r3
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800febe:	2112      	movs	r1, #18
 800fec0:	6978      	ldr	r0, [r7, #20]
 800fec2:	f001 feaf 	bl	8011c24 <tcp_enqueue_flags>
 800fec6:	4603      	mov	r3, r0
 800fec8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800feca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d004      	beq.n	800fedc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800fed2:	2100      	movs	r1, #0
 800fed4:	6978      	ldr	r0, [r7, #20]
 800fed6:	f7fe fb51 	bl	800e57c <tcp_abandon>
      return;
 800feda:	e007      	b.n	800feec <tcp_listen_input+0x194>
    tcp_output(npcb);
 800fedc:	6978      	ldr	r0, [r7, #20]
 800fede:	f001 fff9 	bl	8011ed4 <tcp_output>
  return;
 800fee2:	bf00      	nop
 800fee4:	e001      	b.n	800feea <tcp_listen_input+0x192>
    return;
 800fee6:	bf00      	nop
 800fee8:	e000      	b.n	800feec <tcp_listen_input+0x194>
  return;
 800feea:	bf00      	nop
}
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	200040e0 	.word	0x200040e0
 800fef8:	200040d8 	.word	0x200040d8
 800fefc:	200040de 	.word	0x200040de
 800ff00:	200040d4 	.word	0x200040d4
 800ff04:	200040c4 	.word	0x200040c4
 800ff08:	200048c4 	.word	0x200048c4
 800ff0c:	200048c8 	.word	0x200048c8
 800ff10:	200048b4 	.word	0x200048b4
 800ff14:	20007990 	.word	0x20007990
 800ff18:	2000798c 	.word	0x2000798c

0800ff1c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af02      	add	r7, sp, #8
 800ff22:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ff24:	4b29      	ldr	r3, [pc, #164]	; (800ffcc <tcp_timewait_input+0xb0>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	f003 0304 	and.w	r3, r3, #4
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d147      	bne.n	800ffc0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ff30:	4b26      	ldr	r3, [pc, #152]	; (800ffcc <tcp_timewait_input+0xb0>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f003 0302 	and.w	r3, r3, #2
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d027      	beq.n	800ff8c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ff3c:	4b24      	ldr	r3, [pc, #144]	; (800ffd0 <tcp_timewait_input+0xb4>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	db2a      	blt.n	800ffa0 <tcp_timewait_input+0x84>
 800ff4a:	4b21      	ldr	r3, [pc, #132]	; (800ffd0 <tcp_timewait_input+0xb4>)
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff56:	440b      	add	r3, r1
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	dc20      	bgt.n	800ffa0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff5e:	4b1d      	ldr	r3, [pc, #116]	; (800ffd4 <tcp_timewait_input+0xb8>)
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	4b1d      	ldr	r3, [pc, #116]	; (800ffd8 <tcp_timewait_input+0xbc>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	461a      	mov	r2, r3
 800ff68:	4b19      	ldr	r3, [pc, #100]	; (800ffd0 <tcp_timewait_input+0xb4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff6e:	4b1b      	ldr	r3, [pc, #108]	; (800ffdc <tcp_timewait_input+0xc0>)
 800ff70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff72:	885b      	ldrh	r3, [r3, #2]
 800ff74:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff76:	4a19      	ldr	r2, [pc, #100]	; (800ffdc <tcp_timewait_input+0xc0>)
 800ff78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff7a:	8812      	ldrh	r2, [r2, #0]
 800ff7c:	b292      	uxth	r2, r2
 800ff7e:	9201      	str	r2, [sp, #4]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	4b17      	ldr	r3, [pc, #92]	; (800ffe0 <tcp_timewait_input+0xc4>)
 800ff84:	4a17      	ldr	r2, [pc, #92]	; (800ffe4 <tcp_timewait_input+0xc8>)
 800ff86:	f002 fa2f 	bl	80123e8 <tcp_rst>
      return;
 800ff8a:	e01c      	b.n	800ffc6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <tcp_timewait_input+0xb0>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	f003 0301 	and.w	r3, r3, #1
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d003      	beq.n	800ffa0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff98:	4b13      	ldr	r3, [pc, #76]	; (800ffe8 <tcp_timewait_input+0xcc>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ffa0:	4b0d      	ldr	r3, [pc, #52]	; (800ffd8 <tcp_timewait_input+0xbc>)
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00d      	beq.n	800ffc4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	7e9b      	ldrb	r3, [r3, #26]
 800ffac:	f043 0302 	orr.w	r3, r3, #2
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f001 ff8c 	bl	8011ed4 <tcp_output>
  }
  return;
 800ffbc:	bf00      	nop
 800ffbe:	e001      	b.n	800ffc4 <tcp_timewait_input+0xa8>
    return;
 800ffc0:	bf00      	nop
 800ffc2:	e000      	b.n	800ffc6 <tcp_timewait_input+0xaa>
  return;
 800ffc4:	bf00      	nop
}
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	200040e0 	.word	0x200040e0
 800ffd0:	200040d4 	.word	0x200040d4
 800ffd4:	200040d8 	.word	0x200040d8
 800ffd8:	200040de 	.word	0x200040de
 800ffdc:	200040c4 	.word	0x200040c4
 800ffe0:	200048c4 	.word	0x200048c4
 800ffe4:	200048c8 	.word	0x200048c8
 800ffe8:	20007994 	.word	0x20007994

0800ffec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b08a      	sub	sp, #40	; 0x28
 800fff0:	af02      	add	r7, sp, #8
 800fff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fffc:	4ba4      	ldr	r3, [pc, #656]	; (8010290 <tcp_process+0x2a4>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d04e      	beq.n	80100a6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	7d1b      	ldrb	r3, [r3, #20]
 801000c:	2b02      	cmp	r3, #2
 801000e:	d108      	bne.n	8010022 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010014:	4b9f      	ldr	r3, [pc, #636]	; (8010294 <tcp_process+0x2a8>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	d123      	bne.n	8010064 <tcp_process+0x78>
        acceptable = 1;
 801001c:	2301      	movs	r3, #1
 801001e:	76fb      	strb	r3, [r7, #27]
 8010020:	e020      	b.n	8010064 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010026:	4b9c      	ldr	r3, [pc, #624]	; (8010298 <tcp_process+0x2ac>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	429a      	cmp	r2, r3
 801002c:	d102      	bne.n	8010034 <tcp_process+0x48>
        acceptable = 1;
 801002e:	2301      	movs	r3, #1
 8010030:	76fb      	strb	r3, [r7, #27]
 8010032:	e017      	b.n	8010064 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010034:	4b98      	ldr	r3, [pc, #608]	; (8010298 <tcp_process+0x2ac>)
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	2b00      	cmp	r3, #0
 8010040:	db10      	blt.n	8010064 <tcp_process+0x78>
 8010042:	4b95      	ldr	r3, [pc, #596]	; (8010298 <tcp_process+0x2ac>)
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004a:	6879      	ldr	r1, [r7, #4]
 801004c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801004e:	440b      	add	r3, r1
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	dc06      	bgt.n	8010064 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7e9b      	ldrb	r3, [r3, #26]
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	b2da      	uxtb	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010064:	7efb      	ldrb	r3, [r7, #27]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d01b      	beq.n	80100a2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	7d1b      	ldrb	r3, [r3, #20]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <tcp_process+0x94>
 8010072:	4b8a      	ldr	r3, [pc, #552]	; (801029c <tcp_process+0x2b0>)
 8010074:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010078:	4989      	ldr	r1, [pc, #548]	; (80102a0 <tcp_process+0x2b4>)
 801007a:	488a      	ldr	r0, [pc, #552]	; (80102a4 <tcp_process+0x2b8>)
 801007c:	f007 fbc4 	bl	8017808 <iprintf>
      recv_flags |= TF_RESET;
 8010080:	4b89      	ldr	r3, [pc, #548]	; (80102a8 <tcp_process+0x2bc>)
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	f043 0308 	orr.w	r3, r3, #8
 8010088:	b2da      	uxtb	r2, r3
 801008a:	4b87      	ldr	r3, [pc, #540]	; (80102a8 <tcp_process+0x2bc>)
 801008c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7e9b      	ldrb	r3, [r3, #26]
 8010092:	f023 0301 	bic.w	r3, r3, #1
 8010096:	b2da      	uxtb	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801009c:	f06f 030d 	mvn.w	r3, #13
 80100a0:	e34d      	b.n	801073e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e34b      	b.n	801073e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80100a6:	4b7a      	ldr	r3, [pc, #488]	; (8010290 <tcp_process+0x2a4>)
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	f003 0302 	and.w	r3, r3, #2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d010      	beq.n	80100d4 <tcp_process+0xe8>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	7d1b      	ldrb	r3, [r3, #20]
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	d00c      	beq.n	80100d4 <tcp_process+0xe8>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	7d1b      	ldrb	r3, [r3, #20]
 80100be:	2b03      	cmp	r3, #3
 80100c0:	d008      	beq.n	80100d4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	7e9b      	ldrb	r3, [r3, #26]
 80100c6:	f043 0302 	orr.w	r3, r3, #2
 80100ca:	b2da      	uxtb	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e334      	b.n	801073e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	7e9b      	ldrb	r3, [r3, #26]
 80100d8:	f003 0310 	and.w	r3, r3, #16
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d103      	bne.n	80100e8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80100e0:	4b72      	ldr	r3, [pc, #456]	; (80102ac <tcp_process+0x2c0>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f001 fbdf 	bl	80118b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	3b02      	subs	r3, #2
 80100fc:	2b07      	cmp	r3, #7
 80100fe:	f200 830e 	bhi.w	801071e <tcp_process+0x732>
 8010102:	a201      	add	r2, pc, #4	; (adr r2, 8010108 <tcp_process+0x11c>)
 8010104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010108:	08010129 	.word	0x08010129
 801010c:	08010321 	.word	0x08010321
 8010110:	08010479 	.word	0x08010479
 8010114:	080104a3 	.word	0x080104a3
 8010118:	080105cd 	.word	0x080105cd
 801011c:	08010479 	.word	0x08010479
 8010120:	08010659 	.word	0x08010659
 8010124:	080106e9 	.word	0x080106e9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010128:	4b59      	ldr	r3, [pc, #356]	; (8010290 <tcp_process+0x2a4>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f003 0310 	and.w	r3, r3, #16
 8010130:	2b00      	cmp	r3, #0
 8010132:	f000 80cb 	beq.w	80102cc <tcp_process+0x2e0>
 8010136:	4b56      	ldr	r3, [pc, #344]	; (8010290 <tcp_process+0x2a4>)
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	f003 0302 	and.w	r3, r3, #2
 801013e:	2b00      	cmp	r3, #0
 8010140:	f000 80c4 	beq.w	80102cc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	4b52      	ldr	r3, [pc, #328]	; (8010294 <tcp_process+0x2a8>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	f040 80bc 	bne.w	80102cc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8010154:	4b50      	ldr	r3, [pc, #320]	; (8010298 <tcp_process+0x2ac>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8010166:	4b4b      	ldr	r3, [pc, #300]	; (8010294 <tcp_process+0x2a8>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801016e:	4b50      	ldr	r3, [pc, #320]	; (80102b0 <tcp_process+0x2c4>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	89db      	ldrh	r3, [r3, #14]
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010188:	4b43      	ldr	r3, [pc, #268]	; (8010298 <tcp_process+0x2ac>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	1e5a      	subs	r2, r3, #1
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2204      	movs	r2, #4
 8010196:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3304      	adds	r3, #4
 80101a0:	4619      	mov	r1, r3
 80101a2:	4610      	mov	r0, r2
 80101a4:	f7ff f95c 	bl	800f460 <tcp_eff_send_mss_impl>
 80101a8:	4603      	mov	r3, r0
 80101aa:	461a      	mov	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80101ba:	429a      	cmp	r2, r3
 80101bc:	bf38      	it	cc
 80101be:	461a      	movcc	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	4293      	cmp	r3, r2
 80101c8:	bf28      	it	cs
 80101ca:	4613      	movcs	r3, r2
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_process+0x200>
 80101de:	4b2f      	ldr	r3, [pc, #188]	; (801029c <tcp_process+0x2b0>)
 80101e0:	f240 321a 	movw	r2, #794	; 0x31a
 80101e4:	4933      	ldr	r1, [pc, #204]	; (80102b4 <tcp_process+0x2c8>)
 80101e6:	482f      	ldr	r0, [pc, #188]	; (80102a4 <tcp_process+0x2b8>)
 80101e8:	f007 fb0e 	bl	8017808 <iprintf>
      --pcb->snd_queuelen;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101f2:	3b01      	subs	r3, #1
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010200:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d111      	bne.n	801022c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801020c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d106      	bne.n	8010222 <tcp_process+0x236>
 8010214:	4b21      	ldr	r3, [pc, #132]	; (801029c <tcp_process+0x2b0>)
 8010216:	f240 3222 	movw	r2, #802	; 0x322
 801021a:	4927      	ldr	r1, [pc, #156]	; (80102b8 <tcp_process+0x2cc>)
 801021c:	4821      	ldr	r0, [pc, #132]	; (80102a4 <tcp_process+0x2b8>)
 801021e:	f007 faf3 	bl	8017808 <iprintf>
        pcb->unsent = rseg->next;
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	669a      	str	r2, [r3, #104]	; 0x68
 801022a:	e003      	b.n	8010234 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8010234:	69f8      	ldr	r0, [r7, #28]
 8010236:	f7fe fea8 	bl	800ef8a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801023e:	2b00      	cmp	r3, #0
 8010240:	d104      	bne.n	801024c <tcp_process+0x260>
        pcb->rtime = -1;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010248:	861a      	strh	r2, [r3, #48]	; 0x30
 801024a:	e006      	b.n	801025a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2200      	movs	r2, #0
 8010256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <tcp_process+0x28e>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	6910      	ldr	r0, [r2, #16]
 801026e:	2200      	movs	r2, #0
 8010270:	6879      	ldr	r1, [r7, #4]
 8010272:	4798      	blx	r3
 8010274:	4603      	mov	r3, r0
 8010276:	76bb      	strb	r3, [r7, #26]
 8010278:	e001      	b.n	801027e <tcp_process+0x292>
 801027a:	2300      	movs	r3, #0
 801027c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801027e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010282:	f113 0f0d 	cmn.w	r3, #13
 8010286:	d119      	bne.n	80102bc <tcp_process+0x2d0>
        return ERR_ABRT;
 8010288:	f06f 030c 	mvn.w	r3, #12
 801028c:	e257      	b.n	801073e <tcp_process+0x752>
 801028e:	bf00      	nop
 8010290:	200040e0 	.word	0x200040e0
 8010294:	200040d8 	.word	0x200040d8
 8010298:	200040d4 	.word	0x200040d4
 801029c:	080195e8 	.word	0x080195e8
 80102a0:	080197c4 	.word	0x080197c4
 80102a4:	08019650 	.word	0x08019650
 80102a8:	200040e1 	.word	0x200040e1
 80102ac:	20007994 	.word	0x20007994
 80102b0:	200040c4 	.word	0x200040c4
 80102b4:	080197e4 	.word	0x080197e4
 80102b8:	080197fc 	.word	0x080197fc
      }
      tcp_ack_now(pcb);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	7e9b      	ldrb	r3, [r3, #26]
 80102c0:	f043 0302 	orr.w	r3, r3, #2
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80102ca:	e22a      	b.n	8010722 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80102cc:	4b9f      	ldr	r3, [pc, #636]	; (801054c <tcp_process+0x560>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 0310 	and.w	r3, r3, #16
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 8224 	beq.w	8010722 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80102da:	4b9d      	ldr	r3, [pc, #628]	; (8010550 <tcp_process+0x564>)
 80102dc:	6818      	ldr	r0, [r3, #0]
 80102de:	4b9d      	ldr	r3, [pc, #628]	; (8010554 <tcp_process+0x568>)
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	4b9c      	ldr	r3, [pc, #624]	; (8010558 <tcp_process+0x56c>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ea:	4b9c      	ldr	r3, [pc, #624]	; (801055c <tcp_process+0x570>)
 80102ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ee:	885b      	ldrh	r3, [r3, #2]
 80102f0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f2:	4a9a      	ldr	r2, [pc, #616]	; (801055c <tcp_process+0x570>)
 80102f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f6:	8812      	ldrh	r2, [r2, #0]
 80102f8:	b292      	uxth	r2, r2
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	4b98      	ldr	r3, [pc, #608]	; (8010560 <tcp_process+0x574>)
 8010300:	4a98      	ldr	r2, [pc, #608]	; (8010564 <tcp_process+0x578>)
 8010302:	f002 f871 	bl	80123e8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801030c:	2b05      	cmp	r3, #5
 801030e:	f200 8208 	bhi.w	8010722 <tcp_process+0x736>
        pcb->rtime = 0;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f002 f8db 	bl	80124d4 <tcp_rexmit_rto>
    break;
 801031e:	e200      	b.n	8010722 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8010320:	4b8a      	ldr	r3, [pc, #552]	; (801054c <tcp_process+0x560>)
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	f003 0310 	and.w	r3, r3, #16
 8010328:	2b00      	cmp	r3, #0
 801032a:	f000 8091 	beq.w	8010450 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801032e:	4b88      	ldr	r3, [pc, #544]	; (8010550 <tcp_process+0x564>)
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	3b01      	subs	r3, #1
 801033a:	2b00      	cmp	r3, #0
 801033c:	db71      	blt.n	8010422 <tcp_process+0x436>
 801033e:	4b84      	ldr	r3, [pc, #528]	; (8010550 <tcp_process+0x564>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc6a      	bgt.n	8010422 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2204      	movs	r2, #4
 8010350:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00b      	beq.n	8010372 <tcp_process+0x386>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d106      	bne.n	8010372 <tcp_process+0x386>
 8010364:	4b80      	ldr	r3, [pc, #512]	; (8010568 <tcp_process+0x57c>)
 8010366:	f240 3251 	movw	r2, #849	; 0x351
 801036a:	4980      	ldr	r1, [pc, #512]	; (801056c <tcp_process+0x580>)
 801036c:	4880      	ldr	r0, [pc, #512]	; (8010570 <tcp_process+0x584>)
 801036e:	f007 fa4b 	bl	8017808 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010376:	2b00      	cmp	r3, #0
 8010378:	d102      	bne.n	8010380 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801037a:	23fa      	movs	r3, #250	; 0xfa
 801037c:	76bb      	strb	r3, [r7, #26]
 801037e:	e011      	b.n	80103a4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010384:	699b      	ldr	r3, [r3, #24]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <tcp_process+0x3b4>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801038e:	699b      	ldr	r3, [r3, #24]
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	6910      	ldr	r0, [r2, #16]
 8010394:	2200      	movs	r2, #0
 8010396:	6879      	ldr	r1, [r7, #4]
 8010398:	4798      	blx	r3
 801039a:	4603      	mov	r3, r0
 801039c:	76bb      	strb	r3, [r7, #26]
 801039e:	e001      	b.n	80103a4 <tcp_process+0x3b8>
 80103a0:	23f0      	movs	r3, #240	; 0xf0
 80103a2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80103a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00a      	beq.n	80103c2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80103ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103b0:	f113 0f0d 	cmn.w	r3, #13
 80103b4:	d002      	beq.n	80103bc <tcp_process+0x3d0>
            tcp_abort(pcb);
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f7fe f992 	bl	800e6e0 <tcp_abort>
          }
          return ERR_ABRT;
 80103bc:	f06f 030c 	mvn.w	r3, #12
 80103c0:	e1bd      	b.n	801073e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fa42 	bl	801084c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80103c8:	4b6a      	ldr	r3, [pc, #424]	; (8010574 <tcp_process+0x588>)
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <tcp_process+0x3f0>
          recv_acked--;
 80103d0:	4b68      	ldr	r3, [pc, #416]	; (8010574 <tcp_process+0x588>)
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	3b01      	subs	r3, #1
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	4b66      	ldr	r3, [pc, #408]	; (8010574 <tcp_process+0x588>)
 80103da:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103e0:	005b      	lsls	r3, r3, #1
 80103e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80103e6:	429a      	cmp	r2, r3
 80103e8:	bf38      	it	cc
 80103ea:	461a      	movcc	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	4293      	cmp	r3, r2
 80103f4:	bf28      	it	cs
 80103f6:	4613      	movcs	r3, r2
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8010400:	4b5d      	ldr	r3, [pc, #372]	; (8010578 <tcp_process+0x58c>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	f003 0320 	and.w	r3, r3, #32
 8010408:	2b00      	cmp	r3, #0
 801040a:	d034      	beq.n	8010476 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7e9b      	ldrb	r3, [r3, #26]
 8010410:	f043 0302 	orr.w	r3, r3, #2
 8010414:	b2da      	uxtb	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2207      	movs	r2, #7
 801041e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8010420:	e029      	b.n	8010476 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010422:	4b4b      	ldr	r3, [pc, #300]	; (8010550 <tcp_process+0x564>)
 8010424:	6818      	ldr	r0, [r3, #0]
 8010426:	4b4b      	ldr	r3, [pc, #300]	; (8010554 <tcp_process+0x568>)
 8010428:	881b      	ldrh	r3, [r3, #0]
 801042a:	461a      	mov	r2, r3
 801042c:	4b4a      	ldr	r3, [pc, #296]	; (8010558 <tcp_process+0x56c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010432:	4b4a      	ldr	r3, [pc, #296]	; (801055c <tcp_process+0x570>)
 8010434:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010436:	885b      	ldrh	r3, [r3, #2]
 8010438:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801043a:	4a48      	ldr	r2, [pc, #288]	; (801055c <tcp_process+0x570>)
 801043c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801043e:	8812      	ldrh	r2, [r2, #0]
 8010440:	b292      	uxth	r2, r2
 8010442:	9201      	str	r2, [sp, #4]
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	4b46      	ldr	r3, [pc, #280]	; (8010560 <tcp_process+0x574>)
 8010448:	4a46      	ldr	r2, [pc, #280]	; (8010564 <tcp_process+0x578>)
 801044a:	f001 ffcd 	bl	80123e8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801044e:	e16a      	b.n	8010726 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010450:	4b3e      	ldr	r3, [pc, #248]	; (801054c <tcp_process+0x560>)
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	f003 0302 	and.w	r3, r3, #2
 8010458:	2b00      	cmp	r3, #0
 801045a:	f000 8164 	beq.w	8010726 <tcp_process+0x73a>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010462:	1e5a      	subs	r2, r3, #1
 8010464:	4b3c      	ldr	r3, [pc, #240]	; (8010558 <tcp_process+0x56c>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	429a      	cmp	r2, r3
 801046a:	f040 815c 	bne.w	8010726 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f002 f866 	bl	8012540 <tcp_rexmit>
    break;
 8010474:	e157      	b.n	8010726 <tcp_process+0x73a>
 8010476:	e156      	b.n	8010726 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f9e7 	bl	801084c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801047e:	4b3e      	ldr	r3, [pc, #248]	; (8010578 <tcp_process+0x58c>)
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	f003 0320 	and.w	r3, r3, #32
 8010486:	2b00      	cmp	r3, #0
 8010488:	f000 814f 	beq.w	801072a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	7e9b      	ldrb	r3, [r3, #26]
 8010490:	f043 0302 	orr.w	r3, r3, #2
 8010494:	b2da      	uxtb	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2207      	movs	r2, #7
 801049e:	751a      	strb	r2, [r3, #20]
    }
    break;
 80104a0:	e143      	b.n	801072a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f9d2 	bl	801084c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80104a8:	4b33      	ldr	r3, [pc, #204]	; (8010578 <tcp_process+0x58c>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	f003 0320 	and.w	r3, r3, #32
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d074      	beq.n	801059e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104b4:	4b25      	ldr	r3, [pc, #148]	; (801054c <tcp_process+0x560>)
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	f003 0310 	and.w	r3, r3, #16
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d063      	beq.n	8010588 <tcp_process+0x59c>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104c4:	4b22      	ldr	r3, [pc, #136]	; (8010550 <tcp_process+0x564>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d15d      	bne.n	8010588 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d159      	bne.n	8010588 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7e9b      	ldrb	r3, [r3, #26]
 80104d8:	f043 0302 	orr.w	r3, r3, #2
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7fe fee6 	bl	800f2b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104e8:	4b24      	ldr	r3, [pc, #144]	; (801057c <tcp_process+0x590>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d105      	bne.n	80104fe <tcp_process+0x512>
 80104f2:	4b22      	ldr	r3, [pc, #136]	; (801057c <tcp_process+0x590>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	4a20      	ldr	r2, [pc, #128]	; (801057c <tcp_process+0x590>)
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	e013      	b.n	8010526 <tcp_process+0x53a>
 80104fe:	4b1f      	ldr	r3, [pc, #124]	; (801057c <tcp_process+0x590>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	617b      	str	r3, [r7, #20]
 8010504:	e00c      	b.n	8010520 <tcp_process+0x534>
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	429a      	cmp	r2, r3
 801050e:	d104      	bne.n	801051a <tcp_process+0x52e>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68da      	ldr	r2, [r3, #12]
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	60da      	str	r2, [r3, #12]
 8010518:	e005      	b.n	8010526 <tcp_process+0x53a>
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	617b      	str	r3, [r7, #20]
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1ef      	bne.n	8010506 <tcp_process+0x51a>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	60da      	str	r2, [r3, #12]
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <tcp_process+0x594>)
 801052e:	2201      	movs	r2, #1
 8010530:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	220a      	movs	r2, #10
 8010536:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010538:	4b12      	ldr	r3, [pc, #72]	; (8010584 <tcp_process+0x598>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	60da      	str	r2, [r3, #12]
 8010540:	4a10      	ldr	r2, [pc, #64]	; (8010584 <tcp_process+0x598>)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	f002 f9a1 	bl	801288c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801054a:	e0f0      	b.n	801072e <tcp_process+0x742>
 801054c:	200040e0 	.word	0x200040e0
 8010550:	200040d8 	.word	0x200040d8
 8010554:	200040de 	.word	0x200040de
 8010558:	200040d4 	.word	0x200040d4
 801055c:	200040c4 	.word	0x200040c4
 8010560:	200048c4 	.word	0x200048c4
 8010564:	200048c8 	.word	0x200048c8
 8010568:	080195e8 	.word	0x080195e8
 801056c:	08019810 	.word	0x08019810
 8010570:	08019650 	.word	0x08019650
 8010574:	200040dc 	.word	0x200040dc
 8010578:	200040e1 	.word	0x200040e1
 801057c:	20007990 	.word	0x20007990
 8010580:	2000798c 	.word	0x2000798c
 8010584:	200079a0 	.word	0x200079a0
        tcp_ack_now(pcb);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	7e9b      	ldrb	r3, [r3, #26]
 801058c:	f043 0302 	orr.w	r3, r3, #2
 8010590:	b2da      	uxtb	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2208      	movs	r2, #8
 801059a:	751a      	strb	r2, [r3, #20]
    break;
 801059c:	e0c7      	b.n	801072e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801059e:	4b6a      	ldr	r3, [pc, #424]	; (8010748 <tcp_process+0x75c>)
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	f003 0310 	and.w	r3, r3, #16
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f000 80c1 	beq.w	801072e <tcp_process+0x742>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80105b0:	4b66      	ldr	r3, [pc, #408]	; (801074c <tcp_process+0x760>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	f040 80ba 	bne.w	801072e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f040 80b5 	bne.w	801072e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2206      	movs	r2, #6
 80105c8:	751a      	strb	r2, [r3, #20]
    break;
 80105ca:	e0b0      	b.n	801072e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f93d 	bl	801084c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80105d2:	4b5f      	ldr	r3, [pc, #380]	; (8010750 <tcp_process+0x764>)
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 0320 	and.w	r3, r3, #32
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 80a9 	beq.w	8010732 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	7e9b      	ldrb	r3, [r3, #26]
 80105e4:	f043 0302 	orr.w	r3, r3, #2
 80105e8:	b2da      	uxtb	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe fe60 	bl	800f2b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80105f4:	4b57      	ldr	r3, [pc, #348]	; (8010754 <tcp_process+0x768>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d105      	bne.n	801060a <tcp_process+0x61e>
 80105fe:	4b55      	ldr	r3, [pc, #340]	; (8010754 <tcp_process+0x768>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	4a53      	ldr	r2, [pc, #332]	; (8010754 <tcp_process+0x768>)
 8010606:	6013      	str	r3, [r2, #0]
 8010608:	e013      	b.n	8010632 <tcp_process+0x646>
 801060a:	4b52      	ldr	r3, [pc, #328]	; (8010754 <tcp_process+0x768>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	613b      	str	r3, [r7, #16]
 8010610:	e00c      	b.n	801062c <tcp_process+0x640>
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	429a      	cmp	r2, r3
 801061a:	d104      	bne.n	8010626 <tcp_process+0x63a>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68da      	ldr	r2, [r3, #12]
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	60da      	str	r2, [r3, #12]
 8010624:	e005      	b.n	8010632 <tcp_process+0x646>
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	613b      	str	r3, [r7, #16]
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1ef      	bne.n	8010612 <tcp_process+0x626>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	60da      	str	r2, [r3, #12]
 8010638:	4b47      	ldr	r3, [pc, #284]	; (8010758 <tcp_process+0x76c>)
 801063a:	2201      	movs	r2, #1
 801063c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	220a      	movs	r2, #10
 8010642:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010644:	4b45      	ldr	r3, [pc, #276]	; (801075c <tcp_process+0x770>)
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	60da      	str	r2, [r3, #12]
 801064c:	4a43      	ldr	r2, [pc, #268]	; (801075c <tcp_process+0x770>)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6013      	str	r3, [r2, #0]
 8010652:	f002 f91b 	bl	801288c <tcp_timer_needed>
    }
    break;
 8010656:	e06c      	b.n	8010732 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 f8f7 	bl	801084c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801065e:	4b3a      	ldr	r3, [pc, #232]	; (8010748 <tcp_process+0x75c>)
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	f003 0310 	and.w	r3, r3, #16
 8010666:	2b00      	cmp	r3, #0
 8010668:	d065      	beq.n	8010736 <tcp_process+0x74a>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801066e:	4b37      	ldr	r3, [pc, #220]	; (801074c <tcp_process+0x760>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	429a      	cmp	r2, r3
 8010674:	d15f      	bne.n	8010736 <tcp_process+0x74a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801067a:	2b00      	cmp	r3, #0
 801067c:	d15b      	bne.n	8010736 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7fe fe18 	bl	800f2b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010684:	4b33      	ldr	r3, [pc, #204]	; (8010754 <tcp_process+0x768>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d105      	bne.n	801069a <tcp_process+0x6ae>
 801068e:	4b31      	ldr	r3, [pc, #196]	; (8010754 <tcp_process+0x768>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	68db      	ldr	r3, [r3, #12]
 8010694:	4a2f      	ldr	r2, [pc, #188]	; (8010754 <tcp_process+0x768>)
 8010696:	6013      	str	r3, [r2, #0]
 8010698:	e013      	b.n	80106c2 <tcp_process+0x6d6>
 801069a:	4b2e      	ldr	r3, [pc, #184]	; (8010754 <tcp_process+0x768>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	60fb      	str	r3, [r7, #12]
 80106a0:	e00c      	b.n	80106bc <tcp_process+0x6d0>
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d104      	bne.n	80106b6 <tcp_process+0x6ca>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	68da      	ldr	r2, [r3, #12]
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	60da      	str	r2, [r3, #12]
 80106b4:	e005      	b.n	80106c2 <tcp_process+0x6d6>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1ef      	bne.n	80106a2 <tcp_process+0x6b6>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	60da      	str	r2, [r3, #12]
 80106c8:	4b23      	ldr	r3, [pc, #140]	; (8010758 <tcp_process+0x76c>)
 80106ca:	2201      	movs	r2, #1
 80106cc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	220a      	movs	r2, #10
 80106d2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80106d4:	4b21      	ldr	r3, [pc, #132]	; (801075c <tcp_process+0x770>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	60da      	str	r2, [r3, #12]
 80106dc:	4a1f      	ldr	r2, [pc, #124]	; (801075c <tcp_process+0x770>)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	f002 f8d3 	bl	801288c <tcp_timer_needed>
    }
    break;
 80106e6:	e026      	b.n	8010736 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 f8af 	bl	801084c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106ee:	4b16      	ldr	r3, [pc, #88]	; (8010748 <tcp_process+0x75c>)
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	f003 0310 	and.w	r3, r3, #16
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d01f      	beq.n	801073a <tcp_process+0x74e>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106fe:	4b13      	ldr	r3, [pc, #76]	; (801074c <tcp_process+0x760>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	d119      	bne.n	801073a <tcp_process+0x74e>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801070a:	2b00      	cmp	r3, #0
 801070c:	d115      	bne.n	801073a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801070e:	4b10      	ldr	r3, [pc, #64]	; (8010750 <tcp_process+0x764>)
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	f043 0310 	orr.w	r3, r3, #16
 8010716:	b2da      	uxtb	r2, r3
 8010718:	4b0d      	ldr	r3, [pc, #52]	; (8010750 <tcp_process+0x764>)
 801071a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801071c:	e00d      	b.n	801073a <tcp_process+0x74e>
  default:
    break;
 801071e:	bf00      	nop
 8010720:	e00c      	b.n	801073c <tcp_process+0x750>
    break;
 8010722:	bf00      	nop
 8010724:	e00a      	b.n	801073c <tcp_process+0x750>
    break;
 8010726:	bf00      	nop
 8010728:	e008      	b.n	801073c <tcp_process+0x750>
    break;
 801072a:	bf00      	nop
 801072c:	e006      	b.n	801073c <tcp_process+0x750>
    break;
 801072e:	bf00      	nop
 8010730:	e004      	b.n	801073c <tcp_process+0x750>
    break;
 8010732:	bf00      	nop
 8010734:	e002      	b.n	801073c <tcp_process+0x750>
    break;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <tcp_process+0x750>
    break;
 801073a:	bf00      	nop
  }
  return ERR_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3720      	adds	r7, #32
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	200040e0 	.word	0x200040e0
 801074c:	200040d8 	.word	0x200040d8
 8010750:	200040e1 	.word	0x200040e1
 8010754:	20007990 	.word	0x20007990
 8010758:	2000798c 	.word	0x2000798c
 801075c:	200079a0 	.word	0x200079a0

08010760 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010760:	b590      	push	{r4, r7, lr}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	899b      	ldrh	r3, [r3, #12]
 8010770:	b29b      	uxth	r3, r3
 8010772:	4618      	mov	r0, r3
 8010774:	f7fc f882 	bl	800c87c <lwip_htons>
 8010778:	4603      	mov	r3, r0
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	d027      	beq.n	80107d2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010782:	6838      	ldr	r0, [r7, #0]
 8010784:	f7fe fbed 	bl	800ef62 <tcp_segs_free>
    next = NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	e055      	b.n	801083a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	899b      	ldrh	r3, [r3, #12]
 8010794:	b29b      	uxth	r3, r3
 8010796:	4618      	mov	r0, r3
 8010798:	f7fc f870 	bl	800c87c <lwip_htons>
 801079c:	4603      	mov	r3, r0
 801079e:	f003 0301 	and.w	r3, r3, #1
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00d      	beq.n	80107c2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	899b      	ldrh	r3, [r3, #12]
 80107ac:	b29c      	uxth	r4, r3
 80107ae:	2001      	movs	r0, #1
 80107b0:	f7fc f864 	bl	800c87c <lwip_htons>
 80107b4:	4603      	mov	r3, r0
 80107b6:	461a      	mov	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	4322      	orrs	r2, r4
 80107be:	b292      	uxth	r2, r2
 80107c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f7fe fbdc 	bl	800ef8a <tcp_seg_free>
    while (next &&
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00e      	beq.n	80107f6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	461a      	mov	r2, r3
 80107de:	4b1a      	ldr	r3, [pc, #104]	; (8010848 <tcp_oos_insert_segment+0xe8>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	441a      	add	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	8909      	ldrh	r1, [r1, #8]
 80107ee:	440b      	add	r3, r1
 80107f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	dacb      	bge.n	801078e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01e      	beq.n	801083a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	891b      	ldrh	r3, [r3, #8]
 8010800:	461a      	mov	r2, r3
 8010802:	4b11      	ldr	r3, [pc, #68]	; (8010848 <tcp_oos_insert_segment+0xe8>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	441a      	add	r2, r3
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010810:	2b00      	cmp	r3, #0
 8010812:	dd12      	ble.n	801083a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	b29a      	uxth	r2, r3
 801081c:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <tcp_oos_insert_segment+0xe8>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	b29b      	uxth	r3, r3
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	b29a      	uxth	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	891b      	ldrh	r3, [r3, #8]
 8010832:	4619      	mov	r1, r3
 8010834:	4610      	mov	r0, r2
 8010836:	f7fd f8d1 	bl	800d9dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	601a      	str	r2, [r3, #0]
}
 8010840:	bf00      	nop
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	bd90      	pop	{r4, r7, pc}
 8010848:	200040d4 	.word	0x200040d4

0801084c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801084e:	b08d      	sub	sp, #52	; 0x34
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010854:	2300      	movs	r3, #0
 8010856:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	7d1b      	ldrb	r3, [r3, #20]
 801085c:	2b03      	cmp	r3, #3
 801085e:	d806      	bhi.n	801086e <tcp_receive+0x22>
 8010860:	4ba6      	ldr	r3, [pc, #664]	; (8010afc <tcp_receive+0x2b0>)
 8010862:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010866:	49a6      	ldr	r1, [pc, #664]	; (8010b00 <tcp_receive+0x2b4>)
 8010868:	48a6      	ldr	r0, [pc, #664]	; (8010b04 <tcp_receive+0x2b8>)
 801086a:	f006 ffcd 	bl	8017808 <iprintf>

  if (flags & TCP_ACK) {
 801086e:	4ba6      	ldr	r3, [pc, #664]	; (8010b08 <tcp_receive+0x2bc>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	f003 0310 	and.w	r3, r3, #16
 8010876:	2b00      	cmp	r3, #0
 8010878:	f000 82bf 	beq.w	8010dfa <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010882:	461a      	mov	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010888:	4413      	add	r3, r2
 801088a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010890:	4b9e      	ldr	r3, [pc, #632]	; (8010b0c <tcp_receive+0x2c0>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	1ad3      	subs	r3, r2, r3
 8010896:	2b00      	cmp	r3, #0
 8010898:	db1b      	blt.n	80108d2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801089e:	4b9b      	ldr	r3, [pc, #620]	; (8010b0c <tcp_receive+0x2c0>)
 80108a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d106      	bne.n	80108b4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108aa:	4b99      	ldr	r3, [pc, #612]	; (8010b10 <tcp_receive+0x2c4>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	db0e      	blt.n	80108d2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108b8:	4b95      	ldr	r3, [pc, #596]	; (8010b10 <tcp_receive+0x2c4>)
 80108ba:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80108bc:	429a      	cmp	r2, r3
 80108be:	d141      	bne.n	8010944 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108c0:	4b94      	ldr	r3, [pc, #592]	; (8010b14 <tcp_receive+0x2c8>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	89db      	ldrh	r3, [r3, #14]
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d938      	bls.n	8010944 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80108d2:	4b90      	ldr	r3, [pc, #576]	; (8010b14 <tcp_receive+0x2c8>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	89db      	ldrh	r3, [r3, #14]
 80108d8:	b29a      	uxth	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d205      	bcs.n	80108fc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80108fc:	4b83      	ldr	r3, [pc, #524]	; (8010b0c <tcp_receive+0x2c0>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8010904:	4b82      	ldr	r3, [pc, #520]	; (8010b10 <tcp_receive+0x2c4>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10d      	bne.n	8010932 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801091c:	2b00      	cmp	r3, #0
 801091e:	d111      	bne.n	8010944 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010930:	e008      	b.n	8010944 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010938:	2b00      	cmp	r3, #0
 801093a:	d003      	beq.n	8010944 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010944:	4b72      	ldr	r3, [pc, #456]	; (8010b10 <tcp_receive+0x2c4>)
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	2b00      	cmp	r3, #0
 8010950:	dc53      	bgt.n	80109fa <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8010952:	4b71      	ldr	r3, [pc, #452]	; (8010b18 <tcp_receive+0x2cc>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d146      	bne.n	80109e8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8010964:	4413      	add	r3, r2
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	429a      	cmp	r2, r3
 801096a:	d13d      	bne.n	80109e8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010972:	2b00      	cmp	r3, #0
 8010974:	db38      	blt.n	80109e8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801097a:	4b65      	ldr	r3, [pc, #404]	; (8010b10 <tcp_receive+0x2c4>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d132      	bne.n	80109e8 <tcp_receive+0x19c>
              found_dupack = 1;
 8010982:	2301      	movs	r3, #1
 8010984:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801098c:	2bff      	cmp	r3, #255	; 0xff
 801098e:	d007      	beq.n	80109a0 <tcp_receive+0x154>
                ++pcb->dupacks;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010996:	3301      	adds	r3, #1
 8010998:	b2da      	uxtb	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d916      	bls.n	80109d8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109b4:	4413      	add	r3, r2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80109be:	429a      	cmp	r2, r3
 80109c0:	d912      	bls.n	80109e8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109cc:	4413      	add	r3, r2
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80109d6:	e007      	b.n	80109e8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d102      	bne.n	80109e8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f001 fdfc 	bl	80125e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f040 8169 	bne.w	8010cc2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109f8:	e163      	b.n	8010cc2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80109fa:	4b45      	ldr	r3, [pc, #276]	; (8010b10 <tcp_receive+0x2c4>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	3b01      	subs	r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f2c0 8107 	blt.w	8010c1a <tcp_receive+0x3ce>
 8010a0c:	4b40      	ldr	r3, [pc, #256]	; (8010b10 <tcp_receive+0x2c4>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a14:	1ad3      	subs	r3, r2, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f300 80ff 	bgt.w	8010c1a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7e9b      	ldrb	r3, [r3, #26]
 8010a20:	f003 0304 	and.w	r3, r3, #4
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00c      	beq.n	8010a42 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	7e9b      	ldrb	r3, [r3, #26]
 8010a2c:	f023 0304 	bic.w	r3, r3, #4
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2200      	movs	r2, #0
 8010a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a50:	10db      	asrs	r3, r3, #3
 8010a52:	b21b      	sxth	r3, r3
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	4413      	add	r3, r2
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	b21a      	sxth	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a72:	4b27      	ldr	r3, [pc, #156]	; (8010b10 <tcp_receive+0x2c4>)
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7d1b      	ldrb	r3, [r3, #20]
 8010a7e:	2b03      	cmp	r3, #3
 8010a80:	f240 8094 	bls.w	8010bac <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d216      	bcs.n	8010ac2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a9e:	4413      	add	r3, r2
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d97f      	bls.n	8010bac <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ac0:	e074      	b.n	8010bac <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010acc:	4619      	mov	r1, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ad2:	fb03 f301 	mul.w	r3, r3, r1
 8010ad6:	6879      	ldr	r1, [r7, #4]
 8010ad8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010adc:	fb93 f3f1 	sdiv	r3, r3, r1
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aec:	8a7a      	ldrh	r2, [r7, #18]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d95c      	bls.n	8010bac <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	8a7a      	ldrh	r2, [r7, #18]
 8010af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010afa:	e057      	b.n	8010bac <tcp_receive+0x360>
 8010afc:	080195e8 	.word	0x080195e8
 8010b00:	08019830 	.word	0x08019830
 8010b04:	08019650 	.word	0x08019650
 8010b08:	200040e0 	.word	0x200040e0
 8010b0c:	200040d4 	.word	0x200040d4
 8010b10:	200040d8 	.word	0x200040d8
 8010b14:	200040c4 	.word	0x200040c4
 8010b18:	200040de 	.word	0x200040de
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fd f95e 	bl	800ddf8 <pbuf_clen>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	429c      	cmp	r4, r3
 8010b40:	d206      	bcs.n	8010b50 <tcp_receive+0x304>
 8010b42:	4b70      	ldr	r3, [pc, #448]	; (8010d04 <tcp_receive+0x4b8>)
 8010b44:	f240 429e 	movw	r2, #1182	; 0x49e
 8010b48:	496f      	ldr	r1, [pc, #444]	; (8010d08 <tcp_receive+0x4bc>)
 8010b4a:	4870      	ldr	r0, [pc, #448]	; (8010d0c <tcp_receive+0x4c0>)
 8010b4c:	f006 fe5c 	bl	8017808 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fd f94f 	bl	800ddf8 <pbuf_clen>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b64:	1a9b      	subs	r3, r3, r2
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8010b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b70:	891a      	ldrh	r2, [r3, #8]
 8010b72:	4b67      	ldr	r3, [pc, #412]	; (8010d10 <tcp_receive+0x4c4>)
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	4413      	add	r3, r2
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	4b65      	ldr	r3, [pc, #404]	; (8010d10 <tcp_receive+0x4c4>)
 8010b7c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8010b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b80:	f7fe fa03 	bl	800ef8a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00e      	beq.n	8010bac <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10a      	bne.n	8010bac <tcp_receive+0x360>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d106      	bne.n	8010bac <tcp_receive+0x360>
 8010b9e:	4b59      	ldr	r3, [pc, #356]	; (8010d04 <tcp_receive+0x4b8>)
 8010ba0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010ba4:	495b      	ldr	r1, [pc, #364]	; (8010d14 <tcp_receive+0x4c8>)
 8010ba6:	4859      	ldr	r0, [pc, #356]	; (8010d0c <tcp_receive+0x4c0>)
 8010ba8:	f006 fe2e 	bl	8017808 <iprintf>
      while (pcb->unacked != NULL &&
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d022      	beq.n	8010bfa <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7fb fe6b 	bl	800c898 <lwip_htonl>
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc8:	891b      	ldrh	r3, [r3, #8]
 8010bca:	461d      	mov	r5, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	899b      	ldrh	r3, [r3, #12]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fb fe50 	bl	800c87c <lwip_htons>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	f003 0303 	and.w	r3, r3, #3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d001      	beq.n	8010bea <tcp_receive+0x39e>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e000      	b.n	8010bec <tcp_receive+0x3a0>
 8010bea:	2300      	movs	r3, #0
 8010bec:	442b      	add	r3, r5
 8010bee:	18e2      	adds	r2, r4, r3
 8010bf0:	4b49      	ldr	r3, [pc, #292]	; (8010d18 <tcp_receive+0x4cc>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	dd90      	ble.n	8010b1c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d104      	bne.n	8010c0c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c08:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c0a:	e002      	b.n	8010c12 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	76da      	strb	r2, [r3, #27]
 8010c18:	e002      	b.n	8010c20 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f001 f8fe 	bl	8011e1c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8010c20:	e04f      	b.n	8010cc2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fd f8d3 	bl	800ddf8 <pbuf_clen>
 8010c52:	4603      	mov	r3, r0
 8010c54:	429c      	cmp	r4, r3
 8010c56:	d206      	bcs.n	8010c66 <tcp_receive+0x41a>
 8010c58:	4b2a      	ldr	r3, [pc, #168]	; (8010d04 <tcp_receive+0x4b8>)
 8010c5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010c5e:	492a      	ldr	r1, [pc, #168]	; (8010d08 <tcp_receive+0x4bc>)
 8010c60:	482a      	ldr	r0, [pc, #168]	; (8010d0c <tcp_receive+0x4c0>)
 8010c62:	f006 fdd1 	bl	8017808 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fd f8c4 	bl	800ddf8 <pbuf_clen>
 8010c70:	4603      	mov	r3, r0
 8010c72:	461a      	mov	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c7a:	1a9b      	subs	r3, r3, r2
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c86:	891a      	ldrh	r2, [r3, #8]
 8010c88:	4b21      	ldr	r3, [pc, #132]	; (8010d10 <tcp_receive+0x4c4>)
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	4b1f      	ldr	r3, [pc, #124]	; (8010d10 <tcp_receive+0x4c4>)
 8010c92:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c96:	f7fe f978 	bl	800ef8a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00e      	beq.n	8010cc2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10a      	bne.n	8010cc2 <tcp_receive+0x476>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d106      	bne.n	8010cc2 <tcp_receive+0x476>
 8010cb4:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <tcp_receive+0x4b8>)
 8010cb6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010cba:	4916      	ldr	r1, [pc, #88]	; (8010d14 <tcp_receive+0x4c8>)
 8010cbc:	4813      	ldr	r0, [pc, #76]	; (8010d0c <tcp_receive+0x4c0>)
 8010cbe:	f006 fda3 	bl	8017808 <iprintf>
    while (pcb->unsent != NULL &&
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d036      	beq.n	8010d38 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010cca:	4b13      	ldr	r3, [pc, #76]	; (8010d18 <tcp_receive+0x4cc>)
 8010ccc:	681c      	ldr	r4, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fb fdde 	bl	800c898 <lwip_htonl>
 8010cdc:	4605      	mov	r5, r0
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ce2:	891b      	ldrh	r3, [r3, #8]
 8010ce4:	461e      	mov	r6, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	899b      	ldrh	r3, [r3, #12]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fb fdc3 	bl	800c87c <lwip_htons>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	f003 0303 	and.w	r3, r3, #3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00d      	beq.n	8010d1c <tcp_receive+0x4d0>
 8010d00:	2301      	movs	r3, #1
 8010d02:	e00c      	b.n	8010d1e <tcp_receive+0x4d2>
 8010d04:	080195e8 	.word	0x080195e8
 8010d08:	0801984c 	.word	0x0801984c
 8010d0c:	08019650 	.word	0x08019650
 8010d10:	200040dc 	.word	0x200040dc
 8010d14:	08019874 	.word	0x08019874
 8010d18:	200040d8 	.word	0x200040d8
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	4433      	add	r3, r6
 8010d20:	442b      	add	r3, r5
 8010d22:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	db07      	blt.n	8010d38 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010d28:	4b8d      	ldr	r3, [pc, #564]	; (8010f60 <tcp_receive+0x714>)
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	f77f af75 	ble.w	8010c22 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d3e:	4b89      	ldr	r3, [pc, #548]	; (8010f64 <tcp_receive+0x718>)
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	4413      	add	r3, r2
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d052      	beq.n	8010dfa <tcp_receive+0x5ae>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d58:	4b81      	ldr	r3, [pc, #516]	; (8010f60 <tcp_receive+0x714>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	da4b      	bge.n	8010dfa <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d62:	4b81      	ldr	r3, [pc, #516]	; (8010f68 <tcp_receive+0x71c>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010d74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d7c:	10db      	asrs	r3, r3, #3
 8010d7e:	b21b      	sxth	r3, r3
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	1ad3      	subs	r3, r2, r3
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d92:	4413      	add	r3, r2
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	b21a      	sxth	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010d9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	da03      	bge.n	8010dac <tcp_receive+0x560>
        m = -m;
 8010da4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010da6:	425b      	negs	r3, r3
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010dac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010db4:	109b      	asrs	r3, r3, #2
 8010db6:	b21b      	sxth	r3, r3
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010dca:	4413      	add	r3, r2
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	b21a      	sxth	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dda:	10db      	asrs	r3, r3, #3
 8010ddc:	b21b      	sxth	r3, r3
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	4413      	add	r3, r2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	b21a      	sxth	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010dfa:	4b5c      	ldr	r3, [pc, #368]	; (8010f6c <tcp_receive+0x720>)
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f000 84f1 	beq.w	80117e6 <tcp_receive+0xf9a>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7d1b      	ldrb	r3, [r3, #20]
 8010e08:	2b06      	cmp	r3, #6
 8010e0a:	f200 84ec 	bhi.w	80117e6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e12:	4b57      	ldr	r3, [pc, #348]	; (8010f70 <tcp_receive+0x724>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f2c0 80b8 	blt.w	8010f90 <tcp_receive+0x744>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e24:	4b51      	ldr	r3, [pc, #324]	; (8010f6c <tcp_receive+0x720>)
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	4b51      	ldr	r3, [pc, #324]	; (8010f70 <tcp_receive+0x724>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	440b      	add	r3, r1
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	3301      	adds	r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f300 80ab 	bgt.w	8010f90 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e3a:	4b4e      	ldr	r3, [pc, #312]	; (8010f74 <tcp_receive+0x728>)
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e44:	4b4a      	ldr	r3, [pc, #296]	; (8010f70 <tcp_receive+0x724>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e4c:	4b49      	ldr	r3, [pc, #292]	; (8010f74 <tcp_receive+0x728>)
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d106      	bne.n	8010e62 <tcp_receive+0x616>
 8010e54:	4b48      	ldr	r3, [pc, #288]	; (8010f78 <tcp_receive+0x72c>)
 8010e56:	f240 523c 	movw	r2, #1340	; 0x53c
 8010e5a:	4948      	ldr	r1, [pc, #288]	; (8010f7c <tcp_receive+0x730>)
 8010e5c:	4848      	ldr	r0, [pc, #288]	; (8010f80 <tcp_receive+0x734>)
 8010e5e:	f006 fcd3 	bl	8017808 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	dd06      	ble.n	8010e7a <tcp_receive+0x62e>
 8010e6c:	4b42      	ldr	r3, [pc, #264]	; (8010f78 <tcp_receive+0x72c>)
 8010e6e:	f240 523d 	movw	r2, #1341	; 0x53d
 8010e72:	4944      	ldr	r1, [pc, #272]	; (8010f84 <tcp_receive+0x738>)
 8010e74:	4842      	ldr	r0, [pc, #264]	; (8010f80 <tcp_receive+0x734>)
 8010e76:	f006 fcc7 	bl	8017808 <iprintf>
      if (inseg.p->len < off) {
 8010e7a:	4b3e      	ldr	r3, [pc, #248]	; (8010f74 <tcp_receive+0x728>)
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	895b      	ldrh	r3, [r3, #10]
 8010e80:	461a      	mov	r2, r3
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	4293      	cmp	r3, r2
 8010e86:	dd3e      	ble.n	8010f06 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010e88:	4b3a      	ldr	r3, [pc, #232]	; (8010f74 <tcp_receive+0x728>)
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	891b      	ldrh	r3, [r3, #8]
 8010e8e:	461a      	mov	r2, r3
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	4293      	cmp	r3, r2
 8010e94:	dd06      	ble.n	8010ea4 <tcp_receive+0x658>
 8010e96:	4b38      	ldr	r3, [pc, #224]	; (8010f78 <tcp_receive+0x72c>)
 8010e98:	f240 523f 	movw	r2, #1343	; 0x53f
 8010e9c:	493a      	ldr	r1, [pc, #232]	; (8010f88 <tcp_receive+0x73c>)
 8010e9e:	4838      	ldr	r0, [pc, #224]	; (8010f80 <tcp_receive+0x734>)
 8010ea0:	f006 fcb2 	bl	8017808 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010ea4:	4b33      	ldr	r3, [pc, #204]	; (8010f74 <tcp_receive+0x728>)
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	891a      	ldrh	r2, [r3, #8]
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010eb2:	e00e      	b.n	8010ed2 <tcp_receive+0x686>
          off -= p->len;
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebc:	1a9b      	subs	r3, r3, r2
 8010ebe:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	8a3a      	ldrh	r2, [r7, #16]
 8010ec4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	895b      	ldrh	r3, [r3, #10]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eda:	4293      	cmp	r3, r2
 8010edc:	dcea      	bgt.n	8010eb4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	425b      	negs	r3, r3
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	b21b      	sxth	r3, r3
 8010ee8:	4619      	mov	r1, r3
 8010eea:	69b8      	ldr	r0, [r7, #24]
 8010eec:	f7fc fec6 	bl	800dc7c <pbuf_header>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d01c      	beq.n	8010f30 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010ef6:	4b20      	ldr	r3, [pc, #128]	; (8010f78 <tcp_receive+0x72c>)
 8010ef8:	f240 524c 	movw	r2, #1356	; 0x54c
 8010efc:	4923      	ldr	r1, [pc, #140]	; (8010f8c <tcp_receive+0x740>)
 8010efe:	4820      	ldr	r0, [pc, #128]	; (8010f80 <tcp_receive+0x734>)
 8010f00:	f006 fc82 	bl	8017808 <iprintf>
 8010f04:	e014      	b.n	8010f30 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010f06:	4b1b      	ldr	r3, [pc, #108]	; (8010f74 <tcp_receive+0x728>)
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f0c:	b292      	uxth	r2, r2
 8010f0e:	4252      	negs	r2, r2
 8010f10:	b292      	uxth	r2, r2
 8010f12:	b212      	sxth	r2, r2
 8010f14:	4611      	mov	r1, r2
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fc feb0 	bl	800dc7c <pbuf_header>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d006      	beq.n	8010f30 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010f22:	4b15      	ldr	r3, [pc, #84]	; (8010f78 <tcp_receive+0x72c>)
 8010f24:	f240 5251 	movw	r2, #1361	; 0x551
 8010f28:	4918      	ldr	r1, [pc, #96]	; (8010f8c <tcp_receive+0x740>)
 8010f2a:	4815      	ldr	r0, [pc, #84]	; (8010f80 <tcp_receive+0x734>)
 8010f2c:	f006 fc6c 	bl	8017808 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010f30:	4b10      	ldr	r3, [pc, #64]	; (8010f74 <tcp_receive+0x728>)
 8010f32:	891a      	ldrh	r2, [r3, #8]
 8010f34:	4b0e      	ldr	r3, [pc, #56]	; (8010f70 <tcp_receive+0x724>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	b299      	uxth	r1, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	1acb      	subs	r3, r1, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4413      	add	r3, r2
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	4b0a      	ldr	r3, [pc, #40]	; (8010f74 <tcp_receive+0x728>)
 8010f4a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f50:	4a07      	ldr	r2, [pc, #28]	; (8010f70 <tcp_receive+0x724>)
 8010f52:	6013      	str	r3, [r2, #0]
 8010f54:	4b07      	ldr	r3, [pc, #28]	; (8010f74 <tcp_receive+0x728>)
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	4a05      	ldr	r2, [pc, #20]	; (8010f70 <tcp_receive+0x724>)
 8010f5a:	6812      	ldr	r2, [r2, #0]
 8010f5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f5e:	e025      	b.n	8010fac <tcp_receive+0x760>
 8010f60:	200040d8 	.word	0x200040d8
 8010f64:	200040dc 	.word	0x200040dc
 8010f68:	20007994 	.word	0x20007994
 8010f6c:	200040de 	.word	0x200040de
 8010f70:	200040d4 	.word	0x200040d4
 8010f74:	200040b4 	.word	0x200040b4
 8010f78:	080195e8 	.word	0x080195e8
 8010f7c:	08019894 	.word	0x08019894
 8010f80:	08019650 	.word	0x08019650
 8010f84:	080198a4 	.word	0x080198a4
 8010f88:	080198b4 	.word	0x080198b4
 8010f8c:	080198c4 	.word	0x080198c4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f90:	4b87      	ldr	r3, [pc, #540]	; (80111b0 <tcp_receive+0x964>)
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	da06      	bge.n	8010fac <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	7e9b      	ldrb	r3, [r3, #26]
 8010fa2:	f043 0302 	orr.w	r3, r3, #2
 8010fa6:	b2da      	uxtb	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fac:	4b80      	ldr	r3, [pc, #512]	; (80111b0 <tcp_receive+0x964>)
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f2c0 8410 	blt.w	80117dc <tcp_receive+0xf90>
 8010fbc:	4b7c      	ldr	r3, [pc, #496]	; (80111b0 <tcp_receive+0x964>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc4:	6879      	ldr	r1, [r7, #4]
 8010fc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fc8:	440b      	add	r3, r1
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	3301      	adds	r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f300 8404 	bgt.w	80117dc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fd8:	4b75      	ldr	r3, [pc, #468]	; (80111b0 <tcp_receive+0x964>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	f040 8287 	bne.w	80114f0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010fe2:	4b74      	ldr	r3, [pc, #464]	; (80111b4 <tcp_receive+0x968>)
 8010fe4:	891c      	ldrh	r4, [r3, #8]
 8010fe6:	4b73      	ldr	r3, [pc, #460]	; (80111b4 <tcp_receive+0x968>)
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fb fc44 	bl	800c87c <lwip_htons>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d001      	beq.n	8011002 <tcp_receive+0x7b6>
 8010ffe:	2301      	movs	r3, #1
 8011000:	e000      	b.n	8011004 <tcp_receive+0x7b8>
 8011002:	2300      	movs	r3, #0
 8011004:	4423      	add	r3, r4
 8011006:	b29a      	uxth	r2, r3
 8011008:	4b6b      	ldr	r3, [pc, #428]	; (80111b8 <tcp_receive+0x96c>)
 801100a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011010:	4b69      	ldr	r3, [pc, #420]	; (80111b8 <tcp_receive+0x96c>)
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	429a      	cmp	r2, r3
 8011016:	d26e      	bcs.n	80110f6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011018:	4b66      	ldr	r3, [pc, #408]	; (80111b4 <tcp_receive+0x968>)
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	899b      	ldrh	r3, [r3, #12]
 801101e:	b29b      	uxth	r3, r3
 8011020:	4618      	mov	r0, r3
 8011022:	f7fb fc2b 	bl	800c87c <lwip_htons>
 8011026:	4603      	mov	r3, r0
 8011028:	f003 0301 	and.w	r3, r3, #1
 801102c:	2b00      	cmp	r3, #0
 801102e:	d01b      	beq.n	8011068 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011030:	4b60      	ldr	r3, [pc, #384]	; (80111b4 <tcp_receive+0x968>)
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	899b      	ldrh	r3, [r3, #12]
 8011036:	b29b      	uxth	r3, r3
 8011038:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801103c:	b29c      	uxth	r4, r3
 801103e:	4b5d      	ldr	r3, [pc, #372]	; (80111b4 <tcp_receive+0x968>)
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	899b      	ldrh	r3, [r3, #12]
 8011044:	b29b      	uxth	r3, r3
 8011046:	4618      	mov	r0, r3
 8011048:	f7fb fc18 	bl	800c87c <lwip_htons>
 801104c:	4603      	mov	r3, r0
 801104e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011052:	b29b      	uxth	r3, r3
 8011054:	4618      	mov	r0, r3
 8011056:	f7fb fc11 	bl	800c87c <lwip_htons>
 801105a:	4603      	mov	r3, r0
 801105c:	461a      	mov	r2, r3
 801105e:	4b55      	ldr	r3, [pc, #340]	; (80111b4 <tcp_receive+0x968>)
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	4322      	orrs	r2, r4
 8011064:	b292      	uxth	r2, r2
 8011066:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801106c:	4b51      	ldr	r3, [pc, #324]	; (80111b4 <tcp_receive+0x968>)
 801106e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011070:	4b50      	ldr	r3, [pc, #320]	; (80111b4 <tcp_receive+0x968>)
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	899b      	ldrh	r3, [r3, #12]
 8011076:	b29b      	uxth	r3, r3
 8011078:	4618      	mov	r0, r3
 801107a:	f7fb fbff 	bl	800c87c <lwip_htons>
 801107e:	4603      	mov	r3, r0
 8011080:	f003 0302 	and.w	r3, r3, #2
 8011084:	2b00      	cmp	r3, #0
 8011086:	d005      	beq.n	8011094 <tcp_receive+0x848>
            inseg.len -= 1;
 8011088:	4b4a      	ldr	r3, [pc, #296]	; (80111b4 <tcp_receive+0x968>)
 801108a:	891b      	ldrh	r3, [r3, #8]
 801108c:	3b01      	subs	r3, #1
 801108e:	b29a      	uxth	r2, r3
 8011090:	4b48      	ldr	r3, [pc, #288]	; (80111b4 <tcp_receive+0x968>)
 8011092:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011094:	4b47      	ldr	r3, [pc, #284]	; (80111b4 <tcp_receive+0x968>)
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	4b46      	ldr	r3, [pc, #280]	; (80111b4 <tcp_receive+0x968>)
 801109a:	891b      	ldrh	r3, [r3, #8]
 801109c:	4619      	mov	r1, r3
 801109e:	4610      	mov	r0, r2
 80110a0:	f7fc fc9c 	bl	800d9dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110a4:	4b43      	ldr	r3, [pc, #268]	; (80111b4 <tcp_receive+0x968>)
 80110a6:	891c      	ldrh	r4, [r3, #8]
 80110a8:	4b42      	ldr	r3, [pc, #264]	; (80111b4 <tcp_receive+0x968>)
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fb fbe3 	bl	800c87c <lwip_htons>
 80110b6:	4603      	mov	r3, r0
 80110b8:	f003 0303 	and.w	r3, r3, #3
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d001      	beq.n	80110c4 <tcp_receive+0x878>
 80110c0:	2301      	movs	r3, #1
 80110c2:	e000      	b.n	80110c6 <tcp_receive+0x87a>
 80110c4:	2300      	movs	r3, #0
 80110c6:	4423      	add	r3, r4
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	4b3b      	ldr	r3, [pc, #236]	; (80111b8 <tcp_receive+0x96c>)
 80110cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80110ce:	4b3a      	ldr	r3, [pc, #232]	; (80111b8 <tcp_receive+0x96c>)
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	4b36      	ldr	r3, [pc, #216]	; (80111b0 <tcp_receive+0x964>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	441a      	add	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110e2:	440b      	add	r3, r1
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d006      	beq.n	80110f6 <tcp_receive+0x8aa>
 80110e8:	4b34      	ldr	r3, [pc, #208]	; (80111bc <tcp_receive+0x970>)
 80110ea:	f240 527f 	movw	r2, #1407	; 0x57f
 80110ee:	4934      	ldr	r1, [pc, #208]	; (80111c0 <tcp_receive+0x974>)
 80110f0:	4834      	ldr	r0, [pc, #208]	; (80111c4 <tcp_receive+0x978>)
 80110f2:	f006 fb89 	bl	8017808 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 80e1 	beq.w	80112c2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011100:	4b2c      	ldr	r3, [pc, #176]	; (80111b4 <tcp_receive+0x968>)
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	899b      	ldrh	r3, [r3, #12]
 8011106:	b29b      	uxth	r3, r3
 8011108:	4618      	mov	r0, r3
 801110a:	f7fb fbb7 	bl	800c87c <lwip_htons>
 801110e:	4603      	mov	r3, r0
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	2b00      	cmp	r3, #0
 8011116:	d010      	beq.n	801113a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011118:	e00a      	b.n	8011130 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801111e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801112a:	68b8      	ldr	r0, [r7, #8]
 801112c:	f7fd ff2d 	bl	800ef8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011134:	2b00      	cmp	r3, #0
 8011136:	d1f0      	bne.n	801111a <tcp_receive+0x8ce>
 8011138:	e0c3      	b.n	80112c2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801113e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011140:	e04f      	b.n	80111e2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	899b      	ldrh	r3, [r3, #12]
 8011148:	b29b      	uxth	r3, r3
 801114a:	4618      	mov	r0, r3
 801114c:	f7fb fb96 	bl	800c87c <lwip_htons>
 8011150:	4603      	mov	r3, r0
 8011152:	f003 0301 	and.w	r3, r3, #1
 8011156:	2b00      	cmp	r3, #0
 8011158:	d03b      	beq.n	80111d2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801115a:	4b16      	ldr	r3, [pc, #88]	; (80111b4 <tcp_receive+0x968>)
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	899b      	ldrh	r3, [r3, #12]
 8011160:	b29b      	uxth	r3, r3
 8011162:	4618      	mov	r0, r3
 8011164:	f7fb fb8a 	bl	800c87c <lwip_htons>
 8011168:	4603      	mov	r3, r0
 801116a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801116e:	2b00      	cmp	r3, #0
 8011170:	d12f      	bne.n	80111d2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011172:	4b10      	ldr	r3, [pc, #64]	; (80111b4 <tcp_receive+0x968>)
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	899b      	ldrh	r3, [r3, #12]
 8011178:	b29c      	uxth	r4, r3
 801117a:	2001      	movs	r0, #1
 801117c:	f7fb fb7e 	bl	800c87c <lwip_htons>
 8011180:	4603      	mov	r3, r0
 8011182:	461a      	mov	r2, r3
 8011184:	4b0b      	ldr	r3, [pc, #44]	; (80111b4 <tcp_receive+0x968>)
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	4322      	orrs	r2, r4
 801118a:	b292      	uxth	r2, r2
 801118c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801118e:	4b09      	ldr	r3, [pc, #36]	; (80111b4 <tcp_receive+0x968>)
 8011190:	891c      	ldrh	r4, [r3, #8]
 8011192:	4b08      	ldr	r3, [pc, #32]	; (80111b4 <tcp_receive+0x968>)
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	899b      	ldrh	r3, [r3, #12]
 8011198:	b29b      	uxth	r3, r3
 801119a:	4618      	mov	r0, r3
 801119c:	f7fb fb6e 	bl	800c87c <lwip_htons>
 80111a0:	4603      	mov	r3, r0
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00e      	beq.n	80111c8 <tcp_receive+0x97c>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e00d      	b.n	80111ca <tcp_receive+0x97e>
 80111ae:	bf00      	nop
 80111b0:	200040d4 	.word	0x200040d4
 80111b4:	200040b4 	.word	0x200040b4
 80111b8:	200040de 	.word	0x200040de
 80111bc:	080195e8 	.word	0x080195e8
 80111c0:	080198d8 	.word	0x080198d8
 80111c4:	08019650 	.word	0x08019650
 80111c8:	2300      	movs	r3, #0
 80111ca:	4423      	add	r3, r4
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	4b95      	ldr	r3, [pc, #596]	; (8011424 <tcp_receive+0xbd8>)
 80111d0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80111dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111de:	f7fd fed4 	bl	800ef8a <tcp_seg_free>
            while (next &&
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00e      	beq.n	8011206 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111e8:	4b8e      	ldr	r3, [pc, #568]	; (8011424 <tcp_receive+0xbd8>)
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b8e      	ldr	r3, [pc, #568]	; (8011428 <tcp_receive+0xbdc>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	441a      	add	r2, r3
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111fc:	8909      	ldrh	r1, [r1, #8]
 80111fe:	440b      	add	r3, r1
 8011200:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011202:	2b00      	cmp	r3, #0
 8011204:	da9d      	bge.n	8011142 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	2b00      	cmp	r3, #0
 801120a:	d057      	beq.n	80112bc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801120c:	4b85      	ldr	r3, [pc, #532]	; (8011424 <tcp_receive+0xbd8>)
 801120e:	881b      	ldrh	r3, [r3, #0]
 8011210:	461a      	mov	r2, r3
 8011212:	4b85      	ldr	r3, [pc, #532]	; (8011428 <tcp_receive+0xbdc>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	441a      	add	r2, r3
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011220:	2b00      	cmp	r3, #0
 8011222:	dd4b      	ble.n	80112bc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	b29a      	uxth	r2, r3
 801122c:	4b7e      	ldr	r3, [pc, #504]	; (8011428 <tcp_receive+0xbdc>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	b29b      	uxth	r3, r3
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	b29a      	uxth	r2, r3
 8011236:	4b7d      	ldr	r3, [pc, #500]	; (801142c <tcp_receive+0xbe0>)
 8011238:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801123a:	4b7c      	ldr	r3, [pc, #496]	; (801142c <tcp_receive+0xbe0>)
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	899b      	ldrh	r3, [r3, #12]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4618      	mov	r0, r3
 8011244:	f7fb fb1a 	bl	800c87c <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	f003 0302 	and.w	r3, r3, #2
 801124e:	2b00      	cmp	r3, #0
 8011250:	d005      	beq.n	801125e <tcp_receive+0xa12>
                inseg.len -= 1;
 8011252:	4b76      	ldr	r3, [pc, #472]	; (801142c <tcp_receive+0xbe0>)
 8011254:	891b      	ldrh	r3, [r3, #8]
 8011256:	3b01      	subs	r3, #1
 8011258:	b29a      	uxth	r2, r3
 801125a:	4b74      	ldr	r3, [pc, #464]	; (801142c <tcp_receive+0xbe0>)
 801125c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801125e:	4b73      	ldr	r3, [pc, #460]	; (801142c <tcp_receive+0xbe0>)
 8011260:	685a      	ldr	r2, [r3, #4]
 8011262:	4b72      	ldr	r3, [pc, #456]	; (801142c <tcp_receive+0xbe0>)
 8011264:	891b      	ldrh	r3, [r3, #8]
 8011266:	4619      	mov	r1, r3
 8011268:	4610      	mov	r0, r2
 801126a:	f7fc fbb7 	bl	800d9dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801126e:	4b6f      	ldr	r3, [pc, #444]	; (801142c <tcp_receive+0xbe0>)
 8011270:	891c      	ldrh	r4, [r3, #8]
 8011272:	4b6e      	ldr	r3, [pc, #440]	; (801142c <tcp_receive+0xbe0>)
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	899b      	ldrh	r3, [r3, #12]
 8011278:	b29b      	uxth	r3, r3
 801127a:	4618      	mov	r0, r3
 801127c:	f7fb fafe 	bl	800c87c <lwip_htons>
 8011280:	4603      	mov	r3, r0
 8011282:	f003 0303 	and.w	r3, r3, #3
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <tcp_receive+0xa42>
 801128a:	2301      	movs	r3, #1
 801128c:	e000      	b.n	8011290 <tcp_receive+0xa44>
 801128e:	2300      	movs	r3, #0
 8011290:	4423      	add	r3, r4
 8011292:	b29a      	uxth	r2, r3
 8011294:	4b63      	ldr	r3, [pc, #396]	; (8011424 <tcp_receive+0xbd8>)
 8011296:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011298:	4b62      	ldr	r3, [pc, #392]	; (8011424 <tcp_receive+0xbd8>)
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	461a      	mov	r2, r3
 801129e:	4b62      	ldr	r3, [pc, #392]	; (8011428 <tcp_receive+0xbdc>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	441a      	add	r2, r3
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d006      	beq.n	80112bc <tcp_receive+0xa70>
 80112ae:	4b60      	ldr	r3, [pc, #384]	; (8011430 <tcp_receive+0xbe4>)
 80112b0:	f240 52af 	movw	r2, #1455	; 0x5af
 80112b4:	495f      	ldr	r1, [pc, #380]	; (8011434 <tcp_receive+0xbe8>)
 80112b6:	4860      	ldr	r0, [pc, #384]	; (8011438 <tcp_receive+0xbec>)
 80112b8:	f006 faa6 	bl	8017808 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112c0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80112c2:	4b58      	ldr	r3, [pc, #352]	; (8011424 <tcp_receive+0xbd8>)
 80112c4:	881b      	ldrh	r3, [r3, #0]
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b57      	ldr	r3, [pc, #348]	; (8011428 <tcp_receive+0xbdc>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	441a      	add	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112d6:	4b53      	ldr	r3, [pc, #332]	; (8011424 <tcp_receive+0xbd8>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d206      	bcs.n	80112ec <tcp_receive+0xaa0>
 80112de:	4b54      	ldr	r3, [pc, #336]	; (8011430 <tcp_receive+0xbe4>)
 80112e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80112e4:	4955      	ldr	r1, [pc, #340]	; (801143c <tcp_receive+0xbf0>)
 80112e6:	4854      	ldr	r0, [pc, #336]	; (8011438 <tcp_receive+0xbec>)
 80112e8:	f006 fa8e 	bl	8017808 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112f0:	4b4c      	ldr	r3, [pc, #304]	; (8011424 <tcp_receive+0xbd8>)
 80112f2:	881b      	ldrh	r3, [r3, #0]
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7fd f9fb 	bl	800e6f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011302:	4b4a      	ldr	r3, [pc, #296]	; (801142c <tcp_receive+0xbe0>)
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	891b      	ldrh	r3, [r3, #8]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d006      	beq.n	801131a <tcp_receive+0xace>
          recv_data = inseg.p;
 801130c:	4b47      	ldr	r3, [pc, #284]	; (801142c <tcp_receive+0xbe0>)
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	4a4b      	ldr	r2, [pc, #300]	; (8011440 <tcp_receive+0xbf4>)
 8011312:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011314:	4b45      	ldr	r3, [pc, #276]	; (801142c <tcp_receive+0xbe0>)
 8011316:	2200      	movs	r2, #0
 8011318:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801131a:	4b44      	ldr	r3, [pc, #272]	; (801142c <tcp_receive+0xbe0>)
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	899b      	ldrh	r3, [r3, #12]
 8011320:	b29b      	uxth	r3, r3
 8011322:	4618      	mov	r0, r3
 8011324:	f7fb faaa 	bl	800c87c <lwip_htons>
 8011328:	4603      	mov	r3, r0
 801132a:	f003 0301 	and.w	r3, r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	f000 80b4 	beq.w	801149c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011334:	4b43      	ldr	r3, [pc, #268]	; (8011444 <tcp_receive+0xbf8>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f043 0320 	orr.w	r3, r3, #32
 801133c:	b2da      	uxtb	r2, r3
 801133e:	4b41      	ldr	r3, [pc, #260]	; (8011444 <tcp_receive+0xbf8>)
 8011340:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011342:	e0ab      	b.n	801149c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011348:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	4a35      	ldr	r2, [pc, #212]	; (8011428 <tcp_receive+0xbdc>)
 8011354:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	891b      	ldrh	r3, [r3, #8]
 801135a:	461c      	mov	r4, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	b29b      	uxth	r3, r3
 8011364:	4618      	mov	r0, r3
 8011366:	f7fb fa89 	bl	800c87c <lwip_htons>
 801136a:	4603      	mov	r3, r0
 801136c:	f003 0303 	and.w	r3, r3, #3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d001      	beq.n	8011378 <tcp_receive+0xb2c>
 8011374:	2301      	movs	r3, #1
 8011376:	e000      	b.n	801137a <tcp_receive+0xb2e>
 8011378:	2300      	movs	r3, #0
 801137a:	191a      	adds	r2, r3, r4
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011380:	441a      	add	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801138a:	461c      	mov	r4, r3
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	891b      	ldrh	r3, [r3, #8]
 8011390:	461d      	mov	r5, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	899b      	ldrh	r3, [r3, #12]
 8011398:	b29b      	uxth	r3, r3
 801139a:	4618      	mov	r0, r3
 801139c:	f7fb fa6e 	bl	800c87c <lwip_htons>
 80113a0:	4603      	mov	r3, r0
 80113a2:	f003 0303 	and.w	r3, r3, #3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <tcp_receive+0xb62>
 80113aa:	2301      	movs	r3, #1
 80113ac:	e000      	b.n	80113b0 <tcp_receive+0xb64>
 80113ae:	2300      	movs	r3, #0
 80113b0:	442b      	add	r3, r5
 80113b2:	429c      	cmp	r4, r3
 80113b4:	d206      	bcs.n	80113c4 <tcp_receive+0xb78>
 80113b6:	4b1e      	ldr	r3, [pc, #120]	; (8011430 <tcp_receive+0xbe4>)
 80113b8:	f240 52de 	movw	r2, #1502	; 0x5de
 80113bc:	4922      	ldr	r1, [pc, #136]	; (8011448 <tcp_receive+0xbfc>)
 80113be:	481e      	ldr	r0, [pc, #120]	; (8011438 <tcp_receive+0xbec>)
 80113c0:	f006 fa22 	bl	8017808 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	891b      	ldrh	r3, [r3, #8]
 80113c8:	461c      	mov	r4, r3
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	899b      	ldrh	r3, [r3, #12]
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fb fa52 	bl	800c87c <lwip_htons>
 80113d8:	4603      	mov	r3, r0
 80113da:	f003 0303 	and.w	r3, r3, #3
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d001      	beq.n	80113e6 <tcp_receive+0xb9a>
 80113e2:	2301      	movs	r3, #1
 80113e4:	e000      	b.n	80113e8 <tcp_receive+0xb9c>
 80113e6:	2300      	movs	r3, #0
 80113e8:	1919      	adds	r1, r3, r4
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113ee:	b28b      	uxth	r3, r1
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7fd f97d 	bl	800e6f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	891b      	ldrh	r3, [r3, #8]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d028      	beq.n	801145a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011408:	4b0d      	ldr	r3, [pc, #52]	; (8011440 <tcp_receive+0xbf4>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d01d      	beq.n	801144c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8011410:	4b0b      	ldr	r3, [pc, #44]	; (8011440 <tcp_receive+0xbf4>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	f7fc fd2c 	bl	800de78 <pbuf_cat>
 8011420:	e018      	b.n	8011454 <tcp_receive+0xc08>
 8011422:	bf00      	nop
 8011424:	200040de 	.word	0x200040de
 8011428:	200040d4 	.word	0x200040d4
 801142c:	200040b4 	.word	0x200040b4
 8011430:	080195e8 	.word	0x080195e8
 8011434:	08019910 	.word	0x08019910
 8011438:	08019650 	.word	0x08019650
 801143c:	0801994c 	.word	0x0801994c
 8011440:	200040e4 	.word	0x200040e4
 8011444:	200040e1 	.word	0x200040e1
 8011448:	0801996c 	.word	0x0801996c
            } else {
              recv_data = cseg->p;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4a71      	ldr	r2, [pc, #452]	; (8011618 <tcp_receive+0xdcc>)
 8011452:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2200      	movs	r2, #0
 8011458:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	899b      	ldrh	r3, [r3, #12]
 8011460:	b29b      	uxth	r3, r3
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb fa0a 	bl	800c87c <lwip_htons>
 8011468:	4603      	mov	r3, r0
 801146a:	f003 0301 	and.w	r3, r3, #1
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00d      	beq.n	801148e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011472:	4b6a      	ldr	r3, [pc, #424]	; (801161c <tcp_receive+0xdd0>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	f043 0320 	orr.w	r3, r3, #32
 801147a:	b2da      	uxtb	r2, r3
 801147c:	4b67      	ldr	r3, [pc, #412]	; (801161c <tcp_receive+0xdd0>)
 801147e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b04      	cmp	r3, #4
 8011486:	d102      	bne.n	801148e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2207      	movs	r2, #7
 801148c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7fd fd77 	bl	800ef8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d008      	beq.n	80114b6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80114b0:	429a      	cmp	r2, r3
 80114b2:	f43f af47 	beq.w	8011344 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7e9b      	ldrb	r3, [r3, #26]
 80114ba:	f003 0301 	and.w	r3, r3, #1
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d00e      	beq.n	80114e0 <tcp_receive+0xc94>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7e9b      	ldrb	r3, [r3, #26]
 80114c6:	f023 0301 	bic.w	r3, r3, #1
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	769a      	strb	r2, [r3, #26]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	7e9b      	ldrb	r3, [r3, #26]
 80114d4:	f043 0302 	orr.w	r3, r3, #2
 80114d8:	b2da      	uxtb	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114de:	e181      	b.n	80117e4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7e9b      	ldrb	r3, [r3, #26]
 80114e4:	f043 0301 	orr.w	r3, r3, #1
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114ee:	e179      	b.n	80117e4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 fc93 	bl	8011e1c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d106      	bne.n	801150c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80114fe:	4848      	ldr	r0, [pc, #288]	; (8011620 <tcp_receive+0xdd4>)
 8011500:	f7fd fd5b 	bl	800efba <tcp_seg_copy>
 8011504:	4602      	mov	r2, r0
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801150a:	e16b      	b.n	80117e4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801150c:	2300      	movs	r3, #0
 801150e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011516:	e150      	b.n	80117ba <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	685a      	ldr	r2, [r3, #4]
 801151e:	4b41      	ldr	r3, [pc, #260]	; (8011624 <tcp_receive+0xdd8>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	429a      	cmp	r2, r3
 8011524:	d11d      	bne.n	8011562 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011526:	4b3e      	ldr	r3, [pc, #248]	; (8011620 <tcp_receive+0xdd4>)
 8011528:	891a      	ldrh	r2, [r3, #8]
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	891b      	ldrh	r3, [r3, #8]
 801152e:	429a      	cmp	r2, r3
 8011530:	f240 8148 	bls.w	80117c4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011534:	483a      	ldr	r0, [pc, #232]	; (8011620 <tcp_receive+0xdd4>)
 8011536:	f7fd fd40 	bl	800efba <tcp_seg_copy>
 801153a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 8142 	beq.w	80117c8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8011544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011546:	2b00      	cmp	r3, #0
 8011548:	d003      	beq.n	8011552 <tcp_receive+0xd06>
                    prev->next = cseg;
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	601a      	str	r2, [r3, #0]
 8011550:	e002      	b.n	8011558 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f7ff f900 	bl	8010760 <tcp_oos_insert_segment>
                }
                break;
 8011560:	e132      	b.n	80117c8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011564:	2b00      	cmp	r3, #0
 8011566:	d117      	bne.n	8011598 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011568:	4b2e      	ldr	r3, [pc, #184]	; (8011624 <tcp_receive+0xdd8>)
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	2b00      	cmp	r3, #0
 8011576:	da57      	bge.n	8011628 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011578:	4829      	ldr	r0, [pc, #164]	; (8011620 <tcp_receive+0xdd4>)
 801157a:	f7fd fd1e 	bl	800efba <tcp_seg_copy>
 801157e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2b00      	cmp	r3, #0
 8011584:	f000 8122 	beq.w	80117cc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801158e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f7ff f8e5 	bl	8010760 <tcp_oos_insert_segment>
                  }
                  break;
 8011596:	e119      	b.n	80117cc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011598:	4b22      	ldr	r3, [pc, #136]	; (8011624 <tcp_receive+0xdd8>)
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	3b01      	subs	r3, #1
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	db3e      	blt.n	8011628 <tcp_receive+0xddc>
 80115aa:	4b1e      	ldr	r3, [pc, #120]	; (8011624 <tcp_receive+0xdd8>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	3301      	adds	r3, #1
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dc35      	bgt.n	8011628 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80115bc:	4818      	ldr	r0, [pc, #96]	; (8011620 <tcp_receive+0xdd4>)
 80115be:	f7fd fcfc 	bl	800efba <tcp_seg_copy>
 80115c2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f000 8102 	beq.w	80117d0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d4:	8912      	ldrh	r2, [r2, #8]
 80115d6:	441a      	add	r2, r3
 80115d8:	4b12      	ldr	r3, [pc, #72]	; (8011624 <tcp_receive+0xdd8>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	dd12      	ble.n	8011608 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115e2:	4b10      	ldr	r3, [pc, #64]	; (8011624 <tcp_receive+0xdd8>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80115f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	891b      	ldrh	r3, [r3, #8]
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7fc f9ea 	bl	800d9dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801160e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f7ff f8a5 	bl	8010760 <tcp_oos_insert_segment>
                  }
                  break;
 8011616:	e0db      	b.n	80117d0 <tcp_receive+0xf84>
 8011618:	200040e4 	.word	0x200040e4
 801161c:	200040e1 	.word	0x200040e1
 8011620:	200040b4 	.word	0x200040b4
 8011624:	200040d4 	.word	0x200040d4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	f040 80bf 	bne.w	80117b0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011632:	4b7c      	ldr	r3, [pc, #496]	; (8011824 <tcp_receive+0xfd8>)
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801163e:	2b00      	cmp	r3, #0
 8011640:	f340 80b6 	ble.w	80117b0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	899b      	ldrh	r3, [r3, #12]
 801164a:	b29b      	uxth	r3, r3
 801164c:	4618      	mov	r0, r3
 801164e:	f7fb f915 	bl	800c87c <lwip_htons>
 8011652:	4603      	mov	r3, r0
 8011654:	f003 0301 	and.w	r3, r3, #1
 8011658:	2b00      	cmp	r3, #0
 801165a:	f040 80bb 	bne.w	80117d4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801165e:	4872      	ldr	r0, [pc, #456]	; (8011828 <tcp_receive+0xfdc>)
 8011660:	f7fd fcab 	bl	800efba <tcp_seg_copy>
 8011664:	4602      	mov	r2, r0
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	f000 80b2 	beq.w	80117d8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801167c:	8912      	ldrh	r2, [r2, #8]
 801167e:	441a      	add	r2, r3
 8011680:	4b68      	ldr	r3, [pc, #416]	; (8011824 <tcp_receive+0xfd8>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	2b00      	cmp	r3, #0
 8011688:	dd12      	ble.n	80116b0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801168a:	4b66      	ldr	r3, [pc, #408]	; (8011824 <tcp_receive+0xfd8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	b29a      	uxth	r2, r3
 8011690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	b29b      	uxth	r3, r3
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	b29a      	uxth	r2, r3
 801169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80116a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a2:	685a      	ldr	r2, [r3, #4]
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	891b      	ldrh	r3, [r3, #8]
 80116a8:	4619      	mov	r1, r3
 80116aa:	4610      	mov	r0, r2
 80116ac:	f7fc f996 	bl	800d9dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80116b0:	4b5e      	ldr	r3, [pc, #376]	; (801182c <tcp_receive+0xfe0>)
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	461a      	mov	r2, r3
 80116b6:	4b5b      	ldr	r3, [pc, #364]	; (8011824 <tcp_receive+0xfd8>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	441a      	add	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c0:	6879      	ldr	r1, [r7, #4]
 80116c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116c4:	440b      	add	r3, r1
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f340 8085 	ble.w	80117d8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	899b      	ldrh	r3, [r3, #12]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fb f8cf 	bl	800c87c <lwip_htons>
 80116de:	4603      	mov	r3, r0
 80116e0:	f003 0301 	and.w	r3, r3, #1
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d01e      	beq.n	8011726 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80116e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	899b      	ldrh	r3, [r3, #12]
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80116f6:	b29c      	uxth	r4, r3
 80116f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	899b      	ldrh	r3, [r3, #12]
 8011700:	b29b      	uxth	r3, r3
 8011702:	4618      	mov	r0, r3
 8011704:	f7fb f8ba 	bl	800c87c <lwip_htons>
 8011708:	4603      	mov	r3, r0
 801170a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801170e:	b29b      	uxth	r3, r3
 8011710:	4618      	mov	r0, r3
 8011712:	f7fb f8b3 	bl	800c87c <lwip_htons>
 8011716:	4603      	mov	r3, r0
 8011718:	461a      	mov	r2, r3
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	4322      	orrs	r2, r4
 8011722:	b292      	uxth	r2, r2
 8011724:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172a:	b29a      	uxth	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011730:	4413      	add	r3, r2
 8011732:	b299      	uxth	r1, r3
 8011734:	4b3b      	ldr	r3, [pc, #236]	; (8011824 <tcp_receive+0xfd8>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	b29a      	uxth	r2, r3
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	1a8a      	subs	r2, r1, r2
 8011740:	b292      	uxth	r2, r2
 8011742:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	685a      	ldr	r2, [r3, #4]
 801174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	891b      	ldrh	r3, [r3, #8]
 8011750:	4619      	mov	r1, r3
 8011752:	4610      	mov	r0, r2
 8011754:	f7fc f942 	bl	800d9dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	891c      	ldrh	r4, [r3, #8]
 801175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	899b      	ldrh	r3, [r3, #12]
 8011766:	b29b      	uxth	r3, r3
 8011768:	4618      	mov	r0, r3
 801176a:	f7fb f887 	bl	800c87c <lwip_htons>
 801176e:	4603      	mov	r3, r0
 8011770:	f003 0303 	and.w	r3, r3, #3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <tcp_receive+0xf30>
 8011778:	2301      	movs	r3, #1
 801177a:	e000      	b.n	801177e <tcp_receive+0xf32>
 801177c:	2300      	movs	r3, #0
 801177e:	4423      	add	r3, r4
 8011780:	b29a      	uxth	r2, r3
 8011782:	4b2a      	ldr	r3, [pc, #168]	; (801182c <tcp_receive+0xfe0>)
 8011784:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011786:	4b29      	ldr	r3, [pc, #164]	; (801182c <tcp_receive+0xfe0>)
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	461a      	mov	r2, r3
 801178c:	4b25      	ldr	r3, [pc, #148]	; (8011824 <tcp_receive+0xfd8>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	441a      	add	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011796:	6879      	ldr	r1, [r7, #4]
 8011798:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801179a:	440b      	add	r3, r1
 801179c:	429a      	cmp	r2, r3
 801179e:	d01b      	beq.n	80117d8 <tcp_receive+0xf8c>
 80117a0:	4b23      	ldr	r3, [pc, #140]	; (8011830 <tcp_receive+0xfe4>)
 80117a2:	f240 627b 	movw	r2, #1659	; 0x67b
 80117a6:	4923      	ldr	r1, [pc, #140]	; (8011834 <tcp_receive+0xfe8>)
 80117a8:	4823      	ldr	r0, [pc, #140]	; (8011838 <tcp_receive+0xfec>)
 80117aa:	f006 f82d 	bl	8017808 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80117ae:	e013      	b.n	80117d8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f47f aeab 	bne.w	8011518 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80117c2:	e00f      	b.n	80117e4 <tcp_receive+0xf98>
                break;
 80117c4:	bf00      	nop
 80117c6:	e00d      	b.n	80117e4 <tcp_receive+0xf98>
                break;
 80117c8:	bf00      	nop
 80117ca:	e00b      	b.n	80117e4 <tcp_receive+0xf98>
                  break;
 80117cc:	bf00      	nop
 80117ce:	e009      	b.n	80117e4 <tcp_receive+0xf98>
                  break;
 80117d0:	bf00      	nop
 80117d2:	e007      	b.n	80117e4 <tcp_receive+0xf98>
                  break;
 80117d4:	bf00      	nop
 80117d6:	e005      	b.n	80117e4 <tcp_receive+0xf98>
                break;
 80117d8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80117da:	e003      	b.n	80117e4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 fb1d 	bl	8011e1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117e2:	e01a      	b.n	801181a <tcp_receive+0xfce>
 80117e4:	e019      	b.n	801181a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80117e6:	4b0f      	ldr	r3, [pc, #60]	; (8011824 <tcp_receive+0xfd8>)
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	db0a      	blt.n	801180a <tcp_receive+0xfbe>
 80117f4:	4b0b      	ldr	r3, [pc, #44]	; (8011824 <tcp_receive+0xfd8>)
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fc:	6879      	ldr	r1, [r7, #4]
 80117fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011800:	440b      	add	r3, r1
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	3301      	adds	r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	dd07      	ble.n	801181a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	7e9b      	ldrb	r3, [r3, #26]
 801180e:	f043 0302 	orr.w	r3, r3, #2
 8011812:	b2da      	uxtb	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8011818:	e7ff      	b.n	801181a <tcp_receive+0xfce>
 801181a:	bf00      	nop
 801181c:	3734      	adds	r7, #52	; 0x34
 801181e:	46bd      	mov	sp, r7
 8011820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011822:	bf00      	nop
 8011824:	200040d4 	.word	0x200040d4
 8011828:	200040b4 	.word	0x200040b4
 801182c:	200040de 	.word	0x200040de
 8011830:	080195e8 	.word	0x080195e8
 8011834:	080198d8 	.word	0x080198d8
 8011838:	08019650 	.word	0x08019650

0801183c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801183c:	b480      	push	{r7}
 801183e:	b083      	sub	sp, #12
 8011840:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011842:	4b18      	ldr	r3, [pc, #96]	; (80118a4 <tcp_getoptbyte+0x68>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <tcp_getoptbyte+0x1a>
 801184a:	4b17      	ldr	r3, [pc, #92]	; (80118a8 <tcp_getoptbyte+0x6c>)
 801184c:	881a      	ldrh	r2, [r3, #0]
 801184e:	4b17      	ldr	r3, [pc, #92]	; (80118ac <tcp_getoptbyte+0x70>)
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	429a      	cmp	r2, r3
 8011854:	d20e      	bcs.n	8011874 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011856:	4b16      	ldr	r3, [pc, #88]	; (80118b0 <tcp_getoptbyte+0x74>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3314      	adds	r3, #20
 801185c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801185e:	4b12      	ldr	r3, [pc, #72]	; (80118a8 <tcp_getoptbyte+0x6c>)
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	b291      	uxth	r1, r2
 8011866:	4a10      	ldr	r2, [pc, #64]	; (80118a8 <tcp_getoptbyte+0x6c>)
 8011868:	8011      	strh	r1, [r2, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	4413      	add	r3, r2
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	e010      	b.n	8011896 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011874:	4b0c      	ldr	r3, [pc, #48]	; (80118a8 <tcp_getoptbyte+0x6c>)
 8011876:	881b      	ldrh	r3, [r3, #0]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	b291      	uxth	r1, r2
 801187c:	4a0a      	ldr	r2, [pc, #40]	; (80118a8 <tcp_getoptbyte+0x6c>)
 801187e:	8011      	strh	r1, [r2, #0]
 8011880:	b2da      	uxtb	r2, r3
 8011882:	4b0a      	ldr	r3, [pc, #40]	; (80118ac <tcp_getoptbyte+0x70>)
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801188c:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <tcp_getoptbyte+0x68>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	79fb      	ldrb	r3, [r7, #7]
 8011892:	4413      	add	r3, r2
 8011894:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011896:	4618      	mov	r0, r3
 8011898:	370c      	adds	r7, #12
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	200040cc 	.word	0x200040cc
 80118a8:	200040d0 	.word	0x200040d0
 80118ac:	200040ca 	.word	0x200040ca
 80118b0:	200040c4 	.word	0x200040c4

080118b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118bc:	4b2d      	ldr	r3, [pc, #180]	; (8011974 <tcp_parseopt+0xc0>)
 80118be:	881b      	ldrh	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d053      	beq.n	801196c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118c4:	4b2c      	ldr	r3, [pc, #176]	; (8011978 <tcp_parseopt+0xc4>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	801a      	strh	r2, [r3, #0]
 80118ca:	e043      	b.n	8011954 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80118cc:	f7ff ffb6 	bl	801183c <tcp_getoptbyte>
 80118d0:	4603      	mov	r3, r0
 80118d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d03c      	beq.n	8011954 <tcp_parseopt+0xa0>
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d002      	beq.n	80118e4 <tcp_parseopt+0x30>
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d03f      	beq.n	8011962 <tcp_parseopt+0xae>
 80118e2:	e026      	b.n	8011932 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80118e4:	f7ff ffaa 	bl	801183c <tcp_getoptbyte>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b04      	cmp	r3, #4
 80118ec:	d13b      	bne.n	8011966 <tcp_parseopt+0xb2>
 80118ee:	4b22      	ldr	r3, [pc, #136]	; (8011978 <tcp_parseopt+0xc4>)
 80118f0:	881b      	ldrh	r3, [r3, #0]
 80118f2:	3302      	adds	r3, #2
 80118f4:	4a1f      	ldr	r2, [pc, #124]	; (8011974 <tcp_parseopt+0xc0>)
 80118f6:	8812      	ldrh	r2, [r2, #0]
 80118f8:	4293      	cmp	r3, r2
 80118fa:	dc34      	bgt.n	8011966 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80118fc:	f7ff ff9e 	bl	801183c <tcp_getoptbyte>
 8011900:	4603      	mov	r3, r0
 8011902:	b29b      	uxth	r3, r3
 8011904:	021b      	lsls	r3, r3, #8
 8011906:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8011908:	f7ff ff98 	bl	801183c <tcp_getoptbyte>
 801190c:	4603      	mov	r3, r0
 801190e:	b29a      	uxth	r2, r3
 8011910:	89bb      	ldrh	r3, [r7, #12]
 8011912:	4313      	orrs	r3, r2
 8011914:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011916:	89bb      	ldrh	r3, [r7, #12]
 8011918:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801191c:	d804      	bhi.n	8011928 <tcp_parseopt+0x74>
 801191e:	89bb      	ldrh	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <tcp_parseopt+0x74>
 8011924:	89ba      	ldrh	r2, [r7, #12]
 8011926:	e001      	b.n	801192c <tcp_parseopt+0x78>
 8011928:	f44f 7206 	mov.w	r2, #536	; 0x218
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8011930:	e010      	b.n	8011954 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8011932:	f7ff ff83 	bl	801183c <tcp_getoptbyte>
 8011936:	4603      	mov	r3, r0
 8011938:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801193a:	7afb      	ldrb	r3, [r7, #11]
 801193c:	2b01      	cmp	r3, #1
 801193e:	d914      	bls.n	801196a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8011940:	7afb      	ldrb	r3, [r7, #11]
 8011942:	b29a      	uxth	r2, r3
 8011944:	4b0c      	ldr	r3, [pc, #48]	; (8011978 <tcp_parseopt+0xc4>)
 8011946:	881b      	ldrh	r3, [r3, #0]
 8011948:	4413      	add	r3, r2
 801194a:	b29b      	uxth	r3, r3
 801194c:	3b02      	subs	r3, #2
 801194e:	b29a      	uxth	r2, r3
 8011950:	4b09      	ldr	r3, [pc, #36]	; (8011978 <tcp_parseopt+0xc4>)
 8011952:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011954:	4b08      	ldr	r3, [pc, #32]	; (8011978 <tcp_parseopt+0xc4>)
 8011956:	881a      	ldrh	r2, [r3, #0]
 8011958:	4b06      	ldr	r3, [pc, #24]	; (8011974 <tcp_parseopt+0xc0>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	429a      	cmp	r2, r3
 801195e:	d3b5      	bcc.n	80118cc <tcp_parseopt+0x18>
 8011960:	e004      	b.n	801196c <tcp_parseopt+0xb8>
        return;
 8011962:	bf00      	nop
 8011964:	e002      	b.n	801196c <tcp_parseopt+0xb8>
          return;
 8011966:	bf00      	nop
 8011968:	e000      	b.n	801196c <tcp_parseopt+0xb8>
          return;
 801196a:	bf00      	nop
      }
    }
  }
}
 801196c:	3710      	adds	r7, #16
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	200040c8 	.word	0x200040c8
 8011978:	200040d0 	.word	0x200040d0

0801197c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801197c:	b480      	push	{r7}
 801197e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011980:	4b05      	ldr	r3, [pc, #20]	; (8011998 <tcp_trigger_input_pcb_close+0x1c>)
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	f043 0310 	orr.w	r3, r3, #16
 8011988:	b2da      	uxtb	r2, r3
 801198a:	4b03      	ldr	r3, [pc, #12]	; (8011998 <tcp_trigger_input_pcb_close+0x1c>)
 801198c:	701a      	strb	r2, [r3, #0]
}
 801198e:	bf00      	nop
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	200040e1 	.word	0x200040e1

0801199c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	607b      	str	r3, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	817b      	strh	r3, [r7, #10]
 80119aa:	4613      	mov	r3, r2
 80119ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80119ae:	897a      	ldrh	r2, [r7, #10]
 80119b0:	893b      	ldrh	r3, [r7, #8]
 80119b2:	4413      	add	r3, r2
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	3314      	adds	r3, #20
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	2200      	movs	r2, #0
 80119bc:	4619      	mov	r1, r3
 80119be:	2001      	movs	r0, #1
 80119c0:	f7fb fe0e 	bl	800d5e0 <pbuf_alloc>
 80119c4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d057      	beq.n	8011a7c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	895b      	ldrh	r3, [r3, #10]
 80119d0:	461a      	mov	r2, r3
 80119d2:	897b      	ldrh	r3, [r7, #10]
 80119d4:	3314      	adds	r3, #20
 80119d6:	429a      	cmp	r2, r3
 80119d8:	da05      	bge.n	80119e6 <tcp_output_alloc_header+0x4a>
 80119da:	4b2b      	ldr	r3, [pc, #172]	; (8011a88 <tcp_output_alloc_header+0xec>)
 80119dc:	2273      	movs	r2, #115	; 0x73
 80119de:	492b      	ldr	r1, [pc, #172]	; (8011a8c <tcp_output_alloc_header+0xf0>)
 80119e0:	482b      	ldr	r0, [pc, #172]	; (8011a90 <tcp_output_alloc_header+0xf4>)
 80119e2:	f005 ff11 	bl	8017808 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	8adb      	ldrh	r3, [r3, #22]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fa ff43 	bl	800c87c <lwip_htons>
 80119f6:	4603      	mov	r3, r0
 80119f8:	461a      	mov	r2, r3
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	8b1b      	ldrh	r3, [r3, #24]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fa ff3a 	bl	800c87c <lwip_htons>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fa ff3c 	bl	800c898 <lwip_htonl>
 8011a20:	4602      	mov	r2, r0
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8011a26:	897b      	ldrh	r3, [r7, #10]
 8011a28:	089b      	lsrs	r3, r3, #2
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	3305      	adds	r3, #5
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	031b      	lsls	r3, r3, #12
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	f043 0310 	orr.w	r3, r3, #16
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fa ff1e 	bl	800c87c <lwip_htons>
 8011a40:	4603      	mov	r3, r0
 8011a42:	461a      	mov	r2, r3
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7fa ff15 	bl	800c87c <lwip_htons>
 8011a52:	4603      	mov	r3, r0
 8011a54:	461a      	mov	r2, r3
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	741a      	strb	r2, [r3, #16]
 8011a60:	2200      	movs	r2, #0
 8011a62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	2200      	movs	r2, #0
 8011a68:	749a      	strb	r2, [r3, #18]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a72:	68fa      	ldr	r2, [r7, #12]
 8011a74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a76:	441a      	add	r2, r3
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a7c:	697b      	ldr	r3, [r7, #20]
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3718      	adds	r7, #24
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	08019994 	.word	0x08019994
 8011a8c:	080199ec 	.word	0x080199ec
 8011a90:	08019a1c 	.word	0x08019a1c

08011a94 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011a94:	b590      	push	{r4, r7, lr}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d02d      	beq.n	8011b00 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aa8:	60fb      	str	r3, [r7, #12]
 8011aaa:	e002      	b.n	8011ab2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1f8      	bne.n	8011aac <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	899b      	ldrh	r3, [r3, #12]
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fa feda 	bl	800c87c <lwip_htons>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	f003 0307 	and.w	r3, r3, #7
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d116      	bne.n	8011b00 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	899b      	ldrh	r3, [r3, #12]
 8011ad8:	b29c      	uxth	r4, r3
 8011ada:	2001      	movs	r0, #1
 8011adc:	f7fa fece 	bl	800c87c <lwip_htons>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	4322      	orrs	r2, r4
 8011aea:	b292      	uxth	r2, r2
 8011aec:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	7e9b      	ldrb	r3, [r3, #26]
 8011af2:	f043 0320 	orr.w	r3, r3, #32
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	e004      	b.n	8011b0a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011b00:	2101      	movs	r1, #1
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f000 f88e 	bl	8011c24 <tcp_enqueue_flags>
 8011b08:	4603      	mov	r3, r0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd90      	pop	{r4, r7, pc}
	...

08011b14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b087      	sub	sp, #28
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	603b      	str	r3, [r7, #0]
 8011b20:	4613      	mov	r3, r2
 8011b22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011b24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	f003 0304 	and.w	r3, r3, #4
 8011b30:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011b32:	2003      	movs	r0, #3
 8011b34:	f7fb faae 	bl	800d094 <memp_malloc>
 8011b38:	6138      	str	r0, [r7, #16]
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d104      	bne.n	8011b4a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011b40:	68b8      	ldr	r0, [r7, #8]
 8011b42:	f7fc f8bf 	bl	800dcc4 <pbuf_free>
    return NULL;
 8011b46:	2300      	movs	r3, #0
 8011b48:	e061      	b.n	8011c0e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b50:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	2200      	movs	r2, #0
 8011b56:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	891a      	ldrh	r2, [r3, #8]
 8011b62:	7dfb      	ldrb	r3, [r7, #23]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d205      	bcs.n	8011b76 <tcp_create_segment+0x62>
 8011b6a:	4b2b      	ldr	r3, [pc, #172]	; (8011c18 <tcp_create_segment+0x104>)
 8011b6c:	22ba      	movs	r2, #186	; 0xba
 8011b6e:	492b      	ldr	r1, [pc, #172]	; (8011c1c <tcp_create_segment+0x108>)
 8011b70:	482b      	ldr	r0, [pc, #172]	; (8011c20 <tcp_create_segment+0x10c>)
 8011b72:	f005 fe49 	bl	8017808 <iprintf>
  seg->len = p->tot_len - optlen;
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	891a      	ldrh	r2, [r3, #8]
 8011b7a:	7dfb      	ldrb	r3, [r7, #23]
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011b86:	2114      	movs	r1, #20
 8011b88:	68b8      	ldr	r0, [r7, #8]
 8011b8a:	f7fc f877 	bl	800dc7c <pbuf_header>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d004      	beq.n	8011b9e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b94:	6938      	ldr	r0, [r7, #16]
 8011b96:	f7fd f9f8 	bl	800ef8a <tcp_seg_free>
    return NULL;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	e037      	b.n	8011c0e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	685a      	ldr	r2, [r3, #4]
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	8ada      	ldrh	r2, [r3, #22]
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	68dc      	ldr	r4, [r3, #12]
 8011bb0:	4610      	mov	r0, r2
 8011bb2:	f7fa fe63 	bl	800c87c <lwip_htons>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	8b1a      	ldrh	r2, [r3, #24]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	68dc      	ldr	r4, [r3, #12]
 8011bc2:	4610      	mov	r0, r2
 8011bc4:	f7fa fe5a 	bl	800c87c <lwip_htons>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	68dc      	ldr	r4, [r3, #12]
 8011bd0:	6838      	ldr	r0, [r7, #0]
 8011bd2:	f7fa fe61 	bl	800c898 <lwip_htonl>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	089b      	lsrs	r3, r3, #2
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	3305      	adds	r3, #5
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	031b      	lsls	r3, r3, #12
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	79fb      	ldrb	r3, [r7, #7]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	68dc      	ldr	r4, [r3, #12]
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fa fe40 	bl	800c87c <lwip_htons>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	2200      	movs	r2, #0
 8011c06:	749a      	strb	r2, [r3, #18]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c0c:	693b      	ldr	r3, [r7, #16]
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	371c      	adds	r7, #28
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd90      	pop	{r4, r7, pc}
 8011c16:	bf00      	nop
 8011c18:	08019994 	.word	0x08019994
 8011c1c:	08019a44 	.word	0x08019a44
 8011c20:	08019a1c 	.word	0x08019a1c

08011c24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b08a      	sub	sp, #40	; 0x28
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011c34:	2300      	movs	r3, #0
 8011c36:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011c38:	78fb      	ldrb	r3, [r7, #3]
 8011c3a:	f003 0303 	and.w	r3, r3, #3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <tcp_enqueue_flags+0x2c>
 8011c42:	4b6f      	ldr	r3, [pc, #444]	; (8011e00 <tcp_enqueue_flags+0x1dc>)
 8011c44:	f240 321b 	movw	r2, #795	; 0x31b
 8011c48:	496e      	ldr	r1, [pc, #440]	; (8011e04 <tcp_enqueue_flags+0x1e0>)
 8011c4a:	486f      	ldr	r0, [pc, #444]	; (8011e08 <tcp_enqueue_flags+0x1e4>)
 8011c4c:	f005 fddc 	bl	8017808 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c56:	2b08      	cmp	r3, #8
 8011c58:	d806      	bhi.n	8011c68 <tcp_enqueue_flags+0x44>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c60:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d90e      	bls.n	8011c86 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011c68:	78fb      	ldrb	r3, [r7, #3]
 8011c6a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d109      	bne.n	8011c86 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	7e9b      	ldrb	r3, [r3, #26]
 8011c76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	e0b7      	b.n	8011df6 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8011c86:	78fb      	ldrb	r3, [r7, #3]
 8011c88:	f003 0302 	and.w	r3, r3, #2
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011c90:	2301      	movs	r3, #1
 8011c92:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c94:	7ffb      	ldrb	r3, [r7, #31]
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	f003 0304 	and.w	r3, r3, #4
 8011c9e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ca0:	7dfb      	ldrb	r3, [r7, #23]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f7fb fc99 	bl	800d5e0 <pbuf_alloc>
 8011cae:	6138      	str	r0, [r7, #16]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d109      	bne.n	8011cca <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	7e9b      	ldrb	r3, [r3, #26]
 8011cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc8:	e095      	b.n	8011df6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	895a      	ldrh	r2, [r3, #10]
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d206      	bcs.n	8011ce4 <tcp_enqueue_flags+0xc0>
 8011cd6:	4b4a      	ldr	r3, [pc, #296]	; (8011e00 <tcp_enqueue_flags+0x1dc>)
 8011cd8:	f240 3241 	movw	r2, #833	; 0x341
 8011cdc:	494b      	ldr	r1, [pc, #300]	; (8011e0c <tcp_enqueue_flags+0x1e8>)
 8011cde:	484a      	ldr	r0, [pc, #296]	; (8011e08 <tcp_enqueue_flags+0x1e4>)
 8011ce0:	f005 fd92 	bl	8017808 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011ce8:	78fa      	ldrb	r2, [r7, #3]
 8011cea:	7ffb      	ldrb	r3, [r7, #31]
 8011cec:	9300      	str	r3, [sp, #0]
 8011cee:	460b      	mov	r3, r1
 8011cf0:	6939      	ldr	r1, [r7, #16]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff ff0e 	bl	8011b14 <tcp_create_segment>
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d109      	bne.n	8011d14 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	7e9b      	ldrb	r3, [r3, #26]
 8011d04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d12:	e070      	b.n	8011df6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	f003 0303 	and.w	r3, r3, #3
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d006      	beq.n	8011d2e <tcp_enqueue_flags+0x10a>
 8011d20:	4b37      	ldr	r3, [pc, #220]	; (8011e00 <tcp_enqueue_flags+0x1dc>)
 8011d22:	f240 3249 	movw	r2, #841	; 0x349
 8011d26:	493a      	ldr	r1, [pc, #232]	; (8011e10 <tcp_enqueue_flags+0x1ec>)
 8011d28:	4837      	ldr	r0, [pc, #220]	; (8011e08 <tcp_enqueue_flags+0x1e4>)
 8011d2a:	f005 fd6d 	bl	8017808 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	891b      	ldrh	r3, [r3, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d006      	beq.n	8011d44 <tcp_enqueue_flags+0x120>
 8011d36:	4b32      	ldr	r3, [pc, #200]	; (8011e00 <tcp_enqueue_flags+0x1dc>)
 8011d38:	f240 324a 	movw	r2, #842	; 0x34a
 8011d3c:	4935      	ldr	r1, [pc, #212]	; (8011e14 <tcp_enqueue_flags+0x1f0>)
 8011d3e:	4832      	ldr	r0, [pc, #200]	; (8011e08 <tcp_enqueue_flags+0x1e4>)
 8011d40:	f005 fd62 	bl	8017808 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d103      	bne.n	8011d54 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	669a      	str	r2, [r3, #104]	; 0x68
 8011d52:	e00d      	b.n	8011d70 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d58:	61bb      	str	r3, [r7, #24]
 8011d5a:	e002      	b.n	8011d62 <tcp_enqueue_flags+0x13e>
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	61bb      	str	r3, [r7, #24]
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1f8      	bne.n	8011d5c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011d78:	78fb      	ldrb	r3, [r7, #3]
 8011d7a:	f003 0302 	and.w	r3, r3, #2
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d104      	bne.n	8011d8c <tcp_enqueue_flags+0x168>
 8011d82:	78fb      	ldrb	r3, [r7, #3]
 8011d84:	f003 0301 	and.w	r3, r3, #1
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d004      	beq.n	8011d96 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d90:	1c5a      	adds	r2, r3, #1
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011d96:	78fb      	ldrb	r3, [r7, #3]
 8011d98:	f003 0301 	and.w	r3, r3, #1
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d006      	beq.n	8011dae <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	7e9b      	ldrb	r3, [r3, #26]
 8011da4:	f043 0320 	orr.w	r3, r3, #32
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fc f820 	bl	800ddf8 <pbuf_clen>
 8011db8:	4603      	mov	r3, r0
 8011dba:	461a      	mov	r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011dc2:	4413      	add	r3, r2
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00e      	beq.n	8011df4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10a      	bne.n	8011df4 <tcp_enqueue_flags+0x1d0>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <tcp_enqueue_flags+0x1d0>
 8011de6:	4b06      	ldr	r3, [pc, #24]	; (8011e00 <tcp_enqueue_flags+0x1dc>)
 8011de8:	f240 326d 	movw	r2, #877	; 0x36d
 8011dec:	490a      	ldr	r1, [pc, #40]	; (8011e18 <tcp_enqueue_flags+0x1f4>)
 8011dee:	4806      	ldr	r0, [pc, #24]	; (8011e08 <tcp_enqueue_flags+0x1e4>)
 8011df0:	f005 fd0a 	bl	8017808 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3720      	adds	r7, #32
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	08019994 	.word	0x08019994
 8011e04:	08019cbc 	.word	0x08019cbc
 8011e08:	08019a1c 	.word	0x08019a1c
 8011e0c:	08019d14 	.word	0x08019d14
 8011e10:	08019d50 	.word	0x08019d50
 8011e14:	08019d68 	.word	0x08019d68
 8011e18:	08019d94 	.word	0x08019d94

08011e1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b08b      	sub	sp, #44	; 0x2c
 8011e20:	af04      	add	r7, sp, #16
 8011e22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e28:	7dbb      	ldrb	r3, [r7, #22]
 8011e2a:	b29c      	uxth	r4, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fa fd31 	bl	800c898 <lwip_htonl>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2200      	movs	r2, #0
 8011e3a:	4621      	mov	r1, r4
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7ff fdad 	bl	801199c <tcp_output_alloc_header>
 8011e42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d109      	bne.n	8011e5e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	7e9b      	ldrb	r3, [r3, #26]
 8011e4e:	f043 0303 	orr.w	r3, r3, #3
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011e58:	f06f 0301 	mvn.w	r3, #1
 8011e5c:	e036      	b.n	8011ecc <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	3304      	adds	r3, #4
 8011e62:	4618      	mov	r0, r3
 8011e64:	f004 f9dc 	bl	8016220 <ip4_route>
 8011e68:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d102      	bne.n	8011e76 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011e70:	23fc      	movs	r3, #252	; 0xfc
 8011e72:	75fb      	strb	r3, [r7, #23]
 8011e74:	e012      	b.n	8011e9c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	1d18      	adds	r0, r3, #4
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7a9c      	ldrb	r4, [r3, #10]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	7a5b      	ldrb	r3, [r3, #9]
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	9202      	str	r2, [sp, #8]
 8011e88:	2206      	movs	r2, #6
 8011e8a:	9201      	str	r2, [sp, #4]
 8011e8c:	9300      	str	r3, [sp, #0]
 8011e8e:	4623      	mov	r3, r4
 8011e90:	4602      	mov	r2, r0
 8011e92:	6938      	ldr	r0, [r7, #16]
 8011e94:	f004 fb8a 	bl	80165ac <ip4_output_if>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011e9c:	6938      	ldr	r0, [r7, #16]
 8011e9e:	f7fb ff11 	bl	800dcc4 <pbuf_free>

  if (err != ERR_OK) {
 8011ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d007      	beq.n	8011eba <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7e9b      	ldrb	r3, [r3, #26]
 8011eae:	f043 0303 	orr.w	r3, r3, #3
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	769a      	strb	r2, [r3, #26]
 8011eb8:	e006      	b.n	8011ec8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7e9b      	ldrb	r3, [r3, #26]
 8011ebe:	f023 0303 	bic.w	r3, r3, #3
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	371c      	adds	r7, #28
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd90      	pop	{r4, r7, pc}

08011ed4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ed4:	b5b0      	push	{r4, r5, r7, lr}
 8011ed6:	b08a      	sub	sp, #40	; 0x28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	7d1b      	ldrb	r3, [r3, #20]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d106      	bne.n	8011ef2 <tcp_output+0x1e>
 8011ee4:	4b9b      	ldr	r3, [pc, #620]	; (8012154 <tcp_output+0x280>)
 8011ee6:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011eea:	499b      	ldr	r1, [pc, #620]	; (8012158 <tcp_output+0x284>)
 8011eec:	489b      	ldr	r0, [pc, #620]	; (801215c <tcp_output+0x288>)
 8011eee:	f005 fc8b 	bl	8017808 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ef2:	4b9b      	ldr	r3, [pc, #620]	; (8012160 <tcp_output+0x28c>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d101      	bne.n	8011f00 <tcp_output+0x2c>
    return ERR_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	e1cf      	b.n	80122a0 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d203      	bcs.n	8011f18 <tcp_output+0x44>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f16:	e002      	b.n	8011f1e <tcp_output+0x4a>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f1e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f24:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	7e9b      	ldrb	r3, [r3, #26]
 8011f2a:	f003 0302 	and.w	r3, r3, #2
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d017      	beq.n	8011f62 <tcp_output+0x8e>
 8011f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00f      	beq.n	8011f58 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fa fcaa 	bl	800c898 <lwip_htonl>
 8011f44:	4602      	mov	r2, r0
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f4e:	8912      	ldrh	r2, [r2, #8]
 8011f50:	4413      	add	r3, r2
     (seg == NULL ||
 8011f52:	69ba      	ldr	r2, [r7, #24]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d204      	bcs.n	8011f62 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7ff ff5f 	bl	8011e1c <tcp_send_empty_ack>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	e19e      	b.n	80122a0 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f66:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011f68:	6a3b      	ldr	r3, [r7, #32]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d007      	beq.n	8011f7e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8011f6e:	e002      	b.n	8011f76 <tcp_output+0xa2>
 8011f70:	6a3b      	ldr	r3, [r7, #32]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	623b      	str	r3, [r7, #32]
 8011f76:	6a3b      	ldr	r3, [r7, #32]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d1f8      	bne.n	8011f70 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3304      	adds	r3, #4
 8011f82:	4618      	mov	r0, r3
 8011f84:	f004 f94c 	bl	8016220 <ip4_route>
 8011f88:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d102      	bne.n	8011f96 <tcp_output+0xc2>
    return ERR_RTE;
 8011f90:	f06f 0303 	mvn.w	r3, #3
 8011f94:	e184      	b.n	80122a0 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d003      	beq.n	8011fa4 <tcp_output+0xd0>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d111      	bne.n	8011fc8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d002      	beq.n	8011fb0 <tcp_output+0xdc>
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	3304      	adds	r3, #4
 8011fae:	e000      	b.n	8011fb2 <tcp_output+0xde>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d102      	bne.n	8011fc0 <tcp_output+0xec>
      return ERR_RTE;
 8011fba:	f06f 0303 	mvn.w	r3, #3
 8011fbe:	e16f      	b.n	80122a0 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 813e 	beq.w	801224c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fa fc5e 	bl	800c898 <lwip_htonl>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fe2:	1ad3      	subs	r3, r2, r3
 8011fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fe6:	8912      	ldrh	r2, [r2, #8]
 8011fe8:	4413      	add	r3, r2
  if (seg != NULL &&
 8011fea:	69ba      	ldr	r2, [r7, #24]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	f080 812d 	bcs.w	801224c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f000 8129 	beq.w	801224c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012000:	461a      	mov	r2, r3
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	4293      	cmp	r3, r2
 8012006:	f040 8121 	bne.w	801224c <tcp_output+0x378>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801200e:	2b00      	cmp	r3, #0
 8012010:	f040 811c 	bne.w	801224c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801201a:	2b00      	cmp	r3, #0
 801201c:	f040 812b 	bne.w	8012276 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2201      	movs	r2, #1
 801202c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8012030:	e121      	b.n	8012276 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	899b      	ldrh	r3, [r3, #12]
 8012038:	b29b      	uxth	r3, r3
 801203a:	4618      	mov	r0, r3
 801203c:	f7fa fc1e 	bl	800c87c <lwip_htons>
 8012040:	4603      	mov	r3, r0
 8012042:	f003 0304 	and.w	r3, r3, #4
 8012046:	2b00      	cmp	r3, #0
 8012048:	d006      	beq.n	8012058 <tcp_output+0x184>
 801204a:	4b42      	ldr	r3, [pc, #264]	; (8012154 <tcp_output+0x280>)
 801204c:	f240 4246 	movw	r2, #1094	; 0x446
 8012050:	4944      	ldr	r1, [pc, #272]	; (8012164 <tcp_output+0x290>)
 8012052:	4842      	ldr	r0, [pc, #264]	; (801215c <tcp_output+0x288>)
 8012054:	f005 fbd8 	bl	8017808 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801205c:	2b00      	cmp	r3, #0
 801205e:	d01f      	beq.n	80120a0 <tcp_output+0x1cc>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	7e9b      	ldrb	r3, [r3, #26]
 8012064:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012068:	2b00      	cmp	r3, #0
 801206a:	d119      	bne.n	80120a0 <tcp_output+0x1cc>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00b      	beq.n	801208c <tcp_output+0x1b8>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d110      	bne.n	80120a0 <tcp_output+0x1cc>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012082:	891a      	ldrh	r2, [r3, #8]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012088:	429a      	cmp	r2, r3
 801208a:	d209      	bcs.n	80120a0 <tcp_output+0x1cc>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012092:	2b00      	cmp	r3, #0
 8012094:	d004      	beq.n	80120a0 <tcp_output+0x1cc>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801209c:	2b08      	cmp	r3, #8
 801209e:	d901      	bls.n	80120a4 <tcp_output+0x1d0>
 80120a0:	2301      	movs	r3, #1
 80120a2:	e000      	b.n	80120a6 <tcp_output+0x1d2>
 80120a4:	2300      	movs	r3, #0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d106      	bne.n	80120b8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	7e9b      	ldrb	r3, [r3, #26]
 80120ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f000 80e1 	beq.w	801227a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	7d1b      	ldrb	r3, [r3, #20]
 80120bc:	2b02      	cmp	r3, #2
 80120be:	d00d      	beq.n	80120dc <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	899b      	ldrh	r3, [r3, #12]
 80120c6:	b29c      	uxth	r4, r3
 80120c8:	2010      	movs	r0, #16
 80120ca:	f7fa fbd7 	bl	800c87c <lwip_htons>
 80120ce:	4603      	mov	r3, r0
 80120d0:	461a      	mov	r2, r3
 80120d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	4322      	orrs	r2, r4
 80120d8:	b292      	uxth	r2, r2
 80120da:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80120dc:	697a      	ldr	r2, [r7, #20]
 80120de:	6879      	ldr	r1, [r7, #4]
 80120e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120e2:	f000 f8e1 	bl	80122a8 <tcp_output_segment>
 80120e6:	4603      	mov	r3, r0
 80120e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d009      	beq.n	8012106 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	7e9b      	ldrb	r3, [r3, #26]
 80120f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120fa:	b2da      	uxtb	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	769a      	strb	r2, [r3, #26]
      return err;
 8012100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012104:	e0cc      	b.n	80122a0 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8012106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	7d1b      	ldrb	r3, [r3, #20]
 8012112:	2b02      	cmp	r3, #2
 8012114:	d006      	beq.n	8012124 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	7e9b      	ldrb	r3, [r3, #26]
 801211a:	f023 0303 	bic.w	r3, r3, #3
 801211e:	b2da      	uxtb	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	f7fa fbb4 	bl	800c898 <lwip_htonl>
 8012130:	4604      	mov	r4, r0
 8012132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012134:	891b      	ldrh	r3, [r3, #8]
 8012136:	461d      	mov	r5, r3
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	899b      	ldrh	r3, [r3, #12]
 801213e:	b29b      	uxth	r3, r3
 8012140:	4618      	mov	r0, r3
 8012142:	f7fa fb9b 	bl	800c87c <lwip_htons>
 8012146:	4603      	mov	r3, r0
 8012148:	f003 0303 	and.w	r3, r3, #3
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00b      	beq.n	8012168 <tcp_output+0x294>
 8012150:	2301      	movs	r3, #1
 8012152:	e00a      	b.n	801216a <tcp_output+0x296>
 8012154:	08019994 	.word	0x08019994
 8012158:	08019dbc 	.word	0x08019dbc
 801215c:	08019a1c 	.word	0x08019a1c
 8012160:	200079a4 	.word	0x200079a4
 8012164:	08019de4 	.word	0x08019de4
 8012168:	2300      	movs	r3, #0
 801216a:	442b      	add	r3, r5
 801216c:	4423      	add	r3, r4
 801216e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	2b00      	cmp	r3, #0
 801217a:	da02      	bge.n	8012182 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012184:	891b      	ldrh	r3, [r3, #8]
 8012186:	461c      	mov	r4, r3
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	899b      	ldrh	r3, [r3, #12]
 801218e:	b29b      	uxth	r3, r3
 8012190:	4618      	mov	r0, r3
 8012192:	f7fa fb73 	bl	800c87c <lwip_htons>
 8012196:	4603      	mov	r3, r0
 8012198:	f003 0303 	and.w	r3, r3, #3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d001      	beq.n	80121a4 <tcp_output+0x2d0>
 80121a0:	2301      	movs	r3, #1
 80121a2:	e000      	b.n	80121a6 <tcp_output+0x2d2>
 80121a4:	2300      	movs	r3, #0
 80121a6:	4423      	add	r3, r4
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d049      	beq.n	8012240 <tcp_output+0x36c>
      seg->next = NULL;
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	2200      	movs	r2, #0
 80121b0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d105      	bne.n	80121c6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121be:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c2:	623b      	str	r3, [r7, #32]
 80121c4:	e03f      	b.n	8012246 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fa fb63 	bl	800c898 <lwip_htonl>
 80121d2:	4604      	mov	r4, r0
 80121d4:	6a3b      	ldr	r3, [r7, #32]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fa fb5c 	bl	800c898 <lwip_htonl>
 80121e0:	4603      	mov	r3, r0
 80121e2:	1ae3      	subs	r3, r4, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	da24      	bge.n	8012232 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	336c      	adds	r3, #108	; 0x6c
 80121ec:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121ee:	e002      	b.n	80121f6 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d011      	beq.n	8012222 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	4618      	mov	r0, r3
 8012208:	f7fa fb46 	bl	800c898 <lwip_htonl>
 801220c:	4604      	mov	r4, r0
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	f7fa fb3f 	bl	800c898 <lwip_htonl>
 801221a:	4603      	mov	r3, r0
 801221c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801221e:	2b00      	cmp	r3, #0
 8012220:	dbe6      	blt.n	80121f0 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801222e:	601a      	str	r2, [r3, #0]
 8012230:	e009      	b.n	8012246 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012236:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012238:	6a3b      	ldr	r3, [r7, #32]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	623b      	str	r3, [r7, #32]
 801223e:	e002      	b.n	8012246 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012242:	f7fc fea2 	bl	800ef8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801224a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	2b00      	cmp	r3, #0
 8012250:	d015      	beq.n	801227e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	f7fa fb1d 	bl	800c898 <lwip_htonl>
 801225e:	4602      	mov	r2, r0
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012268:	8912      	ldrh	r2, [r2, #8]
 801226a:	4413      	add	r3, r2
  while (seg != NULL &&
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	429a      	cmp	r2, r3
 8012270:	f4bf aedf 	bcs.w	8012032 <tcp_output+0x15e>
  }
output_done:
 8012274:	e003      	b.n	801227e <tcp_output+0x3aa>
    goto output_done;
 8012276:	bf00      	nop
 8012278:	e002      	b.n	8012280 <tcp_output+0x3ac>
      break;
 801227a:	bf00      	nop
 801227c:	e000      	b.n	8012280 <tcp_output+0x3ac>
output_done:
 801227e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012284:	2b00      	cmp	r3, #0
 8012286:	d103      	bne.n	8012290 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	7e9b      	ldrb	r3, [r3, #26]
 8012294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012298:	b2da      	uxtb	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3728      	adds	r7, #40	; 0x28
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bdb0      	pop	{r4, r5, r7, pc}

080122a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80122a8:	b5b0      	push	{r4, r5, r7, lr}
 80122aa:	b08c      	sub	sp, #48	; 0x30
 80122ac:	af04      	add	r7, sp, #16
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	89db      	ldrh	r3, [r3, #14]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d001      	beq.n	80122c2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	e08b      	b.n	80123da <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	68dc      	ldr	r4, [r3, #12]
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7fa fae4 	bl	800c898 <lwip_htonl>
 80122d0:	4603      	mov	r3, r0
 80122d2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	68dc      	ldr	r4, [r3, #12]
 80122dc:	4610      	mov	r0, r2
 80122de:	f7fa facd 	bl	800c87c <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ea:	68ba      	ldr	r2, [r7, #8]
 80122ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80122ee:	441a      	add	r2, r3
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	3314      	adds	r3, #20
 80122fa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	7a9b      	ldrb	r3, [r3, #10]
 8012300:	f003 0301 	and.w	r3, r3, #1
 8012304:	2b00      	cmp	r3, #0
 8012306:	d014      	beq.n	8012332 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	3304      	adds	r3, #4
 801230c:	4619      	mov	r1, r3
 801230e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012312:	f7fd f8a5 	bl	800f460 <tcp_eff_send_mss_impl>
 8012316:	4603      	mov	r3, r0
 8012318:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801231a:	8b7b      	ldrh	r3, [r7, #26]
 801231c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012320:	4618      	mov	r0, r3
 8012322:	f7fa fab9 	bl	800c898 <lwip_htonl>
 8012326:	4602      	mov	r2, r0
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	3304      	adds	r3, #4
 8012330:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012338:	2b00      	cmp	r3, #0
 801233a:	da02      	bge.n	8012342 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	2200      	movs	r2, #0
 8012340:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10c      	bne.n	8012364 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801234a:	4b26      	ldr	r3, [pc, #152]	; (80123e4 <tcp_output_segment+0x13c>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	f7fa fa9d 	bl	800c898 <lwip_htonl>
 801235e:	4602      	mov	r2, r0
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	461a      	mov	r2, r3
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	8959      	ldrh	r1, [r3, #10]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	8b3a      	ldrh	r2, [r7, #24]
 8012380:	1a8a      	subs	r2, r1, r2
 8012382:	b292      	uxth	r2, r2
 8012384:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	8919      	ldrh	r1, [r3, #8]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	8b3a      	ldrh	r2, [r7, #24]
 8012392:	1a8a      	subs	r2, r1, r2
 8012394:	b292      	uxth	r2, r2
 8012396:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	68d2      	ldr	r2, [r2, #12]
 80123a0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	2200      	movs	r2, #0
 80123a8:	741a      	strb	r2, [r3, #16]
 80123aa:	2200      	movs	r2, #0
 80123ac:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6858      	ldr	r0, [r3, #4]
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	1d1c      	adds	r4, r3, #4
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	7a9d      	ldrb	r5, [r3, #10]
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	7a5b      	ldrb	r3, [r3, #9]
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	9202      	str	r2, [sp, #8]
 80123c4:	2206      	movs	r2, #6
 80123c6:	9201      	str	r2, [sp, #4]
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	462b      	mov	r3, r5
 80123cc:	4622      	mov	r2, r4
 80123ce:	f004 f8ed 	bl	80165ac <ip4_output_if>
 80123d2:	4603      	mov	r3, r0
 80123d4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80123d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bdb0      	pop	{r4, r5, r7, pc}
 80123e2:	bf00      	nop
 80123e4:	20007994 	.word	0x20007994

080123e8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08c      	sub	sp, #48	; 0x30
 80123ec:	af04      	add	r7, sp, #16
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
 80123f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80123f6:	2200      	movs	r2, #0
 80123f8:	2114      	movs	r1, #20
 80123fa:	2001      	movs	r0, #1
 80123fc:	f7fb f8f0 	bl	800d5e0 <pbuf_alloc>
 8012400:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d05b      	beq.n	80124c0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	895b      	ldrh	r3, [r3, #10]
 801240c:	2b13      	cmp	r3, #19
 801240e:	d806      	bhi.n	801241e <tcp_rst+0x36>
 8012410:	4b2d      	ldr	r3, [pc, #180]	; (80124c8 <tcp_rst+0xe0>)
 8012412:	f240 524d 	movw	r2, #1357	; 0x54d
 8012416:	492d      	ldr	r1, [pc, #180]	; (80124cc <tcp_rst+0xe4>)
 8012418:	482d      	ldr	r0, [pc, #180]	; (80124d0 <tcp_rst+0xe8>)
 801241a:	f005 f9f5 	bl	8017808 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8012424:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012426:	4618      	mov	r0, r3
 8012428:	f7fa fa28 	bl	800c87c <lwip_htons>
 801242c:	4603      	mov	r3, r0
 801242e:	461a      	mov	r2, r3
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012434:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012436:	4618      	mov	r0, r3
 8012438:	f7fa fa20 	bl	800c87c <lwip_htons>
 801243c:	4603      	mov	r3, r0
 801243e:	461a      	mov	r2, r3
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7fa fa27 	bl	800c898 <lwip_htonl>
 801244a:	4602      	mov	r2, r0
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	f7fa fa21 	bl	800c898 <lwip_htonl>
 8012456:	4602      	mov	r2, r0
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801245c:	f245 0014 	movw	r0, #20500	; 0x5014
 8012460:	f7fa fa0c 	bl	800c87c <lwip_htons>
 8012464:	4603      	mov	r3, r0
 8012466:	461a      	mov	r2, r3
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	2200      	movs	r2, #0
 8012470:	f042 0208 	orr.w	r2, r2, #8
 8012474:	739a      	strb	r2, [r3, #14]
 8012476:	2200      	movs	r2, #0
 8012478:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801247c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	2200      	movs	r2, #0
 8012482:	741a      	strb	r2, [r3, #16]
 8012484:	2200      	movs	r2, #0
 8012486:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	2200      	movs	r2, #0
 801248c:	749a      	strb	r2, [r3, #18]
 801248e:	2200      	movs	r2, #0
 8012490:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012492:	6838      	ldr	r0, [r7, #0]
 8012494:	f003 fec4 	bl	8016220 <ip4_route>
 8012498:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00b      	beq.n	80124b8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	9302      	str	r3, [sp, #8]
 80124a4:	2306      	movs	r3, #6
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	2300      	movs	r3, #0
 80124aa:	9300      	str	r3, [sp, #0]
 80124ac:	23ff      	movs	r3, #255	; 0xff
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	6879      	ldr	r1, [r7, #4]
 80124b2:	69f8      	ldr	r0, [r7, #28]
 80124b4:	f004 f87a 	bl	80165ac <ip4_output_if>
  }
  pbuf_free(p);
 80124b8:	69f8      	ldr	r0, [r7, #28]
 80124ba:	f7fb fc03 	bl	800dcc4 <pbuf_free>
 80124be:	e000      	b.n	80124c2 <tcp_rst+0xda>
    return;
 80124c0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80124c2:	3720      	adds	r7, #32
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	08019994 	.word	0x08019994
 80124cc:	080199ec 	.word	0x080199ec
 80124d0:	08019a1c 	.word	0x08019a1c

080124d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d029      	beq.n	8012538 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e8:	60fb      	str	r3, [r7, #12]
 80124ea:	e002      	b.n	80124f2 <tcp_rexmit_rto+0x1e>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	60fb      	str	r3, [r7, #12]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1f8      	bne.n	80124ec <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012516:	2bff      	cmp	r3, #255	; 0xff
 8012518:	d007      	beq.n	801252a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012520:	3301      	adds	r3, #1
 8012522:	b2da      	uxtb	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7ff fccf 	bl	8011ed4 <tcp_output>
 8012536:	e000      	b.n	801253a <tcp_rexmit_rto+0x66>
    return;
 8012538:	bf00      	nop
}
 801253a:	3710      	adds	r7, #16
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012540:	b590      	push	{r4, r7, lr}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801254c:	2b00      	cmp	r3, #0
 801254e:	d043      	beq.n	80125d8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012554:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3368      	adds	r3, #104	; 0x68
 8012562:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012564:	e002      	b.n	801256c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d011      	beq.n	8012598 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	4618      	mov	r0, r3
 801257e:	f7fa f98b 	bl	800c898 <lwip_htonl>
 8012582:	4604      	mov	r4, r0
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	4618      	mov	r0, r3
 801258c:	f7fa f984 	bl	800c898 <lwip_htonl>
 8012590:	4603      	mov	r3, r0
 8012592:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012594:	2b00      	cmp	r3, #0
 8012596:	dbe6      	blt.n	8012566 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d103      	bne.n	80125b6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125bc:	2bff      	cmp	r3, #255	; 0xff
 80125be:	d007      	beq.n	80125d0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125c6:	3301      	adds	r3, #1
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	635a      	str	r2, [r3, #52]	; 0x34
 80125d6:	e000      	b.n	80125da <tcp_rexmit+0x9a>
    return;
 80125d8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80125da:	3714      	adds	r7, #20
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd90      	pop	{r4, r7, pc}

080125e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d04c      	beq.n	801268a <tcp_rexmit_fast+0xaa>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	7e9b      	ldrb	r3, [r3, #26]
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d146      	bne.n	801268a <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f7ff ff9f 	bl	8012540 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801260e:	429a      	cmp	r2, r3
 8012610:	d208      	bcs.n	8012624 <tcp_rexmit_fast+0x44>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012618:	2b00      	cmp	r3, #0
 801261a:	da00      	bge.n	801261e <tcp_rexmit_fast+0x3e>
 801261c:	3301      	adds	r3, #1
 801261e:	105b      	asrs	r3, r3, #1
 8012620:	b29b      	uxth	r3, r3
 8012622:	e007      	b.n	8012634 <tcp_rexmit_fast+0x54>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801262a:	2b00      	cmp	r3, #0
 801262c:	da00      	bge.n	8012630 <tcp_rexmit_fast+0x50>
 801262e:	3301      	adds	r3, #1
 8012630:	105b      	asrs	r3, r3, #1
 8012632:	b29b      	uxth	r3, r3
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012640:	461a      	mov	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	429a      	cmp	r2, r3
 801264a:	d206      	bcs.n	801265a <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012650:	005b      	lsls	r3, r3, #1
 8012652:	b29a      	uxth	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012664:	4619      	mov	r1, r3
 8012666:	0049      	lsls	r1, r1, #1
 8012668:	440b      	add	r3, r1
 801266a:	b29b      	uxth	r3, r3
 801266c:	4413      	add	r3, r2
 801266e:	b29a      	uxth	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	7e9b      	ldrb	r3, [r3, #26]
 801267a:	f043 0304 	orr.w	r3, r3, #4
 801267e:	b2da      	uxtb	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801268a:	bf00      	nop
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b08a      	sub	sp, #40	; 0x28
 8012696:	af04      	add	r7, sp, #16
 8012698:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801269e:	3b01      	subs	r3, #1
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fa f8f9 	bl	800c898 <lwip_htonl>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2200      	movs	r2, #0
 80126aa:	2100      	movs	r1, #0
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff f975 	bl	801199c <tcp_output_alloc_header>
 80126b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d102      	bne.n	80126c0 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80126ba:	f04f 33ff 	mov.w	r3, #4294967295
 80126be:	e021      	b.n	8012704 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	3304      	adds	r3, #4
 80126c4:	4618      	mov	r0, r3
 80126c6:	f003 fdab 	bl	8016220 <ip4_route>
 80126ca:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d102      	bne.n	80126d8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80126d2:	23fc      	movs	r3, #252	; 0xfc
 80126d4:	75fb      	strb	r3, [r7, #23]
 80126d6:	e010      	b.n	80126fa <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80126d8:	6879      	ldr	r1, [r7, #4]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	1d1a      	adds	r2, r3, #4
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	7a98      	ldrb	r0, [r3, #10]
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	9302      	str	r3, [sp, #8]
 80126e6:	2306      	movs	r3, #6
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	2300      	movs	r3, #0
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	4603      	mov	r3, r0
 80126f0:	6938      	ldr	r0, [r7, #16]
 80126f2:	f003 ff5b 	bl	80165ac <ip4_output_if>
 80126f6:	4603      	mov	r3, r0
 80126f8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80126fa:	6938      	ldr	r0, [r7, #16]
 80126fc:	f7fb fae2 	bl	800dcc4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012704:	4618      	mov	r0, r3
 8012706:	3718      	adds	r7, #24
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801270c:	b590      	push	{r4, r7, lr}
 801270e:	b08f      	sub	sp, #60	; 0x3c
 8012710:	af04      	add	r7, sp, #16
 8012712:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012718:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801271a:	6a3b      	ldr	r3, [r7, #32]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d102      	bne.n	8012726 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012724:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d101      	bne.n	8012730 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801272c:	2300      	movs	r3, #0
 801272e:	e085      	b.n	801283c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	899b      	ldrh	r3, [r3, #12]
 8012736:	b29b      	uxth	r3, r3
 8012738:	4618      	mov	r0, r3
 801273a:	f7fa f89f 	bl	800c87c <lwip_htons>
 801273e:	4603      	mov	r3, r0
 8012740:	f003 0301 	and.w	r3, r3, #1
 8012744:	2b00      	cmp	r3, #0
 8012746:	d005      	beq.n	8012754 <tcp_zero_window_probe+0x48>
 8012748:	6a3b      	ldr	r3, [r7, #32]
 801274a:	891b      	ldrh	r3, [r3, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <tcp_zero_window_probe+0x48>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <tcp_zero_window_probe+0x4a>
 8012754:	2300      	movs	r3, #0
 8012756:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012758:	7ffb      	ldrb	r3, [r7, #31]
 801275a:	2b00      	cmp	r3, #0
 801275c:	bf0c      	ite	eq
 801275e:	2301      	moveq	r3, #1
 8012760:	2300      	movne	r3, #0
 8012762:	b2db      	uxtb	r3, r3
 8012764:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012766:	6a3b      	ldr	r3, [r7, #32]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	8bba      	ldrh	r2, [r7, #28]
 801276e:	2100      	movs	r1, #0
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ff f913 	bl	801199c <tcp_output_alloc_header>
 8012776:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d102      	bne.n	8012784 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801277e:	f04f 33ff 	mov.w	r3, #4294967295
 8012782:	e05b      	b.n	801283c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012784:	69bb      	ldr	r3, [r7, #24]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801278a:	7ffb      	ldrb	r3, [r7, #31]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00e      	beq.n	80127ae <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	899b      	ldrh	r3, [r3, #12]
 8012794:	b29b      	uxth	r3, r3
 8012796:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801279a:	b29c      	uxth	r4, r3
 801279c:	2011      	movs	r0, #17
 801279e:	f7fa f86d 	bl	800c87c <lwip_htons>
 80127a2:	4603      	mov	r3, r0
 80127a4:	4323      	orrs	r3, r4
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	819a      	strh	r2, [r3, #12]
 80127ac:	e010      	b.n	80127d0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	3314      	adds	r3, #20
 80127b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80127b6:	6a3b      	ldr	r3, [r7, #32]
 80127b8:	6858      	ldr	r0, [r3, #4]
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	891a      	ldrh	r2, [r3, #8]
 80127c0:	6a3b      	ldr	r3, [r7, #32]
 80127c2:	891b      	ldrh	r3, [r3, #8]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	2201      	movs	r2, #1
 80127ca:	6939      	ldr	r1, [r7, #16]
 80127cc:	f7fb fc86 	bl	800e0dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fa f85e 	bl	800c898 <lwip_htonl>
 80127dc:	4603      	mov	r3, r0
 80127de:	3301      	adds	r3, #1
 80127e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	1ad3      	subs	r3, r2, r3
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	da02      	bge.n	80127f4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	3304      	adds	r3, #4
 80127f8:	4618      	mov	r0, r3
 80127fa:	f003 fd11 	bl	8016220 <ip4_route>
 80127fe:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d103      	bne.n	801280e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012806:	23fc      	movs	r3, #252	; 0xfc
 8012808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801280c:	e011      	b.n	8012832 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801280e:	6879      	ldr	r1, [r7, #4]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	1d1a      	adds	r2, r3, #4
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	7a98      	ldrb	r0, [r3, #10]
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	2306      	movs	r3, #6
 801281e:	9301      	str	r3, [sp, #4]
 8012820:	2300      	movs	r3, #0
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	4603      	mov	r3, r0
 8012826:	69b8      	ldr	r0, [r7, #24]
 8012828:	f003 fec0 	bl	80165ac <ip4_output_if>
 801282c:	4603      	mov	r3, r0
 801282e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012832:	69b8      	ldr	r0, [r7, #24]
 8012834:	f7fb fa46 	bl	800dcc4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801283c:	4618      	mov	r0, r3
 801283e:	372c      	adds	r7, #44	; 0x2c
 8012840:	46bd      	mov	sp, r7
 8012842:	bd90      	pop	{r4, r7, pc}

08012844 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801284c:	f7fb fcc8 	bl	800e1e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012850:	4b0a      	ldr	r3, [pc, #40]	; (801287c <tcpip_tcp_timer+0x38>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <tcpip_tcp_timer+0x1c>
 8012858:	4b09      	ldr	r3, [pc, #36]	; (8012880 <tcpip_tcp_timer+0x3c>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d005      	beq.n	801286c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012860:	2200      	movs	r2, #0
 8012862:	4908      	ldr	r1, [pc, #32]	; (8012884 <tcpip_tcp_timer+0x40>)
 8012864:	20fa      	movs	r0, #250	; 0xfa
 8012866:	f000 f86f 	bl	8012948 <sys_timeout>
 801286a:	e002      	b.n	8012872 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801286c:	4b06      	ldr	r3, [pc, #24]	; (8012888 <tcpip_tcp_timer+0x44>)
 801286e:	2200      	movs	r2, #0
 8012870:	601a      	str	r2, [r3, #0]
  }
}
 8012872:	bf00      	nop
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	20007990 	.word	0x20007990
 8012880:	200079a0 	.word	0x200079a0
 8012884:	08012845 	.word	0x08012845
 8012888:	200040f0 	.word	0x200040f0

0801288c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012890:	4b0a      	ldr	r3, [pc, #40]	; (80128bc <tcp_timer_needed+0x30>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10f      	bne.n	80128b8 <tcp_timer_needed+0x2c>
 8012898:	4b09      	ldr	r3, [pc, #36]	; (80128c0 <tcp_timer_needed+0x34>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d103      	bne.n	80128a8 <tcp_timer_needed+0x1c>
 80128a0:	4b08      	ldr	r3, [pc, #32]	; (80128c4 <tcp_timer_needed+0x38>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d007      	beq.n	80128b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80128a8:	4b04      	ldr	r3, [pc, #16]	; (80128bc <tcp_timer_needed+0x30>)
 80128aa:	2201      	movs	r2, #1
 80128ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80128ae:	2200      	movs	r2, #0
 80128b0:	4905      	ldr	r1, [pc, #20]	; (80128c8 <tcp_timer_needed+0x3c>)
 80128b2:	20fa      	movs	r0, #250	; 0xfa
 80128b4:	f000 f848 	bl	8012948 <sys_timeout>
  }
}
 80128b8:	bf00      	nop
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	200040f0 	.word	0x200040f0
 80128c0:	20007990 	.word	0x20007990
 80128c4:	200079a0 	.word	0x200079a0
 80128c8:	08012845 	.word	0x08012845

080128cc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	4903      	ldr	r1, [pc, #12]	; (80128f4 <cyclic_timer+0x28>)
 80128e6:	4618      	mov	r0, r3
 80128e8:	f000 f82e 	bl	8012948 <sys_timeout>
}
 80128ec:	bf00      	nop
 80128ee:	3710      	adds	r7, #16
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	080128cd 	.word	0x080128cd

080128f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128fe:	2301      	movs	r3, #1
 8012900:	607b      	str	r3, [r7, #4]
 8012902:	e00e      	b.n	8012922 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012904:	4a0d      	ldr	r2, [pc, #52]	; (801293c <sys_timeouts_init+0x44>)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	00db      	lsls	r3, r3, #3
 8012910:	4a0a      	ldr	r2, [pc, #40]	; (801293c <sys_timeouts_init+0x44>)
 8012912:	4413      	add	r3, r2
 8012914:	461a      	mov	r2, r3
 8012916:	490a      	ldr	r1, [pc, #40]	; (8012940 <sys_timeouts_init+0x48>)
 8012918:	f000 f816 	bl	8012948 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	3301      	adds	r3, #1
 8012920:	607b      	str	r3, [r7, #4]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2b04      	cmp	r3, #4
 8012926:	d9ed      	bls.n	8012904 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012928:	f7f6 ff54 	bl	80097d4 <sys_now>
 801292c:	4602      	mov	r2, r0
 801292e:	4b05      	ldr	r3, [pc, #20]	; (8012944 <sys_timeouts_init+0x4c>)
 8012930:	601a      	str	r2, [r3, #0]
}
 8012932:	bf00      	nop
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	0801acd4 	.word	0x0801acd4
 8012940:	080128cd 	.word	0x080128cd
 8012944:	200040ec 	.word	0x200040ec

08012948 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012954:	200a      	movs	r0, #10
 8012956:	f7fa fb9d 	bl	800d094 <memp_malloc>
 801295a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10a      	bne.n	8012978 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	f040 8084 	bne.w	8012a72 <sys_timeout+0x12a>
 801296a:	4b44      	ldr	r3, [pc, #272]	; (8012a7c <sys_timeout+0x134>)
 801296c:	22d4      	movs	r2, #212	; 0xd4
 801296e:	4944      	ldr	r1, [pc, #272]	; (8012a80 <sys_timeout+0x138>)
 8012970:	4844      	ldr	r0, [pc, #272]	; (8012a84 <sys_timeout+0x13c>)
 8012972:	f004 ff49 	bl	8017808 <iprintf>
    return;
 8012976:	e07c      	b.n	8012a72 <sys_timeout+0x12a>
  }

  now = sys_now();
 8012978:	f7f6 ff2c 	bl	80097d4 <sys_now>
 801297c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801297e:	4b42      	ldr	r3, [pc, #264]	; (8012a88 <sys_timeout+0x140>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d105      	bne.n	8012992 <sys_timeout+0x4a>
    diff = 0;
 8012986:	2300      	movs	r3, #0
 8012988:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801298a:	4a40      	ldr	r2, [pc, #256]	; (8012a8c <sys_timeout+0x144>)
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	6013      	str	r3, [r2, #0]
 8012990:	e004      	b.n	801299c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012992:	4b3e      	ldr	r3, [pc, #248]	; (8012a8c <sys_timeout+0x144>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	693a      	ldr	r2, [r7, #16]
 8012998:	1ad3      	subs	r3, r2, r3
 801299a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	2200      	movs	r2, #0
 80129a0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	68ba      	ldr	r2, [r7, #8]
 80129a6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	441a      	add	r2, r3
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80129b8:	4b33      	ldr	r3, [pc, #204]	; (8012a88 <sys_timeout+0x140>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d103      	bne.n	80129c8 <sys_timeout+0x80>
    next_timeout = timeout;
 80129c0:	4a31      	ldr	r2, [pc, #196]	; (8012a88 <sys_timeout+0x140>)
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	6013      	str	r3, [r2, #0]
    return;
 80129c6:	e055      	b.n	8012a74 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80129c8:	4b2f      	ldr	r3, [pc, #188]	; (8012a88 <sys_timeout+0x140>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	68fa      	ldr	r2, [r7, #12]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d20f      	bcs.n	80129f4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80129d4:	4b2c      	ldr	r3, [pc, #176]	; (8012a88 <sys_timeout+0x140>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6859      	ldr	r1, [r3, #4]
 80129da:	4b2b      	ldr	r3, [pc, #172]	; (8012a88 <sys_timeout+0x140>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	1a8a      	subs	r2, r1, r2
 80129e2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80129e4:	4b28      	ldr	r3, [pc, #160]	; (8012a88 <sys_timeout+0x140>)
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80129ec:	4a26      	ldr	r2, [pc, #152]	; (8012a88 <sys_timeout+0x140>)
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	6013      	str	r3, [r2, #0]
 80129f2:	e03f      	b.n	8012a74 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80129f4:	4b24      	ldr	r3, [pc, #144]	; (8012a88 <sys_timeout+0x140>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	61fb      	str	r3, [r7, #28]
 80129fa:	e036      	b.n	8012a6a <sys_timeout+0x122>
      timeout->time -= t->time;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	685a      	ldr	r2, [r3, #4]
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	1ad2      	subs	r2, r2, r3
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d006      	beq.n	8012a20 <sys_timeout+0xd8>
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	685a      	ldr	r2, [r3, #4]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d921      	bls.n	8012a64 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d009      	beq.n	8012a3c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	6859      	ldr	r1, [r3, #4]
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	1a8a      	subs	r2, r1, r2
 8012a38:	605a      	str	r2, [r3, #4]
 8012a3a:	e00b      	b.n	8012a54 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	68fa      	ldr	r2, [r7, #12]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d206      	bcs.n	8012a54 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012a46:	4b10      	ldr	r3, [pc, #64]	; (8012a88 <sys_timeout+0x140>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	685a      	ldr	r2, [r3, #4]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	441a      	add	r2, r3
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	697a      	ldr	r2, [r7, #20]
 8012a60:	601a      	str	r2, [r3, #0]
        break;
 8012a62:	e007      	b.n	8012a74 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	61fb      	str	r3, [r7, #28]
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d1c5      	bne.n	80129fc <sys_timeout+0xb4>
 8012a70:	e000      	b.n	8012a74 <sys_timeout+0x12c>
    return;
 8012a72:	bf00      	nop
      }
    }
  }
}
 8012a74:	3720      	adds	r7, #32
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	08019dfc 	.word	0x08019dfc
 8012a80:	08019e54 	.word	0x08019e54
 8012a84:	08019e94 	.word	0x08019e94
 8012a88:	200040e8 	.word	0x200040e8
 8012a8c:	200040ec 	.word	0x200040ec

08012a90 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8012a96:	4b24      	ldr	r3, [pc, #144]	; (8012b28 <sys_check_timeouts+0x98>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d03f      	beq.n	8012b1e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012a9e:	f7f6 fe99 	bl	80097d4 <sys_now>
 8012aa2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8012aa4:	4b21      	ldr	r3, [pc, #132]	; (8012b2c <sys_check_timeouts+0x9c>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8012ab2:	4b1d      	ldr	r3, [pc, #116]	; (8012b28 <sys_check_timeouts+0x98>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d02c      	beq.n	8012b18 <sys_check_timeouts+0x88>
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d327      	bcc.n	8012b18 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	4b16      	ldr	r3, [pc, #88]	; (8012b2c <sys_check_timeouts+0x9c>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	4a15      	ldr	r2, [pc, #84]	; (8012b2c <sys_check_timeouts+0x9c>)
 8012ad8:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a0f      	ldr	r2, [pc, #60]	; (8012b28 <sys_check_timeouts+0x98>)
 8012aea:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	200a      	movs	r0, #10
 8012afc:	f7fa fb40 	bl	800d180 <memp_free>
        if (handler != NULL) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d008      	beq.n	8012b18 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8012b06:	480a      	ldr	r0, [pc, #40]	; (8012b30 <sys_check_timeouts+0xa0>)
 8012b08:	f004 fdd8 	bl	80176bc <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6838      	ldr	r0, [r7, #0]
 8012b10:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8012b12:	4807      	ldr	r0, [pc, #28]	; (8012b30 <sys_check_timeouts+0xa0>)
 8012b14:	f004 fde1 	bl	80176da <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012b18:	7cfb      	ldrb	r3, [r7, #19]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1c7      	bne.n	8012aae <sys_check_timeouts+0x1e>
  }
}
 8012b1e:	bf00      	nop
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	200040e8 	.word	0x200040e8
 8012b2c:	200040ec 	.word	0x200040ec
 8012b30:	200048b0 	.word	0x200048b0

08012b34 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012b3a:	4b0f      	ldr	r3, [pc, #60]	; (8012b78 <sys_timeouts_sleeptime+0x44>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d102      	bne.n	8012b48 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8012b42:	f04f 33ff 	mov.w	r3, #4294967295
 8012b46:	e013      	b.n	8012b70 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012b48:	f7f6 fe44 	bl	80097d4 <sys_now>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	4b0b      	ldr	r3, [pc, #44]	; (8012b7c <sys_timeouts_sleeptime+0x48>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	1ad3      	subs	r3, r2, r3
 8012b54:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8012b56:	4b08      	ldr	r3, [pc, #32]	; (8012b78 <sys_timeouts_sleeptime+0x44>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d901      	bls.n	8012b66 <sys_timeouts_sleeptime+0x32>
    return 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	e004      	b.n	8012b70 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8012b66:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <sys_timeouts_sleeptime+0x44>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	685a      	ldr	r2, [r3, #4]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	1ad3      	subs	r3, r2, r3
  }
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	200040e8 	.word	0x200040e8
 8012b7c:	200040ec 	.word	0x200040ec

08012b80 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012b8a:	4b0f      	ldr	r3, [pc, #60]	; (8012bc8 <sys_timeouts_mbox_fetch+0x48>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d105      	bne.n	8012b9e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012b92:	2200      	movs	r2, #0
 8012b94:	6839      	ldr	r1, [r7, #0]
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f004 fd15 	bl	80175c6 <sys_arch_mbox_fetch>
    return;
 8012b9c:	e011      	b.n	8012bc2 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8012b9e:	f7ff ffc9 	bl	8012b34 <sys_timeouts_sleeptime>
 8012ba2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d008      	beq.n	8012bbc <sys_timeouts_mbox_fetch+0x3c>
 8012baa:	68fa      	ldr	r2, [r7, #12]
 8012bac:	6839      	ldr	r1, [r7, #0]
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f004 fd09 	bl	80175c6 <sys_arch_mbox_fetch>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bba:	d102      	bne.n	8012bc2 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012bbc:	f7ff ff68 	bl	8012a90 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012bc0:	e7e3      	b.n	8012b8a <sys_timeouts_mbox_fetch+0xa>
  }
}
 8012bc2:	3710      	adds	r7, #16
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	200040e8 	.word	0x200040e8

08012bcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012bd0:	bf00      	nop
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
	...

08012bdc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012be6:	4b17      	ldr	r3, [pc, #92]	; (8012c44 <udp_new_port+0x68>)
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	b291      	uxth	r1, r2
 8012bee:	4a15      	ldr	r2, [pc, #84]	; (8012c44 <udp_new_port+0x68>)
 8012bf0:	8011      	strh	r1, [r2, #0]
 8012bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d103      	bne.n	8012c02 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012bfa:	4b12      	ldr	r3, [pc, #72]	; (8012c44 <udp_new_port+0x68>)
 8012bfc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012c00:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c02:	4b11      	ldr	r3, [pc, #68]	; (8012c48 <udp_new_port+0x6c>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	603b      	str	r3, [r7, #0]
 8012c08:	e011      	b.n	8012c2e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	8a5a      	ldrh	r2, [r3, #18]
 8012c0e:	4b0d      	ldr	r3, [pc, #52]	; (8012c44 <udp_new_port+0x68>)
 8012c10:	881b      	ldrh	r3, [r3, #0]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d108      	bne.n	8012c28 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012c16:	88fb      	ldrh	r3, [r7, #6]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	80fb      	strh	r3, [r7, #6]
 8012c1c:	88fb      	ldrh	r3, [r7, #6]
 8012c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c22:	d3e0      	bcc.n	8012be6 <udp_new_port+0xa>
        return 0;
 8012c24:	2300      	movs	r3, #0
 8012c26:	e007      	b.n	8012c38 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	603b      	str	r3, [r7, #0]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1ea      	bne.n	8012c0a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012c34:	4b03      	ldr	r3, [pc, #12]	; (8012c44 <udp_new_port+0x68>)
 8012c36:	881b      	ldrh	r3, [r3, #0]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	370c      	adds	r7, #12
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr
 8012c44:	2000002c 	.word	0x2000002c
 8012c48:	200079a8 	.word	0x200079a8

08012c4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	4613      	mov	r3, r2
 8012c58:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012c5a:	79fb      	ldrb	r3, [r7, #7]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d018      	beq.n	8012c92 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d013      	beq.n	8012c8e <udp_input_local_match+0x42>
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d00f      	beq.n	8012c8e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012c6e:	4b14      	ldr	r3, [pc, #80]	; (8012cc0 <udp_input_local_match+0x74>)
 8012c70:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c76:	d00a      	beq.n	8012c8e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	4b10      	ldr	r3, [pc, #64]	; (8012cc0 <udp_input_local_match+0x74>)
 8012c7e:	695b      	ldr	r3, [r3, #20]
 8012c80:	405a      	eors	r2, r3
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	3308      	adds	r3, #8
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d110      	bne.n	8012cb0 <udp_input_local_match+0x64>
          return 1;
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e00f      	b.n	8012cb2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d009      	beq.n	8012cac <udp_input_local_match+0x60>
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d005      	beq.n	8012cac <udp_input_local_match+0x60>
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	4b06      	ldr	r3, [pc, #24]	; (8012cc0 <udp_input_local_match+0x74>)
 8012ca6:	695b      	ldr	r3, [r3, #20]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d101      	bne.n	8012cb0 <udp_input_local_match+0x64>
      return 1;
 8012cac:	2301      	movs	r3, #1
 8012cae:	e000      	b.n	8012cb2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3714      	adds	r7, #20
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	200048b4 	.word	0x200048b4

08012cc4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012cc4:	b590      	push	{r4, r7, lr}
 8012cc6:	b08d      	sub	sp, #52	; 0x34
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	895b      	ldrh	r3, [r3, #10]
 8012cd6:	2b07      	cmp	r3, #7
 8012cd8:	d803      	bhi.n	8012ce2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7fa fff2 	bl	800dcc4 <pbuf_free>
    goto end;
 8012ce0:	e0c6      	b.n	8012e70 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ce8:	4b63      	ldr	r3, [pc, #396]	; (8012e78 <udp_input+0x1b4>)
 8012cea:	695a      	ldr	r2, [r3, #20]
 8012cec:	4b62      	ldr	r3, [pc, #392]	; (8012e78 <udp_input+0x1b4>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	4610      	mov	r0, r2
 8012cf4:	f003 fd2c 	bl	8016750 <ip4_addr_isbroadcast_u32>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7f9 fdba 	bl	800c87c <lwip_htons>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	885b      	ldrh	r3, [r3, #2]
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f9 fdb2 	bl	800c87c <lwip_htons>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012d20:	2300      	movs	r3, #0
 8012d22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012d24:	2300      	movs	r3, #0
 8012d26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d28:	4b54      	ldr	r3, [pc, #336]	; (8012e7c <udp_input+0x1b8>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d2e:	e03b      	b.n	8012da8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d32:	8a5b      	ldrh	r3, [r3, #18]
 8012d34:	89fa      	ldrh	r2, [r7, #14]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d131      	bne.n	8012d9e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012d3a:	7cfb      	ldrb	r3, [r7, #19]
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	6839      	ldr	r1, [r7, #0]
 8012d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d42:	f7ff ff83 	bl	8012c4c <udp_input_local_match>
 8012d46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d028      	beq.n	8012d9e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4e:	7c1b      	ldrb	r3, [r3, #16]
 8012d50:	f003 0304 	and.w	r3, r3, #4
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d104      	bne.n	8012d62 <udp_input+0x9e>
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d101      	bne.n	8012d62 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d64:	8a9b      	ldrh	r3, [r3, #20]
 8012d66:	8a3a      	ldrh	r2, [r7, #16]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d118      	bne.n	8012d9e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d005      	beq.n	8012d80 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	685a      	ldr	r2, [r3, #4]
 8012d78:	4b3f      	ldr	r3, [pc, #252]	; (8012e78 <udp_input+0x1b4>)
 8012d7a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d10e      	bne.n	8012d9e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012d80:	6a3b      	ldr	r3, [r7, #32]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d014      	beq.n	8012db0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	68da      	ldr	r2, [r3, #12]
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012d8e:	4b3b      	ldr	r3, [pc, #236]	; (8012e7c <udp_input+0x1b8>)
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012d96:	4a39      	ldr	r2, [pc, #228]	; (8012e7c <udp_input+0x1b8>)
 8012d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012d9c:	e008      	b.n	8012db0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	627b      	str	r3, [r7, #36]	; 0x24
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1c0      	bne.n	8012d30 <udp_input+0x6c>
 8012dae:	e000      	b.n	8012db2 <udp_input+0xee>
        break;
 8012db0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d101      	bne.n	8012dbc <udp_input+0xf8>
    pcb = uncon_pcb;
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d002      	beq.n	8012dc8 <udp_input+0x104>
    for_us = 1;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	76fb      	strb	r3, [r7, #27]
 8012dc6:	e00a      	b.n	8012dde <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	4b2a      	ldr	r3, [pc, #168]	; (8012e78 <udp_input+0x1b4>)
 8012dd0:	695b      	ldr	r3, [r3, #20]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	bf0c      	ite	eq
 8012dd6:	2301      	moveq	r3, #1
 8012dd8:	2300      	movne	r3, #0
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012dde:	7efb      	ldrb	r3, [r7, #27]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d042      	beq.n	8012e6a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012de4:	f06f 0107 	mvn.w	r1, #7
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7fa ff47 	bl	800dc7c <pbuf_header>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d00a      	beq.n	8012e0a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012df4:	4b22      	ldr	r3, [pc, #136]	; (8012e80 <udp_input+0x1bc>)
 8012df6:	f240 1255 	movw	r2, #341	; 0x155
 8012dfa:	4922      	ldr	r1, [pc, #136]	; (8012e84 <udp_input+0x1c0>)
 8012dfc:	4822      	ldr	r0, [pc, #136]	; (8012e88 <udp_input+0x1c4>)
 8012dfe:	f004 fd03 	bl	8017808 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7fa ff5e 	bl	800dcc4 <pbuf_free>
      goto end;
 8012e08:	e032      	b.n	8012e70 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d012      	beq.n	8012e36 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	699b      	ldr	r3, [r3, #24]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d00a      	beq.n	8012e2e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	699c      	ldr	r4, [r3, #24]
 8012e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1e:	69d8      	ldr	r0, [r3, #28]
 8012e20:	8a3b      	ldrh	r3, [r7, #16]
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	4b19      	ldr	r3, [pc, #100]	; (8012e8c <udp_input+0x1c8>)
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012e2c:	e021      	b.n	8012e72 <udp_input+0x1ae>
        pbuf_free(p);
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f7fa ff48 	bl	800dcc4 <pbuf_free>
        goto end;
 8012e34:	e01c      	b.n	8012e70 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012e36:	7cfb      	ldrb	r3, [r7, #19]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d112      	bne.n	8012e62 <udp_input+0x19e>
 8012e3c:	4b0e      	ldr	r3, [pc, #56]	; (8012e78 <udp_input+0x1b4>)
 8012e3e:	695b      	ldr	r3, [r3, #20]
 8012e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e44:	2be0      	cmp	r3, #224	; 0xe0
 8012e46:	d00c      	beq.n	8012e62 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012e48:	4b0b      	ldr	r3, [pc, #44]	; (8012e78 <udp_input+0x1b4>)
 8012e4a:	899b      	ldrh	r3, [r3, #12]
 8012e4c:	3308      	adds	r3, #8
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	b21b      	sxth	r3, r3
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7fa ff23 	bl	800dca0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012e5a:	2103      	movs	r1, #3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f003 f957 	bl	8016110 <icmp_dest_unreach>
      pbuf_free(p);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7fa ff2e 	bl	800dcc4 <pbuf_free>
  return;
 8012e68:	e003      	b.n	8012e72 <udp_input+0x1ae>
    pbuf_free(p);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7fa ff2a 	bl	800dcc4 <pbuf_free>
  return;
 8012e70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012e72:	372c      	adds	r7, #44	; 0x2c
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd90      	pop	{r4, r7, pc}
 8012e78:	200048b4 	.word	0x200048b4
 8012e7c:	200079a8 	.word	0x200079a8
 8012e80:	08019ebc 	.word	0x08019ebc
 8012e84:	08019f10 	.word	0x08019f10
 8012e88:	08019f24 	.word	0x08019f24
 8012e8c:	200048c4 	.word	0x200048c4

08012e90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af02      	add	r7, sp, #8
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d002      	beq.n	8012eaa <udp_sendto_if+0x1a>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <udp_sendto_if+0x20>
    return ERR_VAL;
 8012eaa:	f06f 0305 	mvn.w	r3, #5
 8012eae:	e028      	b.n	8012f02 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d009      	beq.n	8012eca <udp_sendto_if+0x3a>
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d005      	beq.n	8012eca <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ec6:	2be0      	cmp	r3, #224	; 0xe0
 8012ec8:	d103      	bne.n	8012ed2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8012eca:	6a3b      	ldr	r3, [r7, #32]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	617b      	str	r3, [r7, #20]
 8012ed0:	e00b      	b.n	8012eea <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	6a3b      	ldr	r3, [r7, #32]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d002      	beq.n	8012ee6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012ee0:	f06f 0303 	mvn.w	r3, #3
 8012ee4:	e00d      	b.n	8012f02 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012eea:	887a      	ldrh	r2, [r7, #2]
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	9301      	str	r3, [sp, #4]
 8012ef0:	6a3b      	ldr	r3, [r7, #32]
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	68b9      	ldr	r1, [r7, #8]
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 f806 	bl	8012f0c <udp_sendto_if_src>
 8012f00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
	...

08012f0c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b08c      	sub	sp, #48	; 0x30
 8012f10:	af04      	add	r7, sp, #16
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	607a      	str	r2, [r7, #4]
 8012f18:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d002      	beq.n	8012f26 <udp_sendto_if_src+0x1a>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d102      	bne.n	8012f2c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012f26:	f06f 0305 	mvn.w	r3, #5
 8012f2a:	e07e      	b.n	801302a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	8a5b      	ldrh	r3, [r3, #18]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d10f      	bne.n	8012f54 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012f34:	68f9      	ldr	r1, [r7, #12]
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	8a5b      	ldrh	r3, [r3, #18]
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f87f 	bl	8013040 <udp_bind>
 8012f42:	4603      	mov	r3, r0
 8012f44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012f46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d002      	beq.n	8012f54 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012f4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f52:	e06a      	b.n	801302a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012f54:	2108      	movs	r1, #8
 8012f56:	68b8      	ldr	r0, [r7, #8]
 8012f58:	f7fa fe90 	bl	800dc7c <pbuf_header>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d014      	beq.n	8012f8c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012f62:	2200      	movs	r2, #0
 8012f64:	2108      	movs	r1, #8
 8012f66:	2001      	movs	r0, #1
 8012f68:	f7fa fb3a 	bl	800d5e0 <pbuf_alloc>
 8012f6c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d102      	bne.n	8012f7a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012f74:	f04f 33ff 	mov.w	r3, #4294967295
 8012f78:	e057      	b.n	801302a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	891b      	ldrh	r3, [r3, #8]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d006      	beq.n	8012f90 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012f82:	68b9      	ldr	r1, [r7, #8]
 8012f84:	69f8      	ldr	r0, [r7, #28]
 8012f86:	f7fa ffcd 	bl	800df24 <pbuf_chain>
 8012f8a:	e001      	b.n	8012f90 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	895b      	ldrh	r3, [r3, #10]
 8012f94:	2b07      	cmp	r3, #7
 8012f96:	d806      	bhi.n	8012fa6 <udp_sendto_if_src+0x9a>
 8012f98:	4b26      	ldr	r3, [pc, #152]	; (8013034 <udp_sendto_if_src+0x128>)
 8012f9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012f9e:	4926      	ldr	r1, [pc, #152]	; (8013038 <udp_sendto_if_src+0x12c>)
 8012fa0:	4826      	ldr	r0, [pc, #152]	; (801303c <udp_sendto_if_src+0x130>)
 8012fa2:	f004 fc31 	bl	8017808 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	8a5b      	ldrh	r3, [r3, #18]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7f9 fc63 	bl	800c87c <lwip_htons>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	461a      	mov	r2, r3
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012fbe:	887b      	ldrh	r3, [r7, #2]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f9 fc5b 	bl	800c87c <lwip_htons>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	719a      	strb	r2, [r3, #6]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	891b      	ldrh	r3, [r3, #8]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f9 fc4d 	bl	800c87c <lwip_htons>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012fea:	2311      	movs	r3, #17
 8012fec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	7a9b      	ldrb	r3, [r3, #10]
 8012ff2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	7a5b      	ldrb	r3, [r3, #9]
 8012ff8:	7cb9      	ldrb	r1, [r7, #18]
 8012ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ffc:	9202      	str	r2, [sp, #8]
 8012ffe:	7cfa      	ldrb	r2, [r7, #19]
 8013000:	9201      	str	r2, [sp, #4]
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	460b      	mov	r3, r1
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801300a:	69f8      	ldr	r0, [r7, #28]
 801300c:	f003 faf8 	bl	8016600 <ip4_output_if_src>
 8013010:	4603      	mov	r3, r0
 8013012:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013014:	69fa      	ldr	r2, [r7, #28]
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	429a      	cmp	r2, r3
 801301a:	d004      	beq.n	8013026 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801301c:	69f8      	ldr	r0, [r7, #28]
 801301e:	f7fa fe51 	bl	800dcc4 <pbuf_free>
    q = NULL;
 8013022:	2300      	movs	r3, #0
 8013024:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013026:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3720      	adds	r7, #32
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	08019ebc 	.word	0x08019ebc
 8013038:	08019f4c 	.word	0x08019f4c
 801303c:	08019f24 	.word	0x08019f24

08013040 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b086      	sub	sp, #24
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	4613      	mov	r3, r2
 801304c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d101      	bne.n	8013058 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013054:	4b30      	ldr	r3, [pc, #192]	; (8013118 <udp_bind+0xd8>)
 8013056:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d002      	beq.n	8013064 <udp_bind+0x24>
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d102      	bne.n	801306a <udp_bind+0x2a>
    return ERR_VAL;
 8013064:	f06f 0305 	mvn.w	r3, #5
 8013068:	e052      	b.n	8013110 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801306a:	2300      	movs	r3, #0
 801306c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801306e:	4b2b      	ldr	r3, [pc, #172]	; (801311c <udp_bind+0xdc>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	617b      	str	r3, [r7, #20]
 8013074:	e009      	b.n	801308a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	429a      	cmp	r2, r3
 801307c:	d102      	bne.n	8013084 <udp_bind+0x44>
      rebind = 1;
 801307e:	2301      	movs	r3, #1
 8013080:	74fb      	strb	r3, [r7, #19]
      break;
 8013082:	e005      	b.n	8013090 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	617b      	str	r3, [r7, #20]
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d1f2      	bne.n	8013076 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8013090:	88fb      	ldrh	r3, [r7, #6]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d109      	bne.n	80130aa <udp_bind+0x6a>
    port = udp_new_port();
 8013096:	f7ff fda1 	bl	8012bdc <udp_new_port>
 801309a:	4603      	mov	r3, r0
 801309c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801309e:	88fb      	ldrh	r3, [r7, #6]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d11e      	bne.n	80130e2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80130a4:	f06f 0307 	mvn.w	r3, #7
 80130a8:	e032      	b.n	8013110 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130aa:	4b1c      	ldr	r3, [pc, #112]	; (801311c <udp_bind+0xdc>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	617b      	str	r3, [r7, #20]
 80130b0:	e014      	b.n	80130dc <udp_bind+0x9c>
      if (pcb != ipcb) {
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d00d      	beq.n	80130d6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	8a5b      	ldrh	r3, [r3, #18]
 80130be:	88fa      	ldrh	r2, [r7, #6]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d108      	bne.n	80130d6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d102      	bne.n	80130d6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80130d0:	f06f 0307 	mvn.w	r3, #7
 80130d4:	e01c      	b.n	8013110 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	617b      	str	r3, [r7, #20]
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d1e7      	bne.n	80130b2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <udp_bind+0xae>
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	e000      	b.n	80130f0 <udp_bind+0xb0>
 80130ee:	2300      	movs	r3, #0
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	88fa      	ldrh	r2, [r7, #6]
 80130f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80130fa:	7cfb      	ldrb	r3, [r7, #19]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d106      	bne.n	801310e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013100:	4b06      	ldr	r3, [pc, #24]	; (801311c <udp_bind+0xdc>)
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013108:	4a04      	ldr	r2, [pc, #16]	; (801311c <udp_bind+0xdc>)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801310e:	2300      	movs	r3, #0
}
 8013110:	4618      	mov	r0, r3
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	0801acfc 	.word	0x0801acfc
 801311c:	200079a8 	.word	0x200079a8

08013120 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b086      	sub	sp, #24
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	4613      	mov	r3, r2
 801312c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d002      	beq.n	801313a <udp_connect+0x1a>
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d102      	bne.n	8013140 <udp_connect+0x20>
    return ERR_VAL;
 801313a:	f06f 0305 	mvn.w	r3, #5
 801313e:	e03e      	b.n	80131be <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	8a5b      	ldrh	r3, [r3, #18]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d10f      	bne.n	8013168 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013148:	68f9      	ldr	r1, [r7, #12]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	8a5b      	ldrh	r3, [r3, #18]
 801314e:	461a      	mov	r2, r3
 8013150:	68f8      	ldr	r0, [r7, #12]
 8013152:	f7ff ff75 	bl	8013040 <udp_bind>
 8013156:	4603      	mov	r3, r0
 8013158:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801315a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <udp_connect+0x48>
      return err;
 8013162:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013166:	e02a      	b.n	80131be <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d002      	beq.n	8013174 <udp_connect+0x54>
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	e000      	b.n	8013176 <udp_connect+0x56>
 8013174:	2300      	movs	r3, #0
 8013176:	68fa      	ldr	r2, [r7, #12]
 8013178:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	88fa      	ldrh	r2, [r7, #6]
 801317e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	7c1b      	ldrb	r3, [r3, #16]
 8013184:	f043 0304 	orr.w	r3, r3, #4
 8013188:	b2da      	uxtb	r2, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801318e:	4b0e      	ldr	r3, [pc, #56]	; (80131c8 <udp_connect+0xa8>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e008      	b.n	80131a8 <udp_connect+0x88>
    if (pcb == ipcb) {
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	429a      	cmp	r2, r3
 801319c:	d101      	bne.n	80131a2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	e00d      	b.n	80131be <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	617b      	str	r3, [r7, #20]
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1f3      	bne.n	8013196 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80131ae:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <udp_connect+0xa8>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80131b6:	4a04      	ldr	r2, [pc, #16]	; (80131c8 <udp_connect+0xa8>)
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3718      	adds	r7, #24
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	200079a8 	.word	0x200079a8

080131cc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b085      	sub	sp, #20
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	61da      	str	r2, [r3, #28]
}
 80131e4:	bf00      	nop
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr

080131f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80131f8:	4b15      	ldr	r3, [pc, #84]	; (8013250 <udp_remove+0x60>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d105      	bne.n	801320e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013202:	4b13      	ldr	r3, [pc, #76]	; (8013250 <udp_remove+0x60>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	4a11      	ldr	r2, [pc, #68]	; (8013250 <udp_remove+0x60>)
 801320a:	6013      	str	r3, [r2, #0]
 801320c:	e017      	b.n	801323e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801320e:	4b10      	ldr	r3, [pc, #64]	; (8013250 <udp_remove+0x60>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	60fb      	str	r3, [r7, #12]
 8013214:	e010      	b.n	8013238 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d009      	beq.n	8013232 <udp_remove+0x42>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	429a      	cmp	r2, r3
 8013226:	d104      	bne.n	8013232 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	68da      	ldr	r2, [r3, #12]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	60da      	str	r2, [r3, #12]
        break;
 8013230:	e005      	b.n	801323e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d1eb      	bne.n	8013216 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801323e:	6879      	ldr	r1, [r7, #4]
 8013240:	2000      	movs	r0, #0
 8013242:	f7f9 ff9d 	bl	800d180 <memp_free>
}
 8013246:	bf00      	nop
 8013248:	3710      	adds	r7, #16
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	200079a8 	.word	0x200079a8

08013254 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801325a:	2000      	movs	r0, #0
 801325c:	f7f9 ff1a 	bl	800d094 <memp_malloc>
 8013260:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d007      	beq.n	8013278 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013268:	2220      	movs	r2, #32
 801326a:	2100      	movs	r1, #0
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f004 fac3 	bl	80177f8 <memset>
    pcb->ttl = UDP_TTL;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	22ff      	movs	r2, #255	; 0xff
 8013276:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013278:	687b      	ldr	r3, [r7, #4]
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
	...

08013284 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8013284:	b480      	push	{r7}
 8013286:	b085      	sub	sp, #20
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d01e      	beq.n	80132d2 <udp_netif_ip_addr_changed+0x4e>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d01a      	beq.n	80132d2 <udp_netif_ip_addr_changed+0x4e>
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d017      	beq.n	80132d2 <udp_netif_ip_addr_changed+0x4e>
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d013      	beq.n	80132d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80132aa:	4b0d      	ldr	r3, [pc, #52]	; (80132e0 <udp_netif_ip_addr_changed+0x5c>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	60fb      	str	r3, [r7, #12]
 80132b0:	e00c      	b.n	80132cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d103      	bne.n	80132c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	60fb      	str	r3, [r7, #12]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1ef      	bne.n	80132b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80132d2:	bf00      	nop
 80132d4:	3714      	adds	r7, #20
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	200079a8 	.word	0x200079a8

080132e4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80132e8:	4b20      	ldr	r3, [pc, #128]	; (801336c <dhcp_inc_pcb_refcount+0x88>)
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d133      	bne.n	8013358 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80132f0:	4b1f      	ldr	r3, [pc, #124]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d005      	beq.n	8013304 <dhcp_inc_pcb_refcount+0x20>
 80132f8:	4b1e      	ldr	r3, [pc, #120]	; (8013374 <dhcp_inc_pcb_refcount+0x90>)
 80132fa:	22d9      	movs	r2, #217	; 0xd9
 80132fc:	491e      	ldr	r1, [pc, #120]	; (8013378 <dhcp_inc_pcb_refcount+0x94>)
 80132fe:	481f      	ldr	r0, [pc, #124]	; (801337c <dhcp_inc_pcb_refcount+0x98>)
 8013300:	f004 fa82 	bl	8017808 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013304:	f7ff ffa6 	bl	8013254 <udp_new>
 8013308:	4602      	mov	r2, r0
 801330a:	4b19      	ldr	r3, [pc, #100]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 801330c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801330e:	4b18      	ldr	r3, [pc, #96]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d102      	bne.n	801331c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013316:	f04f 33ff 	mov.w	r3, #4294967295
 801331a:	e024      	b.n	8013366 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801331c:	4b14      	ldr	r3, [pc, #80]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	7a1a      	ldrb	r2, [r3, #8]
 8013322:	4b13      	ldr	r3, [pc, #76]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f042 0220 	orr.w	r2, r2, #32
 801332a:	b2d2      	uxtb	r2, r2
 801332c:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801332e:	4b10      	ldr	r3, [pc, #64]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2244      	movs	r2, #68	; 0x44
 8013334:	4912      	ldr	r1, [pc, #72]	; (8013380 <dhcp_inc_pcb_refcount+0x9c>)
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff fe82 	bl	8013040 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801333c:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2243      	movs	r2, #67	; 0x43
 8013342:	490f      	ldr	r1, [pc, #60]	; (8013380 <dhcp_inc_pcb_refcount+0x9c>)
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff feeb 	bl	8013120 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801334a:	4b09      	ldr	r3, [pc, #36]	; (8013370 <dhcp_inc_pcb_refcount+0x8c>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2200      	movs	r2, #0
 8013350:	490c      	ldr	r1, [pc, #48]	; (8013384 <dhcp_inc_pcb_refcount+0xa0>)
 8013352:	4618      	mov	r0, r3
 8013354:	f7ff ff3a 	bl	80131cc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013358:	4b04      	ldr	r3, [pc, #16]	; (801336c <dhcp_inc_pcb_refcount+0x88>)
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	3301      	adds	r3, #1
 801335e:	b2da      	uxtb	r2, r3
 8013360:	4b02      	ldr	r3, [pc, #8]	; (801336c <dhcp_inc_pcb_refcount+0x88>)
 8013362:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013364:	2300      	movs	r3, #0
}
 8013366:	4618      	mov	r0, r3
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	200040f8 	.word	0x200040f8
 8013370:	200040f4 	.word	0x200040f4
 8013374:	08019f7c 	.word	0x08019f7c
 8013378:	08019fd4 	.word	0x08019fd4
 801337c:	08019ffc 	.word	0x08019ffc
 8013380:	0801acfc 	.word	0x0801acfc
 8013384:	08014ac1 	.word	0x08014ac1

08013388 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801338c:	4b0e      	ldr	r3, [pc, #56]	; (80133c8 <dhcp_dec_pcb_refcount+0x40>)
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d105      	bne.n	80133a0 <dhcp_dec_pcb_refcount+0x18>
 8013394:	4b0d      	ldr	r3, [pc, #52]	; (80133cc <dhcp_dec_pcb_refcount+0x44>)
 8013396:	22f3      	movs	r2, #243	; 0xf3
 8013398:	490d      	ldr	r1, [pc, #52]	; (80133d0 <dhcp_dec_pcb_refcount+0x48>)
 801339a:	480e      	ldr	r0, [pc, #56]	; (80133d4 <dhcp_dec_pcb_refcount+0x4c>)
 801339c:	f004 fa34 	bl	8017808 <iprintf>
  dhcp_pcb_refcount--;
 80133a0:	4b09      	ldr	r3, [pc, #36]	; (80133c8 <dhcp_dec_pcb_refcount+0x40>)
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	4b07      	ldr	r3, [pc, #28]	; (80133c8 <dhcp_dec_pcb_refcount+0x40>)
 80133aa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80133ac:	4b06      	ldr	r3, [pc, #24]	; (80133c8 <dhcp_dec_pcb_refcount+0x40>)
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d107      	bne.n	80133c4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80133b4:	4b08      	ldr	r3, [pc, #32]	; (80133d8 <dhcp_dec_pcb_refcount+0x50>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ff ff19 	bl	80131f0 <udp_remove>
    dhcp_pcb = NULL;
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <dhcp_dec_pcb_refcount+0x50>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	601a      	str	r2, [r3, #0]
  }
}
 80133c4:	bf00      	nop
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	200040f8 	.word	0x200040f8
 80133cc:	08019f7c 	.word	0x08019f7c
 80133d0:	0801a024 	.word	0x0801a024
 80133d4:	08019ffc 	.word	0x08019ffc
 80133d8:	200040f4 	.word	0x200040f4

080133dc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6a1b      	ldr	r3, [r3, #32]
 80133e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80133ea:	210c      	movs	r1, #12
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f000 ffc5 	bl	801437c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80133f2:	4b06      	ldr	r3, [pc, #24]	; (801340c <dhcp_handle_nak+0x30>)
 80133f4:	4a05      	ldr	r2, [pc, #20]	; (801340c <dhcp_handle_nak+0x30>)
 80133f6:	4905      	ldr	r1, [pc, #20]	; (801340c <dhcp_handle_nak+0x30>)
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7f9 ff4f 	bl	800d29c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 fbf6 	bl	8013bf0 <dhcp_discover>
}
 8013404:	bf00      	nop
 8013406:	3710      	adds	r7, #16
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	0801acfc 	.word	0x0801acfc

08013410 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801341e:	2108      	movs	r1, #8
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	f000 ffab 	bl	801437c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3328      	adds	r3, #40	; 0x28
 801342a:	2200      	movs	r2, #0
 801342c:	4619      	mov	r1, r3
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f002 fb5e 	bl	8015af0 <etharp_query>
 8013434:	4603      	mov	r3, r0
 8013436:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	7a9b      	ldrb	r3, [r3, #10]
 801343c:	2bff      	cmp	r3, #255	; 0xff
 801343e:	d005      	beq.n	801344c <dhcp_check+0x3c>
    dhcp->tries++;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	7a9b      	ldrb	r3, [r3, #10]
 8013444:	3301      	adds	r3, #1
 8013446:	b2da      	uxtb	r2, r3
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801344c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013450:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013452:	893b      	ldrh	r3, [r7, #8]
 8013454:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013458:	4a06      	ldr	r2, [pc, #24]	; (8013474 <dhcp_check+0x64>)
 801345a:	fb82 1203 	smull	r1, r2, r2, r3
 801345e:	1152      	asrs	r2, r2, #5
 8013460:	17db      	asrs	r3, r3, #31
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	b29a      	uxth	r2, r3
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801346a:	bf00      	nop
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	10624dd3 	.word	0x10624dd3

08013478 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a1b      	ldr	r3, [r3, #32]
 8013484:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013486:	4b0c      	ldr	r3, [pc, #48]	; (80134b8 <dhcp_handle_offer+0x40>)
 8013488:	789b      	ldrb	r3, [r3, #2]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d00f      	beq.n	80134ae <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801348e:	4b0b      	ldr	r3, [pc, #44]	; (80134bc <dhcp_handle_offer+0x44>)
 8013490:	689b      	ldr	r3, [r3, #8]
 8013492:	4618      	mov	r0, r3
 8013494:	f7f9 fa00 	bl	800c898 <lwip_htonl>
 8013498:	4602      	mov	r2, r0
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	691a      	ldr	r2, [r3, #16]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 f809 	bl	80134c0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 80134ae:	bf00      	nop
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	200079ac 	.word	0x200079ac
 80134bc:	200079b4 	.word	0x200079b4

080134c0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b088      	sub	sp, #32
 80134c4:	af02      	add	r7, sp, #8
 80134c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6a1b      	ldr	r3, [r3, #32]
 80134cc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80134ce:	2101      	movs	r1, #1
 80134d0:	6938      	ldr	r0, [r7, #16]
 80134d2:	f000 ff53 	bl	801437c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80134d6:	2203      	movs	r2, #3
 80134d8:	6939      	ldr	r1, [r7, #16]
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f001 fbd4 	bl	8014c88 <dhcp_create_msg>
 80134e0:	4603      	mov	r3, r0
 80134e2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80134e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d159      	bne.n	80135a0 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80134ec:	2202      	movs	r2, #2
 80134ee:	2139      	movs	r1, #57	; 0x39
 80134f0:	6938      	ldr	r0, [r7, #16]
 80134f2:	f000 ff5d 	bl	80143b0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80134fa:	4619      	mov	r1, r3
 80134fc:	6938      	ldr	r0, [r7, #16]
 80134fe:	f000 ffb9 	bl	8014474 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013502:	2204      	movs	r2, #4
 8013504:	2132      	movs	r1, #50	; 0x32
 8013506:	6938      	ldr	r0, [r7, #16]
 8013508:	f000 ff52 	bl	80143b0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013510:	4618      	mov	r0, r3
 8013512:	f7f9 f9c1 	bl	800c898 <lwip_htonl>
 8013516:	4603      	mov	r3, r0
 8013518:	4619      	mov	r1, r3
 801351a:	6938      	ldr	r0, [r7, #16]
 801351c:	f000 ffe4 	bl	80144e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8013520:	2204      	movs	r2, #4
 8013522:	2136      	movs	r1, #54	; 0x36
 8013524:	6938      	ldr	r0, [r7, #16]
 8013526:	f000 ff43 	bl	80143b0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801352e:	4618      	mov	r0, r3
 8013530:	f7f9 f9b2 	bl	800c898 <lwip_htonl>
 8013534:	4603      	mov	r3, r0
 8013536:	4619      	mov	r1, r3
 8013538:	6938      	ldr	r0, [r7, #16]
 801353a:	f000 ffd5 	bl	80144e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801353e:	2203      	movs	r2, #3
 8013540:	2137      	movs	r1, #55	; 0x37
 8013542:	6938      	ldr	r0, [r7, #16]
 8013544:	f000 ff34 	bl	80143b0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013548:	2300      	movs	r3, #0
 801354a:	75fb      	strb	r3, [r7, #23]
 801354c:	e009      	b.n	8013562 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801354e:	7dfb      	ldrb	r3, [r7, #23]
 8013550:	4a29      	ldr	r2, [pc, #164]	; (80135f8 <dhcp_select+0x138>)
 8013552:	5cd3      	ldrb	r3, [r2, r3]
 8013554:	4619      	mov	r1, r3
 8013556:	6938      	ldr	r0, [r7, #16]
 8013558:	f000 ff64 	bl	8014424 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801355c:	7dfb      	ldrb	r3, [r7, #23]
 801355e:	3301      	adds	r3, #1
 8013560:	75fb      	strb	r3, [r7, #23]
 8013562:	7dfb      	ldrb	r3, [r7, #23]
 8013564:	2b02      	cmp	r3, #2
 8013566:	d9f2      	bls.n	801354e <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8013568:	6938      	ldr	r0, [r7, #16]
 801356a:	f001 fd31 	bl	8014fd0 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	68da      	ldr	r2, [r3, #12]
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	8a9b      	ldrh	r3, [r3, #20]
 8013576:	33f0      	adds	r3, #240	; 0xf0
 8013578:	b29b      	uxth	r3, r3
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7fa fa2d 	bl	800d9dc <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013582:	4b1e      	ldr	r3, [pc, #120]	; (80135fc <dhcp_select+0x13c>)
 8013584:	6818      	ldr	r0, [r3, #0]
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	68d9      	ldr	r1, [r3, #12]
 801358a:	4b1d      	ldr	r3, [pc, #116]	; (8013600 <dhcp_select+0x140>)
 801358c:	9301      	str	r3, [sp, #4]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	9300      	str	r3, [sp, #0]
 8013592:	2343      	movs	r3, #67	; 0x43
 8013594:	4a1b      	ldr	r2, [pc, #108]	; (8013604 <dhcp_select+0x144>)
 8013596:	f7ff fcb9 	bl	8012f0c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801359a:	6938      	ldr	r0, [r7, #16]
 801359c:	f001 fcd6 	bl	8014f4c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	7a9b      	ldrb	r3, [r3, #10]
 80135a4:	2bff      	cmp	r3, #255	; 0xff
 80135a6:	d005      	beq.n	80135b4 <dhcp_select+0xf4>
    dhcp->tries++;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	7a9b      	ldrb	r3, [r3, #10]
 80135ac:	3301      	adds	r3, #1
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	7a9b      	ldrb	r3, [r3, #10]
 80135b8:	2b05      	cmp	r3, #5
 80135ba:	d807      	bhi.n	80135cc <dhcp_select+0x10c>
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	7a9b      	ldrb	r3, [r3, #10]
 80135c0:	461a      	mov	r2, r3
 80135c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80135c6:	4093      	lsls	r3, r2
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	e001      	b.n	80135d0 <dhcp_select+0x110>
 80135cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80135d0:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80135d2:	89bb      	ldrh	r3, [r7, #12]
 80135d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135d8:	4a0b      	ldr	r2, [pc, #44]	; (8013608 <dhcp_select+0x148>)
 80135da:	fb82 1203 	smull	r1, r2, r2, r3
 80135de:	1152      	asrs	r2, r2, #5
 80135e0:	17db      	asrs	r3, r3, #31
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80135ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3718      	adds	r7, #24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	20000030 	.word	0x20000030
 80135fc:	200040f4 	.word	0x200040f4
 8013600:	0801acfc 	.word	0x0801acfc
 8013604:	0801ad00 	.word	0x0801ad00
 8013608:	10624dd3 	.word	0x10624dd3

0801360c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8013612:	4b27      	ldr	r3, [pc, #156]	; (80136b0 <dhcp_coarse_tmr+0xa4>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8013618:	e042      	b.n	80136a0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6a1b      	ldr	r3, [r3, #32]
 801361e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d039      	beq.n	801369a <dhcp_coarse_tmr+0x8e>
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	7a5b      	ldrb	r3, [r3, #9]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d035      	beq.n	801369a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013632:	2b00      	cmp	r3, #0
 8013634:	d012      	beq.n	801365c <dhcp_coarse_tmr+0x50>
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	8c1b      	ldrh	r3, [r3, #32]
 801363a:	3301      	adds	r3, #1
 801363c:	b29a      	uxth	r2, r3
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	841a      	strh	r2, [r3, #32]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	8c1a      	ldrh	r2, [r3, #32]
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801364a:	429a      	cmp	r2, r3
 801364c:	d106      	bne.n	801365c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 fdd4 	bl	80141fc <dhcp_release>
        dhcp_discover(netif);
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 facb 	bl	8013bf0 <dhcp_discover>
 801365a:	e01e      	b.n	801369a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	8bdb      	ldrh	r3, [r3, #30]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00b      	beq.n	801367c <dhcp_coarse_tmr+0x70>
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	8bdb      	ldrh	r3, [r3, #30]
 8013668:	1e5a      	subs	r2, r3, #1
 801366a:	b291      	uxth	r1, r2
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	83d1      	strh	r1, [r2, #30]
 8013670:	2b01      	cmp	r3, #1
 8013672:	d103      	bne.n	801367c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 f8c7 	bl	8013808 <dhcp_t2_timeout>
 801367a:	e00e      	b.n	801369a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	8b9b      	ldrh	r3, [r3, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00a      	beq.n	801369a <dhcp_coarse_tmr+0x8e>
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	8b9b      	ldrh	r3, [r3, #28]
 8013688:	1e5a      	subs	r2, r3, #1
 801368a:	b291      	uxth	r1, r2
 801368c:	683a      	ldr	r2, [r7, #0]
 801368e:	8391      	strh	r1, [r2, #28]
 8013690:	2b01      	cmp	r3, #1
 8013692:	d102      	bne.n	801369a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f888 	bl	80137aa <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1b9      	bne.n	801361a <dhcp_coarse_tmr+0xe>
  }
}
 80136a6:	bf00      	nop
 80136a8:	3708      	adds	r7, #8
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	20007980 	.word	0x20007980

080136b4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80136ba:	4b16      	ldr	r3, [pc, #88]	; (8013714 <dhcp_fine_tmr+0x60>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 80136c0:	e020      	b.n	8013704 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6a1b      	ldr	r3, [r3, #32]
 80136c6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d017      	beq.n	80136fe <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	8adb      	ldrh	r3, [r3, #22]
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d906      	bls.n	80136e4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	8adb      	ldrh	r3, [r3, #22]
 80136da:	3b01      	subs	r3, #1
 80136dc:	b29a      	uxth	r2, r3
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	82da      	strh	r2, [r3, #22]
 80136e2:	e00c      	b.n	80136fe <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	8adb      	ldrh	r3, [r3, #22]
 80136e8:	2b01      	cmp	r3, #1
 80136ea:	d108      	bne.n	80136fe <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	8adb      	ldrh	r3, [r3, #22]
 80136f0:	3b01      	subs	r3, #1
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f000 f80d 	bl	8013718 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1db      	bne.n	80136c2 <dhcp_fine_tmr+0xe>
  }
}
 801370a:	bf00      	nop
 801370c:	3708      	adds	r7, #8
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	20007980 	.word	0x20007980

08013718 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6a1b      	ldr	r3, [r3, #32]
 8013724:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	7a5b      	ldrb	r3, [r3, #9]
 801372a:	2b0c      	cmp	r3, #12
 801372c:	d003      	beq.n	8013736 <dhcp_timeout+0x1e>
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	7a5b      	ldrb	r3, [r3, #9]
 8013732:	2b06      	cmp	r3, #6
 8013734:	d103      	bne.n	801373e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f000 fa5a 	bl	8013bf0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801373c:	e031      	b.n	80137a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	7a5b      	ldrb	r3, [r3, #9]
 8013742:	2b01      	cmp	r3, #1
 8013744:	d10e      	bne.n	8013764 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	7a9b      	ldrb	r3, [r3, #10]
 801374a:	2b05      	cmp	r3, #5
 801374c:	d803      	bhi.n	8013756 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7ff feb6 	bl	80134c0 <dhcp_select>
}
 8013754:	e025      	b.n	80137a2 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 fd50 	bl	80141fc <dhcp_release>
      dhcp_discover(netif);
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f000 fa47 	bl	8013bf0 <dhcp_discover>
}
 8013762:	e01e      	b.n	80137a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	7a5b      	ldrb	r3, [r3, #9]
 8013768:	2b08      	cmp	r3, #8
 801376a:	d10b      	bne.n	8013784 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	7a9b      	ldrb	r3, [r3, #10]
 8013770:	2b01      	cmp	r3, #1
 8013772:	d803      	bhi.n	801377c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7ff fe4b 	bl	8013410 <dhcp_check>
}
 801377a:	e012      	b.n	80137a2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 fac3 	bl	8013d08 <dhcp_bind>
}
 8013782:	e00e      	b.n	80137a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	7a5b      	ldrb	r3, [r3, #9]
 8013788:	2b03      	cmp	r3, #3
 801378a:	d10a      	bne.n	80137a2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	7a9b      	ldrb	r3, [r3, #10]
 8013790:	2b01      	cmp	r3, #1
 8013792:	d803      	bhi.n	801379c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f000 fc9d 	bl	80140d4 <dhcp_reboot>
}
 801379a:	e002      	b.n	80137a2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 fa27 	bl	8013bf0 <dhcp_discover>
}
 80137a2:	bf00      	nop
 80137a4:	3710      	adds	r7, #16
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b084      	sub	sp, #16
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6a1b      	ldr	r3, [r3, #32]
 80137b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	7a5b      	ldrb	r3, [r3, #9]
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d007      	beq.n	80137d0 <dhcp_t1_timeout+0x26>
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	7a5b      	ldrb	r3, [r3, #9]
 80137c4:	2b0a      	cmp	r3, #10
 80137c6:	d003      	beq.n	80137d0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80137cc:	2b05      	cmp	r3, #5
 80137ce:	d117      	bne.n	8013800 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f000 fb73 	bl	8013ebc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	8b5b      	ldrh	r3, [r3, #26]
 80137da:	461a      	mov	r2, r3
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	8c1b      	ldrh	r3, [r3, #32]
 80137e0:	1ad3      	subs	r3, r2, r3
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	dd0c      	ble.n	8013800 <dhcp_t1_timeout+0x56>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	8b5b      	ldrh	r3, [r3, #26]
 80137ea:	461a      	mov	r2, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	8c1b      	ldrh	r3, [r3, #32]
 80137f0:	1ad3      	subs	r3, r2, r3
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	da00      	bge.n	80137f8 <dhcp_t1_timeout+0x4e>
 80137f6:	3301      	adds	r3, #1
 80137f8:	105b      	asrs	r3, r3, #1
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8013800:	bf00      	nop
 8013802:	3710      	adds	r7, #16
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6a1b      	ldr	r3, [r3, #32]
 8013814:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	7a5b      	ldrb	r3, [r3, #9]
 801381a:	2b01      	cmp	r3, #1
 801381c:	d00b      	beq.n	8013836 <dhcp_t2_timeout+0x2e>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	7a5b      	ldrb	r3, [r3, #9]
 8013822:	2b0a      	cmp	r3, #10
 8013824:	d007      	beq.n	8013836 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801382a:	2b05      	cmp	r3, #5
 801382c:	d003      	beq.n	8013836 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	7a5b      	ldrb	r3, [r3, #9]
 8013832:	2b04      	cmp	r3, #4
 8013834:	d117      	bne.n	8013866 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 fbc6 	bl	8013fc8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013840:	461a      	mov	r2, r3
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	8c1b      	ldrh	r3, [r3, #32]
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	2b01      	cmp	r3, #1
 801384a:	dd0c      	ble.n	8013866 <dhcp_t2_timeout+0x5e>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013850:	461a      	mov	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	8c1b      	ldrh	r3, [r3, #32]
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	2b00      	cmp	r3, #0
 801385a:	da00      	bge.n	801385e <dhcp_t2_timeout+0x56>
 801385c:	3301      	adds	r3, #1
 801385e:	105b      	asrs	r3, r3, #1
 8013860:	b29a      	uxth	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8013866:	bf00      	nop
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
	...

08013870 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a1b      	ldr	r3, [r3, #32]
 801387c:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2200      	movs	r2, #0
 8013882:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2200      	movs	r2, #0
 8013888:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801388a:	4b27      	ldr	r3, [pc, #156]	; (8013928 <dhcp_handle_ack+0xb8>)
 801388c:	78db      	ldrb	r3, [r3, #3]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d003      	beq.n	801389a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013892:	4b26      	ldr	r3, [pc, #152]	; (801392c <dhcp_handle_ack+0xbc>)
 8013894:	68da      	ldr	r2, [r3, #12]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801389a:	4b23      	ldr	r3, [pc, #140]	; (8013928 <dhcp_handle_ack+0xb8>)
 801389c:	791b      	ldrb	r3, [r3, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d004      	beq.n	80138ac <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80138a2:	4b22      	ldr	r3, [pc, #136]	; (801392c <dhcp_handle_ack+0xbc>)
 80138a4:	691a      	ldr	r2, [r3, #16]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	639a      	str	r2, [r3, #56]	; 0x38
 80138aa:	e004      	b.n	80138b6 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b0:	085a      	lsrs	r2, r3, #1
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80138b6:	4b1c      	ldr	r3, [pc, #112]	; (8013928 <dhcp_handle_ack+0xb8>)
 80138b8:	795b      	ldrb	r3, [r3, #5]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d004      	beq.n	80138c8 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80138be:	4b1b      	ldr	r3, [pc, #108]	; (801392c <dhcp_handle_ack+0xbc>)
 80138c0:	695a      	ldr	r2, [r3, #20]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80138c6:	e007      	b.n	80138d8 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138cc:	4613      	mov	r3, r2
 80138ce:	00db      	lsls	r3, r3, #3
 80138d0:	1a9b      	subs	r3, r3, r2
 80138d2:	08da      	lsrs	r2, r3, #3
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	691a      	ldr	r2, [r3, #16]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80138e2:	4b11      	ldr	r3, [pc, #68]	; (8013928 <dhcp_handle_ack+0xb8>)
 80138e4:	799b      	ldrb	r3, [r3, #6]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d00b      	beq.n	8013902 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80138ea:	4b10      	ldr	r3, [pc, #64]	; (801392c <dhcp_handle_ack+0xbc>)
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7f8 ffd2 	bl	800c898 <lwip_htonl>
 80138f4:	4602      	mov	r2, r0
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2201      	movs	r2, #1
 80138fe:	72da      	strb	r2, [r3, #11]
 8013900:	e002      	b.n	8013908 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2200      	movs	r2, #0
 8013906:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013908:	4b07      	ldr	r3, [pc, #28]	; (8013928 <dhcp_handle_ack+0xb8>)
 801390a:	79db      	ldrb	r3, [r3, #7]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d007      	beq.n	8013920 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013910:	4b06      	ldr	r3, [pc, #24]	; (801392c <dhcp_handle_ack+0xbc>)
 8013912:	69db      	ldr	r3, [r3, #28]
 8013914:	4618      	mov	r0, r3
 8013916:	f7f8 ffbf 	bl	800c898 <lwip_htonl>
 801391a:	4602      	mov	r2, r0
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013920:	bf00      	nop
 8013922:	3710      	adds	r7, #16
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	200079ac 	.word	0x200079ac
 801392c:	200079b4 	.word	0x200079b4

08013930 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d109      	bne.n	8013952 <dhcp_start+0x22>
 801393e:	4b3c      	ldr	r3, [pc, #240]	; (8013a30 <dhcp_start+0x100>)
 8013940:	f240 22d6 	movw	r2, #726	; 0x2d6
 8013944:	493b      	ldr	r1, [pc, #236]	; (8013a34 <dhcp_start+0x104>)
 8013946:	483c      	ldr	r0, [pc, #240]	; (8013a38 <dhcp_start+0x108>)
 8013948:	f003 ff5e 	bl	8017808 <iprintf>
 801394c:	f06f 030f 	mvn.w	r3, #15
 8013950:	e069      	b.n	8013a26 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013958:	f003 0301 	and.w	r3, r3, #1
 801395c:	2b00      	cmp	r3, #0
 801395e:	d109      	bne.n	8013974 <dhcp_start+0x44>
 8013960:	4b33      	ldr	r3, [pc, #204]	; (8013a30 <dhcp_start+0x100>)
 8013962:	f240 22d7 	movw	r2, #727	; 0x2d7
 8013966:	4935      	ldr	r1, [pc, #212]	; (8013a3c <dhcp_start+0x10c>)
 8013968:	4833      	ldr	r0, [pc, #204]	; (8013a38 <dhcp_start+0x108>)
 801396a:	f003 ff4d 	bl	8017808 <iprintf>
 801396e:	f06f 030f 	mvn.w	r3, #15
 8013972:	e058      	b.n	8013a26 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6a1b      	ldr	r3, [r3, #32]
 8013978:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801397e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013982:	d202      	bcs.n	801398a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013984:	f04f 33ff 	mov.w	r3, #4294967295
 8013988:	e04d      	b.n	8013a26 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10d      	bne.n	80139ac <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013990:	2040      	movs	r0, #64	; 0x40
 8013992:	f7f9 f9ed 	bl	800cd70 <mem_malloc>
 8013996:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d102      	bne.n	80139a4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801399e:	f04f 33ff 	mov.w	r3, #4294967295
 80139a2:	e040      	b.n	8013a26 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	68fa      	ldr	r2, [r7, #12]
 80139a8:	621a      	str	r2, [r3, #32]
 80139aa:	e01b      	b.n	80139e4 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <dhcp_start+0x92>
 80139b4:	4b1e      	ldr	r3, [pc, #120]	; (8013a30 <dhcp_start+0x100>)
 80139b6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80139ba:	4921      	ldr	r1, [pc, #132]	; (8013a40 <dhcp_start+0x110>)
 80139bc:	481e      	ldr	r0, [pc, #120]	; (8013a38 <dhcp_start+0x108>)
 80139be:	f003 ff23 	bl	8017808 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d006      	beq.n	80139d8 <dhcp_start+0xa8>
 80139ca:	4b19      	ldr	r3, [pc, #100]	; (8013a30 <dhcp_start+0x100>)
 80139cc:	f240 22f1 	movw	r2, #753	; 0x2f1
 80139d0:	491c      	ldr	r1, [pc, #112]	; (8013a44 <dhcp_start+0x114>)
 80139d2:	4819      	ldr	r0, [pc, #100]	; (8013a38 <dhcp_start+0x108>)
 80139d4:	f003 ff18 	bl	8017808 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	7a1b      	ldrb	r3, [r3, #8]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d001      	beq.n	80139e4 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80139e0:	f7ff fcd2 	bl	8013388 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80139e4:	2240      	movs	r2, #64	; 0x40
 80139e6:	2100      	movs	r1, #0
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f003 ff05 	bl	80177f8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80139ee:	f7ff fc79 	bl	80132e4 <dhcp_inc_pcb_refcount>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <dhcp_start+0xce>
    return ERR_MEM;
 80139f8:	f04f 33ff 	mov.w	r3, #4294967295
 80139fc:	e013      	b.n	8013a26 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2201      	movs	r2, #1
 8013a02:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 f8f3 	bl	8013bf0 <dhcp_discover>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013a0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d005      	beq.n	8013a22 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f000 fc78 	bl	801430c <dhcp_stop>
    return ERR_MEM;
 8013a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a20:	e001      	b.n	8013a26 <dhcp_start+0xf6>
  }
  return result;
 8013a22:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	08019f7c 	.word	0x08019f7c
 8013a34:	0801a048 	.word	0x0801a048
 8013a38:	08019ffc 	.word	0x08019ffc
 8013a3c:	0801a08c 	.word	0x0801a08c
 8013a40:	0801a0b0 	.word	0x0801a0b0
 8013a44:	0801a0c8 	.word	0x0801a0c8

08013a48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6a1b      	ldr	r3, [r3, #32]
 8013a54:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d02c      	beq.n	8013ab6 <dhcp_network_changed+0x6e>
    return;
  switch (dhcp->state) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	7a5b      	ldrb	r3, [r3, #9]
 8013a60:	2b0a      	cmp	r3, #10
 8013a62:	d820      	bhi.n	8013aa6 <dhcp_network_changed+0x5e>
 8013a64:	a201      	add	r2, pc, #4	; (adr r2, 8013a6c <dhcp_network_changed+0x24>)
 8013a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a6a:	bf00      	nop
 8013a6c:	08013abb 	.word	0x08013abb
 8013a70:	08013aa7 	.word	0x08013aa7
 8013a74:	08013aa7 	.word	0x08013aa7
 8013a78:	08013a99 	.word	0x08013a99
 8013a7c:	08013a99 	.word	0x08013a99
 8013a80:	08013a99 	.word	0x08013a99
 8013a84:	08013aa7 	.word	0x08013aa7
 8013a88:	08013aa7 	.word	0x08013aa7
 8013a8c:	08013aa7 	.word	0x08013aa7
 8013a90:	08013aa7 	.word	0x08013aa7
 8013a94:	08013a99 	.word	0x08013a99
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 fb18 	bl	80140d4 <dhcp_reboot>
    break;
 8013aa4:	e00a      	b.n	8013abc <dhcp_network_changed+0x74>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 f89f 	bl	8013bf0 <dhcp_discover>
    break;
 8013ab2:	bf00      	nop
 8013ab4:	e002      	b.n	8013abc <dhcp_network_changed+0x74>
    return;
 8013ab6:	bf00      	nop
 8013ab8:	e000      	b.n	8013abc <dhcp_network_changed+0x74>
    break;
 8013aba:	bf00      	nop
  }
}
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop

08013ac4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d107      	bne.n	8013ae4 <dhcp_arp_reply+0x20>
 8013ad4:	4b0e      	ldr	r3, [pc, #56]	; (8013b10 <dhcp_arp_reply+0x4c>)
 8013ad6:	f240 327b 	movw	r2, #891	; 0x37b
 8013ada:	490e      	ldr	r1, [pc, #56]	; (8013b14 <dhcp_arp_reply+0x50>)
 8013adc:	480e      	ldr	r0, [pc, #56]	; (8013b18 <dhcp_arp_reply+0x54>)
 8013ade:	f003 fe93 	bl	8017808 <iprintf>
 8013ae2:	e012      	b.n	8013b0a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6a1b      	ldr	r3, [r3, #32]
 8013ae8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00c      	beq.n	8013b0a <dhcp_arp_reply+0x46>
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	7a5b      	ldrb	r3, [r3, #9]
 8013af4:	2b08      	cmp	r3, #8
 8013af6:	d108      	bne.n	8013b0a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d102      	bne.n	8013b0a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 f809 	bl	8013b1c <dhcp_decline>
    }
  }
}
 8013b0a:	3710      	adds	r7, #16
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	08019f7c 	.word	0x08019f7c
 8013b14:	0801a048 	.word	0x0801a048
 8013b18:	08019ffc 	.word	0x08019ffc

08013b1c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af02      	add	r7, sp, #8
 8013b22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6a1b      	ldr	r3, [r3, #32]
 8013b28:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013b2e:	210c      	movs	r1, #12
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f000 fc23 	bl	801437c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8013b36:	2204      	movs	r2, #4
 8013b38:	68f9      	ldr	r1, [r7, #12]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f001 f8a4 	bl	8014c88 <dhcp_create_msg>
 8013b40:	4603      	mov	r3, r0
 8013b42:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8013b44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d12a      	bne.n	8013ba2 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013b4c:	2204      	movs	r2, #4
 8013b4e:	2132      	movs	r1, #50	; 0x32
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f000 fc2d 	bl	80143b0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f8 fe9c 	bl	800c898 <lwip_htonl>
 8013b60:	4603      	mov	r3, r0
 8013b62:	4619      	mov	r1, r3
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f000 fcbf 	bl	80144e8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f001 fa30 	bl	8014fd0 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	68da      	ldr	r2, [r3, #12]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	8a9b      	ldrh	r3, [r3, #20]
 8013b78:	33f0      	adds	r3, #240	; 0xf0
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	4610      	mov	r0, r2
 8013b80:	f7f9 ff2c 	bl	800d9dc <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013b84:	4b16      	ldr	r3, [pc, #88]	; (8013be0 <dhcp_decline+0xc4>)
 8013b86:	6818      	ldr	r0, [r3, #0]
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	68d9      	ldr	r1, [r3, #12]
 8013b8c:	4b15      	ldr	r3, [pc, #84]	; (8013be4 <dhcp_decline+0xc8>)
 8013b8e:	9301      	str	r3, [sp, #4]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	2343      	movs	r3, #67	; 0x43
 8013b96:	4a14      	ldr	r2, [pc, #80]	; (8013be8 <dhcp_decline+0xcc>)
 8013b98:	f7ff f9b8 	bl	8012f0c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f001 f9d5 	bl	8014f4c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	7a9b      	ldrb	r3, [r3, #10]
 8013ba6:	2bff      	cmp	r3, #255	; 0xff
 8013ba8:	d005      	beq.n	8013bb6 <dhcp_decline+0x9a>
    dhcp->tries++;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	7a9b      	ldrb	r3, [r3, #10]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	b2da      	uxtb	r2, r3
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8013bb6:	f242 7310 	movw	r3, #10000	; 0x2710
 8013bba:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013bbc:	893b      	ldrh	r3, [r7, #8]
 8013bbe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013bc2:	4a0a      	ldr	r2, [pc, #40]	; (8013bec <dhcp_decline+0xd0>)
 8013bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8013bc8:	1152      	asrs	r2, r2, #5
 8013bca:	17db      	asrs	r3, r3, #31
 8013bcc:	1ad3      	subs	r3, r2, r3
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013bd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	200040f4 	.word	0x200040f4
 8013be4:	0801acfc 	.word	0x0801acfc
 8013be8:	0801ad00 	.word	0x0801ad00
 8013bec:	10624dd3 	.word	0x10624dd3

08013bf0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b088      	sub	sp, #32
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a1b      	ldr	r3, [r3, #32]
 8013bfc:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	2200      	movs	r2, #0
 8013c06:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013c08:	2106      	movs	r1, #6
 8013c0a:	6938      	ldr	r0, [r7, #16]
 8013c0c:	f000 fbb6 	bl	801437c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8013c10:	2201      	movs	r2, #1
 8013c12:	6939      	ldr	r1, [r7, #16]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f001 f837 	bl	8014c88 <dhcp_create_msg>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d13b      	bne.n	8013c9e <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013c26:	2202      	movs	r2, #2
 8013c28:	2139      	movs	r1, #57	; 0x39
 8013c2a:	6938      	ldr	r0, [r7, #16]
 8013c2c:	f000 fbc0 	bl	80143b0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013c34:	4619      	mov	r1, r3
 8013c36:	6938      	ldr	r0, [r7, #16]
 8013c38:	f000 fc1c 	bl	8014474 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013c3c:	2203      	movs	r2, #3
 8013c3e:	2137      	movs	r1, #55	; 0x37
 8013c40:	6938      	ldr	r0, [r7, #16]
 8013c42:	f000 fbb5 	bl	80143b0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c46:	2300      	movs	r3, #0
 8013c48:	75fb      	strb	r3, [r7, #23]
 8013c4a:	e009      	b.n	8013c60 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013c4c:	7dfb      	ldrb	r3, [r7, #23]
 8013c4e:	4a29      	ldr	r2, [pc, #164]	; (8013cf4 <dhcp_discover+0x104>)
 8013c50:	5cd3      	ldrb	r3, [r2, r3]
 8013c52:	4619      	mov	r1, r3
 8013c54:	6938      	ldr	r0, [r7, #16]
 8013c56:	f000 fbe5 	bl	8014424 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c5a:	7dfb      	ldrb	r3, [r7, #23]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	75fb      	strb	r3, [r7, #23]
 8013c60:	7dfb      	ldrb	r3, [r7, #23]
 8013c62:	2b02      	cmp	r3, #2
 8013c64:	d9f2      	bls.n	8013c4c <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8013c66:	6938      	ldr	r0, [r7, #16]
 8013c68:	f001 f9b2 	bl	8014fd0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	68da      	ldr	r2, [r3, #12]
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	8a9b      	ldrh	r3, [r3, #20]
 8013c74:	33f0      	adds	r3, #240	; 0xf0
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	4619      	mov	r1, r3
 8013c7a:	4610      	mov	r0, r2
 8013c7c:	f7f9 feae 	bl	800d9dc <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013c80:	4b1d      	ldr	r3, [pc, #116]	; (8013cf8 <dhcp_discover+0x108>)
 8013c82:	6818      	ldr	r0, [r3, #0]
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	68d9      	ldr	r1, [r3, #12]
 8013c88:	4b1c      	ldr	r3, [pc, #112]	; (8013cfc <dhcp_discover+0x10c>)
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	2343      	movs	r3, #67	; 0x43
 8013c92:	4a1b      	ldr	r2, [pc, #108]	; (8013d00 <dhcp_discover+0x110>)
 8013c94:	f7ff f93a 	bl	8012f0c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8013c98:	6938      	ldr	r0, [r7, #16]
 8013c9a:	f001 f957 	bl	8014f4c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	7a9b      	ldrb	r3, [r3, #10]
 8013ca2:	2bff      	cmp	r3, #255	; 0xff
 8013ca4:	d005      	beq.n	8013cb2 <dhcp_discover+0xc2>
    dhcp->tries++;
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	7a9b      	ldrb	r3, [r3, #10]
 8013caa:	3301      	adds	r3, #1
 8013cac:	b2da      	uxtb	r2, r3
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	7a9b      	ldrb	r3, [r3, #10]
 8013cb6:	2b05      	cmp	r3, #5
 8013cb8:	d807      	bhi.n	8013cca <dhcp_discover+0xda>
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	7a9b      	ldrb	r3, [r3, #10]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013cc4:	4093      	lsls	r3, r2
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	e001      	b.n	8013cce <dhcp_discover+0xde>
 8013cca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013cce:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013cd0:	89bb      	ldrh	r3, [r7, #12]
 8013cd2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013cd6:	4a0b      	ldr	r2, [pc, #44]	; (8013d04 <dhcp_discover+0x114>)
 8013cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8013cdc:	1152      	asrs	r2, r2, #5
 8013cde:	17db      	asrs	r3, r3, #31
 8013ce0:	1ad3      	subs	r3, r2, r3
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3718      	adds	r7, #24
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	20000030 	.word	0x20000030
 8013cf8:	200040f4 	.word	0x200040f4
 8013cfc:	0801acfc 	.word	0x0801acfc
 8013d00:	0801ad00 	.word	0x0801ad00
 8013d04:	10624dd3 	.word	0x10624dd3

08013d08 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b088      	sub	sp, #32
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d107      	bne.n	8013d26 <dhcp_bind+0x1e>
 8013d16:	4b64      	ldr	r3, [pc, #400]	; (8013ea8 <dhcp_bind+0x1a0>)
 8013d18:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8013d1c:	4963      	ldr	r1, [pc, #396]	; (8013eac <dhcp_bind+0x1a4>)
 8013d1e:	4864      	ldr	r0, [pc, #400]	; (8013eb0 <dhcp_bind+0x1a8>)
 8013d20:	f003 fd72 	bl	8017808 <iprintf>
 8013d24:	e0bc      	b.n	8013ea0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6a1b      	ldr	r3, [r3, #32]
 8013d2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d107      	bne.n	8013d42 <dhcp_bind+0x3a>
 8013d32:	4b5d      	ldr	r3, [pc, #372]	; (8013ea8 <dhcp_bind+0x1a0>)
 8013d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d38:	495e      	ldr	r1, [pc, #376]	; (8013eb4 <dhcp_bind+0x1ac>)
 8013d3a:	485d      	ldr	r0, [pc, #372]	; (8013eb0 <dhcp_bind+0x1a8>)
 8013d3c:	f003 fd64 	bl	8017808 <iprintf>
 8013d40:	e0ae      	b.n	8013ea0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	2200      	movs	r2, #0
 8013d46:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d50:	d019      	beq.n	8013d86 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d56:	331e      	adds	r3, #30
 8013d58:	4a57      	ldr	r2, [pc, #348]	; (8013eb8 <dhcp_bind+0x1b0>)
 8013d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d5e:	095b      	lsrs	r3, r3, #5
 8013d60:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d68:	d302      	bcc.n	8013d70 <dhcp_bind+0x68>
       timeout = 0xffff;
 8013d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d6e:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d102      	bne.n	8013d86 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	2201      	movs	r2, #1
 8013d84:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d8e:	d01d      	beq.n	8013dcc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d94:	331e      	adds	r3, #30
 8013d96:	4a48      	ldr	r2, [pc, #288]	; (8013eb8 <dhcp_bind+0x1b0>)
 8013d98:	fba2 2303 	umull	r2, r3, r2, r3
 8013d9c:	095b      	lsrs	r3, r3, #5
 8013d9e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013da6:	d302      	bcc.n	8013dae <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013dac:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	8b1b      	ldrh	r3, [r3, #24]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	8b1a      	ldrh	r2, [r3, #24]
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd4:	d01d      	beq.n	8013e12 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dda:	331e      	adds	r3, #30
 8013ddc:	4a36      	ldr	r2, [pc, #216]	; (8013eb8 <dhcp_bind+0x1b0>)
 8013dde:	fba2 2303 	umull	r2, r3, r2, r3
 8013de2:	095b      	lsrs	r3, r3, #5
 8013de4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013dec:	d302      	bcc.n	8013df4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013df2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	b29a      	uxth	r2, r3
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	8b5b      	ldrh	r3, [r3, #26]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d102      	bne.n	8013e0a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	2201      	movs	r2, #1
 8013e08:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	8b5a      	ldrh	r2, [r3, #26]
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	8b1a      	ldrh	r2, [r3, #24]
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	8b5b      	ldrh	r3, [r3, #26]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d306      	bcc.n	8013e2c <dhcp_bind+0x124>
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	8b5b      	ldrh	r3, [r3, #26]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d002      	beq.n	8013e2c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	7adb      	ldrb	r3, [r3, #11]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d003      	beq.n	8013e3c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e38:	613b      	str	r3, [r7, #16]
 8013e3a:	e014      	b.n	8013e66 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013e3c:	69bb      	ldr	r3, [r7, #24]
 8013e3e:	3328      	adds	r3, #40	; 0x28
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	db02      	blt.n	8013e52 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013e4c:	23ff      	movs	r3, #255	; 0xff
 8013e4e:	613b      	str	r3, [r7, #16]
 8013e50:	e009      	b.n	8013e66 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
 8013e54:	2bbf      	cmp	r3, #191	; 0xbf
 8013e56:	d903      	bls.n	8013e60 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013e58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013e5c:	613b      	str	r3, [r7, #16]
 8013e5e:	e002      	b.n	8013e66 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e64:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e6a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d108      	bne.n	8013e84 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	4013      	ands	r3, r2
 8013e7a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013e82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013e84:	210a      	movs	r1, #10
 8013e86:	69b8      	ldr	r0, [r7, #24]
 8013e88:	f000 fa78 	bl	801437c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013e92:	f107 030c 	add.w	r3, r7, #12
 8013e96:	f107 0210 	add.w	r2, r7, #16
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f7f9 f9fe 	bl	800d29c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013ea0:	3720      	adds	r7, #32
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	08019f7c 	.word	0x08019f7c
 8013eac:	0801a0dc 	.word	0x0801a0dc
 8013eb0:	08019ffc 	.word	0x08019ffc
 8013eb4:	0801a0f8 	.word	0x0801a0f8
 8013eb8:	88888889 	.word	0x88888889

08013ebc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b088      	sub	sp, #32
 8013ec0:	af02      	add	r7, sp, #8
 8013ec2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6a1b      	ldr	r3, [r3, #32]
 8013ec8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013eca:	2105      	movs	r1, #5
 8013ecc:	6938      	ldr	r0, [r7, #16]
 8013ece:	f000 fa55 	bl	801437c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013ed2:	2203      	movs	r2, #3
 8013ed4:	6939      	ldr	r1, [r7, #16]
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 fed6 	bl	8014c88 <dhcp_create_msg>
 8013edc:	4603      	mov	r3, r0
 8013ede:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d13b      	bne.n	8013f60 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ee8:	2202      	movs	r2, #2
 8013eea:	2139      	movs	r1, #57	; 0x39
 8013eec:	6938      	ldr	r0, [r7, #16]
 8013eee:	f000 fa5f 	bl	80143b0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	6938      	ldr	r0, [r7, #16]
 8013efa:	f000 fabb 	bl	8014474 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013efe:	2203      	movs	r2, #3
 8013f00:	2137      	movs	r1, #55	; 0x37
 8013f02:	6938      	ldr	r0, [r7, #16]
 8013f04:	f000 fa54 	bl	80143b0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f08:	2300      	movs	r3, #0
 8013f0a:	75fb      	strb	r3, [r7, #23]
 8013f0c:	e009      	b.n	8013f22 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013f0e:	7dfb      	ldrb	r3, [r7, #23]
 8013f10:	4a2a      	ldr	r2, [pc, #168]	; (8013fbc <dhcp_renew+0x100>)
 8013f12:	5cd3      	ldrb	r3, [r2, r3]
 8013f14:	4619      	mov	r1, r3
 8013f16:	6938      	ldr	r0, [r7, #16]
 8013f18:	f000 fa84 	bl	8014424 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f1c:	7dfb      	ldrb	r3, [r7, #23]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	75fb      	strb	r3, [r7, #23]
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	2b02      	cmp	r3, #2
 8013f26:	d9f2      	bls.n	8013f0e <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8013f28:	6938      	ldr	r0, [r7, #16]
 8013f2a:	f001 f851 	bl	8014fd0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	68da      	ldr	r2, [r3, #12]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	8a9b      	ldrh	r3, [r3, #20]
 8013f36:	33f0      	adds	r3, #240	; 0xf0
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7f9 fd4d 	bl	800d9dc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8013f42:	4b1f      	ldr	r3, [pc, #124]	; (8013fc0 <dhcp_renew+0x104>)
 8013f44:	6818      	ldr	r0, [r3, #0]
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	68d9      	ldr	r1, [r3, #12]
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	2343      	movs	r3, #67	; 0x43
 8013f56:	f7fe ff9b 	bl	8012e90 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013f5a:	6938      	ldr	r0, [r7, #16]
 8013f5c:	f000 fff6 	bl	8014f4c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	7a9b      	ldrb	r3, [r3, #10]
 8013f64:	2bff      	cmp	r3, #255	; 0xff
 8013f66:	d005      	beq.n	8013f74 <dhcp_renew+0xb8>
    dhcp->tries++;
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	7a9b      	ldrb	r3, [r3, #10]
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	7a9b      	ldrb	r3, [r3, #10]
 8013f78:	2b09      	cmp	r3, #9
 8013f7a:	d80a      	bhi.n	8013f92 <dhcp_renew+0xd6>
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	7a9b      	ldrb	r3, [r3, #10]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	461a      	mov	r2, r3
 8013f84:	0152      	lsls	r2, r2, #5
 8013f86:	1ad2      	subs	r2, r2, r3
 8013f88:	0092      	lsls	r2, r2, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	011b      	lsls	r3, r3, #4
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	e001      	b.n	8013f96 <dhcp_renew+0xda>
 8013f92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013f96:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013f98:	89bb      	ldrh	r3, [r7, #12]
 8013f9a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f9e:	4a09      	ldr	r2, [pc, #36]	; (8013fc4 <dhcp_renew+0x108>)
 8013fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8013fa4:	1152      	asrs	r2, r2, #5
 8013fa6:	17db      	asrs	r3, r3, #31
 8013fa8:	1ad3      	subs	r3, r2, r3
 8013faa:	b29a      	uxth	r2, r3
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3718      	adds	r7, #24
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	20000030 	.word	0x20000030
 8013fc0:	200040f4 	.word	0x200040f4
 8013fc4:	10624dd3 	.word	0x10624dd3

08013fc8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af02      	add	r7, sp, #8
 8013fce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6a1b      	ldr	r3, [r3, #32]
 8013fd4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013fd6:	2104      	movs	r1, #4
 8013fd8:	6938      	ldr	r0, [r7, #16]
 8013fda:	f000 f9cf 	bl	801437c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013fde:	2203      	movs	r2, #3
 8013fe0:	6939      	ldr	r1, [r7, #16]
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 fe50 	bl	8014c88 <dhcp_create_msg>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d139      	bne.n	8014068 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ff4:	2202      	movs	r2, #2
 8013ff6:	2139      	movs	r1, #57	; 0x39
 8013ff8:	6938      	ldr	r0, [r7, #16]
 8013ffa:	f000 f9d9 	bl	80143b0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014002:	4619      	mov	r1, r3
 8014004:	6938      	ldr	r0, [r7, #16]
 8014006:	f000 fa35 	bl	8014474 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801400a:	2203      	movs	r2, #3
 801400c:	2137      	movs	r1, #55	; 0x37
 801400e:	6938      	ldr	r0, [r7, #16]
 8014010:	f000 f9ce 	bl	80143b0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014014:	2300      	movs	r3, #0
 8014016:	75fb      	strb	r3, [r7, #23]
 8014018:	e009      	b.n	801402e <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801401a:	7dfb      	ldrb	r3, [r7, #23]
 801401c:	4a29      	ldr	r2, [pc, #164]	; (80140c4 <dhcp_rebind+0xfc>)
 801401e:	5cd3      	ldrb	r3, [r2, r3]
 8014020:	4619      	mov	r1, r3
 8014022:	6938      	ldr	r0, [r7, #16]
 8014024:	f000 f9fe 	bl	8014424 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014028:	7dfb      	ldrb	r3, [r7, #23]
 801402a:	3301      	adds	r3, #1
 801402c:	75fb      	strb	r3, [r7, #23]
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	2b02      	cmp	r3, #2
 8014032:	d9f2      	bls.n	801401a <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8014034:	6938      	ldr	r0, [r7, #16]
 8014036:	f000 ffcb 	bl	8014fd0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	68da      	ldr	r2, [r3, #12]
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	8a9b      	ldrh	r3, [r3, #20]
 8014042:	33f0      	adds	r3, #240	; 0xf0
 8014044:	b29b      	uxth	r3, r3
 8014046:	4619      	mov	r1, r3
 8014048:	4610      	mov	r0, r2
 801404a:	f7f9 fcc7 	bl	800d9dc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801404e:	4b1e      	ldr	r3, [pc, #120]	; (80140c8 <dhcp_rebind+0x100>)
 8014050:	6818      	ldr	r0, [r3, #0]
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	68d9      	ldr	r1, [r3, #12]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	2343      	movs	r3, #67	; 0x43
 801405c:	4a1b      	ldr	r2, [pc, #108]	; (80140cc <dhcp_rebind+0x104>)
 801405e:	f7fe ff17 	bl	8012e90 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8014062:	6938      	ldr	r0, [r7, #16]
 8014064:	f000 ff72 	bl	8014f4c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	7a9b      	ldrb	r3, [r3, #10]
 801406c:	2bff      	cmp	r3, #255	; 0xff
 801406e:	d005      	beq.n	801407c <dhcp_rebind+0xb4>
    dhcp->tries++;
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	7a9b      	ldrb	r3, [r3, #10]
 8014074:	3301      	adds	r3, #1
 8014076:	b2da      	uxtb	r2, r3
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	7a9b      	ldrb	r3, [r3, #10]
 8014080:	2b09      	cmp	r3, #9
 8014082:	d80a      	bhi.n	801409a <dhcp_rebind+0xd2>
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	7a9b      	ldrb	r3, [r3, #10]
 8014088:	b29b      	uxth	r3, r3
 801408a:	461a      	mov	r2, r3
 801408c:	0152      	lsls	r2, r2, #5
 801408e:	1ad2      	subs	r2, r2, r3
 8014090:	0092      	lsls	r2, r2, #2
 8014092:	4413      	add	r3, r2
 8014094:	00db      	lsls	r3, r3, #3
 8014096:	b29b      	uxth	r3, r3
 8014098:	e001      	b.n	801409e <dhcp_rebind+0xd6>
 801409a:	f242 7310 	movw	r3, #10000	; 0x2710
 801409e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80140a0:	89bb      	ldrh	r3, [r7, #12]
 80140a2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80140a6:	4a0a      	ldr	r2, [pc, #40]	; (80140d0 <dhcp_rebind+0x108>)
 80140a8:	fb82 1203 	smull	r1, r2, r2, r3
 80140ac:	1152      	asrs	r2, r2, #5
 80140ae:	17db      	asrs	r3, r3, #31
 80140b0:	1ad3      	subs	r3, r2, r3
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	693b      	ldr	r3, [r7, #16]
 80140b6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80140b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3718      	adds	r7, #24
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}
 80140c4:	20000030 	.word	0x20000030
 80140c8:	200040f4 	.word	0x200040f4
 80140cc:	0801ad00 	.word	0x0801ad00
 80140d0:	10624dd3 	.word	0x10624dd3

080140d4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b088      	sub	sp, #32
 80140d8:	af02      	add	r7, sp, #8
 80140da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6a1b      	ldr	r3, [r3, #32]
 80140e0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80140e2:	2103      	movs	r1, #3
 80140e4:	6938      	ldr	r0, [r7, #16]
 80140e6:	f000 f949 	bl	801437c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80140ea:	2203      	movs	r2, #3
 80140ec:	6939      	ldr	r1, [r7, #16]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 fdca 	bl	8014c88 <dhcp_create_msg>
 80140f4:	4603      	mov	r3, r0
 80140f6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80140f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d147      	bne.n	8014190 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014100:	2202      	movs	r2, #2
 8014102:	2139      	movs	r1, #57	; 0x39
 8014104:	6938      	ldr	r0, [r7, #16]
 8014106:	f000 f953 	bl	80143b0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801410a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801410e:	6938      	ldr	r0, [r7, #16]
 8014110:	f000 f9b0 	bl	8014474 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8014114:	2204      	movs	r2, #4
 8014116:	2132      	movs	r1, #50	; 0x32
 8014118:	6938      	ldr	r0, [r7, #16]
 801411a:	f000 f949 	bl	80143b0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014122:	4618      	mov	r0, r3
 8014124:	f7f8 fbb8 	bl	800c898 <lwip_htonl>
 8014128:	4603      	mov	r3, r0
 801412a:	4619      	mov	r1, r3
 801412c:	6938      	ldr	r0, [r7, #16]
 801412e:	f000 f9db 	bl	80144e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014132:	2203      	movs	r2, #3
 8014134:	2137      	movs	r1, #55	; 0x37
 8014136:	6938      	ldr	r0, [r7, #16]
 8014138:	f000 f93a 	bl	80143b0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801413c:	2300      	movs	r3, #0
 801413e:	75fb      	strb	r3, [r7, #23]
 8014140:	e009      	b.n	8014156 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8014142:	7dfb      	ldrb	r3, [r7, #23]
 8014144:	4a29      	ldr	r2, [pc, #164]	; (80141ec <dhcp_reboot+0x118>)
 8014146:	5cd3      	ldrb	r3, [r2, r3]
 8014148:	4619      	mov	r1, r3
 801414a:	6938      	ldr	r0, [r7, #16]
 801414c:	f000 f96a 	bl	8014424 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014150:	7dfb      	ldrb	r3, [r7, #23]
 8014152:	3301      	adds	r3, #1
 8014154:	75fb      	strb	r3, [r7, #23]
 8014156:	7dfb      	ldrb	r3, [r7, #23]
 8014158:	2b02      	cmp	r3, #2
 801415a:	d9f2      	bls.n	8014142 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801415c:	6938      	ldr	r0, [r7, #16]
 801415e:	f000 ff37 	bl	8014fd0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	68da      	ldr	r2, [r3, #12]
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	8a9b      	ldrh	r3, [r3, #20]
 801416a:	33f0      	adds	r3, #240	; 0xf0
 801416c:	b29b      	uxth	r3, r3
 801416e:	4619      	mov	r1, r3
 8014170:	4610      	mov	r0, r2
 8014172:	f7f9 fc33 	bl	800d9dc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8014176:	4b1e      	ldr	r3, [pc, #120]	; (80141f0 <dhcp_reboot+0x11c>)
 8014178:	6818      	ldr	r0, [r3, #0]
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	68d9      	ldr	r1, [r3, #12]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	2343      	movs	r3, #67	; 0x43
 8014184:	4a1b      	ldr	r2, [pc, #108]	; (80141f4 <dhcp_reboot+0x120>)
 8014186:	f7fe fe83 	bl	8012e90 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801418a:	6938      	ldr	r0, [r7, #16]
 801418c:	f000 fede 	bl	8014f4c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	7a9b      	ldrb	r3, [r3, #10]
 8014194:	2bff      	cmp	r3, #255	; 0xff
 8014196:	d005      	beq.n	80141a4 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	7a9b      	ldrb	r3, [r3, #10]
 801419c:	3301      	adds	r3, #1
 801419e:	b2da      	uxtb	r2, r3
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	7a9b      	ldrb	r3, [r3, #10]
 80141a8:	2b09      	cmp	r3, #9
 80141aa:	d80a      	bhi.n	80141c2 <dhcp_reboot+0xee>
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	7a9b      	ldrb	r3, [r3, #10]
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	461a      	mov	r2, r3
 80141b4:	0152      	lsls	r2, r2, #5
 80141b6:	1ad2      	subs	r2, r2, r3
 80141b8:	0092      	lsls	r2, r2, #2
 80141ba:	4413      	add	r3, r2
 80141bc:	00db      	lsls	r3, r3, #3
 80141be:	b29b      	uxth	r3, r3
 80141c0:	e001      	b.n	80141c6 <dhcp_reboot+0xf2>
 80141c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80141c6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80141c8:	89bb      	ldrh	r3, [r7, #12]
 80141ca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80141ce:	4a0a      	ldr	r2, [pc, #40]	; (80141f8 <dhcp_reboot+0x124>)
 80141d0:	fb82 1203 	smull	r1, r2, r2, r3
 80141d4:	1152      	asrs	r2, r2, #5
 80141d6:	17db      	asrs	r3, r3, #31
 80141d8:	1ad3      	subs	r3, r2, r3
 80141da:	b29a      	uxth	r2, r3
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80141e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3718      	adds	r7, #24
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	20000030 	.word	0x20000030
 80141f0:	200040f4 	.word	0x200040f4
 80141f4:	0801ad00 	.word	0x0801ad00
 80141f8:	10624dd3 	.word	0x10624dd3

080141fc <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b088      	sub	sp, #32
 8014200:	af02      	add	r7, sp, #8
 8014202:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6a1b      	ldr	r3, [r3, #32]
 8014208:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d102      	bne.n	8014216 <dhcp_release+0x1a>
    return ERR_ARG;
 8014210:	f06f 030f 	mvn.w	r3, #15
 8014214:	e072      	b.n	80142fc <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801421a:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 ff31 	bl	8015084 <dhcp_supplied_address>
 8014222:	4603      	mov	r3, r0
 8014224:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014226:	2100      	movs	r1, #0
 8014228:	6978      	ldr	r0, [r7, #20]
 801422a:	f000 f8a7 	bl	801437c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	2200      	movs	r2, #0
 8014232:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	2200      	movs	r2, #0
 8014238:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	2200      	movs	r2, #0
 801423e:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	2200      	movs	r2, #0
 8014244:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	2200      	movs	r2, #0
 801424a:	63da      	str	r2, [r3, #60]	; 0x3c
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	639a      	str	r2, [r3, #56]	; 0x38
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	2200      	movs	r2, #0
 8014260:	845a      	strh	r2, [r3, #34]	; 0x22
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	841a      	strh	r2, [r3, #32]
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	8c1a      	ldrh	r2, [r3, #32]
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	83da      	strh	r2, [r3, #30]
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	8bda      	ldrh	r2, [r3, #30]
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801427a:	7cfb      	ldrb	r3, [r7, #19]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d101      	bne.n	8014284 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8014280:	2300      	movs	r3, #0
 8014282:	e03b      	b.n	80142fc <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8014284:	2207      	movs	r2, #7
 8014286:	6979      	ldr	r1, [r7, #20]
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 fcfd 	bl	8014c88 <dhcp_create_msg>
 801428e:	4603      	mov	r3, r0
 8014290:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8014292:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d128      	bne.n	80142ec <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801429a:	2204      	movs	r2, #4
 801429c:	2136      	movs	r1, #54	; 0x36
 801429e:	6978      	ldr	r0, [r7, #20]
 80142a0:	f000 f886 	bl	80143b0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f8 faf6 	bl	800c898 <lwip_htonl>
 80142ac:	4603      	mov	r3, r0
 80142ae:	4619      	mov	r1, r3
 80142b0:	6978      	ldr	r0, [r7, #20]
 80142b2:	f000 f919 	bl	80144e8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 80142b6:	6978      	ldr	r0, [r7, #20]
 80142b8:	f000 fe8a 	bl	8014fd0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	68da      	ldr	r2, [r3, #12]
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	8a9b      	ldrh	r3, [r3, #20]
 80142c4:	33f0      	adds	r3, #240	; 0xf0
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	4619      	mov	r1, r3
 80142ca:	4610      	mov	r0, r2
 80142cc:	f7f9 fb86 	bl	800d9dc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80142d0:	4b0c      	ldr	r3, [pc, #48]	; (8014304 <dhcp_release+0x108>)
 80142d2:	6818      	ldr	r0, [r3, #0]
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	68d9      	ldr	r1, [r3, #12]
 80142d8:	f107 020c 	add.w	r2, r7, #12
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	2343      	movs	r3, #67	; 0x43
 80142e2:	f7fe fdd5 	bl	8012e90 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80142e6:	6978      	ldr	r0, [r7, #20]
 80142e8:	f000 fe30 	bl	8014f4c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80142ec:	4b06      	ldr	r3, [pc, #24]	; (8014308 <dhcp_release+0x10c>)
 80142ee:	4a06      	ldr	r2, [pc, #24]	; (8014308 <dhcp_release+0x10c>)
 80142f0:	4905      	ldr	r1, [pc, #20]	; (8014308 <dhcp_release+0x10c>)
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f7f8 ffd2 	bl	800d29c <netif_set_addr>

  return result;
 80142f8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3718      	adds	r7, #24
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	200040f4 	.word	0x200040f4
 8014308:	0801acfc 	.word	0x0801acfc

0801430c <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d107      	bne.n	801432a <dhcp_stop+0x1e>
 801431a:	4b14      	ldr	r3, [pc, #80]	; (801436c <dhcp_stop+0x60>)
 801431c:	f240 5242 	movw	r2, #1346	; 0x542
 8014320:	4913      	ldr	r1, [pc, #76]	; (8014370 <dhcp_stop+0x64>)
 8014322:	4814      	ldr	r0, [pc, #80]	; (8014374 <dhcp_stop+0x68>)
 8014324:	f003 fa70 	bl	8017808 <iprintf>
 8014328:	e01d      	b.n	8014366 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6a1b      	ldr	r3, [r3, #32]
 801432e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d017      	beq.n	8014366 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d006      	beq.n	801434c <dhcp_stop+0x40>
 801433e:	4b0b      	ldr	r3, [pc, #44]	; (801436c <dhcp_stop+0x60>)
 8014340:	f240 524f 	movw	r2, #1359	; 0x54f
 8014344:	490c      	ldr	r1, [pc, #48]	; (8014378 <dhcp_stop+0x6c>)
 8014346:	480b      	ldr	r0, [pc, #44]	; (8014374 <dhcp_stop+0x68>)
 8014348:	f003 fa5e 	bl	8017808 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801434c:	2100      	movs	r1, #0
 801434e:	68f8      	ldr	r0, [r7, #12]
 8014350:	f000 f814 	bl	801437c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	7a1b      	ldrb	r3, [r3, #8]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d004      	beq.n	8014366 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801435c:	f7ff f814 	bl	8013388 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	2200      	movs	r2, #0
 8014364:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	08019f7c 	.word	0x08019f7c
 8014370:	0801a110 	.word	0x0801a110
 8014374:	08019ffc 	.word	0x08019ffc
 8014378:	0801a0c8 	.word	0x0801a0c8

0801437c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	460b      	mov	r3, r1
 8014386:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	7a5b      	ldrb	r3, [r3, #9]
 801438c:	78fa      	ldrb	r2, [r7, #3]
 801438e:	429a      	cmp	r2, r3
 8014390:	d008      	beq.n	80143a4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	78fa      	ldrb	r2, [r7, #3]
 8014396:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	82da      	strh	r2, [r3, #22]
  }
}
 80143a4:	bf00      	nop
 80143a6:	370c      	adds	r7, #12
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr

080143b0 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
 80143bc:	4613      	mov	r3, r2
 80143be:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8a9b      	ldrh	r3, [r3, #20]
 80143c4:	461a      	mov	r2, r3
 80143c6:	78bb      	ldrb	r3, [r7, #2]
 80143c8:	4413      	add	r3, r2
 80143ca:	3302      	adds	r3, #2
 80143cc:	2b44      	cmp	r3, #68	; 0x44
 80143ce:	d906      	bls.n	80143de <dhcp_option+0x2e>
 80143d0:	4b11      	ldr	r3, [pc, #68]	; (8014418 <dhcp_option+0x68>)
 80143d2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80143d6:	4911      	ldr	r1, [pc, #68]	; (801441c <dhcp_option+0x6c>)
 80143d8:	4811      	ldr	r0, [pc, #68]	; (8014420 <dhcp_option+0x70>)
 80143da:	f003 fa15 	bl	8017808 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	691a      	ldr	r2, [r3, #16]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	8a9b      	ldrh	r3, [r3, #20]
 80143e6:	1c59      	adds	r1, r3, #1
 80143e8:	b288      	uxth	r0, r1
 80143ea:	6879      	ldr	r1, [r7, #4]
 80143ec:	8288      	strh	r0, [r1, #20]
 80143ee:	4413      	add	r3, r2
 80143f0:	78fa      	ldrb	r2, [r7, #3]
 80143f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	691a      	ldr	r2, [r3, #16]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	8a9b      	ldrh	r3, [r3, #20]
 80143fe:	1c59      	adds	r1, r3, #1
 8014400:	b288      	uxth	r0, r1
 8014402:	6879      	ldr	r1, [r7, #4]
 8014404:	8288      	strh	r0, [r1, #20]
 8014406:	4413      	add	r3, r2
 8014408:	78ba      	ldrb	r2, [r7, #2]
 801440a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801440e:	bf00      	nop
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	08019f7c 	.word	0x08019f7c
 801441c:	0801a12c 	.word	0x0801a12c
 8014420:	08019ffc 	.word	0x08019ffc

08014424 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	460b      	mov	r3, r1
 801442e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8a9b      	ldrh	r3, [r3, #20]
 8014434:	2b43      	cmp	r3, #67	; 0x43
 8014436:	d906      	bls.n	8014446 <dhcp_option_byte+0x22>
 8014438:	4b0b      	ldr	r3, [pc, #44]	; (8014468 <dhcp_option_byte+0x44>)
 801443a:	f240 527b 	movw	r2, #1403	; 0x57b
 801443e:	490b      	ldr	r1, [pc, #44]	; (801446c <dhcp_option_byte+0x48>)
 8014440:	480b      	ldr	r0, [pc, #44]	; (8014470 <dhcp_option_byte+0x4c>)
 8014442:	f003 f9e1 	bl	8017808 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	691a      	ldr	r2, [r3, #16]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	8a9b      	ldrh	r3, [r3, #20]
 801444e:	1c59      	adds	r1, r3, #1
 8014450:	b288      	uxth	r0, r1
 8014452:	6879      	ldr	r1, [r7, #4]
 8014454:	8288      	strh	r0, [r1, #20]
 8014456:	4413      	add	r3, r2
 8014458:	78fa      	ldrb	r2, [r7, #3]
 801445a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801445e:	bf00      	nop
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	08019f7c 	.word	0x08019f7c
 801446c:	0801a174 	.word	0x0801a174
 8014470:	08019ffc 	.word	0x08019ffc

08014474 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8014474:	b590      	push	{r4, r7, lr}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	8a9b      	ldrh	r3, [r3, #20]
 8014484:	3302      	adds	r3, #2
 8014486:	2b44      	cmp	r3, #68	; 0x44
 8014488:	d906      	bls.n	8014498 <dhcp_option_short+0x24>
 801448a:	4b14      	ldr	r3, [pc, #80]	; (80144dc <dhcp_option_short+0x68>)
 801448c:	f240 5282 	movw	r2, #1410	; 0x582
 8014490:	4913      	ldr	r1, [pc, #76]	; (80144e0 <dhcp_option_short+0x6c>)
 8014492:	4814      	ldr	r0, [pc, #80]	; (80144e4 <dhcp_option_short+0x70>)
 8014494:	f003 f9b8 	bl	8017808 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014498:	887b      	ldrh	r3, [r7, #2]
 801449a:	0a1b      	lsrs	r3, r3, #8
 801449c:	b298      	uxth	r0, r3
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	691a      	ldr	r2, [r3, #16]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	8a9b      	ldrh	r3, [r3, #20]
 80144a6:	1c59      	adds	r1, r3, #1
 80144a8:	b28c      	uxth	r4, r1
 80144aa:	6879      	ldr	r1, [r7, #4]
 80144ac:	828c      	strh	r4, [r1, #20]
 80144ae:	b2c1      	uxtb	r1, r0
 80144b0:	4413      	add	r3, r2
 80144b2:	460a      	mov	r2, r1
 80144b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	691a      	ldr	r2, [r3, #16]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	8a9b      	ldrh	r3, [r3, #20]
 80144c0:	1c59      	adds	r1, r3, #1
 80144c2:	b288      	uxth	r0, r1
 80144c4:	6879      	ldr	r1, [r7, #4]
 80144c6:	8288      	strh	r0, [r1, #20]
 80144c8:	8879      	ldrh	r1, [r7, #2]
 80144ca:	b2c9      	uxtb	r1, r1
 80144cc:	4413      	add	r3, r2
 80144ce:	460a      	mov	r2, r1
 80144d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80144d4:	bf00      	nop
 80144d6:	370c      	adds	r7, #12
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd90      	pop	{r4, r7, pc}
 80144dc:	08019f7c 	.word	0x08019f7c
 80144e0:	0801a1b0 	.word	0x0801a1b0
 80144e4:	08019ffc 	.word	0x08019ffc

080144e8 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80144e8:	b590      	push	{r4, r7, lr}
 80144ea:	b083      	sub	sp, #12
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	8a9b      	ldrh	r3, [r3, #20]
 80144f6:	3304      	adds	r3, #4
 80144f8:	2b44      	cmp	r3, #68	; 0x44
 80144fa:	d906      	bls.n	801450a <dhcp_option_long+0x22>
 80144fc:	4b22      	ldr	r3, [pc, #136]	; (8014588 <dhcp_option_long+0xa0>)
 80144fe:	f240 528a 	movw	r2, #1418	; 0x58a
 8014502:	4922      	ldr	r1, [pc, #136]	; (801458c <dhcp_option_long+0xa4>)
 8014504:	4822      	ldr	r0, [pc, #136]	; (8014590 <dhcp_option_long+0xa8>)
 8014506:	f003 f97f 	bl	8017808 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	0e18      	lsrs	r0, r3, #24
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	691a      	ldr	r2, [r3, #16]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	8a9b      	ldrh	r3, [r3, #20]
 8014516:	1c59      	adds	r1, r3, #1
 8014518:	b28c      	uxth	r4, r1
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	828c      	strh	r4, [r1, #20]
 801451e:	b2c1      	uxtb	r1, r0
 8014520:	4413      	add	r3, r2
 8014522:	460a      	mov	r2, r1
 8014524:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	0c18      	lsrs	r0, r3, #16
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	691a      	ldr	r2, [r3, #16]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	8a9b      	ldrh	r3, [r3, #20]
 8014534:	1c59      	adds	r1, r3, #1
 8014536:	b28c      	uxth	r4, r1
 8014538:	6879      	ldr	r1, [r7, #4]
 801453a:	828c      	strh	r4, [r1, #20]
 801453c:	b2c1      	uxtb	r1, r0
 801453e:	4413      	add	r3, r2
 8014540:	460a      	mov	r2, r1
 8014542:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	0a18      	lsrs	r0, r3, #8
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	691a      	ldr	r2, [r3, #16]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	8a9b      	ldrh	r3, [r3, #20]
 8014552:	1c59      	adds	r1, r3, #1
 8014554:	b28c      	uxth	r4, r1
 8014556:	6879      	ldr	r1, [r7, #4]
 8014558:	828c      	strh	r4, [r1, #20]
 801455a:	b2c1      	uxtb	r1, r0
 801455c:	4413      	add	r3, r2
 801455e:	460a      	mov	r2, r1
 8014560:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	691a      	ldr	r2, [r3, #16]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	8a9b      	ldrh	r3, [r3, #20]
 801456c:	1c59      	adds	r1, r3, #1
 801456e:	b288      	uxth	r0, r1
 8014570:	6879      	ldr	r1, [r7, #4]
 8014572:	8288      	strh	r0, [r1, #20]
 8014574:	6839      	ldr	r1, [r7, #0]
 8014576:	b2c9      	uxtb	r1, r1
 8014578:	4413      	add	r3, r2
 801457a:	460a      	mov	r2, r1
 801457c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8014580:	bf00      	nop
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	bd90      	pop	{r4, r7, pc}
 8014588:	08019f7c 	.word	0x08019f7c
 801458c:	0801a1f4 	.word	0x0801a1f4
 8014590:	08019ffc 	.word	0x08019ffc

08014594 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b08e      	sub	sp, #56	; 0x38
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801459e:	2300      	movs	r3, #0
 80145a0:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80145a6:	2208      	movs	r2, #8
 80145a8:	2100      	movs	r1, #0
 80145aa:	48b3      	ldr	r0, [pc, #716]	; (8014878 <dhcp_parse_reply+0x2e4>)
 80145ac:	f003 f924 	bl	80177f8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	895b      	ldrh	r3, [r3, #10]
 80145b4:	2b2b      	cmp	r3, #43	; 0x2b
 80145b6:	d802      	bhi.n	80145be <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80145b8:	f06f 0301 	mvn.w	r3, #1
 80145bc:	e26a      	b.n	8014a94 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	685a      	ldr	r2, [r3, #4]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80145c6:	23f0      	movs	r3, #240	; 0xf0
 80145c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	891b      	ldrh	r3, [r3, #8]
 80145ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80145d4:	e00c      	b.n	80145f0 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80145d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d8:	895b      	ldrh	r3, [r3, #10]
 80145da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80145dc:	1ad3      	subs	r3, r2, r3
 80145de:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80145e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e2:	895b      	ldrh	r3, [r3, #10]
 80145e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80145ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80145f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d004      	beq.n	8014600 <dhcp_parse_reply+0x6c>
 80145f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f8:	895b      	ldrh	r3, [r3, #10]
 80145fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d2ea      	bcs.n	80145d6 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 8014600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014602:	2b00      	cmp	r3, #0
 8014604:	d102      	bne.n	801460c <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8014606:	f06f 0301 	mvn.w	r3, #1
 801460a:	e243      	b.n	8014a94 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801460c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801460e:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 8014610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014612:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8014614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801461a:	e1fb      	b.n	8014a14 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801461c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801461e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014620:	4413      	add	r3, r2
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8014626:	2300      	movs	r3, #0
 8014628:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801462a:	f04f 33ff 	mov.w	r3, #4294967295
 801462e:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8014630:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014632:	3302      	adds	r3, #2
 8014634:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014636:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014638:	3301      	adds	r3, #1
 801463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801463c:	8952      	ldrh	r2, [r2, #10]
 801463e:	4293      	cmp	r3, r2
 8014640:	da06      	bge.n	8014650 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 8014642:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014644:	3301      	adds	r3, #1
 8014646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014648:	4413      	add	r3, r2
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	77fb      	strb	r3, [r7, #31]
 801464e:	e00a      	b.n	8014666 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8014650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d004      	beq.n	8014662 <dhcp_parse_reply+0xce>
 8014658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	e000      	b.n	8014664 <dhcp_parse_reply+0xd0>
 8014662:	2300      	movs	r3, #0
 8014664:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014666:	7ffb      	ldrb	r3, [r7, #31]
 8014668:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801466a:	7d7b      	ldrb	r3, [r7, #21]
 801466c:	2b3b      	cmp	r3, #59	; 0x3b
 801466e:	f200 8121 	bhi.w	80148b4 <dhcp_parse_reply+0x320>
 8014672:	a201      	add	r2, pc, #4	; (adr r2, 8014678 <dhcp_parse_reply+0xe4>)
 8014674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014678:	08014769 	.word	0x08014769
 801467c:	08014779 	.word	0x08014779
 8014680:	080148b5 	.word	0x080148b5
 8014684:	08014799 	.word	0x08014799
 8014688:	080148b5 	.word	0x080148b5
 801468c:	080148b5 	.word	0x080148b5
 8014690:	080148b5 	.word	0x080148b5
 8014694:	080148b5 	.word	0x080148b5
 8014698:	080148b5 	.word	0x080148b5
 801469c:	080148b5 	.word	0x080148b5
 80146a0:	080148b5 	.word	0x080148b5
 80146a4:	080148b5 	.word	0x080148b5
 80146a8:	080148b5 	.word	0x080148b5
 80146ac:	080148b5 	.word	0x080148b5
 80146b0:	080148b5 	.word	0x080148b5
 80146b4:	080148b5 	.word	0x080148b5
 80146b8:	080148b5 	.word	0x080148b5
 80146bc:	080148b5 	.word	0x080148b5
 80146c0:	080148b5 	.word	0x080148b5
 80146c4:	080148b5 	.word	0x080148b5
 80146c8:	080148b5 	.word	0x080148b5
 80146cc:	080148b5 	.word	0x080148b5
 80146d0:	080148b5 	.word	0x080148b5
 80146d4:	080148b5 	.word	0x080148b5
 80146d8:	080148b5 	.word	0x080148b5
 80146dc:	080148b5 	.word	0x080148b5
 80146e0:	080148b5 	.word	0x080148b5
 80146e4:	080148b5 	.word	0x080148b5
 80146e8:	080148b5 	.word	0x080148b5
 80146ec:	080148b5 	.word	0x080148b5
 80146f0:	080148b5 	.word	0x080148b5
 80146f4:	080148b5 	.word	0x080148b5
 80146f8:	080148b5 	.word	0x080148b5
 80146fc:	080148b5 	.word	0x080148b5
 8014700:	080148b5 	.word	0x080148b5
 8014704:	080148b5 	.word	0x080148b5
 8014708:	080148b5 	.word	0x080148b5
 801470c:	080148b5 	.word	0x080148b5
 8014710:	080148b5 	.word	0x080148b5
 8014714:	080148b5 	.word	0x080148b5
 8014718:	080148b5 	.word	0x080148b5
 801471c:	080148b5 	.word	0x080148b5
 8014720:	080148b5 	.word	0x080148b5
 8014724:	080148b5 	.word	0x080148b5
 8014728:	080148b5 	.word	0x080148b5
 801472c:	080148b5 	.word	0x080148b5
 8014730:	080148b5 	.word	0x080148b5
 8014734:	080148b5 	.word	0x080148b5
 8014738:	080148b5 	.word	0x080148b5
 801473c:	080148b5 	.word	0x080148b5
 8014740:	080148b5 	.word	0x080148b5
 8014744:	080147bf 	.word	0x080147bf
 8014748:	080147df 	.word	0x080147df
 801474c:	08014819 	.word	0x08014819
 8014750:	08014839 	.word	0x08014839
 8014754:	080148b5 	.word	0x080148b5
 8014758:	080148b5 	.word	0x080148b5
 801475c:	080148b5 	.word	0x080148b5
 8014760:	08014859 	.word	0x08014859
 8014764:	08014895 	.word	0x08014895
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014768:	2300      	movs	r3, #0
 801476a:	77fb      	strb	r3, [r7, #31]
 801476c:	7ffb      	ldrb	r3, [r7, #31]
 801476e:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8014770:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014772:	3b01      	subs	r3, #1
 8014774:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8014776:	e0a0      	b.n	80148ba <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014778:	7ffb      	ldrb	r3, [r7, #31]
 801477a:	2b04      	cmp	r3, #4
 801477c:	d009      	beq.n	8014792 <dhcp_parse_reply+0x1fe>
 801477e:	4b3f      	ldr	r3, [pc, #252]	; (801487c <dhcp_parse_reply+0x2e8>)
 8014780:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8014784:	493e      	ldr	r1, [pc, #248]	; (8014880 <dhcp_parse_reply+0x2ec>)
 8014786:	483f      	ldr	r0, [pc, #252]	; (8014884 <dhcp_parse_reply+0x2f0>)
 8014788:	f003 f83e 	bl	8017808 <iprintf>
 801478c:	f06f 0305 	mvn.w	r3, #5
 8014790:	e180      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014792:	2306      	movs	r3, #6
 8014794:	61bb      	str	r3, [r7, #24]
        break;
 8014796:	e090      	b.n	80148ba <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014798:	2304      	movs	r3, #4
 801479a:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801479c:	7ffa      	ldrb	r2, [r7, #31]
 801479e:	7fbb      	ldrb	r3, [r7, #30]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d209      	bcs.n	80147b8 <dhcp_parse_reply+0x224>
 80147a4:	4b35      	ldr	r3, [pc, #212]	; (801487c <dhcp_parse_reply+0x2e8>)
 80147a6:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80147aa:	4937      	ldr	r1, [pc, #220]	; (8014888 <dhcp_parse_reply+0x2f4>)
 80147ac:	4835      	ldr	r0, [pc, #212]	; (8014884 <dhcp_parse_reply+0x2f0>)
 80147ae:	f003 f82b 	bl	8017808 <iprintf>
 80147b2:	f06f 0305 	mvn.w	r3, #5
 80147b6:	e16d      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80147b8:	2307      	movs	r3, #7
 80147ba:	61bb      	str	r3, [r7, #24]
        break;
 80147bc:	e07d      	b.n	80148ba <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80147be:	7ffb      	ldrb	r3, [r7, #31]
 80147c0:	2b04      	cmp	r3, #4
 80147c2:	d009      	beq.n	80147d8 <dhcp_parse_reply+0x244>
 80147c4:	4b2d      	ldr	r3, [pc, #180]	; (801487c <dhcp_parse_reply+0x2e8>)
 80147c6:	f240 6209 	movw	r2, #1545	; 0x609
 80147ca:	492d      	ldr	r1, [pc, #180]	; (8014880 <dhcp_parse_reply+0x2ec>)
 80147cc:	482d      	ldr	r0, [pc, #180]	; (8014884 <dhcp_parse_reply+0x2f0>)
 80147ce:	f003 f81b 	bl	8017808 <iprintf>
 80147d2:	f06f 0305 	mvn.w	r3, #5
 80147d6:	e15d      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80147d8:	2303      	movs	r3, #3
 80147da:	61bb      	str	r3, [r7, #24]
        break;
 80147dc:	e06d      	b.n	80148ba <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80147de:	7ffb      	ldrb	r3, [r7, #31]
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d009      	beq.n	80147f8 <dhcp_parse_reply+0x264>
 80147e4:	4b25      	ldr	r3, [pc, #148]	; (801487c <dhcp_parse_reply+0x2e8>)
 80147e6:	f240 6217 	movw	r2, #1559	; 0x617
 80147ea:	4928      	ldr	r1, [pc, #160]	; (801488c <dhcp_parse_reply+0x2f8>)
 80147ec:	4825      	ldr	r0, [pc, #148]	; (8014884 <dhcp_parse_reply+0x2f0>)
 80147ee:	f003 f80b 	bl	8017808 <iprintf>
 80147f2:	f06f 0305 	mvn.w	r3, #5
 80147f6:	e14d      	b.n	8014a94 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80147f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80147fa:	2bf0      	cmp	r3, #240	; 0xf0
 80147fc:	d009      	beq.n	8014812 <dhcp_parse_reply+0x27e>
 80147fe:	4b1f      	ldr	r3, [pc, #124]	; (801487c <dhcp_parse_reply+0x2e8>)
 8014800:	f240 6219 	movw	r2, #1561	; 0x619
 8014804:	4922      	ldr	r1, [pc, #136]	; (8014890 <dhcp_parse_reply+0x2fc>)
 8014806:	481f      	ldr	r0, [pc, #124]	; (8014884 <dhcp_parse_reply+0x2f0>)
 8014808:	f002 fffe 	bl	8017808 <iprintf>
 801480c:	f06f 0305 	mvn.w	r3, #5
 8014810:	e140      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014812:	2300      	movs	r3, #0
 8014814:	61bb      	str	r3, [r7, #24]
        break;
 8014816:	e050      	b.n	80148ba <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014818:	7ffb      	ldrb	r3, [r7, #31]
 801481a:	2b01      	cmp	r3, #1
 801481c:	d009      	beq.n	8014832 <dhcp_parse_reply+0x29e>
 801481e:	4b17      	ldr	r3, [pc, #92]	; (801487c <dhcp_parse_reply+0x2e8>)
 8014820:	f240 621d 	movw	r2, #1565	; 0x61d
 8014824:	4919      	ldr	r1, [pc, #100]	; (801488c <dhcp_parse_reply+0x2f8>)
 8014826:	4817      	ldr	r0, [pc, #92]	; (8014884 <dhcp_parse_reply+0x2f0>)
 8014828:	f002 ffee 	bl	8017808 <iprintf>
 801482c:	f06f 0305 	mvn.w	r3, #5
 8014830:	e130      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014832:	2301      	movs	r3, #1
 8014834:	61bb      	str	r3, [r7, #24]
        break;
 8014836:	e040      	b.n	80148ba <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014838:	7ffb      	ldrb	r3, [r7, #31]
 801483a:	2b04      	cmp	r3, #4
 801483c:	d009      	beq.n	8014852 <dhcp_parse_reply+0x2be>
 801483e:	4b0f      	ldr	r3, [pc, #60]	; (801487c <dhcp_parse_reply+0x2e8>)
 8014840:	f240 6221 	movw	r2, #1569	; 0x621
 8014844:	490e      	ldr	r1, [pc, #56]	; (8014880 <dhcp_parse_reply+0x2ec>)
 8014846:	480f      	ldr	r0, [pc, #60]	; (8014884 <dhcp_parse_reply+0x2f0>)
 8014848:	f002 ffde 	bl	8017808 <iprintf>
 801484c:	f06f 0305 	mvn.w	r3, #5
 8014850:	e120      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014852:	2302      	movs	r3, #2
 8014854:	61bb      	str	r3, [r7, #24]
        break;
 8014856:	e030      	b.n	80148ba <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014858:	7ffb      	ldrb	r3, [r7, #31]
 801485a:	2b04      	cmp	r3, #4
 801485c:	d009      	beq.n	8014872 <dhcp_parse_reply+0x2de>
 801485e:	4b07      	ldr	r3, [pc, #28]	; (801487c <dhcp_parse_reply+0x2e8>)
 8014860:	f240 6225 	movw	r2, #1573	; 0x625
 8014864:	4906      	ldr	r1, [pc, #24]	; (8014880 <dhcp_parse_reply+0x2ec>)
 8014866:	4807      	ldr	r0, [pc, #28]	; (8014884 <dhcp_parse_reply+0x2f0>)
 8014868:	f002 ffce 	bl	8017808 <iprintf>
 801486c:	f06f 0305 	mvn.w	r3, #5
 8014870:	e110      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014872:	2304      	movs	r3, #4
 8014874:	61bb      	str	r3, [r7, #24]
        break;
 8014876:	e020      	b.n	80148ba <dhcp_parse_reply+0x326>
 8014878:	200079ac 	.word	0x200079ac
 801487c:	08019f7c 	.word	0x08019f7c
 8014880:	0801a234 	.word	0x0801a234
 8014884:	08019ffc 	.word	0x08019ffc
 8014888:	0801a240 	.word	0x0801a240
 801488c:	0801a254 	.word	0x0801a254
 8014890:	0801a260 	.word	0x0801a260
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014894:	7ffb      	ldrb	r3, [r7, #31]
 8014896:	2b04      	cmp	r3, #4
 8014898:	d009      	beq.n	80148ae <dhcp_parse_reply+0x31a>
 801489a:	4b80      	ldr	r3, [pc, #512]	; (8014a9c <dhcp_parse_reply+0x508>)
 801489c:	f240 6229 	movw	r2, #1577	; 0x629
 80148a0:	497f      	ldr	r1, [pc, #508]	; (8014aa0 <dhcp_parse_reply+0x50c>)
 80148a2:	4880      	ldr	r0, [pc, #512]	; (8014aa4 <dhcp_parse_reply+0x510>)
 80148a4:	f002 ffb0 	bl	8017808 <iprintf>
 80148a8:	f06f 0305 	mvn.w	r3, #5
 80148ac:	e0f2      	b.n	8014a94 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 80148ae:	2305      	movs	r3, #5
 80148b0:	61bb      	str	r3, [r7, #24]
        break;
 80148b2:	e002      	b.n	80148ba <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 80148b4:	2300      	movs	r3, #0
 80148b6:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80148b8:	bf00      	nop
    }
    offset += len + 2;
 80148ba:	7ffb      	ldrb	r3, [r7, #31]
 80148bc:	b29a      	uxth	r2, r3
 80148be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80148c0:	4413      	add	r3, r2
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	3302      	adds	r3, #2
 80148c6:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80148c8:	7fbb      	ldrb	r3, [r7, #30]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d079      	beq.n	80149c2 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	db02      	blt.n	80148de <dhcp_parse_reply+0x34a>
 80148d8:	69bb      	ldr	r3, [r7, #24]
 80148da:	2b07      	cmp	r3, #7
 80148dc:	dd06      	ble.n	80148ec <dhcp_parse_reply+0x358>
 80148de:	4b6f      	ldr	r3, [pc, #444]	; (8014a9c <dhcp_parse_reply+0x508>)
 80148e0:	f240 6236 	movw	r2, #1590	; 0x636
 80148e4:	4970      	ldr	r1, [pc, #448]	; (8014aa8 <dhcp_parse_reply+0x514>)
 80148e6:	486f      	ldr	r0, [pc, #444]	; (8014aa4 <dhcp_parse_reply+0x510>)
 80148e8:	f002 ff8e 	bl	8017808 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 80148ec:	4a6f      	ldr	r2, [pc, #444]	; (8014aac <dhcp_parse_reply+0x518>)
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	4413      	add	r3, r2
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d164      	bne.n	80149c2 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 80148f8:	7fbb      	ldrb	r3, [r7, #30]
 80148fa:	2b04      	cmp	r3, #4
 80148fc:	bf28      	it	cs
 80148fe:	2304      	movcs	r3, #4
 8014900:	b2db      	uxtb	r3, r3
 8014902:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014904:	8afb      	ldrh	r3, [r7, #22]
 8014906:	8a7a      	ldrh	r2, [r7, #18]
 8014908:	f107 0108 	add.w	r1, r7, #8
 801490c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801490e:	f7f9 fbe5 	bl	800e0dc <pbuf_copy_partial>
 8014912:	4603      	mov	r3, r0
 8014914:	461a      	mov	r2, r3
 8014916:	8a7b      	ldrh	r3, [r7, #18]
 8014918:	4293      	cmp	r3, r2
 801491a:	d002      	beq.n	8014922 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801491c:	f06f 0301 	mvn.w	r3, #1
 8014920:	e0b8      	b.n	8014a94 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 8014922:	7fbb      	ldrb	r3, [r7, #30]
 8014924:	2b04      	cmp	r3, #4
 8014926:	d927      	bls.n	8014978 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014928:	7fbb      	ldrb	r3, [r7, #30]
 801492a:	f003 0303 	and.w	r3, r3, #3
 801492e:	b2db      	uxtb	r3, r3
 8014930:	2b00      	cmp	r3, #0
 8014932:	d009      	beq.n	8014948 <dhcp_parse_reply+0x3b4>
 8014934:	4b59      	ldr	r3, [pc, #356]	; (8014a9c <dhcp_parse_reply+0x508>)
 8014936:	f240 623e 	movw	r2, #1598	; 0x63e
 801493a:	495d      	ldr	r1, [pc, #372]	; (8014ab0 <dhcp_parse_reply+0x51c>)
 801493c:	4859      	ldr	r0, [pc, #356]	; (8014aa4 <dhcp_parse_reply+0x510>)
 801493e:	f002 ff63 	bl	8017808 <iprintf>
 8014942:	f06f 0305 	mvn.w	r3, #5
 8014946:	e0a5      	b.n	8014a94 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8014948:	4a58      	ldr	r2, [pc, #352]	; (8014aac <dhcp_parse_reply+0x518>)
 801494a:	69bb      	ldr	r3, [r7, #24]
 801494c:	4413      	add	r3, r2
 801494e:	2201      	movs	r2, #1
 8014950:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	4618      	mov	r0, r3
 8014956:	f7f7 ff9f 	bl	800c898 <lwip_htonl>
 801495a:	4601      	mov	r1, r0
 801495c:	4a55      	ldr	r2, [pc, #340]	; (8014ab4 <dhcp_parse_reply+0x520>)
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8014964:	7fbb      	ldrb	r3, [r7, #30]
 8014966:	3b04      	subs	r3, #4
 8014968:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801496a:	8afb      	ldrh	r3, [r7, #22]
 801496c:	3304      	adds	r3, #4
 801496e:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	3301      	adds	r3, #1
 8014974:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8014976:	e7ac      	b.n	80148d2 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8014978:	7fbb      	ldrb	r3, [r7, #30]
 801497a:	2b04      	cmp	r3, #4
 801497c:	d106      	bne.n	801498c <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	4618      	mov	r0, r3
 8014982:	f7f7 ff89 	bl	800c898 <lwip_htonl>
 8014986:	4603      	mov	r3, r0
 8014988:	60bb      	str	r3, [r7, #8]
 801498a:	e010      	b.n	80149ae <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801498c:	7fbb      	ldrb	r3, [r7, #30]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d009      	beq.n	80149a6 <dhcp_parse_reply+0x412>
 8014992:	4b42      	ldr	r3, [pc, #264]	; (8014a9c <dhcp_parse_reply+0x508>)
 8014994:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8014998:	4947      	ldr	r1, [pc, #284]	; (8014ab8 <dhcp_parse_reply+0x524>)
 801499a:	4842      	ldr	r0, [pc, #264]	; (8014aa4 <dhcp_parse_reply+0x510>)
 801499c:	f002 ff34 	bl	8017808 <iprintf>
 80149a0:	f06f 0305 	mvn.w	r3, #5
 80149a4:	e076      	b.n	8014a94 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 80149a6:	f107 0308 	add.w	r3, r7, #8
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80149ae:	4a3f      	ldr	r2, [pc, #252]	; (8014aac <dhcp_parse_reply+0x518>)
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	4413      	add	r3, r2
 80149b4:	2201      	movs	r2, #1
 80149b6:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	493e      	ldr	r1, [pc, #248]	; (8014ab4 <dhcp_parse_reply+0x520>)
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	895b      	ldrh	r3, [r3, #10]
 80149c6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d323      	bcc.n	8014a14 <dhcp_parse_reply+0x480>
      offset -= q->len;
 80149cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ce:	895b      	ldrh	r3, [r3, #10]
 80149d0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	895b      	ldrh	r3, [r3, #10]
 80149da:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80149dc:	1ad3      	subs	r3, r2, r3
 80149de:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 80149e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80149e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d223      	bcs.n	8014a30 <dhcp_parse_reply+0x49c>
 80149e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d020      	beq.n	8014a30 <dhcp_parse_reply+0x49c>
        q = q->next;
 80149ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80149f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d109      	bne.n	8014a0e <dhcp_parse_reply+0x47a>
 80149fa:	4b28      	ldr	r3, [pc, #160]	; (8014a9c <dhcp_parse_reply+0x508>)
 80149fc:	f240 6254 	movw	r2, #1620	; 0x654
 8014a00:	492e      	ldr	r1, [pc, #184]	; (8014abc <dhcp_parse_reply+0x528>)
 8014a02:	4828      	ldr	r0, [pc, #160]	; (8014aa4 <dhcp_parse_reply+0x510>)
 8014a04:	f002 ff00 	bl	8017808 <iprintf>
 8014a08:	f06f 0305 	mvn.w	r3, #5
 8014a0c:	e042      	b.n	8014a94 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8014a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00a      	beq.n	8014a30 <dhcp_parse_reply+0x49c>
 8014a1a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014a1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d206      	bcs.n	8014a30 <dhcp_parse_reply+0x49c>
 8014a22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a26:	4413      	add	r3, r2
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	2bff      	cmp	r3, #255	; 0xff
 8014a2c:	f47f adf6 	bne.w	801461c <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014a30:	4b1e      	ldr	r3, [pc, #120]	; (8014aac <dhcp_parse_reply+0x518>)
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d018      	beq.n	8014a6a <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014a38:	4b1e      	ldr	r3, [pc, #120]	; (8014ab4 <dhcp_parse_reply+0x520>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014a3e:	4b1b      	ldr	r3, [pc, #108]	; (8014aac <dhcp_parse_reply+0x518>)
 8014a40:	2200      	movs	r2, #0
 8014a42:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d102      	bne.n	8014a50 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8014a4e:	e00c      	b.n	8014a6a <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2b02      	cmp	r3, #2
 8014a54:	d102      	bne.n	8014a5c <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8014a56:	2301      	movs	r3, #1
 8014a58:	623b      	str	r3, [r7, #32]
 8014a5a:	e006      	b.n	8014a6a <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	2b03      	cmp	r3, #3
 8014a60:	d103      	bne.n	8014a6a <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 8014a62:	2301      	movs	r3, #1
 8014a64:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8014a66:	2301      	movs	r3, #1
 8014a68:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d006      	beq.n	8014a7e <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014a70:	2300      	movs	r3, #0
 8014a72:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8014a74:	236c      	movs	r3, #108	; 0x6c
 8014a76:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014a78:	23ec      	movs	r3, #236	; 0xec
 8014a7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8014a7c:	e5a8      	b.n	80145d0 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 8014a7e:	6a3b      	ldr	r3, [r7, #32]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d006      	beq.n	8014a92 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8014a88:	232c      	movs	r3, #44	; 0x2c
 8014a8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014a8c:	236c      	movs	r3, #108	; 0x6c
 8014a8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8014a90:	e59e      	b.n	80145d0 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3738      	adds	r7, #56	; 0x38
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	08019f7c 	.word	0x08019f7c
 8014aa0:	0801a234 	.word	0x0801a234
 8014aa4:	08019ffc 	.word	0x08019ffc
 8014aa8:	0801a278 	.word	0x0801a278
 8014aac:	200079ac 	.word	0x200079ac
 8014ab0:	0801a28c 	.word	0x0801a28c
 8014ab4:	200079b4 	.word	0x200079b4
 8014ab8:	0801a2a4 	.word	0x0801a2a4
 8014abc:	0801a2b8 	.word	0x0801a2b8

08014ac0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b08a      	sub	sp, #40	; 0x28
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
 8014acc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014ace:	4b68      	ldr	r3, [pc, #416]	; (8014c70 <dhcp_recv+0x1b0>)
 8014ad0:	685b      	ldr	r3, [r3, #4]
 8014ad2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ad4:	6a3b      	ldr	r3, [r7, #32]
 8014ad6:	6a1b      	ldr	r3, [r3, #32]
 8014ad8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	685b      	ldr	r3, [r3, #4]
 8014ade:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014ae0:	69fb      	ldr	r3, [r7, #28]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	f000 80a9 	beq.w	8014c3a <dhcp_recv+0x17a>
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	7a1b      	ldrb	r3, [r3, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f000 80a4 	beq.w	8014c3a <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d006      	beq.n	8014b08 <dhcp_recv+0x48>
 8014afa:	4b5e      	ldr	r3, [pc, #376]	; (8014c74 <dhcp_recv+0x1b4>)
 8014afc:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8014b00:	495d      	ldr	r1, [pc, #372]	; (8014c78 <dhcp_recv+0x1b8>)
 8014b02:	485e      	ldr	r0, [pc, #376]	; (8014c7c <dhcp_recv+0x1bc>)
 8014b04:	f002 fe80 	bl	8017808 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	895b      	ldrh	r3, [r3, #10]
 8014b0c:	2b2b      	cmp	r3, #43	; 0x2b
 8014b0e:	f240 8096 	bls.w	8014c3e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	2b02      	cmp	r3, #2
 8014b18:	f040 8093 	bne.w	8014c42 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b22:	e012      	b.n	8014b4a <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b28:	6a3a      	ldr	r2, [r7, #32]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8014b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b34:	69b9      	ldr	r1, [r7, #24]
 8014b36:	440b      	add	r3, r1
 8014b38:	7f1b      	ldrb	r3, [r3, #28]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	f040 8083 	bne.w	8014c46 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b44:	3301      	adds	r3, #1
 8014b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d207      	bcs.n	8014b68 <dhcp_recv+0xa8>
 8014b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b5c:	2b05      	cmp	r3, #5
 8014b5e:	d803      	bhi.n	8014b68 <dhcp_recv+0xa8>
 8014b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b64:	2b0f      	cmp	r3, #15
 8014b66:	d9dd      	bls.n	8014b24 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7f7 fe93 	bl	800c898 <lwip_htonl>
 8014b72:	4602      	mov	r2, r0
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	d166      	bne.n	8014c4a <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8014b7c:	6879      	ldr	r1, [r7, #4]
 8014b7e:	69f8      	ldr	r0, [r7, #28]
 8014b80:	f7ff fd08 	bl	8014594 <dhcp_parse_reply>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d161      	bne.n	8014c4e <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014b8a:	4b3d      	ldr	r3, [pc, #244]	; (8014c80 <dhcp_recv+0x1c0>)
 8014b8c:	785b      	ldrb	r3, [r3, #1]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d05f      	beq.n	8014c52 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014b92:	4b3c      	ldr	r3, [pc, #240]	; (8014c84 <dhcp_recv+0x1c4>)
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014b98:	7dfb      	ldrb	r3, [r7, #23]
 8014b9a:	2b05      	cmp	r3, #5
 8014b9c:	d128      	bne.n	8014bf0 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	7a5b      	ldrb	r3, [r3, #9]
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d111      	bne.n	8014bca <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8014ba6:	6a38      	ldr	r0, [r7, #32]
 8014ba8:	f7fe fe62 	bl	8013870 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014bac:	6a3b      	ldr	r3, [r7, #32]
 8014bae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014bb2:	f003 0308 	and.w	r3, r3, #8
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d003      	beq.n	8014bc2 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014bba:	6a38      	ldr	r0, [r7, #32]
 8014bbc:	f7fe fc28 	bl	8013410 <dhcp_check>
 8014bc0:	e048      	b.n	8014c54 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014bc2:	6a38      	ldr	r0, [r7, #32]
 8014bc4:	f7ff f8a0 	bl	8013d08 <dhcp_bind>
 8014bc8:	e044      	b.n	8014c54 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	7a5b      	ldrb	r3, [r3, #9]
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d007      	beq.n	8014be2 <dhcp_recv+0x122>
 8014bd2:	69fb      	ldr	r3, [r7, #28]
 8014bd4:	7a5b      	ldrb	r3, [r3, #9]
 8014bd6:	2b04      	cmp	r3, #4
 8014bd8:	d003      	beq.n	8014be2 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014bde:	2b05      	cmp	r3, #5
 8014be0:	d138      	bne.n	8014c54 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8014be2:	6a38      	ldr	r0, [r7, #32]
 8014be4:	f7fe fe44 	bl	8013870 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014be8:	6a38      	ldr	r0, [r7, #32]
 8014bea:	f7ff f88d 	bl	8013d08 <dhcp_bind>
 8014bee:	e031      	b.n	8014c54 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014bf0:	7dfb      	ldrb	r3, [r7, #23]
 8014bf2:	2b06      	cmp	r3, #6
 8014bf4:	d113      	bne.n	8014c1e <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8014bfa:	2b03      	cmp	r3, #3
 8014bfc:	d00b      	beq.n	8014c16 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	7a5b      	ldrb	r3, [r3, #9]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d007      	beq.n	8014c16 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014c0a:	2b04      	cmp	r3, #4
 8014c0c:	d003      	beq.n	8014c16 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	7a5b      	ldrb	r3, [r3, #9]
 8014c12:	2b05      	cmp	r3, #5
 8014c14:	d103      	bne.n	8014c1e <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014c16:	6a38      	ldr	r0, [r7, #32]
 8014c18:	f7fe fbe0 	bl	80133dc <dhcp_handle_nak>
 8014c1c:	e01a      	b.n	8014c54 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014c1e:	7dfb      	ldrb	r3, [r7, #23]
 8014c20:	2b02      	cmp	r3, #2
 8014c22:	d10a      	bne.n	8014c3a <dhcp_recv+0x17a>
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	7a5b      	ldrb	r3, [r3, #9]
 8014c28:	2b06      	cmp	r3, #6
 8014c2a:	d106      	bne.n	8014c3a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8014c32:	6a38      	ldr	r0, [r7, #32]
 8014c34:	f7fe fc20 	bl	8013478 <dhcp_handle_offer>
 8014c38:	e00c      	b.n	8014c54 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8014c3a:	bf00      	nop
 8014c3c:	e00a      	b.n	8014c54 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014c3e:	bf00      	nop
 8014c40:	e008      	b.n	8014c54 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014c42:	bf00      	nop
 8014c44:	e006      	b.n	8014c54 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8014c46:	bf00      	nop
 8014c48:	e004      	b.n	8014c54 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014c4a:	bf00      	nop
 8014c4c:	e002      	b.n	8014c54 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014c4e:	bf00      	nop
 8014c50:	e000      	b.n	8014c54 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014c52:	bf00      	nop
  if (dhcp != NULL) {
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d002      	beq.n	8014c60 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f7f9 f82f 	bl	800dcc4 <pbuf_free>
}
 8014c66:	bf00      	nop
 8014c68:	3728      	adds	r7, #40	; 0x28
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	200048b4 	.word	0x200048b4
 8014c74:	08019f7c 	.word	0x08019f7c
 8014c78:	0801a0c8 	.word	0x0801a0c8
 8014c7c:	08019ffc 	.word	0x08019ffc
 8014c80:	200079ac 	.word	0x200079ac
 8014c84:	200079b4 	.word	0x200079b4

08014c88 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8014c88:	b590      	push	{r4, r7, lr}
 8014c8a:	b087      	sub	sp, #28
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	4613      	mov	r3, r2
 8014c94:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d109      	bne.n	8014cb0 <dhcp_create_msg+0x28>
 8014c9c:	4ba3      	ldr	r3, [pc, #652]	; (8014f2c <dhcp_create_msg+0x2a4>)
 8014c9e:	f240 721d 	movw	r2, #1821	; 0x71d
 8014ca2:	49a3      	ldr	r1, [pc, #652]	; (8014f30 <dhcp_create_msg+0x2a8>)
 8014ca4:	48a3      	ldr	r0, [pc, #652]	; (8014f34 <dhcp_create_msg+0x2ac>)
 8014ca6:	f002 fdaf 	bl	8017808 <iprintf>
 8014caa:	f06f 030f 	mvn.w	r3, #15
 8014cae:	e138      	b.n	8014f22 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d109      	bne.n	8014cca <dhcp_create_msg+0x42>
 8014cb6:	4b9d      	ldr	r3, [pc, #628]	; (8014f2c <dhcp_create_msg+0x2a4>)
 8014cb8:	f240 721e 	movw	r2, #1822	; 0x71e
 8014cbc:	499e      	ldr	r1, [pc, #632]	; (8014f38 <dhcp_create_msg+0x2b0>)
 8014cbe:	489d      	ldr	r0, [pc, #628]	; (8014f34 <dhcp_create_msg+0x2ac>)
 8014cc0:	f002 fda2 	bl	8017808 <iprintf>
 8014cc4:	f06f 0305 	mvn.w	r3, #5
 8014cc8:	e12b      	b.n	8014f22 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d006      	beq.n	8014ce0 <dhcp_create_msg+0x58>
 8014cd2:	4b96      	ldr	r3, [pc, #600]	; (8014f2c <dhcp_create_msg+0x2a4>)
 8014cd4:	f240 721f 	movw	r2, #1823	; 0x71f
 8014cd8:	4998      	ldr	r1, [pc, #608]	; (8014f3c <dhcp_create_msg+0x2b4>)
 8014cda:	4896      	ldr	r0, [pc, #600]	; (8014f34 <dhcp_create_msg+0x2ac>)
 8014cdc:	f002 fd94 	bl	8017808 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	691b      	ldr	r3, [r3, #16]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d006      	beq.n	8014cf6 <dhcp_create_msg+0x6e>
 8014ce8:	4b90      	ldr	r3, [pc, #576]	; (8014f2c <dhcp_create_msg+0x2a4>)
 8014cea:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8014cee:	4994      	ldr	r1, [pc, #592]	; (8014f40 <dhcp_create_msg+0x2b8>)
 8014cf0:	4890      	ldr	r0, [pc, #576]	; (8014f34 <dhcp_create_msg+0x2ac>)
 8014cf2:	f002 fd89 	bl	8017808 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014cfc:	2000      	movs	r0, #0
 8014cfe:	f7f8 fc6f 	bl	800d5e0 <pbuf_alloc>
 8014d02:	4602      	mov	r2, r0
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	68db      	ldr	r3, [r3, #12]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d102      	bne.n	8014d16 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8014d10:	f04f 33ff 	mov.w	r3, #4294967295
 8014d14:	e105      	b.n	8014f22 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	895b      	ldrh	r3, [r3, #10]
 8014d1c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014d20:	d206      	bcs.n	8014d30 <dhcp_create_msg+0xa8>
 8014d22:	4b82      	ldr	r3, [pc, #520]	; (8014f2c <dhcp_create_msg+0x2a4>)
 8014d24:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014d28:	4986      	ldr	r1, [pc, #536]	; (8014f44 <dhcp_create_msg+0x2bc>)
 8014d2a:	4882      	ldr	r0, [pc, #520]	; (8014f34 <dhcp_create_msg+0x2ac>)
 8014d2c:	f002 fd6c 	bl	8017808 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014d30:	79fb      	ldrb	r3, [r7, #7]
 8014d32:	2b03      	cmp	r3, #3
 8014d34:	d103      	bne.n	8014d3e <dhcp_create_msg+0xb6>
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	7a5b      	ldrb	r3, [r3, #9]
 8014d3a:	2b03      	cmp	r3, #3
 8014d3c:	d10d      	bne.n	8014d5a <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	7a9b      	ldrb	r3, [r3, #10]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d105      	bne.n	8014d52 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014d46:	f002 fd77 	bl	8017838 <rand>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	4b7e      	ldr	r3, [pc, #504]	; (8014f48 <dhcp_create_msg+0x2c0>)
 8014d50:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014d52:	4b7d      	ldr	r3, [pc, #500]	; (8014f48 <dhcp_create_msg+0x2c0>)
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	68db      	ldr	r3, [r3, #12]
 8014d5e:	685a      	ldr	r2, [r3, #4]
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	691b      	ldr	r3, [r3, #16]
 8014d68:	2201      	movs	r2, #1
 8014d6a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	691b      	ldr	r3, [r3, #16]
 8014d70:	2201      	movs	r2, #1
 8014d72:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	691b      	ldr	r3, [r3, #16]
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8014d7e:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	691b      	ldr	r3, [r3, #16]
 8014d84:	2200      	movs	r2, #0
 8014d86:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	691c      	ldr	r4, [r3, #16]
 8014d90:	4610      	mov	r0, r2
 8014d92:	f7f7 fd81 	bl	800c898 <lwip_htonl>
 8014d96:	4603      	mov	r3, r0
 8014d98:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	691b      	ldr	r3, [r3, #16]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	721a      	strb	r2, [r3, #8]
 8014da2:	2200      	movs	r2, #0
 8014da4:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	691b      	ldr	r3, [r3, #16]
 8014daa:	2200      	movs	r2, #0
 8014dac:	729a      	strb	r2, [r3, #10]
 8014dae:	2200      	movs	r2, #0
 8014db0:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	691b      	ldr	r3, [r3, #16]
 8014db6:	2200      	movs	r2, #0
 8014db8:	731a      	strb	r2, [r3, #12]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	735a      	strb	r2, [r3, #13]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	739a      	strb	r2, [r3, #14]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014dc6:	79fb      	ldrb	r3, [r7, #7]
 8014dc8:	2b08      	cmp	r3, #8
 8014dca:	d010      	beq.n	8014dee <dhcp_create_msg+0x166>
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	d00d      	beq.n	8014dee <dhcp_create_msg+0x166>
 8014dd2:	79fb      	ldrb	r3, [r7, #7]
 8014dd4:	2b07      	cmp	r3, #7
 8014dd6:	d00a      	beq.n	8014dee <dhcp_create_msg+0x166>
 8014dd8:	79fb      	ldrb	r3, [r7, #7]
 8014dda:	2b03      	cmp	r3, #3
 8014ddc:	d10d      	bne.n	8014dfa <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014de2:	2b05      	cmp	r3, #5
 8014de4:	d003      	beq.n	8014dee <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	7a5b      	ldrb	r3, [r3, #9]
 8014dea:	2b04      	cmp	r3, #4
 8014dec:	d105      	bne.n	8014dfa <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	1d1a      	adds	r2, r3, #4
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	691b      	ldr	r3, [r3, #16]
 8014df6:	6812      	ldr	r2, [r2, #0]
 8014df8:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	741a      	strb	r2, [r3, #16]
 8014e02:	2200      	movs	r2, #0
 8014e04:	745a      	strb	r2, [r3, #17]
 8014e06:	2200      	movs	r2, #0
 8014e08:	749a      	strb	r2, [r3, #18]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	2200      	movs	r2, #0
 8014e14:	751a      	strb	r2, [r3, #20]
 8014e16:	2200      	movs	r2, #0
 8014e18:	755a      	strb	r2, [r3, #21]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	759a      	strb	r2, [r3, #22]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	2200      	movs	r2, #0
 8014e28:	761a      	strb	r2, [r3, #24]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	765a      	strb	r2, [r3, #25]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	769a      	strb	r2, [r3, #26]
 8014e32:	2200      	movs	r2, #0
 8014e34:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014e36:	2300      	movs	r3, #0
 8014e38:	82fb      	strh	r3, [r7, #22]
 8014e3a:	e019      	b.n	8014e70 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	8afa      	ldrh	r2, [r7, #22]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d208      	bcs.n	8014e5c <dhcp_create_msg+0x1d4>
 8014e4a:	8afb      	ldrh	r3, [r7, #22]
 8014e4c:	2b05      	cmp	r3, #5
 8014e4e:	d805      	bhi.n	8014e5c <dhcp_create_msg+0x1d4>
 8014e50:	8afb      	ldrh	r3, [r7, #22]
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	4413      	add	r3, r2
 8014e56:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8014e5a:	e000      	b.n	8014e5e <dhcp_create_msg+0x1d6>
 8014e5c:	2100      	movs	r1, #0
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	691a      	ldr	r2, [r3, #16]
 8014e62:	8afb      	ldrh	r3, [r7, #22]
 8014e64:	4413      	add	r3, r2
 8014e66:	460a      	mov	r2, r1
 8014e68:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014e6a:	8afb      	ldrh	r3, [r7, #22]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	82fb      	strh	r3, [r7, #22]
 8014e70:	8afb      	ldrh	r3, [r7, #22]
 8014e72:	2b0f      	cmp	r3, #15
 8014e74:	d9e2      	bls.n	8014e3c <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014e76:	2300      	movs	r3, #0
 8014e78:	82fb      	strh	r3, [r7, #22]
 8014e7a:	e009      	b.n	8014e90 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	691a      	ldr	r2, [r3, #16]
 8014e80:	8afb      	ldrh	r3, [r7, #22]
 8014e82:	4413      	add	r3, r2
 8014e84:	2200      	movs	r2, #0
 8014e86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014e8a:	8afb      	ldrh	r3, [r7, #22]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	82fb      	strh	r3, [r7, #22]
 8014e90:	8afb      	ldrh	r3, [r7, #22]
 8014e92:	2b3f      	cmp	r3, #63	; 0x3f
 8014e94:	d9f2      	bls.n	8014e7c <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014e96:	2300      	movs	r3, #0
 8014e98:	82fb      	strh	r3, [r7, #22]
 8014e9a:	e009      	b.n	8014eb0 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	691a      	ldr	r2, [r3, #16]
 8014ea0:	8afb      	ldrh	r3, [r7, #22]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014eaa:	8afb      	ldrh	r3, [r7, #22]
 8014eac:	3301      	adds	r3, #1
 8014eae:	82fb      	strh	r3, [r7, #22]
 8014eb0:	8afb      	ldrh	r3, [r7, #22]
 8014eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8014eb4:	d9f2      	bls.n	8014e9c <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	691b      	ldr	r3, [r3, #16]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014ec0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8014eca:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014ece:	2200      	movs	r2, #0
 8014ed0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014ed4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014ede:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014ee8:	2300      	movs	r3, #0
 8014eea:	82fb      	strh	r3, [r7, #22]
 8014eec:	e00b      	b.n	8014f06 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	691a      	ldr	r2, [r3, #16]
 8014ef2:	8afb      	ldrh	r3, [r7, #22]
 8014ef4:	8af9      	ldrh	r1, [r7, #22]
 8014ef6:	b2c9      	uxtb	r1, r1
 8014ef8:	4413      	add	r3, r2
 8014efa:	460a      	mov	r2, r1
 8014efc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014f00:	8afb      	ldrh	r3, [r7, #22]
 8014f02:	3301      	adds	r3, #1
 8014f04:	82fb      	strh	r3, [r7, #22]
 8014f06:	8afb      	ldrh	r3, [r7, #22]
 8014f08:	2b43      	cmp	r3, #67	; 0x43
 8014f0a:	d9f0      	bls.n	8014eee <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	2135      	movs	r1, #53	; 0x35
 8014f10:	68b8      	ldr	r0, [r7, #8]
 8014f12:	f7ff fa4d 	bl	80143b0 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8014f16:	79fb      	ldrb	r3, [r7, #7]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	68b8      	ldr	r0, [r7, #8]
 8014f1c:	f7ff fa82 	bl	8014424 <dhcp_option_byte>
  return ERR_OK;
 8014f20:	2300      	movs	r3, #0
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	371c      	adds	r7, #28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd90      	pop	{r4, r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	08019f7c 	.word	0x08019f7c
 8014f30:	0801a2cc 	.word	0x0801a2cc
 8014f34:	08019ffc 	.word	0x08019ffc
 8014f38:	0801a2ec 	.word	0x0801a2ec
 8014f3c:	0801a30c 	.word	0x0801a30c
 8014f40:	0801a334 	.word	0x0801a334
 8014f44:	0801a35c 	.word	0x0801a35c
 8014f48:	200040fc 	.word	0x200040fc

08014f4c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d107      	bne.n	8014f6a <dhcp_delete_msg+0x1e>
 8014f5a:	4b18      	ldr	r3, [pc, #96]	; (8014fbc <dhcp_delete_msg+0x70>)
 8014f5c:	f240 726d 	movw	r2, #1901	; 0x76d
 8014f60:	4917      	ldr	r1, [pc, #92]	; (8014fc0 <dhcp_delete_msg+0x74>)
 8014f62:	4818      	ldr	r0, [pc, #96]	; (8014fc4 <dhcp_delete_msg+0x78>)
 8014f64:	f002 fc50 	bl	8017808 <iprintf>
 8014f68:	e024      	b.n	8014fb4 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d106      	bne.n	8014f80 <dhcp_delete_msg+0x34>
 8014f72:	4b12      	ldr	r3, [pc, #72]	; (8014fbc <dhcp_delete_msg+0x70>)
 8014f74:	f240 726e 	movw	r2, #1902	; 0x76e
 8014f78:	4913      	ldr	r1, [pc, #76]	; (8014fc8 <dhcp_delete_msg+0x7c>)
 8014f7a:	4812      	ldr	r0, [pc, #72]	; (8014fc4 <dhcp_delete_msg+0x78>)
 8014f7c:	f002 fc44 	bl	8017808 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d106      	bne.n	8014f96 <dhcp_delete_msg+0x4a>
 8014f88:	4b0c      	ldr	r3, [pc, #48]	; (8014fbc <dhcp_delete_msg+0x70>)
 8014f8a:	f240 726f 	movw	r2, #1903	; 0x76f
 8014f8e:	490f      	ldr	r1, [pc, #60]	; (8014fcc <dhcp_delete_msg+0x80>)
 8014f90:	480c      	ldr	r0, [pc, #48]	; (8014fc4 <dhcp_delete_msg+0x78>)
 8014f92:	f002 fc39 	bl	8017808 <iprintf>
  if (dhcp->p_out != NULL) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d004      	beq.n	8014fa8 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7f8 fe8e 	bl	800dcc4 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2200      	movs	r2, #0
 8014fac:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	611a      	str	r2, [r3, #16]
}
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	08019f7c 	.word	0x08019f7c
 8014fc0:	0801a39c 	.word	0x0801a39c
 8014fc4:	08019ffc 	.word	0x08019ffc
 8014fc8:	0801a3bc 	.word	0x0801a3bc
 8014fcc:	0801a3e4 	.word	0x0801a3e4

08014fd0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d107      	bne.n	8014fee <dhcp_option_trailer+0x1e>
 8014fde:	4b24      	ldr	r3, [pc, #144]	; (8015070 <dhcp_option_trailer+0xa0>)
 8014fe0:	f240 7282 	movw	r2, #1922	; 0x782
 8014fe4:	4923      	ldr	r1, [pc, #140]	; (8015074 <dhcp_option_trailer+0xa4>)
 8014fe6:	4824      	ldr	r0, [pc, #144]	; (8015078 <dhcp_option_trailer+0xa8>)
 8014fe8:	f002 fc0e 	bl	8017808 <iprintf>
 8014fec:	e03c      	b.n	8015068 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	691b      	ldr	r3, [r3, #16]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d106      	bne.n	8015004 <dhcp_option_trailer+0x34>
 8014ff6:	4b1e      	ldr	r3, [pc, #120]	; (8015070 <dhcp_option_trailer+0xa0>)
 8014ff8:	f240 7283 	movw	r2, #1923	; 0x783
 8014ffc:	491f      	ldr	r1, [pc, #124]	; (801507c <dhcp_option_trailer+0xac>)
 8014ffe:	481e      	ldr	r0, [pc, #120]	; (8015078 <dhcp_option_trailer+0xa8>)
 8015000:	f002 fc02 	bl	8017808 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	8a9b      	ldrh	r3, [r3, #20]
 8015008:	2b43      	cmp	r3, #67	; 0x43
 801500a:	d906      	bls.n	801501a <dhcp_option_trailer+0x4a>
 801500c:	4b18      	ldr	r3, [pc, #96]	; (8015070 <dhcp_option_trailer+0xa0>)
 801500e:	f240 7284 	movw	r2, #1924	; 0x784
 8015012:	491b      	ldr	r1, [pc, #108]	; (8015080 <dhcp_option_trailer+0xb0>)
 8015014:	4818      	ldr	r0, [pc, #96]	; (8015078 <dhcp_option_trailer+0xa8>)
 8015016:	f002 fbf7 	bl	8017808 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	691a      	ldr	r2, [r3, #16]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	8a9b      	ldrh	r3, [r3, #20]
 8015022:	1c59      	adds	r1, r3, #1
 8015024:	b288      	uxth	r0, r1
 8015026:	6879      	ldr	r1, [r7, #4]
 8015028:	8288      	strh	r0, [r1, #20]
 801502a:	4413      	add	r3, r2
 801502c:	22ff      	movs	r2, #255	; 0xff
 801502e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8015032:	e00b      	b.n	801504c <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	691a      	ldr	r2, [r3, #16]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	8a9b      	ldrh	r3, [r3, #20]
 801503c:	1c59      	adds	r1, r3, #1
 801503e:	b288      	uxth	r0, r1
 8015040:	6879      	ldr	r1, [r7, #4]
 8015042:	8288      	strh	r0, [r1, #20]
 8015044:	4413      	add	r3, r2
 8015046:	2200      	movs	r2, #0
 8015048:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	8a9b      	ldrh	r3, [r3, #20]
 8015050:	2b43      	cmp	r3, #67	; 0x43
 8015052:	d905      	bls.n	8015060 <dhcp_option_trailer+0x90>
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	8a9b      	ldrh	r3, [r3, #20]
 8015058:	f003 0303 	and.w	r3, r3, #3
 801505c:	2b00      	cmp	r3, #0
 801505e:	d003      	beq.n	8015068 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8015064:	2b43      	cmp	r3, #67	; 0x43
 8015066:	d9e5      	bls.n	8015034 <dhcp_option_trailer+0x64>
  }
}
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	08019f7c 	.word	0x08019f7c
 8015074:	0801a40c 	.word	0x0801a40c
 8015078:	08019ffc 	.word	0x08019ffc
 801507c:	0801a430 	.word	0x0801a430
 8015080:	0801a45c 	.word	0x0801a45c

08015084 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015084:	b480      	push	{r7}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d017      	beq.n	80150c2 <dhcp_supplied_address+0x3e>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6a1b      	ldr	r3, [r3, #32]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d013      	beq.n	80150c2 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6a1b      	ldr	r3, [r3, #32]
 801509e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	7a5b      	ldrb	r3, [r3, #9]
 80150a4:	2b0a      	cmp	r3, #10
 80150a6:	d007      	beq.n	80150b8 <dhcp_supplied_address+0x34>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	7a5b      	ldrb	r3, [r3, #9]
 80150ac:	2b05      	cmp	r3, #5
 80150ae:	d003      	beq.n	80150b8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80150b4:	2b04      	cmp	r3, #4
 80150b6:	d101      	bne.n	80150bc <dhcp_supplied_address+0x38>
 80150b8:	2301      	movs	r3, #1
 80150ba:	e000      	b.n	80150be <dhcp_supplied_address+0x3a>
 80150bc:	2300      	movs	r3, #0
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	e000      	b.n	80150c4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80150c2:	2300      	movs	r3, #0
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3714      	adds	r7, #20
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr

080150d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80150d8:	4915      	ldr	r1, [pc, #84]	; (8015130 <etharp_free_entry+0x60>)
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	4613      	mov	r3, r2
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	4413      	add	r3, r2
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	440b      	add	r3, r1
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d013      	beq.n	8015114 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80150ec:	4910      	ldr	r1, [pc, #64]	; (8015130 <etharp_free_entry+0x60>)
 80150ee:	687a      	ldr	r2, [r7, #4]
 80150f0:	4613      	mov	r3, r2
 80150f2:	005b      	lsls	r3, r3, #1
 80150f4:	4413      	add	r3, r2
 80150f6:	00db      	lsls	r3, r3, #3
 80150f8:	440b      	add	r3, r1
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f8 fde1 	bl	800dcc4 <pbuf_free>
    arp_table[i].q = NULL;
 8015102:	490b      	ldr	r1, [pc, #44]	; (8015130 <etharp_free_entry+0x60>)
 8015104:	687a      	ldr	r2, [r7, #4]
 8015106:	4613      	mov	r3, r2
 8015108:	005b      	lsls	r3, r3, #1
 801510a:	4413      	add	r3, r2
 801510c:	00db      	lsls	r3, r3, #3
 801510e:	440b      	add	r3, r1
 8015110:	2200      	movs	r2, #0
 8015112:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015114:	4906      	ldr	r1, [pc, #24]	; (8015130 <etharp_free_entry+0x60>)
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	4613      	mov	r3, r2
 801511a:	005b      	lsls	r3, r3, #1
 801511c:	4413      	add	r3, r2
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	440b      	add	r3, r1
 8015122:	3314      	adds	r3, #20
 8015124:	2200      	movs	r2, #0
 8015126:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015128:	bf00      	nop
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	20004100 	.word	0x20004100

08015134 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801513a:	2300      	movs	r3, #0
 801513c:	71fb      	strb	r3, [r7, #7]
 801513e:	e096      	b.n	801526e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015140:	79fa      	ldrb	r2, [r7, #7]
 8015142:	494f      	ldr	r1, [pc, #316]	; (8015280 <etharp_tmr+0x14c>)
 8015144:	4613      	mov	r3, r2
 8015146:	005b      	lsls	r3, r3, #1
 8015148:	4413      	add	r3, r2
 801514a:	00db      	lsls	r3, r3, #3
 801514c:	440b      	add	r3, r1
 801514e:	3314      	adds	r3, #20
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8015154:	79bb      	ldrb	r3, [r7, #6]
 8015156:	2b00      	cmp	r3, #0
 8015158:	f000 8086 	beq.w	8015268 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801515c:	79fa      	ldrb	r2, [r7, #7]
 801515e:	4948      	ldr	r1, [pc, #288]	; (8015280 <etharp_tmr+0x14c>)
 8015160:	4613      	mov	r3, r2
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	440b      	add	r3, r1
 801516a:	3312      	adds	r3, #18
 801516c:	881b      	ldrh	r3, [r3, #0]
 801516e:	3301      	adds	r3, #1
 8015170:	b298      	uxth	r0, r3
 8015172:	4943      	ldr	r1, [pc, #268]	; (8015280 <etharp_tmr+0x14c>)
 8015174:	4613      	mov	r3, r2
 8015176:	005b      	lsls	r3, r3, #1
 8015178:	4413      	add	r3, r2
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	440b      	add	r3, r1
 801517e:	3312      	adds	r3, #18
 8015180:	4602      	mov	r2, r0
 8015182:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015184:	79fa      	ldrb	r2, [r7, #7]
 8015186:	493e      	ldr	r1, [pc, #248]	; (8015280 <etharp_tmr+0x14c>)
 8015188:	4613      	mov	r3, r2
 801518a:	005b      	lsls	r3, r3, #1
 801518c:	4413      	add	r3, r2
 801518e:	00db      	lsls	r3, r3, #3
 8015190:	440b      	add	r3, r1
 8015192:	3312      	adds	r3, #18
 8015194:	881b      	ldrh	r3, [r3, #0]
 8015196:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801519a:	d215      	bcs.n	80151c8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801519c:	79fa      	ldrb	r2, [r7, #7]
 801519e:	4938      	ldr	r1, [pc, #224]	; (8015280 <etharp_tmr+0x14c>)
 80151a0:	4613      	mov	r3, r2
 80151a2:	005b      	lsls	r3, r3, #1
 80151a4:	4413      	add	r3, r2
 80151a6:	00db      	lsls	r3, r3, #3
 80151a8:	440b      	add	r3, r1
 80151aa:	3314      	adds	r3, #20
 80151ac:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d10f      	bne.n	80151d2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80151b2:	79fa      	ldrb	r2, [r7, #7]
 80151b4:	4932      	ldr	r1, [pc, #200]	; (8015280 <etharp_tmr+0x14c>)
 80151b6:	4613      	mov	r3, r2
 80151b8:	005b      	lsls	r3, r3, #1
 80151ba:	4413      	add	r3, r2
 80151bc:	00db      	lsls	r3, r3, #3
 80151be:	440b      	add	r3, r1
 80151c0:	3312      	adds	r3, #18
 80151c2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80151c4:	2b04      	cmp	r3, #4
 80151c6:	d904      	bls.n	80151d2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80151c8:	79fb      	ldrb	r3, [r7, #7]
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7ff ff80 	bl	80150d0 <etharp_free_entry>
 80151d0:	e04a      	b.n	8015268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80151d2:	79fa      	ldrb	r2, [r7, #7]
 80151d4:	492a      	ldr	r1, [pc, #168]	; (8015280 <etharp_tmr+0x14c>)
 80151d6:	4613      	mov	r3, r2
 80151d8:	005b      	lsls	r3, r3, #1
 80151da:	4413      	add	r3, r2
 80151dc:	00db      	lsls	r3, r3, #3
 80151de:	440b      	add	r3, r1
 80151e0:	3314      	adds	r3, #20
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	2b03      	cmp	r3, #3
 80151e6:	d10a      	bne.n	80151fe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80151e8:	79fa      	ldrb	r2, [r7, #7]
 80151ea:	4925      	ldr	r1, [pc, #148]	; (8015280 <etharp_tmr+0x14c>)
 80151ec:	4613      	mov	r3, r2
 80151ee:	005b      	lsls	r3, r3, #1
 80151f0:	4413      	add	r3, r2
 80151f2:	00db      	lsls	r3, r3, #3
 80151f4:	440b      	add	r3, r1
 80151f6:	3314      	adds	r3, #20
 80151f8:	2204      	movs	r2, #4
 80151fa:	701a      	strb	r2, [r3, #0]
 80151fc:	e034      	b.n	8015268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80151fe:	79fa      	ldrb	r2, [r7, #7]
 8015200:	491f      	ldr	r1, [pc, #124]	; (8015280 <etharp_tmr+0x14c>)
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	440b      	add	r3, r1
 801520c:	3314      	adds	r3, #20
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	2b04      	cmp	r3, #4
 8015212:	d10a      	bne.n	801522a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015214:	79fa      	ldrb	r2, [r7, #7]
 8015216:	491a      	ldr	r1, [pc, #104]	; (8015280 <etharp_tmr+0x14c>)
 8015218:	4613      	mov	r3, r2
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	440b      	add	r3, r1
 8015222:	3314      	adds	r3, #20
 8015224:	2202      	movs	r2, #2
 8015226:	701a      	strb	r2, [r3, #0]
 8015228:	e01e      	b.n	8015268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801522a:	79fa      	ldrb	r2, [r7, #7]
 801522c:	4914      	ldr	r1, [pc, #80]	; (8015280 <etharp_tmr+0x14c>)
 801522e:	4613      	mov	r3, r2
 8015230:	005b      	lsls	r3, r3, #1
 8015232:	4413      	add	r3, r2
 8015234:	00db      	lsls	r3, r3, #3
 8015236:	440b      	add	r3, r1
 8015238:	3314      	adds	r3, #20
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	2b01      	cmp	r3, #1
 801523e:	d113      	bne.n	8015268 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015240:	79fa      	ldrb	r2, [r7, #7]
 8015242:	490f      	ldr	r1, [pc, #60]	; (8015280 <etharp_tmr+0x14c>)
 8015244:	4613      	mov	r3, r2
 8015246:	005b      	lsls	r3, r3, #1
 8015248:	4413      	add	r3, r2
 801524a:	00db      	lsls	r3, r3, #3
 801524c:	440b      	add	r3, r1
 801524e:	3308      	adds	r3, #8
 8015250:	6818      	ldr	r0, [r3, #0]
 8015252:	79fa      	ldrb	r2, [r7, #7]
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	4a08      	ldr	r2, [pc, #32]	; (8015280 <etharp_tmr+0x14c>)
 801525e:	4413      	add	r3, r2
 8015260:	3304      	adds	r3, #4
 8015262:	4619      	mov	r1, r3
 8015264:	f000 fe3c 	bl	8015ee0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015268:	79fb      	ldrb	r3, [r7, #7]
 801526a:	3301      	adds	r3, #1
 801526c:	71fb      	strb	r3, [r7, #7]
 801526e:	79fb      	ldrb	r3, [r7, #7]
 8015270:	2b09      	cmp	r3, #9
 8015272:	f67f af65 	bls.w	8015140 <etharp_tmr+0xc>
      }
    }
  }
}
 8015276:	bf00      	nop
 8015278:	3708      	adds	r7, #8
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	20004100 	.word	0x20004100

08015284 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b088      	sub	sp, #32
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	460b      	mov	r3, r1
 801528e:	607a      	str	r2, [r7, #4]
 8015290:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015292:	230a      	movs	r3, #10
 8015294:	77fb      	strb	r3, [r7, #31]
 8015296:	230a      	movs	r3, #10
 8015298:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801529a:	230a      	movs	r3, #10
 801529c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80152a2:	230a      	movs	r3, #10
 80152a4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80152a6:	2300      	movs	r3, #0
 80152a8:	833b      	strh	r3, [r7, #24]
 80152aa:	2300      	movs	r3, #0
 80152ac:	82fb      	strh	r3, [r7, #22]
 80152ae:	2300      	movs	r3, #0
 80152b0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152b2:	2300      	movs	r3, #0
 80152b4:	773b      	strb	r3, [r7, #28]
 80152b6:	e093      	b.n	80153e0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80152b8:	7f3a      	ldrb	r2, [r7, #28]
 80152ba:	4990      	ldr	r1, [pc, #576]	; (80154fc <etharp_find_entry+0x278>)
 80152bc:	4613      	mov	r3, r2
 80152be:	005b      	lsls	r3, r3, #1
 80152c0:	4413      	add	r3, r2
 80152c2:	00db      	lsls	r3, r3, #3
 80152c4:	440b      	add	r3, r1
 80152c6:	3314      	adds	r3, #20
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80152cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80152d0:	2b0a      	cmp	r3, #10
 80152d2:	d105      	bne.n	80152e0 <etharp_find_entry+0x5c>
 80152d4:	7cfb      	ldrb	r3, [r7, #19]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d102      	bne.n	80152e0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80152da:	7f3b      	ldrb	r3, [r7, #28]
 80152dc:	777b      	strb	r3, [r7, #29]
 80152de:	e07c      	b.n	80153da <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80152e0:	7cfb      	ldrb	r3, [r7, #19]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d079      	beq.n	80153da <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80152e6:	7cfb      	ldrb	r3, [r7, #19]
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d009      	beq.n	8015300 <etharp_find_entry+0x7c>
 80152ec:	7cfb      	ldrb	r3, [r7, #19]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d806      	bhi.n	8015300 <etharp_find_entry+0x7c>
 80152f2:	4b83      	ldr	r3, [pc, #524]	; (8015500 <etharp_find_entry+0x27c>)
 80152f4:	f44f 7293 	mov.w	r2, #294	; 0x126
 80152f8:	4982      	ldr	r1, [pc, #520]	; (8015504 <etharp_find_entry+0x280>)
 80152fa:	4883      	ldr	r0, [pc, #524]	; (8015508 <etharp_find_entry+0x284>)
 80152fc:	f002 fa84 	bl	8017808 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00f      	beq.n	8015326 <etharp_find_entry+0xa2>
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	6819      	ldr	r1, [r3, #0]
 801530a:	7f3a      	ldrb	r2, [r7, #28]
 801530c:	487b      	ldr	r0, [pc, #492]	; (80154fc <etharp_find_entry+0x278>)
 801530e:	4613      	mov	r3, r2
 8015310:	005b      	lsls	r3, r3, #1
 8015312:	4413      	add	r3, r2
 8015314:	00db      	lsls	r3, r3, #3
 8015316:	4403      	add	r3, r0
 8015318:	3304      	adds	r3, #4
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4299      	cmp	r1, r3
 801531e:	d102      	bne.n	8015326 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015320:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015324:	e0e5      	b.n	80154f2 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015326:	7cfb      	ldrb	r3, [r7, #19]
 8015328:	2b01      	cmp	r3, #1
 801532a:	d13b      	bne.n	80153a4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801532c:	7f3a      	ldrb	r2, [r7, #28]
 801532e:	4973      	ldr	r1, [pc, #460]	; (80154fc <etharp_find_entry+0x278>)
 8015330:	4613      	mov	r3, r2
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	4413      	add	r3, r2
 8015336:	00db      	lsls	r3, r3, #3
 8015338:	440b      	add	r3, r1
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d018      	beq.n	8015372 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8015340:	7f3a      	ldrb	r2, [r7, #28]
 8015342:	496e      	ldr	r1, [pc, #440]	; (80154fc <etharp_find_entry+0x278>)
 8015344:	4613      	mov	r3, r2
 8015346:	005b      	lsls	r3, r3, #1
 8015348:	4413      	add	r3, r2
 801534a:	00db      	lsls	r3, r3, #3
 801534c:	440b      	add	r3, r1
 801534e:	3312      	adds	r3, #18
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	8b3a      	ldrh	r2, [r7, #24]
 8015354:	429a      	cmp	r2, r3
 8015356:	d840      	bhi.n	80153da <etharp_find_entry+0x156>
            old_queue = i;
 8015358:	7f3b      	ldrb	r3, [r7, #28]
 801535a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801535c:	7f3a      	ldrb	r2, [r7, #28]
 801535e:	4967      	ldr	r1, [pc, #412]	; (80154fc <etharp_find_entry+0x278>)
 8015360:	4613      	mov	r3, r2
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	4413      	add	r3, r2
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	440b      	add	r3, r1
 801536a:	3312      	adds	r3, #18
 801536c:	881b      	ldrh	r3, [r3, #0]
 801536e:	833b      	strh	r3, [r7, #24]
 8015370:	e033      	b.n	80153da <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015372:	7f3a      	ldrb	r2, [r7, #28]
 8015374:	4961      	ldr	r1, [pc, #388]	; (80154fc <etharp_find_entry+0x278>)
 8015376:	4613      	mov	r3, r2
 8015378:	005b      	lsls	r3, r3, #1
 801537a:	4413      	add	r3, r2
 801537c:	00db      	lsls	r3, r3, #3
 801537e:	440b      	add	r3, r1
 8015380:	3312      	adds	r3, #18
 8015382:	881b      	ldrh	r3, [r3, #0]
 8015384:	8afa      	ldrh	r2, [r7, #22]
 8015386:	429a      	cmp	r2, r3
 8015388:	d827      	bhi.n	80153da <etharp_find_entry+0x156>
            old_pending = i;
 801538a:	7f3b      	ldrb	r3, [r7, #28]
 801538c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801538e:	7f3a      	ldrb	r2, [r7, #28]
 8015390:	495a      	ldr	r1, [pc, #360]	; (80154fc <etharp_find_entry+0x278>)
 8015392:	4613      	mov	r3, r2
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	4413      	add	r3, r2
 8015398:	00db      	lsls	r3, r3, #3
 801539a:	440b      	add	r3, r1
 801539c:	3312      	adds	r3, #18
 801539e:	881b      	ldrh	r3, [r3, #0]
 80153a0:	82fb      	strh	r3, [r7, #22]
 80153a2:	e01a      	b.n	80153da <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80153a4:	7cfb      	ldrb	r3, [r7, #19]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d917      	bls.n	80153da <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80153aa:	7f3a      	ldrb	r2, [r7, #28]
 80153ac:	4953      	ldr	r1, [pc, #332]	; (80154fc <etharp_find_entry+0x278>)
 80153ae:	4613      	mov	r3, r2
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	4413      	add	r3, r2
 80153b4:	00db      	lsls	r3, r3, #3
 80153b6:	440b      	add	r3, r1
 80153b8:	3312      	adds	r3, #18
 80153ba:	881b      	ldrh	r3, [r3, #0]
 80153bc:	8aba      	ldrh	r2, [r7, #20]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d80b      	bhi.n	80153da <etharp_find_entry+0x156>
            old_stable = i;
 80153c2:	7f3b      	ldrb	r3, [r7, #28]
 80153c4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80153c6:	7f3a      	ldrb	r2, [r7, #28]
 80153c8:	494c      	ldr	r1, [pc, #304]	; (80154fc <etharp_find_entry+0x278>)
 80153ca:	4613      	mov	r3, r2
 80153cc:	005b      	lsls	r3, r3, #1
 80153ce:	4413      	add	r3, r2
 80153d0:	00db      	lsls	r3, r3, #3
 80153d2:	440b      	add	r3, r1
 80153d4:	3312      	adds	r3, #18
 80153d6:	881b      	ldrh	r3, [r3, #0]
 80153d8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153da:	7f3b      	ldrb	r3, [r7, #28]
 80153dc:	3301      	adds	r3, #1
 80153de:	773b      	strb	r3, [r7, #28]
 80153e0:	7f3b      	ldrb	r3, [r7, #28]
 80153e2:	2b09      	cmp	r3, #9
 80153e4:	f67f af68 	bls.w	80152b8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80153e8:	7afb      	ldrb	r3, [r7, #11]
 80153ea:	f003 0302 	and.w	r3, r3, #2
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d108      	bne.n	8015404 <etharp_find_entry+0x180>
 80153f2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80153f6:	2b0a      	cmp	r3, #10
 80153f8:	d107      	bne.n	801540a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80153fa:	7afb      	ldrb	r3, [r7, #11]
 80153fc:	f003 0301 	and.w	r3, r3, #1
 8015400:	2b00      	cmp	r3, #0
 8015402:	d102      	bne.n	801540a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8015404:	f04f 33ff 	mov.w	r3, #4294967295
 8015408:	e073      	b.n	80154f2 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801540a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801540e:	2b09      	cmp	r3, #9
 8015410:	dc02      	bgt.n	8015418 <etharp_find_entry+0x194>
    i = empty;
 8015412:	7f7b      	ldrb	r3, [r7, #29]
 8015414:	773b      	strb	r3, [r7, #28]
 8015416:	e036      	b.n	8015486 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015418:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801541c:	2b09      	cmp	r3, #9
 801541e:	dc13      	bgt.n	8015448 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8015420:	7fbb      	ldrb	r3, [r7, #30]
 8015422:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015424:	7f3a      	ldrb	r2, [r7, #28]
 8015426:	4935      	ldr	r1, [pc, #212]	; (80154fc <etharp_find_entry+0x278>)
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	440b      	add	r3, r1
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d018      	beq.n	801546a <etharp_find_entry+0x1e6>
 8015438:	4b31      	ldr	r3, [pc, #196]	; (8015500 <etharp_find_entry+0x27c>)
 801543a:	f240 126f 	movw	r2, #367	; 0x16f
 801543e:	4933      	ldr	r1, [pc, #204]	; (801550c <etharp_find_entry+0x288>)
 8015440:	4831      	ldr	r0, [pc, #196]	; (8015508 <etharp_find_entry+0x284>)
 8015442:	f002 f9e1 	bl	8017808 <iprintf>
 8015446:	e010      	b.n	801546a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015448:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801544c:	2b09      	cmp	r3, #9
 801544e:	dc02      	bgt.n	8015456 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8015450:	7ffb      	ldrb	r3, [r7, #31]
 8015452:	773b      	strb	r3, [r7, #28]
 8015454:	e009      	b.n	801546a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015456:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801545a:	2b09      	cmp	r3, #9
 801545c:	dc02      	bgt.n	8015464 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801545e:	7efb      	ldrb	r3, [r7, #27]
 8015460:	773b      	strb	r3, [r7, #28]
 8015462:	e002      	b.n	801546a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8015464:	f04f 33ff 	mov.w	r3, #4294967295
 8015468:	e043      	b.n	80154f2 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801546a:	7f3b      	ldrb	r3, [r7, #28]
 801546c:	2b09      	cmp	r3, #9
 801546e:	d906      	bls.n	801547e <etharp_find_entry+0x1fa>
 8015470:	4b23      	ldr	r3, [pc, #140]	; (8015500 <etharp_find_entry+0x27c>)
 8015472:	f240 1281 	movw	r2, #385	; 0x181
 8015476:	4926      	ldr	r1, [pc, #152]	; (8015510 <etharp_find_entry+0x28c>)
 8015478:	4823      	ldr	r0, [pc, #140]	; (8015508 <etharp_find_entry+0x284>)
 801547a:	f002 f9c5 	bl	8017808 <iprintf>
    etharp_free_entry(i);
 801547e:	7f3b      	ldrb	r3, [r7, #28]
 8015480:	4618      	mov	r0, r3
 8015482:	f7ff fe25 	bl	80150d0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015486:	7f3b      	ldrb	r3, [r7, #28]
 8015488:	2b09      	cmp	r3, #9
 801548a:	d906      	bls.n	801549a <etharp_find_entry+0x216>
 801548c:	4b1c      	ldr	r3, [pc, #112]	; (8015500 <etharp_find_entry+0x27c>)
 801548e:	f240 1285 	movw	r2, #389	; 0x185
 8015492:	491f      	ldr	r1, [pc, #124]	; (8015510 <etharp_find_entry+0x28c>)
 8015494:	481c      	ldr	r0, [pc, #112]	; (8015508 <etharp_find_entry+0x284>)
 8015496:	f002 f9b7 	bl	8017808 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801549a:	7f3a      	ldrb	r2, [r7, #28]
 801549c:	4917      	ldr	r1, [pc, #92]	; (80154fc <etharp_find_entry+0x278>)
 801549e:	4613      	mov	r3, r2
 80154a0:	005b      	lsls	r3, r3, #1
 80154a2:	4413      	add	r3, r2
 80154a4:	00db      	lsls	r3, r3, #3
 80154a6:	440b      	add	r3, r1
 80154a8:	3314      	adds	r3, #20
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d006      	beq.n	80154be <etharp_find_entry+0x23a>
 80154b0:	4b13      	ldr	r3, [pc, #76]	; (8015500 <etharp_find_entry+0x27c>)
 80154b2:	f240 1287 	movw	r2, #391	; 0x187
 80154b6:	4917      	ldr	r1, [pc, #92]	; (8015514 <etharp_find_entry+0x290>)
 80154b8:	4813      	ldr	r0, [pc, #76]	; (8015508 <etharp_find_entry+0x284>)
 80154ba:	f002 f9a5 	bl	8017808 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d00a      	beq.n	80154da <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80154c4:	7f3a      	ldrb	r2, [r7, #28]
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	6819      	ldr	r1, [r3, #0]
 80154ca:	480c      	ldr	r0, [pc, #48]	; (80154fc <etharp_find_entry+0x278>)
 80154cc:	4613      	mov	r3, r2
 80154ce:	005b      	lsls	r3, r3, #1
 80154d0:	4413      	add	r3, r2
 80154d2:	00db      	lsls	r3, r3, #3
 80154d4:	4403      	add	r3, r0
 80154d6:	3304      	adds	r3, #4
 80154d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80154da:	7f3a      	ldrb	r2, [r7, #28]
 80154dc:	4907      	ldr	r1, [pc, #28]	; (80154fc <etharp_find_entry+0x278>)
 80154de:	4613      	mov	r3, r2
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	4413      	add	r3, r2
 80154e4:	00db      	lsls	r3, r3, #3
 80154e6:	440b      	add	r3, r1
 80154e8:	3312      	adds	r3, #18
 80154ea:	2200      	movs	r2, #0
 80154ec:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80154ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3720      	adds	r7, #32
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	20004100 	.word	0x20004100
 8015500:	0801a49c 	.word	0x0801a49c
 8015504:	0801a4f8 	.word	0x0801a4f8
 8015508:	0801a538 	.word	0x0801a538
 801550c:	0801a560 	.word	0x0801a560
 8015510:	0801a578 	.word	0x0801a578
 8015514:	0801a58c 	.word	0x0801a58c

08015518 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b088      	sub	sp, #32
 801551c:	af02      	add	r7, sp, #8
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
 8015524:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801552c:	2b06      	cmp	r3, #6
 801552e:	d006      	beq.n	801553e <etharp_update_arp_entry+0x26>
 8015530:	4b48      	ldr	r3, [pc, #288]	; (8015654 <etharp_update_arp_entry+0x13c>)
 8015532:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015536:	4948      	ldr	r1, [pc, #288]	; (8015658 <etharp_update_arp_entry+0x140>)
 8015538:	4848      	ldr	r0, [pc, #288]	; (801565c <etharp_update_arp_entry+0x144>)
 801553a:	f002 f965 	bl	8017808 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d012      	beq.n	801556a <etharp_update_arp_entry+0x52>
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d00e      	beq.n	801556a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	68f9      	ldr	r1, [r7, #12]
 8015552:	4618      	mov	r0, r3
 8015554:	f001 f8fc 	bl	8016750 <ip4_addr_isbroadcast_u32>
 8015558:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801555a:	2b00      	cmp	r3, #0
 801555c:	d105      	bne.n	801556a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015566:	2be0      	cmp	r3, #224	; 0xe0
 8015568:	d102      	bne.n	8015570 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801556a:	f06f 030f 	mvn.w	r3, #15
 801556e:	e06c      	b.n	801564a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015570:	78fb      	ldrb	r3, [r7, #3]
 8015572:	68fa      	ldr	r2, [r7, #12]
 8015574:	4619      	mov	r1, r3
 8015576:	68b8      	ldr	r0, [r7, #8]
 8015578:	f7ff fe84 	bl	8015284 <etharp_find_entry>
 801557c:	4603      	mov	r3, r0
 801557e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015584:	2b00      	cmp	r3, #0
 8015586:	da02      	bge.n	801558e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801558c:	e05d      	b.n	801564a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801558e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015592:	4933      	ldr	r1, [pc, #204]	; (8015660 <etharp_update_arp_entry+0x148>)
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	440b      	add	r3, r1
 801559e:	3314      	adds	r3, #20
 80155a0:	2202      	movs	r2, #2
 80155a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80155a4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80155a8:	492d      	ldr	r1, [pc, #180]	; (8015660 <etharp_update_arp_entry+0x148>)
 80155aa:	4613      	mov	r3, r2
 80155ac:	005b      	lsls	r3, r3, #1
 80155ae:	4413      	add	r3, r2
 80155b0:	00db      	lsls	r3, r3, #3
 80155b2:	440b      	add	r3, r1
 80155b4:	3308      	adds	r3, #8
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80155ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	3308      	adds	r3, #8
 80155c8:	4a25      	ldr	r2, [pc, #148]	; (8015660 <etharp_update_arp_entry+0x148>)
 80155ca:	4413      	add	r3, r2
 80155cc:	3304      	adds	r3, #4
 80155ce:	2206      	movs	r2, #6
 80155d0:	6879      	ldr	r1, [r7, #4]
 80155d2:	4618      	mov	r0, r3
 80155d4:	f002 f905 	bl	80177e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80155d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80155dc:	4920      	ldr	r1, [pc, #128]	; (8015660 <etharp_update_arp_entry+0x148>)
 80155de:	4613      	mov	r3, r2
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	4413      	add	r3, r2
 80155e4:	00db      	lsls	r3, r3, #3
 80155e6:	440b      	add	r3, r1
 80155e8:	3312      	adds	r3, #18
 80155ea:	2200      	movs	r2, #0
 80155ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80155ee:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80155f2:	491b      	ldr	r1, [pc, #108]	; (8015660 <etharp_update_arp_entry+0x148>)
 80155f4:	4613      	mov	r3, r2
 80155f6:	005b      	lsls	r3, r3, #1
 80155f8:	4413      	add	r3, r2
 80155fa:	00db      	lsls	r3, r3, #3
 80155fc:	440b      	add	r3, r1
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d021      	beq.n	8015648 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015604:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015608:	4915      	ldr	r1, [pc, #84]	; (8015660 <etharp_update_arp_entry+0x148>)
 801560a:	4613      	mov	r3, r2
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	4413      	add	r3, r2
 8015610:	00db      	lsls	r3, r3, #3
 8015612:	440b      	add	r3, r1
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015618:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801561c:	4910      	ldr	r1, [pc, #64]	; (8015660 <etharp_update_arp_entry+0x148>)
 801561e:	4613      	mov	r3, r2
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	4413      	add	r3, r2
 8015624:	00db      	lsls	r3, r3, #3
 8015626:	440b      	add	r3, r1
 8015628:	2200      	movs	r2, #0
 801562a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8015632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6939      	ldr	r1, [r7, #16]
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f001 ff29 	bl	8017494 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015642:	6938      	ldr	r0, [r7, #16]
 8015644:	f7f8 fb3e 	bl	800dcc4 <pbuf_free>
  }
  return ERR_OK;
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	3718      	adds	r7, #24
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	0801a49c 	.word	0x0801a49c
 8015658:	0801a5b8 	.word	0x0801a5b8
 801565c:	0801a538 	.word	0x0801a538
 8015660:	20004100 	.word	0x20004100

08015664 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801566c:	2300      	movs	r3, #0
 801566e:	73fb      	strb	r3, [r7, #15]
 8015670:	e01f      	b.n	80156b2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8015672:	7bfa      	ldrb	r2, [r7, #15]
 8015674:	4912      	ldr	r1, [pc, #72]	; (80156c0 <etharp_cleanup_netif+0x5c>)
 8015676:	4613      	mov	r3, r2
 8015678:	005b      	lsls	r3, r3, #1
 801567a:	4413      	add	r3, r2
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	440b      	add	r3, r1
 8015680:	3314      	adds	r3, #20
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015686:	7bbb      	ldrb	r3, [r7, #14]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00f      	beq.n	80156ac <etharp_cleanup_netif+0x48>
 801568c:	7bfa      	ldrb	r2, [r7, #15]
 801568e:	490c      	ldr	r1, [pc, #48]	; (80156c0 <etharp_cleanup_netif+0x5c>)
 8015690:	4613      	mov	r3, r2
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	4413      	add	r3, r2
 8015696:	00db      	lsls	r3, r3, #3
 8015698:	440b      	add	r3, r1
 801569a:	3308      	adds	r3, #8
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d103      	bne.n	80156ac <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80156a4:	7bfb      	ldrb	r3, [r7, #15]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7ff fd12 	bl	80150d0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156ac:	7bfb      	ldrb	r3, [r7, #15]
 80156ae:	3301      	adds	r3, #1
 80156b0:	73fb      	strb	r3, [r7, #15]
 80156b2:	7bfb      	ldrb	r3, [r7, #15]
 80156b4:	2b09      	cmp	r3, #9
 80156b6:	d9dc      	bls.n	8015672 <etharp_cleanup_netif+0xe>
    }
  }
}
 80156b8:	bf00      	nop
 80156ba:	3710      	adds	r7, #16
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	20004100 	.word	0x20004100

080156c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80156c4:	b5b0      	push	{r4, r5, r7, lr}
 80156c6:	b08a      	sub	sp, #40	; 0x28
 80156c8:	af04      	add	r7, sp, #16
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d107      	bne.n	80156e4 <etharp_input+0x20>
 80156d4:	4b3f      	ldr	r3, [pc, #252]	; (80157d4 <etharp_input+0x110>)
 80156d6:	f44f 7222 	mov.w	r2, #648	; 0x288
 80156da:	493f      	ldr	r1, [pc, #252]	; (80157d8 <etharp_input+0x114>)
 80156dc:	483f      	ldr	r0, [pc, #252]	; (80157dc <etharp_input+0x118>)
 80156de:	f002 f893 	bl	8017808 <iprintf>
 80156e2:	e074      	b.n	80157ce <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	881b      	ldrh	r3, [r3, #0]
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156f4:	d10c      	bne.n	8015710 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80156fa:	2b06      	cmp	r3, #6
 80156fc:	d108      	bne.n	8015710 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015702:	2b04      	cmp	r3, #4
 8015704:	d104      	bne.n	8015710 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	885b      	ldrh	r3, [r3, #2]
 801570a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801570c:	2b08      	cmp	r3, #8
 801570e:	d003      	beq.n	8015718 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7f8 fad7 	bl	800dcc4 <pbuf_free>
    return;
 8015716:	e05a      	b.n	80157ce <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	330e      	adds	r3, #14
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	3318      	adds	r3, #24
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	3304      	adds	r3, #4
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d102      	bne.n	8015738 <etharp_input+0x74>
    for_us = 0;
 8015732:	2300      	movs	r3, #0
 8015734:	75fb      	strb	r3, [r7, #23]
 8015736:	e009      	b.n	801574c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015738:	68ba      	ldr	r2, [r7, #8]
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	3304      	adds	r3, #4
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	429a      	cmp	r2, r3
 8015742:	bf0c      	ite	eq
 8015744:	2301      	moveq	r3, #1
 8015746:	2300      	movne	r3, #0
 8015748:	b2db      	uxtb	r3, r3
 801574a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	f103 0208 	add.w	r2, r3, #8
 8015752:	7dfb      	ldrb	r3, [r7, #23]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d001      	beq.n	801575c <etharp_input+0x98>
 8015758:	2301      	movs	r3, #1
 801575a:	e000      	b.n	801575e <etharp_input+0x9a>
 801575c:	2302      	movs	r3, #2
 801575e:	f107 010c 	add.w	r1, r7, #12
 8015762:	6838      	ldr	r0, [r7, #0]
 8015764:	f7ff fed8 	bl	8015518 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	88db      	ldrh	r3, [r3, #6]
 801576c:	b29b      	uxth	r3, r3
 801576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015772:	d003      	beq.n	801577c <etharp_input+0xb8>
 8015774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015778:	d01e      	beq.n	80157b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801577a:	e025      	b.n	80157c8 <etharp_input+0x104>
    if (for_us) {
 801577c:	7dfb      	ldrb	r3, [r7, #23]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d021      	beq.n	80157c6 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8015798:	693a      	ldr	r2, [r7, #16]
 801579a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801579c:	2102      	movs	r1, #2
 801579e:	9103      	str	r1, [sp, #12]
 80157a0:	f107 010c 	add.w	r1, r7, #12
 80157a4:	9102      	str	r1, [sp, #8]
 80157a6:	9201      	str	r2, [sp, #4]
 80157a8:	9300      	str	r3, [sp, #0]
 80157aa:	462b      	mov	r3, r5
 80157ac:	4622      	mov	r2, r4
 80157ae:	4601      	mov	r1, r0
 80157b0:	6838      	ldr	r0, [r7, #0]
 80157b2:	f000 fae7 	bl	8015d84 <etharp_raw>
    break;
 80157b6:	e006      	b.n	80157c6 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80157b8:	f107 030c 	add.w	r3, r7, #12
 80157bc:	4619      	mov	r1, r3
 80157be:	6838      	ldr	r0, [r7, #0]
 80157c0:	f7fe f980 	bl	8013ac4 <dhcp_arp_reply>
    break;
 80157c4:	e000      	b.n	80157c8 <etharp_input+0x104>
    break;
 80157c6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7f8 fa7b 	bl	800dcc4 <pbuf_free>
}
 80157ce:	3718      	adds	r7, #24
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bdb0      	pop	{r4, r5, r7, pc}
 80157d4:	0801a49c 	.word	0x0801a49c
 80157d8:	0801a610 	.word	0x0801a610
 80157dc:	0801a538 	.word	0x0801a538

080157e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b086      	sub	sp, #24
 80157e4:	af02      	add	r7, sp, #8
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	4613      	mov	r3, r2
 80157ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80157ee:	79fa      	ldrb	r2, [r7, #7]
 80157f0:	4944      	ldr	r1, [pc, #272]	; (8015904 <etharp_output_to_arp_index+0x124>)
 80157f2:	4613      	mov	r3, r2
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	4413      	add	r3, r2
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	3314      	adds	r3, #20
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	2b01      	cmp	r3, #1
 8015802:	d806      	bhi.n	8015812 <etharp_output_to_arp_index+0x32>
 8015804:	4b40      	ldr	r3, [pc, #256]	; (8015908 <etharp_output_to_arp_index+0x128>)
 8015806:	f240 22ed 	movw	r2, #749	; 0x2ed
 801580a:	4940      	ldr	r1, [pc, #256]	; (801590c <etharp_output_to_arp_index+0x12c>)
 801580c:	4840      	ldr	r0, [pc, #256]	; (8015910 <etharp_output_to_arp_index+0x130>)
 801580e:	f001 fffb 	bl	8017808 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015812:	79fa      	ldrb	r2, [r7, #7]
 8015814:	493b      	ldr	r1, [pc, #236]	; (8015904 <etharp_output_to_arp_index+0x124>)
 8015816:	4613      	mov	r3, r2
 8015818:	005b      	lsls	r3, r3, #1
 801581a:	4413      	add	r3, r2
 801581c:	00db      	lsls	r3, r3, #3
 801581e:	440b      	add	r3, r1
 8015820:	3314      	adds	r3, #20
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	2b02      	cmp	r3, #2
 8015826:	d153      	bne.n	80158d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015828:	79fa      	ldrb	r2, [r7, #7]
 801582a:	4936      	ldr	r1, [pc, #216]	; (8015904 <etharp_output_to_arp_index+0x124>)
 801582c:	4613      	mov	r3, r2
 801582e:	005b      	lsls	r3, r3, #1
 8015830:	4413      	add	r3, r2
 8015832:	00db      	lsls	r3, r3, #3
 8015834:	440b      	add	r3, r1
 8015836:	3312      	adds	r3, #18
 8015838:	881b      	ldrh	r3, [r3, #0]
 801583a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801583e:	d919      	bls.n	8015874 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015840:	79fa      	ldrb	r2, [r7, #7]
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	4a2e      	ldr	r2, [pc, #184]	; (8015904 <etharp_output_to_arp_index+0x124>)
 801584c:	4413      	add	r3, r2
 801584e:	3304      	adds	r3, #4
 8015850:	4619      	mov	r1, r3
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f000 fb44 	bl	8015ee0 <etharp_request>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d138      	bne.n	80158d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801585e:	79fa      	ldrb	r2, [r7, #7]
 8015860:	4928      	ldr	r1, [pc, #160]	; (8015904 <etharp_output_to_arp_index+0x124>)
 8015862:	4613      	mov	r3, r2
 8015864:	005b      	lsls	r3, r3, #1
 8015866:	4413      	add	r3, r2
 8015868:	00db      	lsls	r3, r3, #3
 801586a:	440b      	add	r3, r1
 801586c:	3314      	adds	r3, #20
 801586e:	2203      	movs	r2, #3
 8015870:	701a      	strb	r2, [r3, #0]
 8015872:	e02d      	b.n	80158d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015874:	79fa      	ldrb	r2, [r7, #7]
 8015876:	4923      	ldr	r1, [pc, #140]	; (8015904 <etharp_output_to_arp_index+0x124>)
 8015878:	4613      	mov	r3, r2
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	4413      	add	r3, r2
 801587e:	00db      	lsls	r3, r3, #3
 8015880:	440b      	add	r3, r1
 8015882:	3312      	adds	r3, #18
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801588a:	d321      	bcc.n	80158d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801588c:	79fa      	ldrb	r2, [r7, #7]
 801588e:	4613      	mov	r3, r2
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	4413      	add	r3, r2
 8015894:	00db      	lsls	r3, r3, #3
 8015896:	4a1b      	ldr	r2, [pc, #108]	; (8015904 <etharp_output_to_arp_index+0x124>)
 8015898:	4413      	add	r3, r2
 801589a:	1d19      	adds	r1, r3, #4
 801589c:	79fa      	ldrb	r2, [r7, #7]
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	00db      	lsls	r3, r3, #3
 80158a6:	3308      	adds	r3, #8
 80158a8:	4a16      	ldr	r2, [pc, #88]	; (8015904 <etharp_output_to_arp_index+0x124>)
 80158aa:	4413      	add	r3, r2
 80158ac:	3304      	adds	r3, #4
 80158ae:	461a      	mov	r2, r3
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f000 faf3 	bl	8015e9c <etharp_request_dst>
 80158b6:	4603      	mov	r3, r0
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d109      	bne.n	80158d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158bc:	79fa      	ldrb	r2, [r7, #7]
 80158be:	4911      	ldr	r1, [pc, #68]	; (8015904 <etharp_output_to_arp_index+0x124>)
 80158c0:	4613      	mov	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	4413      	add	r3, r2
 80158c6:	00db      	lsls	r3, r3, #3
 80158c8:	440b      	add	r3, r1
 80158ca:	3314      	adds	r3, #20
 80158cc:	2203      	movs	r2, #3
 80158ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80158d6:	79fa      	ldrb	r2, [r7, #7]
 80158d8:	4613      	mov	r3, r2
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	4413      	add	r3, r2
 80158de:	00db      	lsls	r3, r3, #3
 80158e0:	3308      	adds	r3, #8
 80158e2:	4a08      	ldr	r2, [pc, #32]	; (8015904 <etharp_output_to_arp_index+0x124>)
 80158e4:	4413      	add	r3, r2
 80158e6:	1d1a      	adds	r2, r3, #4
 80158e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	4613      	mov	r3, r2
 80158f0:	460a      	mov	r2, r1
 80158f2:	68b9      	ldr	r1, [r7, #8]
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f001 fdcd 	bl	8017494 <ethernet_output>
 80158fa:	4603      	mov	r3, r0
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3710      	adds	r7, #16
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	20004100 	.word	0x20004100
 8015908:	0801a49c 	.word	0x0801a49c
 801590c:	0801a630 	.word	0x0801a630
 8015910:	0801a538 	.word	0x0801a538

08015914 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b08a      	sub	sp, #40	; 0x28
 8015918:	af02      	add	r7, sp, #8
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d106      	bne.n	8015938 <etharp_output+0x24>
 801592a:	4b69      	ldr	r3, [pc, #420]	; (8015ad0 <etharp_output+0x1bc>)
 801592c:	f240 321b 	movw	r2, #795	; 0x31b
 8015930:	4968      	ldr	r1, [pc, #416]	; (8015ad4 <etharp_output+0x1c0>)
 8015932:	4869      	ldr	r0, [pc, #420]	; (8015ad8 <etharp_output+0x1c4>)
 8015934:	f001 ff68 	bl	8017808 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d106      	bne.n	801594c <etharp_output+0x38>
 801593e:	4b64      	ldr	r3, [pc, #400]	; (8015ad0 <etharp_output+0x1bc>)
 8015940:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015944:	4965      	ldr	r1, [pc, #404]	; (8015adc <etharp_output+0x1c8>)
 8015946:	4864      	ldr	r0, [pc, #400]	; (8015ad8 <etharp_output+0x1c4>)
 8015948:	f001 ff5e 	bl	8017808 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d106      	bne.n	8015960 <etharp_output+0x4c>
 8015952:	4b5f      	ldr	r3, [pc, #380]	; (8015ad0 <etharp_output+0x1bc>)
 8015954:	f240 321d 	movw	r2, #797	; 0x31d
 8015958:	4961      	ldr	r1, [pc, #388]	; (8015ae0 <etharp_output+0x1cc>)
 801595a:	485f      	ldr	r0, [pc, #380]	; (8015ad8 <etharp_output+0x1c4>)
 801595c:	f001 ff54 	bl	8017808 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	68f9      	ldr	r1, [r7, #12]
 8015966:	4618      	mov	r0, r3
 8015968:	f000 fef2 	bl	8016750 <ip4_addr_isbroadcast_u32>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d002      	beq.n	8015978 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015972:	4b5c      	ldr	r3, [pc, #368]	; (8015ae4 <etharp_output+0x1d0>)
 8015974:	61fb      	str	r3, [r7, #28]
 8015976:	e09b      	b.n	8015ab0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015980:	2be0      	cmp	r3, #224	; 0xe0
 8015982:	d118      	bne.n	80159b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015984:	2301      	movs	r3, #1
 8015986:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015988:	2300      	movs	r3, #0
 801598a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801598c:	235e      	movs	r3, #94	; 0x5e
 801598e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	3301      	adds	r3, #1
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801599a:	b2db      	uxtb	r3, r3
 801599c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	3302      	adds	r3, #2
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	3303      	adds	r3, #3
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80159ae:	f107 0310 	add.w	r3, r7, #16
 80159b2:	61fb      	str	r3, [r7, #28]
 80159b4:	e07c      	b.n	8015ab0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681a      	ldr	r2, [r3, #0]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	3304      	adds	r3, #4
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	405a      	eors	r2, r3
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	3308      	adds	r3, #8
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	4013      	ands	r3, r2
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d012      	beq.n	80159f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80159d8:	4293      	cmp	r3, r2
 80159da:	d00b      	beq.n	80159f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	330c      	adds	r3, #12
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d003      	beq.n	80159ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	330c      	adds	r3, #12
 80159ea:	61bb      	str	r3, [r7, #24]
 80159ec:	e002      	b.n	80159f4 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80159ee:	f06f 0303 	mvn.w	r3, #3
 80159f2:	e069      	b.n	8015ac8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80159f4:	4b3c      	ldr	r3, [pc, #240]	; (8015ae8 <etharp_output+0x1d4>)
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	4619      	mov	r1, r3
 80159fa:	4a3c      	ldr	r2, [pc, #240]	; (8015aec <etharp_output+0x1d8>)
 80159fc:	460b      	mov	r3, r1
 80159fe:	005b      	lsls	r3, r3, #1
 8015a00:	440b      	add	r3, r1
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	4413      	add	r3, r2
 8015a06:	3314      	adds	r3, #20
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d917      	bls.n	8015a3e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	4b35      	ldr	r3, [pc, #212]	; (8015ae8 <etharp_output+0x1d4>)
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	4618      	mov	r0, r3
 8015a18:	4934      	ldr	r1, [pc, #208]	; (8015aec <etharp_output+0x1d8>)
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	005b      	lsls	r3, r3, #1
 8015a1e:	4403      	add	r3, r0
 8015a20:	00db      	lsls	r3, r3, #3
 8015a22:	440b      	add	r3, r1
 8015a24:	3304      	adds	r3, #4
 8015a26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d108      	bne.n	8015a3e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015a2c:	4b2e      	ldr	r3, [pc, #184]	; (8015ae8 <etharp_output+0x1d4>)
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	461a      	mov	r2, r3
 8015a32:	68b9      	ldr	r1, [r7, #8]
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	f7ff fed3 	bl	80157e0 <etharp_output_to_arp_index>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	e044      	b.n	8015ac8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a3e:	2300      	movs	r3, #0
 8015a40:	75fb      	strb	r3, [r7, #23]
 8015a42:	e02a      	b.n	8015a9a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a44:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015a48:	4928      	ldr	r1, [pc, #160]	; (8015aec <etharp_output+0x1d8>)
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	4413      	add	r3, r2
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	440b      	add	r3, r1
 8015a54:	3314      	adds	r3, #20
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d918      	bls.n	8015a8e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015a5c:	69bb      	ldr	r3, [r7, #24]
 8015a5e:	6819      	ldr	r1, [r3, #0]
 8015a60:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015a64:	4821      	ldr	r0, [pc, #132]	; (8015aec <etharp_output+0x1d8>)
 8015a66:	4613      	mov	r3, r2
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	4413      	add	r3, r2
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	4403      	add	r3, r0
 8015a70:	3304      	adds	r3, #4
 8015a72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a74:	4299      	cmp	r1, r3
 8015a76:	d10a      	bne.n	8015a8e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015a78:	7dfa      	ldrb	r2, [r7, #23]
 8015a7a:	4b1b      	ldr	r3, [pc, #108]	; (8015ae8 <etharp_output+0x1d4>)
 8015a7c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015a7e:	7dfb      	ldrb	r3, [r7, #23]
 8015a80:	461a      	mov	r2, r3
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	68f8      	ldr	r0, [r7, #12]
 8015a86:	f7ff feab 	bl	80157e0 <etharp_output_to_arp_index>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	e01c      	b.n	8015ac8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	3301      	adds	r3, #1
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	75fb      	strb	r3, [r7, #23]
 8015a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a9e:	2b09      	cmp	r3, #9
 8015aa0:	ddd0      	ble.n	8015a44 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015aa2:	68ba      	ldr	r2, [r7, #8]
 8015aa4:	69b9      	ldr	r1, [r7, #24]
 8015aa6:	68f8      	ldr	r0, [r7, #12]
 8015aa8:	f000 f822 	bl	8015af0 <etharp_query>
 8015aac:	4603      	mov	r3, r0
 8015aae:	e00b      	b.n	8015ac8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8015ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015aba:	9300      	str	r3, [sp, #0]
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	68b9      	ldr	r1, [r7, #8]
 8015ac0:	68f8      	ldr	r0, [r7, #12]
 8015ac2:	f001 fce7 	bl	8017494 <ethernet_output>
 8015ac6:	4603      	mov	r3, r0
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3720      	adds	r7, #32
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	0801a49c 	.word	0x0801a49c
 8015ad4:	0801a610 	.word	0x0801a610
 8015ad8:	0801a538 	.word	0x0801a538
 8015adc:	0801a660 	.word	0x0801a660
 8015ae0:	0801a600 	.word	0x0801a600
 8015ae4:	0801ad04 	.word	0x0801ad04
 8015ae8:	200041f0 	.word	0x200041f0
 8015aec:	20004100 	.word	0x20004100

08015af0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b08c      	sub	sp, #48	; 0x30
 8015af4:	af02      	add	r7, sp, #8
 8015af6:	60f8      	str	r0, [r7, #12]
 8015af8:	60b9      	str	r1, [r7, #8]
 8015afa:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	3329      	adds	r3, #41	; 0x29
 8015b00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015b02:	23ff      	movs	r3, #255	; 0xff
 8015b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	68f9      	ldr	r1, [r7, #12]
 8015b12:	4618      	mov	r0, r3
 8015b14:	f000 fe1c 	bl	8016750 <ip4_addr_isbroadcast_u32>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d10c      	bne.n	8015b38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b26:	2be0      	cmp	r3, #224	; 0xe0
 8015b28:	d006      	beq.n	8015b38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d003      	beq.n	8015b38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d102      	bne.n	8015b3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b38:	f06f 030f 	mvn.w	r3, #15
 8015b3c:	e10f      	b.n	8015d5e <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015b3e:	68fa      	ldr	r2, [r7, #12]
 8015b40:	2101      	movs	r1, #1
 8015b42:	68b8      	ldr	r0, [r7, #8]
 8015b44:	f7ff fb9e 	bl	8015284 <etharp_find_entry>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8015b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	da02      	bge.n	8015b5a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015b54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b58:	e101      	b.n	8015d5e <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015b5a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015b5e:	4982      	ldr	r1, [pc, #520]	; (8015d68 <etharp_query+0x278>)
 8015b60:	4613      	mov	r3, r2
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	4413      	add	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	440b      	add	r3, r1
 8015b6a:	3314      	adds	r3, #20
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d117      	bne.n	8015ba2 <etharp_query+0xb2>
    is_new_entry = 1;
 8015b72:	2301      	movs	r3, #1
 8015b74:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015b76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015b7a:	497b      	ldr	r1, [pc, #492]	; (8015d68 <etharp_query+0x278>)
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	4413      	add	r3, r2
 8015b82:	00db      	lsls	r3, r3, #3
 8015b84:	440b      	add	r3, r1
 8015b86:	3314      	adds	r3, #20
 8015b88:	2201      	movs	r2, #1
 8015b8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015b8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015b90:	4975      	ldr	r1, [pc, #468]	; (8015d68 <etharp_query+0x278>)
 8015b92:	4613      	mov	r3, r2
 8015b94:	005b      	lsls	r3, r3, #1
 8015b96:	4413      	add	r3, r2
 8015b98:	00db      	lsls	r3, r3, #3
 8015b9a:	440b      	add	r3, r1
 8015b9c:	3308      	adds	r3, #8
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015ba2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015ba6:	4970      	ldr	r1, [pc, #448]	; (8015d68 <etharp_query+0x278>)
 8015ba8:	4613      	mov	r3, r2
 8015baa:	005b      	lsls	r3, r3, #1
 8015bac:	4413      	add	r3, r2
 8015bae:	00db      	lsls	r3, r3, #3
 8015bb0:	440b      	add	r3, r1
 8015bb2:	3314      	adds	r3, #20
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b01      	cmp	r3, #1
 8015bb8:	d012      	beq.n	8015be0 <etharp_query+0xf0>
 8015bba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015bbe:	496a      	ldr	r1, [pc, #424]	; (8015d68 <etharp_query+0x278>)
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	005b      	lsls	r3, r3, #1
 8015bc4:	4413      	add	r3, r2
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	440b      	add	r3, r1
 8015bca:	3314      	adds	r3, #20
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d806      	bhi.n	8015be0 <etharp_query+0xf0>
 8015bd2:	4b66      	ldr	r3, [pc, #408]	; (8015d6c <etharp_query+0x27c>)
 8015bd4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015bd8:	4965      	ldr	r1, [pc, #404]	; (8015d70 <etharp_query+0x280>)
 8015bda:	4866      	ldr	r0, [pc, #408]	; (8015d74 <etharp_query+0x284>)
 8015bdc:	f001 fe14 	bl	8017808 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d102      	bne.n	8015bec <etharp_query+0xfc>
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d10c      	bne.n	8015c06 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015bec:	68b9      	ldr	r1, [r7, #8]
 8015bee:	68f8      	ldr	r0, [r7, #12]
 8015bf0:	f000 f976 	bl	8015ee0 <etharp_request>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d102      	bne.n	8015c06 <etharp_query+0x116>
      return result;
 8015c00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015c04:	e0ab      	b.n	8015d5e <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d106      	bne.n	8015c1a <etharp_query+0x12a>
 8015c0c:	4b57      	ldr	r3, [pc, #348]	; (8015d6c <etharp_query+0x27c>)
 8015c0e:	f240 32db 	movw	r2, #987	; 0x3db
 8015c12:	4959      	ldr	r1, [pc, #356]	; (8015d78 <etharp_query+0x288>)
 8015c14:	4857      	ldr	r0, [pc, #348]	; (8015d74 <etharp_query+0x284>)
 8015c16:	f001 fdf7 	bl	8017808 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015c1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015c1e:	4952      	ldr	r1, [pc, #328]	; (8015d68 <etharp_query+0x278>)
 8015c20:	4613      	mov	r3, r2
 8015c22:	005b      	lsls	r3, r3, #1
 8015c24:	4413      	add	r3, r2
 8015c26:	00db      	lsls	r3, r3, #3
 8015c28:	440b      	add	r3, r1
 8015c2a:	3314      	adds	r3, #20
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d919      	bls.n	8015c66 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8015c32:	7cfa      	ldrb	r2, [r7, #19]
 8015c34:	4b51      	ldr	r3, [pc, #324]	; (8015d7c <etharp_query+0x28c>)
 8015c36:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015c38:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015c3c:	4613      	mov	r3, r2
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	4413      	add	r3, r2
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	3308      	adds	r3, #8
 8015c46:	4a48      	ldr	r2, [pc, #288]	; (8015d68 <etharp_query+0x278>)
 8015c48:	4413      	add	r3, r2
 8015c4a:	1d1a      	adds	r2, r3, #4
 8015c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	4613      	mov	r3, r2
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	6879      	ldr	r1, [r7, #4]
 8015c58:	68f8      	ldr	r0, [r7, #12]
 8015c5a:	f001 fc1b 	bl	8017494 <ethernet_output>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c64:	e079      	b.n	8015d5a <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015c66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015c6a:	493f      	ldr	r1, [pc, #252]	; (8015d68 <etharp_query+0x278>)
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	4413      	add	r3, r2
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	440b      	add	r3, r1
 8015c76:	3314      	adds	r3, #20
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d16d      	bne.n	8015d5a <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c86:	e01a      	b.n	8015cbe <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	895a      	ldrh	r2, [r3, #10]
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	891b      	ldrh	r3, [r3, #8]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d10a      	bne.n	8015caa <etharp_query+0x1ba>
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d006      	beq.n	8015caa <etharp_query+0x1ba>
 8015c9c:	4b33      	ldr	r3, [pc, #204]	; (8015d6c <etharp_query+0x27c>)
 8015c9e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8015ca2:	4937      	ldr	r1, [pc, #220]	; (8015d80 <etharp_query+0x290>)
 8015ca4:	4833      	ldr	r0, [pc, #204]	; (8015d74 <etharp_query+0x284>)
 8015ca6:	f001 fdaf 	bl	8017808 <iprintf>
      if (p->type != PBUF_ROM) {
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	7b1b      	ldrb	r3, [r3, #12]
 8015cae:	2b01      	cmp	r3, #1
 8015cb0:	d002      	beq.n	8015cb8 <etharp_query+0x1c8>
        copy_needed = 1;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	61bb      	str	r3, [r7, #24]
        break;
 8015cb6:	e005      	b.n	8015cc4 <etharp_query+0x1d4>
      }
      p = p->next;
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d1e1      	bne.n	8015c88 <etharp_query+0x198>
    }
    if (copy_needed) {
 8015cc4:	69bb      	ldr	r3, [r7, #24]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d017      	beq.n	8015cfa <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	891b      	ldrh	r3, [r3, #8]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	2002      	movs	r0, #2
 8015cd4:	f7f7 fc84 	bl	800d5e0 <pbuf_alloc>
 8015cd8:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d011      	beq.n	8015d04 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015ce0:	6879      	ldr	r1, [r7, #4]
 8015ce2:	69f8      	ldr	r0, [r7, #28]
 8015ce4:	f7f8 f92e 	bl	800df44 <pbuf_copy>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d00a      	beq.n	8015d04 <etharp_query+0x214>
          pbuf_free(p);
 8015cee:	69f8      	ldr	r0, [r7, #28]
 8015cf0:	f7f7 ffe8 	bl	800dcc4 <pbuf_free>
          p = NULL;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	61fb      	str	r3, [r7, #28]
 8015cf8:	e004      	b.n	8015d04 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015cfe:	69f8      	ldr	r0, [r7, #28]
 8015d00:	f7f8 f892 	bl	800de28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015d04:	69fb      	ldr	r3, [r7, #28]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d024      	beq.n	8015d54 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015d0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015d0e:	4916      	ldr	r1, [pc, #88]	; (8015d68 <etharp_query+0x278>)
 8015d10:	4613      	mov	r3, r2
 8015d12:	005b      	lsls	r3, r3, #1
 8015d14:	4413      	add	r3, r2
 8015d16:	00db      	lsls	r3, r3, #3
 8015d18:	440b      	add	r3, r1
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00b      	beq.n	8015d38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8015d20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015d24:	4910      	ldr	r1, [pc, #64]	; (8015d68 <etharp_query+0x278>)
 8015d26:	4613      	mov	r3, r2
 8015d28:	005b      	lsls	r3, r3, #1
 8015d2a:	4413      	add	r3, r2
 8015d2c:	00db      	lsls	r3, r3, #3
 8015d2e:	440b      	add	r3, r1
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7f7 ffc6 	bl	800dcc4 <pbuf_free>
      }
      arp_table[i].q = p;
 8015d38:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015d3c:	490a      	ldr	r1, [pc, #40]	; (8015d68 <etharp_query+0x278>)
 8015d3e:	4613      	mov	r3, r2
 8015d40:	005b      	lsls	r3, r3, #1
 8015d42:	4413      	add	r3, r2
 8015d44:	00db      	lsls	r3, r3, #3
 8015d46:	440b      	add	r3, r1
 8015d48:	69fa      	ldr	r2, [r7, #28]
 8015d4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d52:	e002      	b.n	8015d5a <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015d54:	23ff      	movs	r3, #255	; 0xff
 8015d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3728      	adds	r7, #40	; 0x28
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	20004100 	.word	0x20004100
 8015d6c:	0801a49c 	.word	0x0801a49c
 8015d70:	0801a66c 	.word	0x0801a66c
 8015d74:	0801a538 	.word	0x0801a538
 8015d78:	0801a660 	.word	0x0801a660
 8015d7c:	200041f0 	.word	0x200041f0
 8015d80:	0801a694 	.word	0x0801a694

08015d84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b08a      	sub	sp, #40	; 0x28
 8015d88:	af02      	add	r7, sp, #8
 8015d8a:	60f8      	str	r0, [r7, #12]
 8015d8c:	60b9      	str	r1, [r7, #8]
 8015d8e:	607a      	str	r2, [r7, #4]
 8015d90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015d92:	2300      	movs	r3, #0
 8015d94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d106      	bne.n	8015daa <etharp_raw+0x26>
 8015d9c:	4b3a      	ldr	r3, [pc, #232]	; (8015e88 <etharp_raw+0x104>)
 8015d9e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8015da2:	493a      	ldr	r1, [pc, #232]	; (8015e8c <etharp_raw+0x108>)
 8015da4:	483a      	ldr	r0, [pc, #232]	; (8015e90 <etharp_raw+0x10c>)
 8015da6:	f001 fd2f 	bl	8017808 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015daa:	2200      	movs	r2, #0
 8015dac:	211c      	movs	r1, #28
 8015dae:	2002      	movs	r0, #2
 8015db0:	f7f7 fc16 	bl	800d5e0 <pbuf_alloc>
 8015db4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015db6:	69bb      	ldr	r3, [r7, #24]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d102      	bne.n	8015dc2 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc0:	e05d      	b.n	8015e7e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	2b1b      	cmp	r3, #27
 8015dc8:	d806      	bhi.n	8015dd8 <etharp_raw+0x54>
 8015dca:	4b2f      	ldr	r3, [pc, #188]	; (8015e88 <etharp_raw+0x104>)
 8015dcc:	f240 4264 	movw	r2, #1124	; 0x464
 8015dd0:	4930      	ldr	r1, [pc, #192]	; (8015e94 <etharp_raw+0x110>)
 8015dd2:	482f      	ldr	r0, [pc, #188]	; (8015e90 <etharp_raw+0x10c>)
 8015dd4:	f001 fd18 	bl	8017808 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015dde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7f6 fd4b 	bl	800c87c <lwip_htons>
 8015de6:	4603      	mov	r3, r0
 8015de8:	461a      	mov	r2, r3
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015df4:	2b06      	cmp	r3, #6
 8015df6:	d006      	beq.n	8015e06 <etharp_raw+0x82>
 8015df8:	4b23      	ldr	r3, [pc, #140]	; (8015e88 <etharp_raw+0x104>)
 8015dfa:	f240 426b 	movw	r2, #1131	; 0x46b
 8015dfe:	4926      	ldr	r1, [pc, #152]	; (8015e98 <etharp_raw+0x114>)
 8015e00:	4823      	ldr	r0, [pc, #140]	; (8015e90 <etharp_raw+0x10c>)
 8015e02:	f001 fd01 	bl	8017808 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	3308      	adds	r3, #8
 8015e0a:	2206      	movs	r2, #6
 8015e0c:	6839      	ldr	r1, [r7, #0]
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f001 fce7 	bl	80177e2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	3312      	adds	r3, #18
 8015e18:	2206      	movs	r2, #6
 8015e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f001 fce0 	bl	80177e2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	330e      	adds	r3, #14
 8015e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e28:	6812      	ldr	r2, [r2, #0]
 8015e2a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	3318      	adds	r3, #24
 8015e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e32:	6812      	ldr	r2, [r2, #0]
 8015e34:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	701a      	strb	r2, [r3, #0]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	f042 0201 	orr.w	r2, r2, #1
 8015e42:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	2200      	movs	r2, #0
 8015e48:	f042 0208 	orr.w	r2, r2, #8
 8015e4c:	709a      	strb	r2, [r3, #2]
 8015e4e:	2200      	movs	r2, #0
 8015e50:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	2206      	movs	r2, #6
 8015e56:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	2204      	movs	r2, #4
 8015e5c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015e5e:	f640 0306 	movw	r3, #2054	; 0x806
 8015e62:	9300      	str	r3, [sp, #0]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	68ba      	ldr	r2, [r7, #8]
 8015e68:	69b9      	ldr	r1, [r7, #24]
 8015e6a:	68f8      	ldr	r0, [r7, #12]
 8015e6c:	f001 fb12 	bl	8017494 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015e70:	69b8      	ldr	r0, [r7, #24]
 8015e72:	f7f7 ff27 	bl	800dcc4 <pbuf_free>
  p = NULL;
 8015e76:	2300      	movs	r3, #0
 8015e78:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3720      	adds	r7, #32
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	0801a49c 	.word	0x0801a49c
 8015e8c:	0801a610 	.word	0x0801a610
 8015e90:	0801a538 	.word	0x0801a538
 8015e94:	0801a6b0 	.word	0x0801a6b0
 8015e98:	0801a6e4 	.word	0x0801a6e4

08015e9c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	af04      	add	r7, sp, #16
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	60b9      	str	r1, [r7, #8]
 8015ea6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015eb8:	2201      	movs	r2, #1
 8015eba:	9203      	str	r2, [sp, #12]
 8015ebc:	68ba      	ldr	r2, [r7, #8]
 8015ebe:	9202      	str	r2, [sp, #8]
 8015ec0:	4a06      	ldr	r2, [pc, #24]	; (8015edc <etharp_request_dst+0x40>)
 8015ec2:	9201      	str	r2, [sp, #4]
 8015ec4:	9300      	str	r3, [sp, #0]
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f7ff ff5a 	bl	8015d84 <etharp_raw>
 8015ed0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3710      	adds	r7, #16
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	0801ad0c 	.word	0x0801ad0c

08015ee0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015eea:	4a05      	ldr	r2, [pc, #20]	; (8015f00 <etharp_request+0x20>)
 8015eec:	6839      	ldr	r1, [r7, #0]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff ffd4 	bl	8015e9c <etharp_request_dst>
 8015ef4:	4603      	mov	r3, r0
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3708      	adds	r7, #8
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	0801ad04 	.word	0x0801ad04

08015f04 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08e      	sub	sp, #56	; 0x38
 8015f08:	af04      	add	r7, sp, #16
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015f0e:	4b7a      	ldr	r3, [pc, #488]	; (80160f8 <icmp_input+0x1f4>)
 8015f10:	689b      	ldr	r3, [r3, #8]
 8015f12:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8015f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	f003 030f 	and.w	r3, r3, #15
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f26:	2b13      	cmp	r3, #19
 8015f28:	f240 80d1 	bls.w	80160ce <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	895b      	ldrh	r3, [r3, #10]
 8015f30:	2b03      	cmp	r3, #3
 8015f32:	f240 80ce 	bls.w	80160d2 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	685b      	ldr	r3, [r3, #4]
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015f40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f000 80bb 	beq.w	80160c0 <icmp_input+0x1bc>
 8015f4a:	2b08      	cmp	r3, #8
 8015f4c:	f040 80bb 	bne.w	80160c6 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015f50:	4b6a      	ldr	r3, [pc, #424]	; (80160fc <icmp_input+0x1f8>)
 8015f52:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f54:	4b68      	ldr	r3, [pc, #416]	; (80160f8 <icmp_input+0x1f4>)
 8015f56:	695b      	ldr	r3, [r3, #20]
 8015f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f5c:	2be0      	cmp	r3, #224	; 0xe0
 8015f5e:	f000 80bf 	beq.w	80160e0 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015f62:	4b65      	ldr	r3, [pc, #404]	; (80160f8 <icmp_input+0x1f4>)
 8015f64:	695a      	ldr	r2, [r3, #20]
 8015f66:	4b64      	ldr	r3, [pc, #400]	; (80160f8 <icmp_input+0x1f4>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	4610      	mov	r0, r2
 8015f6e:	f000 fbef 	bl	8016750 <ip4_addr_isbroadcast_u32>
 8015f72:	4603      	mov	r3, r0
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	f040 80b5 	bne.w	80160e4 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	891b      	ldrh	r3, [r3, #8]
 8015f7e:	2b07      	cmp	r3, #7
 8015f80:	f240 80a9 	bls.w	80160d6 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f86:	330e      	adds	r3, #14
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	b21b      	sxth	r3, r3
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7f7 fe74 	bl	800dc7c <pbuf_header>
 8015f94:	4603      	mov	r3, r0
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d046      	beq.n	8016028 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	891a      	ldrh	r2, [r3, #8]
 8015f9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fa0:	4413      	add	r3, r2
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	2002      	movs	r0, #2
 8015faa:	f7f7 fb19 	bl	800d5e0 <pbuf_alloc>
 8015fae:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	f000 8098 	beq.w	80160e8 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	895b      	ldrh	r3, [r3, #10]
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fc0:	3308      	adds	r3, #8
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d203      	bcs.n	8015fce <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8015fc6:	69b8      	ldr	r0, [r7, #24]
 8015fc8:	f7f7 fe7c 	bl	800dcc4 <pbuf_free>
        goto icmperr;
 8015fcc:	e08d      	b.n	80160ea <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8015fce:	69bb      	ldr	r3, [r7, #24]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f001 fc03 	bl	80177e2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fde:	425b      	negs	r3, r3
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	b21b      	sxth	r3, r3
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	69b8      	ldr	r0, [r7, #24]
 8015fe8:	f7f7 fe48 	bl	800dc7c <pbuf_header>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d009      	beq.n	8016006 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015ff2:	4b43      	ldr	r3, [pc, #268]	; (8016100 <icmp_input+0x1fc>)
 8015ff4:	22af      	movs	r2, #175	; 0xaf
 8015ff6:	4943      	ldr	r1, [pc, #268]	; (8016104 <icmp_input+0x200>)
 8015ff8:	4843      	ldr	r0, [pc, #268]	; (8016108 <icmp_input+0x204>)
 8015ffa:	f001 fc05 	bl	8017808 <iprintf>
        pbuf_free(r);
 8015ffe:	69b8      	ldr	r0, [r7, #24]
 8016000:	f7f7 fe60 	bl	800dcc4 <pbuf_free>
        goto icmperr;
 8016004:	e071      	b.n	80160ea <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8016006:	6879      	ldr	r1, [r7, #4]
 8016008:	69b8      	ldr	r0, [r7, #24]
 801600a:	f7f7 ff9b 	bl	800df44 <pbuf_copy>
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d003      	beq.n	801601c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8016014:	69b8      	ldr	r0, [r7, #24]
 8016016:	f7f7 fe55 	bl	800dcc4 <pbuf_free>
        goto icmperr;
 801601a:	e066      	b.n	80160ea <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f7f7 fe51 	bl	800dcc4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8016022:	69bb      	ldr	r3, [r7, #24]
 8016024:	607b      	str	r3, [r7, #4]
 8016026:	e015      	b.n	8016054 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801602a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801602e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016032:	33f2      	adds	r3, #242	; 0xf2
 8016034:	b29b      	uxth	r3, r3
 8016036:	b21b      	sxth	r3, r3
 8016038:	4619      	mov	r1, r3
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f7f7 fe1e 	bl	800dc7c <pbuf_header>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	d006      	beq.n	8016054 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016046:	4b2e      	ldr	r3, [pc, #184]	; (8016100 <icmp_input+0x1fc>)
 8016048:	22c0      	movs	r2, #192	; 0xc0
 801604a:	4930      	ldr	r1, [pc, #192]	; (801610c <icmp_input+0x208>)
 801604c:	482e      	ldr	r0, [pc, #184]	; (8016108 <icmp_input+0x204>)
 801604e:	f001 fbdb 	bl	8017808 <iprintf>
        goto icmperr;
 8016052:	e04a      	b.n	80160ea <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801605a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801605e:	4619      	mov	r1, r3
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f7f7 fe0b 	bl	800dc7c <pbuf_header>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	d12b      	bne.n	80160c4 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8016072:	69fb      	ldr	r3, [r7, #28]
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801607a:	4b1f      	ldr	r3, [pc, #124]	; (80160f8 <icmp_input+0x1f4>)
 801607c:	691a      	ldr	r2, [r3, #16]
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	2200      	movs	r2, #0
 8016086:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	2200      	movs	r2, #0
 801608c:	709a      	strb	r2, [r3, #2]
 801608e:	2200      	movs	r2, #0
 8016090:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	22ff      	movs	r2, #255	; 0xff
 8016096:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	2200      	movs	r2, #0
 801609c:	729a      	strb	r2, [r3, #10]
 801609e:	2200      	movs	r2, #0
 80160a0:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	9302      	str	r3, [sp, #8]
 80160a6:	2301      	movs	r3, #1
 80160a8:	9301      	str	r3, [sp, #4]
 80160aa:	2300      	movs	r3, #0
 80160ac:	9300      	str	r3, [sp, #0]
 80160ae:	23ff      	movs	r3, #255	; 0xff
 80160b0:	2200      	movs	r2, #0
 80160b2:	69f9      	ldr	r1, [r7, #28]
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 fa79 	bl	80165ac <ip4_output_if>
 80160ba:	4603      	mov	r3, r0
 80160bc:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80160be:	e001      	b.n	80160c4 <icmp_input+0x1c0>
    break;
 80160c0:	bf00      	nop
 80160c2:	e000      	b.n	80160c6 <icmp_input+0x1c2>
    break;
 80160c4:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7f7 fdfc 	bl	800dcc4 <pbuf_free>
  return;
 80160cc:	e011      	b.n	80160f2 <icmp_input+0x1ee>
    goto lenerr;
 80160ce:	bf00      	nop
 80160d0:	e002      	b.n	80160d8 <icmp_input+0x1d4>
    goto lenerr;
 80160d2:	bf00      	nop
 80160d4:	e000      	b.n	80160d8 <icmp_input+0x1d4>
      goto lenerr;
 80160d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7f7 fdf3 	bl	800dcc4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160de:	e008      	b.n	80160f2 <icmp_input+0x1ee>
      goto icmperr;
 80160e0:	bf00      	nop
 80160e2:	e002      	b.n	80160ea <icmp_input+0x1e6>
      goto icmperr;
 80160e4:	bf00      	nop
 80160e6:	e000      	b.n	80160ea <icmp_input+0x1e6>
        goto icmperr;
 80160e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7f7 fdea 	bl	800dcc4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80160f2:	3728      	adds	r7, #40	; 0x28
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	200048b4 	.word	0x200048b4
 80160fc:	200048c8 	.word	0x200048c8
 8016100:	0801a728 	.word	0x0801a728
 8016104:	0801a780 	.word	0x0801a780
 8016108:	0801a7b8 	.word	0x0801a7b8
 801610c:	0801a7e0 	.word	0x0801a7e0

08016110 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	460b      	mov	r3, r1
 801611a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801611c:	78fb      	ldrb	r3, [r7, #3]
 801611e:	461a      	mov	r2, r3
 8016120:	2103      	movs	r1, #3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f000 f814 	bl	8016150 <icmp_send_response>
}
 8016128:	bf00      	nop
 801612a:	3708      	adds	r7, #8
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	460b      	mov	r3, r1
 801613a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801613c:	78fb      	ldrb	r3, [r7, #3]
 801613e:	461a      	mov	r2, r3
 8016140:	210b      	movs	r1, #11
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f000 f804 	bl	8016150 <icmp_send_response>
}
 8016148:	bf00      	nop
 801614a:	3708      	adds	r7, #8
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}

08016150 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b08c      	sub	sp, #48	; 0x30
 8016154:	af04      	add	r7, sp, #16
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	460b      	mov	r3, r1
 801615a:	70fb      	strb	r3, [r7, #3]
 801615c:	4613      	mov	r3, r2
 801615e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016160:	2200      	movs	r2, #0
 8016162:	2124      	movs	r1, #36	; 0x24
 8016164:	2001      	movs	r0, #1
 8016166:	f7f7 fa3b 	bl	800d5e0 <pbuf_alloc>
 801616a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d04c      	beq.n	801620c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	895b      	ldrh	r3, [r3, #10]
 8016176:	2b23      	cmp	r3, #35	; 0x23
 8016178:	d806      	bhi.n	8016188 <icmp_send_response+0x38>
 801617a:	4b26      	ldr	r3, [pc, #152]	; (8016214 <icmp_send_response+0xc4>)
 801617c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016180:	4925      	ldr	r1, [pc, #148]	; (8016218 <icmp_send_response+0xc8>)
 8016182:	4826      	ldr	r0, [pc, #152]	; (801621c <icmp_send_response+0xcc>)
 8016184:	f001 fb40 	bl	8017808 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	78fa      	ldrb	r2, [r7, #3]
 8016198:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	78ba      	ldrb	r2, [r7, #2]
 801619e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	2200      	movs	r2, #0
 80161a4:	711a      	strb	r2, [r3, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	2200      	movs	r2, #0
 80161ae:	719a      	strb	r2, [r3, #6]
 80161b0:	2200      	movs	r2, #0
 80161b2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	f103 0008 	add.w	r0, r3, #8
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	221c      	movs	r2, #28
 80161c2:	4619      	mov	r1, r3
 80161c4:	f001 fb0d 	bl	80177e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80161c8:	69bb      	ldr	r3, [r7, #24]
 80161ca:	68db      	ldr	r3, [r3, #12]
 80161cc:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80161ce:	f107 030c 	add.w	r3, r7, #12
 80161d2:	4618      	mov	r0, r3
 80161d4:	f000 f824 	bl	8016220 <ip4_route>
 80161d8:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d011      	beq.n	8016204 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	2200      	movs	r2, #0
 80161e4:	709a      	strb	r2, [r3, #2]
 80161e6:	2200      	movs	r2, #0
 80161e8:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80161ea:	f107 020c 	add.w	r2, r7, #12
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	9302      	str	r3, [sp, #8]
 80161f2:	2301      	movs	r3, #1
 80161f4:	9301      	str	r3, [sp, #4]
 80161f6:	2300      	movs	r3, #0
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	23ff      	movs	r3, #255	; 0xff
 80161fc:	2100      	movs	r1, #0
 80161fe:	69f8      	ldr	r0, [r7, #28]
 8016200:	f000 f9d4 	bl	80165ac <ip4_output_if>
  }
  pbuf_free(q);
 8016204:	69f8      	ldr	r0, [r7, #28]
 8016206:	f7f7 fd5d 	bl	800dcc4 <pbuf_free>
 801620a:	e000      	b.n	801620e <icmp_send_response+0xbe>
    return;
 801620c:	bf00      	nop
}
 801620e:	3720      	adds	r7, #32
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	0801a728 	.word	0x0801a728
 8016218:	0801a814 	.word	0x0801a814
 801621c:	0801a7b8 	.word	0x0801a7b8

08016220 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016220:	b480      	push	{r7}
 8016222:	b085      	sub	sp, #20
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016228:	4b30      	ldr	r3, [pc, #192]	; (80162ec <ip4_route+0xcc>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	60fb      	str	r3, [r7, #12]
 801622e:	e036      	b.n	801629e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016236:	f003 0301 	and.w	r3, r3, #1
 801623a:	b2db      	uxtb	r3, r3
 801623c:	2b00      	cmp	r3, #0
 801623e:	d02b      	beq.n	8016298 <ip4_route+0x78>
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016246:	089b      	lsrs	r3, r3, #2
 8016248:	f003 0301 	and.w	r3, r3, #1
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b00      	cmp	r3, #0
 8016250:	d022      	beq.n	8016298 <ip4_route+0x78>
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	3304      	adds	r3, #4
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d01d      	beq.n	8016298 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	3304      	adds	r3, #4
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	405a      	eors	r2, r3
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	3308      	adds	r3, #8
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	4013      	ands	r3, r2
 8016270:	2b00      	cmp	r3, #0
 8016272:	d101      	bne.n	8016278 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	e033      	b.n	80162e0 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801627e:	f003 0302 	and.w	r3, r3, #2
 8016282:	2b00      	cmp	r3, #0
 8016284:	d108      	bne.n	8016298 <ip4_route+0x78>
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	330c      	adds	r3, #12
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	429a      	cmp	r2, r3
 8016292:	d101      	bne.n	8016298 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	e023      	b.n	80162e0 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	60fb      	str	r3, [r7, #12]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d1c5      	bne.n	8016230 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80162a4:	4b12      	ldr	r3, [pc, #72]	; (80162f0 <ip4_route+0xd0>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d015      	beq.n	80162d8 <ip4_route+0xb8>
 80162ac:	4b10      	ldr	r3, [pc, #64]	; (80162f0 <ip4_route+0xd0>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80162b4:	f003 0301 	and.w	r3, r3, #1
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00d      	beq.n	80162d8 <ip4_route+0xb8>
 80162bc:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <ip4_route+0xd0>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80162c4:	f003 0304 	and.w	r3, r3, #4
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d005      	beq.n	80162d8 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80162cc:	4b08      	ldr	r3, [pc, #32]	; (80162f0 <ip4_route+0xd0>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	3304      	adds	r3, #4
 80162d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d101      	bne.n	80162dc <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80162d8:	2300      	movs	r3, #0
 80162da:	e001      	b.n	80162e0 <ip4_route+0xc0>
  }

  return netif_default;
 80162dc:	4b04      	ldr	r3, [pc, #16]	; (80162f0 <ip4_route+0xd0>)
 80162de:	681b      	ldr	r3, [r3, #0]
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3714      	adds	r7, #20
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr
 80162ec:	20007980 	.word	0x20007980
 80162f0:	20007984 	.word	0x20007984

080162f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b088      	sub	sp, #32
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80162fe:	2301      	movs	r3, #1
 8016300:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	091b      	lsrs	r3, r3, #4
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b04      	cmp	r3, #4
 8016312:	d004      	beq.n	801631e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7f7 fcd5 	bl	800dcc4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801631a:	2300      	movs	r3, #0
 801631c:	e13e      	b.n	801659c <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	b29b      	uxth	r3, r3
 8016324:	f003 030f 	and.w	r3, r3, #15
 8016328:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801632a:	89fb      	ldrh	r3, [r7, #14]
 801632c:	009b      	lsls	r3, r3, #2
 801632e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	885b      	ldrh	r3, [r3, #2]
 8016334:	b29b      	uxth	r3, r3
 8016336:	4618      	mov	r0, r3
 8016338:	f7f6 faa0 	bl	800c87c <lwip_htons>
 801633c:	4603      	mov	r3, r0
 801633e:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	891b      	ldrh	r3, [r3, #8]
 8016344:	89ba      	ldrh	r2, [r7, #12]
 8016346:	429a      	cmp	r2, r3
 8016348:	d204      	bcs.n	8016354 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 801634a:	89bb      	ldrh	r3, [r7, #12]
 801634c:	4619      	mov	r1, r3
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f7f7 fb44 	bl	800d9dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	895b      	ldrh	r3, [r3, #10]
 8016358:	89fa      	ldrh	r2, [r7, #14]
 801635a:	429a      	cmp	r2, r3
 801635c:	d807      	bhi.n	801636e <ip4_input+0x7a>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	891b      	ldrh	r3, [r3, #8]
 8016362:	89ba      	ldrh	r2, [r7, #12]
 8016364:	429a      	cmp	r2, r3
 8016366:	d802      	bhi.n	801636e <ip4_input+0x7a>
 8016368:	89fb      	ldrh	r3, [r7, #14]
 801636a:	2b13      	cmp	r3, #19
 801636c:	d804      	bhi.n	8016378 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7f7 fca8 	bl	800dcc4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016374:	2300      	movs	r3, #0
 8016376:	e111      	b.n	801659c <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	691b      	ldr	r3, [r3, #16]
 801637c:	4a89      	ldr	r2, [pc, #548]	; (80165a4 <ip4_input+0x2b0>)
 801637e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	4a87      	ldr	r2, [pc, #540]	; (80165a4 <ip4_input+0x2b0>)
 8016386:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016388:	4b86      	ldr	r3, [pc, #536]	; (80165a4 <ip4_input+0x2b0>)
 801638a:	695b      	ldr	r3, [r3, #20]
 801638c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016390:	2be0      	cmp	r3, #224	; 0xe0
 8016392:	d112      	bne.n	80163ba <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801639a:	f003 0301 	and.w	r3, r3, #1
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d007      	beq.n	80163b4 <ip4_input+0xc0>
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	3304      	adds	r3, #4
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d002      	beq.n	80163b4 <ip4_input+0xc0>
      netif = inp;
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	61bb      	str	r3, [r7, #24]
 80163b2:	e041      	b.n	8016438 <ip4_input+0x144>
    } else {
      netif = NULL;
 80163b4:	2300      	movs	r3, #0
 80163b6:	61bb      	str	r3, [r7, #24]
 80163b8:	e03e      	b.n	8016438 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80163ba:	2301      	movs	r3, #1
 80163bc:	613b      	str	r3, [r7, #16]
    netif = inp;
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80163c2:	69bb      	ldr	r3, [r7, #24]
 80163c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80163c8:	f003 0301 	and.w	r3, r3, #1
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d014      	beq.n	80163fc <ip4_input+0x108>
 80163d2:	69bb      	ldr	r3, [r7, #24]
 80163d4:	3304      	adds	r3, #4
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00f      	beq.n	80163fc <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163dc:	4b71      	ldr	r3, [pc, #452]	; (80165a4 <ip4_input+0x2b0>)
 80163de:	695a      	ldr	r2, [r3, #20]
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	3304      	adds	r3, #4
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d026      	beq.n	8016438 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80163ea:	4b6e      	ldr	r3, [pc, #440]	; (80165a4 <ip4_input+0x2b0>)
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	69b9      	ldr	r1, [r7, #24]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f000 f9ad 	bl	8016750 <ip4_addr_isbroadcast_u32>
 80163f6:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d11d      	bne.n	8016438 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d00d      	beq.n	801641e <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016402:	4b68      	ldr	r3, [pc, #416]	; (80165a4 <ip4_input+0x2b0>)
 8016404:	695b      	ldr	r3, [r3, #20]
 8016406:	b2db      	uxtb	r3, r3
 8016408:	2b7f      	cmp	r3, #127	; 0x7f
 801640a:	d102      	bne.n	8016412 <ip4_input+0x11e>
          netif = NULL;
 801640c:	2300      	movs	r3, #0
 801640e:	61bb      	str	r3, [r7, #24]
          break;
 8016410:	e012      	b.n	8016438 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8016412:	2300      	movs	r3, #0
 8016414:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8016416:	4b64      	ldr	r3, [pc, #400]	; (80165a8 <ip4_input+0x2b4>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	61bb      	str	r3, [r7, #24]
 801641c:	e002      	b.n	8016424 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801641e:	69bb      	ldr	r3, [r7, #24]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8016424:	69ba      	ldr	r2, [r7, #24]
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	429a      	cmp	r2, r3
 801642a:	d102      	bne.n	8016432 <ip4_input+0x13e>
        netif = netif->next;
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d1c4      	bne.n	80163c2 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016438:	69bb      	ldr	r3, [r7, #24]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d111      	bne.n	8016462 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801643e:	69fb      	ldr	r3, [r7, #28]
 8016440:	7a5b      	ldrb	r3, [r3, #9]
 8016442:	2b11      	cmp	r3, #17
 8016444:	d10d      	bne.n	8016462 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8016446:	89fb      	ldrh	r3, [r7, #14]
 8016448:	69fa      	ldr	r2, [r7, #28]
 801644a:	4413      	add	r3, r2
 801644c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	885b      	ldrh	r3, [r3, #2]
 8016452:	b29b      	uxth	r3, r3
 8016454:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016458:	d103      	bne.n	8016462 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801645e:	2300      	movs	r3, #0
 8016460:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016462:	697b      	ldr	r3, [r7, #20]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d017      	beq.n	8016498 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016468:	4b4e      	ldr	r3, [pc, #312]	; (80165a4 <ip4_input+0x2b0>)
 801646a:	691b      	ldr	r3, [r3, #16]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d013      	beq.n	8016498 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016470:	4b4c      	ldr	r3, [pc, #304]	; (80165a4 <ip4_input+0x2b0>)
 8016472:	691b      	ldr	r3, [r3, #16]
 8016474:	6839      	ldr	r1, [r7, #0]
 8016476:	4618      	mov	r0, r3
 8016478:	f000 f96a 	bl	8016750 <ip4_addr_isbroadcast_u32>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d105      	bne.n	801648e <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016482:	4b48      	ldr	r3, [pc, #288]	; (80165a4 <ip4_input+0x2b0>)
 8016484:	691b      	ldr	r3, [r3, #16]
 8016486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801648a:	2be0      	cmp	r3, #224	; 0xe0
 801648c:	d104      	bne.n	8016498 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f7f7 fc18 	bl	800dcc4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016494:	2300      	movs	r3, #0
 8016496:	e081      	b.n	801659c <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d104      	bne.n	80164a8 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f7f7 fc10 	bl	800dcc4 <pbuf_free>
    return ERR_OK;
 80164a4:	2300      	movs	r3, #0
 80164a6:	e079      	b.n	801659c <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	88db      	ldrh	r3, [r3, #6]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	461a      	mov	r2, r3
 80164b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80164b4:	4013      	ands	r3, r2
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00b      	beq.n	80164d2 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 fc8e 	bl	8016ddc <ip4_reass>
 80164c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d101      	bne.n	80164cc <ip4_input+0x1d8>
      return ERR_OK;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e067      	b.n	801659c <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80164d2:	4a34      	ldr	r2, [pc, #208]	; (80165a4 <ip4_input+0x2b0>)
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80164d8:	4a32      	ldr	r2, [pc, #200]	; (80165a4 <ip4_input+0x2b0>)
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80164de:	4a31      	ldr	r2, [pc, #196]	; (80165a4 <ip4_input+0x2b0>)
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	f003 030f 	and.w	r3, r3, #15
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	4b2b      	ldr	r3, [pc, #172]	; (80165a4 <ip4_input+0x2b0>)
 80164f6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80164f8:	89fb      	ldrh	r3, [r7, #14]
 80164fa:	425b      	negs	r3, r3
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	b21b      	sxth	r3, r3
 8016500:	4619      	mov	r1, r3
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7f7 fbba 	bl	800dc7c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	7a5b      	ldrb	r3, [r3, #9]
 801650c:	2b06      	cmp	r3, #6
 801650e:	d009      	beq.n	8016524 <ip4_input+0x230>
 8016510:	2b11      	cmp	r3, #17
 8016512:	d002      	beq.n	801651a <ip4_input+0x226>
 8016514:	2b01      	cmp	r3, #1
 8016516:	d00a      	beq.n	801652e <ip4_input+0x23a>
 8016518:	e00e      	b.n	8016538 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801651a:	6839      	ldr	r1, [r7, #0]
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7fc fbd1 	bl	8012cc4 <udp_input>
      break;
 8016522:	e028      	b.n	8016576 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8016524:	6839      	ldr	r1, [r7, #0]
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f7f9 f820 	bl	800f56c <tcp_input>
      break;
 801652c:	e023      	b.n	8016576 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801652e:	6839      	ldr	r1, [r7, #0]
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7ff fce7 	bl	8015f04 <icmp_input>
      break;
 8016536:	e01e      	b.n	8016576 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016538:	4b1a      	ldr	r3, [pc, #104]	; (80165a4 <ip4_input+0x2b0>)
 801653a:	695b      	ldr	r3, [r3, #20]
 801653c:	69b9      	ldr	r1, [r7, #24]
 801653e:	4618      	mov	r0, r3
 8016540:	f000 f906 	bl	8016750 <ip4_addr_isbroadcast_u32>
 8016544:	4603      	mov	r3, r0
 8016546:	2b00      	cmp	r3, #0
 8016548:	d112      	bne.n	8016570 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801654a:	4b16      	ldr	r3, [pc, #88]	; (80165a4 <ip4_input+0x2b0>)
 801654c:	695b      	ldr	r3, [r3, #20]
 801654e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016552:	2be0      	cmp	r3, #224	; 0xe0
 8016554:	d00c      	beq.n	8016570 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f7f7 fb9f 	bl	800dca0 <pbuf_header_force>
        p->payload = iphdr;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	69fa      	ldr	r2, [r7, #28]
 8016566:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016568:	2102      	movs	r1, #2
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f7ff fdd0 	bl	8016110 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f7f7 fba7 	bl	800dcc4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016576:	4b0b      	ldr	r3, [pc, #44]	; (80165a4 <ip4_input+0x2b0>)
 8016578:	2200      	movs	r2, #0
 801657a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801657c:	4b09      	ldr	r3, [pc, #36]	; (80165a4 <ip4_input+0x2b0>)
 801657e:	2200      	movs	r2, #0
 8016580:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016582:	4b08      	ldr	r3, [pc, #32]	; (80165a4 <ip4_input+0x2b0>)
 8016584:	2200      	movs	r2, #0
 8016586:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016588:	4b06      	ldr	r3, [pc, #24]	; (80165a4 <ip4_input+0x2b0>)
 801658a:	2200      	movs	r2, #0
 801658c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801658e:	4b05      	ldr	r3, [pc, #20]	; (80165a4 <ip4_input+0x2b0>)
 8016590:	2200      	movs	r2, #0
 8016592:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016594:	4b03      	ldr	r3, [pc, #12]	; (80165a4 <ip4_input+0x2b0>)
 8016596:	2200      	movs	r2, #0
 8016598:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801659a:	2300      	movs	r3, #0
}
 801659c:	4618      	mov	r0, r3
 801659e:	3720      	adds	r7, #32
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	200048b4 	.word	0x200048b4
 80165a8:	20007980 	.word	0x20007980

080165ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b08a      	sub	sp, #40	; 0x28
 80165b0:	af04      	add	r7, sp, #16
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	607a      	str	r2, [r7, #4]
 80165b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d009      	beq.n	80165d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d003      	beq.n	80165d2 <ip4_output_if+0x26>
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d102      	bne.n	80165d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80165d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d4:	3304      	adds	r3, #4
 80165d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80165d8:	78fa      	ldrb	r2, [r7, #3]
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	9302      	str	r3, [sp, #8]
 80165de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80165e2:	9301      	str	r3, [sp, #4]
 80165e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80165e8:	9300      	str	r3, [sp, #0]
 80165ea:	4613      	mov	r3, r2
 80165ec:	687a      	ldr	r2, [r7, #4]
 80165ee:	6979      	ldr	r1, [r7, #20]
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f000 f805 	bl	8016600 <ip4_output_if_src>
 80165f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3718      	adds	r7, #24
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b088      	sub	sp, #32
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
 801660c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	89db      	ldrh	r3, [r3, #14]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d006      	beq.n	8016624 <ip4_output_if_src+0x24>
 8016616:	4b48      	ldr	r3, [pc, #288]	; (8016738 <ip4_output_if_src+0x138>)
 8016618:	f240 3233 	movw	r2, #819	; 0x333
 801661c:	4947      	ldr	r1, [pc, #284]	; (801673c <ip4_output_if_src+0x13c>)
 801661e:	4848      	ldr	r0, [pc, #288]	; (8016740 <ip4_output_if_src+0x140>)
 8016620:	f001 f8f2 	bl	8017808 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d060      	beq.n	80166ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801662a:	2314      	movs	r3, #20
 801662c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801662e:	2114      	movs	r1, #20
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f7f7 fb23 	bl	800dc7c <pbuf_header>
 8016636:	4603      	mov	r3, r0
 8016638:	2b00      	cmp	r3, #0
 801663a:	d002      	beq.n	8016642 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801663c:	f06f 0301 	mvn.w	r3, #1
 8016640:	e075      	b.n	801672e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	895b      	ldrh	r3, [r3, #10]
 801664c:	2b13      	cmp	r3, #19
 801664e:	d806      	bhi.n	801665e <ip4_output_if_src+0x5e>
 8016650:	4b39      	ldr	r3, [pc, #228]	; (8016738 <ip4_output_if_src+0x138>)
 8016652:	f240 3261 	movw	r2, #865	; 0x361
 8016656:	493b      	ldr	r1, [pc, #236]	; (8016744 <ip4_output_if_src+0x144>)
 8016658:	4839      	ldr	r0, [pc, #228]	; (8016740 <ip4_output_if_src+0x140>)
 801665a:	f001 f8d5 	bl	8017808 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801665e:	69fb      	ldr	r3, [r7, #28]
 8016660:	78fa      	ldrb	r2, [r7, #3]
 8016662:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016664:	69fb      	ldr	r3, [r7, #28]
 8016666:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801666a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	69fb      	ldr	r3, [r7, #28]
 8016672:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016674:	8b7b      	ldrh	r3, [r7, #26]
 8016676:	089b      	lsrs	r3, r3, #2
 8016678:	b29b      	uxth	r3, r3
 801667a:	b2db      	uxtb	r3, r3
 801667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016680:	b2da      	uxtb	r2, r3
 8016682:	69fb      	ldr	r3, [r7, #28]
 8016684:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801668c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	891b      	ldrh	r3, [r3, #8]
 8016692:	4618      	mov	r0, r3
 8016694:	f7f6 f8f2 	bl	800c87c <lwip_htons>
 8016698:	4603      	mov	r3, r0
 801669a:	461a      	mov	r2, r3
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80166a0:	69fb      	ldr	r3, [r7, #28]
 80166a2:	2200      	movs	r2, #0
 80166a4:	719a      	strb	r2, [r3, #6]
 80166a6:	2200      	movs	r2, #0
 80166a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80166aa:	4b27      	ldr	r3, [pc, #156]	; (8016748 <ip4_output_if_src+0x148>)
 80166ac:	881b      	ldrh	r3, [r3, #0]
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7f6 f8e4 	bl	800c87c <lwip_htons>
 80166b4:	4603      	mov	r3, r0
 80166b6:	461a      	mov	r2, r3
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80166bc:	4b22      	ldr	r3, [pc, #136]	; (8016748 <ip4_output_if_src+0x148>)
 80166be:	881b      	ldrh	r3, [r3, #0]
 80166c0:	3301      	adds	r3, #1
 80166c2:	b29a      	uxth	r2, r3
 80166c4:	4b20      	ldr	r3, [pc, #128]	; (8016748 <ip4_output_if_src+0x148>)
 80166c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d104      	bne.n	80166d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80166ce:	4b1f      	ldr	r3, [pc, #124]	; (801674c <ip4_output_if_src+0x14c>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	69fb      	ldr	r3, [r7, #28]
 80166d4:	60da      	str	r2, [r3, #12]
 80166d6:	e003      	b.n	80166e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80166e0:	69fb      	ldr	r3, [r7, #28]
 80166e2:	2200      	movs	r2, #0
 80166e4:	729a      	strb	r2, [r3, #10]
 80166e6:	2200      	movs	r2, #0
 80166e8:	72da      	strb	r2, [r3, #11]
 80166ea:	e008      	b.n	80166fe <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	691b      	ldr	r3, [r3, #16]
 80166f6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80166f8:	f107 0314 	add.w	r3, r7, #20
 80166fc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00c      	beq.n	8016720 <ip4_output_if_src+0x120>
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	891a      	ldrh	r2, [r3, #8]
 801670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801670e:	429a      	cmp	r2, r3
 8016710:	d906      	bls.n	8016720 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8016712:	687a      	ldr	r2, [r7, #4]
 8016714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016716:	68f8      	ldr	r0, [r7, #12]
 8016718:	f000 fd0a 	bl	8017130 <ip4_frag>
 801671c:	4603      	mov	r3, r0
 801671e:	e006      	b.n	801672e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	695b      	ldr	r3, [r3, #20]
 8016724:	687a      	ldr	r2, [r7, #4]
 8016726:	68f9      	ldr	r1, [r7, #12]
 8016728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801672a:	4798      	blx	r3
 801672c:	4603      	mov	r3, r0
}
 801672e:	4618      	mov	r0, r3
 8016730:	3720      	adds	r7, #32
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	0801a840 	.word	0x0801a840
 801673c:	0801a898 	.word	0x0801a898
 8016740:	0801a8a4 	.word	0x0801a8a4
 8016744:	0801a8cc 	.word	0x0801a8cc
 8016748:	200041f2 	.word	0x200041f2
 801674c:	0801acfc 	.word	0x0801acfc

08016750 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016750:	b480      	push	{r7}
 8016752:	b085      	sub	sp, #20
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016764:	d002      	beq.n	801676c <ip4_addr_isbroadcast_u32+0x1c>
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d101      	bne.n	8016770 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801676c:	2301      	movs	r3, #1
 801676e:	e02a      	b.n	80167c6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016776:	f003 0302 	and.w	r3, r3, #2
 801677a:	2b00      	cmp	r3, #0
 801677c:	d101      	bne.n	8016782 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801677e:	2300      	movs	r3, #0
 8016780:	e021      	b.n	80167c6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	3304      	adds	r3, #4
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	429a      	cmp	r2, r3
 801678c:	d101      	bne.n	8016792 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801678e:	2300      	movs	r3, #0
 8016790:	e019      	b.n	80167c6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	3304      	adds	r3, #4
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	405a      	eors	r2, r3
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	3308      	adds	r3, #8
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4013      	ands	r3, r2
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d10d      	bne.n	80167c4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	3308      	adds	r3, #8
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	43da      	mvns	r2, r3
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	3308      	adds	r3, #8
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80167bc:	429a      	cmp	r2, r3
 80167be:	d101      	bne.n	80167c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80167c0:	2301      	movs	r3, #1
 80167c2:	e000      	b.n	80167c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80167c4:	2300      	movs	r3, #0
  }
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
	...

080167d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80167da:	2300      	movs	r3, #0
 80167dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80167de:	4b12      	ldr	r3, [pc, #72]	; (8016828 <ip_reass_tmr+0x54>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80167e4:	e018      	b.n	8016818 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	7fdb      	ldrb	r3, [r3, #31]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d00b      	beq.n	8016806 <ip_reass_tmr+0x32>
      r->timer--;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	7fdb      	ldrb	r3, [r3, #31]
 80167f2:	3b01      	subs	r3, #1
 80167f4:	b2da      	uxtb	r2, r3
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	60fb      	str	r3, [r7, #12]
 8016804:	e008      	b.n	8016818 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016810:	68b9      	ldr	r1, [r7, #8]
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f000 f80a 	bl	801682c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1e3      	bne.n	80167e6 <ip_reass_tmr+0x12>
     }
   }
}
 801681e:	bf00      	nop
 8016820:	3710      	adds	r7, #16
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	200041f4 	.word	0x200041f4

0801682c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b088      	sub	sp, #32
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016836:	2300      	movs	r3, #0
 8016838:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	429a      	cmp	r2, r3
 8016840:	d105      	bne.n	801684e <ip_reass_free_complete_datagram+0x22>
 8016842:	4b45      	ldr	r3, [pc, #276]	; (8016958 <ip_reass_free_complete_datagram+0x12c>)
 8016844:	22ab      	movs	r2, #171	; 0xab
 8016846:	4945      	ldr	r1, [pc, #276]	; (801695c <ip_reass_free_complete_datagram+0x130>)
 8016848:	4845      	ldr	r0, [pc, #276]	; (8016960 <ip_reass_free_complete_datagram+0x134>)
 801684a:	f000 ffdd 	bl	8017808 <iprintf>
  if (prev != NULL) {
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d00a      	beq.n	801686a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	429a      	cmp	r2, r3
 801685c:	d005      	beq.n	801686a <ip_reass_free_complete_datagram+0x3e>
 801685e:	4b3e      	ldr	r3, [pc, #248]	; (8016958 <ip_reass_free_complete_datagram+0x12c>)
 8016860:	22ad      	movs	r2, #173	; 0xad
 8016862:	4940      	ldr	r1, [pc, #256]	; (8016964 <ip_reass_free_complete_datagram+0x138>)
 8016864:	483e      	ldr	r0, [pc, #248]	; (8016960 <ip_reass_free_complete_datagram+0x134>)
 8016866:	f000 ffcf 	bl	8017808 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	889b      	ldrh	r3, [r3, #4]
 8016876:	b29b      	uxth	r3, r3
 8016878:	2b00      	cmp	r3, #0
 801687a:	d12a      	bne.n	80168d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801688a:	69bb      	ldr	r3, [r7, #24]
 801688c:	6858      	ldr	r0, [r3, #4]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	3308      	adds	r3, #8
 8016892:	2214      	movs	r2, #20
 8016894:	4619      	mov	r1, r3
 8016896:	f000 ffa4 	bl	80177e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801689a:	2101      	movs	r1, #1
 801689c:	69b8      	ldr	r0, [r7, #24]
 801689e:	f7ff fc47 	bl	8016130 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80168a2:	69b8      	ldr	r0, [r7, #24]
 80168a4:	f7f7 faa8 	bl	800ddf8 <pbuf_clen>
 80168a8:	4603      	mov	r3, r0
 80168aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80168ac:	8bfa      	ldrh	r2, [r7, #30]
 80168ae:	8a7b      	ldrh	r3, [r7, #18]
 80168b0:	4413      	add	r3, r2
 80168b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168b6:	db05      	blt.n	80168c4 <ip_reass_free_complete_datagram+0x98>
 80168b8:	4b27      	ldr	r3, [pc, #156]	; (8016958 <ip_reass_free_complete_datagram+0x12c>)
 80168ba:	22bc      	movs	r2, #188	; 0xbc
 80168bc:	492a      	ldr	r1, [pc, #168]	; (8016968 <ip_reass_free_complete_datagram+0x13c>)
 80168be:	4828      	ldr	r0, [pc, #160]	; (8016960 <ip_reass_free_complete_datagram+0x134>)
 80168c0:	f000 ffa2 	bl	8017808 <iprintf>
    pbufs_freed += clen;
 80168c4:	8bfa      	ldrh	r2, [r7, #30]
 80168c6:	8a7b      	ldrh	r3, [r7, #18]
 80168c8:	4413      	add	r3, r2
 80168ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80168cc:	69b8      	ldr	r0, [r7, #24]
 80168ce:	f7f7 f9f9 	bl	800dcc4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80168d8:	e01f      	b.n	801691a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80168e0:	69bb      	ldr	r3, [r7, #24]
 80168e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80168ea:	68f8      	ldr	r0, [r7, #12]
 80168ec:	f7f7 fa84 	bl	800ddf8 <pbuf_clen>
 80168f0:	4603      	mov	r3, r0
 80168f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80168f4:	8bfa      	ldrh	r2, [r7, #30]
 80168f6:	8a7b      	ldrh	r3, [r7, #18]
 80168f8:	4413      	add	r3, r2
 80168fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168fe:	db05      	blt.n	801690c <ip_reass_free_complete_datagram+0xe0>
 8016900:	4b15      	ldr	r3, [pc, #84]	; (8016958 <ip_reass_free_complete_datagram+0x12c>)
 8016902:	22cc      	movs	r2, #204	; 0xcc
 8016904:	4918      	ldr	r1, [pc, #96]	; (8016968 <ip_reass_free_complete_datagram+0x13c>)
 8016906:	4816      	ldr	r0, [pc, #88]	; (8016960 <ip_reass_free_complete_datagram+0x134>)
 8016908:	f000 ff7e 	bl	8017808 <iprintf>
    pbufs_freed += clen;
 801690c:	8bfa      	ldrh	r2, [r7, #30]
 801690e:	8a7b      	ldrh	r3, [r7, #18]
 8016910:	4413      	add	r3, r2
 8016912:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016914:	68f8      	ldr	r0, [r7, #12]
 8016916:	f7f7 f9d5 	bl	800dcc4 <pbuf_free>
  while (p != NULL) {
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d1dc      	bne.n	80168da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016920:	6839      	ldr	r1, [r7, #0]
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 f8c2 	bl	8016aac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016928:	4b10      	ldr	r3, [pc, #64]	; (801696c <ip_reass_free_complete_datagram+0x140>)
 801692a:	881b      	ldrh	r3, [r3, #0]
 801692c:	8bfa      	ldrh	r2, [r7, #30]
 801692e:	429a      	cmp	r2, r3
 8016930:	d905      	bls.n	801693e <ip_reass_free_complete_datagram+0x112>
 8016932:	4b09      	ldr	r3, [pc, #36]	; (8016958 <ip_reass_free_complete_datagram+0x12c>)
 8016934:	22d2      	movs	r2, #210	; 0xd2
 8016936:	490e      	ldr	r1, [pc, #56]	; (8016970 <ip_reass_free_complete_datagram+0x144>)
 8016938:	4809      	ldr	r0, [pc, #36]	; (8016960 <ip_reass_free_complete_datagram+0x134>)
 801693a:	f000 ff65 	bl	8017808 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801693e:	4b0b      	ldr	r3, [pc, #44]	; (801696c <ip_reass_free_complete_datagram+0x140>)
 8016940:	881a      	ldrh	r2, [r3, #0]
 8016942:	8bfb      	ldrh	r3, [r7, #30]
 8016944:	1ad3      	subs	r3, r2, r3
 8016946:	b29a      	uxth	r2, r3
 8016948:	4b08      	ldr	r3, [pc, #32]	; (801696c <ip_reass_free_complete_datagram+0x140>)
 801694a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801694c:	8bfb      	ldrh	r3, [r7, #30]
}
 801694e:	4618      	mov	r0, r3
 8016950:	3720      	adds	r7, #32
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	0801a8fc 	.word	0x0801a8fc
 801695c:	0801a958 	.word	0x0801a958
 8016960:	0801a964 	.word	0x0801a964
 8016964:	0801a98c 	.word	0x0801a98c
 8016968:	0801a9a0 	.word	0x0801a9a0
 801696c:	200041f8 	.word	0x200041f8
 8016970:	0801a9c0 	.word	0x0801a9c0

08016974 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b08a      	sub	sp, #40	; 0x28
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
 801697c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801697e:	2300      	movs	r3, #0
 8016980:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016982:	2300      	movs	r3, #0
 8016984:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016986:	2300      	movs	r3, #0
 8016988:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801698a:	2300      	movs	r3, #0
 801698c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801698e:	2300      	movs	r3, #0
 8016990:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016992:	4b28      	ldr	r3, [pc, #160]	; (8016a34 <ip_reass_remove_oldest_datagram+0xc0>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016998:	e030      	b.n	80169fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699c:	695a      	ldr	r2, [r3, #20]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	68db      	ldr	r3, [r3, #12]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d10c      	bne.n	80169c0 <ip_reass_remove_oldest_datagram+0x4c>
 80169a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a8:	699a      	ldr	r2, [r3, #24]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	691b      	ldr	r3, [r3, #16]
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d106      	bne.n	80169c0 <ip_reass_remove_oldest_datagram+0x4c>
 80169b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b4:	899a      	ldrh	r2, [r3, #12]
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	889b      	ldrh	r3, [r3, #4]
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	429a      	cmp	r2, r3
 80169be:	d014      	beq.n	80169ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	3301      	adds	r3, #1
 80169c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80169c6:	6a3b      	ldr	r3, [r7, #32]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d104      	bne.n	80169d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	61bb      	str	r3, [r7, #24]
 80169d4:	e009      	b.n	80169ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80169d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d8:	7fda      	ldrb	r2, [r3, #31]
 80169da:	6a3b      	ldr	r3, [r7, #32]
 80169dc:	7fdb      	ldrb	r3, [r3, #31]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d803      	bhi.n	80169ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80169e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80169ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d001      	beq.n	80169f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80169f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80169f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d1cb      	bne.n	801699a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016a02:	6a3b      	ldr	r3, [r7, #32]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d008      	beq.n	8016a1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016a08:	69b9      	ldr	r1, [r7, #24]
 8016a0a:	6a38      	ldr	r0, [r7, #32]
 8016a0c:	f7ff ff0e 	bl	801682c <ip_reass_free_complete_datagram>
 8016a10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016a12:	697a      	ldr	r2, [r7, #20]
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	4413      	add	r3, r2
 8016a18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016a1a:	697a      	ldr	r2, [r7, #20]
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	da02      	bge.n	8016a28 <ip_reass_remove_oldest_datagram+0xb4>
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	dcac      	bgt.n	8016982 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016a28:	697b      	ldr	r3, [r7, #20]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3728      	adds	r7, #40	; 0x28
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	200041f4 	.word	0x200041f4

08016a38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016a42:	2004      	movs	r0, #4
 8016a44:	f7f6 fb26 	bl	800d094 <memp_malloc>
 8016a48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d110      	bne.n	8016a72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016a50:	6839      	ldr	r1, [r7, #0]
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f7ff ff8e 	bl	8016974 <ip_reass_remove_oldest_datagram>
 8016a58:	4602      	mov	r2, r0
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	dc03      	bgt.n	8016a68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016a60:	2004      	movs	r0, #4
 8016a62:	f7f6 fb17 	bl	800d094 <memp_malloc>
 8016a66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d101      	bne.n	8016a72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	e016      	b.n	8016aa0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016a72:	2220      	movs	r2, #32
 8016a74:	2100      	movs	r1, #0
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f000 febe 	bl	80177f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	2203      	movs	r2, #3
 8016a80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016a82:	4b09      	ldr	r3, [pc, #36]	; (8016aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016a8a:	4a07      	ldr	r2, [pc, #28]	; (8016aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	3308      	adds	r3, #8
 8016a94:	2214      	movs	r2, #20
 8016a96:	6879      	ldr	r1, [r7, #4]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f000 fea2 	bl	80177e2 <memcpy>
  return ipr;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3710      	adds	r7, #16
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	200041f4 	.word	0x200041f4

08016aac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016ab6:	4b10      	ldr	r3, [pc, #64]	; (8016af8 <ip_reass_dequeue_datagram+0x4c>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d104      	bne.n	8016aca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4a0c      	ldr	r2, [pc, #48]	; (8016af8 <ip_reass_dequeue_datagram+0x4c>)
 8016ac6:	6013      	str	r3, [r2, #0]
 8016ac8:	e00d      	b.n	8016ae6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d106      	bne.n	8016ade <ip_reass_dequeue_datagram+0x32>
 8016ad0:	4b0a      	ldr	r3, [pc, #40]	; (8016afc <ip_reass_dequeue_datagram+0x50>)
 8016ad2:	f240 1245 	movw	r2, #325	; 0x145
 8016ad6:	490a      	ldr	r1, [pc, #40]	; (8016b00 <ip_reass_dequeue_datagram+0x54>)
 8016ad8:	480a      	ldr	r0, [pc, #40]	; (8016b04 <ip_reass_dequeue_datagram+0x58>)
 8016ada:	f000 fe95 	bl	8017808 <iprintf>
    prev->next = ipr->next;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016ae6:	6879      	ldr	r1, [r7, #4]
 8016ae8:	2004      	movs	r0, #4
 8016aea:	f7f6 fb49 	bl	800d180 <memp_free>
}
 8016aee:	bf00      	nop
 8016af0:	3708      	adds	r7, #8
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
 8016af6:	bf00      	nop
 8016af8:	200041f4 	.word	0x200041f4
 8016afc:	0801a8fc 	.word	0x0801a8fc
 8016b00:	0801a9dc 	.word	0x0801a9dc
 8016b04:	0801a964 	.word	0x0801a964

08016b08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b08c      	sub	sp, #48	; 0x30
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	60f8      	str	r0, [r7, #12]
 8016b10:	60b9      	str	r1, [r7, #8]
 8016b12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8016b14:	2300      	movs	r3, #0
 8016b16:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016b18:	2301      	movs	r3, #1
 8016b1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	685b      	ldr	r3, [r3, #4]
 8016b20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016b22:	69fb      	ldr	r3, [r7, #28]
 8016b24:	885b      	ldrh	r3, [r3, #2]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f5 fea7 	bl	800c87c <lwip_htons>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	461a      	mov	r2, r3
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	f003 030f 	and.w	r3, r3, #15
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	1ad3      	subs	r3, r2, r3
 8016b44:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	88db      	ldrh	r3, [r3, #6]
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7f5 fe95 	bl	800c87c <lwip_htons>
 8016b52:	4603      	mov	r3, r0
 8016b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b66:	2200      	movs	r2, #0
 8016b68:	701a      	strb	r2, [r3, #0]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	705a      	strb	r2, [r3, #1]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	709a      	strb	r2, [r3, #2]
 8016b72:	2200      	movs	r2, #0
 8016b74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b78:	8b3a      	ldrh	r2, [r7, #24]
 8016b7a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8016b7c:	8b3a      	ldrh	r2, [r7, #24]
 8016b7e:	8b7b      	ldrh	r3, [r7, #26]
 8016b80:	4413      	add	r3, r2
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b86:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b8e:	e061      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8016b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8016b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b98:	889b      	ldrh	r3, [r3, #4]
 8016b9a:	b29a      	uxth	r2, r3
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	889b      	ldrh	r3, [r3, #4]
 8016ba0:	b29b      	uxth	r3, r3
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d232      	bcs.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016baa:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d01f      	beq.n	8016bf2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb4:	889b      	ldrh	r3, [r3, #4]
 8016bb6:	b29a      	uxth	r2, r3
 8016bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bba:	88db      	ldrh	r3, [r3, #6]
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	f0c0 80e3 	bcc.w	8016d8a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8016bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc6:	88db      	ldrh	r3, [r3, #6]
 8016bc8:	b29a      	uxth	r2, r3
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	889b      	ldrh	r3, [r3, #4]
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	f200 80da 	bhi.w	8016d8a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd8:	68ba      	ldr	r2, [r7, #8]
 8016bda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bde:	88db      	ldrh	r3, [r3, #6]
 8016be0:	b29a      	uxth	r2, r3
 8016be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be4:	889b      	ldrh	r3, [r3, #4]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	429a      	cmp	r2, r3
 8016bea:	d037      	beq.n	8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016bec:	2300      	movs	r3, #0
 8016bee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016bf0:	e034      	b.n	8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8016bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf4:	88db      	ldrh	r3, [r3, #6]
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	697b      	ldr	r3, [r7, #20]
 8016bfa:	889b      	ldrh	r3, [r3, #4]
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	f200 80c5 	bhi.w	8016d8e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	68ba      	ldr	r2, [r7, #8]
 8016c08:	605a      	str	r2, [r3, #4]
      break;
 8016c0a:	e027      	b.n	8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0e:	889b      	ldrh	r3, [r3, #4]
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	889b      	ldrh	r3, [r3, #4]
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	f000 80ba 	beq.w	8016d92 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c20:	889b      	ldrh	r3, [r3, #4]
 8016c22:	b29a      	uxth	r2, r3
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	88db      	ldrh	r3, [r3, #6]
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	f0c0 80b3 	bcc.w	8016d96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d009      	beq.n	8016c4a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8016c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c38:	88db      	ldrh	r3, [r3, #6]
 8016c3a:	b29a      	uxth	r2, r3
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	889b      	ldrh	r3, [r3, #4]
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d001      	beq.n	8016c4a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016c46:	2300      	movs	r3, #0
 8016c48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016c4a:	697b      	ldr	r3, [r7, #20]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d19a      	bne.n	8016b90 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016c5a:	e000      	b.n	8016c5e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016c5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d12d      	bne.n	8016cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8016c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d01c      	beq.n	8016ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c6c:	88db      	ldrh	r3, [r3, #6]
 8016c6e:	b29a      	uxth	r2, r3
 8016c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c72:	889b      	ldrh	r3, [r3, #4]
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d906      	bls.n	8016c88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8016c7a:	4b51      	ldr	r3, [pc, #324]	; (8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016c7c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016c80:	4950      	ldr	r1, [pc, #320]	; (8016dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c82:	4851      	ldr	r0, [pc, #324]	; (8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016c84:	f000 fdc0 	bl	8017808 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c8a:	68ba      	ldr	r2, [r7, #8]
 8016c8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c90:	88db      	ldrh	r3, [r3, #6]
 8016c92:	b29a      	uxth	r2, r3
 8016c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c96:	889b      	ldrh	r3, [r3, #4]
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d010      	beq.n	8016cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	623b      	str	r3, [r7, #32]
 8016ca2:	e00d      	b.n	8016cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d006      	beq.n	8016cba <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8016cac:	4b44      	ldr	r3, [pc, #272]	; (8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016cae:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016cb2:	4946      	ldr	r1, [pc, #280]	; (8016dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016cb4:	4844      	ldr	r0, [pc, #272]	; (8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016cb6:	f000 fda7 	bl	8017808 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	68ba      	ldr	r2, [r7, #8]
 8016cbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d105      	bne.n	8016cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	7f9b      	ldrb	r3, [r3, #30]
 8016cca:	f003 0301 	and.w	r3, r3, #1
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d059      	beq.n	8016d86 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8016cd2:	6a3b      	ldr	r3, [r7, #32]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d04f      	beq.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d006      	beq.n	8016cee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	889b      	ldrh	r3, [r3, #4]
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d002      	beq.n	8016cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	623b      	str	r3, [r7, #32]
 8016cf2:	e041      	b.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016cfe:	e012      	b.n	8016d26 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d02:	685b      	ldr	r3, [r3, #4]
 8016d04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d08:	88db      	ldrh	r3, [r3, #6]
 8016d0a:	b29a      	uxth	r2, r3
 8016d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0e:	889b      	ldrh	r3, [r3, #4]
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d002      	beq.n	8016d1c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	623b      	str	r3, [r7, #32]
            break;
 8016d1a:	e007      	b.n	8016d2c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d1e9      	bne.n	8016d00 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016d2c:	6a3b      	ldr	r3, [r7, #32]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d022      	beq.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	685b      	ldr	r3, [r3, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d106      	bne.n	8016d48 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016d3a:	4b21      	ldr	r3, [pc, #132]	; (8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016d3c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016d40:	4923      	ldr	r1, [pc, #140]	; (8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016d42:	4821      	ldr	r0, [pc, #132]	; (8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d44:	f000 fd60 	bl	8017808 <iprintf>
          LWIP_ASSERT("sanity check",
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	685b      	ldr	r3, [r3, #4]
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d106      	bne.n	8016d62 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8016d54:	4b1a      	ldr	r3, [pc, #104]	; (8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016d56:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016d5a:	491d      	ldr	r1, [pc, #116]	; (8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016d5c:	481a      	ldr	r0, [pc, #104]	; (8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d5e:	f000 fd53 	bl	8017808 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d006      	beq.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016d6a:	4b15      	ldr	r3, [pc, #84]	; (8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016d6c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016d70:	4918      	ldr	r1, [pc, #96]	; (8016dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016d72:	4815      	ldr	r0, [pc, #84]	; (8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d74:	f000 fd48 	bl	8017808 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016d78:	6a3b      	ldr	r3, [r7, #32]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	bf14      	ite	ne
 8016d7e:	2301      	movne	r3, #1
 8016d80:	2300      	moveq	r3, #0
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	e018      	b.n	8016db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016d86:	2300      	movs	r3, #0
 8016d88:	e016      	b.n	8016db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8016d8a:	bf00      	nop
 8016d8c:	e004      	b.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8016d8e:	bf00      	nop
 8016d90:	e002      	b.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016d92:	bf00      	nop
 8016d94:	e000      	b.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016d96:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8016d98:	68b8      	ldr	r0, [r7, #8]
 8016d9a:	f7f7 f82d 	bl	800ddf8 <pbuf_clen>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	461a      	mov	r2, r3
 8016da2:	4b0d      	ldr	r3, [pc, #52]	; (8016dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	1a9b      	subs	r3, r3, r2
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	4b0b      	ldr	r3, [pc, #44]	; (8016dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016dac:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8016dae:	68b8      	ldr	r0, [r7, #8]
 8016db0:	f7f6 ff88 	bl	800dcc4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016db4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3730      	adds	r7, #48	; 0x30
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	0801a8fc 	.word	0x0801a8fc
 8016dc4:	0801a9f8 	.word	0x0801a9f8
 8016dc8:	0801a964 	.word	0x0801a964
 8016dcc:	0801aa18 	.word	0x0801aa18
 8016dd0:	0801aa50 	.word	0x0801aa50
 8016dd4:	0801aa60 	.word	0x0801aa60
 8016dd8:	200041f8 	.word	0x200041f8

08016ddc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08e      	sub	sp, #56	; 0x38
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dec:	781b      	ldrb	r3, [r3, #0]
 8016dee:	f003 030f 	and.w	r3, r3, #15
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	2b14      	cmp	r3, #20
 8016df6:	f040 8131 	bne.w	801705c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dfc:	88db      	ldrh	r3, [r3, #6]
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7f5 fd3b 	bl	800c87c <lwip_htons>
 8016e06:	4603      	mov	r3, r0
 8016e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	00db      	lsls	r3, r3, #3
 8016e10:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e14:	885b      	ldrh	r3, [r3, #2]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7f5 fd2f 	bl	800c87c <lwip_htons>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	461a      	mov	r2, r3
 8016e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	b29b      	uxth	r3, r3
 8016e28:	f003 030f 	and.w	r3, r3, #15
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	1ad3      	subs	r3, r2, r3
 8016e34:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f7f6 ffde 	bl	800ddf8 <pbuf_clen>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016e40:	4b8d      	ldr	r3, [pc, #564]	; (8017078 <ip4_reass+0x29c>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	461a      	mov	r2, r3
 8016e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e48:	4413      	add	r3, r2
 8016e4a:	2b0a      	cmp	r3, #10
 8016e4c:	dd10      	ble.n	8016e70 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e50:	4619      	mov	r1, r3
 8016e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e54:	f7ff fd8e 	bl	8016974 <ip_reass_remove_oldest_datagram>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	f000 8100 	beq.w	8017060 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016e60:	4b85      	ldr	r3, [pc, #532]	; (8017078 <ip4_reass+0x29c>)
 8016e62:	881b      	ldrh	r3, [r3, #0]
 8016e64:	461a      	mov	r2, r3
 8016e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e68:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e6a:	2b0a      	cmp	r3, #10
 8016e6c:	f300 80f8 	bgt.w	8017060 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e70:	4b82      	ldr	r3, [pc, #520]	; (801707c <ip4_reass+0x2a0>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	633b      	str	r3, [r7, #48]	; 0x30
 8016e76:	e015      	b.n	8016ea4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7a:	695a      	ldr	r2, [r3, #20]
 8016e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d10c      	bne.n	8016e9e <ip4_reass+0xc2>
 8016e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e86:	699a      	ldr	r2, [r3, #24]
 8016e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8a:	691b      	ldr	r3, [r3, #16]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d106      	bne.n	8016e9e <ip4_reass+0xc2>
 8016e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e92:	899a      	ldrh	r2, [r3, #12]
 8016e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e96:	889b      	ldrh	r3, [r3, #4]
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d006      	beq.n	8016eac <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8016ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d1e6      	bne.n	8016e78 <ip4_reass+0x9c>
 8016eaa:	e000      	b.n	8016eae <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016eac:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d109      	bne.n	8016ec8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016eb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eba:	f7ff fdbd 	bl	8016a38 <ip_reass_enqueue_new_datagram>
 8016ebe:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d11c      	bne.n	8016f00 <ip4_reass+0x124>
      goto nullreturn;
 8016ec6:	e0ce      	b.n	8017066 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eca:	88db      	ldrh	r3, [r3, #6]
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7f5 fcd4 	bl	800c87c <lwip_htons>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d110      	bne.n	8016f00 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee0:	89db      	ldrh	r3, [r3, #14]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7f5 fcca 	bl	800c87c <lwip_htons>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d006      	beq.n	8016f00 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	3308      	adds	r3, #8
 8016ef6:	2214      	movs	r2, #20
 8016ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016efa:	4618      	mov	r0, r3
 8016efc:	f000 fc71 	bl	80177e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f02:	88db      	ldrh	r3, [r3, #6]
 8016f04:	b29b      	uxth	r3, r3
 8016f06:	f003 0320 	and.w	r3, r3, #32
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	bf0c      	ite	eq
 8016f0e:	2301      	moveq	r3, #1
 8016f10:	2300      	movne	r3, #0
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d00e      	beq.n	8016f3a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8016f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f20:	4413      	add	r3, r2
 8016f22:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016f24:	8b7a      	ldrh	r2, [r7, #26]
 8016f26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	f0c0 8099 	bcc.w	8017060 <ip4_reass+0x284>
 8016f2e:	8b7b      	ldrh	r3, [r7, #26]
 8016f30:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016f34:	4293      	cmp	r3, r2
 8016f36:	f200 8093 	bhi.w	8017060 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016f3a:	69fa      	ldr	r2, [r7, #28]
 8016f3c:	6879      	ldr	r1, [r7, #4]
 8016f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f40:	f7ff fde2 	bl	8016b08 <ip_reass_chain_frag_into_datagram_and_validate>
 8016f44:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016f46:	697b      	ldr	r3, [r7, #20]
 8016f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f4c:	f000 808a 	beq.w	8017064 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016f50:	4b49      	ldr	r3, [pc, #292]	; (8017078 <ip4_reass+0x29c>)
 8016f52:	881a      	ldrh	r2, [r3, #0]
 8016f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f56:	4413      	add	r3, r2
 8016f58:	b29a      	uxth	r2, r3
 8016f5a:	4b47      	ldr	r3, [pc, #284]	; (8017078 <ip4_reass+0x29c>)
 8016f5c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d00d      	beq.n	8016f80 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8016f64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f68:	4413      	add	r3, r2
 8016f6a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f6e:	8a7a      	ldrh	r2, [r7, #18]
 8016f70:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f74:	7f9b      	ldrb	r3, [r3, #30]
 8016f76:	f043 0301 	orr.w	r3, r3, #1
 8016f7a:	b2da      	uxtb	r2, r3
 8016f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d168      	bne.n	8017058 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8016f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f88:	8b9b      	ldrh	r3, [r3, #28]
 8016f8a:	3314      	adds	r3, #20
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f90:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8016f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8016f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa6:	3308      	adds	r3, #8
 8016fa8:	2214      	movs	r2, #20
 8016faa:	4619      	mov	r1, r3
 8016fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fae:	f000 fc18 	bl	80177e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb4:	8b9b      	ldrh	r3, [r3, #28]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7f5 fc60 	bl	800c87c <lwip_htons>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	719a      	strb	r2, [r3, #6]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	729a      	strb	r2, [r3, #10]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fda:	685b      	ldr	r3, [r3, #4]
 8016fdc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016fde:	e00e      	b.n	8016ffe <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8016fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8016fe6:	f06f 0113 	mvn.w	r1, #19
 8016fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016fec:	f7f6 fe46 	bl	800dc7c <pbuf_header>
      pbuf_cat(p, r);
 8016ff0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f7f6 ff40 	bl	800de78 <pbuf_cat>
      r = iprh->next_pbuf;
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017000:	2b00      	cmp	r3, #0
 8017002:	d1ed      	bne.n	8016fe0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017004:	4b1d      	ldr	r3, [pc, #116]	; (801707c <ip4_reass+0x2a0>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801700a:	429a      	cmp	r2, r3
 801700c:	d102      	bne.n	8017014 <ip4_reass+0x238>
      ipr_prev = NULL;
 801700e:	2300      	movs	r3, #0
 8017010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017012:	e010      	b.n	8017036 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017014:	4b19      	ldr	r3, [pc, #100]	; (801707c <ip4_reass+0x2a0>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801701a:	e007      	b.n	801702c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017022:	429a      	cmp	r2, r3
 8017024:	d006      	beq.n	8017034 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702e:	2b00      	cmp	r3, #0
 8017030:	d1f4      	bne.n	801701c <ip4_reass+0x240>
 8017032:	e000      	b.n	8017036 <ip4_reass+0x25a>
          break;
 8017034:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801703a:	f7ff fd37 	bl	8016aac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f7f6 feda 	bl	800ddf8 <pbuf_clen>
 8017044:	4603      	mov	r3, r0
 8017046:	461a      	mov	r2, r3
 8017048:	4b0b      	ldr	r3, [pc, #44]	; (8017078 <ip4_reass+0x29c>)
 801704a:	881b      	ldrh	r3, [r3, #0]
 801704c:	1a9b      	subs	r3, r3, r2
 801704e:	b29a      	uxth	r2, r3
 8017050:	4b09      	ldr	r3, [pc, #36]	; (8017078 <ip4_reass+0x29c>)
 8017052:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	e00a      	b.n	801706e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017058:	2300      	movs	r3, #0
 801705a:	e008      	b.n	801706e <ip4_reass+0x292>
    goto nullreturn;
 801705c:	bf00      	nop
 801705e:	e002      	b.n	8017066 <ip4_reass+0x28a>

nullreturn:
 8017060:	bf00      	nop
 8017062:	e000      	b.n	8017066 <ip4_reass+0x28a>
    goto nullreturn;
 8017064:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017066:	6878      	ldr	r0, [r7, #4]
 8017068:	f7f6 fe2c 	bl	800dcc4 <pbuf_free>
  return NULL;
 801706c:	2300      	movs	r3, #0
}
 801706e:	4618      	mov	r0, r3
 8017070:	3738      	adds	r7, #56	; 0x38
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	200041f8 	.word	0x200041f8
 801707c:	200041f4 	.word	0x200041f4

08017080 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8017084:	2005      	movs	r0, #5
 8017086:	f7f6 f805 	bl	800d094 <memp_malloc>
 801708a:	4603      	mov	r3, r0
}
 801708c:	4618      	mov	r0, r3
 801708e:	bd80      	pop	{r7, pc}

08017090 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d106      	bne.n	80170ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801709e:	4b07      	ldr	r3, [pc, #28]	; (80170bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80170a0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80170a4:	4906      	ldr	r1, [pc, #24]	; (80170c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80170a6:	4807      	ldr	r0, [pc, #28]	; (80170c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80170a8:	f000 fbae 	bl	8017808 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80170ac:	6879      	ldr	r1, [r7, #4]
 80170ae:	2005      	movs	r0, #5
 80170b0:	f7f6 f866 	bl	800d180 <memp_free>
}
 80170b4:	bf00      	nop
 80170b6:	3708      	adds	r7, #8
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}
 80170bc:	0801a8fc 	.word	0x0801a8fc
 80170c0:	0801aa84 	.word	0x0801aa84
 80170c4:	0801a964 	.word	0x0801a964

080170c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b084      	sub	sp, #16
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d106      	bne.n	80170e8 <ipfrag_free_pbuf_custom+0x20>
 80170da:	4b11      	ldr	r3, [pc, #68]	; (8017120 <ipfrag_free_pbuf_custom+0x58>)
 80170dc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80170e0:	4910      	ldr	r1, [pc, #64]	; (8017124 <ipfrag_free_pbuf_custom+0x5c>)
 80170e2:	4811      	ldr	r0, [pc, #68]	; (8017128 <ipfrag_free_pbuf_custom+0x60>)
 80170e4:	f000 fb90 	bl	8017808 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d006      	beq.n	80170fe <ipfrag_free_pbuf_custom+0x36>
 80170f0:	4b0b      	ldr	r3, [pc, #44]	; (8017120 <ipfrag_free_pbuf_custom+0x58>)
 80170f2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80170f6:	490d      	ldr	r1, [pc, #52]	; (801712c <ipfrag_free_pbuf_custom+0x64>)
 80170f8:	480b      	ldr	r0, [pc, #44]	; (8017128 <ipfrag_free_pbuf_custom+0x60>)
 80170fa:	f000 fb85 	bl	8017808 <iprintf>
  if (pcr->original != NULL) {
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	695b      	ldr	r3, [r3, #20]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d004      	beq.n	8017110 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	695b      	ldr	r3, [r3, #20]
 801710a:	4618      	mov	r0, r3
 801710c:	f7f6 fdda 	bl	800dcc4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017110:	68f8      	ldr	r0, [r7, #12]
 8017112:	f7ff ffbd 	bl	8017090 <ip_frag_free_pbuf_custom_ref>
}
 8017116:	bf00      	nop
 8017118:	3710      	adds	r7, #16
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	0801a8fc 	.word	0x0801a8fc
 8017124:	0801aa90 	.word	0x0801aa90
 8017128:	0801a964 	.word	0x0801a964
 801712c:	0801aa9c 	.word	0x0801aa9c

08017130 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b092      	sub	sp, #72	; 0x48
 8017134:	af02      	add	r7, sp, #8
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801713c:	2300      	movs	r3, #0
 801713e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017144:	3b14      	subs	r3, #20
 8017146:	2b00      	cmp	r3, #0
 8017148:	da00      	bge.n	801714c <ip4_frag+0x1c>
 801714a:	3307      	adds	r3, #7
 801714c:	10db      	asrs	r3, r3, #3
 801714e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017150:	2314      	movs	r3, #20
 8017152:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	f003 030f 	and.w	r3, r3, #15
 8017166:	009b      	lsls	r3, r3, #2
 8017168:	2b14      	cmp	r3, #20
 801716a:	d009      	beq.n	8017180 <ip4_frag+0x50>
 801716c:	4b79      	ldr	r3, [pc, #484]	; (8017354 <ip4_frag+0x224>)
 801716e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017172:	4979      	ldr	r1, [pc, #484]	; (8017358 <ip4_frag+0x228>)
 8017174:	4879      	ldr	r0, [pc, #484]	; (801735c <ip4_frag+0x22c>)
 8017176:	f000 fb47 	bl	8017808 <iprintf>
 801717a:	f06f 0305 	mvn.w	r3, #5
 801717e:	e0e5      	b.n	801734c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017182:	88db      	ldrh	r3, [r3, #6]
 8017184:	b29b      	uxth	r3, r3
 8017186:	4618      	mov	r0, r3
 8017188:	f7f5 fb78 	bl	800c87c <lwip_htons>
 801718c:	4603      	mov	r3, r0
 801718e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8017190:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017196:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017198:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801719a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d009      	beq.n	80171b6 <ip4_frag+0x86>
 80171a2:	4b6c      	ldr	r3, [pc, #432]	; (8017354 <ip4_frag+0x224>)
 80171a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80171a8:	496d      	ldr	r1, [pc, #436]	; (8017360 <ip4_frag+0x230>)
 80171aa:	486c      	ldr	r0, [pc, #432]	; (801735c <ip4_frag+0x22c>)
 80171ac:	f000 fb2c 	bl	8017808 <iprintf>
 80171b0:	f06f 0305 	mvn.w	r3, #5
 80171b4:	e0ca      	b.n	801734c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	891b      	ldrh	r3, [r3, #8]
 80171ba:	3b14      	subs	r3, #20
 80171bc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80171be:	e0bc      	b.n	801733a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80171c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80171c2:	00da      	lsls	r2, r3, #3
 80171c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171c6:	4293      	cmp	r3, r2
 80171c8:	bfa8      	it	ge
 80171ca:	4613      	movge	r3, r2
 80171cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80171ce:	2200      	movs	r2, #0
 80171d0:	2114      	movs	r1, #20
 80171d2:	2002      	movs	r0, #2
 80171d4:	f7f6 fa04 	bl	800d5e0 <pbuf_alloc>
 80171d8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80171da:	6a3b      	ldr	r3, [r7, #32]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	f000 80b2 	beq.w	8017346 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	895b      	ldrh	r3, [r3, #10]
 80171e6:	2b13      	cmp	r3, #19
 80171e8:	d806      	bhi.n	80171f8 <ip4_frag+0xc8>
 80171ea:	4b5a      	ldr	r3, [pc, #360]	; (8017354 <ip4_frag+0x224>)
 80171ec:	f240 3209 	movw	r2, #777	; 0x309
 80171f0:	495c      	ldr	r1, [pc, #368]	; (8017364 <ip4_frag+0x234>)
 80171f2:	485a      	ldr	r0, [pc, #360]	; (801735c <ip4_frag+0x22c>)
 80171f4:	f000 fb08 	bl	8017808 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80171f8:	6a3b      	ldr	r3, [r7, #32]
 80171fa:	685b      	ldr	r3, [r3, #4]
 80171fc:	2214      	movs	r2, #20
 80171fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017200:	4618      	mov	r0, r3
 8017202:	f000 faee 	bl	80177e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017206:	6a3b      	ldr	r3, [r7, #32]
 8017208:	685b      	ldr	r3, [r3, #4]
 801720a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801720c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801720e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8017210:	e04f      	b.n	80172b2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	895a      	ldrh	r2, [r3, #10]
 8017216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801721c:	8b7a      	ldrh	r2, [r7, #26]
 801721e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017220:	4293      	cmp	r3, r2
 8017222:	bf28      	it	cs
 8017224:	4613      	movcs	r3, r2
 8017226:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801722a:	2b00      	cmp	r3, #0
 801722c:	d105      	bne.n	801723a <ip4_frag+0x10a>
        poff = 0;
 801722e:	2300      	movs	r3, #0
 8017230:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	60fb      	str	r3, [r7, #12]
        continue;
 8017238:	e03b      	b.n	80172b2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801723a:	f7ff ff21 	bl	8017080 <ip_frag_alloc_pbuf_custom_ref>
 801723e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d103      	bne.n	801724e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8017246:	6a38      	ldr	r0, [r7, #32]
 8017248:	f7f6 fd3c 	bl	800dcc4 <pbuf_free>
        goto memerr;
 801724c:	e07c      	b.n	8017348 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801724e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017254:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017256:	4413      	add	r3, r2
 8017258:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801725a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801725c:	9201      	str	r2, [sp, #4]
 801725e:	9300      	str	r3, [sp, #0]
 8017260:	4603      	mov	r3, r0
 8017262:	2202      	movs	r2, #2
 8017264:	2004      	movs	r0, #4
 8017266:	f7f6 fb4f 	bl	800d908 <pbuf_alloced_custom>
 801726a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801726c:	693b      	ldr	r3, [r7, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d106      	bne.n	8017280 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017272:	6978      	ldr	r0, [r7, #20]
 8017274:	f7ff ff0c 	bl	8017090 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017278:	6a38      	ldr	r0, [r7, #32]
 801727a:	f7f6 fd23 	bl	800dcc4 <pbuf_free>
        goto memerr;
 801727e:	e063      	b.n	8017348 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f7f6 fdd1 	bl	800de28 <pbuf_ref>
      pcr->original = p;
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	68fa      	ldr	r2, [r7, #12]
 801728a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	4a36      	ldr	r2, [pc, #216]	; (8017368 <ip4_frag+0x238>)
 8017290:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017292:	6939      	ldr	r1, [r7, #16]
 8017294:	6a38      	ldr	r0, [r7, #32]
 8017296:	f7f6 fdef 	bl	800de78 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801729a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801729c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801729e:	1ad3      	subs	r3, r2, r3
 80172a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80172a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d004      	beq.n	80172b2 <ip4_frag+0x182>
        poff = 0;
 80172a8:	2300      	movs	r3, #0
 80172aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80172b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d1ac      	bne.n	8017212 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80172b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80172ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80172bc:	4413      	add	r3, r2
 80172be:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80172c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80172c6:	3b14      	subs	r3, #20
 80172c8:	429a      	cmp	r2, r3
 80172ca:	bfd4      	ite	le
 80172cc:	2301      	movle	r3, #1
 80172ce:	2300      	movgt	r3, #0
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80172d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80172d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80172da:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d103      	bne.n	80172ea <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80172e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80172e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80172e8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80172ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7f5 fac5 	bl	800c87c <lwip_htons>
 80172f2:	4603      	mov	r3, r0
 80172f4:	461a      	mov	r2, r3
 80172f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80172fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172fc:	3314      	adds	r3, #20
 80172fe:	b29b      	uxth	r3, r3
 8017300:	4618      	mov	r0, r3
 8017302:	f7f5 fabb 	bl	800c87c <lwip_htons>
 8017306:	4603      	mov	r3, r0
 8017308:	461a      	mov	r2, r3
 801730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017310:	2200      	movs	r2, #0
 8017312:	729a      	strb	r2, [r3, #10]
 8017314:	2200      	movs	r2, #0
 8017316:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	695b      	ldr	r3, [r3, #20]
 801731c:	687a      	ldr	r2, [r7, #4]
 801731e:	6a39      	ldr	r1, [r7, #32]
 8017320:	68b8      	ldr	r0, [r7, #8]
 8017322:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017324:	6a38      	ldr	r0, [r7, #32]
 8017326:	f7f6 fccd 	bl	800dcc4 <pbuf_free>
    left -= fragsize;
 801732a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801732c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801732e:	1ad3      	subs	r3, r2, r3
 8017330:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8017332:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017334:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017336:	4413      	add	r3, r2
 8017338:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801733a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801733c:	2b00      	cmp	r3, #0
 801733e:	f47f af3f 	bne.w	80171c0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017342:	2300      	movs	r3, #0
 8017344:	e002      	b.n	801734c <ip4_frag+0x21c>
      goto memerr;
 8017346:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017348:	f04f 33ff 	mov.w	r3, #4294967295
}
 801734c:	4618      	mov	r0, r3
 801734e:	3740      	adds	r7, #64	; 0x40
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	0801a8fc 	.word	0x0801a8fc
 8017358:	0801aaa8 	.word	0x0801aaa8
 801735c:	0801a964 	.word	0x0801a964
 8017360:	0801aad0 	.word	0x0801aad0
 8017364:	0801aaec 	.word	0x0801aaec
 8017368:	080170c9 	.word	0x080170c9

0801736c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b086      	sub	sp, #24
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
 8017374:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8017376:	230e      	movs	r3, #14
 8017378:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	895b      	ldrh	r3, [r3, #10]
 801737e:	2b0e      	cmp	r3, #14
 8017380:	d977      	bls.n	8017472 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	7b1a      	ldrb	r2, [r3, #12]
 801738c:	7b5b      	ldrb	r3, [r3, #13]
 801738e:	021b      	lsls	r3, r3, #8
 8017390:	4313      	orrs	r3, r2
 8017392:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	f003 0301 	and.w	r3, r3, #1
 801739c:	2b00      	cmp	r3, #0
 801739e:	d023      	beq.n	80173e8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80173a0:	693b      	ldr	r3, [r7, #16]
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	2b01      	cmp	r3, #1
 80173a6:	d10f      	bne.n	80173c8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	785b      	ldrb	r3, [r3, #1]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d11b      	bne.n	80173e8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80173b0:	693b      	ldr	r3, [r7, #16]
 80173b2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80173b4:	2b5e      	cmp	r3, #94	; 0x5e
 80173b6:	d117      	bne.n	80173e8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	7b5b      	ldrb	r3, [r3, #13]
 80173bc:	f043 0310 	orr.w	r3, r3, #16
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	735a      	strb	r2, [r3, #13]
 80173c6:	e00f      	b.n	80173e8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80173c8:	693b      	ldr	r3, [r7, #16]
 80173ca:	2206      	movs	r2, #6
 80173cc:	4930      	ldr	r1, [pc, #192]	; (8017490 <ethernet_input+0x124>)
 80173ce:	4618      	mov	r0, r3
 80173d0:	f000 f9f8 	bl	80177c4 <memcmp>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d106      	bne.n	80173e8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	7b5b      	ldrb	r3, [r3, #13]
 80173de:	f043 0308 	orr.w	r3, r3, #8
 80173e2:	b2da      	uxtb	r2, r3
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80173e8:	89fb      	ldrh	r3, [r7, #14]
 80173ea:	2b08      	cmp	r3, #8
 80173ec:	d003      	beq.n	80173f6 <ethernet_input+0x8a>
 80173ee:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80173f2:	d01e      	beq.n	8017432 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80173f4:	e044      	b.n	8017480 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80173fc:	f003 0308 	and.w	r3, r3, #8
 8017400:	2b00      	cmp	r3, #0
 8017402:	d038      	beq.n	8017476 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	895b      	ldrh	r3, [r3, #10]
 8017408:	461a      	mov	r2, r3
 801740a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801740e:	429a      	cmp	r2, r3
 8017410:	db33      	blt.n	801747a <ethernet_input+0x10e>
 8017412:	8afb      	ldrh	r3, [r7, #22]
 8017414:	425b      	negs	r3, r3
 8017416:	b29b      	uxth	r3, r3
 8017418:	b21b      	sxth	r3, r3
 801741a:	4619      	mov	r1, r3
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f7f6 fc2d 	bl	800dc7c <pbuf_header>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d128      	bne.n	801747a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017428:	6839      	ldr	r1, [r7, #0]
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7fe ff62 	bl	80162f4 <ip4_input>
      break;
 8017430:	e01d      	b.n	801746e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017438:	f003 0308 	and.w	r3, r3, #8
 801743c:	2b00      	cmp	r3, #0
 801743e:	d01e      	beq.n	801747e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	895b      	ldrh	r3, [r3, #10]
 8017444:	461a      	mov	r2, r3
 8017446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801744a:	429a      	cmp	r2, r3
 801744c:	db15      	blt.n	801747a <ethernet_input+0x10e>
 801744e:	8afb      	ldrh	r3, [r7, #22]
 8017450:	425b      	negs	r3, r3
 8017452:	b29b      	uxth	r3, r3
 8017454:	b21b      	sxth	r3, r3
 8017456:	4619      	mov	r1, r3
 8017458:	6878      	ldr	r0, [r7, #4]
 801745a:	f7f6 fc0f 	bl	800dc7c <pbuf_header>
 801745e:	4603      	mov	r3, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d10a      	bne.n	801747a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8017464:	6839      	ldr	r1, [r7, #0]
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7fe f92c 	bl	80156c4 <etharp_input>
      break;
 801746c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801746e:	2300      	movs	r3, #0
 8017470:	e00a      	b.n	8017488 <ethernet_input+0x11c>
    goto free_and_return;
 8017472:	bf00      	nop
 8017474:	e004      	b.n	8017480 <ethernet_input+0x114>
        goto free_and_return;
 8017476:	bf00      	nop
 8017478:	e002      	b.n	8017480 <ethernet_input+0x114>

free_and_return:
 801747a:	bf00      	nop
 801747c:	e000      	b.n	8017480 <ethernet_input+0x114>
        goto free_and_return;
 801747e:	bf00      	nop
  pbuf_free(p);
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7f6 fc1f 	bl	800dcc4 <pbuf_free>
  return ERR_OK;
 8017486:	2300      	movs	r3, #0
}
 8017488:	4618      	mov	r0, r3
 801748a:	3718      	adds	r7, #24
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}
 8017490:	0801ad04 	.word	0x0801ad04

08017494 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
 80174a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80174a2:	8c3b      	ldrh	r3, [r7, #32]
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7f5 f9e9 	bl	800c87c <lwip_htons>
 80174aa:	4603      	mov	r3, r0
 80174ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80174ae:	210e      	movs	r1, #14
 80174b0:	68b8      	ldr	r0, [r7, #8]
 80174b2:	f7f6 fbe3 	bl	800dc7c <pbuf_header>
 80174b6:	4603      	mov	r3, r0
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d125      	bne.n	8017508 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	685b      	ldr	r3, [r3, #4]
 80174c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	8afa      	ldrh	r2, [r7, #22]
 80174c6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	2206      	movs	r2, #6
 80174cc:	6839      	ldr	r1, [r7, #0]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f000 f987 	bl	80177e2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	3306      	adds	r3, #6
 80174d8:	2206      	movs	r2, #6
 80174da:	6879      	ldr	r1, [r7, #4]
 80174dc:	4618      	mov	r0, r3
 80174de:	f000 f980 	bl	80177e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174e8:	2b06      	cmp	r3, #6
 80174ea:	d006      	beq.n	80174fa <ethernet_output+0x66>
 80174ec:	4b0a      	ldr	r3, [pc, #40]	; (8017518 <ethernet_output+0x84>)
 80174ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80174f2:	490a      	ldr	r1, [pc, #40]	; (801751c <ethernet_output+0x88>)
 80174f4:	480a      	ldr	r0, [pc, #40]	; (8017520 <ethernet_output+0x8c>)
 80174f6:	f000 f987 	bl	8017808 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	699b      	ldr	r3, [r3, #24]
 80174fe:	68b9      	ldr	r1, [r7, #8]
 8017500:	68f8      	ldr	r0, [r7, #12]
 8017502:	4798      	blx	r3
 8017504:	4603      	mov	r3, r0
 8017506:	e002      	b.n	801750e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017508:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801750a:	f06f 0301 	mvn.w	r3, #1
}
 801750e:	4618      	mov	r0, r3
 8017510:	3718      	adds	r7, #24
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	0801ab0c 	.word	0x0801ab0c
 801751c:	0801ab64 	.word	0x0801ab64
 8017520:	0801ab98 	.word	0x0801ab98

08017524 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b086      	sub	sp, #24
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
 801752c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	60bb      	str	r3, [r7, #8]
 8017532:	2304      	movs	r3, #4
 8017534:	60fb      	str	r3, [r7, #12]
 8017536:	2300      	movs	r3, #0
 8017538:	613b      	str	r3, [r7, #16]
 801753a:	2300      	movs	r3, #0
 801753c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801753e:	f107 0308 	add.w	r3, r7, #8
 8017542:	2100      	movs	r1, #0
 8017544:	4618      	mov	r0, r3
 8017546:	f7f2 fb59 	bl	8009bfc <osMessageCreate>
 801754a:	4602      	mov	r2, r0
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d102      	bne.n	801755e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017558:	f04f 33ff 	mov.w	r3, #4294967295
 801755c:	e000      	b.n	8017560 <sys_mbox_new+0x3c>

  return ERR_OK;
 801755e:	2300      	movs	r3, #0
}
 8017560:	4618      	mov	r0, r3
 8017562:	3718      	adds	r7, #24
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8017572:	bf00      	nop
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	6839      	ldr	r1, [r7, #0]
 801757a:	f04f 32ff 	mov.w	r2, #4294967295
 801757e:	4618      	mov	r0, r3
 8017580:	f7f2 fb66 	bl	8009c50 <osMessagePut>
 8017584:	4603      	mov	r3, r0
 8017586:	2b00      	cmp	r3, #0
 8017588:	d1f4      	bne.n	8017574 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801758a:	bf00      	nop
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b084      	sub	sp, #16
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
 801759a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	6839      	ldr	r1, [r7, #0]
 80175a2:	2200      	movs	r2, #0
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7f2 fb53 	bl	8009c50 <osMessagePut>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d102      	bne.n	80175b6 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80175b0:	2300      	movs	r3, #0
 80175b2:	73fb      	strb	r3, [r7, #15]
 80175b4:	e001      	b.n	80175ba <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80175b6:	23ff      	movs	r3, #255	; 0xff
 80175b8:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80175ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3710      	adds	r7, #16
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b08c      	sub	sp, #48	; 0x30
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	61f8      	str	r0, [r7, #28]
 80175ce:	61b9      	str	r1, [r7, #24]
 80175d0:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80175d2:	f7f2 f985 	bl	80098e0 <osKernelSysTick>
 80175d6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d017      	beq.n	801760e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	6819      	ldr	r1, [r3, #0]
 80175e2:	f107 0320 	add.w	r3, r7, #32
 80175e6:	697a      	ldr	r2, [r7, #20]
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7f2 fb71 	bl	8009cd0 <osMessageGet>

    if(event.status == osEventMessage)
 80175ee:	6a3b      	ldr	r3, [r7, #32]
 80175f0:	2b10      	cmp	r3, #16
 80175f2:	d109      	bne.n	8017608 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80175f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f6:	461a      	mov	r2, r3
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80175fc:	f7f2 f970 	bl	80098e0 <osKernelSysTick>
 8017600:	4602      	mov	r2, r0
 8017602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	e019      	b.n	801763c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017608:	f04f 33ff 	mov.w	r3, #4294967295
 801760c:	e016      	b.n	801763c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	6819      	ldr	r1, [r3, #0]
 8017612:	463b      	mov	r3, r7
 8017614:	f04f 32ff 	mov.w	r2, #4294967295
 8017618:	4618      	mov	r0, r3
 801761a:	f7f2 fb59 	bl	8009cd0 <osMessageGet>
 801761e:	f107 0320 	add.w	r3, r7, #32
 8017622:	463a      	mov	r2, r7
 8017624:	ca07      	ldmia	r2, {r0, r1, r2}
 8017626:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801762c:	461a      	mov	r2, r3
 801762e:	69bb      	ldr	r3, [r7, #24]
 8017630:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017632:	f7f2 f955 	bl	80098e0 <osKernelSysTick>
 8017636:	4602      	mov	r2, r0
 8017638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801763a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801763c:	4618      	mov	r0, r3
 801763e:	3730      	adds	r7, #48	; 0x30
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d101      	bne.n	8017658 <sys_mbox_valid+0x14>
    return 0;
 8017654:	2300      	movs	r3, #0
 8017656:	e000      	b.n	801765a <sys_mbox_valid+0x16>
  else
    return 1;
 8017658:	2301      	movs	r3, #1
}
 801765a:	4618      	mov	r0, r3
 801765c:	370c      	adds	r7, #12
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr
	...

08017668 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801766c:	4803      	ldr	r0, [pc, #12]	; (801767c <sys_init+0x14>)
 801766e:	f7f2 f9a7 	bl	80099c0 <osMutexCreate>
 8017672:	4602      	mov	r2, r0
 8017674:	4b02      	ldr	r3, [pc, #8]	; (8017680 <sys_init+0x18>)
 8017676:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017678:	bf00      	nop
 801767a:	bd80      	pop	{r7, pc}
 801767c:	0801ad14 	.word	0x0801ad14
 8017680:	200079d8 	.word	0x200079d8

08017684 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801768c:	2300      	movs	r3, #0
 801768e:	60bb      	str	r3, [r7, #8]
 8017690:	2300      	movs	r3, #0
 8017692:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017694:	f107 0308 	add.w	r3, r7, #8
 8017698:	4618      	mov	r0, r3
 801769a:	f7f2 f991 	bl	80099c0 <osMutexCreate>
 801769e:	4602      	mov	r2, r0
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d102      	bne.n	80176b2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80176ac:	f04f 33ff 	mov.w	r3, #4294967295
 80176b0:	e000      	b.n	80176b4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80176b2:	2300      	movs	r3, #0
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3710      	adds	r7, #16
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}

080176bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	f04f 31ff 	mov.w	r1, #4294967295
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7f2 f98f 	bl	80099f0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80176d2:	bf00      	nop
 80176d4:	3708      	adds	r7, #8
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}

080176da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80176da:	b580      	push	{r7, lr}
 80176dc:	b082      	sub	sp, #8
 80176de:	af00      	add	r7, sp, #0
 80176e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7f2 f9d0 	bl	8009a8c <osMutexRelease>
}
 80176ec:	bf00      	nop
 80176ee:	3708      	adds	r7, #8
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b08c      	sub	sp, #48	; 0x30
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	60f8      	str	r0, [r7, #12]
 80176fc:	60b9      	str	r1, [r7, #8]
 80176fe:	607a      	str	r2, [r7, #4]
 8017700:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017702:	f107 0314 	add.w	r3, r7, #20
 8017706:	2200      	movs	r2, #0
 8017708:	601a      	str	r2, [r3, #0]
 801770a:	605a      	str	r2, [r3, #4]
 801770c:	609a      	str	r2, [r3, #8]
 801770e:	60da      	str	r2, [r3, #12]
 8017710:	611a      	str	r2, [r3, #16]
 8017712:	615a      	str	r2, [r3, #20]
 8017714:	619a      	str	r2, [r3, #24]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	617b      	str	r3, [r7, #20]
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	61bb      	str	r3, [r7, #24]
 801771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017720:	b21b      	sxth	r3, r3
 8017722:	83bb      	strh	r3, [r7, #28]
 8017724:	683b      	ldr	r3, [r7, #0]
 8017726:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017728:	f107 0314 	add.w	r3, r7, #20
 801772c:	6879      	ldr	r1, [r7, #4]
 801772e:	4618      	mov	r0, r3
 8017730:	f7f2 f8e6 	bl	8009900 <osThreadCreate>
 8017734:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017736:	4618      	mov	r0, r3
 8017738:	3730      	adds	r7, #48	; 0x30
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}
	...

08017740 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017744:	4b04      	ldr	r3, [pc, #16]	; (8017758 <sys_arch_protect+0x18>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	f04f 31ff 	mov.w	r1, #4294967295
 801774c:	4618      	mov	r0, r3
 801774e:	f7f2 f94f 	bl	80099f0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017752:	2301      	movs	r3, #1
}
 8017754:	4618      	mov	r0, r3
 8017756:	bd80      	pop	{r7, pc}
 8017758:	200079d8 	.word	0x200079d8

0801775c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b082      	sub	sp, #8
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017764:	4b04      	ldr	r3, [pc, #16]	; (8017778 <sys_arch_unprotect+0x1c>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	4618      	mov	r0, r3
 801776a:	f7f2 f98f 	bl	8009a8c <osMutexRelease>
}
 801776e:	bf00      	nop
 8017770:	3708      	adds	r7, #8
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop
 8017778:	200079d8 	.word	0x200079d8

0801777c <__libc_init_array>:
 801777c:	b570      	push	{r4, r5, r6, lr}
 801777e:	4e0d      	ldr	r6, [pc, #52]	; (80177b4 <__libc_init_array+0x38>)
 8017780:	4c0d      	ldr	r4, [pc, #52]	; (80177b8 <__libc_init_array+0x3c>)
 8017782:	1ba4      	subs	r4, r4, r6
 8017784:	10a4      	asrs	r4, r4, #2
 8017786:	2500      	movs	r5, #0
 8017788:	42a5      	cmp	r5, r4
 801778a:	d109      	bne.n	80177a0 <__libc_init_array+0x24>
 801778c:	4e0b      	ldr	r6, [pc, #44]	; (80177bc <__libc_init_array+0x40>)
 801778e:	4c0c      	ldr	r4, [pc, #48]	; (80177c0 <__libc_init_array+0x44>)
 8017790:	f000 ff5a 	bl	8018648 <_init>
 8017794:	1ba4      	subs	r4, r4, r6
 8017796:	10a4      	asrs	r4, r4, #2
 8017798:	2500      	movs	r5, #0
 801779a:	42a5      	cmp	r5, r4
 801779c:	d105      	bne.n	80177aa <__libc_init_array+0x2e>
 801779e:	bd70      	pop	{r4, r5, r6, pc}
 80177a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80177a4:	4798      	blx	r3
 80177a6:	3501      	adds	r5, #1
 80177a8:	e7ee      	b.n	8017788 <__libc_init_array+0xc>
 80177aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80177ae:	4798      	blx	r3
 80177b0:	3501      	adds	r5, #1
 80177b2:	e7f2      	b.n	801779a <__libc_init_array+0x1e>
 80177b4:	0801adbc 	.word	0x0801adbc
 80177b8:	0801adbc 	.word	0x0801adbc
 80177bc:	0801adbc 	.word	0x0801adbc
 80177c0:	0801adc0 	.word	0x0801adc0

080177c4 <memcmp>:
 80177c4:	b530      	push	{r4, r5, lr}
 80177c6:	2400      	movs	r4, #0
 80177c8:	42a2      	cmp	r2, r4
 80177ca:	d101      	bne.n	80177d0 <memcmp+0xc>
 80177cc:	2000      	movs	r0, #0
 80177ce:	e007      	b.n	80177e0 <memcmp+0x1c>
 80177d0:	5d03      	ldrb	r3, [r0, r4]
 80177d2:	3401      	adds	r4, #1
 80177d4:	190d      	adds	r5, r1, r4
 80177d6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80177da:	42ab      	cmp	r3, r5
 80177dc:	d0f4      	beq.n	80177c8 <memcmp+0x4>
 80177de:	1b58      	subs	r0, r3, r5
 80177e0:	bd30      	pop	{r4, r5, pc}

080177e2 <memcpy>:
 80177e2:	b510      	push	{r4, lr}
 80177e4:	1e43      	subs	r3, r0, #1
 80177e6:	440a      	add	r2, r1
 80177e8:	4291      	cmp	r1, r2
 80177ea:	d100      	bne.n	80177ee <memcpy+0xc>
 80177ec:	bd10      	pop	{r4, pc}
 80177ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177f6:	e7f7      	b.n	80177e8 <memcpy+0x6>

080177f8 <memset>:
 80177f8:	4402      	add	r2, r0
 80177fa:	4603      	mov	r3, r0
 80177fc:	4293      	cmp	r3, r2
 80177fe:	d100      	bne.n	8017802 <memset+0xa>
 8017800:	4770      	bx	lr
 8017802:	f803 1b01 	strb.w	r1, [r3], #1
 8017806:	e7f9      	b.n	80177fc <memset+0x4>

08017808 <iprintf>:
 8017808:	b40f      	push	{r0, r1, r2, r3}
 801780a:	4b0a      	ldr	r3, [pc, #40]	; (8017834 <iprintf+0x2c>)
 801780c:	b513      	push	{r0, r1, r4, lr}
 801780e:	681c      	ldr	r4, [r3, #0]
 8017810:	b124      	cbz	r4, 801781c <iprintf+0x14>
 8017812:	69a3      	ldr	r3, [r4, #24]
 8017814:	b913      	cbnz	r3, 801781c <iprintf+0x14>
 8017816:	4620      	mov	r0, r4
 8017818:	f000 f882 	bl	8017920 <__sinit>
 801781c:	ab05      	add	r3, sp, #20
 801781e:	9a04      	ldr	r2, [sp, #16]
 8017820:	68a1      	ldr	r1, [r4, #8]
 8017822:	9301      	str	r3, [sp, #4]
 8017824:	4620      	mov	r0, r4
 8017826:	f000 f9df 	bl	8017be8 <_vfiprintf_r>
 801782a:	b002      	add	sp, #8
 801782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017830:	b004      	add	sp, #16
 8017832:	4770      	bx	lr
 8017834:	20000034 	.word	0x20000034

08017838 <rand>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4b13      	ldr	r3, [pc, #76]	; (8017888 <rand+0x50>)
 801783c:	681c      	ldr	r4, [r3, #0]
 801783e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017840:	b97b      	cbnz	r3, 8017862 <rand+0x2a>
 8017842:	2018      	movs	r0, #24
 8017844:	f000 f8f6 	bl	8017a34 <malloc>
 8017848:	4a10      	ldr	r2, [pc, #64]	; (801788c <rand+0x54>)
 801784a:	4b11      	ldr	r3, [pc, #68]	; (8017890 <rand+0x58>)
 801784c:	63a0      	str	r0, [r4, #56]	; 0x38
 801784e:	e9c0 2300 	strd	r2, r3, [r0]
 8017852:	4b10      	ldr	r3, [pc, #64]	; (8017894 <rand+0x5c>)
 8017854:	6083      	str	r3, [r0, #8]
 8017856:	230b      	movs	r3, #11
 8017858:	8183      	strh	r3, [r0, #12]
 801785a:	2201      	movs	r2, #1
 801785c:	2300      	movs	r3, #0
 801785e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017864:	480c      	ldr	r0, [pc, #48]	; (8017898 <rand+0x60>)
 8017866:	690a      	ldr	r2, [r1, #16]
 8017868:	694b      	ldr	r3, [r1, #20]
 801786a:	4c0c      	ldr	r4, [pc, #48]	; (801789c <rand+0x64>)
 801786c:	4350      	muls	r0, r2
 801786e:	fb04 0003 	mla	r0, r4, r3, r0
 8017872:	fba2 2304 	umull	r2, r3, r2, r4
 8017876:	4403      	add	r3, r0
 8017878:	1c54      	adds	r4, r2, #1
 801787a:	f143 0500 	adc.w	r5, r3, #0
 801787e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017882:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017886:	bd38      	pop	{r3, r4, r5, pc}
 8017888:	20000034 	.word	0x20000034
 801788c:	abcd330e 	.word	0xabcd330e
 8017890:	e66d1234 	.word	0xe66d1234
 8017894:	0005deec 	.word	0x0005deec
 8017898:	5851f42d 	.word	0x5851f42d
 801789c:	4c957f2d 	.word	0x4c957f2d

080178a0 <std>:
 80178a0:	2300      	movs	r3, #0
 80178a2:	b510      	push	{r4, lr}
 80178a4:	4604      	mov	r4, r0
 80178a6:	e9c0 3300 	strd	r3, r3, [r0]
 80178aa:	6083      	str	r3, [r0, #8]
 80178ac:	8181      	strh	r1, [r0, #12]
 80178ae:	6643      	str	r3, [r0, #100]	; 0x64
 80178b0:	81c2      	strh	r2, [r0, #14]
 80178b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80178b6:	6183      	str	r3, [r0, #24]
 80178b8:	4619      	mov	r1, r3
 80178ba:	2208      	movs	r2, #8
 80178bc:	305c      	adds	r0, #92	; 0x5c
 80178be:	f7ff ff9b 	bl	80177f8 <memset>
 80178c2:	4b05      	ldr	r3, [pc, #20]	; (80178d8 <std+0x38>)
 80178c4:	6263      	str	r3, [r4, #36]	; 0x24
 80178c6:	4b05      	ldr	r3, [pc, #20]	; (80178dc <std+0x3c>)
 80178c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80178ca:	4b05      	ldr	r3, [pc, #20]	; (80178e0 <std+0x40>)
 80178cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80178ce:	4b05      	ldr	r3, [pc, #20]	; (80178e4 <std+0x44>)
 80178d0:	6224      	str	r4, [r4, #32]
 80178d2:	6323      	str	r3, [r4, #48]	; 0x30
 80178d4:	bd10      	pop	{r4, pc}
 80178d6:	bf00      	nop
 80178d8:	08018145 	.word	0x08018145
 80178dc:	08018167 	.word	0x08018167
 80178e0:	0801819f 	.word	0x0801819f
 80178e4:	080181c3 	.word	0x080181c3

080178e8 <_cleanup_r>:
 80178e8:	4901      	ldr	r1, [pc, #4]	; (80178f0 <_cleanup_r+0x8>)
 80178ea:	f000 b885 	b.w	80179f8 <_fwalk_reent>
 80178ee:	bf00      	nop
 80178f0:	0801849d 	.word	0x0801849d

080178f4 <__sfmoreglue>:
 80178f4:	b570      	push	{r4, r5, r6, lr}
 80178f6:	1e4a      	subs	r2, r1, #1
 80178f8:	2568      	movs	r5, #104	; 0x68
 80178fa:	4355      	muls	r5, r2
 80178fc:	460e      	mov	r6, r1
 80178fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017902:	f000 f8ed 	bl	8017ae0 <_malloc_r>
 8017906:	4604      	mov	r4, r0
 8017908:	b140      	cbz	r0, 801791c <__sfmoreglue+0x28>
 801790a:	2100      	movs	r1, #0
 801790c:	e9c0 1600 	strd	r1, r6, [r0]
 8017910:	300c      	adds	r0, #12
 8017912:	60a0      	str	r0, [r4, #8]
 8017914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017918:	f7ff ff6e 	bl	80177f8 <memset>
 801791c:	4620      	mov	r0, r4
 801791e:	bd70      	pop	{r4, r5, r6, pc}

08017920 <__sinit>:
 8017920:	6983      	ldr	r3, [r0, #24]
 8017922:	b510      	push	{r4, lr}
 8017924:	4604      	mov	r4, r0
 8017926:	bb33      	cbnz	r3, 8017976 <__sinit+0x56>
 8017928:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801792c:	6503      	str	r3, [r0, #80]	; 0x50
 801792e:	4b12      	ldr	r3, [pc, #72]	; (8017978 <__sinit+0x58>)
 8017930:	4a12      	ldr	r2, [pc, #72]	; (801797c <__sinit+0x5c>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	6282      	str	r2, [r0, #40]	; 0x28
 8017936:	4298      	cmp	r0, r3
 8017938:	bf04      	itt	eq
 801793a:	2301      	moveq	r3, #1
 801793c:	6183      	streq	r3, [r0, #24]
 801793e:	f000 f81f 	bl	8017980 <__sfp>
 8017942:	6060      	str	r0, [r4, #4]
 8017944:	4620      	mov	r0, r4
 8017946:	f000 f81b 	bl	8017980 <__sfp>
 801794a:	60a0      	str	r0, [r4, #8]
 801794c:	4620      	mov	r0, r4
 801794e:	f000 f817 	bl	8017980 <__sfp>
 8017952:	2200      	movs	r2, #0
 8017954:	60e0      	str	r0, [r4, #12]
 8017956:	2104      	movs	r1, #4
 8017958:	6860      	ldr	r0, [r4, #4]
 801795a:	f7ff ffa1 	bl	80178a0 <std>
 801795e:	2201      	movs	r2, #1
 8017960:	2109      	movs	r1, #9
 8017962:	68a0      	ldr	r0, [r4, #8]
 8017964:	f7ff ff9c 	bl	80178a0 <std>
 8017968:	2202      	movs	r2, #2
 801796a:	2112      	movs	r1, #18
 801796c:	68e0      	ldr	r0, [r4, #12]
 801796e:	f7ff ff97 	bl	80178a0 <std>
 8017972:	2301      	movs	r3, #1
 8017974:	61a3      	str	r3, [r4, #24]
 8017976:	bd10      	pop	{r4, pc}
 8017978:	0801ad1c 	.word	0x0801ad1c
 801797c:	080178e9 	.word	0x080178e9

08017980 <__sfp>:
 8017980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017982:	4b1b      	ldr	r3, [pc, #108]	; (80179f0 <__sfp+0x70>)
 8017984:	681e      	ldr	r6, [r3, #0]
 8017986:	69b3      	ldr	r3, [r6, #24]
 8017988:	4607      	mov	r7, r0
 801798a:	b913      	cbnz	r3, 8017992 <__sfp+0x12>
 801798c:	4630      	mov	r0, r6
 801798e:	f7ff ffc7 	bl	8017920 <__sinit>
 8017992:	3648      	adds	r6, #72	; 0x48
 8017994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017998:	3b01      	subs	r3, #1
 801799a:	d503      	bpl.n	80179a4 <__sfp+0x24>
 801799c:	6833      	ldr	r3, [r6, #0]
 801799e:	b133      	cbz	r3, 80179ae <__sfp+0x2e>
 80179a0:	6836      	ldr	r6, [r6, #0]
 80179a2:	e7f7      	b.n	8017994 <__sfp+0x14>
 80179a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80179a8:	b16d      	cbz	r5, 80179c6 <__sfp+0x46>
 80179aa:	3468      	adds	r4, #104	; 0x68
 80179ac:	e7f4      	b.n	8017998 <__sfp+0x18>
 80179ae:	2104      	movs	r1, #4
 80179b0:	4638      	mov	r0, r7
 80179b2:	f7ff ff9f 	bl	80178f4 <__sfmoreglue>
 80179b6:	6030      	str	r0, [r6, #0]
 80179b8:	2800      	cmp	r0, #0
 80179ba:	d1f1      	bne.n	80179a0 <__sfp+0x20>
 80179bc:	230c      	movs	r3, #12
 80179be:	603b      	str	r3, [r7, #0]
 80179c0:	4604      	mov	r4, r0
 80179c2:	4620      	mov	r0, r4
 80179c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179c6:	4b0b      	ldr	r3, [pc, #44]	; (80179f4 <__sfp+0x74>)
 80179c8:	6665      	str	r5, [r4, #100]	; 0x64
 80179ca:	e9c4 5500 	strd	r5, r5, [r4]
 80179ce:	60a5      	str	r5, [r4, #8]
 80179d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80179d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80179d8:	2208      	movs	r2, #8
 80179da:	4629      	mov	r1, r5
 80179dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80179e0:	f7ff ff0a 	bl	80177f8 <memset>
 80179e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80179e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80179ec:	e7e9      	b.n	80179c2 <__sfp+0x42>
 80179ee:	bf00      	nop
 80179f0:	0801ad1c 	.word	0x0801ad1c
 80179f4:	ffff0001 	.word	0xffff0001

080179f8 <_fwalk_reent>:
 80179f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179fc:	4680      	mov	r8, r0
 80179fe:	4689      	mov	r9, r1
 8017a00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017a04:	2600      	movs	r6, #0
 8017a06:	b914      	cbnz	r4, 8017a0e <_fwalk_reent+0x16>
 8017a08:	4630      	mov	r0, r6
 8017a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017a12:	3f01      	subs	r7, #1
 8017a14:	d501      	bpl.n	8017a1a <_fwalk_reent+0x22>
 8017a16:	6824      	ldr	r4, [r4, #0]
 8017a18:	e7f5      	b.n	8017a06 <_fwalk_reent+0xe>
 8017a1a:	89ab      	ldrh	r3, [r5, #12]
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	d907      	bls.n	8017a30 <_fwalk_reent+0x38>
 8017a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017a24:	3301      	adds	r3, #1
 8017a26:	d003      	beq.n	8017a30 <_fwalk_reent+0x38>
 8017a28:	4629      	mov	r1, r5
 8017a2a:	4640      	mov	r0, r8
 8017a2c:	47c8      	blx	r9
 8017a2e:	4306      	orrs	r6, r0
 8017a30:	3568      	adds	r5, #104	; 0x68
 8017a32:	e7ee      	b.n	8017a12 <_fwalk_reent+0x1a>

08017a34 <malloc>:
 8017a34:	4b02      	ldr	r3, [pc, #8]	; (8017a40 <malloc+0xc>)
 8017a36:	4601      	mov	r1, r0
 8017a38:	6818      	ldr	r0, [r3, #0]
 8017a3a:	f000 b851 	b.w	8017ae0 <_malloc_r>
 8017a3e:	bf00      	nop
 8017a40:	20000034 	.word	0x20000034

08017a44 <_free_r>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	4605      	mov	r5, r0
 8017a48:	2900      	cmp	r1, #0
 8017a4a:	d045      	beq.n	8017ad8 <_free_r+0x94>
 8017a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a50:	1f0c      	subs	r4, r1, #4
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	bfb8      	it	lt
 8017a56:	18e4      	addlt	r4, r4, r3
 8017a58:	f000 fdc0 	bl	80185dc <__malloc_lock>
 8017a5c:	4a1f      	ldr	r2, [pc, #124]	; (8017adc <_free_r+0x98>)
 8017a5e:	6813      	ldr	r3, [r2, #0]
 8017a60:	4610      	mov	r0, r2
 8017a62:	b933      	cbnz	r3, 8017a72 <_free_r+0x2e>
 8017a64:	6063      	str	r3, [r4, #4]
 8017a66:	6014      	str	r4, [r2, #0]
 8017a68:	4628      	mov	r0, r5
 8017a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a6e:	f000 bdb6 	b.w	80185de <__malloc_unlock>
 8017a72:	42a3      	cmp	r3, r4
 8017a74:	d90c      	bls.n	8017a90 <_free_r+0x4c>
 8017a76:	6821      	ldr	r1, [r4, #0]
 8017a78:	1862      	adds	r2, r4, r1
 8017a7a:	4293      	cmp	r3, r2
 8017a7c:	bf04      	itt	eq
 8017a7e:	681a      	ldreq	r2, [r3, #0]
 8017a80:	685b      	ldreq	r3, [r3, #4]
 8017a82:	6063      	str	r3, [r4, #4]
 8017a84:	bf04      	itt	eq
 8017a86:	1852      	addeq	r2, r2, r1
 8017a88:	6022      	streq	r2, [r4, #0]
 8017a8a:	6004      	str	r4, [r0, #0]
 8017a8c:	e7ec      	b.n	8017a68 <_free_r+0x24>
 8017a8e:	4613      	mov	r3, r2
 8017a90:	685a      	ldr	r2, [r3, #4]
 8017a92:	b10a      	cbz	r2, 8017a98 <_free_r+0x54>
 8017a94:	42a2      	cmp	r2, r4
 8017a96:	d9fa      	bls.n	8017a8e <_free_r+0x4a>
 8017a98:	6819      	ldr	r1, [r3, #0]
 8017a9a:	1858      	adds	r0, r3, r1
 8017a9c:	42a0      	cmp	r0, r4
 8017a9e:	d10b      	bne.n	8017ab8 <_free_r+0x74>
 8017aa0:	6820      	ldr	r0, [r4, #0]
 8017aa2:	4401      	add	r1, r0
 8017aa4:	1858      	adds	r0, r3, r1
 8017aa6:	4282      	cmp	r2, r0
 8017aa8:	6019      	str	r1, [r3, #0]
 8017aaa:	d1dd      	bne.n	8017a68 <_free_r+0x24>
 8017aac:	6810      	ldr	r0, [r2, #0]
 8017aae:	6852      	ldr	r2, [r2, #4]
 8017ab0:	605a      	str	r2, [r3, #4]
 8017ab2:	4401      	add	r1, r0
 8017ab4:	6019      	str	r1, [r3, #0]
 8017ab6:	e7d7      	b.n	8017a68 <_free_r+0x24>
 8017ab8:	d902      	bls.n	8017ac0 <_free_r+0x7c>
 8017aba:	230c      	movs	r3, #12
 8017abc:	602b      	str	r3, [r5, #0]
 8017abe:	e7d3      	b.n	8017a68 <_free_r+0x24>
 8017ac0:	6820      	ldr	r0, [r4, #0]
 8017ac2:	1821      	adds	r1, r4, r0
 8017ac4:	428a      	cmp	r2, r1
 8017ac6:	bf04      	itt	eq
 8017ac8:	6811      	ldreq	r1, [r2, #0]
 8017aca:	6852      	ldreq	r2, [r2, #4]
 8017acc:	6062      	str	r2, [r4, #4]
 8017ace:	bf04      	itt	eq
 8017ad0:	1809      	addeq	r1, r1, r0
 8017ad2:	6021      	streq	r1, [r4, #0]
 8017ad4:	605c      	str	r4, [r3, #4]
 8017ad6:	e7c7      	b.n	8017a68 <_free_r+0x24>
 8017ad8:	bd38      	pop	{r3, r4, r5, pc}
 8017ada:	bf00      	nop
 8017adc:	200041fc 	.word	0x200041fc

08017ae0 <_malloc_r>:
 8017ae0:	b570      	push	{r4, r5, r6, lr}
 8017ae2:	1ccd      	adds	r5, r1, #3
 8017ae4:	f025 0503 	bic.w	r5, r5, #3
 8017ae8:	3508      	adds	r5, #8
 8017aea:	2d0c      	cmp	r5, #12
 8017aec:	bf38      	it	cc
 8017aee:	250c      	movcc	r5, #12
 8017af0:	2d00      	cmp	r5, #0
 8017af2:	4606      	mov	r6, r0
 8017af4:	db01      	blt.n	8017afa <_malloc_r+0x1a>
 8017af6:	42a9      	cmp	r1, r5
 8017af8:	d903      	bls.n	8017b02 <_malloc_r+0x22>
 8017afa:	230c      	movs	r3, #12
 8017afc:	6033      	str	r3, [r6, #0]
 8017afe:	2000      	movs	r0, #0
 8017b00:	bd70      	pop	{r4, r5, r6, pc}
 8017b02:	f000 fd6b 	bl	80185dc <__malloc_lock>
 8017b06:	4a21      	ldr	r2, [pc, #132]	; (8017b8c <_malloc_r+0xac>)
 8017b08:	6814      	ldr	r4, [r2, #0]
 8017b0a:	4621      	mov	r1, r4
 8017b0c:	b991      	cbnz	r1, 8017b34 <_malloc_r+0x54>
 8017b0e:	4c20      	ldr	r4, [pc, #128]	; (8017b90 <_malloc_r+0xb0>)
 8017b10:	6823      	ldr	r3, [r4, #0]
 8017b12:	b91b      	cbnz	r3, 8017b1c <_malloc_r+0x3c>
 8017b14:	4630      	mov	r0, r6
 8017b16:	f000 fb05 	bl	8018124 <_sbrk_r>
 8017b1a:	6020      	str	r0, [r4, #0]
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	4630      	mov	r0, r6
 8017b20:	f000 fb00 	bl	8018124 <_sbrk_r>
 8017b24:	1c43      	adds	r3, r0, #1
 8017b26:	d124      	bne.n	8017b72 <_malloc_r+0x92>
 8017b28:	230c      	movs	r3, #12
 8017b2a:	6033      	str	r3, [r6, #0]
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	f000 fd56 	bl	80185de <__malloc_unlock>
 8017b32:	e7e4      	b.n	8017afe <_malloc_r+0x1e>
 8017b34:	680b      	ldr	r3, [r1, #0]
 8017b36:	1b5b      	subs	r3, r3, r5
 8017b38:	d418      	bmi.n	8017b6c <_malloc_r+0x8c>
 8017b3a:	2b0b      	cmp	r3, #11
 8017b3c:	d90f      	bls.n	8017b5e <_malloc_r+0x7e>
 8017b3e:	600b      	str	r3, [r1, #0]
 8017b40:	50cd      	str	r5, [r1, r3]
 8017b42:	18cc      	adds	r4, r1, r3
 8017b44:	4630      	mov	r0, r6
 8017b46:	f000 fd4a 	bl	80185de <__malloc_unlock>
 8017b4a:	f104 000b 	add.w	r0, r4, #11
 8017b4e:	1d23      	adds	r3, r4, #4
 8017b50:	f020 0007 	bic.w	r0, r0, #7
 8017b54:	1ac3      	subs	r3, r0, r3
 8017b56:	d0d3      	beq.n	8017b00 <_malloc_r+0x20>
 8017b58:	425a      	negs	r2, r3
 8017b5a:	50e2      	str	r2, [r4, r3]
 8017b5c:	e7d0      	b.n	8017b00 <_malloc_r+0x20>
 8017b5e:	428c      	cmp	r4, r1
 8017b60:	684b      	ldr	r3, [r1, #4]
 8017b62:	bf16      	itet	ne
 8017b64:	6063      	strne	r3, [r4, #4]
 8017b66:	6013      	streq	r3, [r2, #0]
 8017b68:	460c      	movne	r4, r1
 8017b6a:	e7eb      	b.n	8017b44 <_malloc_r+0x64>
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	6849      	ldr	r1, [r1, #4]
 8017b70:	e7cc      	b.n	8017b0c <_malloc_r+0x2c>
 8017b72:	1cc4      	adds	r4, r0, #3
 8017b74:	f024 0403 	bic.w	r4, r4, #3
 8017b78:	42a0      	cmp	r0, r4
 8017b7a:	d005      	beq.n	8017b88 <_malloc_r+0xa8>
 8017b7c:	1a21      	subs	r1, r4, r0
 8017b7e:	4630      	mov	r0, r6
 8017b80:	f000 fad0 	bl	8018124 <_sbrk_r>
 8017b84:	3001      	adds	r0, #1
 8017b86:	d0cf      	beq.n	8017b28 <_malloc_r+0x48>
 8017b88:	6025      	str	r5, [r4, #0]
 8017b8a:	e7db      	b.n	8017b44 <_malloc_r+0x64>
 8017b8c:	200041fc 	.word	0x200041fc
 8017b90:	20004200 	.word	0x20004200

08017b94 <__sfputc_r>:
 8017b94:	6893      	ldr	r3, [r2, #8]
 8017b96:	3b01      	subs	r3, #1
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	b410      	push	{r4}
 8017b9c:	6093      	str	r3, [r2, #8]
 8017b9e:	da08      	bge.n	8017bb2 <__sfputc_r+0x1e>
 8017ba0:	6994      	ldr	r4, [r2, #24]
 8017ba2:	42a3      	cmp	r3, r4
 8017ba4:	db01      	blt.n	8017baa <__sfputc_r+0x16>
 8017ba6:	290a      	cmp	r1, #10
 8017ba8:	d103      	bne.n	8017bb2 <__sfputc_r+0x1e>
 8017baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bae:	f000 bb0d 	b.w	80181cc <__swbuf_r>
 8017bb2:	6813      	ldr	r3, [r2, #0]
 8017bb4:	1c58      	adds	r0, r3, #1
 8017bb6:	6010      	str	r0, [r2, #0]
 8017bb8:	7019      	strb	r1, [r3, #0]
 8017bba:	4608      	mov	r0, r1
 8017bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bc0:	4770      	bx	lr

08017bc2 <__sfputs_r>:
 8017bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bc4:	4606      	mov	r6, r0
 8017bc6:	460f      	mov	r7, r1
 8017bc8:	4614      	mov	r4, r2
 8017bca:	18d5      	adds	r5, r2, r3
 8017bcc:	42ac      	cmp	r4, r5
 8017bce:	d101      	bne.n	8017bd4 <__sfputs_r+0x12>
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	e007      	b.n	8017be4 <__sfputs_r+0x22>
 8017bd4:	463a      	mov	r2, r7
 8017bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f7ff ffda 	bl	8017b94 <__sfputc_r>
 8017be0:	1c43      	adds	r3, r0, #1
 8017be2:	d1f3      	bne.n	8017bcc <__sfputs_r+0xa>
 8017be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017be8 <_vfiprintf_r>:
 8017be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bec:	460c      	mov	r4, r1
 8017bee:	b09d      	sub	sp, #116	; 0x74
 8017bf0:	4617      	mov	r7, r2
 8017bf2:	461d      	mov	r5, r3
 8017bf4:	4606      	mov	r6, r0
 8017bf6:	b118      	cbz	r0, 8017c00 <_vfiprintf_r+0x18>
 8017bf8:	6983      	ldr	r3, [r0, #24]
 8017bfa:	b90b      	cbnz	r3, 8017c00 <_vfiprintf_r+0x18>
 8017bfc:	f7ff fe90 	bl	8017920 <__sinit>
 8017c00:	4b7c      	ldr	r3, [pc, #496]	; (8017df4 <_vfiprintf_r+0x20c>)
 8017c02:	429c      	cmp	r4, r3
 8017c04:	d158      	bne.n	8017cb8 <_vfiprintf_r+0xd0>
 8017c06:	6874      	ldr	r4, [r6, #4]
 8017c08:	89a3      	ldrh	r3, [r4, #12]
 8017c0a:	0718      	lsls	r0, r3, #28
 8017c0c:	d55e      	bpl.n	8017ccc <_vfiprintf_r+0xe4>
 8017c0e:	6923      	ldr	r3, [r4, #16]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d05b      	beq.n	8017ccc <_vfiprintf_r+0xe4>
 8017c14:	2300      	movs	r3, #0
 8017c16:	9309      	str	r3, [sp, #36]	; 0x24
 8017c18:	2320      	movs	r3, #32
 8017c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c1e:	2330      	movs	r3, #48	; 0x30
 8017c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c24:	9503      	str	r5, [sp, #12]
 8017c26:	f04f 0b01 	mov.w	fp, #1
 8017c2a:	46b8      	mov	r8, r7
 8017c2c:	4645      	mov	r5, r8
 8017c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c32:	b10b      	cbz	r3, 8017c38 <_vfiprintf_r+0x50>
 8017c34:	2b25      	cmp	r3, #37	; 0x25
 8017c36:	d154      	bne.n	8017ce2 <_vfiprintf_r+0xfa>
 8017c38:	ebb8 0a07 	subs.w	sl, r8, r7
 8017c3c:	d00b      	beq.n	8017c56 <_vfiprintf_r+0x6e>
 8017c3e:	4653      	mov	r3, sl
 8017c40:	463a      	mov	r2, r7
 8017c42:	4621      	mov	r1, r4
 8017c44:	4630      	mov	r0, r6
 8017c46:	f7ff ffbc 	bl	8017bc2 <__sfputs_r>
 8017c4a:	3001      	adds	r0, #1
 8017c4c:	f000 80c2 	beq.w	8017dd4 <_vfiprintf_r+0x1ec>
 8017c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c52:	4453      	add	r3, sl
 8017c54:	9309      	str	r3, [sp, #36]	; 0x24
 8017c56:	f898 3000 	ldrb.w	r3, [r8]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	f000 80ba 	beq.w	8017dd4 <_vfiprintf_r+0x1ec>
 8017c60:	2300      	movs	r3, #0
 8017c62:	f04f 32ff 	mov.w	r2, #4294967295
 8017c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c6a:	9304      	str	r3, [sp, #16]
 8017c6c:	9307      	str	r3, [sp, #28]
 8017c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c72:	931a      	str	r3, [sp, #104]	; 0x68
 8017c74:	46a8      	mov	r8, r5
 8017c76:	2205      	movs	r2, #5
 8017c78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017c7c:	485e      	ldr	r0, [pc, #376]	; (8017df8 <_vfiprintf_r+0x210>)
 8017c7e:	f7e8 fb2f 	bl	80002e0 <memchr>
 8017c82:	9b04      	ldr	r3, [sp, #16]
 8017c84:	bb78      	cbnz	r0, 8017ce6 <_vfiprintf_r+0xfe>
 8017c86:	06d9      	lsls	r1, r3, #27
 8017c88:	bf44      	itt	mi
 8017c8a:	2220      	movmi	r2, #32
 8017c8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c90:	071a      	lsls	r2, r3, #28
 8017c92:	bf44      	itt	mi
 8017c94:	222b      	movmi	r2, #43	; 0x2b
 8017c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c9a:	782a      	ldrb	r2, [r5, #0]
 8017c9c:	2a2a      	cmp	r2, #42	; 0x2a
 8017c9e:	d02a      	beq.n	8017cf6 <_vfiprintf_r+0x10e>
 8017ca0:	9a07      	ldr	r2, [sp, #28]
 8017ca2:	46a8      	mov	r8, r5
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	250a      	movs	r5, #10
 8017ca8:	4641      	mov	r1, r8
 8017caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cae:	3b30      	subs	r3, #48	; 0x30
 8017cb0:	2b09      	cmp	r3, #9
 8017cb2:	d969      	bls.n	8017d88 <_vfiprintf_r+0x1a0>
 8017cb4:	b360      	cbz	r0, 8017d10 <_vfiprintf_r+0x128>
 8017cb6:	e024      	b.n	8017d02 <_vfiprintf_r+0x11a>
 8017cb8:	4b50      	ldr	r3, [pc, #320]	; (8017dfc <_vfiprintf_r+0x214>)
 8017cba:	429c      	cmp	r4, r3
 8017cbc:	d101      	bne.n	8017cc2 <_vfiprintf_r+0xda>
 8017cbe:	68b4      	ldr	r4, [r6, #8]
 8017cc0:	e7a2      	b.n	8017c08 <_vfiprintf_r+0x20>
 8017cc2:	4b4f      	ldr	r3, [pc, #316]	; (8017e00 <_vfiprintf_r+0x218>)
 8017cc4:	429c      	cmp	r4, r3
 8017cc6:	bf08      	it	eq
 8017cc8:	68f4      	ldreq	r4, [r6, #12]
 8017cca:	e79d      	b.n	8017c08 <_vfiprintf_r+0x20>
 8017ccc:	4621      	mov	r1, r4
 8017cce:	4630      	mov	r0, r6
 8017cd0:	f000 fae0 	bl	8018294 <__swsetup_r>
 8017cd4:	2800      	cmp	r0, #0
 8017cd6:	d09d      	beq.n	8017c14 <_vfiprintf_r+0x2c>
 8017cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017cdc:	b01d      	add	sp, #116	; 0x74
 8017cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ce2:	46a8      	mov	r8, r5
 8017ce4:	e7a2      	b.n	8017c2c <_vfiprintf_r+0x44>
 8017ce6:	4a44      	ldr	r2, [pc, #272]	; (8017df8 <_vfiprintf_r+0x210>)
 8017ce8:	1a80      	subs	r0, r0, r2
 8017cea:	fa0b f000 	lsl.w	r0, fp, r0
 8017cee:	4318      	orrs	r0, r3
 8017cf0:	9004      	str	r0, [sp, #16]
 8017cf2:	4645      	mov	r5, r8
 8017cf4:	e7be      	b.n	8017c74 <_vfiprintf_r+0x8c>
 8017cf6:	9a03      	ldr	r2, [sp, #12]
 8017cf8:	1d11      	adds	r1, r2, #4
 8017cfa:	6812      	ldr	r2, [r2, #0]
 8017cfc:	9103      	str	r1, [sp, #12]
 8017cfe:	2a00      	cmp	r2, #0
 8017d00:	db01      	blt.n	8017d06 <_vfiprintf_r+0x11e>
 8017d02:	9207      	str	r2, [sp, #28]
 8017d04:	e004      	b.n	8017d10 <_vfiprintf_r+0x128>
 8017d06:	4252      	negs	r2, r2
 8017d08:	f043 0302 	orr.w	r3, r3, #2
 8017d0c:	9207      	str	r2, [sp, #28]
 8017d0e:	9304      	str	r3, [sp, #16]
 8017d10:	f898 3000 	ldrb.w	r3, [r8]
 8017d14:	2b2e      	cmp	r3, #46	; 0x2e
 8017d16:	d10e      	bne.n	8017d36 <_vfiprintf_r+0x14e>
 8017d18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8017d1e:	d138      	bne.n	8017d92 <_vfiprintf_r+0x1aa>
 8017d20:	9b03      	ldr	r3, [sp, #12]
 8017d22:	1d1a      	adds	r2, r3, #4
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	9203      	str	r2, [sp, #12]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	bfb8      	it	lt
 8017d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d30:	f108 0802 	add.w	r8, r8, #2
 8017d34:	9305      	str	r3, [sp, #20]
 8017d36:	4d33      	ldr	r5, [pc, #204]	; (8017e04 <_vfiprintf_r+0x21c>)
 8017d38:	f898 1000 	ldrb.w	r1, [r8]
 8017d3c:	2203      	movs	r2, #3
 8017d3e:	4628      	mov	r0, r5
 8017d40:	f7e8 face 	bl	80002e0 <memchr>
 8017d44:	b140      	cbz	r0, 8017d58 <_vfiprintf_r+0x170>
 8017d46:	2340      	movs	r3, #64	; 0x40
 8017d48:	1b40      	subs	r0, r0, r5
 8017d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8017d4e:	9b04      	ldr	r3, [sp, #16]
 8017d50:	4303      	orrs	r3, r0
 8017d52:	f108 0801 	add.w	r8, r8, #1
 8017d56:	9304      	str	r3, [sp, #16]
 8017d58:	f898 1000 	ldrb.w	r1, [r8]
 8017d5c:	482a      	ldr	r0, [pc, #168]	; (8017e08 <_vfiprintf_r+0x220>)
 8017d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d62:	2206      	movs	r2, #6
 8017d64:	f108 0701 	add.w	r7, r8, #1
 8017d68:	f7e8 faba 	bl	80002e0 <memchr>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d037      	beq.n	8017de0 <_vfiprintf_r+0x1f8>
 8017d70:	4b26      	ldr	r3, [pc, #152]	; (8017e0c <_vfiprintf_r+0x224>)
 8017d72:	bb1b      	cbnz	r3, 8017dbc <_vfiprintf_r+0x1d4>
 8017d74:	9b03      	ldr	r3, [sp, #12]
 8017d76:	3307      	adds	r3, #7
 8017d78:	f023 0307 	bic.w	r3, r3, #7
 8017d7c:	3308      	adds	r3, #8
 8017d7e:	9303      	str	r3, [sp, #12]
 8017d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d82:	444b      	add	r3, r9
 8017d84:	9309      	str	r3, [sp, #36]	; 0x24
 8017d86:	e750      	b.n	8017c2a <_vfiprintf_r+0x42>
 8017d88:	fb05 3202 	mla	r2, r5, r2, r3
 8017d8c:	2001      	movs	r0, #1
 8017d8e:	4688      	mov	r8, r1
 8017d90:	e78a      	b.n	8017ca8 <_vfiprintf_r+0xc0>
 8017d92:	2300      	movs	r3, #0
 8017d94:	f108 0801 	add.w	r8, r8, #1
 8017d98:	9305      	str	r3, [sp, #20]
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	250a      	movs	r5, #10
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017da4:	3a30      	subs	r2, #48	; 0x30
 8017da6:	2a09      	cmp	r2, #9
 8017da8:	d903      	bls.n	8017db2 <_vfiprintf_r+0x1ca>
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d0c3      	beq.n	8017d36 <_vfiprintf_r+0x14e>
 8017dae:	9105      	str	r1, [sp, #20]
 8017db0:	e7c1      	b.n	8017d36 <_vfiprintf_r+0x14e>
 8017db2:	fb05 2101 	mla	r1, r5, r1, r2
 8017db6:	2301      	movs	r3, #1
 8017db8:	4680      	mov	r8, r0
 8017dba:	e7f0      	b.n	8017d9e <_vfiprintf_r+0x1b6>
 8017dbc:	ab03      	add	r3, sp, #12
 8017dbe:	9300      	str	r3, [sp, #0]
 8017dc0:	4622      	mov	r2, r4
 8017dc2:	4b13      	ldr	r3, [pc, #76]	; (8017e10 <_vfiprintf_r+0x228>)
 8017dc4:	a904      	add	r1, sp, #16
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	f3af 8000 	nop.w
 8017dcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017dd0:	4681      	mov	r9, r0
 8017dd2:	d1d5      	bne.n	8017d80 <_vfiprintf_r+0x198>
 8017dd4:	89a3      	ldrh	r3, [r4, #12]
 8017dd6:	065b      	lsls	r3, r3, #25
 8017dd8:	f53f af7e 	bmi.w	8017cd8 <_vfiprintf_r+0xf0>
 8017ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017dde:	e77d      	b.n	8017cdc <_vfiprintf_r+0xf4>
 8017de0:	ab03      	add	r3, sp, #12
 8017de2:	9300      	str	r3, [sp, #0]
 8017de4:	4622      	mov	r2, r4
 8017de6:	4b0a      	ldr	r3, [pc, #40]	; (8017e10 <_vfiprintf_r+0x228>)
 8017de8:	a904      	add	r1, sp, #16
 8017dea:	4630      	mov	r0, r6
 8017dec:	f000 f888 	bl	8017f00 <_printf_i>
 8017df0:	e7ec      	b.n	8017dcc <_vfiprintf_r+0x1e4>
 8017df2:	bf00      	nop
 8017df4:	0801ad40 	.word	0x0801ad40
 8017df8:	0801ad80 	.word	0x0801ad80
 8017dfc:	0801ad60 	.word	0x0801ad60
 8017e00:	0801ad20 	.word	0x0801ad20
 8017e04:	0801ad86 	.word	0x0801ad86
 8017e08:	0801ad8a 	.word	0x0801ad8a
 8017e0c:	00000000 	.word	0x00000000
 8017e10:	08017bc3 	.word	0x08017bc3

08017e14 <_printf_common>:
 8017e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e18:	4691      	mov	r9, r2
 8017e1a:	461f      	mov	r7, r3
 8017e1c:	688a      	ldr	r2, [r1, #8]
 8017e1e:	690b      	ldr	r3, [r1, #16]
 8017e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e24:	4293      	cmp	r3, r2
 8017e26:	bfb8      	it	lt
 8017e28:	4613      	movlt	r3, r2
 8017e2a:	f8c9 3000 	str.w	r3, [r9]
 8017e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e32:	4606      	mov	r6, r0
 8017e34:	460c      	mov	r4, r1
 8017e36:	b112      	cbz	r2, 8017e3e <_printf_common+0x2a>
 8017e38:	3301      	adds	r3, #1
 8017e3a:	f8c9 3000 	str.w	r3, [r9]
 8017e3e:	6823      	ldr	r3, [r4, #0]
 8017e40:	0699      	lsls	r1, r3, #26
 8017e42:	bf42      	ittt	mi
 8017e44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017e48:	3302      	addmi	r3, #2
 8017e4a:	f8c9 3000 	strmi.w	r3, [r9]
 8017e4e:	6825      	ldr	r5, [r4, #0]
 8017e50:	f015 0506 	ands.w	r5, r5, #6
 8017e54:	d107      	bne.n	8017e66 <_printf_common+0x52>
 8017e56:	f104 0a19 	add.w	sl, r4, #25
 8017e5a:	68e3      	ldr	r3, [r4, #12]
 8017e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8017e60:	1a9b      	subs	r3, r3, r2
 8017e62:	42ab      	cmp	r3, r5
 8017e64:	dc28      	bgt.n	8017eb8 <_printf_common+0xa4>
 8017e66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017e6a:	6822      	ldr	r2, [r4, #0]
 8017e6c:	3300      	adds	r3, #0
 8017e6e:	bf18      	it	ne
 8017e70:	2301      	movne	r3, #1
 8017e72:	0692      	lsls	r2, r2, #26
 8017e74:	d42d      	bmi.n	8017ed2 <_printf_common+0xbe>
 8017e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017e7a:	4639      	mov	r1, r7
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	47c0      	blx	r8
 8017e80:	3001      	adds	r0, #1
 8017e82:	d020      	beq.n	8017ec6 <_printf_common+0xb2>
 8017e84:	6823      	ldr	r3, [r4, #0]
 8017e86:	68e5      	ldr	r5, [r4, #12]
 8017e88:	f8d9 2000 	ldr.w	r2, [r9]
 8017e8c:	f003 0306 	and.w	r3, r3, #6
 8017e90:	2b04      	cmp	r3, #4
 8017e92:	bf08      	it	eq
 8017e94:	1aad      	subeq	r5, r5, r2
 8017e96:	68a3      	ldr	r3, [r4, #8]
 8017e98:	6922      	ldr	r2, [r4, #16]
 8017e9a:	bf0c      	ite	eq
 8017e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ea0:	2500      	movne	r5, #0
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	bfc4      	itt	gt
 8017ea6:	1a9b      	subgt	r3, r3, r2
 8017ea8:	18ed      	addgt	r5, r5, r3
 8017eaa:	f04f 0900 	mov.w	r9, #0
 8017eae:	341a      	adds	r4, #26
 8017eb0:	454d      	cmp	r5, r9
 8017eb2:	d11a      	bne.n	8017eea <_printf_common+0xd6>
 8017eb4:	2000      	movs	r0, #0
 8017eb6:	e008      	b.n	8017eca <_printf_common+0xb6>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	4652      	mov	r2, sl
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	47c0      	blx	r8
 8017ec2:	3001      	adds	r0, #1
 8017ec4:	d103      	bne.n	8017ece <_printf_common+0xba>
 8017ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ece:	3501      	adds	r5, #1
 8017ed0:	e7c3      	b.n	8017e5a <_printf_common+0x46>
 8017ed2:	18e1      	adds	r1, r4, r3
 8017ed4:	1c5a      	adds	r2, r3, #1
 8017ed6:	2030      	movs	r0, #48	; 0x30
 8017ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017edc:	4422      	add	r2, r4
 8017ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ee2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ee6:	3302      	adds	r3, #2
 8017ee8:	e7c5      	b.n	8017e76 <_printf_common+0x62>
 8017eea:	2301      	movs	r3, #1
 8017eec:	4622      	mov	r2, r4
 8017eee:	4639      	mov	r1, r7
 8017ef0:	4630      	mov	r0, r6
 8017ef2:	47c0      	blx	r8
 8017ef4:	3001      	adds	r0, #1
 8017ef6:	d0e6      	beq.n	8017ec6 <_printf_common+0xb2>
 8017ef8:	f109 0901 	add.w	r9, r9, #1
 8017efc:	e7d8      	b.n	8017eb0 <_printf_common+0x9c>
	...

08017f00 <_printf_i>:
 8017f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017f08:	460c      	mov	r4, r1
 8017f0a:	7e09      	ldrb	r1, [r1, #24]
 8017f0c:	b085      	sub	sp, #20
 8017f0e:	296e      	cmp	r1, #110	; 0x6e
 8017f10:	4617      	mov	r7, r2
 8017f12:	4606      	mov	r6, r0
 8017f14:	4698      	mov	r8, r3
 8017f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f18:	f000 80b3 	beq.w	8018082 <_printf_i+0x182>
 8017f1c:	d822      	bhi.n	8017f64 <_printf_i+0x64>
 8017f1e:	2963      	cmp	r1, #99	; 0x63
 8017f20:	d036      	beq.n	8017f90 <_printf_i+0x90>
 8017f22:	d80a      	bhi.n	8017f3a <_printf_i+0x3a>
 8017f24:	2900      	cmp	r1, #0
 8017f26:	f000 80b9 	beq.w	801809c <_printf_i+0x19c>
 8017f2a:	2958      	cmp	r1, #88	; 0x58
 8017f2c:	f000 8083 	beq.w	8018036 <_printf_i+0x136>
 8017f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017f38:	e032      	b.n	8017fa0 <_printf_i+0xa0>
 8017f3a:	2964      	cmp	r1, #100	; 0x64
 8017f3c:	d001      	beq.n	8017f42 <_printf_i+0x42>
 8017f3e:	2969      	cmp	r1, #105	; 0x69
 8017f40:	d1f6      	bne.n	8017f30 <_printf_i+0x30>
 8017f42:	6820      	ldr	r0, [r4, #0]
 8017f44:	6813      	ldr	r3, [r2, #0]
 8017f46:	0605      	lsls	r5, r0, #24
 8017f48:	f103 0104 	add.w	r1, r3, #4
 8017f4c:	d52a      	bpl.n	8017fa4 <_printf_i+0xa4>
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	6011      	str	r1, [r2, #0]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	da03      	bge.n	8017f5e <_printf_i+0x5e>
 8017f56:	222d      	movs	r2, #45	; 0x2d
 8017f58:	425b      	negs	r3, r3
 8017f5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017f5e:	486f      	ldr	r0, [pc, #444]	; (801811c <_printf_i+0x21c>)
 8017f60:	220a      	movs	r2, #10
 8017f62:	e039      	b.n	8017fd8 <_printf_i+0xd8>
 8017f64:	2973      	cmp	r1, #115	; 0x73
 8017f66:	f000 809d 	beq.w	80180a4 <_printf_i+0x1a4>
 8017f6a:	d808      	bhi.n	8017f7e <_printf_i+0x7e>
 8017f6c:	296f      	cmp	r1, #111	; 0x6f
 8017f6e:	d020      	beq.n	8017fb2 <_printf_i+0xb2>
 8017f70:	2970      	cmp	r1, #112	; 0x70
 8017f72:	d1dd      	bne.n	8017f30 <_printf_i+0x30>
 8017f74:	6823      	ldr	r3, [r4, #0]
 8017f76:	f043 0320 	orr.w	r3, r3, #32
 8017f7a:	6023      	str	r3, [r4, #0]
 8017f7c:	e003      	b.n	8017f86 <_printf_i+0x86>
 8017f7e:	2975      	cmp	r1, #117	; 0x75
 8017f80:	d017      	beq.n	8017fb2 <_printf_i+0xb2>
 8017f82:	2978      	cmp	r1, #120	; 0x78
 8017f84:	d1d4      	bne.n	8017f30 <_printf_i+0x30>
 8017f86:	2378      	movs	r3, #120	; 0x78
 8017f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017f8c:	4864      	ldr	r0, [pc, #400]	; (8018120 <_printf_i+0x220>)
 8017f8e:	e055      	b.n	801803c <_printf_i+0x13c>
 8017f90:	6813      	ldr	r3, [r2, #0]
 8017f92:	1d19      	adds	r1, r3, #4
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	6011      	str	r1, [r2, #0]
 8017f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e08c      	b.n	80180be <_printf_i+0x1be>
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	6011      	str	r1, [r2, #0]
 8017fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017fac:	bf18      	it	ne
 8017fae:	b21b      	sxthne	r3, r3
 8017fb0:	e7cf      	b.n	8017f52 <_printf_i+0x52>
 8017fb2:	6813      	ldr	r3, [r2, #0]
 8017fb4:	6825      	ldr	r5, [r4, #0]
 8017fb6:	1d18      	adds	r0, r3, #4
 8017fb8:	6010      	str	r0, [r2, #0]
 8017fba:	0628      	lsls	r0, r5, #24
 8017fbc:	d501      	bpl.n	8017fc2 <_printf_i+0xc2>
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	e002      	b.n	8017fc8 <_printf_i+0xc8>
 8017fc2:	0668      	lsls	r0, r5, #25
 8017fc4:	d5fb      	bpl.n	8017fbe <_printf_i+0xbe>
 8017fc6:	881b      	ldrh	r3, [r3, #0]
 8017fc8:	4854      	ldr	r0, [pc, #336]	; (801811c <_printf_i+0x21c>)
 8017fca:	296f      	cmp	r1, #111	; 0x6f
 8017fcc:	bf14      	ite	ne
 8017fce:	220a      	movne	r2, #10
 8017fd0:	2208      	moveq	r2, #8
 8017fd2:	2100      	movs	r1, #0
 8017fd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017fd8:	6865      	ldr	r5, [r4, #4]
 8017fda:	60a5      	str	r5, [r4, #8]
 8017fdc:	2d00      	cmp	r5, #0
 8017fde:	f2c0 8095 	blt.w	801810c <_printf_i+0x20c>
 8017fe2:	6821      	ldr	r1, [r4, #0]
 8017fe4:	f021 0104 	bic.w	r1, r1, #4
 8017fe8:	6021      	str	r1, [r4, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d13d      	bne.n	801806a <_printf_i+0x16a>
 8017fee:	2d00      	cmp	r5, #0
 8017ff0:	f040 808e 	bne.w	8018110 <_printf_i+0x210>
 8017ff4:	4665      	mov	r5, ip
 8017ff6:	2a08      	cmp	r2, #8
 8017ff8:	d10b      	bne.n	8018012 <_printf_i+0x112>
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	07db      	lsls	r3, r3, #31
 8017ffe:	d508      	bpl.n	8018012 <_printf_i+0x112>
 8018000:	6923      	ldr	r3, [r4, #16]
 8018002:	6862      	ldr	r2, [r4, #4]
 8018004:	429a      	cmp	r2, r3
 8018006:	bfde      	ittt	le
 8018008:	2330      	movle	r3, #48	; 0x30
 801800a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801800e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018012:	ebac 0305 	sub.w	r3, ip, r5
 8018016:	6123      	str	r3, [r4, #16]
 8018018:	f8cd 8000 	str.w	r8, [sp]
 801801c:	463b      	mov	r3, r7
 801801e:	aa03      	add	r2, sp, #12
 8018020:	4621      	mov	r1, r4
 8018022:	4630      	mov	r0, r6
 8018024:	f7ff fef6 	bl	8017e14 <_printf_common>
 8018028:	3001      	adds	r0, #1
 801802a:	d14d      	bne.n	80180c8 <_printf_i+0x1c8>
 801802c:	f04f 30ff 	mov.w	r0, #4294967295
 8018030:	b005      	add	sp, #20
 8018032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018036:	4839      	ldr	r0, [pc, #228]	; (801811c <_printf_i+0x21c>)
 8018038:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801803c:	6813      	ldr	r3, [r2, #0]
 801803e:	6821      	ldr	r1, [r4, #0]
 8018040:	1d1d      	adds	r5, r3, #4
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	6015      	str	r5, [r2, #0]
 8018046:	060a      	lsls	r2, r1, #24
 8018048:	d50b      	bpl.n	8018062 <_printf_i+0x162>
 801804a:	07ca      	lsls	r2, r1, #31
 801804c:	bf44      	itt	mi
 801804e:	f041 0120 	orrmi.w	r1, r1, #32
 8018052:	6021      	strmi	r1, [r4, #0]
 8018054:	b91b      	cbnz	r3, 801805e <_printf_i+0x15e>
 8018056:	6822      	ldr	r2, [r4, #0]
 8018058:	f022 0220 	bic.w	r2, r2, #32
 801805c:	6022      	str	r2, [r4, #0]
 801805e:	2210      	movs	r2, #16
 8018060:	e7b7      	b.n	8017fd2 <_printf_i+0xd2>
 8018062:	064d      	lsls	r5, r1, #25
 8018064:	bf48      	it	mi
 8018066:	b29b      	uxthmi	r3, r3
 8018068:	e7ef      	b.n	801804a <_printf_i+0x14a>
 801806a:	4665      	mov	r5, ip
 801806c:	fbb3 f1f2 	udiv	r1, r3, r2
 8018070:	fb02 3311 	mls	r3, r2, r1, r3
 8018074:	5cc3      	ldrb	r3, [r0, r3]
 8018076:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801807a:	460b      	mov	r3, r1
 801807c:	2900      	cmp	r1, #0
 801807e:	d1f5      	bne.n	801806c <_printf_i+0x16c>
 8018080:	e7b9      	b.n	8017ff6 <_printf_i+0xf6>
 8018082:	6813      	ldr	r3, [r2, #0]
 8018084:	6825      	ldr	r5, [r4, #0]
 8018086:	6961      	ldr	r1, [r4, #20]
 8018088:	1d18      	adds	r0, r3, #4
 801808a:	6010      	str	r0, [r2, #0]
 801808c:	0628      	lsls	r0, r5, #24
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	d501      	bpl.n	8018096 <_printf_i+0x196>
 8018092:	6019      	str	r1, [r3, #0]
 8018094:	e002      	b.n	801809c <_printf_i+0x19c>
 8018096:	066a      	lsls	r2, r5, #25
 8018098:	d5fb      	bpl.n	8018092 <_printf_i+0x192>
 801809a:	8019      	strh	r1, [r3, #0]
 801809c:	2300      	movs	r3, #0
 801809e:	6123      	str	r3, [r4, #16]
 80180a0:	4665      	mov	r5, ip
 80180a2:	e7b9      	b.n	8018018 <_printf_i+0x118>
 80180a4:	6813      	ldr	r3, [r2, #0]
 80180a6:	1d19      	adds	r1, r3, #4
 80180a8:	6011      	str	r1, [r2, #0]
 80180aa:	681d      	ldr	r5, [r3, #0]
 80180ac:	6862      	ldr	r2, [r4, #4]
 80180ae:	2100      	movs	r1, #0
 80180b0:	4628      	mov	r0, r5
 80180b2:	f7e8 f915 	bl	80002e0 <memchr>
 80180b6:	b108      	cbz	r0, 80180bc <_printf_i+0x1bc>
 80180b8:	1b40      	subs	r0, r0, r5
 80180ba:	6060      	str	r0, [r4, #4]
 80180bc:	6863      	ldr	r3, [r4, #4]
 80180be:	6123      	str	r3, [r4, #16]
 80180c0:	2300      	movs	r3, #0
 80180c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180c6:	e7a7      	b.n	8018018 <_printf_i+0x118>
 80180c8:	6923      	ldr	r3, [r4, #16]
 80180ca:	462a      	mov	r2, r5
 80180cc:	4639      	mov	r1, r7
 80180ce:	4630      	mov	r0, r6
 80180d0:	47c0      	blx	r8
 80180d2:	3001      	adds	r0, #1
 80180d4:	d0aa      	beq.n	801802c <_printf_i+0x12c>
 80180d6:	6823      	ldr	r3, [r4, #0]
 80180d8:	079b      	lsls	r3, r3, #30
 80180da:	d413      	bmi.n	8018104 <_printf_i+0x204>
 80180dc:	68e0      	ldr	r0, [r4, #12]
 80180de:	9b03      	ldr	r3, [sp, #12]
 80180e0:	4298      	cmp	r0, r3
 80180e2:	bfb8      	it	lt
 80180e4:	4618      	movlt	r0, r3
 80180e6:	e7a3      	b.n	8018030 <_printf_i+0x130>
 80180e8:	2301      	movs	r3, #1
 80180ea:	464a      	mov	r2, r9
 80180ec:	4639      	mov	r1, r7
 80180ee:	4630      	mov	r0, r6
 80180f0:	47c0      	blx	r8
 80180f2:	3001      	adds	r0, #1
 80180f4:	d09a      	beq.n	801802c <_printf_i+0x12c>
 80180f6:	3501      	adds	r5, #1
 80180f8:	68e3      	ldr	r3, [r4, #12]
 80180fa:	9a03      	ldr	r2, [sp, #12]
 80180fc:	1a9b      	subs	r3, r3, r2
 80180fe:	42ab      	cmp	r3, r5
 8018100:	dcf2      	bgt.n	80180e8 <_printf_i+0x1e8>
 8018102:	e7eb      	b.n	80180dc <_printf_i+0x1dc>
 8018104:	2500      	movs	r5, #0
 8018106:	f104 0919 	add.w	r9, r4, #25
 801810a:	e7f5      	b.n	80180f8 <_printf_i+0x1f8>
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1ac      	bne.n	801806a <_printf_i+0x16a>
 8018110:	7803      	ldrb	r3, [r0, #0]
 8018112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018116:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801811a:	e76c      	b.n	8017ff6 <_printf_i+0xf6>
 801811c:	0801ad91 	.word	0x0801ad91
 8018120:	0801ada2 	.word	0x0801ada2

08018124 <_sbrk_r>:
 8018124:	b538      	push	{r3, r4, r5, lr}
 8018126:	4c06      	ldr	r4, [pc, #24]	; (8018140 <_sbrk_r+0x1c>)
 8018128:	2300      	movs	r3, #0
 801812a:	4605      	mov	r5, r0
 801812c:	4608      	mov	r0, r1
 801812e:	6023      	str	r3, [r4, #0]
 8018130:	f7e8 fed2 	bl	8000ed8 <_sbrk>
 8018134:	1c43      	adds	r3, r0, #1
 8018136:	d102      	bne.n	801813e <_sbrk_r+0x1a>
 8018138:	6823      	ldr	r3, [r4, #0]
 801813a:	b103      	cbz	r3, 801813e <_sbrk_r+0x1a>
 801813c:	602b      	str	r3, [r5, #0]
 801813e:	bd38      	pop	{r3, r4, r5, pc}
 8018140:	200079d4 	.word	0x200079d4

08018144 <__sread>:
 8018144:	b510      	push	{r4, lr}
 8018146:	460c      	mov	r4, r1
 8018148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801814c:	f000 fa48 	bl	80185e0 <_read_r>
 8018150:	2800      	cmp	r0, #0
 8018152:	bfab      	itete	ge
 8018154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018156:	89a3      	ldrhlt	r3, [r4, #12]
 8018158:	181b      	addge	r3, r3, r0
 801815a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801815e:	bfac      	ite	ge
 8018160:	6563      	strge	r3, [r4, #84]	; 0x54
 8018162:	81a3      	strhlt	r3, [r4, #12]
 8018164:	bd10      	pop	{r4, pc}

08018166 <__swrite>:
 8018166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801816a:	461f      	mov	r7, r3
 801816c:	898b      	ldrh	r3, [r1, #12]
 801816e:	05db      	lsls	r3, r3, #23
 8018170:	4605      	mov	r5, r0
 8018172:	460c      	mov	r4, r1
 8018174:	4616      	mov	r6, r2
 8018176:	d505      	bpl.n	8018184 <__swrite+0x1e>
 8018178:	2302      	movs	r3, #2
 801817a:	2200      	movs	r2, #0
 801817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018180:	f000 f9b6 	bl	80184f0 <_lseek_r>
 8018184:	89a3      	ldrh	r3, [r4, #12]
 8018186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801818a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801818e:	81a3      	strh	r3, [r4, #12]
 8018190:	4632      	mov	r2, r6
 8018192:	463b      	mov	r3, r7
 8018194:	4628      	mov	r0, r5
 8018196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801819a:	f000 b869 	b.w	8018270 <_write_r>

0801819e <__sseek>:
 801819e:	b510      	push	{r4, lr}
 80181a0:	460c      	mov	r4, r1
 80181a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181a6:	f000 f9a3 	bl	80184f0 <_lseek_r>
 80181aa:	1c43      	adds	r3, r0, #1
 80181ac:	89a3      	ldrh	r3, [r4, #12]
 80181ae:	bf15      	itete	ne
 80181b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80181b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181ba:	81a3      	strheq	r3, [r4, #12]
 80181bc:	bf18      	it	ne
 80181be:	81a3      	strhne	r3, [r4, #12]
 80181c0:	bd10      	pop	{r4, pc}

080181c2 <__sclose>:
 80181c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c6:	f000 b8d3 	b.w	8018370 <_close_r>
	...

080181cc <__swbuf_r>:
 80181cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ce:	460e      	mov	r6, r1
 80181d0:	4614      	mov	r4, r2
 80181d2:	4605      	mov	r5, r0
 80181d4:	b118      	cbz	r0, 80181de <__swbuf_r+0x12>
 80181d6:	6983      	ldr	r3, [r0, #24]
 80181d8:	b90b      	cbnz	r3, 80181de <__swbuf_r+0x12>
 80181da:	f7ff fba1 	bl	8017920 <__sinit>
 80181de:	4b21      	ldr	r3, [pc, #132]	; (8018264 <__swbuf_r+0x98>)
 80181e0:	429c      	cmp	r4, r3
 80181e2:	d12a      	bne.n	801823a <__swbuf_r+0x6e>
 80181e4:	686c      	ldr	r4, [r5, #4]
 80181e6:	69a3      	ldr	r3, [r4, #24]
 80181e8:	60a3      	str	r3, [r4, #8]
 80181ea:	89a3      	ldrh	r3, [r4, #12]
 80181ec:	071a      	lsls	r2, r3, #28
 80181ee:	d52e      	bpl.n	801824e <__swbuf_r+0x82>
 80181f0:	6923      	ldr	r3, [r4, #16]
 80181f2:	b363      	cbz	r3, 801824e <__swbuf_r+0x82>
 80181f4:	6923      	ldr	r3, [r4, #16]
 80181f6:	6820      	ldr	r0, [r4, #0]
 80181f8:	1ac0      	subs	r0, r0, r3
 80181fa:	6963      	ldr	r3, [r4, #20]
 80181fc:	b2f6      	uxtb	r6, r6
 80181fe:	4283      	cmp	r3, r0
 8018200:	4637      	mov	r7, r6
 8018202:	dc04      	bgt.n	801820e <__swbuf_r+0x42>
 8018204:	4621      	mov	r1, r4
 8018206:	4628      	mov	r0, r5
 8018208:	f000 f948 	bl	801849c <_fflush_r>
 801820c:	bb28      	cbnz	r0, 801825a <__swbuf_r+0x8e>
 801820e:	68a3      	ldr	r3, [r4, #8]
 8018210:	3b01      	subs	r3, #1
 8018212:	60a3      	str	r3, [r4, #8]
 8018214:	6823      	ldr	r3, [r4, #0]
 8018216:	1c5a      	adds	r2, r3, #1
 8018218:	6022      	str	r2, [r4, #0]
 801821a:	701e      	strb	r6, [r3, #0]
 801821c:	6963      	ldr	r3, [r4, #20]
 801821e:	3001      	adds	r0, #1
 8018220:	4283      	cmp	r3, r0
 8018222:	d004      	beq.n	801822e <__swbuf_r+0x62>
 8018224:	89a3      	ldrh	r3, [r4, #12]
 8018226:	07db      	lsls	r3, r3, #31
 8018228:	d519      	bpl.n	801825e <__swbuf_r+0x92>
 801822a:	2e0a      	cmp	r6, #10
 801822c:	d117      	bne.n	801825e <__swbuf_r+0x92>
 801822e:	4621      	mov	r1, r4
 8018230:	4628      	mov	r0, r5
 8018232:	f000 f933 	bl	801849c <_fflush_r>
 8018236:	b190      	cbz	r0, 801825e <__swbuf_r+0x92>
 8018238:	e00f      	b.n	801825a <__swbuf_r+0x8e>
 801823a:	4b0b      	ldr	r3, [pc, #44]	; (8018268 <__swbuf_r+0x9c>)
 801823c:	429c      	cmp	r4, r3
 801823e:	d101      	bne.n	8018244 <__swbuf_r+0x78>
 8018240:	68ac      	ldr	r4, [r5, #8]
 8018242:	e7d0      	b.n	80181e6 <__swbuf_r+0x1a>
 8018244:	4b09      	ldr	r3, [pc, #36]	; (801826c <__swbuf_r+0xa0>)
 8018246:	429c      	cmp	r4, r3
 8018248:	bf08      	it	eq
 801824a:	68ec      	ldreq	r4, [r5, #12]
 801824c:	e7cb      	b.n	80181e6 <__swbuf_r+0x1a>
 801824e:	4621      	mov	r1, r4
 8018250:	4628      	mov	r0, r5
 8018252:	f000 f81f 	bl	8018294 <__swsetup_r>
 8018256:	2800      	cmp	r0, #0
 8018258:	d0cc      	beq.n	80181f4 <__swbuf_r+0x28>
 801825a:	f04f 37ff 	mov.w	r7, #4294967295
 801825e:	4638      	mov	r0, r7
 8018260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018262:	bf00      	nop
 8018264:	0801ad40 	.word	0x0801ad40
 8018268:	0801ad60 	.word	0x0801ad60
 801826c:	0801ad20 	.word	0x0801ad20

08018270 <_write_r>:
 8018270:	b538      	push	{r3, r4, r5, lr}
 8018272:	4c07      	ldr	r4, [pc, #28]	; (8018290 <_write_r+0x20>)
 8018274:	4605      	mov	r5, r0
 8018276:	4608      	mov	r0, r1
 8018278:	4611      	mov	r1, r2
 801827a:	2200      	movs	r2, #0
 801827c:	6022      	str	r2, [r4, #0]
 801827e:	461a      	mov	r2, r3
 8018280:	f7e8 fdd9 	bl	8000e36 <_write>
 8018284:	1c43      	adds	r3, r0, #1
 8018286:	d102      	bne.n	801828e <_write_r+0x1e>
 8018288:	6823      	ldr	r3, [r4, #0]
 801828a:	b103      	cbz	r3, 801828e <_write_r+0x1e>
 801828c:	602b      	str	r3, [r5, #0]
 801828e:	bd38      	pop	{r3, r4, r5, pc}
 8018290:	200079d4 	.word	0x200079d4

08018294 <__swsetup_r>:
 8018294:	4b32      	ldr	r3, [pc, #200]	; (8018360 <__swsetup_r+0xcc>)
 8018296:	b570      	push	{r4, r5, r6, lr}
 8018298:	681d      	ldr	r5, [r3, #0]
 801829a:	4606      	mov	r6, r0
 801829c:	460c      	mov	r4, r1
 801829e:	b125      	cbz	r5, 80182aa <__swsetup_r+0x16>
 80182a0:	69ab      	ldr	r3, [r5, #24]
 80182a2:	b913      	cbnz	r3, 80182aa <__swsetup_r+0x16>
 80182a4:	4628      	mov	r0, r5
 80182a6:	f7ff fb3b 	bl	8017920 <__sinit>
 80182aa:	4b2e      	ldr	r3, [pc, #184]	; (8018364 <__swsetup_r+0xd0>)
 80182ac:	429c      	cmp	r4, r3
 80182ae:	d10f      	bne.n	80182d0 <__swsetup_r+0x3c>
 80182b0:	686c      	ldr	r4, [r5, #4]
 80182b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182b6:	b29a      	uxth	r2, r3
 80182b8:	0715      	lsls	r5, r2, #28
 80182ba:	d42c      	bmi.n	8018316 <__swsetup_r+0x82>
 80182bc:	06d0      	lsls	r0, r2, #27
 80182be:	d411      	bmi.n	80182e4 <__swsetup_r+0x50>
 80182c0:	2209      	movs	r2, #9
 80182c2:	6032      	str	r2, [r6, #0]
 80182c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182c8:	81a3      	strh	r3, [r4, #12]
 80182ca:	f04f 30ff 	mov.w	r0, #4294967295
 80182ce:	e03e      	b.n	801834e <__swsetup_r+0xba>
 80182d0:	4b25      	ldr	r3, [pc, #148]	; (8018368 <__swsetup_r+0xd4>)
 80182d2:	429c      	cmp	r4, r3
 80182d4:	d101      	bne.n	80182da <__swsetup_r+0x46>
 80182d6:	68ac      	ldr	r4, [r5, #8]
 80182d8:	e7eb      	b.n	80182b2 <__swsetup_r+0x1e>
 80182da:	4b24      	ldr	r3, [pc, #144]	; (801836c <__swsetup_r+0xd8>)
 80182dc:	429c      	cmp	r4, r3
 80182de:	bf08      	it	eq
 80182e0:	68ec      	ldreq	r4, [r5, #12]
 80182e2:	e7e6      	b.n	80182b2 <__swsetup_r+0x1e>
 80182e4:	0751      	lsls	r1, r2, #29
 80182e6:	d512      	bpl.n	801830e <__swsetup_r+0x7a>
 80182e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182ea:	b141      	cbz	r1, 80182fe <__swsetup_r+0x6a>
 80182ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182f0:	4299      	cmp	r1, r3
 80182f2:	d002      	beq.n	80182fa <__swsetup_r+0x66>
 80182f4:	4630      	mov	r0, r6
 80182f6:	f7ff fba5 	bl	8017a44 <_free_r>
 80182fa:	2300      	movs	r3, #0
 80182fc:	6363      	str	r3, [r4, #52]	; 0x34
 80182fe:	89a3      	ldrh	r3, [r4, #12]
 8018300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018304:	81a3      	strh	r3, [r4, #12]
 8018306:	2300      	movs	r3, #0
 8018308:	6063      	str	r3, [r4, #4]
 801830a:	6923      	ldr	r3, [r4, #16]
 801830c:	6023      	str	r3, [r4, #0]
 801830e:	89a3      	ldrh	r3, [r4, #12]
 8018310:	f043 0308 	orr.w	r3, r3, #8
 8018314:	81a3      	strh	r3, [r4, #12]
 8018316:	6923      	ldr	r3, [r4, #16]
 8018318:	b94b      	cbnz	r3, 801832e <__swsetup_r+0x9a>
 801831a:	89a3      	ldrh	r3, [r4, #12]
 801831c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018324:	d003      	beq.n	801832e <__swsetup_r+0x9a>
 8018326:	4621      	mov	r1, r4
 8018328:	4630      	mov	r0, r6
 801832a:	f000 f917 	bl	801855c <__smakebuf_r>
 801832e:	89a2      	ldrh	r2, [r4, #12]
 8018330:	f012 0301 	ands.w	r3, r2, #1
 8018334:	d00c      	beq.n	8018350 <__swsetup_r+0xbc>
 8018336:	2300      	movs	r3, #0
 8018338:	60a3      	str	r3, [r4, #8]
 801833a:	6963      	ldr	r3, [r4, #20]
 801833c:	425b      	negs	r3, r3
 801833e:	61a3      	str	r3, [r4, #24]
 8018340:	6923      	ldr	r3, [r4, #16]
 8018342:	b953      	cbnz	r3, 801835a <__swsetup_r+0xc6>
 8018344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018348:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801834c:	d1ba      	bne.n	80182c4 <__swsetup_r+0x30>
 801834e:	bd70      	pop	{r4, r5, r6, pc}
 8018350:	0792      	lsls	r2, r2, #30
 8018352:	bf58      	it	pl
 8018354:	6963      	ldrpl	r3, [r4, #20]
 8018356:	60a3      	str	r3, [r4, #8]
 8018358:	e7f2      	b.n	8018340 <__swsetup_r+0xac>
 801835a:	2000      	movs	r0, #0
 801835c:	e7f7      	b.n	801834e <__swsetup_r+0xba>
 801835e:	bf00      	nop
 8018360:	20000034 	.word	0x20000034
 8018364:	0801ad40 	.word	0x0801ad40
 8018368:	0801ad60 	.word	0x0801ad60
 801836c:	0801ad20 	.word	0x0801ad20

08018370 <_close_r>:
 8018370:	b538      	push	{r3, r4, r5, lr}
 8018372:	4c06      	ldr	r4, [pc, #24]	; (801838c <_close_r+0x1c>)
 8018374:	2300      	movs	r3, #0
 8018376:	4605      	mov	r5, r0
 8018378:	4608      	mov	r0, r1
 801837a:	6023      	str	r3, [r4, #0]
 801837c:	f7e8 fd77 	bl	8000e6e <_close>
 8018380:	1c43      	adds	r3, r0, #1
 8018382:	d102      	bne.n	801838a <_close_r+0x1a>
 8018384:	6823      	ldr	r3, [r4, #0]
 8018386:	b103      	cbz	r3, 801838a <_close_r+0x1a>
 8018388:	602b      	str	r3, [r5, #0]
 801838a:	bd38      	pop	{r3, r4, r5, pc}
 801838c:	200079d4 	.word	0x200079d4

08018390 <__sflush_r>:
 8018390:	898a      	ldrh	r2, [r1, #12]
 8018392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018396:	4605      	mov	r5, r0
 8018398:	0710      	lsls	r0, r2, #28
 801839a:	460c      	mov	r4, r1
 801839c:	d458      	bmi.n	8018450 <__sflush_r+0xc0>
 801839e:	684b      	ldr	r3, [r1, #4]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	dc05      	bgt.n	80183b0 <__sflush_r+0x20>
 80183a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	dc02      	bgt.n	80183b0 <__sflush_r+0x20>
 80183aa:	2000      	movs	r0, #0
 80183ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183b2:	2e00      	cmp	r6, #0
 80183b4:	d0f9      	beq.n	80183aa <__sflush_r+0x1a>
 80183b6:	2300      	movs	r3, #0
 80183b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80183bc:	682f      	ldr	r7, [r5, #0]
 80183be:	6a21      	ldr	r1, [r4, #32]
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	d032      	beq.n	801842a <__sflush_r+0x9a>
 80183c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80183c6:	89a3      	ldrh	r3, [r4, #12]
 80183c8:	075a      	lsls	r2, r3, #29
 80183ca:	d505      	bpl.n	80183d8 <__sflush_r+0x48>
 80183cc:	6863      	ldr	r3, [r4, #4]
 80183ce:	1ac0      	subs	r0, r0, r3
 80183d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183d2:	b10b      	cbz	r3, 80183d8 <__sflush_r+0x48>
 80183d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80183d6:	1ac0      	subs	r0, r0, r3
 80183d8:	2300      	movs	r3, #0
 80183da:	4602      	mov	r2, r0
 80183dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183de:	6a21      	ldr	r1, [r4, #32]
 80183e0:	4628      	mov	r0, r5
 80183e2:	47b0      	blx	r6
 80183e4:	1c43      	adds	r3, r0, #1
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	d106      	bne.n	80183f8 <__sflush_r+0x68>
 80183ea:	6829      	ldr	r1, [r5, #0]
 80183ec:	291d      	cmp	r1, #29
 80183ee:	d848      	bhi.n	8018482 <__sflush_r+0xf2>
 80183f0:	4a29      	ldr	r2, [pc, #164]	; (8018498 <__sflush_r+0x108>)
 80183f2:	40ca      	lsrs	r2, r1
 80183f4:	07d6      	lsls	r6, r2, #31
 80183f6:	d544      	bpl.n	8018482 <__sflush_r+0xf2>
 80183f8:	2200      	movs	r2, #0
 80183fa:	6062      	str	r2, [r4, #4]
 80183fc:	04d9      	lsls	r1, r3, #19
 80183fe:	6922      	ldr	r2, [r4, #16]
 8018400:	6022      	str	r2, [r4, #0]
 8018402:	d504      	bpl.n	801840e <__sflush_r+0x7e>
 8018404:	1c42      	adds	r2, r0, #1
 8018406:	d101      	bne.n	801840c <__sflush_r+0x7c>
 8018408:	682b      	ldr	r3, [r5, #0]
 801840a:	b903      	cbnz	r3, 801840e <__sflush_r+0x7e>
 801840c:	6560      	str	r0, [r4, #84]	; 0x54
 801840e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018410:	602f      	str	r7, [r5, #0]
 8018412:	2900      	cmp	r1, #0
 8018414:	d0c9      	beq.n	80183aa <__sflush_r+0x1a>
 8018416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801841a:	4299      	cmp	r1, r3
 801841c:	d002      	beq.n	8018424 <__sflush_r+0x94>
 801841e:	4628      	mov	r0, r5
 8018420:	f7ff fb10 	bl	8017a44 <_free_r>
 8018424:	2000      	movs	r0, #0
 8018426:	6360      	str	r0, [r4, #52]	; 0x34
 8018428:	e7c0      	b.n	80183ac <__sflush_r+0x1c>
 801842a:	2301      	movs	r3, #1
 801842c:	4628      	mov	r0, r5
 801842e:	47b0      	blx	r6
 8018430:	1c41      	adds	r1, r0, #1
 8018432:	d1c8      	bne.n	80183c6 <__sflush_r+0x36>
 8018434:	682b      	ldr	r3, [r5, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0c5      	beq.n	80183c6 <__sflush_r+0x36>
 801843a:	2b1d      	cmp	r3, #29
 801843c:	d001      	beq.n	8018442 <__sflush_r+0xb2>
 801843e:	2b16      	cmp	r3, #22
 8018440:	d101      	bne.n	8018446 <__sflush_r+0xb6>
 8018442:	602f      	str	r7, [r5, #0]
 8018444:	e7b1      	b.n	80183aa <__sflush_r+0x1a>
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801844c:	81a3      	strh	r3, [r4, #12]
 801844e:	e7ad      	b.n	80183ac <__sflush_r+0x1c>
 8018450:	690f      	ldr	r7, [r1, #16]
 8018452:	2f00      	cmp	r7, #0
 8018454:	d0a9      	beq.n	80183aa <__sflush_r+0x1a>
 8018456:	0793      	lsls	r3, r2, #30
 8018458:	680e      	ldr	r6, [r1, #0]
 801845a:	bf08      	it	eq
 801845c:	694b      	ldreq	r3, [r1, #20]
 801845e:	600f      	str	r7, [r1, #0]
 8018460:	bf18      	it	ne
 8018462:	2300      	movne	r3, #0
 8018464:	eba6 0807 	sub.w	r8, r6, r7
 8018468:	608b      	str	r3, [r1, #8]
 801846a:	f1b8 0f00 	cmp.w	r8, #0
 801846e:	dd9c      	ble.n	80183aa <__sflush_r+0x1a>
 8018470:	4643      	mov	r3, r8
 8018472:	463a      	mov	r2, r7
 8018474:	6a21      	ldr	r1, [r4, #32]
 8018476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018478:	4628      	mov	r0, r5
 801847a:	47b0      	blx	r6
 801847c:	2800      	cmp	r0, #0
 801847e:	dc06      	bgt.n	801848e <__sflush_r+0xfe>
 8018480:	89a3      	ldrh	r3, [r4, #12]
 8018482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	f04f 30ff 	mov.w	r0, #4294967295
 801848c:	e78e      	b.n	80183ac <__sflush_r+0x1c>
 801848e:	4407      	add	r7, r0
 8018490:	eba8 0800 	sub.w	r8, r8, r0
 8018494:	e7e9      	b.n	801846a <__sflush_r+0xda>
 8018496:	bf00      	nop
 8018498:	20400001 	.word	0x20400001

0801849c <_fflush_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	690b      	ldr	r3, [r1, #16]
 80184a0:	4605      	mov	r5, r0
 80184a2:	460c      	mov	r4, r1
 80184a4:	b1db      	cbz	r3, 80184de <_fflush_r+0x42>
 80184a6:	b118      	cbz	r0, 80184b0 <_fflush_r+0x14>
 80184a8:	6983      	ldr	r3, [r0, #24]
 80184aa:	b90b      	cbnz	r3, 80184b0 <_fflush_r+0x14>
 80184ac:	f7ff fa38 	bl	8017920 <__sinit>
 80184b0:	4b0c      	ldr	r3, [pc, #48]	; (80184e4 <_fflush_r+0x48>)
 80184b2:	429c      	cmp	r4, r3
 80184b4:	d109      	bne.n	80184ca <_fflush_r+0x2e>
 80184b6:	686c      	ldr	r4, [r5, #4]
 80184b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184bc:	b17b      	cbz	r3, 80184de <_fflush_r+0x42>
 80184be:	4621      	mov	r1, r4
 80184c0:	4628      	mov	r0, r5
 80184c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184c6:	f7ff bf63 	b.w	8018390 <__sflush_r>
 80184ca:	4b07      	ldr	r3, [pc, #28]	; (80184e8 <_fflush_r+0x4c>)
 80184cc:	429c      	cmp	r4, r3
 80184ce:	d101      	bne.n	80184d4 <_fflush_r+0x38>
 80184d0:	68ac      	ldr	r4, [r5, #8]
 80184d2:	e7f1      	b.n	80184b8 <_fflush_r+0x1c>
 80184d4:	4b05      	ldr	r3, [pc, #20]	; (80184ec <_fflush_r+0x50>)
 80184d6:	429c      	cmp	r4, r3
 80184d8:	bf08      	it	eq
 80184da:	68ec      	ldreq	r4, [r5, #12]
 80184dc:	e7ec      	b.n	80184b8 <_fflush_r+0x1c>
 80184de:	2000      	movs	r0, #0
 80184e0:	bd38      	pop	{r3, r4, r5, pc}
 80184e2:	bf00      	nop
 80184e4:	0801ad40 	.word	0x0801ad40
 80184e8:	0801ad60 	.word	0x0801ad60
 80184ec:	0801ad20 	.word	0x0801ad20

080184f0 <_lseek_r>:
 80184f0:	b538      	push	{r3, r4, r5, lr}
 80184f2:	4c07      	ldr	r4, [pc, #28]	; (8018510 <_lseek_r+0x20>)
 80184f4:	4605      	mov	r5, r0
 80184f6:	4608      	mov	r0, r1
 80184f8:	4611      	mov	r1, r2
 80184fa:	2200      	movs	r2, #0
 80184fc:	6022      	str	r2, [r4, #0]
 80184fe:	461a      	mov	r2, r3
 8018500:	f7e8 fcdc 	bl	8000ebc <_lseek>
 8018504:	1c43      	adds	r3, r0, #1
 8018506:	d102      	bne.n	801850e <_lseek_r+0x1e>
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	b103      	cbz	r3, 801850e <_lseek_r+0x1e>
 801850c:	602b      	str	r3, [r5, #0]
 801850e:	bd38      	pop	{r3, r4, r5, pc}
 8018510:	200079d4 	.word	0x200079d4

08018514 <__swhatbuf_r>:
 8018514:	b570      	push	{r4, r5, r6, lr}
 8018516:	460e      	mov	r6, r1
 8018518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801851c:	2900      	cmp	r1, #0
 801851e:	b096      	sub	sp, #88	; 0x58
 8018520:	4614      	mov	r4, r2
 8018522:	461d      	mov	r5, r3
 8018524:	da07      	bge.n	8018536 <__swhatbuf_r+0x22>
 8018526:	2300      	movs	r3, #0
 8018528:	602b      	str	r3, [r5, #0]
 801852a:	89b3      	ldrh	r3, [r6, #12]
 801852c:	061a      	lsls	r2, r3, #24
 801852e:	d410      	bmi.n	8018552 <__swhatbuf_r+0x3e>
 8018530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018534:	e00e      	b.n	8018554 <__swhatbuf_r+0x40>
 8018536:	466a      	mov	r2, sp
 8018538:	f000 f864 	bl	8018604 <_fstat_r>
 801853c:	2800      	cmp	r0, #0
 801853e:	dbf2      	blt.n	8018526 <__swhatbuf_r+0x12>
 8018540:	9a01      	ldr	r2, [sp, #4]
 8018542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801854a:	425a      	negs	r2, r3
 801854c:	415a      	adcs	r2, r3
 801854e:	602a      	str	r2, [r5, #0]
 8018550:	e7ee      	b.n	8018530 <__swhatbuf_r+0x1c>
 8018552:	2340      	movs	r3, #64	; 0x40
 8018554:	2000      	movs	r0, #0
 8018556:	6023      	str	r3, [r4, #0]
 8018558:	b016      	add	sp, #88	; 0x58
 801855a:	bd70      	pop	{r4, r5, r6, pc}

0801855c <__smakebuf_r>:
 801855c:	898b      	ldrh	r3, [r1, #12]
 801855e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018560:	079d      	lsls	r5, r3, #30
 8018562:	4606      	mov	r6, r0
 8018564:	460c      	mov	r4, r1
 8018566:	d507      	bpl.n	8018578 <__smakebuf_r+0x1c>
 8018568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801856c:	6023      	str	r3, [r4, #0]
 801856e:	6123      	str	r3, [r4, #16]
 8018570:	2301      	movs	r3, #1
 8018572:	6163      	str	r3, [r4, #20]
 8018574:	b002      	add	sp, #8
 8018576:	bd70      	pop	{r4, r5, r6, pc}
 8018578:	ab01      	add	r3, sp, #4
 801857a:	466a      	mov	r2, sp
 801857c:	f7ff ffca 	bl	8018514 <__swhatbuf_r>
 8018580:	9900      	ldr	r1, [sp, #0]
 8018582:	4605      	mov	r5, r0
 8018584:	4630      	mov	r0, r6
 8018586:	f7ff faab 	bl	8017ae0 <_malloc_r>
 801858a:	b948      	cbnz	r0, 80185a0 <__smakebuf_r+0x44>
 801858c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018590:	059a      	lsls	r2, r3, #22
 8018592:	d4ef      	bmi.n	8018574 <__smakebuf_r+0x18>
 8018594:	f023 0303 	bic.w	r3, r3, #3
 8018598:	f043 0302 	orr.w	r3, r3, #2
 801859c:	81a3      	strh	r3, [r4, #12]
 801859e:	e7e3      	b.n	8018568 <__smakebuf_r+0xc>
 80185a0:	4b0d      	ldr	r3, [pc, #52]	; (80185d8 <__smakebuf_r+0x7c>)
 80185a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80185a4:	89a3      	ldrh	r3, [r4, #12]
 80185a6:	6020      	str	r0, [r4, #0]
 80185a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185ac:	81a3      	strh	r3, [r4, #12]
 80185ae:	9b00      	ldr	r3, [sp, #0]
 80185b0:	6163      	str	r3, [r4, #20]
 80185b2:	9b01      	ldr	r3, [sp, #4]
 80185b4:	6120      	str	r0, [r4, #16]
 80185b6:	b15b      	cbz	r3, 80185d0 <__smakebuf_r+0x74>
 80185b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185bc:	4630      	mov	r0, r6
 80185be:	f000 f833 	bl	8018628 <_isatty_r>
 80185c2:	b128      	cbz	r0, 80185d0 <__smakebuf_r+0x74>
 80185c4:	89a3      	ldrh	r3, [r4, #12]
 80185c6:	f023 0303 	bic.w	r3, r3, #3
 80185ca:	f043 0301 	orr.w	r3, r3, #1
 80185ce:	81a3      	strh	r3, [r4, #12]
 80185d0:	89a3      	ldrh	r3, [r4, #12]
 80185d2:	431d      	orrs	r5, r3
 80185d4:	81a5      	strh	r5, [r4, #12]
 80185d6:	e7cd      	b.n	8018574 <__smakebuf_r+0x18>
 80185d8:	080178e9 	.word	0x080178e9

080185dc <__malloc_lock>:
 80185dc:	4770      	bx	lr

080185de <__malloc_unlock>:
 80185de:	4770      	bx	lr

080185e0 <_read_r>:
 80185e0:	b538      	push	{r3, r4, r5, lr}
 80185e2:	4c07      	ldr	r4, [pc, #28]	; (8018600 <_read_r+0x20>)
 80185e4:	4605      	mov	r5, r0
 80185e6:	4608      	mov	r0, r1
 80185e8:	4611      	mov	r1, r2
 80185ea:	2200      	movs	r2, #0
 80185ec:	6022      	str	r2, [r4, #0]
 80185ee:	461a      	mov	r2, r3
 80185f0:	f7e8 fc04 	bl	8000dfc <_read>
 80185f4:	1c43      	adds	r3, r0, #1
 80185f6:	d102      	bne.n	80185fe <_read_r+0x1e>
 80185f8:	6823      	ldr	r3, [r4, #0]
 80185fa:	b103      	cbz	r3, 80185fe <_read_r+0x1e>
 80185fc:	602b      	str	r3, [r5, #0]
 80185fe:	bd38      	pop	{r3, r4, r5, pc}
 8018600:	200079d4 	.word	0x200079d4

08018604 <_fstat_r>:
 8018604:	b538      	push	{r3, r4, r5, lr}
 8018606:	4c07      	ldr	r4, [pc, #28]	; (8018624 <_fstat_r+0x20>)
 8018608:	2300      	movs	r3, #0
 801860a:	4605      	mov	r5, r0
 801860c:	4608      	mov	r0, r1
 801860e:	4611      	mov	r1, r2
 8018610:	6023      	str	r3, [r4, #0]
 8018612:	f7e8 fc38 	bl	8000e86 <_fstat>
 8018616:	1c43      	adds	r3, r0, #1
 8018618:	d102      	bne.n	8018620 <_fstat_r+0x1c>
 801861a:	6823      	ldr	r3, [r4, #0]
 801861c:	b103      	cbz	r3, 8018620 <_fstat_r+0x1c>
 801861e:	602b      	str	r3, [r5, #0]
 8018620:	bd38      	pop	{r3, r4, r5, pc}
 8018622:	bf00      	nop
 8018624:	200079d4 	.word	0x200079d4

08018628 <_isatty_r>:
 8018628:	b538      	push	{r3, r4, r5, lr}
 801862a:	4c06      	ldr	r4, [pc, #24]	; (8018644 <_isatty_r+0x1c>)
 801862c:	2300      	movs	r3, #0
 801862e:	4605      	mov	r5, r0
 8018630:	4608      	mov	r0, r1
 8018632:	6023      	str	r3, [r4, #0]
 8018634:	f7e8 fc37 	bl	8000ea6 <_isatty>
 8018638:	1c43      	adds	r3, r0, #1
 801863a:	d102      	bne.n	8018642 <_isatty_r+0x1a>
 801863c:	6823      	ldr	r3, [r4, #0]
 801863e:	b103      	cbz	r3, 8018642 <_isatty_r+0x1a>
 8018640:	602b      	str	r3, [r5, #0]
 8018642:	bd38      	pop	{r3, r4, r5, pc}
 8018644:	200079d4 	.word	0x200079d4

08018648 <_init>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	bf00      	nop
 801864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801864e:	bc08      	pop	{r3}
 8018650:	469e      	mov	lr, r3
 8018652:	4770      	bx	lr

08018654 <_fini>:
 8018654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018656:	bf00      	nop
 8018658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801865a:	bc08      	pop	{r3}
 801865c:	469e      	mov	lr, r3
 801865e:	4770      	bx	lr
