
009GUPIK_ROV_ETH_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002460  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08102700  08102700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102740  08102740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102744  08102744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08102748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004004  10000010  08102758  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004014  08102758  00024014  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000197f9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e93  00000000  00000000  00039839  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010c0  00000000  00000000  0003c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  0003d790  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a120  00000000  00000000  0003e728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d3f6  00000000  00000000  00078848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00185401  00000000  00000000  00085c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020b03f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044c0  00000000  00000000  0020b0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000010 	.word	0x10000010
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081026e8 	.word	0x081026e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000014 	.word	0x10000014
 81002dc:	081026e8 	.word	0x081026e8

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0304 	orr.w	r3, r3, #4
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8100318:	b480      	push	{r7}
 810031a:	b085      	sub	sp, #20
 810031c:	af00      	add	r7, sp, #0
 810031e:	60f8      	str	r0, [r7, #12]
 8100320:	60b9      	str	r1, [r7, #8]
 8100322:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8100324:	68fb      	ldr	r3, [r7, #12]
 8100326:	4a07      	ldr	r2, [pc, #28]	; (8100344 <vApplicationGetIdleTaskMemory+0x2c>)
 8100328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 810032a:	68bb      	ldr	r3, [r7, #8]
 810032c:	4a06      	ldr	r2, [pc, #24]	; (8100348 <vApplicationGetIdleTaskMemory+0x30>)
 810032e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8100330:	687b      	ldr	r3, [r7, #4]
 8100332:	2280      	movs	r2, #128	; 0x80
 8100334:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8100336:	bf00      	nop
 8100338:	3714      	adds	r7, #20
 810033a:	46bd      	mov	sp, r7
 810033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100340:	4770      	bx	lr
 8100342:	bf00      	nop
 8100344:	1000002c 	.word	0x1000002c
 8100348:	10000080 	.word	0x10000080

0810034c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810034c:	b5b0      	push	{r4, r5, r7, lr}
 810034e:	b088      	sub	sp, #32
 8100350:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8100352:	4b0a      	ldr	r3, [pc, #40]	; (810037c <MX_FREERTOS_Init+0x30>)
 8100354:	1d3c      	adds	r4, r7, #4
 8100356:	461d      	mov	r5, r3
 8100358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810035a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810035c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8100364:	1d3b      	adds	r3, r7, #4
 8100366:	2100      	movs	r1, #0
 8100368:	4618      	mov	r0, r3
 810036a:	f000 ff9a 	bl	81012a2 <osThreadCreate>
 810036e:	4602      	mov	r2, r0
 8100370:	4b03      	ldr	r3, [pc, #12]	; (8100380 <MX_FREERTOS_Init+0x34>)
 8100372:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8100374:	bf00      	nop
 8100376:	3720      	adds	r7, #32
 8100378:	46bd      	mov	sp, r7
 810037a:	bdb0      	pop	{r4, r5, r7, pc}
 810037c:	0810270c 	.word	0x0810270c
 8100380:	10003fcc 	.word	0x10003fcc

08100384 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8100384:	b580      	push	{r7, lr}
 8100386:	b082      	sub	sp, #8
 8100388:	af00      	add	r7, sp, #0
 810038a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 810038c:	2001      	movs	r0, #1
 810038e:	f000 ffd4 	bl	810133a <osDelay>
 8100392:	e7fb      	b.n	810038c <StartDefaultTask+0x8>

08100394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b082      	sub	sp, #8
 8100398:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810039a:	4b1c      	ldr	r3, [pc, #112]	; (810040c <main+0x78>)
 810039c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003a0:	4a1a      	ldr	r2, [pc, #104]	; (810040c <main+0x78>)
 81003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81003a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003aa:	4b18      	ldr	r3, [pc, #96]	; (810040c <main+0x78>)
 81003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81003b4:	607b      	str	r3, [r7, #4]
 81003b6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003b8:	2001      	movs	r0, #1
 81003ba:	f000 fa6d 	bl	8100898 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003be:	f000 fae7 	bl	8100990 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003c2:	2201      	movs	r2, #1
 81003c4:	2102      	movs	r1, #2
 81003c6:	2000      	movs	r0, #0
 81003c8:	f000 fa78 	bl	81008bc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003cc:	4b10      	ldr	r3, [pc, #64]	; (8100410 <main+0x7c>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	091b      	lsrs	r3, r3, #4
 81003d2:	f003 030f 	and.w	r3, r3, #15
 81003d6:	2b07      	cmp	r3, #7
 81003d8:	d108      	bne.n	81003ec <main+0x58>
 81003da:	4b0e      	ldr	r3, [pc, #56]	; (8100414 <main+0x80>)
 81003dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81003e0:	4a0c      	ldr	r2, [pc, #48]	; (8100414 <main+0x80>)
 81003e2:	f043 0301 	orr.w	r3, r3, #1
 81003e6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81003ea:	e007      	b.n	81003fc <main+0x68>
 81003ec:	4b09      	ldr	r3, [pc, #36]	; (8100414 <main+0x80>)
 81003ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003f2:	4a08      	ldr	r2, [pc, #32]	; (8100414 <main+0x80>)
 81003f4:	f043 0301 	orr.w	r3, r3, #1
 81003f8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003fc:	f000 f8e6 	bl	81005cc <HAL_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8100400:	f7ff ffa4 	bl	810034c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8100404:	f000 ff46 	bl	8101294 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100408:	e7fe      	b.n	8100408 <main+0x74>
 810040a:	bf00      	nop
 810040c:	58024400 	.word	0x58024400
 8100410:	e000ed00 	.word	0xe000ed00
 8100414:	58026400 	.word	0x58026400

08100418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100418:	b580      	push	{r7, lr}
 810041a:	b082      	sub	sp, #8
 810041c:	af00      	add	r7, sp, #0
 810041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8100420:	687b      	ldr	r3, [r7, #4]
 8100422:	681b      	ldr	r3, [r3, #0]
 8100424:	4a04      	ldr	r2, [pc, #16]	; (8100438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100426:	4293      	cmp	r3, r2
 8100428:	d101      	bne.n	810042e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810042a:	f000 f92d 	bl	8100688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810042e:	bf00      	nop
 8100430:	3708      	adds	r7, #8
 8100432:	46bd      	mov	sp, r7
 8100434:	bd80      	pop	{r7, pc}
 8100436:	bf00      	nop
 8100438:	40010000 	.word	0x40010000

0810043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	b082      	sub	sp, #8
 8100440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100442:	4b0c      	ldr	r3, [pc, #48]	; (8100474 <HAL_MspInit+0x38>)
 8100444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100448:	4a0a      	ldr	r2, [pc, #40]	; (8100474 <HAL_MspInit+0x38>)
 810044a:	f043 0302 	orr.w	r3, r3, #2
 810044e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100452:	4b08      	ldr	r3, [pc, #32]	; (8100474 <HAL_MspInit+0x38>)
 8100454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100458:	f003 0302 	and.w	r3, r3, #2
 810045c:	607b      	str	r3, [r7, #4]
 810045e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100460:	2200      	movs	r2, #0
 8100462:	210f      	movs	r1, #15
 8100464:	f06f 0001 	mvn.w	r0, #1
 8100468:	f000 f9da 	bl	8100820 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810046c:	bf00      	nop
 810046e:	3708      	adds	r7, #8
 8100470:	46bd      	mov	sp, r7
 8100472:	bd80      	pop	{r7, pc}
 8100474:	58024400 	.word	0x58024400

08100478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100478:	b580      	push	{r7, lr}
 810047a:	b08e      	sub	sp, #56	; 0x38
 810047c:	af00      	add	r7, sp, #0
 810047e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8100480:	2300      	movs	r3, #0
 8100482:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8100484:	2300      	movs	r3, #0
 8100486:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8100488:	2200      	movs	r2, #0
 810048a:	6879      	ldr	r1, [r7, #4]
 810048c:	2019      	movs	r0, #25
 810048e:	f000 f9c7 	bl	8100820 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8100492:	2019      	movs	r0, #25
 8100494:	f000 f9de 	bl	8100854 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8100498:	4b21      	ldr	r3, [pc, #132]	; (8100520 <HAL_InitTick+0xa8>)
 810049a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810049e:	4a20      	ldr	r2, [pc, #128]	; (8100520 <HAL_InitTick+0xa8>)
 81004a0:	f043 0301 	orr.w	r3, r3, #1
 81004a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81004a8:	4b1d      	ldr	r3, [pc, #116]	; (8100520 <HAL_InitTick+0xa8>)
 81004aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81004ae:	f003 0301 	and.w	r3, r3, #1
 81004b2:	60bb      	str	r3, [r7, #8]
 81004b4:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81004b6:	f107 020c 	add.w	r2, r7, #12
 81004ba:	f107 0310 	add.w	r3, r7, #16
 81004be:	4611      	mov	r1, r2
 81004c0:	4618      	mov	r0, r3
 81004c2:	f000 fc2d 	bl	8100d20 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 81004c6:	f000 fc15 	bl	8100cf4 <HAL_RCC_GetPCLK2Freq>
 81004ca:	4603      	mov	r3, r0
 81004cc:	005b      	lsls	r3, r3, #1
 81004ce:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 81004d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81004d2:	4a14      	ldr	r2, [pc, #80]	; (8100524 <HAL_InitTick+0xac>)
 81004d4:	fba2 2303 	umull	r2, r3, r2, r3
 81004d8:	0c9b      	lsrs	r3, r3, #18
 81004da:	3b01      	subs	r3, #1
 81004dc:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 81004de:	4b12      	ldr	r3, [pc, #72]	; (8100528 <HAL_InitTick+0xb0>)
 81004e0:	4a12      	ldr	r2, [pc, #72]	; (810052c <HAL_InitTick+0xb4>)
 81004e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 81004e4:	4b10      	ldr	r3, [pc, #64]	; (8100528 <HAL_InitTick+0xb0>)
 81004e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 81004ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 81004ec:	4a0e      	ldr	r2, [pc, #56]	; (8100528 <HAL_InitTick+0xb0>)
 81004ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81004f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 81004f2:	4b0d      	ldr	r3, [pc, #52]	; (8100528 <HAL_InitTick+0xb0>)
 81004f4:	2200      	movs	r2, #0
 81004f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004f8:	4b0b      	ldr	r3, [pc, #44]	; (8100528 <HAL_InitTick+0xb0>)
 81004fa:	2200      	movs	r2, #0
 81004fc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 81004fe:	480a      	ldr	r0, [pc, #40]	; (8100528 <HAL_InitTick+0xb0>)
 8100500:	f000 fc50 	bl	8100da4 <HAL_TIM_Base_Init>
 8100504:	4603      	mov	r3, r0
 8100506:	2b00      	cmp	r3, #0
 8100508:	d104      	bne.n	8100514 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 810050a:	4807      	ldr	r0, [pc, #28]	; (8100528 <HAL_InitTick+0xb0>)
 810050c:	f000 fc80 	bl	8100e10 <HAL_TIM_Base_Start_IT>
 8100510:	4603      	mov	r3, r0
 8100512:	e000      	b.n	8100516 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8100514:	2301      	movs	r3, #1
}
 8100516:	4618      	mov	r0, r3
 8100518:	3738      	adds	r7, #56	; 0x38
 810051a:	46bd      	mov	sp, r7
 810051c:	bd80      	pop	{r7, pc}
 810051e:	bf00      	nop
 8100520:	58024400 	.word	0x58024400
 8100524:	431bde83 	.word	0x431bde83
 8100528:	10003fd0 	.word	0x10003fd0
 810052c:	40010000 	.word	0x40010000

08100530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100530:	b480      	push	{r7}
 8100532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100534:	bf00      	nop
 8100536:	46bd      	mov	sp, r7
 8100538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810053c:	4770      	bx	lr

0810053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810053e:	b480      	push	{r7}
 8100540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100542:	e7fe      	b.n	8100542 <HardFault_Handler+0x4>

08100544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100544:	b480      	push	{r7}
 8100546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100548:	e7fe      	b.n	8100548 <MemManage_Handler+0x4>

0810054a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810054a:	b480      	push	{r7}
 810054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810054e:	e7fe      	b.n	810054e <BusFault_Handler+0x4>

08100550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100550:	b480      	push	{r7}
 8100552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100554:	e7fe      	b.n	8100554 <UsageFault_Handler+0x4>

08100556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100556:	b480      	push	{r7}
 8100558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810055a:	bf00      	nop
 810055c:	46bd      	mov	sp, r7
 810055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100562:	4770      	bx	lr

08100564 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8100564:	b580      	push	{r7, lr}
 8100566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8100568:	4802      	ldr	r0, [pc, #8]	; (8100574 <TIM1_UP_IRQHandler+0x10>)
 810056a:	f000 fc7b 	bl	8100e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 810056e:	bf00      	nop
 8100570:	bd80      	pop	{r7, pc}
 8100572:	bf00      	nop
 8100574:	10003fd0 	.word	0x10003fd0

08100578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100578:	f8df d034 	ldr.w	sp, [pc, #52]	; 81005b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 810057c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 810057e:	e003      	b.n	8100588 <LoopCopyDataInit>

08100580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100580:	4b0c      	ldr	r3, [pc, #48]	; (81005b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8100582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8100586:	3104      	adds	r1, #4

08100588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100588:	480b      	ldr	r0, [pc, #44]	; (81005b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 810058a:	4b0c      	ldr	r3, [pc, #48]	; (81005bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 810058c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 810058e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100590:	d3f6      	bcc.n	8100580 <CopyDataInit>
  ldr  r2, =_sbss
 8100592:	4a0b      	ldr	r2, [pc, #44]	; (81005c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8100594:	e002      	b.n	810059c <LoopFillZerobss>

08100596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8100596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8100598:	f842 3b04 	str.w	r3, [r2], #4

0810059c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 810059c:	4b09      	ldr	r3, [pc, #36]	; (81005c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 810059e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81005a0:	d3f9      	bcc.n	8100596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81005a2:	f7ff fe9d 	bl	81002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81005a6:	f002 f87b 	bl	81026a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005aa:	f7ff fef3 	bl	8100394 <main>
  bx  lr    
 81005ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005b0:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81005b4:	08102748 	.word	0x08102748
  ldr  r0, =_sdata
 81005b8:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81005bc:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 81005c0:	10000010 	.word	0x10000010
  ldr  r3, = _ebss
 81005c4:	10004014 	.word	0x10004014

081005c8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81005c8:	e7fe      	b.n	81005c8 <ADC3_IRQHandler>
	...

081005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81005cc:	b580      	push	{r7, lr}
 81005ce:	b082      	sub	sp, #8
 81005d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81005d2:	4b28      	ldr	r3, [pc, #160]	; (8100674 <HAL_Init+0xa8>)
 81005d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005d8:	4a26      	ldr	r2, [pc, #152]	; (8100674 <HAL_Init+0xa8>)
 81005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81005de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81005e2:	4b24      	ldr	r3, [pc, #144]	; (8100674 <HAL_Init+0xa8>)
 81005e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81005ec:	603b      	str	r3, [r7, #0]
 81005ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005f0:	4b21      	ldr	r3, [pc, #132]	; (8100678 <HAL_Init+0xac>)
 81005f2:	681b      	ldr	r3, [r3, #0]
 81005f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81005f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81005fc:	4a1e      	ldr	r2, [pc, #120]	; (8100678 <HAL_Init+0xac>)
 81005fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100602:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100604:	4b1c      	ldr	r3, [pc, #112]	; (8100678 <HAL_Init+0xac>)
 8100606:	681b      	ldr	r3, [r3, #0]
 8100608:	4a1b      	ldr	r2, [pc, #108]	; (8100678 <HAL_Init+0xac>)
 810060a:	f043 0301 	orr.w	r3, r3, #1
 810060e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100610:	2003      	movs	r0, #3
 8100612:	f000 f8fa 	bl	810080a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100616:	f000 f9c9 	bl	81009ac <HAL_RCC_GetSysClockFreq>
 810061a:	4601      	mov	r1, r0
 810061c:	4b15      	ldr	r3, [pc, #84]	; (8100674 <HAL_Init+0xa8>)
 810061e:	699b      	ldr	r3, [r3, #24]
 8100620:	0a1b      	lsrs	r3, r3, #8
 8100622:	f003 030f 	and.w	r3, r3, #15
 8100626:	4a15      	ldr	r2, [pc, #84]	; (810067c <HAL_Init+0xb0>)
 8100628:	5cd3      	ldrb	r3, [r2, r3]
 810062a:	f003 031f 	and.w	r3, r3, #31
 810062e:	fa21 f303 	lsr.w	r3, r1, r3
 8100632:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100634:	4b0f      	ldr	r3, [pc, #60]	; (8100674 <HAL_Init+0xa8>)
 8100636:	699b      	ldr	r3, [r3, #24]
 8100638:	f003 030f 	and.w	r3, r3, #15
 810063c:	4a0f      	ldr	r2, [pc, #60]	; (810067c <HAL_Init+0xb0>)
 810063e:	5cd3      	ldrb	r3, [r2, r3]
 8100640:	f003 031f 	and.w	r3, r3, #31
 8100644:	687a      	ldr	r2, [r7, #4]
 8100646:	fa22 f303 	lsr.w	r3, r2, r3
 810064a:	4a0d      	ldr	r2, [pc, #52]	; (8100680 <HAL_Init+0xb4>)
 810064c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810064e:	4b0c      	ldr	r3, [pc, #48]	; (8100680 <HAL_Init+0xb4>)
 8100650:	681b      	ldr	r3, [r3, #0]
 8100652:	4a0c      	ldr	r2, [pc, #48]	; (8100684 <HAL_Init+0xb8>)
 8100654:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100656:	2000      	movs	r0, #0
 8100658:	f7ff ff0e 	bl	8100478 <HAL_InitTick>
 810065c:	4603      	mov	r3, r0
 810065e:	2b00      	cmp	r3, #0
 8100660:	d001      	beq.n	8100666 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100662:	2301      	movs	r3, #1
 8100664:	e002      	b.n	810066c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100666:	f7ff fee9 	bl	810043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810066a:	2300      	movs	r3, #0
}
 810066c:	4618      	mov	r0, r3
 810066e:	3708      	adds	r7, #8
 8100670:	46bd      	mov	sp, r7
 8100672:	bd80      	pop	{r7, pc}
 8100674:	58024400 	.word	0x58024400
 8100678:	40024400 	.word	0x40024400
 810067c:	08102730 	.word	0x08102730
 8100680:	10000004 	.word	0x10000004
 8100684:	10000000 	.word	0x10000000

08100688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100688:	b480      	push	{r7}
 810068a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810068c:	4b06      	ldr	r3, [pc, #24]	; (81006a8 <HAL_IncTick+0x20>)
 810068e:	781b      	ldrb	r3, [r3, #0]
 8100690:	461a      	mov	r2, r3
 8100692:	4b06      	ldr	r3, [pc, #24]	; (81006ac <HAL_IncTick+0x24>)
 8100694:	681b      	ldr	r3, [r3, #0]
 8100696:	4413      	add	r3, r2
 8100698:	4a04      	ldr	r2, [pc, #16]	; (81006ac <HAL_IncTick+0x24>)
 810069a:	6013      	str	r3, [r2, #0]
}
 810069c:	bf00      	nop
 810069e:	46bd      	mov	sp, r7
 81006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a4:	4770      	bx	lr
 81006a6:	bf00      	nop
 81006a8:	10000008 	.word	0x10000008
 81006ac:	10004010 	.word	0x10004010

081006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006b0:	b480      	push	{r7}
 81006b2:	b085      	sub	sp, #20
 81006b4:	af00      	add	r7, sp, #0
 81006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006b8:	687b      	ldr	r3, [r7, #4]
 81006ba:	f003 0307 	and.w	r3, r3, #7
 81006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006c0:	4b0c      	ldr	r3, [pc, #48]	; (81006f4 <__NVIC_SetPriorityGrouping+0x44>)
 81006c2:	68db      	ldr	r3, [r3, #12]
 81006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81006c6:	68ba      	ldr	r2, [r7, #8]
 81006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81006cc:	4013      	ands	r3, r2
 81006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006d0:	68fb      	ldr	r3, [r7, #12]
 81006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006d4:	68bb      	ldr	r3, [r7, #8]
 81006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006e2:	4a04      	ldr	r2, [pc, #16]	; (81006f4 <__NVIC_SetPriorityGrouping+0x44>)
 81006e4:	68bb      	ldr	r3, [r7, #8]
 81006e6:	60d3      	str	r3, [r2, #12]
}
 81006e8:	bf00      	nop
 81006ea:	3714      	adds	r7, #20
 81006ec:	46bd      	mov	sp, r7
 81006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f2:	4770      	bx	lr
 81006f4:	e000ed00 	.word	0xe000ed00

081006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006f8:	b480      	push	{r7}
 81006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006fc:	4b04      	ldr	r3, [pc, #16]	; (8100710 <__NVIC_GetPriorityGrouping+0x18>)
 81006fe:	68db      	ldr	r3, [r3, #12]
 8100700:	0a1b      	lsrs	r3, r3, #8
 8100702:	f003 0307 	and.w	r3, r3, #7
}
 8100706:	4618      	mov	r0, r3
 8100708:	46bd      	mov	sp, r7
 810070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810070e:	4770      	bx	lr
 8100710:	e000ed00 	.word	0xe000ed00

08100714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100714:	b480      	push	{r7}
 8100716:	b083      	sub	sp, #12
 8100718:	af00      	add	r7, sp, #0
 810071a:	4603      	mov	r3, r0
 810071c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810071e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100722:	2b00      	cmp	r3, #0
 8100724:	db0b      	blt.n	810073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100726:	88fb      	ldrh	r3, [r7, #6]
 8100728:	f003 021f 	and.w	r2, r3, #31
 810072c:	4907      	ldr	r1, [pc, #28]	; (810074c <__NVIC_EnableIRQ+0x38>)
 810072e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100732:	095b      	lsrs	r3, r3, #5
 8100734:	2001      	movs	r0, #1
 8100736:	fa00 f202 	lsl.w	r2, r0, r2
 810073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810073e:	bf00      	nop
 8100740:	370c      	adds	r7, #12
 8100742:	46bd      	mov	sp, r7
 8100744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100748:	4770      	bx	lr
 810074a:	bf00      	nop
 810074c:	e000e100 	.word	0xe000e100

08100750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100750:	b480      	push	{r7}
 8100752:	b083      	sub	sp, #12
 8100754:	af00      	add	r7, sp, #0
 8100756:	4603      	mov	r3, r0
 8100758:	6039      	str	r1, [r7, #0]
 810075a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100760:	2b00      	cmp	r3, #0
 8100762:	db0a      	blt.n	810077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100764:	683b      	ldr	r3, [r7, #0]
 8100766:	b2da      	uxtb	r2, r3
 8100768:	490c      	ldr	r1, [pc, #48]	; (810079c <__NVIC_SetPriority+0x4c>)
 810076a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810076e:	0112      	lsls	r2, r2, #4
 8100770:	b2d2      	uxtb	r2, r2
 8100772:	440b      	add	r3, r1
 8100774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100778:	e00a      	b.n	8100790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810077a:	683b      	ldr	r3, [r7, #0]
 810077c:	b2da      	uxtb	r2, r3
 810077e:	4908      	ldr	r1, [pc, #32]	; (81007a0 <__NVIC_SetPriority+0x50>)
 8100780:	88fb      	ldrh	r3, [r7, #6]
 8100782:	f003 030f 	and.w	r3, r3, #15
 8100786:	3b04      	subs	r3, #4
 8100788:	0112      	lsls	r2, r2, #4
 810078a:	b2d2      	uxtb	r2, r2
 810078c:	440b      	add	r3, r1
 810078e:	761a      	strb	r2, [r3, #24]
}
 8100790:	bf00      	nop
 8100792:	370c      	adds	r7, #12
 8100794:	46bd      	mov	sp, r7
 8100796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079a:	4770      	bx	lr
 810079c:	e000e100 	.word	0xe000e100
 81007a0:	e000ed00 	.word	0xe000ed00

081007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007a4:	b480      	push	{r7}
 81007a6:	b089      	sub	sp, #36	; 0x24
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	60f8      	str	r0, [r7, #12]
 81007ac:	60b9      	str	r1, [r7, #8]
 81007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81007b0:	68fb      	ldr	r3, [r7, #12]
 81007b2:	f003 0307 	and.w	r3, r3, #7
 81007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81007b8:	69fb      	ldr	r3, [r7, #28]
 81007ba:	f1c3 0307 	rsb	r3, r3, #7
 81007be:	2b04      	cmp	r3, #4
 81007c0:	bf28      	it	cs
 81007c2:	2304      	movcs	r3, #4
 81007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81007c6:	69fb      	ldr	r3, [r7, #28]
 81007c8:	3304      	adds	r3, #4
 81007ca:	2b06      	cmp	r3, #6
 81007cc:	d902      	bls.n	81007d4 <NVIC_EncodePriority+0x30>
 81007ce:	69fb      	ldr	r3, [r7, #28]
 81007d0:	3b03      	subs	r3, #3
 81007d2:	e000      	b.n	81007d6 <NVIC_EncodePriority+0x32>
 81007d4:	2300      	movs	r3, #0
 81007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007d8:	f04f 32ff 	mov.w	r2, #4294967295
 81007dc:	69bb      	ldr	r3, [r7, #24]
 81007de:	fa02 f303 	lsl.w	r3, r2, r3
 81007e2:	43da      	mvns	r2, r3
 81007e4:	68bb      	ldr	r3, [r7, #8]
 81007e6:	401a      	ands	r2, r3
 81007e8:	697b      	ldr	r3, [r7, #20]
 81007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007ec:	f04f 31ff 	mov.w	r1, #4294967295
 81007f0:	697b      	ldr	r3, [r7, #20]
 81007f2:	fa01 f303 	lsl.w	r3, r1, r3
 81007f6:	43d9      	mvns	r1, r3
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007fc:	4313      	orrs	r3, r2
         );
}
 81007fe:	4618      	mov	r0, r3
 8100800:	3724      	adds	r7, #36	; 0x24
 8100802:	46bd      	mov	sp, r7
 8100804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100808:	4770      	bx	lr

0810080a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810080a:	b580      	push	{r7, lr}
 810080c:	b082      	sub	sp, #8
 810080e:	af00      	add	r7, sp, #0
 8100810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100812:	6878      	ldr	r0, [r7, #4]
 8100814:	f7ff ff4c 	bl	81006b0 <__NVIC_SetPriorityGrouping>
}
 8100818:	bf00      	nop
 810081a:	3708      	adds	r7, #8
 810081c:	46bd      	mov	sp, r7
 810081e:	bd80      	pop	{r7, pc}

08100820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100820:	b580      	push	{r7, lr}
 8100822:	b086      	sub	sp, #24
 8100824:	af00      	add	r7, sp, #0
 8100826:	4603      	mov	r3, r0
 8100828:	60b9      	str	r1, [r7, #8]
 810082a:	607a      	str	r2, [r7, #4]
 810082c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810082e:	f7ff ff63 	bl	81006f8 <__NVIC_GetPriorityGrouping>
 8100832:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100834:	687a      	ldr	r2, [r7, #4]
 8100836:	68b9      	ldr	r1, [r7, #8]
 8100838:	6978      	ldr	r0, [r7, #20]
 810083a:	f7ff ffb3 	bl	81007a4 <NVIC_EncodePriority>
 810083e:	4602      	mov	r2, r0
 8100840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100844:	4611      	mov	r1, r2
 8100846:	4618      	mov	r0, r3
 8100848:	f7ff ff82 	bl	8100750 <__NVIC_SetPriority>
}
 810084c:	bf00      	nop
 810084e:	3718      	adds	r7, #24
 8100850:	46bd      	mov	sp, r7
 8100852:	bd80      	pop	{r7, pc}

08100854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100854:	b580      	push	{r7, lr}
 8100856:	b082      	sub	sp, #8
 8100858:	af00      	add	r7, sp, #0
 810085a:	4603      	mov	r3, r0
 810085c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100862:	4618      	mov	r0, r3
 8100864:	f7ff ff56 	bl	8100714 <__NVIC_EnableIRQ>
}
 8100868:	bf00      	nop
 810086a:	3708      	adds	r7, #8
 810086c:	46bd      	mov	sp, r7
 810086e:	bd80      	pop	{r7, pc}

08100870 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100870:	b480      	push	{r7}
 8100872:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100874:	4b07      	ldr	r3, [pc, #28]	; (8100894 <HAL_GetCurrentCPUID+0x24>)
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	091b      	lsrs	r3, r3, #4
 810087a:	f003 030f 	and.w	r3, r3, #15
 810087e:	2b07      	cmp	r3, #7
 8100880:	d101      	bne.n	8100886 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100882:	2303      	movs	r3, #3
 8100884:	e000      	b.n	8100888 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100886:	2301      	movs	r3, #1
  }
}
 8100888:	4618      	mov	r0, r3
 810088a:	46bd      	mov	sp, r7
 810088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100890:	4770      	bx	lr
 8100892:	bf00      	nop
 8100894:	e000ed00 	.word	0xe000ed00

08100898 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100898:	b480      	push	{r7}
 810089a:	b083      	sub	sp, #12
 810089c:	af00      	add	r7, sp, #0
 810089e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81008a0:	4b05      	ldr	r3, [pc, #20]	; (81008b8 <HAL_HSEM_ActivateNotification+0x20>)
 81008a2:	681a      	ldr	r2, [r3, #0]
 81008a4:	4904      	ldr	r1, [pc, #16]	; (81008b8 <HAL_HSEM_ActivateNotification+0x20>)
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	4313      	orrs	r3, r2
 81008aa:	600b      	str	r3, [r1, #0]
#endif
}
 81008ac:	bf00      	nop
 81008ae:	370c      	adds	r7, #12
 81008b0:	46bd      	mov	sp, r7
 81008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b6:	4770      	bx	lr
 81008b8:	58026510 	.word	0x58026510

081008bc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81008bc:	b580      	push	{r7, lr}
 81008be:	b084      	sub	sp, #16
 81008c0:	af00      	add	r7, sp, #0
 81008c2:	60f8      	str	r0, [r7, #12]
 81008c4:	460b      	mov	r3, r1
 81008c6:	607a      	str	r2, [r7, #4]
 81008c8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81008ca:	4b2f      	ldr	r3, [pc, #188]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81008cc:	681b      	ldr	r3, [r3, #0]
 81008ce:	f023 0201 	bic.w	r2, r3, #1
 81008d2:	492d      	ldr	r1, [pc, #180]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81008d4:	68fb      	ldr	r3, [r7, #12]
 81008d6:	4313      	orrs	r3, r2
 81008d8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81008da:	687b      	ldr	r3, [r7, #4]
 81008dc:	2b00      	cmp	r3, #0
 81008de:	d121      	bne.n	8100924 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81008e0:	f7ff ffc6 	bl	8100870 <HAL_GetCurrentCPUID>
 81008e4:	4603      	mov	r3, r0
 81008e6:	2b03      	cmp	r3, #3
 81008e8:	d148      	bne.n	810097c <HAL_PWREx_EnterSTOPMode+0xc0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81008ea:	4b27      	ldr	r3, [pc, #156]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81008ec:	691b      	ldr	r3, [r3, #16]
 81008ee:	4a26      	ldr	r2, [pc, #152]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81008f0:	f023 0301 	bic.w	r3, r3, #1
 81008f4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008f6:	4b25      	ldr	r3, [pc, #148]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 81008f8:	691b      	ldr	r3, [r3, #16]
 81008fa:	4a24      	ldr	r2, [pc, #144]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 81008fc:	f043 0304 	orr.w	r3, r3, #4
 8100900:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8100906:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810090a:	7afb      	ldrb	r3, [r7, #11]
 810090c:	2b01      	cmp	r3, #1
 810090e:	d101      	bne.n	8100914 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100910:	bf30      	wfi
 8100912:	e000      	b.n	8100916 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100914:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100916:	4b1d      	ldr	r3, [pc, #116]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8100918:	691b      	ldr	r3, [r3, #16]
 810091a:	4a1c      	ldr	r2, [pc, #112]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 810091c:	f023 0304 	bic.w	r3, r3, #4
 8100920:	6113      	str	r3, [r2, #16]
 8100922:	e02e      	b.n	8100982 <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	2b01      	cmp	r3, #1
 8100928:	d121      	bne.n	810096e <HAL_PWREx_EnterSTOPMode+0xb2>
  {
    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 810092a:	4b17      	ldr	r3, [pc, #92]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 810092c:	691b      	ldr	r3, [r3, #16]
 810092e:	4a16      	ldr	r2, [pc, #88]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8100930:	f023 0302 	bic.w	r3, r3, #2
 8100934:	6113      	str	r3, [r2, #16]

#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100936:	f7ff ff9b 	bl	8100870 <HAL_GetCurrentCPUID>
 810093a:	4603      	mov	r3, r0
 810093c:	2b01      	cmp	r3, #1
 810093e:	d11f      	bne.n	8100980 <HAL_PWREx_EnterSTOPMode+0xc4>
      */
      return;
    }

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100940:	4b12      	ldr	r3, [pc, #72]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8100942:	691b      	ldr	r3, [r3, #16]
 8100944:	4a11      	ldr	r2, [pc, #68]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8100946:	f043 0304 	orr.w	r3, r3, #4
 810094a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810094c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8100950:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100954:	7afb      	ldrb	r3, [r7, #11]
 8100956:	2b01      	cmp	r3, #1
 8100958:	d101      	bne.n	810095e <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810095a:	bf30      	wfi
 810095c:	e000      	b.n	8100960 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810095e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100960:	4b0a      	ldr	r3, [pc, #40]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8100962:	691b      	ldr	r3, [r3, #16]
 8100964:	4a09      	ldr	r2, [pc, #36]	; (810098c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8100966:	f023 0304 	bic.w	r3, r3, #4
 810096a:	6113      	str	r3, [r2, #16]
 810096c:	e009      	b.n	8100982 <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810096e:	4b06      	ldr	r3, [pc, #24]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8100970:	691b      	ldr	r3, [r3, #16]
 8100972:	4a05      	ldr	r2, [pc, #20]	; (8100988 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8100974:	f023 0304 	bic.w	r3, r3, #4
 8100978:	6113      	str	r3, [r2, #16]
 810097a:	e002      	b.n	8100982 <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 810097c:	bf00      	nop
 810097e:	e000      	b.n	8100982 <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 8100980:	bf00      	nop
  }
}
 8100982:	3710      	adds	r7, #16
 8100984:	46bd      	mov	sp, r7
 8100986:	bd80      	pop	{r7, pc}
 8100988:	58024800 	.word	0x58024800
 810098c:	e000ed00 	.word	0xe000ed00

08100990 <HAL_PWREx_ClearPendingEvent>:
  *         to CSLEEP or CSTOP. It should be called just before APIs performing
  *         enter low power mode using Wait For Event request.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100990:	b580      	push	{r7, lr}
 8100992:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100994:	f7ff ff6c 	bl	8100870 <HAL_GetCurrentCPUID>
 8100998:	4603      	mov	r3, r0
 810099a:	2b03      	cmp	r3, #3
 810099c:	d101      	bne.n	81009a2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810099e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81009a0:	e001      	b.n	81009a6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81009a2:	bf40      	sev
    __WFE ();
 81009a4:	bf20      	wfe
}
 81009a6:	bf00      	nop
 81009a8:	bd80      	pop	{r7, pc}
	...

081009ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81009ac:	b480      	push	{r7}
 81009ae:	b089      	sub	sp, #36	; 0x24
 81009b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81009b2:	4baf      	ldr	r3, [pc, #700]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81009b4:	691b      	ldr	r3, [r3, #16]
 81009b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81009ba:	2b18      	cmp	r3, #24
 81009bc:	f200 814e 	bhi.w	8100c5c <HAL_RCC_GetSysClockFreq+0x2b0>
 81009c0:	a201      	add	r2, pc, #4	; (adr r2, 81009c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81009c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009c6:	bf00      	nop
 81009c8:	08100a2d 	.word	0x08100a2d
 81009cc:	08100c5d 	.word	0x08100c5d
 81009d0:	08100c5d 	.word	0x08100c5d
 81009d4:	08100c5d 	.word	0x08100c5d
 81009d8:	08100c5d 	.word	0x08100c5d
 81009dc:	08100c5d 	.word	0x08100c5d
 81009e0:	08100c5d 	.word	0x08100c5d
 81009e4:	08100c5d 	.word	0x08100c5d
 81009e8:	08100a53 	.word	0x08100a53
 81009ec:	08100c5d 	.word	0x08100c5d
 81009f0:	08100c5d 	.word	0x08100c5d
 81009f4:	08100c5d 	.word	0x08100c5d
 81009f8:	08100c5d 	.word	0x08100c5d
 81009fc:	08100c5d 	.word	0x08100c5d
 8100a00:	08100c5d 	.word	0x08100c5d
 8100a04:	08100c5d 	.word	0x08100c5d
 8100a08:	08100a59 	.word	0x08100a59
 8100a0c:	08100c5d 	.word	0x08100c5d
 8100a10:	08100c5d 	.word	0x08100c5d
 8100a14:	08100c5d 	.word	0x08100c5d
 8100a18:	08100c5d 	.word	0x08100c5d
 8100a1c:	08100c5d 	.word	0x08100c5d
 8100a20:	08100c5d 	.word	0x08100c5d
 8100a24:	08100c5d 	.word	0x08100c5d
 8100a28:	08100a5f 	.word	0x08100a5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a2c:	4b90      	ldr	r3, [pc, #576]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a2e:	681b      	ldr	r3, [r3, #0]
 8100a30:	f003 0320 	and.w	r3, r3, #32
 8100a34:	2b00      	cmp	r3, #0
 8100a36:	d009      	beq.n	8100a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100a38:	4b8d      	ldr	r3, [pc, #564]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a3a:	681b      	ldr	r3, [r3, #0]
 8100a3c:	08db      	lsrs	r3, r3, #3
 8100a3e:	f003 0303 	and.w	r3, r3, #3
 8100a42:	4a8c      	ldr	r2, [pc, #560]	; (8100c74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100a44:	fa22 f303 	lsr.w	r3, r2, r3
 8100a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100a4a:	e10a      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a4c:	4b89      	ldr	r3, [pc, #548]	; (8100c74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100a4e:	61bb      	str	r3, [r7, #24]
    break;
 8100a50:	e107      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100a52:	4b89      	ldr	r3, [pc, #548]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100a54:	61bb      	str	r3, [r7, #24]
    break;
 8100a56:	e104      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100a58:	4b88      	ldr	r3, [pc, #544]	; (8100c7c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8100a5a:	61bb      	str	r3, [r7, #24]
    break;
 8100a5c:	e101      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100a5e:	4b84      	ldr	r3, [pc, #528]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a62:	f003 0303 	and.w	r3, r3, #3
 8100a66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100a68:	4b81      	ldr	r3, [pc, #516]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a6c:	091b      	lsrs	r3, r3, #4
 8100a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100a72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a74:	4b7e      	ldr	r3, [pc, #504]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100a78:	f003 0301 	and.w	r3, r3, #1
 8100a7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100a7e:	4b7c      	ldr	r3, [pc, #496]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100a82:	08db      	lsrs	r3, r3, #3
 8100a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a88:	68fa      	ldr	r2, [r7, #12]
 8100a8a:	fb02 f303 	mul.w	r3, r2, r3
 8100a8e:	ee07 3a90 	vmov	s15, r3
 8100a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100a9a:	693b      	ldr	r3, [r7, #16]
 8100a9c:	2b00      	cmp	r3, #0
 8100a9e:	f000 80da 	beq.w	8100c56 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8100aa2:	697b      	ldr	r3, [r7, #20]
 8100aa4:	2b01      	cmp	r3, #1
 8100aa6:	d05a      	beq.n	8100b5e <HAL_RCC_GetSysClockFreq+0x1b2>
 8100aa8:	2b01      	cmp	r3, #1
 8100aaa:	d302      	bcc.n	8100ab2 <HAL_RCC_GetSysClockFreq+0x106>
 8100aac:	2b02      	cmp	r3, #2
 8100aae:	d078      	beq.n	8100ba2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8100ab0:	e099      	b.n	8100be6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ab2:	4b6f      	ldr	r3, [pc, #444]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100ab4:	681b      	ldr	r3, [r3, #0]
 8100ab6:	f003 0320 	and.w	r3, r3, #32
 8100aba:	2b00      	cmp	r3, #0
 8100abc:	d02d      	beq.n	8100b1a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100abe:	4b6c      	ldr	r3, [pc, #432]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100ac0:	681b      	ldr	r3, [r3, #0]
 8100ac2:	08db      	lsrs	r3, r3, #3
 8100ac4:	f003 0303 	and.w	r3, r3, #3
 8100ac8:	4a6a      	ldr	r2, [pc, #424]	; (8100c74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100aca:	fa22 f303 	lsr.w	r3, r2, r3
 8100ace:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	ee07 3a90 	vmov	s15, r3
 8100ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ada:	693b      	ldr	r3, [r7, #16]
 8100adc:	ee07 3a90 	vmov	s15, r3
 8100ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ae8:	4b61      	ldr	r3, [pc, #388]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100af0:	ee07 3a90 	vmov	s15, r3
 8100af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100af8:	ed97 6a02 	vldr	s12, [r7, #8]
 8100afc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8100c80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100b18:	e087      	b.n	8100c2a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b1a:	693b      	ldr	r3, [r7, #16]
 8100b1c:	ee07 3a90 	vmov	s15, r3
 8100b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b24:	eddf 6a57 	vldr	s13, [pc, #348]	; 8100c84 <HAL_RCC_GetSysClockFreq+0x2d8>
 8100b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b2c:	4b50      	ldr	r3, [pc, #320]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b34:	ee07 3a90 	vmov	s15, r3
 8100b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b40:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8100c80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b5c:	e065      	b.n	8100c2a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b5e:	693b      	ldr	r3, [r7, #16]
 8100b60:	ee07 3a90 	vmov	s15, r3
 8100b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b68:	eddf 6a47 	vldr	s13, [pc, #284]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2dc>
 8100b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b70:	4b3f      	ldr	r3, [pc, #252]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b78:	ee07 3a90 	vmov	s15, r3
 8100b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b80:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b84:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8100c80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100ba0:	e043      	b.n	8100c2a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ba2:	693b      	ldr	r3, [r7, #16]
 8100ba4:	ee07 3a90 	vmov	s15, r3
 8100ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bac:	eddf 6a37 	vldr	s13, [pc, #220]	; 8100c8c <HAL_RCC_GetSysClockFreq+0x2e0>
 8100bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bb4:	4b2e      	ldr	r3, [pc, #184]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bbc:	ee07 3a90 	vmov	s15, r3
 8100bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bc8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8100c80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100be0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100be4:	e021      	b.n	8100c2a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100be6:	693b      	ldr	r3, [r7, #16]
 8100be8:	ee07 3a90 	vmov	s15, r3
 8100bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bf0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2dc>
 8100bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bf8:	4b1d      	ldr	r3, [pc, #116]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c00:	ee07 3a90 	vmov	s15, r3
 8100c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c08:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c0c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8100c80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100c28:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100c2a:	4b11      	ldr	r3, [pc, #68]	; (8100c70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100c2e:	0a5b      	lsrs	r3, r3, #9
 8100c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100c34:	3301      	adds	r3, #1
 8100c36:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8100c38:	683b      	ldr	r3, [r7, #0]
 8100c3a:	ee07 3a90 	vmov	s15, r3
 8100c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8100c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100c4e:	ee17 3a90 	vmov	r3, s15
 8100c52:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8100c54:	e005      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8100c56:	2300      	movs	r3, #0
 8100c58:	61bb      	str	r3, [r7, #24]
    break;
 8100c5a:	e002      	b.n	8100c62 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8100c5c:	4b06      	ldr	r3, [pc, #24]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100c5e:	61bb      	str	r3, [r7, #24]
    break;
 8100c60:	bf00      	nop
  }

  return sysclockfreq;
 8100c62:	69bb      	ldr	r3, [r7, #24]
}
 8100c64:	4618      	mov	r0, r3
 8100c66:	3724      	adds	r7, #36	; 0x24
 8100c68:	46bd      	mov	sp, r7
 8100c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c6e:	4770      	bx	lr
 8100c70:	58024400 	.word	0x58024400
 8100c74:	03d09000 	.word	0x03d09000
 8100c78:	003d0900 	.word	0x003d0900
 8100c7c:	007a1200 	.word	0x007a1200
 8100c80:	46000000 	.word	0x46000000
 8100c84:	4c742400 	.word	0x4c742400
 8100c88:	4a742400 	.word	0x4a742400
 8100c8c:	4af42400 	.word	0x4af42400

08100c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8100c90:	b580      	push	{r7, lr}
 8100c92:	b082      	sub	sp, #8
 8100c94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8100c96:	f7ff fe89 	bl	81009ac <HAL_RCC_GetSysClockFreq>
 8100c9a:	4601      	mov	r1, r0
 8100c9c:	4b11      	ldr	r3, [pc, #68]	; (8100ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8100c9e:	699b      	ldr	r3, [r3, #24]
 8100ca0:	0a1b      	lsrs	r3, r3, #8
 8100ca2:	f003 030f 	and.w	r3, r3, #15
 8100ca6:	4a10      	ldr	r2, [pc, #64]	; (8100ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8100ca8:	5cd3      	ldrb	r3, [r2, r3]
 8100caa:	f003 031f 	and.w	r3, r3, #31
 8100cae:	fa21 f303 	lsr.w	r3, r1, r3
 8100cb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100cb4:	4b0b      	ldr	r3, [pc, #44]	; (8100ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8100cb6:	699b      	ldr	r3, [r3, #24]
 8100cb8:	f003 030f 	and.w	r3, r3, #15
 8100cbc:	4a0a      	ldr	r2, [pc, #40]	; (8100ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8100cbe:	5cd3      	ldrb	r3, [r2, r3]
 8100cc0:	f003 031f 	and.w	r3, r3, #31
 8100cc4:	687a      	ldr	r2, [r7, #4]
 8100cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8100cca:	4a08      	ldr	r2, [pc, #32]	; (8100cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8100ccc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100cce:	4b07      	ldr	r3, [pc, #28]	; (8100cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cd0:	681b      	ldr	r3, [r3, #0]
 8100cd2:	4a07      	ldr	r2, [pc, #28]	; (8100cf0 <HAL_RCC_GetHCLKFreq+0x60>)
 8100cd4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8100cd6:	4b05      	ldr	r3, [pc, #20]	; (8100cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cd8:	681b      	ldr	r3, [r3, #0]
}
 8100cda:	4618      	mov	r0, r3
 8100cdc:	3708      	adds	r7, #8
 8100cde:	46bd      	mov	sp, r7
 8100ce0:	bd80      	pop	{r7, pc}
 8100ce2:	bf00      	nop
 8100ce4:	58024400 	.word	0x58024400
 8100ce8:	08102730 	.word	0x08102730
 8100cec:	10000004 	.word	0x10000004
 8100cf0:	10000000 	.word	0x10000000

08100cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8100cf4:	b580      	push	{r7, lr}
 8100cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8100cf8:	f7ff ffca 	bl	8100c90 <HAL_RCC_GetHCLKFreq>
 8100cfc:	4601      	mov	r1, r0
 8100cfe:	4b06      	ldr	r3, [pc, #24]	; (8100d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8100d00:	69db      	ldr	r3, [r3, #28]
 8100d02:	0a1b      	lsrs	r3, r3, #8
 8100d04:	f003 0307 	and.w	r3, r3, #7
 8100d08:	4a04      	ldr	r2, [pc, #16]	; (8100d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8100d0a:	5cd3      	ldrb	r3, [r2, r3]
 8100d0c:	f003 031f 	and.w	r3, r3, #31
 8100d10:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8100d14:	4618      	mov	r0, r3
 8100d16:	bd80      	pop	{r7, pc}
 8100d18:	58024400 	.word	0x58024400
 8100d1c:	08102730 	.word	0x08102730

08100d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8100d20:	b480      	push	{r7}
 8100d22:	b083      	sub	sp, #12
 8100d24:	af00      	add	r7, sp, #0
 8100d26:	6078      	str	r0, [r7, #4]
 8100d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8100d2a:	687b      	ldr	r3, [r7, #4]
 8100d2c:	223f      	movs	r2, #63	; 0x3f
 8100d2e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8100d30:	4b1a      	ldr	r3, [pc, #104]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d32:	691b      	ldr	r3, [r3, #16]
 8100d34:	f003 0207 	and.w	r2, r3, #7
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8100d3c:	4b17      	ldr	r3, [pc, #92]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d3e:	699b      	ldr	r3, [r3, #24]
 8100d40:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8100d44:	687b      	ldr	r3, [r7, #4]
 8100d46:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8100d48:	4b14      	ldr	r3, [pc, #80]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d4a:	699b      	ldr	r3, [r3, #24]
 8100d4c:	f003 020f 	and.w	r2, r3, #15
 8100d50:	687b      	ldr	r3, [r7, #4]
 8100d52:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8100d54:	4b11      	ldr	r3, [pc, #68]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d56:	699b      	ldr	r3, [r3, #24]
 8100d58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8100d60:	4b0e      	ldr	r3, [pc, #56]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d62:	69db      	ldr	r3, [r3, #28]
 8100d64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d68:	687b      	ldr	r3, [r7, #4]
 8100d6a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8100d6c:	4b0b      	ldr	r3, [pc, #44]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d6e:	69db      	ldr	r3, [r3, #28]
 8100d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8100d78:	4b08      	ldr	r3, [pc, #32]	; (8100d9c <HAL_RCC_GetClockConfig+0x7c>)
 8100d7a:	6a1b      	ldr	r3, [r3, #32]
 8100d7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8100d84:	4b06      	ldr	r3, [pc, #24]	; (8100da0 <HAL_RCC_GetClockConfig+0x80>)
 8100d86:	681b      	ldr	r3, [r3, #0]
 8100d88:	f003 020f 	and.w	r2, r3, #15
 8100d8c:	683b      	ldr	r3, [r7, #0]
 8100d8e:	601a      	str	r2, [r3, #0]
}
 8100d90:	bf00      	nop
 8100d92:	370c      	adds	r7, #12
 8100d94:	46bd      	mov	sp, r7
 8100d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d9a:	4770      	bx	lr
 8100d9c:	58024400 	.word	0x58024400
 8100da0:	52002000 	.word	0x52002000

08100da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8100da4:	b580      	push	{r7, lr}
 8100da6:	b082      	sub	sp, #8
 8100da8:	af00      	add	r7, sp, #0
 8100daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8100dac:	687b      	ldr	r3, [r7, #4]
 8100dae:	2b00      	cmp	r3, #0
 8100db0:	d101      	bne.n	8100db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8100db2:	2301      	movs	r3, #1
 8100db4:	e01d      	b.n	8100df2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8100db6:	687b      	ldr	r3, [r7, #4]
 8100db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8100dbc:	b2db      	uxtb	r3, r3
 8100dbe:	2b00      	cmp	r3, #0
 8100dc0:	d106      	bne.n	8100dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8100dc2:	687b      	ldr	r3, [r7, #4]
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8100dca:	6878      	ldr	r0, [r7, #4]
 8100dcc:	f000 f815 	bl	8100dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	2202      	movs	r2, #2
 8100dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	681a      	ldr	r2, [r3, #0]
 8100ddc:	687b      	ldr	r3, [r7, #4]
 8100dde:	3304      	adds	r3, #4
 8100de0:	4619      	mov	r1, r3
 8100de2:	4610      	mov	r0, r2
 8100de4:	f000 f986 	bl	81010f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8100de8:	687b      	ldr	r3, [r7, #4]
 8100dea:	2201      	movs	r2, #1
 8100dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8100df0:	2300      	movs	r3, #0
}
 8100df2:	4618      	mov	r0, r3
 8100df4:	3708      	adds	r7, #8
 8100df6:	46bd      	mov	sp, r7
 8100df8:	bd80      	pop	{r7, pc}

08100dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8100dfa:	b480      	push	{r7}
 8100dfc:	b083      	sub	sp, #12
 8100dfe:	af00      	add	r7, sp, #0
 8100e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8100e02:	bf00      	nop
 8100e04:	370c      	adds	r7, #12
 8100e06:	46bd      	mov	sp, r7
 8100e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e0c:	4770      	bx	lr
	...

08100e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8100e10:	b480      	push	{r7}
 8100e12:	b085      	sub	sp, #20
 8100e14:	af00      	add	r7, sp, #0
 8100e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	681b      	ldr	r3, [r3, #0]
 8100e1c:	68da      	ldr	r2, [r3, #12]
 8100e1e:	687b      	ldr	r3, [r7, #4]
 8100e20:	681b      	ldr	r3, [r3, #0]
 8100e22:	f042 0201 	orr.w	r2, r2, #1
 8100e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	689a      	ldr	r2, [r3, #8]
 8100e2e:	4b0c      	ldr	r3, [pc, #48]	; (8100e60 <HAL_TIM_Base_Start_IT+0x50>)
 8100e30:	4013      	ands	r3, r2
 8100e32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100e34:	68fb      	ldr	r3, [r7, #12]
 8100e36:	2b06      	cmp	r3, #6
 8100e38:	d00b      	beq.n	8100e52 <HAL_TIM_Base_Start_IT+0x42>
 8100e3a:	68fb      	ldr	r3, [r7, #12]
 8100e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8100e40:	d007      	beq.n	8100e52 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	681b      	ldr	r3, [r3, #0]
 8100e46:	681a      	ldr	r2, [r3, #0]
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	681b      	ldr	r3, [r3, #0]
 8100e4c:	f042 0201 	orr.w	r2, r2, #1
 8100e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8100e52:	2300      	movs	r3, #0
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	3714      	adds	r7, #20
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e5e:	4770      	bx	lr
 8100e60:	00010007 	.word	0x00010007

08100e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8100e64:	b580      	push	{r7, lr}
 8100e66:	b082      	sub	sp, #8
 8100e68:	af00      	add	r7, sp, #0
 8100e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	681b      	ldr	r3, [r3, #0]
 8100e70:	691b      	ldr	r3, [r3, #16]
 8100e72:	f003 0302 	and.w	r3, r3, #2
 8100e76:	2b02      	cmp	r3, #2
 8100e78:	d122      	bne.n	8100ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8100e7a:	687b      	ldr	r3, [r7, #4]
 8100e7c:	681b      	ldr	r3, [r3, #0]
 8100e7e:	68db      	ldr	r3, [r3, #12]
 8100e80:	f003 0302 	and.w	r3, r3, #2
 8100e84:	2b02      	cmp	r3, #2
 8100e86:	d11b      	bne.n	8100ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	681b      	ldr	r3, [r3, #0]
 8100e8c:	f06f 0202 	mvn.w	r2, #2
 8100e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8100e92:	687b      	ldr	r3, [r7, #4]
 8100e94:	2201      	movs	r2, #1
 8100e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	699b      	ldr	r3, [r3, #24]
 8100e9e:	f003 0303 	and.w	r3, r3, #3
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	d003      	beq.n	8100eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8100ea6:	6878      	ldr	r0, [r7, #4]
 8100ea8:	f000 f905 	bl	81010b6 <HAL_TIM_IC_CaptureCallback>
 8100eac:	e005      	b.n	8100eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8100eae:	6878      	ldr	r0, [r7, #4]
 8100eb0:	f000 f8f7 	bl	81010a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100eb4:	6878      	ldr	r0, [r7, #4]
 8100eb6:	f000 f908 	bl	81010ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100eba:	687b      	ldr	r3, [r7, #4]
 8100ebc:	2200      	movs	r2, #0
 8100ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	681b      	ldr	r3, [r3, #0]
 8100ec4:	691b      	ldr	r3, [r3, #16]
 8100ec6:	f003 0304 	and.w	r3, r3, #4
 8100eca:	2b04      	cmp	r3, #4
 8100ecc:	d122      	bne.n	8100f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	681b      	ldr	r3, [r3, #0]
 8100ed2:	68db      	ldr	r3, [r3, #12]
 8100ed4:	f003 0304 	and.w	r3, r3, #4
 8100ed8:	2b04      	cmp	r3, #4
 8100eda:	d11b      	bne.n	8100f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8100edc:	687b      	ldr	r3, [r7, #4]
 8100ede:	681b      	ldr	r3, [r3, #0]
 8100ee0:	f06f 0204 	mvn.w	r2, #4
 8100ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8100ee6:	687b      	ldr	r3, [r7, #4]
 8100ee8:	2202      	movs	r2, #2
 8100eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8100eec:	687b      	ldr	r3, [r7, #4]
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	699b      	ldr	r3, [r3, #24]
 8100ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8100ef6:	2b00      	cmp	r3, #0
 8100ef8:	d003      	beq.n	8100f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100efa:	6878      	ldr	r0, [r7, #4]
 8100efc:	f000 f8db 	bl	81010b6 <HAL_TIM_IC_CaptureCallback>
 8100f00:	e005      	b.n	8100f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100f02:	6878      	ldr	r0, [r7, #4]
 8100f04:	f000 f8cd 	bl	81010a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100f08:	6878      	ldr	r0, [r7, #4]
 8100f0a:	f000 f8de 	bl	81010ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	2200      	movs	r2, #0
 8100f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	691b      	ldr	r3, [r3, #16]
 8100f1a:	f003 0308 	and.w	r3, r3, #8
 8100f1e:	2b08      	cmp	r3, #8
 8100f20:	d122      	bne.n	8100f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	681b      	ldr	r3, [r3, #0]
 8100f26:	68db      	ldr	r3, [r3, #12]
 8100f28:	f003 0308 	and.w	r3, r3, #8
 8100f2c:	2b08      	cmp	r3, #8
 8100f2e:	d11b      	bne.n	8100f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	681b      	ldr	r3, [r3, #0]
 8100f34:	f06f 0208 	mvn.w	r2, #8
 8100f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	2204      	movs	r2, #4
 8100f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8100f40:	687b      	ldr	r3, [r7, #4]
 8100f42:	681b      	ldr	r3, [r3, #0]
 8100f44:	69db      	ldr	r3, [r3, #28]
 8100f46:	f003 0303 	and.w	r3, r3, #3
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	d003      	beq.n	8100f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100f4e:	6878      	ldr	r0, [r7, #4]
 8100f50:	f000 f8b1 	bl	81010b6 <HAL_TIM_IC_CaptureCallback>
 8100f54:	e005      	b.n	8100f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100f56:	6878      	ldr	r0, [r7, #4]
 8100f58:	f000 f8a3 	bl	81010a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100f5c:	6878      	ldr	r0, [r7, #4]
 8100f5e:	f000 f8b4 	bl	81010ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100f62:	687b      	ldr	r3, [r7, #4]
 8100f64:	2200      	movs	r2, #0
 8100f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	691b      	ldr	r3, [r3, #16]
 8100f6e:	f003 0310 	and.w	r3, r3, #16
 8100f72:	2b10      	cmp	r3, #16
 8100f74:	d122      	bne.n	8100fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8100f76:	687b      	ldr	r3, [r7, #4]
 8100f78:	681b      	ldr	r3, [r3, #0]
 8100f7a:	68db      	ldr	r3, [r3, #12]
 8100f7c:	f003 0310 	and.w	r3, r3, #16
 8100f80:	2b10      	cmp	r3, #16
 8100f82:	d11b      	bne.n	8100fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8100f84:	687b      	ldr	r3, [r7, #4]
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	f06f 0210 	mvn.w	r2, #16
 8100f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	2208      	movs	r2, #8
 8100f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8100f94:	687b      	ldr	r3, [r7, #4]
 8100f96:	681b      	ldr	r3, [r3, #0]
 8100f98:	69db      	ldr	r3, [r3, #28]
 8100f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8100f9e:	2b00      	cmp	r3, #0
 8100fa0:	d003      	beq.n	8100faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100fa2:	6878      	ldr	r0, [r7, #4]
 8100fa4:	f000 f887 	bl	81010b6 <HAL_TIM_IC_CaptureCallback>
 8100fa8:	e005      	b.n	8100fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100faa:	6878      	ldr	r0, [r7, #4]
 8100fac:	f000 f879 	bl	81010a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100fb0:	6878      	ldr	r0, [r7, #4]
 8100fb2:	f000 f88a 	bl	81010ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	2200      	movs	r2, #0
 8100fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	681b      	ldr	r3, [r3, #0]
 8100fc0:	691b      	ldr	r3, [r3, #16]
 8100fc2:	f003 0301 	and.w	r3, r3, #1
 8100fc6:	2b01      	cmp	r3, #1
 8100fc8:	d10e      	bne.n	8100fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	68db      	ldr	r3, [r3, #12]
 8100fd0:	f003 0301 	and.w	r3, r3, #1
 8100fd4:	2b01      	cmp	r3, #1
 8100fd6:	d107      	bne.n	8100fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	681b      	ldr	r3, [r3, #0]
 8100fdc:	f06f 0201 	mvn.w	r2, #1
 8100fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8100fe2:	6878      	ldr	r0, [r7, #4]
 8100fe4:	f7ff fa18 	bl	8100418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	691b      	ldr	r3, [r3, #16]
 8100fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100ff2:	2b80      	cmp	r3, #128	; 0x80
 8100ff4:	d10e      	bne.n	8101014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	68db      	ldr	r3, [r3, #12]
 8100ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101000:	2b80      	cmp	r3, #128	; 0x80
 8101002:	d107      	bne.n	8101014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810100c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810100e:	6878      	ldr	r0, [r7, #4]
 8101010:	f000 f914 	bl	810123c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	681b      	ldr	r3, [r3, #0]
 8101018:	691b      	ldr	r3, [r3, #16]
 810101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810101e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101022:	d10e      	bne.n	8101042 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101024:	687b      	ldr	r3, [r7, #4]
 8101026:	681b      	ldr	r3, [r3, #0]
 8101028:	68db      	ldr	r3, [r3, #12]
 810102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810102e:	2b80      	cmp	r3, #128	; 0x80
 8101030:	d107      	bne.n	8101042 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	681b      	ldr	r3, [r3, #0]
 8101036:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810103a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810103c:	6878      	ldr	r0, [r7, #4]
 810103e:	f000 f907 	bl	8101250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101042:	687b      	ldr	r3, [r7, #4]
 8101044:	681b      	ldr	r3, [r3, #0]
 8101046:	691b      	ldr	r3, [r3, #16]
 8101048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810104c:	2b40      	cmp	r3, #64	; 0x40
 810104e:	d10e      	bne.n	810106e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	681b      	ldr	r3, [r3, #0]
 8101054:	68db      	ldr	r3, [r3, #12]
 8101056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810105a:	2b40      	cmp	r3, #64	; 0x40
 810105c:	d107      	bne.n	810106e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	681b      	ldr	r3, [r3, #0]
 8101062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8101066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101068:	6878      	ldr	r0, [r7, #4]
 810106a:	f000 f838 	bl	81010de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	691b      	ldr	r3, [r3, #16]
 8101074:	f003 0320 	and.w	r3, r3, #32
 8101078:	2b20      	cmp	r3, #32
 810107a:	d10e      	bne.n	810109a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	681b      	ldr	r3, [r3, #0]
 8101080:	68db      	ldr	r3, [r3, #12]
 8101082:	f003 0320 	and.w	r3, r3, #32
 8101086:	2b20      	cmp	r3, #32
 8101088:	d107      	bne.n	810109a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810108a:	687b      	ldr	r3, [r7, #4]
 810108c:	681b      	ldr	r3, [r3, #0]
 810108e:	f06f 0220 	mvn.w	r2, #32
 8101092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101094:	6878      	ldr	r0, [r7, #4]
 8101096:	f000 f8c7 	bl	8101228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810109a:	bf00      	nop
 810109c:	3708      	adds	r7, #8
 810109e:	46bd      	mov	sp, r7
 81010a0:	bd80      	pop	{r7, pc}

081010a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81010a2:	b480      	push	{r7}
 81010a4:	b083      	sub	sp, #12
 81010a6:	af00      	add	r7, sp, #0
 81010a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81010aa:	bf00      	nop
 81010ac:	370c      	adds	r7, #12
 81010ae:	46bd      	mov	sp, r7
 81010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010b4:	4770      	bx	lr

081010b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81010b6:	b480      	push	{r7}
 81010b8:	b083      	sub	sp, #12
 81010ba:	af00      	add	r7, sp, #0
 81010bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81010be:	bf00      	nop
 81010c0:	370c      	adds	r7, #12
 81010c2:	46bd      	mov	sp, r7
 81010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010c8:	4770      	bx	lr

081010ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81010ca:	b480      	push	{r7}
 81010cc:	b083      	sub	sp, #12
 81010ce:	af00      	add	r7, sp, #0
 81010d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81010d2:	bf00      	nop
 81010d4:	370c      	adds	r7, #12
 81010d6:	46bd      	mov	sp, r7
 81010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010dc:	4770      	bx	lr

081010de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81010de:	b480      	push	{r7}
 81010e0:	b083      	sub	sp, #12
 81010e2:	af00      	add	r7, sp, #0
 81010e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81010e6:	bf00      	nop
 81010e8:	370c      	adds	r7, #12
 81010ea:	46bd      	mov	sp, r7
 81010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f0:	4770      	bx	lr
	...

081010f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81010f4:	b480      	push	{r7}
 81010f6:	b085      	sub	sp, #20
 81010f8:	af00      	add	r7, sp, #0
 81010fa:	6078      	str	r0, [r7, #4]
 81010fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	681b      	ldr	r3, [r3, #0]
 8101102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	4a40      	ldr	r2, [pc, #256]	; (8101208 <TIM_Base_SetConfig+0x114>)
 8101108:	4293      	cmp	r3, r2
 810110a:	d013      	beq.n	8101134 <TIM_Base_SetConfig+0x40>
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101112:	d00f      	beq.n	8101134 <TIM_Base_SetConfig+0x40>
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	4a3d      	ldr	r2, [pc, #244]	; (810120c <TIM_Base_SetConfig+0x118>)
 8101118:	4293      	cmp	r3, r2
 810111a:	d00b      	beq.n	8101134 <TIM_Base_SetConfig+0x40>
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	4a3c      	ldr	r2, [pc, #240]	; (8101210 <TIM_Base_SetConfig+0x11c>)
 8101120:	4293      	cmp	r3, r2
 8101122:	d007      	beq.n	8101134 <TIM_Base_SetConfig+0x40>
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	4a3b      	ldr	r2, [pc, #236]	; (8101214 <TIM_Base_SetConfig+0x120>)
 8101128:	4293      	cmp	r3, r2
 810112a:	d003      	beq.n	8101134 <TIM_Base_SetConfig+0x40>
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	4a3a      	ldr	r2, [pc, #232]	; (8101218 <TIM_Base_SetConfig+0x124>)
 8101130:	4293      	cmp	r3, r2
 8101132:	d108      	bne.n	8101146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101134:	68fb      	ldr	r3, [r7, #12]
 8101136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810113a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810113c:	683b      	ldr	r3, [r7, #0]
 810113e:	685b      	ldr	r3, [r3, #4]
 8101140:	68fa      	ldr	r2, [r7, #12]
 8101142:	4313      	orrs	r3, r2
 8101144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101146:	687b      	ldr	r3, [r7, #4]
 8101148:	4a2f      	ldr	r2, [pc, #188]	; (8101208 <TIM_Base_SetConfig+0x114>)
 810114a:	4293      	cmp	r3, r2
 810114c:	d01f      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101154:	d01b      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	4a2c      	ldr	r2, [pc, #176]	; (810120c <TIM_Base_SetConfig+0x118>)
 810115a:	4293      	cmp	r3, r2
 810115c:	d017      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	4a2b      	ldr	r2, [pc, #172]	; (8101210 <TIM_Base_SetConfig+0x11c>)
 8101162:	4293      	cmp	r3, r2
 8101164:	d013      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	4a2a      	ldr	r2, [pc, #168]	; (8101214 <TIM_Base_SetConfig+0x120>)
 810116a:	4293      	cmp	r3, r2
 810116c:	d00f      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 810116e:	687b      	ldr	r3, [r7, #4]
 8101170:	4a29      	ldr	r2, [pc, #164]	; (8101218 <TIM_Base_SetConfig+0x124>)
 8101172:	4293      	cmp	r3, r2
 8101174:	d00b      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	4a28      	ldr	r2, [pc, #160]	; (810121c <TIM_Base_SetConfig+0x128>)
 810117a:	4293      	cmp	r3, r2
 810117c:	d007      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	4a27      	ldr	r2, [pc, #156]	; (8101220 <TIM_Base_SetConfig+0x12c>)
 8101182:	4293      	cmp	r3, r2
 8101184:	d003      	beq.n	810118e <TIM_Base_SetConfig+0x9a>
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	4a26      	ldr	r2, [pc, #152]	; (8101224 <TIM_Base_SetConfig+0x130>)
 810118a:	4293      	cmp	r3, r2
 810118c:	d108      	bne.n	81011a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810118e:	68fb      	ldr	r3, [r7, #12]
 8101190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101196:	683b      	ldr	r3, [r7, #0]
 8101198:	68db      	ldr	r3, [r3, #12]
 810119a:	68fa      	ldr	r2, [r7, #12]
 810119c:	4313      	orrs	r3, r2
 810119e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81011a0:	68fb      	ldr	r3, [r7, #12]
 81011a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81011a6:	683b      	ldr	r3, [r7, #0]
 81011a8:	695b      	ldr	r3, [r3, #20]
 81011aa:	4313      	orrs	r3, r2
 81011ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	68fa      	ldr	r2, [r7, #12]
 81011b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81011b4:	683b      	ldr	r3, [r7, #0]
 81011b6:	689a      	ldr	r2, [r3, #8]
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81011bc:	683b      	ldr	r3, [r7, #0]
 81011be:	681a      	ldr	r2, [r3, #0]
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	4a10      	ldr	r2, [pc, #64]	; (8101208 <TIM_Base_SetConfig+0x114>)
 81011c8:	4293      	cmp	r3, r2
 81011ca:	d00f      	beq.n	81011ec <TIM_Base_SetConfig+0xf8>
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	4a12      	ldr	r2, [pc, #72]	; (8101218 <TIM_Base_SetConfig+0x124>)
 81011d0:	4293      	cmp	r3, r2
 81011d2:	d00b      	beq.n	81011ec <TIM_Base_SetConfig+0xf8>
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	4a11      	ldr	r2, [pc, #68]	; (810121c <TIM_Base_SetConfig+0x128>)
 81011d8:	4293      	cmp	r3, r2
 81011da:	d007      	beq.n	81011ec <TIM_Base_SetConfig+0xf8>
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	4a10      	ldr	r2, [pc, #64]	; (8101220 <TIM_Base_SetConfig+0x12c>)
 81011e0:	4293      	cmp	r3, r2
 81011e2:	d003      	beq.n	81011ec <TIM_Base_SetConfig+0xf8>
 81011e4:	687b      	ldr	r3, [r7, #4]
 81011e6:	4a0f      	ldr	r2, [pc, #60]	; (8101224 <TIM_Base_SetConfig+0x130>)
 81011e8:	4293      	cmp	r3, r2
 81011ea:	d103      	bne.n	81011f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81011ec:	683b      	ldr	r3, [r7, #0]
 81011ee:	691a      	ldr	r2, [r3, #16]
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	2201      	movs	r2, #1
 81011f8:	615a      	str	r2, [r3, #20]
}
 81011fa:	bf00      	nop
 81011fc:	3714      	adds	r7, #20
 81011fe:	46bd      	mov	sp, r7
 8101200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101204:	4770      	bx	lr
 8101206:	bf00      	nop
 8101208:	40010000 	.word	0x40010000
 810120c:	40000400 	.word	0x40000400
 8101210:	40000800 	.word	0x40000800
 8101214:	40000c00 	.word	0x40000c00
 8101218:	40010400 	.word	0x40010400
 810121c:	40014000 	.word	0x40014000
 8101220:	40014400 	.word	0x40014400
 8101224:	40014800 	.word	0x40014800

08101228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101228:	b480      	push	{r7}
 810122a:	b083      	sub	sp, #12
 810122c:	af00      	add	r7, sp, #0
 810122e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101230:	bf00      	nop
 8101232:	370c      	adds	r7, #12
 8101234:	46bd      	mov	sp, r7
 8101236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810123a:	4770      	bx	lr

0810123c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810123c:	b480      	push	{r7}
 810123e:	b083      	sub	sp, #12
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101244:	bf00      	nop
 8101246:	370c      	adds	r7, #12
 8101248:	46bd      	mov	sp, r7
 810124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810124e:	4770      	bx	lr

08101250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101250:	b480      	push	{r7}
 8101252:	b083      	sub	sp, #12
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101258:	bf00      	nop
 810125a:	370c      	adds	r7, #12
 810125c:	46bd      	mov	sp, r7
 810125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101262:	4770      	bx	lr

08101264 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8101264:	b480      	push	{r7}
 8101266:	b085      	sub	sp, #20
 8101268:	af00      	add	r7, sp, #0
 810126a:	4603      	mov	r3, r0
 810126c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 810126e:	2300      	movs	r3, #0
 8101270:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8101272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101276:	2b84      	cmp	r3, #132	; 0x84
 8101278:	d005      	beq.n	8101286 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 810127a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810127e:	68fb      	ldr	r3, [r7, #12]
 8101280:	4413      	add	r3, r2
 8101282:	3303      	adds	r3, #3
 8101284:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8101286:	68fb      	ldr	r3, [r7, #12]
}
 8101288:	4618      	mov	r0, r3
 810128a:	3714      	adds	r7, #20
 810128c:	46bd      	mov	sp, r7
 810128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101292:	4770      	bx	lr

08101294 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8101294:	b580      	push	{r7, lr}
 8101296:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8101298:	f000 fada 	bl	8101850 <vTaskStartScheduler>
  
  return osOK;
 810129c:	2300      	movs	r3, #0
}
 810129e:	4618      	mov	r0, r3
 81012a0:	bd80      	pop	{r7, pc}

081012a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 81012a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 81012a4:	b089      	sub	sp, #36	; 0x24
 81012a6:	af04      	add	r7, sp, #16
 81012a8:	6078      	str	r0, [r7, #4]
 81012aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	695b      	ldr	r3, [r3, #20]
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d020      	beq.n	81012f6 <osThreadCreate+0x54>
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	699b      	ldr	r3, [r3, #24]
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d01c      	beq.n	81012f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	685c      	ldr	r4, [r3, #4]
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	681d      	ldr	r5, [r3, #0]
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	691e      	ldr	r6, [r3, #16]
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 81012ce:	4618      	mov	r0, r3
 81012d0:	f7ff ffc8 	bl	8101264 <makeFreeRtosPriority>
 81012d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	695b      	ldr	r3, [r3, #20]
 81012da:	687a      	ldr	r2, [r7, #4]
 81012dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81012de:	9202      	str	r2, [sp, #8]
 81012e0:	9301      	str	r3, [sp, #4]
 81012e2:	9100      	str	r1, [sp, #0]
 81012e4:	683b      	ldr	r3, [r7, #0]
 81012e6:	4632      	mov	r2, r6
 81012e8:	4629      	mov	r1, r5
 81012ea:	4620      	mov	r0, r4
 81012ec:	f000 f8ed 	bl	81014ca <xTaskCreateStatic>
 81012f0:	4603      	mov	r3, r0
 81012f2:	60fb      	str	r3, [r7, #12]
 81012f4:	e01c      	b.n	8101330 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	685c      	ldr	r4, [r3, #4]
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101302:	b29e      	uxth	r6, r3
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810130a:	4618      	mov	r0, r3
 810130c:	f7ff ffaa 	bl	8101264 <makeFreeRtosPriority>
 8101310:	4602      	mov	r2, r0
 8101312:	f107 030c 	add.w	r3, r7, #12
 8101316:	9301      	str	r3, [sp, #4]
 8101318:	9200      	str	r2, [sp, #0]
 810131a:	683b      	ldr	r3, [r7, #0]
 810131c:	4632      	mov	r2, r6
 810131e:	4629      	mov	r1, r5
 8101320:	4620      	mov	r0, r4
 8101322:	f000 f92c 	bl	810157e <xTaskCreate>
 8101326:	4603      	mov	r3, r0
 8101328:	2b01      	cmp	r3, #1
 810132a:	d001      	beq.n	8101330 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 810132c:	2300      	movs	r3, #0
 810132e:	e000      	b.n	8101332 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8101330:	68fb      	ldr	r3, [r7, #12]
}
 8101332:	4618      	mov	r0, r3
 8101334:	3714      	adds	r7, #20
 8101336:	46bd      	mov	sp, r7
 8101338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810133a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 810133a:	b580      	push	{r7, lr}
 810133c:	b084      	sub	sp, #16
 810133e:	af00      	add	r7, sp, #0
 8101340:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8101346:	68fb      	ldr	r3, [r7, #12]
 8101348:	2b00      	cmp	r3, #0
 810134a:	d001      	beq.n	8101350 <osDelay+0x16>
 810134c:	68fb      	ldr	r3, [r7, #12]
 810134e:	e000      	b.n	8101352 <osDelay+0x18>
 8101350:	2301      	movs	r3, #1
 8101352:	4618      	mov	r0, r3
 8101354:	f000 fa48 	bl	81017e8 <vTaskDelay>
  
  return osOK;
 8101358:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 810135a:	4618      	mov	r0, r3
 810135c:	3710      	adds	r7, #16
 810135e:	46bd      	mov	sp, r7
 8101360:	bd80      	pop	{r7, pc}

08101362 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101362:	b480      	push	{r7}
 8101364:	b083      	sub	sp, #12
 8101366:	af00      	add	r7, sp, #0
 8101368:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	f103 0208 	add.w	r2, r3, #8
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	f04f 32ff 	mov.w	r2, #4294967295
 810137a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	f103 0208 	add.w	r2, r3, #8
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	f103 0208 	add.w	r2, r3, #8
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	2200      	movs	r2, #0
 8101394:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101396:	bf00      	nop
 8101398:	370c      	adds	r7, #12
 810139a:	46bd      	mov	sp, r7
 810139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a0:	4770      	bx	lr

081013a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81013a2:	b480      	push	{r7}
 81013a4:	b083      	sub	sp, #12
 81013a6:	af00      	add	r7, sp, #0
 81013a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	2200      	movs	r2, #0
 81013ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81013b0:	bf00      	nop
 81013b2:	370c      	adds	r7, #12
 81013b4:	46bd      	mov	sp, r7
 81013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ba:	4770      	bx	lr

081013bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81013bc:	b480      	push	{r7}
 81013be:	b085      	sub	sp, #20
 81013c0:	af00      	add	r7, sp, #0
 81013c2:	6078      	str	r0, [r7, #4]
 81013c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	685b      	ldr	r3, [r3, #4]
 81013ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81013cc:	683b      	ldr	r3, [r7, #0]
 81013ce:	68fa      	ldr	r2, [r7, #12]
 81013d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81013d2:	68fb      	ldr	r3, [r7, #12]
 81013d4:	689a      	ldr	r2, [r3, #8]
 81013d6:	683b      	ldr	r3, [r7, #0]
 81013d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81013da:	68fb      	ldr	r3, [r7, #12]
 81013dc:	689b      	ldr	r3, [r3, #8]
 81013de:	683a      	ldr	r2, [r7, #0]
 81013e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81013e2:	68fb      	ldr	r3, [r7, #12]
 81013e4:	683a      	ldr	r2, [r7, #0]
 81013e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81013e8:	683b      	ldr	r3, [r7, #0]
 81013ea:	687a      	ldr	r2, [r7, #4]
 81013ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	1c5a      	adds	r2, r3, #1
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	601a      	str	r2, [r3, #0]
}
 81013f8:	bf00      	nop
 81013fa:	3714      	adds	r7, #20
 81013fc:	46bd      	mov	sp, r7
 81013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101402:	4770      	bx	lr

08101404 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101404:	b480      	push	{r7}
 8101406:	b085      	sub	sp, #20
 8101408:	af00      	add	r7, sp, #0
 810140a:	6078      	str	r0, [r7, #4]
 810140c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810140e:	683b      	ldr	r3, [r7, #0]
 8101410:	681b      	ldr	r3, [r3, #0]
 8101412:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101414:	68bb      	ldr	r3, [r7, #8]
 8101416:	f1b3 3fff 	cmp.w	r3, #4294967295
 810141a:	d103      	bne.n	8101424 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	691b      	ldr	r3, [r3, #16]
 8101420:	60fb      	str	r3, [r7, #12]
 8101422:	e00c      	b.n	810143e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	3308      	adds	r3, #8
 8101428:	60fb      	str	r3, [r7, #12]
 810142a:	e002      	b.n	8101432 <vListInsert+0x2e>
 810142c:	68fb      	ldr	r3, [r7, #12]
 810142e:	685b      	ldr	r3, [r3, #4]
 8101430:	60fb      	str	r3, [r7, #12]
 8101432:	68fb      	ldr	r3, [r7, #12]
 8101434:	685b      	ldr	r3, [r3, #4]
 8101436:	681b      	ldr	r3, [r3, #0]
 8101438:	68ba      	ldr	r2, [r7, #8]
 810143a:	429a      	cmp	r2, r3
 810143c:	d2f6      	bcs.n	810142c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810143e:	68fb      	ldr	r3, [r7, #12]
 8101440:	685a      	ldr	r2, [r3, #4]
 8101442:	683b      	ldr	r3, [r7, #0]
 8101444:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101446:	683b      	ldr	r3, [r7, #0]
 8101448:	685b      	ldr	r3, [r3, #4]
 810144a:	683a      	ldr	r2, [r7, #0]
 810144c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810144e:	683b      	ldr	r3, [r7, #0]
 8101450:	68fa      	ldr	r2, [r7, #12]
 8101452:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101454:	68fb      	ldr	r3, [r7, #12]
 8101456:	683a      	ldr	r2, [r7, #0]
 8101458:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810145a:	683b      	ldr	r3, [r7, #0]
 810145c:	687a      	ldr	r2, [r7, #4]
 810145e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101460:	687b      	ldr	r3, [r7, #4]
 8101462:	681b      	ldr	r3, [r3, #0]
 8101464:	1c5a      	adds	r2, r3, #1
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	601a      	str	r2, [r3, #0]
}
 810146a:	bf00      	nop
 810146c:	3714      	adds	r7, #20
 810146e:	46bd      	mov	sp, r7
 8101470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101474:	4770      	bx	lr

08101476 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101476:	b480      	push	{r7}
 8101478:	b085      	sub	sp, #20
 810147a:	af00      	add	r7, sp, #0
 810147c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810147e:	687b      	ldr	r3, [r7, #4]
 8101480:	691b      	ldr	r3, [r3, #16]
 8101482:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	685b      	ldr	r3, [r3, #4]
 8101488:	687a      	ldr	r2, [r7, #4]
 810148a:	6892      	ldr	r2, [r2, #8]
 810148c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	689b      	ldr	r3, [r3, #8]
 8101492:	687a      	ldr	r2, [r7, #4]
 8101494:	6852      	ldr	r2, [r2, #4]
 8101496:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101498:	68fb      	ldr	r3, [r7, #12]
 810149a:	685b      	ldr	r3, [r3, #4]
 810149c:	687a      	ldr	r2, [r7, #4]
 810149e:	429a      	cmp	r2, r3
 81014a0:	d103      	bne.n	81014aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	689a      	ldr	r2, [r3, #8]
 81014a6:	68fb      	ldr	r3, [r7, #12]
 81014a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	2200      	movs	r2, #0
 81014ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81014b0:	68fb      	ldr	r3, [r7, #12]
 81014b2:	681b      	ldr	r3, [r3, #0]
 81014b4:	1e5a      	subs	r2, r3, #1
 81014b6:	68fb      	ldr	r3, [r7, #12]
 81014b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81014ba:	68fb      	ldr	r3, [r7, #12]
 81014bc:	681b      	ldr	r3, [r3, #0]
}
 81014be:	4618      	mov	r0, r3
 81014c0:	3714      	adds	r7, #20
 81014c2:	46bd      	mov	sp, r7
 81014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c8:	4770      	bx	lr

081014ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81014ca:	b580      	push	{r7, lr}
 81014cc:	b08e      	sub	sp, #56	; 0x38
 81014ce:	af04      	add	r7, sp, #16
 81014d0:	60f8      	str	r0, [r7, #12]
 81014d2:	60b9      	str	r1, [r7, #8]
 81014d4:	607a      	str	r2, [r7, #4]
 81014d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81014da:	2b00      	cmp	r3, #0
 81014dc:	d109      	bne.n	81014f2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81014de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81014e2:	f383 8811 	msr	BASEPRI, r3
 81014e6:	f3bf 8f6f 	isb	sy
 81014ea:	f3bf 8f4f 	dsb	sy
 81014ee:	623b      	str	r3, [r7, #32]
 81014f0:	e7fe      	b.n	81014f0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 81014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81014f4:	2b00      	cmp	r3, #0
 81014f6:	d109      	bne.n	810150c <xTaskCreateStatic+0x42>
 81014f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81014fc:	f383 8811 	msr	BASEPRI, r3
 8101500:	f3bf 8f6f 	isb	sy
 8101504:	f3bf 8f4f 	dsb	sy
 8101508:	61fb      	str	r3, [r7, #28]
 810150a:	e7fe      	b.n	810150a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810150c:	2354      	movs	r3, #84	; 0x54
 810150e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8101510:	693b      	ldr	r3, [r7, #16]
 8101512:	2b54      	cmp	r3, #84	; 0x54
 8101514:	d009      	beq.n	810152a <xTaskCreateStatic+0x60>
 8101516:	f04f 0350 	mov.w	r3, #80	; 0x50
 810151a:	f383 8811 	msr	BASEPRI, r3
 810151e:	f3bf 8f6f 	isb	sy
 8101522:	f3bf 8f4f 	dsb	sy
 8101526:	61bb      	str	r3, [r7, #24]
 8101528:	e7fe      	b.n	8101528 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810152a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810152e:	2b00      	cmp	r3, #0
 8101530:	d01e      	beq.n	8101570 <xTaskCreateStatic+0xa6>
 8101532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101534:	2b00      	cmp	r3, #0
 8101536:	d01b      	beq.n	8101570 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8101538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810153a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810153e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101540:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8101542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101544:	2202      	movs	r2, #2
 8101546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810154a:	2300      	movs	r3, #0
 810154c:	9303      	str	r3, [sp, #12]
 810154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101550:	9302      	str	r3, [sp, #8]
 8101552:	f107 0314 	add.w	r3, r7, #20
 8101556:	9301      	str	r3, [sp, #4]
 8101558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810155a:	9300      	str	r3, [sp, #0]
 810155c:	683b      	ldr	r3, [r7, #0]
 810155e:	687a      	ldr	r2, [r7, #4]
 8101560:	68b9      	ldr	r1, [r7, #8]
 8101562:	68f8      	ldr	r0, [r7, #12]
 8101564:	f000 f850 	bl	8101608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8101568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810156a:	f000 f8d3 	bl	8101714 <prvAddNewTaskToReadyList>
 810156e:	e001      	b.n	8101574 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8101570:	2300      	movs	r3, #0
 8101572:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8101574:	697b      	ldr	r3, [r7, #20]
	}
 8101576:	4618      	mov	r0, r3
 8101578:	3728      	adds	r7, #40	; 0x28
 810157a:	46bd      	mov	sp, r7
 810157c:	bd80      	pop	{r7, pc}

0810157e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810157e:	b580      	push	{r7, lr}
 8101580:	b08c      	sub	sp, #48	; 0x30
 8101582:	af04      	add	r7, sp, #16
 8101584:	60f8      	str	r0, [r7, #12]
 8101586:	60b9      	str	r1, [r7, #8]
 8101588:	603b      	str	r3, [r7, #0]
 810158a:	4613      	mov	r3, r2
 810158c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810158e:	88fb      	ldrh	r3, [r7, #6]
 8101590:	009b      	lsls	r3, r3, #2
 8101592:	4618      	mov	r0, r3
 8101594:	f000 feae 	bl	81022f4 <pvPortMalloc>
 8101598:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810159a:	697b      	ldr	r3, [r7, #20]
 810159c:	2b00      	cmp	r3, #0
 810159e:	d00e      	beq.n	81015be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81015a0:	2054      	movs	r0, #84	; 0x54
 81015a2:	f000 fea7 	bl	81022f4 <pvPortMalloc>
 81015a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81015a8:	69fb      	ldr	r3, [r7, #28]
 81015aa:	2b00      	cmp	r3, #0
 81015ac:	d003      	beq.n	81015b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81015ae:	69fb      	ldr	r3, [r7, #28]
 81015b0:	697a      	ldr	r2, [r7, #20]
 81015b2:	631a      	str	r2, [r3, #48]	; 0x30
 81015b4:	e005      	b.n	81015c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81015b6:	6978      	ldr	r0, [r7, #20]
 81015b8:	f000 ff5e 	bl	8102478 <vPortFree>
 81015bc:	e001      	b.n	81015c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81015be:	2300      	movs	r3, #0
 81015c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81015c2:	69fb      	ldr	r3, [r7, #28]
 81015c4:	2b00      	cmp	r3, #0
 81015c6:	d017      	beq.n	81015f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81015c8:	69fb      	ldr	r3, [r7, #28]
 81015ca:	2200      	movs	r2, #0
 81015cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81015d0:	88fa      	ldrh	r2, [r7, #6]
 81015d2:	2300      	movs	r3, #0
 81015d4:	9303      	str	r3, [sp, #12]
 81015d6:	69fb      	ldr	r3, [r7, #28]
 81015d8:	9302      	str	r3, [sp, #8]
 81015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81015dc:	9301      	str	r3, [sp, #4]
 81015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015e0:	9300      	str	r3, [sp, #0]
 81015e2:	683b      	ldr	r3, [r7, #0]
 81015e4:	68b9      	ldr	r1, [r7, #8]
 81015e6:	68f8      	ldr	r0, [r7, #12]
 81015e8:	f000 f80e 	bl	8101608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81015ec:	69f8      	ldr	r0, [r7, #28]
 81015ee:	f000 f891 	bl	8101714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81015f2:	2301      	movs	r3, #1
 81015f4:	61bb      	str	r3, [r7, #24]
 81015f6:	e002      	b.n	81015fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81015f8:	f04f 33ff 	mov.w	r3, #4294967295
 81015fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81015fe:	69bb      	ldr	r3, [r7, #24]
	}
 8101600:	4618      	mov	r0, r3
 8101602:	3720      	adds	r7, #32
 8101604:	46bd      	mov	sp, r7
 8101606:	bd80      	pop	{r7, pc}

08101608 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8101608:	b580      	push	{r7, lr}
 810160a:	b088      	sub	sp, #32
 810160c:	af00      	add	r7, sp, #0
 810160e:	60f8      	str	r0, [r7, #12]
 8101610:	60b9      	str	r1, [r7, #8]
 8101612:	607a      	str	r2, [r7, #4]
 8101614:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8101616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8101620:	3b01      	subs	r3, #1
 8101622:	009b      	lsls	r3, r3, #2
 8101624:	4413      	add	r3, r2
 8101626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8101628:	69bb      	ldr	r3, [r7, #24]
 810162a:	f023 0307 	bic.w	r3, r3, #7
 810162e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8101630:	69bb      	ldr	r3, [r7, #24]
 8101632:	f003 0307 	and.w	r3, r3, #7
 8101636:	2b00      	cmp	r3, #0
 8101638:	d009      	beq.n	810164e <prvInitialiseNewTask+0x46>
 810163a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810163e:	f383 8811 	msr	BASEPRI, r3
 8101642:	f3bf 8f6f 	isb	sy
 8101646:	f3bf 8f4f 	dsb	sy
 810164a:	617b      	str	r3, [r7, #20]
 810164c:	e7fe      	b.n	810164c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810164e:	68bb      	ldr	r3, [r7, #8]
 8101650:	2b00      	cmp	r3, #0
 8101652:	d01f      	beq.n	8101694 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8101654:	2300      	movs	r3, #0
 8101656:	61fb      	str	r3, [r7, #28]
 8101658:	e012      	b.n	8101680 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810165a:	68ba      	ldr	r2, [r7, #8]
 810165c:	69fb      	ldr	r3, [r7, #28]
 810165e:	4413      	add	r3, r2
 8101660:	7819      	ldrb	r1, [r3, #0]
 8101662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101664:	69fb      	ldr	r3, [r7, #28]
 8101666:	4413      	add	r3, r2
 8101668:	3334      	adds	r3, #52	; 0x34
 810166a:	460a      	mov	r2, r1
 810166c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810166e:	68ba      	ldr	r2, [r7, #8]
 8101670:	69fb      	ldr	r3, [r7, #28]
 8101672:	4413      	add	r3, r2
 8101674:	781b      	ldrb	r3, [r3, #0]
 8101676:	2b00      	cmp	r3, #0
 8101678:	d006      	beq.n	8101688 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810167a:	69fb      	ldr	r3, [r7, #28]
 810167c:	3301      	adds	r3, #1
 810167e:	61fb      	str	r3, [r7, #28]
 8101680:	69fb      	ldr	r3, [r7, #28]
 8101682:	2b0f      	cmp	r3, #15
 8101684:	d9e9      	bls.n	810165a <prvInitialiseNewTask+0x52>
 8101686:	e000      	b.n	810168a <prvInitialiseNewTask+0x82>
			{
				break;
 8101688:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810168c:	2200      	movs	r2, #0
 810168e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8101692:	e003      	b.n	810169c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8101694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101696:	2200      	movs	r2, #0
 8101698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810169e:	2b06      	cmp	r3, #6
 81016a0:	d901      	bls.n	81016a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81016a2:	2306      	movs	r3, #6
 81016a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81016aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81016ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81016b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 81016b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016b4:	2200      	movs	r2, #0
 81016b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016ba:	3304      	adds	r3, #4
 81016bc:	4618      	mov	r0, r3
 81016be:	f7ff fe70 	bl	81013a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016c4:	3318      	adds	r3, #24
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7ff fe6b 	bl	81013a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81016cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81016d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016d4:	f1c3 0207 	rsb	r2, r3, #7
 81016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81016e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016e4:	2200      	movs	r2, #0
 81016e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016ea:	2200      	movs	r2, #0
 81016ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81016f0:	683a      	ldr	r2, [r7, #0]
 81016f2:	68f9      	ldr	r1, [r7, #12]
 81016f4:	69b8      	ldr	r0, [r7, #24]
 81016f6:	f000 fbfd 	bl	8101ef4 <pxPortInitialiseStack>
 81016fa:	4602      	mov	r2, r0
 81016fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8101700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101702:	2b00      	cmp	r3, #0
 8101704:	d002      	beq.n	810170c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8101706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810170a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810170c:	bf00      	nop
 810170e:	3720      	adds	r7, #32
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}

08101714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8101714:	b580      	push	{r7, lr}
 8101716:	b082      	sub	sp, #8
 8101718:	af00      	add	r7, sp, #0
 810171a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810171c:	f000 fd0e 	bl	810213c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8101720:	4b2a      	ldr	r3, [pc, #168]	; (81017cc <prvAddNewTaskToReadyList+0xb8>)
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	3301      	adds	r3, #1
 8101726:	4a29      	ldr	r2, [pc, #164]	; (81017cc <prvAddNewTaskToReadyList+0xb8>)
 8101728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810172a:	4b29      	ldr	r3, [pc, #164]	; (81017d0 <prvAddNewTaskToReadyList+0xbc>)
 810172c:	681b      	ldr	r3, [r3, #0]
 810172e:	2b00      	cmp	r3, #0
 8101730:	d109      	bne.n	8101746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8101732:	4a27      	ldr	r2, [pc, #156]	; (81017d0 <prvAddNewTaskToReadyList+0xbc>)
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8101738:	4b24      	ldr	r3, [pc, #144]	; (81017cc <prvAddNewTaskToReadyList+0xb8>)
 810173a:	681b      	ldr	r3, [r3, #0]
 810173c:	2b01      	cmp	r3, #1
 810173e:	d110      	bne.n	8101762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8101740:	f000 fab8 	bl	8101cb4 <prvInitialiseTaskLists>
 8101744:	e00d      	b.n	8101762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8101746:	4b23      	ldr	r3, [pc, #140]	; (81017d4 <prvAddNewTaskToReadyList+0xc0>)
 8101748:	681b      	ldr	r3, [r3, #0]
 810174a:	2b00      	cmp	r3, #0
 810174c:	d109      	bne.n	8101762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810174e:	4b20      	ldr	r3, [pc, #128]	; (81017d0 <prvAddNewTaskToReadyList+0xbc>)
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101758:	429a      	cmp	r2, r3
 810175a:	d802      	bhi.n	8101762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810175c:	4a1c      	ldr	r2, [pc, #112]	; (81017d0 <prvAddNewTaskToReadyList+0xbc>)
 810175e:	687b      	ldr	r3, [r7, #4]
 8101760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8101762:	4b1d      	ldr	r3, [pc, #116]	; (81017d8 <prvAddNewTaskToReadyList+0xc4>)
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	3301      	adds	r3, #1
 8101768:	4a1b      	ldr	r2, [pc, #108]	; (81017d8 <prvAddNewTaskToReadyList+0xc4>)
 810176a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101770:	2201      	movs	r2, #1
 8101772:	409a      	lsls	r2, r3
 8101774:	4b19      	ldr	r3, [pc, #100]	; (81017dc <prvAddNewTaskToReadyList+0xc8>)
 8101776:	681b      	ldr	r3, [r3, #0]
 8101778:	4313      	orrs	r3, r2
 810177a:	4a18      	ldr	r2, [pc, #96]	; (81017dc <prvAddNewTaskToReadyList+0xc8>)
 810177c:	6013      	str	r3, [r2, #0]
 810177e:	687b      	ldr	r3, [r7, #4]
 8101780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101782:	4613      	mov	r3, r2
 8101784:	009b      	lsls	r3, r3, #2
 8101786:	4413      	add	r3, r2
 8101788:	009b      	lsls	r3, r3, #2
 810178a:	4a15      	ldr	r2, [pc, #84]	; (81017e0 <prvAddNewTaskToReadyList+0xcc>)
 810178c:	441a      	add	r2, r3
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	3304      	adds	r3, #4
 8101792:	4619      	mov	r1, r3
 8101794:	4610      	mov	r0, r2
 8101796:	f7ff fe11 	bl	81013bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810179a:	f000 fcfd 	bl	8102198 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810179e:	4b0d      	ldr	r3, [pc, #52]	; (81017d4 <prvAddNewTaskToReadyList+0xc0>)
 81017a0:	681b      	ldr	r3, [r3, #0]
 81017a2:	2b00      	cmp	r3, #0
 81017a4:	d00e      	beq.n	81017c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81017a6:	4b0a      	ldr	r3, [pc, #40]	; (81017d0 <prvAddNewTaskToReadyList+0xbc>)
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017b0:	429a      	cmp	r2, r3
 81017b2:	d207      	bcs.n	81017c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81017b4:	4b0b      	ldr	r3, [pc, #44]	; (81017e4 <prvAddNewTaskToReadyList+0xd0>)
 81017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81017ba:	601a      	str	r2, [r3, #0]
 81017bc:	f3bf 8f4f 	dsb	sy
 81017c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81017c4:	bf00      	nop
 81017c6:	3708      	adds	r7, #8
 81017c8:	46bd      	mov	sp, r7
 81017ca:	bd80      	pop	{r7, pc}
 81017cc:	10000380 	.word	0x10000380
 81017d0:	10000280 	.word	0x10000280
 81017d4:	1000038c 	.word	0x1000038c
 81017d8:	1000039c 	.word	0x1000039c
 81017dc:	10000388 	.word	0x10000388
 81017e0:	10000284 	.word	0x10000284
 81017e4:	e000ed04 	.word	0xe000ed04

081017e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81017e8:	b580      	push	{r7, lr}
 81017ea:	b084      	sub	sp, #16
 81017ec:	af00      	add	r7, sp, #0
 81017ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81017f0:	2300      	movs	r3, #0
 81017f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	2b00      	cmp	r3, #0
 81017f8:	d016      	beq.n	8101828 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81017fa:	4b13      	ldr	r3, [pc, #76]	; (8101848 <vTaskDelay+0x60>)
 81017fc:	681b      	ldr	r3, [r3, #0]
 81017fe:	2b00      	cmp	r3, #0
 8101800:	d009      	beq.n	8101816 <vTaskDelay+0x2e>
 8101802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101806:	f383 8811 	msr	BASEPRI, r3
 810180a:	f3bf 8f6f 	isb	sy
 810180e:	f3bf 8f4f 	dsb	sy
 8101812:	60bb      	str	r3, [r7, #8]
 8101814:	e7fe      	b.n	8101814 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8101816:	f000 f879 	bl	810190c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810181a:	2100      	movs	r1, #0
 810181c:	6878      	ldr	r0, [r7, #4]
 810181e:	f000 fb03 	bl	8101e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8101822:	f000 f881 	bl	8101928 <xTaskResumeAll>
 8101826:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8101828:	68fb      	ldr	r3, [r7, #12]
 810182a:	2b00      	cmp	r3, #0
 810182c:	d107      	bne.n	810183e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810182e:	4b07      	ldr	r3, [pc, #28]	; (810184c <vTaskDelay+0x64>)
 8101830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101834:	601a      	str	r2, [r3, #0]
 8101836:	f3bf 8f4f 	dsb	sy
 810183a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810183e:	bf00      	nop
 8101840:	3710      	adds	r7, #16
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}
 8101846:	bf00      	nop
 8101848:	100003a8 	.word	0x100003a8
 810184c:	e000ed04 	.word	0xe000ed04

08101850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8101850:	b580      	push	{r7, lr}
 8101852:	b08a      	sub	sp, #40	; 0x28
 8101854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8101856:	2300      	movs	r3, #0
 8101858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810185a:	2300      	movs	r3, #0
 810185c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810185e:	463a      	mov	r2, r7
 8101860:	1d39      	adds	r1, r7, #4
 8101862:	f107 0308 	add.w	r3, r7, #8
 8101866:	4618      	mov	r0, r3
 8101868:	f7fe fd56 	bl	8100318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810186c:	6839      	ldr	r1, [r7, #0]
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	68ba      	ldr	r2, [r7, #8]
 8101872:	9202      	str	r2, [sp, #8]
 8101874:	9301      	str	r3, [sp, #4]
 8101876:	2300      	movs	r3, #0
 8101878:	9300      	str	r3, [sp, #0]
 810187a:	2300      	movs	r3, #0
 810187c:	460a      	mov	r2, r1
 810187e:	491d      	ldr	r1, [pc, #116]	; (81018f4 <vTaskStartScheduler+0xa4>)
 8101880:	481d      	ldr	r0, [pc, #116]	; (81018f8 <vTaskStartScheduler+0xa8>)
 8101882:	f7ff fe22 	bl	81014ca <xTaskCreateStatic>
 8101886:	4602      	mov	r2, r0
 8101888:	4b1c      	ldr	r3, [pc, #112]	; (81018fc <vTaskStartScheduler+0xac>)
 810188a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810188c:	4b1b      	ldr	r3, [pc, #108]	; (81018fc <vTaskStartScheduler+0xac>)
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	2b00      	cmp	r3, #0
 8101892:	d002      	beq.n	810189a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8101894:	2301      	movs	r3, #1
 8101896:	617b      	str	r3, [r7, #20]
 8101898:	e001      	b.n	810189e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810189a:	2300      	movs	r3, #0
 810189c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810189e:	697b      	ldr	r3, [r7, #20]
 81018a0:	2b01      	cmp	r3, #1
 81018a2:	d115      	bne.n	81018d0 <vTaskStartScheduler+0x80>
 81018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81018a8:	f383 8811 	msr	BASEPRI, r3
 81018ac:	f3bf 8f6f 	isb	sy
 81018b0:	f3bf 8f4f 	dsb	sy
 81018b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81018b6:	4b12      	ldr	r3, [pc, #72]	; (8101900 <vTaskStartScheduler+0xb0>)
 81018b8:	f04f 32ff 	mov.w	r2, #4294967295
 81018bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81018be:	4b11      	ldr	r3, [pc, #68]	; (8101904 <vTaskStartScheduler+0xb4>)
 81018c0:	2201      	movs	r2, #1
 81018c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81018c4:	4b10      	ldr	r3, [pc, #64]	; (8101908 <vTaskStartScheduler+0xb8>)
 81018c6:	2200      	movs	r2, #0
 81018c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81018ca:	f000 fb99 	bl	8102000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81018ce:	e00d      	b.n	81018ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81018d0:	697b      	ldr	r3, [r7, #20]
 81018d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018d6:	d109      	bne.n	81018ec <vTaskStartScheduler+0x9c>
 81018d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81018dc:	f383 8811 	msr	BASEPRI, r3
 81018e0:	f3bf 8f6f 	isb	sy
 81018e4:	f3bf 8f4f 	dsb	sy
 81018e8:	60fb      	str	r3, [r7, #12]
 81018ea:	e7fe      	b.n	81018ea <vTaskStartScheduler+0x9a>
}
 81018ec:	bf00      	nop
 81018ee:	3718      	adds	r7, #24
 81018f0:	46bd      	mov	sp, r7
 81018f2:	bd80      	pop	{r7, pc}
 81018f4:	08102728 	.word	0x08102728
 81018f8:	08101c85 	.word	0x08101c85
 81018fc:	100003a4 	.word	0x100003a4
 8101900:	100003a0 	.word	0x100003a0
 8101904:	1000038c 	.word	0x1000038c
 8101908:	10000384 	.word	0x10000384

0810190c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810190c:	b480      	push	{r7}
 810190e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8101910:	4b04      	ldr	r3, [pc, #16]	; (8101924 <vTaskSuspendAll+0x18>)
 8101912:	681b      	ldr	r3, [r3, #0]
 8101914:	3301      	adds	r3, #1
 8101916:	4a03      	ldr	r2, [pc, #12]	; (8101924 <vTaskSuspendAll+0x18>)
 8101918:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810191a:	bf00      	nop
 810191c:	46bd      	mov	sp, r7
 810191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101922:	4770      	bx	lr
 8101924:	100003a8 	.word	0x100003a8

08101928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8101928:	b580      	push	{r7, lr}
 810192a:	b084      	sub	sp, #16
 810192c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810192e:	2300      	movs	r3, #0
 8101930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8101932:	2300      	movs	r3, #0
 8101934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8101936:	4b41      	ldr	r3, [pc, #260]	; (8101a3c <xTaskResumeAll+0x114>)
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	2b00      	cmp	r3, #0
 810193c:	d109      	bne.n	8101952 <xTaskResumeAll+0x2a>
 810193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101942:	f383 8811 	msr	BASEPRI, r3
 8101946:	f3bf 8f6f 	isb	sy
 810194a:	f3bf 8f4f 	dsb	sy
 810194e:	603b      	str	r3, [r7, #0]
 8101950:	e7fe      	b.n	8101950 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8101952:	f000 fbf3 	bl	810213c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8101956:	4b39      	ldr	r3, [pc, #228]	; (8101a3c <xTaskResumeAll+0x114>)
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	3b01      	subs	r3, #1
 810195c:	4a37      	ldr	r2, [pc, #220]	; (8101a3c <xTaskResumeAll+0x114>)
 810195e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8101960:	4b36      	ldr	r3, [pc, #216]	; (8101a3c <xTaskResumeAll+0x114>)
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	2b00      	cmp	r3, #0
 8101966:	d161      	bne.n	8101a2c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8101968:	4b35      	ldr	r3, [pc, #212]	; (8101a40 <xTaskResumeAll+0x118>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	2b00      	cmp	r3, #0
 810196e:	d05d      	beq.n	8101a2c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8101970:	e02e      	b.n	81019d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101972:	4b34      	ldr	r3, [pc, #208]	; (8101a44 <xTaskResumeAll+0x11c>)
 8101974:	68db      	ldr	r3, [r3, #12]
 8101976:	68db      	ldr	r3, [r3, #12]
 8101978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810197a:	68fb      	ldr	r3, [r7, #12]
 810197c:	3318      	adds	r3, #24
 810197e:	4618      	mov	r0, r3
 8101980:	f7ff fd79 	bl	8101476 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101984:	68fb      	ldr	r3, [r7, #12]
 8101986:	3304      	adds	r3, #4
 8101988:	4618      	mov	r0, r3
 810198a:	f7ff fd74 	bl	8101476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810198e:	68fb      	ldr	r3, [r7, #12]
 8101990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101992:	2201      	movs	r2, #1
 8101994:	409a      	lsls	r2, r3
 8101996:	4b2c      	ldr	r3, [pc, #176]	; (8101a48 <xTaskResumeAll+0x120>)
 8101998:	681b      	ldr	r3, [r3, #0]
 810199a:	4313      	orrs	r3, r2
 810199c:	4a2a      	ldr	r2, [pc, #168]	; (8101a48 <xTaskResumeAll+0x120>)
 810199e:	6013      	str	r3, [r2, #0]
 81019a0:	68fb      	ldr	r3, [r7, #12]
 81019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81019a4:	4613      	mov	r3, r2
 81019a6:	009b      	lsls	r3, r3, #2
 81019a8:	4413      	add	r3, r2
 81019aa:	009b      	lsls	r3, r3, #2
 81019ac:	4a27      	ldr	r2, [pc, #156]	; (8101a4c <xTaskResumeAll+0x124>)
 81019ae:	441a      	add	r2, r3
 81019b0:	68fb      	ldr	r3, [r7, #12]
 81019b2:	3304      	adds	r3, #4
 81019b4:	4619      	mov	r1, r3
 81019b6:	4610      	mov	r0, r2
 81019b8:	f7ff fd00 	bl	81013bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81019bc:	68fb      	ldr	r3, [r7, #12]
 81019be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81019c0:	4b23      	ldr	r3, [pc, #140]	; (8101a50 <xTaskResumeAll+0x128>)
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019c6:	429a      	cmp	r2, r3
 81019c8:	d302      	bcc.n	81019d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 81019ca:	4b22      	ldr	r3, [pc, #136]	; (8101a54 <xTaskResumeAll+0x12c>)
 81019cc:	2201      	movs	r2, #1
 81019ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81019d0:	4b1c      	ldr	r3, [pc, #112]	; (8101a44 <xTaskResumeAll+0x11c>)
 81019d2:	681b      	ldr	r3, [r3, #0]
 81019d4:	2b00      	cmp	r3, #0
 81019d6:	d1cc      	bne.n	8101972 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81019d8:	68fb      	ldr	r3, [r7, #12]
 81019da:	2b00      	cmp	r3, #0
 81019dc:	d001      	beq.n	81019e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81019de:	f000 fa03 	bl	8101de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 81019e2:	4b1d      	ldr	r3, [pc, #116]	; (8101a58 <xTaskResumeAll+0x130>)
 81019e4:	681b      	ldr	r3, [r3, #0]
 81019e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	2b00      	cmp	r3, #0
 81019ec:	d010      	beq.n	8101a10 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81019ee:	f000 f837 	bl	8101a60 <xTaskIncrementTick>
 81019f2:	4603      	mov	r3, r0
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	d002      	beq.n	81019fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 81019f8:	4b16      	ldr	r3, [pc, #88]	; (8101a54 <xTaskResumeAll+0x12c>)
 81019fa:	2201      	movs	r2, #1
 81019fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	3b01      	subs	r3, #1
 8101a02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d1f1      	bne.n	81019ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8101a0a:	4b13      	ldr	r3, [pc, #76]	; (8101a58 <xTaskResumeAll+0x130>)
 8101a0c:	2200      	movs	r2, #0
 8101a0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8101a10:	4b10      	ldr	r3, [pc, #64]	; (8101a54 <xTaskResumeAll+0x12c>)
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d009      	beq.n	8101a2c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8101a18:	2301      	movs	r3, #1
 8101a1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8101a1c:	4b0f      	ldr	r3, [pc, #60]	; (8101a5c <xTaskResumeAll+0x134>)
 8101a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101a22:	601a      	str	r2, [r3, #0]
 8101a24:	f3bf 8f4f 	dsb	sy
 8101a28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8101a2c:	f000 fbb4 	bl	8102198 <vPortExitCritical>

	return xAlreadyYielded;
 8101a30:	68bb      	ldr	r3, [r7, #8]
}
 8101a32:	4618      	mov	r0, r3
 8101a34:	3710      	adds	r7, #16
 8101a36:	46bd      	mov	sp, r7
 8101a38:	bd80      	pop	{r7, pc}
 8101a3a:	bf00      	nop
 8101a3c:	100003a8 	.word	0x100003a8
 8101a40:	10000380 	.word	0x10000380
 8101a44:	10000340 	.word	0x10000340
 8101a48:	10000388 	.word	0x10000388
 8101a4c:	10000284 	.word	0x10000284
 8101a50:	10000280 	.word	0x10000280
 8101a54:	10000394 	.word	0x10000394
 8101a58:	10000390 	.word	0x10000390
 8101a5c:	e000ed04 	.word	0xe000ed04

08101a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b086      	sub	sp, #24
 8101a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8101a66:	2300      	movs	r3, #0
 8101a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8101a6a:	4b4e      	ldr	r3, [pc, #312]	; (8101ba4 <xTaskIncrementTick+0x144>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	2b00      	cmp	r3, #0
 8101a70:	f040 8087 	bne.w	8101b82 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8101a74:	4b4c      	ldr	r3, [pc, #304]	; (8101ba8 <xTaskIncrementTick+0x148>)
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	3301      	adds	r3, #1
 8101a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8101a7c:	4a4a      	ldr	r2, [pc, #296]	; (8101ba8 <xTaskIncrementTick+0x148>)
 8101a7e:	693b      	ldr	r3, [r7, #16]
 8101a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8101a82:	693b      	ldr	r3, [r7, #16]
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d11f      	bne.n	8101ac8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8101a88:	4b48      	ldr	r3, [pc, #288]	; (8101bac <xTaskIncrementTick+0x14c>)
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	681b      	ldr	r3, [r3, #0]
 8101a8e:	2b00      	cmp	r3, #0
 8101a90:	d009      	beq.n	8101aa6 <xTaskIncrementTick+0x46>
 8101a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101a96:	f383 8811 	msr	BASEPRI, r3
 8101a9a:	f3bf 8f6f 	isb	sy
 8101a9e:	f3bf 8f4f 	dsb	sy
 8101aa2:	603b      	str	r3, [r7, #0]
 8101aa4:	e7fe      	b.n	8101aa4 <xTaskIncrementTick+0x44>
 8101aa6:	4b41      	ldr	r3, [pc, #260]	; (8101bac <xTaskIncrementTick+0x14c>)
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	60fb      	str	r3, [r7, #12]
 8101aac:	4b40      	ldr	r3, [pc, #256]	; (8101bb0 <xTaskIncrementTick+0x150>)
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	4a3e      	ldr	r2, [pc, #248]	; (8101bac <xTaskIncrementTick+0x14c>)
 8101ab2:	6013      	str	r3, [r2, #0]
 8101ab4:	4a3e      	ldr	r2, [pc, #248]	; (8101bb0 <xTaskIncrementTick+0x150>)
 8101ab6:	68fb      	ldr	r3, [r7, #12]
 8101ab8:	6013      	str	r3, [r2, #0]
 8101aba:	4b3e      	ldr	r3, [pc, #248]	; (8101bb4 <xTaskIncrementTick+0x154>)
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	3301      	adds	r3, #1
 8101ac0:	4a3c      	ldr	r2, [pc, #240]	; (8101bb4 <xTaskIncrementTick+0x154>)
 8101ac2:	6013      	str	r3, [r2, #0]
 8101ac4:	f000 f990 	bl	8101de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8101ac8:	4b3b      	ldr	r3, [pc, #236]	; (8101bb8 <xTaskIncrementTick+0x158>)
 8101aca:	681b      	ldr	r3, [r3, #0]
 8101acc:	693a      	ldr	r2, [r7, #16]
 8101ace:	429a      	cmp	r2, r3
 8101ad0:	d348      	bcc.n	8101b64 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101ad2:	4b36      	ldr	r3, [pc, #216]	; (8101bac <xTaskIncrementTick+0x14c>)
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	2b00      	cmp	r3, #0
 8101ada:	d104      	bne.n	8101ae6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8101adc:	4b36      	ldr	r3, [pc, #216]	; (8101bb8 <xTaskIncrementTick+0x158>)
 8101ade:	f04f 32ff 	mov.w	r2, #4294967295
 8101ae2:	601a      	str	r2, [r3, #0]
					break;
 8101ae4:	e03e      	b.n	8101b64 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101ae6:	4b31      	ldr	r3, [pc, #196]	; (8101bac <xTaskIncrementTick+0x14c>)
 8101ae8:	681b      	ldr	r3, [r3, #0]
 8101aea:	68db      	ldr	r3, [r3, #12]
 8101aec:	68db      	ldr	r3, [r3, #12]
 8101aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8101af0:	68bb      	ldr	r3, [r7, #8]
 8101af2:	685b      	ldr	r3, [r3, #4]
 8101af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8101af6:	693a      	ldr	r2, [r7, #16]
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	429a      	cmp	r2, r3
 8101afc:	d203      	bcs.n	8101b06 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8101afe:	4a2e      	ldr	r2, [pc, #184]	; (8101bb8 <xTaskIncrementTick+0x158>)
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8101b04:	e02e      	b.n	8101b64 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101b06:	68bb      	ldr	r3, [r7, #8]
 8101b08:	3304      	adds	r3, #4
 8101b0a:	4618      	mov	r0, r3
 8101b0c:	f7ff fcb3 	bl	8101476 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8101b10:	68bb      	ldr	r3, [r7, #8]
 8101b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101b14:	2b00      	cmp	r3, #0
 8101b16:	d004      	beq.n	8101b22 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8101b18:	68bb      	ldr	r3, [r7, #8]
 8101b1a:	3318      	adds	r3, #24
 8101b1c:	4618      	mov	r0, r3
 8101b1e:	f7ff fcaa 	bl	8101476 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8101b22:	68bb      	ldr	r3, [r7, #8]
 8101b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b26:	2201      	movs	r2, #1
 8101b28:	409a      	lsls	r2, r3
 8101b2a:	4b24      	ldr	r3, [pc, #144]	; (8101bbc <xTaskIncrementTick+0x15c>)
 8101b2c:	681b      	ldr	r3, [r3, #0]
 8101b2e:	4313      	orrs	r3, r2
 8101b30:	4a22      	ldr	r2, [pc, #136]	; (8101bbc <xTaskIncrementTick+0x15c>)
 8101b32:	6013      	str	r3, [r2, #0]
 8101b34:	68bb      	ldr	r3, [r7, #8]
 8101b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101b38:	4613      	mov	r3, r2
 8101b3a:	009b      	lsls	r3, r3, #2
 8101b3c:	4413      	add	r3, r2
 8101b3e:	009b      	lsls	r3, r3, #2
 8101b40:	4a1f      	ldr	r2, [pc, #124]	; (8101bc0 <xTaskIncrementTick+0x160>)
 8101b42:	441a      	add	r2, r3
 8101b44:	68bb      	ldr	r3, [r7, #8]
 8101b46:	3304      	adds	r3, #4
 8101b48:	4619      	mov	r1, r3
 8101b4a:	4610      	mov	r0, r2
 8101b4c:	f7ff fc36 	bl	81013bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8101b50:	68bb      	ldr	r3, [r7, #8]
 8101b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101b54:	4b1b      	ldr	r3, [pc, #108]	; (8101bc4 <xTaskIncrementTick+0x164>)
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b5a:	429a      	cmp	r2, r3
 8101b5c:	d3b9      	bcc.n	8101ad2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8101b5e:	2301      	movs	r3, #1
 8101b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101b62:	e7b6      	b.n	8101ad2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8101b64:	4b17      	ldr	r3, [pc, #92]	; (8101bc4 <xTaskIncrementTick+0x164>)
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101b6a:	4915      	ldr	r1, [pc, #84]	; (8101bc0 <xTaskIncrementTick+0x160>)
 8101b6c:	4613      	mov	r3, r2
 8101b6e:	009b      	lsls	r3, r3, #2
 8101b70:	4413      	add	r3, r2
 8101b72:	009b      	lsls	r3, r3, #2
 8101b74:	440b      	add	r3, r1
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	2b01      	cmp	r3, #1
 8101b7a:	d907      	bls.n	8101b8c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8101b7c:	2301      	movs	r3, #1
 8101b7e:	617b      	str	r3, [r7, #20]
 8101b80:	e004      	b.n	8101b8c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8101b82:	4b11      	ldr	r3, [pc, #68]	; (8101bc8 <xTaskIncrementTick+0x168>)
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	3301      	adds	r3, #1
 8101b88:	4a0f      	ldr	r2, [pc, #60]	; (8101bc8 <xTaskIncrementTick+0x168>)
 8101b8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8101b8c:	4b0f      	ldr	r3, [pc, #60]	; (8101bcc <xTaskIncrementTick+0x16c>)
 8101b8e:	681b      	ldr	r3, [r3, #0]
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	d001      	beq.n	8101b98 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8101b94:	2301      	movs	r3, #1
 8101b96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8101b98:	697b      	ldr	r3, [r7, #20]
}
 8101b9a:	4618      	mov	r0, r3
 8101b9c:	3718      	adds	r7, #24
 8101b9e:	46bd      	mov	sp, r7
 8101ba0:	bd80      	pop	{r7, pc}
 8101ba2:	bf00      	nop
 8101ba4:	100003a8 	.word	0x100003a8
 8101ba8:	10000384 	.word	0x10000384
 8101bac:	10000338 	.word	0x10000338
 8101bb0:	1000033c 	.word	0x1000033c
 8101bb4:	10000398 	.word	0x10000398
 8101bb8:	100003a0 	.word	0x100003a0
 8101bbc:	10000388 	.word	0x10000388
 8101bc0:	10000284 	.word	0x10000284
 8101bc4:	10000280 	.word	0x10000280
 8101bc8:	10000390 	.word	0x10000390
 8101bcc:	10000394 	.word	0x10000394

08101bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8101bd0:	b480      	push	{r7}
 8101bd2:	b087      	sub	sp, #28
 8101bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8101bd6:	4b26      	ldr	r3, [pc, #152]	; (8101c70 <vTaskSwitchContext+0xa0>)
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d003      	beq.n	8101be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8101bde:	4b25      	ldr	r3, [pc, #148]	; (8101c74 <vTaskSwitchContext+0xa4>)
 8101be0:	2201      	movs	r2, #1
 8101be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8101be4:	e03e      	b.n	8101c64 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8101be6:	4b23      	ldr	r3, [pc, #140]	; (8101c74 <vTaskSwitchContext+0xa4>)
 8101be8:	2200      	movs	r2, #0
 8101bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101bec:	4b22      	ldr	r3, [pc, #136]	; (8101c78 <vTaskSwitchContext+0xa8>)
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8101bf2:	68fb      	ldr	r3, [r7, #12]
 8101bf4:	fab3 f383 	clz	r3, r3
 8101bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8101bfa:	7afb      	ldrb	r3, [r7, #11]
 8101bfc:	f1c3 031f 	rsb	r3, r3, #31
 8101c00:	617b      	str	r3, [r7, #20]
 8101c02:	491e      	ldr	r1, [pc, #120]	; (8101c7c <vTaskSwitchContext+0xac>)
 8101c04:	697a      	ldr	r2, [r7, #20]
 8101c06:	4613      	mov	r3, r2
 8101c08:	009b      	lsls	r3, r3, #2
 8101c0a:	4413      	add	r3, r2
 8101c0c:	009b      	lsls	r3, r3, #2
 8101c0e:	440b      	add	r3, r1
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d109      	bne.n	8101c2a <vTaskSwitchContext+0x5a>
	__asm volatile
 8101c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c1a:	f383 8811 	msr	BASEPRI, r3
 8101c1e:	f3bf 8f6f 	isb	sy
 8101c22:	f3bf 8f4f 	dsb	sy
 8101c26:	607b      	str	r3, [r7, #4]
 8101c28:	e7fe      	b.n	8101c28 <vTaskSwitchContext+0x58>
 8101c2a:	697a      	ldr	r2, [r7, #20]
 8101c2c:	4613      	mov	r3, r2
 8101c2e:	009b      	lsls	r3, r3, #2
 8101c30:	4413      	add	r3, r2
 8101c32:	009b      	lsls	r3, r3, #2
 8101c34:	4a11      	ldr	r2, [pc, #68]	; (8101c7c <vTaskSwitchContext+0xac>)
 8101c36:	4413      	add	r3, r2
 8101c38:	613b      	str	r3, [r7, #16]
 8101c3a:	693b      	ldr	r3, [r7, #16]
 8101c3c:	685b      	ldr	r3, [r3, #4]
 8101c3e:	685a      	ldr	r2, [r3, #4]
 8101c40:	693b      	ldr	r3, [r7, #16]
 8101c42:	605a      	str	r2, [r3, #4]
 8101c44:	693b      	ldr	r3, [r7, #16]
 8101c46:	685a      	ldr	r2, [r3, #4]
 8101c48:	693b      	ldr	r3, [r7, #16]
 8101c4a:	3308      	adds	r3, #8
 8101c4c:	429a      	cmp	r2, r3
 8101c4e:	d104      	bne.n	8101c5a <vTaskSwitchContext+0x8a>
 8101c50:	693b      	ldr	r3, [r7, #16]
 8101c52:	685b      	ldr	r3, [r3, #4]
 8101c54:	685a      	ldr	r2, [r3, #4]
 8101c56:	693b      	ldr	r3, [r7, #16]
 8101c58:	605a      	str	r2, [r3, #4]
 8101c5a:	693b      	ldr	r3, [r7, #16]
 8101c5c:	685b      	ldr	r3, [r3, #4]
 8101c5e:	68db      	ldr	r3, [r3, #12]
 8101c60:	4a07      	ldr	r2, [pc, #28]	; (8101c80 <vTaskSwitchContext+0xb0>)
 8101c62:	6013      	str	r3, [r2, #0]
}
 8101c64:	bf00      	nop
 8101c66:	371c      	adds	r7, #28
 8101c68:	46bd      	mov	sp, r7
 8101c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6e:	4770      	bx	lr
 8101c70:	100003a8 	.word	0x100003a8
 8101c74:	10000394 	.word	0x10000394
 8101c78:	10000388 	.word	0x10000388
 8101c7c:	10000284 	.word	0x10000284
 8101c80:	10000280 	.word	0x10000280

08101c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8101c84:	b580      	push	{r7, lr}
 8101c86:	b082      	sub	sp, #8
 8101c88:	af00      	add	r7, sp, #0
 8101c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8101c8c:	f000 f852 	bl	8101d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8101c90:	4b06      	ldr	r3, [pc, #24]	; (8101cac <prvIdleTask+0x28>)
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	2b01      	cmp	r3, #1
 8101c96:	d9f9      	bls.n	8101c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8101c98:	4b05      	ldr	r3, [pc, #20]	; (8101cb0 <prvIdleTask+0x2c>)
 8101c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101c9e:	601a      	str	r2, [r3, #0]
 8101ca0:	f3bf 8f4f 	dsb	sy
 8101ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8101ca8:	e7f0      	b.n	8101c8c <prvIdleTask+0x8>
 8101caa:	bf00      	nop
 8101cac:	10000284 	.word	0x10000284
 8101cb0:	e000ed04 	.word	0xe000ed04

08101cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8101cb4:	b580      	push	{r7, lr}
 8101cb6:	b082      	sub	sp, #8
 8101cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8101cba:	2300      	movs	r3, #0
 8101cbc:	607b      	str	r3, [r7, #4]
 8101cbe:	e00c      	b.n	8101cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8101cc0:	687a      	ldr	r2, [r7, #4]
 8101cc2:	4613      	mov	r3, r2
 8101cc4:	009b      	lsls	r3, r3, #2
 8101cc6:	4413      	add	r3, r2
 8101cc8:	009b      	lsls	r3, r3, #2
 8101cca:	4a12      	ldr	r2, [pc, #72]	; (8101d14 <prvInitialiseTaskLists+0x60>)
 8101ccc:	4413      	add	r3, r2
 8101cce:	4618      	mov	r0, r3
 8101cd0:	f7ff fb47 	bl	8101362 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	3301      	adds	r3, #1
 8101cd8:	607b      	str	r3, [r7, #4]
 8101cda:	687b      	ldr	r3, [r7, #4]
 8101cdc:	2b06      	cmp	r3, #6
 8101cde:	d9ef      	bls.n	8101cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8101ce0:	480d      	ldr	r0, [pc, #52]	; (8101d18 <prvInitialiseTaskLists+0x64>)
 8101ce2:	f7ff fb3e 	bl	8101362 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8101ce6:	480d      	ldr	r0, [pc, #52]	; (8101d1c <prvInitialiseTaskLists+0x68>)
 8101ce8:	f7ff fb3b 	bl	8101362 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8101cec:	480c      	ldr	r0, [pc, #48]	; (8101d20 <prvInitialiseTaskLists+0x6c>)
 8101cee:	f7ff fb38 	bl	8101362 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8101cf2:	480c      	ldr	r0, [pc, #48]	; (8101d24 <prvInitialiseTaskLists+0x70>)
 8101cf4:	f7ff fb35 	bl	8101362 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8101cf8:	480b      	ldr	r0, [pc, #44]	; (8101d28 <prvInitialiseTaskLists+0x74>)
 8101cfa:	f7ff fb32 	bl	8101362 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8101cfe:	4b0b      	ldr	r3, [pc, #44]	; (8101d2c <prvInitialiseTaskLists+0x78>)
 8101d00:	4a05      	ldr	r2, [pc, #20]	; (8101d18 <prvInitialiseTaskLists+0x64>)
 8101d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8101d04:	4b0a      	ldr	r3, [pc, #40]	; (8101d30 <prvInitialiseTaskLists+0x7c>)
 8101d06:	4a05      	ldr	r2, [pc, #20]	; (8101d1c <prvInitialiseTaskLists+0x68>)
 8101d08:	601a      	str	r2, [r3, #0]
}
 8101d0a:	bf00      	nop
 8101d0c:	3708      	adds	r7, #8
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	bd80      	pop	{r7, pc}
 8101d12:	bf00      	nop
 8101d14:	10000284 	.word	0x10000284
 8101d18:	10000310 	.word	0x10000310
 8101d1c:	10000324 	.word	0x10000324
 8101d20:	10000340 	.word	0x10000340
 8101d24:	10000354 	.word	0x10000354
 8101d28:	1000036c 	.word	0x1000036c
 8101d2c:	10000338 	.word	0x10000338
 8101d30:	1000033c 	.word	0x1000033c

08101d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8101d34:	b580      	push	{r7, lr}
 8101d36:	b082      	sub	sp, #8
 8101d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8101d3a:	e019      	b.n	8101d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8101d3c:	f000 f9fe 	bl	810213c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101d40:	4b0f      	ldr	r3, [pc, #60]	; (8101d80 <prvCheckTasksWaitingTermination+0x4c>)
 8101d42:	68db      	ldr	r3, [r3, #12]
 8101d44:	68db      	ldr	r3, [r3, #12]
 8101d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	3304      	adds	r3, #4
 8101d4c:	4618      	mov	r0, r3
 8101d4e:	f7ff fb92 	bl	8101476 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8101d52:	4b0c      	ldr	r3, [pc, #48]	; (8101d84 <prvCheckTasksWaitingTermination+0x50>)
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	3b01      	subs	r3, #1
 8101d58:	4a0a      	ldr	r2, [pc, #40]	; (8101d84 <prvCheckTasksWaitingTermination+0x50>)
 8101d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8101d5c:	4b0a      	ldr	r3, [pc, #40]	; (8101d88 <prvCheckTasksWaitingTermination+0x54>)
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	3b01      	subs	r3, #1
 8101d62:	4a09      	ldr	r2, [pc, #36]	; (8101d88 <prvCheckTasksWaitingTermination+0x54>)
 8101d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8101d66:	f000 fa17 	bl	8102198 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8101d6a:	6878      	ldr	r0, [r7, #4]
 8101d6c:	f000 f80e 	bl	8101d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8101d70:	4b05      	ldr	r3, [pc, #20]	; (8101d88 <prvCheckTasksWaitingTermination+0x54>)
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	2b00      	cmp	r3, #0
 8101d76:	d1e1      	bne.n	8101d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8101d78:	bf00      	nop
 8101d7a:	3708      	adds	r7, #8
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	bd80      	pop	{r7, pc}
 8101d80:	10000354 	.word	0x10000354
 8101d84:	10000380 	.word	0x10000380
 8101d88:	10000368 	.word	0x10000368

08101d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	b084      	sub	sp, #16
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d108      	bne.n	8101db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101da2:	4618      	mov	r0, r3
 8101da4:	f000 fb68 	bl	8102478 <vPortFree>
				vPortFree( pxTCB );
 8101da8:	6878      	ldr	r0, [r7, #4]
 8101daa:	f000 fb65 	bl	8102478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8101dae:	e017      	b.n	8101de0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101db6:	2b01      	cmp	r3, #1
 8101db8:	d103      	bne.n	8101dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8101dba:	6878      	ldr	r0, [r7, #4]
 8101dbc:	f000 fb5c 	bl	8102478 <vPortFree>
	}
 8101dc0:	e00e      	b.n	8101de0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101dc8:	2b02      	cmp	r3, #2
 8101dca:	d009      	beq.n	8101de0 <prvDeleteTCB+0x54>
 8101dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101dd0:	f383 8811 	msr	BASEPRI, r3
 8101dd4:	f3bf 8f6f 	isb	sy
 8101dd8:	f3bf 8f4f 	dsb	sy
 8101ddc:	60fb      	str	r3, [r7, #12]
 8101dde:	e7fe      	b.n	8101dde <prvDeleteTCB+0x52>
	}
 8101de0:	bf00      	nop
 8101de2:	3710      	adds	r7, #16
 8101de4:	46bd      	mov	sp, r7
 8101de6:	bd80      	pop	{r7, pc}

08101de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8101de8:	b480      	push	{r7}
 8101dea:	b083      	sub	sp, #12
 8101dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101dee:	4b0c      	ldr	r3, [pc, #48]	; (8101e20 <prvResetNextTaskUnblockTime+0x38>)
 8101df0:	681b      	ldr	r3, [r3, #0]
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d104      	bne.n	8101e02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8101df8:	4b0a      	ldr	r3, [pc, #40]	; (8101e24 <prvResetNextTaskUnblockTime+0x3c>)
 8101dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8101dfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8101e00:	e008      	b.n	8101e14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101e02:	4b07      	ldr	r3, [pc, #28]	; (8101e20 <prvResetNextTaskUnblockTime+0x38>)
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	68db      	ldr	r3, [r3, #12]
 8101e08:	68db      	ldr	r3, [r3, #12]
 8101e0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	685b      	ldr	r3, [r3, #4]
 8101e10:	4a04      	ldr	r2, [pc, #16]	; (8101e24 <prvResetNextTaskUnblockTime+0x3c>)
 8101e12:	6013      	str	r3, [r2, #0]
}
 8101e14:	bf00      	nop
 8101e16:	370c      	adds	r7, #12
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr
 8101e20:	10000338 	.word	0x10000338
 8101e24:	100003a0 	.word	0x100003a0

08101e28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8101e28:	b580      	push	{r7, lr}
 8101e2a:	b084      	sub	sp, #16
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	6078      	str	r0, [r7, #4]
 8101e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8101e32:	4b29      	ldr	r3, [pc, #164]	; (8101ed8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8101e34:	681b      	ldr	r3, [r3, #0]
 8101e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8101e38:	4b28      	ldr	r3, [pc, #160]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	3304      	adds	r3, #4
 8101e3e:	4618      	mov	r0, r3
 8101e40:	f7ff fb19 	bl	8101476 <uxListRemove>
 8101e44:	4603      	mov	r3, r0
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d10b      	bne.n	8101e62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8101e4a:	4b24      	ldr	r3, [pc, #144]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e50:	2201      	movs	r2, #1
 8101e52:	fa02 f303 	lsl.w	r3, r2, r3
 8101e56:	43da      	mvns	r2, r3
 8101e58:	4b21      	ldr	r3, [pc, #132]	; (8101ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	4013      	ands	r3, r2
 8101e5e:	4a20      	ldr	r2, [pc, #128]	; (8101ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8101e60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e68:	d10a      	bne.n	8101e80 <prvAddCurrentTaskToDelayedList+0x58>
 8101e6a:	683b      	ldr	r3, [r7, #0]
 8101e6c:	2b00      	cmp	r3, #0
 8101e6e:	d007      	beq.n	8101e80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8101e70:	4b1a      	ldr	r3, [pc, #104]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	3304      	adds	r3, #4
 8101e76:	4619      	mov	r1, r3
 8101e78:	481a      	ldr	r0, [pc, #104]	; (8101ee4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8101e7a:	f7ff fa9f 	bl	81013bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8101e7e:	e026      	b.n	8101ece <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8101e80:	68fa      	ldr	r2, [r7, #12]
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	4413      	add	r3, r2
 8101e86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8101e88:	4b14      	ldr	r3, [pc, #80]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	68ba      	ldr	r2, [r7, #8]
 8101e8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8101e90:	68ba      	ldr	r2, [r7, #8]
 8101e92:	68fb      	ldr	r3, [r7, #12]
 8101e94:	429a      	cmp	r2, r3
 8101e96:	d209      	bcs.n	8101eac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8101e98:	4b13      	ldr	r3, [pc, #76]	; (8101ee8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8101e9a:	681a      	ldr	r2, [r3, #0]
 8101e9c:	4b0f      	ldr	r3, [pc, #60]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	3304      	adds	r3, #4
 8101ea2:	4619      	mov	r1, r3
 8101ea4:	4610      	mov	r0, r2
 8101ea6:	f7ff faad 	bl	8101404 <vListInsert>
}
 8101eaa:	e010      	b.n	8101ece <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8101eac:	4b0f      	ldr	r3, [pc, #60]	; (8101eec <prvAddCurrentTaskToDelayedList+0xc4>)
 8101eae:	681a      	ldr	r2, [r3, #0]
 8101eb0:	4b0a      	ldr	r3, [pc, #40]	; (8101edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	3304      	adds	r3, #4
 8101eb6:	4619      	mov	r1, r3
 8101eb8:	4610      	mov	r0, r2
 8101eba:	f7ff faa3 	bl	8101404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8101ebe:	4b0c      	ldr	r3, [pc, #48]	; (8101ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	68ba      	ldr	r2, [r7, #8]
 8101ec4:	429a      	cmp	r2, r3
 8101ec6:	d202      	bcs.n	8101ece <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8101ec8:	4a09      	ldr	r2, [pc, #36]	; (8101ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8101eca:	68bb      	ldr	r3, [r7, #8]
 8101ecc:	6013      	str	r3, [r2, #0]
}
 8101ece:	bf00      	nop
 8101ed0:	3710      	adds	r7, #16
 8101ed2:	46bd      	mov	sp, r7
 8101ed4:	bd80      	pop	{r7, pc}
 8101ed6:	bf00      	nop
 8101ed8:	10000384 	.word	0x10000384
 8101edc:	10000280 	.word	0x10000280
 8101ee0:	10000388 	.word	0x10000388
 8101ee4:	1000036c 	.word	0x1000036c
 8101ee8:	1000033c 	.word	0x1000033c
 8101eec:	10000338 	.word	0x10000338
 8101ef0:	100003a0 	.word	0x100003a0

08101ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101ef4:	b480      	push	{r7}
 8101ef6:	b085      	sub	sp, #20
 8101ef8:	af00      	add	r7, sp, #0
 8101efa:	60f8      	str	r0, [r7, #12]
 8101efc:	60b9      	str	r1, [r7, #8]
 8101efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101f00:	68fb      	ldr	r3, [r7, #12]
 8101f02:	3b04      	subs	r3, #4
 8101f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101f06:	68fb      	ldr	r3, [r7, #12]
 8101f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101f0e:	68fb      	ldr	r3, [r7, #12]
 8101f10:	3b04      	subs	r3, #4
 8101f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101f14:	68bb      	ldr	r3, [r7, #8]
 8101f16:	f023 0201 	bic.w	r2, r3, #1
 8101f1a:	68fb      	ldr	r3, [r7, #12]
 8101f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101f1e:	68fb      	ldr	r3, [r7, #12]
 8101f20:	3b04      	subs	r3, #4
 8101f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101f24:	4a0c      	ldr	r2, [pc, #48]	; (8101f58 <pxPortInitialiseStack+0x64>)
 8101f26:	68fb      	ldr	r3, [r7, #12]
 8101f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101f2a:	68fb      	ldr	r3, [r7, #12]
 8101f2c:	3b14      	subs	r3, #20
 8101f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101f30:	687a      	ldr	r2, [r7, #4]
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101f36:	68fb      	ldr	r3, [r7, #12]
 8101f38:	3b04      	subs	r3, #4
 8101f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101f3c:	68fb      	ldr	r3, [r7, #12]
 8101f3e:	f06f 0202 	mvn.w	r2, #2
 8101f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101f44:	68fb      	ldr	r3, [r7, #12]
 8101f46:	3b20      	subs	r3, #32
 8101f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101f4a:	68fb      	ldr	r3, [r7, #12]
}
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	3714      	adds	r7, #20
 8101f50:	46bd      	mov	sp, r7
 8101f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f56:	4770      	bx	lr
 8101f58:	08101f5d 	.word	0x08101f5d

08101f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101f5c:	b480      	push	{r7}
 8101f5e:	b085      	sub	sp, #20
 8101f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8101f62:	2300      	movs	r3, #0
 8101f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101f66:	4b11      	ldr	r3, [pc, #68]	; (8101fac <prvTaskExitError+0x50>)
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f6e:	d009      	beq.n	8101f84 <prvTaskExitError+0x28>
 8101f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f74:	f383 8811 	msr	BASEPRI, r3
 8101f78:	f3bf 8f6f 	isb	sy
 8101f7c:	f3bf 8f4f 	dsb	sy
 8101f80:	60fb      	str	r3, [r7, #12]
 8101f82:	e7fe      	b.n	8101f82 <prvTaskExitError+0x26>
 8101f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f88:	f383 8811 	msr	BASEPRI, r3
 8101f8c:	f3bf 8f6f 	isb	sy
 8101f90:	f3bf 8f4f 	dsb	sy
 8101f94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101f96:	bf00      	nop
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	2b00      	cmp	r3, #0
 8101f9c:	d0fc      	beq.n	8101f98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101f9e:	bf00      	nop
 8101fa0:	3714      	adds	r7, #20
 8101fa2:	46bd      	mov	sp, r7
 8101fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa8:	4770      	bx	lr
 8101faa:	bf00      	nop
 8101fac:	1000000c 	.word	0x1000000c

08101fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101fb0:	4b07      	ldr	r3, [pc, #28]	; (8101fd0 <pxCurrentTCBConst2>)
 8101fb2:	6819      	ldr	r1, [r3, #0]
 8101fb4:	6808      	ldr	r0, [r1, #0]
 8101fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101fba:	f380 8809 	msr	PSP, r0
 8101fbe:	f3bf 8f6f 	isb	sy
 8101fc2:	f04f 0000 	mov.w	r0, #0
 8101fc6:	f380 8811 	msr	BASEPRI, r0
 8101fca:	4770      	bx	lr
 8101fcc:	f3af 8000 	nop.w

08101fd0 <pxCurrentTCBConst2>:
 8101fd0:	10000280 	.word	0x10000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101fd4:	bf00      	nop
 8101fd6:	bf00      	nop

08101fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101fd8:	4808      	ldr	r0, [pc, #32]	; (8101ffc <prvPortStartFirstTask+0x24>)
 8101fda:	6800      	ldr	r0, [r0, #0]
 8101fdc:	6800      	ldr	r0, [r0, #0]
 8101fde:	f380 8808 	msr	MSP, r0
 8101fe2:	f04f 0000 	mov.w	r0, #0
 8101fe6:	f380 8814 	msr	CONTROL, r0
 8101fea:	b662      	cpsie	i
 8101fec:	b661      	cpsie	f
 8101fee:	f3bf 8f4f 	dsb	sy
 8101ff2:	f3bf 8f6f 	isb	sy
 8101ff6:	df00      	svc	0
 8101ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8101ffa:	bf00      	nop
 8101ffc:	e000ed08 	.word	0xe000ed08

08102000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8102000:	b580      	push	{r7, lr}
 8102002:	b086      	sub	sp, #24
 8102004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8102006:	4b44      	ldr	r3, [pc, #272]	; (8102118 <xPortStartScheduler+0x118>)
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	4a44      	ldr	r2, [pc, #272]	; (810211c <xPortStartScheduler+0x11c>)
 810200c:	4293      	cmp	r3, r2
 810200e:	d109      	bne.n	8102024 <xPortStartScheduler+0x24>
 8102010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102014:	f383 8811 	msr	BASEPRI, r3
 8102018:	f3bf 8f6f 	isb	sy
 810201c:	f3bf 8f4f 	dsb	sy
 8102020:	613b      	str	r3, [r7, #16]
 8102022:	e7fe      	b.n	8102022 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8102024:	4b3c      	ldr	r3, [pc, #240]	; (8102118 <xPortStartScheduler+0x118>)
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	4a3d      	ldr	r2, [pc, #244]	; (8102120 <xPortStartScheduler+0x120>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d109      	bne.n	8102042 <xPortStartScheduler+0x42>
 810202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102032:	f383 8811 	msr	BASEPRI, r3
 8102036:	f3bf 8f6f 	isb	sy
 810203a:	f3bf 8f4f 	dsb	sy
 810203e:	60fb      	str	r3, [r7, #12]
 8102040:	e7fe      	b.n	8102040 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102042:	4b38      	ldr	r3, [pc, #224]	; (8102124 <xPortStartScheduler+0x124>)
 8102044:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8102046:	697b      	ldr	r3, [r7, #20]
 8102048:	781b      	ldrb	r3, [r3, #0]
 810204a:	b2db      	uxtb	r3, r3
 810204c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810204e:	697b      	ldr	r3, [r7, #20]
 8102050:	22ff      	movs	r2, #255	; 0xff
 8102052:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102054:	697b      	ldr	r3, [r7, #20]
 8102056:	781b      	ldrb	r3, [r3, #0]
 8102058:	b2db      	uxtb	r3, r3
 810205a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810205c:	78fb      	ldrb	r3, [r7, #3]
 810205e:	b2db      	uxtb	r3, r3
 8102060:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102064:	b2da      	uxtb	r2, r3
 8102066:	4b30      	ldr	r3, [pc, #192]	; (8102128 <xPortStartScheduler+0x128>)
 8102068:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810206a:	4b30      	ldr	r3, [pc, #192]	; (810212c <xPortStartScheduler+0x12c>)
 810206c:	2207      	movs	r2, #7
 810206e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102070:	e009      	b.n	8102086 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8102072:	4b2e      	ldr	r3, [pc, #184]	; (810212c <xPortStartScheduler+0x12c>)
 8102074:	681b      	ldr	r3, [r3, #0]
 8102076:	3b01      	subs	r3, #1
 8102078:	4a2c      	ldr	r2, [pc, #176]	; (810212c <xPortStartScheduler+0x12c>)
 810207a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810207c:	78fb      	ldrb	r3, [r7, #3]
 810207e:	b2db      	uxtb	r3, r3
 8102080:	005b      	lsls	r3, r3, #1
 8102082:	b2db      	uxtb	r3, r3
 8102084:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102086:	78fb      	ldrb	r3, [r7, #3]
 8102088:	b2db      	uxtb	r3, r3
 810208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810208e:	2b80      	cmp	r3, #128	; 0x80
 8102090:	d0ef      	beq.n	8102072 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8102092:	4b26      	ldr	r3, [pc, #152]	; (810212c <xPortStartScheduler+0x12c>)
 8102094:	681b      	ldr	r3, [r3, #0]
 8102096:	f1c3 0307 	rsb	r3, r3, #7
 810209a:	2b04      	cmp	r3, #4
 810209c:	d009      	beq.n	81020b2 <xPortStartScheduler+0xb2>
 810209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020a2:	f383 8811 	msr	BASEPRI, r3
 81020a6:	f3bf 8f6f 	isb	sy
 81020aa:	f3bf 8f4f 	dsb	sy
 81020ae:	60bb      	str	r3, [r7, #8]
 81020b0:	e7fe      	b.n	81020b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81020b2:	4b1e      	ldr	r3, [pc, #120]	; (810212c <xPortStartScheduler+0x12c>)
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	021b      	lsls	r3, r3, #8
 81020b8:	4a1c      	ldr	r2, [pc, #112]	; (810212c <xPortStartScheduler+0x12c>)
 81020ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81020bc:	4b1b      	ldr	r3, [pc, #108]	; (810212c <xPortStartScheduler+0x12c>)
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81020c4:	4a19      	ldr	r2, [pc, #100]	; (810212c <xPortStartScheduler+0x12c>)
 81020c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	b2da      	uxtb	r2, r3
 81020cc:	697b      	ldr	r3, [r7, #20]
 81020ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81020d0:	4b17      	ldr	r3, [pc, #92]	; (8102130 <xPortStartScheduler+0x130>)
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	4a16      	ldr	r2, [pc, #88]	; (8102130 <xPortStartScheduler+0x130>)
 81020d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81020da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81020dc:	4b14      	ldr	r3, [pc, #80]	; (8102130 <xPortStartScheduler+0x130>)
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	4a13      	ldr	r2, [pc, #76]	; (8102130 <xPortStartScheduler+0x130>)
 81020e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81020e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81020e8:	f000 f8d6 	bl	8102298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81020ec:	4b11      	ldr	r3, [pc, #68]	; (8102134 <xPortStartScheduler+0x134>)
 81020ee:	2200      	movs	r2, #0
 81020f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81020f2:	f000 f8f5 	bl	81022e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81020f6:	4b10      	ldr	r3, [pc, #64]	; (8102138 <xPortStartScheduler+0x138>)
 81020f8:	681b      	ldr	r3, [r3, #0]
 81020fa:	4a0f      	ldr	r2, [pc, #60]	; (8102138 <xPortStartScheduler+0x138>)
 81020fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8102100:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8102102:	f7ff ff69 	bl	8101fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8102106:	f7ff fd63 	bl	8101bd0 <vTaskSwitchContext>
	prvTaskExitError();
 810210a:	f7ff ff27 	bl	8101f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810210e:	2300      	movs	r3, #0
}
 8102110:	4618      	mov	r0, r3
 8102112:	3718      	adds	r7, #24
 8102114:	46bd      	mov	sp, r7
 8102116:	bd80      	pop	{r7, pc}
 8102118:	e000ed00 	.word	0xe000ed00
 810211c:	410fc271 	.word	0x410fc271
 8102120:	410fc270 	.word	0x410fc270
 8102124:	e000e400 	.word	0xe000e400
 8102128:	100003ac 	.word	0x100003ac
 810212c:	100003b0 	.word	0x100003b0
 8102130:	e000ed20 	.word	0xe000ed20
 8102134:	1000000c 	.word	0x1000000c
 8102138:	e000ef34 	.word	0xe000ef34

0810213c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810213c:	b480      	push	{r7}
 810213e:	b083      	sub	sp, #12
 8102140:	af00      	add	r7, sp, #0
 8102142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102146:	f383 8811 	msr	BASEPRI, r3
 810214a:	f3bf 8f6f 	isb	sy
 810214e:	f3bf 8f4f 	dsb	sy
 8102152:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102154:	4b0e      	ldr	r3, [pc, #56]	; (8102190 <vPortEnterCritical+0x54>)
 8102156:	681b      	ldr	r3, [r3, #0]
 8102158:	3301      	adds	r3, #1
 810215a:	4a0d      	ldr	r2, [pc, #52]	; (8102190 <vPortEnterCritical+0x54>)
 810215c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810215e:	4b0c      	ldr	r3, [pc, #48]	; (8102190 <vPortEnterCritical+0x54>)
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	2b01      	cmp	r3, #1
 8102164:	d10e      	bne.n	8102184 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102166:	4b0b      	ldr	r3, [pc, #44]	; (8102194 <vPortEnterCritical+0x58>)
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	b2db      	uxtb	r3, r3
 810216c:	2b00      	cmp	r3, #0
 810216e:	d009      	beq.n	8102184 <vPortEnterCritical+0x48>
 8102170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102174:	f383 8811 	msr	BASEPRI, r3
 8102178:	f3bf 8f6f 	isb	sy
 810217c:	f3bf 8f4f 	dsb	sy
 8102180:	603b      	str	r3, [r7, #0]
 8102182:	e7fe      	b.n	8102182 <vPortEnterCritical+0x46>
	}
}
 8102184:	bf00      	nop
 8102186:	370c      	adds	r7, #12
 8102188:	46bd      	mov	sp, r7
 810218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218e:	4770      	bx	lr
 8102190:	1000000c 	.word	0x1000000c
 8102194:	e000ed04 	.word	0xe000ed04

08102198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8102198:	b480      	push	{r7}
 810219a:	b083      	sub	sp, #12
 810219c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810219e:	4b11      	ldr	r3, [pc, #68]	; (81021e4 <vPortExitCritical+0x4c>)
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	d109      	bne.n	81021ba <vPortExitCritical+0x22>
 81021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81021aa:	f383 8811 	msr	BASEPRI, r3
 81021ae:	f3bf 8f6f 	isb	sy
 81021b2:	f3bf 8f4f 	dsb	sy
 81021b6:	607b      	str	r3, [r7, #4]
 81021b8:	e7fe      	b.n	81021b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 81021ba:	4b0a      	ldr	r3, [pc, #40]	; (81021e4 <vPortExitCritical+0x4c>)
 81021bc:	681b      	ldr	r3, [r3, #0]
 81021be:	3b01      	subs	r3, #1
 81021c0:	4a08      	ldr	r2, [pc, #32]	; (81021e4 <vPortExitCritical+0x4c>)
 81021c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81021c4:	4b07      	ldr	r3, [pc, #28]	; (81021e4 <vPortExitCritical+0x4c>)
 81021c6:	681b      	ldr	r3, [r3, #0]
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d104      	bne.n	81021d6 <vPortExitCritical+0x3e>
 81021cc:	2300      	movs	r3, #0
 81021ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81021d0:	683b      	ldr	r3, [r7, #0]
 81021d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 81021d6:	bf00      	nop
 81021d8:	370c      	adds	r7, #12
 81021da:	46bd      	mov	sp, r7
 81021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021e0:	4770      	bx	lr
 81021e2:	bf00      	nop
 81021e4:	1000000c 	.word	0x1000000c
	...

081021f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81021f0:	f3ef 8009 	mrs	r0, PSP
 81021f4:	f3bf 8f6f 	isb	sy
 81021f8:	4b15      	ldr	r3, [pc, #84]	; (8102250 <pxCurrentTCBConst>)
 81021fa:	681a      	ldr	r2, [r3, #0]
 81021fc:	f01e 0f10 	tst.w	lr, #16
 8102200:	bf08      	it	eq
 8102202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8102206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810220a:	6010      	str	r0, [r2, #0]
 810220c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8102210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8102214:	f380 8811 	msr	BASEPRI, r0
 8102218:	f3bf 8f4f 	dsb	sy
 810221c:	f3bf 8f6f 	isb	sy
 8102220:	f7ff fcd6 	bl	8101bd0 <vTaskSwitchContext>
 8102224:	f04f 0000 	mov.w	r0, #0
 8102228:	f380 8811 	msr	BASEPRI, r0
 810222c:	bc09      	pop	{r0, r3}
 810222e:	6819      	ldr	r1, [r3, #0]
 8102230:	6808      	ldr	r0, [r1, #0]
 8102232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102236:	f01e 0f10 	tst.w	lr, #16
 810223a:	bf08      	it	eq
 810223c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102240:	f380 8809 	msr	PSP, r0
 8102244:	f3bf 8f6f 	isb	sy
 8102248:	4770      	bx	lr
 810224a:	bf00      	nop
 810224c:	f3af 8000 	nop.w

08102250 <pxCurrentTCBConst>:
 8102250:	10000280 	.word	0x10000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102254:	bf00      	nop
 8102256:	bf00      	nop

08102258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102258:	b580      	push	{r7, lr}
 810225a:	b082      	sub	sp, #8
 810225c:	af00      	add	r7, sp, #0
	__asm volatile
 810225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102262:	f383 8811 	msr	BASEPRI, r3
 8102266:	f3bf 8f6f 	isb	sy
 810226a:	f3bf 8f4f 	dsb	sy
 810226e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102270:	f7ff fbf6 	bl	8101a60 <xTaskIncrementTick>
 8102274:	4603      	mov	r3, r0
 8102276:	2b00      	cmp	r3, #0
 8102278:	d003      	beq.n	8102282 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810227a:	4b06      	ldr	r3, [pc, #24]	; (8102294 <SysTick_Handler+0x3c>)
 810227c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102280:	601a      	str	r2, [r3, #0]
 8102282:	2300      	movs	r3, #0
 8102284:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102286:	683b      	ldr	r3, [r7, #0]
 8102288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810228c:	bf00      	nop
 810228e:	3708      	adds	r7, #8
 8102290:	46bd      	mov	sp, r7
 8102292:	bd80      	pop	{r7, pc}
 8102294:	e000ed04 	.word	0xe000ed04

08102298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810229c:	4b0b      	ldr	r3, [pc, #44]	; (81022cc <vPortSetupTimerInterrupt+0x34>)
 810229e:	2200      	movs	r2, #0
 81022a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81022a2:	4b0b      	ldr	r3, [pc, #44]	; (81022d0 <vPortSetupTimerInterrupt+0x38>)
 81022a4:	2200      	movs	r2, #0
 81022a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81022a8:	4b0a      	ldr	r3, [pc, #40]	; (81022d4 <vPortSetupTimerInterrupt+0x3c>)
 81022aa:	681b      	ldr	r3, [r3, #0]
 81022ac:	4a0a      	ldr	r2, [pc, #40]	; (81022d8 <vPortSetupTimerInterrupt+0x40>)
 81022ae:	fba2 2303 	umull	r2, r3, r2, r3
 81022b2:	099b      	lsrs	r3, r3, #6
 81022b4:	4a09      	ldr	r2, [pc, #36]	; (81022dc <vPortSetupTimerInterrupt+0x44>)
 81022b6:	3b01      	subs	r3, #1
 81022b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81022ba:	4b04      	ldr	r3, [pc, #16]	; (81022cc <vPortSetupTimerInterrupt+0x34>)
 81022bc:	2207      	movs	r2, #7
 81022be:	601a      	str	r2, [r3, #0]
}
 81022c0:	bf00      	nop
 81022c2:	46bd      	mov	sp, r7
 81022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c8:	4770      	bx	lr
 81022ca:	bf00      	nop
 81022cc:	e000e010 	.word	0xe000e010
 81022d0:	e000e018 	.word	0xe000e018
 81022d4:	10000004 	.word	0x10000004
 81022d8:	10624dd3 	.word	0x10624dd3
 81022dc:	e000e014 	.word	0xe000e014

081022e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81022e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81022f0 <vPortEnableVFP+0x10>
 81022e4:	6801      	ldr	r1, [r0, #0]
 81022e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81022ea:	6001      	str	r1, [r0, #0]
 81022ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81022ee:	bf00      	nop
 81022f0:	e000ed88 	.word	0xe000ed88

081022f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81022f4:	b580      	push	{r7, lr}
 81022f6:	b08a      	sub	sp, #40	; 0x28
 81022f8:	af00      	add	r7, sp, #0
 81022fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81022fc:	2300      	movs	r3, #0
 81022fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8102300:	f7ff fb04 	bl	810190c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8102304:	4b57      	ldr	r3, [pc, #348]	; (8102464 <pvPortMalloc+0x170>)
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	2b00      	cmp	r3, #0
 810230a:	d101      	bne.n	8102310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810230c:	f000 f90c 	bl	8102528 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8102310:	4b55      	ldr	r3, [pc, #340]	; (8102468 <pvPortMalloc+0x174>)
 8102312:	681a      	ldr	r2, [r3, #0]
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	4013      	ands	r3, r2
 8102318:	2b00      	cmp	r3, #0
 810231a:	f040 808c 	bne.w	8102436 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	2b00      	cmp	r3, #0
 8102322:	d01c      	beq.n	810235e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8102324:	2208      	movs	r2, #8
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	4413      	add	r3, r2
 810232a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	f003 0307 	and.w	r3, r3, #7
 8102332:	2b00      	cmp	r3, #0
 8102334:	d013      	beq.n	810235e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	f023 0307 	bic.w	r3, r3, #7
 810233c:	3308      	adds	r3, #8
 810233e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	f003 0307 	and.w	r3, r3, #7
 8102346:	2b00      	cmp	r3, #0
 8102348:	d009      	beq.n	810235e <pvPortMalloc+0x6a>
	__asm volatile
 810234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810234e:	f383 8811 	msr	BASEPRI, r3
 8102352:	f3bf 8f6f 	isb	sy
 8102356:	f3bf 8f4f 	dsb	sy
 810235a:	617b      	str	r3, [r7, #20]
 810235c:	e7fe      	b.n	810235c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	2b00      	cmp	r3, #0
 8102362:	d068      	beq.n	8102436 <pvPortMalloc+0x142>
 8102364:	4b41      	ldr	r3, [pc, #260]	; (810246c <pvPortMalloc+0x178>)
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	687a      	ldr	r2, [r7, #4]
 810236a:	429a      	cmp	r2, r3
 810236c:	d863      	bhi.n	8102436 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810236e:	4b40      	ldr	r3, [pc, #256]	; (8102470 <pvPortMalloc+0x17c>)
 8102370:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8102372:	4b3f      	ldr	r3, [pc, #252]	; (8102470 <pvPortMalloc+0x17c>)
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102378:	e004      	b.n	8102384 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 810237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810237c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102386:	685b      	ldr	r3, [r3, #4]
 8102388:	687a      	ldr	r2, [r7, #4]
 810238a:	429a      	cmp	r2, r3
 810238c:	d903      	bls.n	8102396 <pvPortMalloc+0xa2>
 810238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	2b00      	cmp	r3, #0
 8102394:	d1f1      	bne.n	810237a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8102396:	4b33      	ldr	r3, [pc, #204]	; (8102464 <pvPortMalloc+0x170>)
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810239c:	429a      	cmp	r2, r3
 810239e:	d04a      	beq.n	8102436 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81023a0:	6a3b      	ldr	r3, [r7, #32]
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	2208      	movs	r2, #8
 81023a6:	4413      	add	r3, r2
 81023a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023ac:	681a      	ldr	r2, [r3, #0]
 81023ae:	6a3b      	ldr	r3, [r7, #32]
 81023b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023b4:	685a      	ldr	r2, [r3, #4]
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	1ad2      	subs	r2, r2, r3
 81023ba:	2308      	movs	r3, #8
 81023bc:	005b      	lsls	r3, r3, #1
 81023be:	429a      	cmp	r2, r3
 81023c0:	d91e      	bls.n	8102400 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	4413      	add	r3, r2
 81023c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81023ca:	69bb      	ldr	r3, [r7, #24]
 81023cc:	f003 0307 	and.w	r3, r3, #7
 81023d0:	2b00      	cmp	r3, #0
 81023d2:	d009      	beq.n	81023e8 <pvPortMalloc+0xf4>
 81023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81023d8:	f383 8811 	msr	BASEPRI, r3
 81023dc:	f3bf 8f6f 	isb	sy
 81023e0:	f3bf 8f4f 	dsb	sy
 81023e4:	613b      	str	r3, [r7, #16]
 81023e6:	e7fe      	b.n	81023e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023ea:	685a      	ldr	r2, [r3, #4]
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	1ad2      	subs	r2, r2, r3
 81023f0:	69bb      	ldr	r3, [r7, #24]
 81023f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023f6:	687a      	ldr	r2, [r7, #4]
 81023f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81023fa:	69b8      	ldr	r0, [r7, #24]
 81023fc:	f000 f8f6 	bl	81025ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8102400:	4b1a      	ldr	r3, [pc, #104]	; (810246c <pvPortMalloc+0x178>)
 8102402:	681a      	ldr	r2, [r3, #0]
 8102404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102406:	685b      	ldr	r3, [r3, #4]
 8102408:	1ad3      	subs	r3, r2, r3
 810240a:	4a18      	ldr	r2, [pc, #96]	; (810246c <pvPortMalloc+0x178>)
 810240c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810240e:	4b17      	ldr	r3, [pc, #92]	; (810246c <pvPortMalloc+0x178>)
 8102410:	681a      	ldr	r2, [r3, #0]
 8102412:	4b18      	ldr	r3, [pc, #96]	; (8102474 <pvPortMalloc+0x180>)
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	429a      	cmp	r2, r3
 8102418:	d203      	bcs.n	8102422 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810241a:	4b14      	ldr	r3, [pc, #80]	; (810246c <pvPortMalloc+0x178>)
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	4a15      	ldr	r2, [pc, #84]	; (8102474 <pvPortMalloc+0x180>)
 8102420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8102422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102424:	685a      	ldr	r2, [r3, #4]
 8102426:	4b10      	ldr	r3, [pc, #64]	; (8102468 <pvPortMalloc+0x174>)
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	431a      	orrs	r2, r3
 810242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810242e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8102430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102432:	2200      	movs	r2, #0
 8102434:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8102436:	f7ff fa77 	bl	8101928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810243a:	69fb      	ldr	r3, [r7, #28]
 810243c:	f003 0307 	and.w	r3, r3, #7
 8102440:	2b00      	cmp	r3, #0
 8102442:	d009      	beq.n	8102458 <pvPortMalloc+0x164>
 8102444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102448:	f383 8811 	msr	BASEPRI, r3
 810244c:	f3bf 8f6f 	isb	sy
 8102450:	f3bf 8f4f 	dsb	sy
 8102454:	60fb      	str	r3, [r7, #12]
 8102456:	e7fe      	b.n	8102456 <pvPortMalloc+0x162>
	return pvReturn;
 8102458:	69fb      	ldr	r3, [r7, #28]
}
 810245a:	4618      	mov	r0, r3
 810245c:	3728      	adds	r7, #40	; 0x28
 810245e:	46bd      	mov	sp, r7
 8102460:	bd80      	pop	{r7, pc}
 8102462:	bf00      	nop
 8102464:	10003fbc 	.word	0x10003fbc
 8102468:	10003fc8 	.word	0x10003fc8
 810246c:	10003fc0 	.word	0x10003fc0
 8102470:	10003fb4 	.word	0x10003fb4
 8102474:	10003fc4 	.word	0x10003fc4

08102478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8102478:	b580      	push	{r7, lr}
 810247a:	b086      	sub	sp, #24
 810247c:	af00      	add	r7, sp, #0
 810247e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	2b00      	cmp	r3, #0
 8102488:	d046      	beq.n	8102518 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810248a:	2308      	movs	r3, #8
 810248c:	425b      	negs	r3, r3
 810248e:	697a      	ldr	r2, [r7, #20]
 8102490:	4413      	add	r3, r2
 8102492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8102494:	697b      	ldr	r3, [r7, #20]
 8102496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8102498:	693b      	ldr	r3, [r7, #16]
 810249a:	685a      	ldr	r2, [r3, #4]
 810249c:	4b20      	ldr	r3, [pc, #128]	; (8102520 <vPortFree+0xa8>)
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	4013      	ands	r3, r2
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d109      	bne.n	81024ba <vPortFree+0x42>
 81024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81024aa:	f383 8811 	msr	BASEPRI, r3
 81024ae:	f3bf 8f6f 	isb	sy
 81024b2:	f3bf 8f4f 	dsb	sy
 81024b6:	60fb      	str	r3, [r7, #12]
 81024b8:	e7fe      	b.n	81024b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81024ba:	693b      	ldr	r3, [r7, #16]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	2b00      	cmp	r3, #0
 81024c0:	d009      	beq.n	81024d6 <vPortFree+0x5e>
 81024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81024c6:	f383 8811 	msr	BASEPRI, r3
 81024ca:	f3bf 8f6f 	isb	sy
 81024ce:	f3bf 8f4f 	dsb	sy
 81024d2:	60bb      	str	r3, [r7, #8]
 81024d4:	e7fe      	b.n	81024d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 81024d6:	693b      	ldr	r3, [r7, #16]
 81024d8:	685a      	ldr	r2, [r3, #4]
 81024da:	4b11      	ldr	r3, [pc, #68]	; (8102520 <vPortFree+0xa8>)
 81024dc:	681b      	ldr	r3, [r3, #0]
 81024de:	4013      	ands	r3, r2
 81024e0:	2b00      	cmp	r3, #0
 81024e2:	d019      	beq.n	8102518 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81024e4:	693b      	ldr	r3, [r7, #16]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	2b00      	cmp	r3, #0
 81024ea:	d115      	bne.n	8102518 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81024ec:	693b      	ldr	r3, [r7, #16]
 81024ee:	685a      	ldr	r2, [r3, #4]
 81024f0:	4b0b      	ldr	r3, [pc, #44]	; (8102520 <vPortFree+0xa8>)
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	43db      	mvns	r3, r3
 81024f6:	401a      	ands	r2, r3
 81024f8:	693b      	ldr	r3, [r7, #16]
 81024fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81024fc:	f7ff fa06 	bl	810190c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8102500:	693b      	ldr	r3, [r7, #16]
 8102502:	685a      	ldr	r2, [r3, #4]
 8102504:	4b07      	ldr	r3, [pc, #28]	; (8102524 <vPortFree+0xac>)
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	4413      	add	r3, r2
 810250a:	4a06      	ldr	r2, [pc, #24]	; (8102524 <vPortFree+0xac>)
 810250c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810250e:	6938      	ldr	r0, [r7, #16]
 8102510:	f000 f86c 	bl	81025ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8102514:	f7ff fa08 	bl	8101928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8102518:	bf00      	nop
 810251a:	3718      	adds	r7, #24
 810251c:	46bd      	mov	sp, r7
 810251e:	bd80      	pop	{r7, pc}
 8102520:	10003fc8 	.word	0x10003fc8
 8102524:	10003fc0 	.word	0x10003fc0

08102528 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8102528:	b480      	push	{r7}
 810252a:	b085      	sub	sp, #20
 810252c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810252e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8102532:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8102534:	4b27      	ldr	r3, [pc, #156]	; (81025d4 <prvHeapInit+0xac>)
 8102536:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	f003 0307 	and.w	r3, r3, #7
 810253e:	2b00      	cmp	r3, #0
 8102540:	d00c      	beq.n	810255c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8102542:	68fb      	ldr	r3, [r7, #12]
 8102544:	3307      	adds	r3, #7
 8102546:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	f023 0307 	bic.w	r3, r3, #7
 810254e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8102550:	68ba      	ldr	r2, [r7, #8]
 8102552:	68fb      	ldr	r3, [r7, #12]
 8102554:	1ad3      	subs	r3, r2, r3
 8102556:	4a1f      	ldr	r2, [pc, #124]	; (81025d4 <prvHeapInit+0xac>)
 8102558:	4413      	add	r3, r2
 810255a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8102560:	4a1d      	ldr	r2, [pc, #116]	; (81025d8 <prvHeapInit+0xb0>)
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8102566:	4b1c      	ldr	r3, [pc, #112]	; (81025d8 <prvHeapInit+0xb0>)
 8102568:	2200      	movs	r2, #0
 810256a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	68ba      	ldr	r2, [r7, #8]
 8102570:	4413      	add	r3, r2
 8102572:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8102574:	2208      	movs	r2, #8
 8102576:	68fb      	ldr	r3, [r7, #12]
 8102578:	1a9b      	subs	r3, r3, r2
 810257a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810257c:	68fb      	ldr	r3, [r7, #12]
 810257e:	f023 0307 	bic.w	r3, r3, #7
 8102582:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	4a15      	ldr	r2, [pc, #84]	; (81025dc <prvHeapInit+0xb4>)
 8102588:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810258a:	4b14      	ldr	r3, [pc, #80]	; (81025dc <prvHeapInit+0xb4>)
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	2200      	movs	r2, #0
 8102590:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8102592:	4b12      	ldr	r3, [pc, #72]	; (81025dc <prvHeapInit+0xb4>)
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	2200      	movs	r2, #0
 8102598:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810259e:	683b      	ldr	r3, [r7, #0]
 81025a0:	68fa      	ldr	r2, [r7, #12]
 81025a2:	1ad2      	subs	r2, r2, r3
 81025a4:	683b      	ldr	r3, [r7, #0]
 81025a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81025a8:	4b0c      	ldr	r3, [pc, #48]	; (81025dc <prvHeapInit+0xb4>)
 81025aa:	681a      	ldr	r2, [r3, #0]
 81025ac:	683b      	ldr	r3, [r7, #0]
 81025ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81025b0:	683b      	ldr	r3, [r7, #0]
 81025b2:	685b      	ldr	r3, [r3, #4]
 81025b4:	4a0a      	ldr	r2, [pc, #40]	; (81025e0 <prvHeapInit+0xb8>)
 81025b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81025b8:	683b      	ldr	r3, [r7, #0]
 81025ba:	685b      	ldr	r3, [r3, #4]
 81025bc:	4a09      	ldr	r2, [pc, #36]	; (81025e4 <prvHeapInit+0xbc>)
 81025be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 81025c0:	4b09      	ldr	r3, [pc, #36]	; (81025e8 <prvHeapInit+0xc0>)
 81025c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81025c6:	601a      	str	r2, [r3, #0]
}
 81025c8:	bf00      	nop
 81025ca:	3714      	adds	r7, #20
 81025cc:	46bd      	mov	sp, r7
 81025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d2:	4770      	bx	lr
 81025d4:	100003b4 	.word	0x100003b4
 81025d8:	10003fb4 	.word	0x10003fb4
 81025dc:	10003fbc 	.word	0x10003fbc
 81025e0:	10003fc4 	.word	0x10003fc4
 81025e4:	10003fc0 	.word	0x10003fc0
 81025e8:	10003fc8 	.word	0x10003fc8

081025ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81025ec:	b480      	push	{r7}
 81025ee:	b085      	sub	sp, #20
 81025f0:	af00      	add	r7, sp, #0
 81025f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81025f4:	4b28      	ldr	r3, [pc, #160]	; (8102698 <prvInsertBlockIntoFreeList+0xac>)
 81025f6:	60fb      	str	r3, [r7, #12]
 81025f8:	e002      	b.n	8102600 <prvInsertBlockIntoFreeList+0x14>
 81025fa:	68fb      	ldr	r3, [r7, #12]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	60fb      	str	r3, [r7, #12]
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	687a      	ldr	r2, [r7, #4]
 8102606:	429a      	cmp	r2, r3
 8102608:	d8f7      	bhi.n	81025fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810260a:	68fb      	ldr	r3, [r7, #12]
 810260c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810260e:	68fb      	ldr	r3, [r7, #12]
 8102610:	685b      	ldr	r3, [r3, #4]
 8102612:	68ba      	ldr	r2, [r7, #8]
 8102614:	4413      	add	r3, r2
 8102616:	687a      	ldr	r2, [r7, #4]
 8102618:	429a      	cmp	r2, r3
 810261a:	d108      	bne.n	810262e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810261c:	68fb      	ldr	r3, [r7, #12]
 810261e:	685a      	ldr	r2, [r3, #4]
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	685b      	ldr	r3, [r3, #4]
 8102624:	441a      	add	r2, r3
 8102626:	68fb      	ldr	r3, [r7, #12]
 8102628:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	685b      	ldr	r3, [r3, #4]
 8102636:	68ba      	ldr	r2, [r7, #8]
 8102638:	441a      	add	r2, r3
 810263a:	68fb      	ldr	r3, [r7, #12]
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	429a      	cmp	r2, r3
 8102640:	d118      	bne.n	8102674 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8102642:	68fb      	ldr	r3, [r7, #12]
 8102644:	681a      	ldr	r2, [r3, #0]
 8102646:	4b15      	ldr	r3, [pc, #84]	; (810269c <prvInsertBlockIntoFreeList+0xb0>)
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	429a      	cmp	r2, r3
 810264c:	d00d      	beq.n	810266a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	685a      	ldr	r2, [r3, #4]
 8102652:	68fb      	ldr	r3, [r7, #12]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	685b      	ldr	r3, [r3, #4]
 8102658:	441a      	add	r2, r3
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	681a      	ldr	r2, [r3, #0]
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	601a      	str	r2, [r3, #0]
 8102668:	e008      	b.n	810267c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810266a:	4b0c      	ldr	r3, [pc, #48]	; (810269c <prvInsertBlockIntoFreeList+0xb0>)
 810266c:	681a      	ldr	r2, [r3, #0]
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	601a      	str	r2, [r3, #0]
 8102672:	e003      	b.n	810267c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	681a      	ldr	r2, [r3, #0]
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810267c:	68fa      	ldr	r2, [r7, #12]
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	429a      	cmp	r2, r3
 8102682:	d002      	beq.n	810268a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	687a      	ldr	r2, [r7, #4]
 8102688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810268a:	bf00      	nop
 810268c:	3714      	adds	r7, #20
 810268e:	46bd      	mov	sp, r7
 8102690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102694:	4770      	bx	lr
 8102696:	bf00      	nop
 8102698:	10003fb4 	.word	0x10003fb4
 810269c:	10003fbc 	.word	0x10003fbc

081026a0 <__libc_init_array>:
 81026a0:	b570      	push	{r4, r5, r6, lr}
 81026a2:	4e0d      	ldr	r6, [pc, #52]	; (81026d8 <__libc_init_array+0x38>)
 81026a4:	4c0d      	ldr	r4, [pc, #52]	; (81026dc <__libc_init_array+0x3c>)
 81026a6:	1ba4      	subs	r4, r4, r6
 81026a8:	10a4      	asrs	r4, r4, #2
 81026aa:	2500      	movs	r5, #0
 81026ac:	42a5      	cmp	r5, r4
 81026ae:	d109      	bne.n	81026c4 <__libc_init_array+0x24>
 81026b0:	4e0b      	ldr	r6, [pc, #44]	; (81026e0 <__libc_init_array+0x40>)
 81026b2:	4c0c      	ldr	r4, [pc, #48]	; (81026e4 <__libc_init_array+0x44>)
 81026b4:	f000 f818 	bl	81026e8 <_init>
 81026b8:	1ba4      	subs	r4, r4, r6
 81026ba:	10a4      	asrs	r4, r4, #2
 81026bc:	2500      	movs	r5, #0
 81026be:	42a5      	cmp	r5, r4
 81026c0:	d105      	bne.n	81026ce <__libc_init_array+0x2e>
 81026c2:	bd70      	pop	{r4, r5, r6, pc}
 81026c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81026c8:	4798      	blx	r3
 81026ca:	3501      	adds	r5, #1
 81026cc:	e7ee      	b.n	81026ac <__libc_init_array+0xc>
 81026ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81026d2:	4798      	blx	r3
 81026d4:	3501      	adds	r5, #1
 81026d6:	e7f2      	b.n	81026be <__libc_init_array+0x1e>
 81026d8:	08102740 	.word	0x08102740
 81026dc:	08102740 	.word	0x08102740
 81026e0:	08102740 	.word	0x08102740
 81026e4:	08102744 	.word	0x08102744

081026e8 <_init>:
 81026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81026ea:	bf00      	nop
 81026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81026ee:	bc08      	pop	{r3}
 81026f0:	469e      	mov	lr, r3
 81026f2:	4770      	bx	lr

081026f4 <_fini>:
 81026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81026f6:	bf00      	nop
 81026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81026fa:	bc08      	pop	{r3}
 81026fc:	469e      	mov	lr, r3
 81026fe:	4770      	bx	lr
